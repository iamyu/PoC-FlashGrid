
































































































































































































































































































































































































































































































































PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.






PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.








PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.
PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.







PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.






PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.







PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.







PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.
PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.






PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.






PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.







PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.







PL/SQL procedure successfully completed.








PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.








PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.







PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.
PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


SQL*Plus: Release 19.0.0.0.0 - Production on Thu Feb 20 21:45:21 2020
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.


SQL*Plus: Release 19.0.0.0.0 - Production on Thu Feb 20 21:45:21 2020
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.

Last Successful login time: Thu Feb 20 2020 21:45:07 +08:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2    3    4    5    6  Last Successful login time: Thu Feb 20 2020 21:45:21 +08:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2    3    4    5    6  
   DB Id    DB Name	 Inst Num Instance
----------- ------------ -------- ------------
 3890827801 P60SDB		2 p60sdb2

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> 
   DB Id    DB Name	 Inst Num Instance
----------- ------------ -------- ------------
 3890827801 P60SDB		2 p60sdb2

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> 
Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt. Default value is 'html'.

   'html'	   HTML format (default)
   'text'	   Text format
   'active-html'   Includes Performance Hub active report


Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt. Default value is 'html'.

   'html'	   HTML format (default)
   'text'	   Text format
   'active-html'   Includes Performance Hub active report






Type Specified: html

Type Specified: text


Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
  3890827801	 1	P60SDB	     p60sdb1	  mcracpoc1.ex
* 3890827801	 2	P60SDB	     p60sdb2	  mcracpoc2.ex

Using 3890827801 for database Id
Using	       2 for instance number
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
  3890827801	 1	P60SDB	     p60sdb1	  mcracpoc1.ex
* 3890827801	 2	P60SDB	     p60sdb2	  mcracpoc2.ex

Using 3890827801 for database Id
Using	       2 for instance number


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.




Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.



Listing the last day's Completed Snapshots

Listing the last day's Completed Snapshots
Instance     DB Name	  Snap Id	Snap Started	Snap Level
------------ ------------ ---------- ------------------ ----------

p60sdb2      P60SDB		 28  20 Feb 2020 07:00	  1
				 29  20 Feb 2020 08:00	  1
				 30  20 Feb 2020 14:53	  1
				 31  20 Feb 2020 16:00	  1
				 32  20 Feb 2020 17:00	  1
				 33  20 Feb 2020 20:03	  1
				 34  20 Feb 2020 20:09	  1
				 35  20 Feb 2020 20:12	  1
				 36  20 Feb 2020 20:15	  1
				 37  20 Feb 2020 20:22	  1
				 38  20 Feb 2020 20:32	  1
				 39  20 Feb 2020 20:38	  1
				 41  20 Feb 2020 20:44	  1
				 43  20 Feb 2020 20:52	  1
				 44  20 Feb 2020 20:59	  1
				 45  20 Feb 2020 21:14	  1
				 46  20 Feb 2020 21:26	  1
				 47  20 Feb 2020 21:32	  1
				 48  20 Feb 2020 21:45	  1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 47

End   Snapshot Id specified: 48

Instance     DB Name	  Snap Id	Snap Started	Snap Level
------------ ------------ ---------- ------------------ ----------

p60sdb2      P60SDB		 28  20 Feb 2020 07:00	  1
				 29  20 Feb 2020 08:00	  1
				 30  20 Feb 2020 14:53	  1
				 31  20 Feb 2020 16:00	  1
				 32  20 Feb 2020 17:00	  1
				 33  20 Feb 2020 20:03	  1
				 34  20 Feb 2020 20:09	  1
				 35  20 Feb 2020 20:12	  1
				 36  20 Feb 2020 20:15	  1
				 37  20 Feb 2020 20:22	  1
				 38  20 Feb 2020 20:32	  1
				 39  20 Feb 2020 20:38	  1
				 41  20 Feb 2020 20:44	  1
				 43  20 Feb 2020 20:52	  1
				 44  20 Feb 2020 20:59	  1
				 45  20 Feb 2020 21:14	  1
				 46  20 Feb 2020 21:26	  1
				 47  20 Feb 2020 21:32	  1
				 48  20 Feb 2020 21:45	  1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 47

End   Snapshot Id specified: 48




Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_2_47_48.txt.  To use this name,
press <return> to continue, otherwise enter an alternative.


Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_2_47_48.html.  To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr.txt

Using the report name awr.html

<html lang="en"><head><title>AWR Report for DB: P60SDB, Inst: p60sdb2, Snaps: 47-48</title>
<style type="text/css">
body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}
pre.awr  {font:8pt Courier;color:black; background:White;}
pre_sqltext.awr  {white-space: pre-wrap;}
h1.awr	 {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}
h2.awr	 {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
h3.awr {font:bold 16pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}
th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}
th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px}
td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}
td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}
td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}
td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}
td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}
td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}
td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}
td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}
td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}
table.tdiff {  border_collapse: collapse; }
table.tscl {width: 600;}
table.tscl tbody, table.tscl thead { display: block; }
table.tscl thead tr th {height: 12px;line-height: 12px;}
table.tscl tbody { height: 100px;overflow-y: auto; overflow-x: hidden;}
table.tscl tbody td, thead th {width: 200;}
.hidden   {position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;}
.pad   {margin-left:17px;}
.doublepad {margin-left:34px;}
</style></head><body class="awr">
<h1 class="awr">
WORKLOAD REPOSITORY report for

</h1>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays database instance information">
<tr><th class="awrbg" scope="col">DB Name</th><th class="awrbg" scope="col">DB Id</th><th class="awrbg" scope="col">Unique Name</th><th class="awrbg" scope="col">Role</th><th class="awrbg" scope="col">Edition</th><th class="awrbg" scope="col">Release</th><th class="awrbg" scope="col">RAC</th><th class="awrbg" scope="col">CDB</th></tr>
<tr><td scope="row" class='awrnc'>P60SDB</td><td align="right" class='awrnc'>3890827801</td><td class='awrnc'>p60sdb</td><td class='awrnc'>PRIMARY</td><td class='awrnc'>EE</td><td class='awrnc'>19.0.0.0.0</td><td class='awrnc'>YES</td><td class='awrnc'>NO</td></tr>
</table>
<p />
<p />
<table border="0" class="tdiff" summary="This table displays database instance information">
<tr><th class="awrbg" scope="col">Instance</th><th class="awrbg" scope="col">Inst Num</th><th class="awrbg" scope="col">Startup Time</th></tr>
<tr><td scope="row" class='awrnc'>p60sdb2</td><td align="right" class='awrnc'>2</td><td class='awrnc'>20-Feb-20 21:11</td></tr>
</table>
<p />
<p />
<table border="0" width="600" class="tdiff" summary="This table displays host information">
<tr><th class="awrbg" scope="col">Host Name</th><th class="awrbg" scope="col">Platform</th><th class="awrbg" scope="col">CPUs</th><th class="awrbg" scope="col">Cores</th><th class="awrbg" scope="col">Sockets</th><th class="awrbg" scope="col">Memory (GB)</th></tr>
<tr><td scope="row" class='awrnc'>mcracpoc2.example.com</td><td class='awrnc'>Linux x86 64-bit</td><td align="right" class='awrnc'> 128</td><td align="right" class='awrnc'>  64</td><td align="right" class='awrnc'>	4</td><td align="right" class='awrnc'> 2015.90</td></tr>
</table>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays snapshot information">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Snap Id</th><th class="awrbg" scope="col">Snap Time</th><th class="awrbg" scope="col">Sessions</th><th class="awrbg" scope="col">Cursors/Session</th><th class="awrbg" scope="col">Instances</th></tr>
<tr><td scope="row" class='awrnc'>Begin Snap:</td><td align="right" class='awrnc'>47</td><td align="center" class='awrnc'>20-Feb-20 21:32:34</td><td align="right" class='awrnc'>409</td><td align="right" class='awrnc'>      2.4</td><td align="right" class='awrnc'>2</td></tr>
<tr><td scope="row" class='awrc'>End Snap:</td><td align="right" class='awrc'>48</td><td align="center" class='awrc'>20-Feb-20 21:45:07</td><td align="right" class='awrc'>166</td><td align="right" class='awrc'>	 .5</td><td align="right" class='awrc'>2</td></tr>
<tr><td scope="row" class='awrnc'>Elapsed:</td><td class='awrnc'>&#160;</td><td align="center" class='awrnc'>		   12.56 (mins)</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DB Time:</td><td class='awrc'>&#160;</td><td align="center" class='awrc'>	     2,207.06 (mins)</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
</table>
<p />
<h3 class="awr"><a class="awr" name="99999"></a>Report Summary</h3>
<p />Top ADDM Findings by Average Active Sessions<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top ADDM findings by average active sessions"><tr><th class="awrbg" scope="col">Finding Name</th><th class="awrbg" scope="col">Avg active sessions of the task</th><th class="awrbg" scope="col">Percent active sessions of finding</th><th class="awrbg" scope="col">Task Name</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th></tr>
<tr><td class='awrc'>Interconnect Latency</td><td align="right" class='awrc'>175.86</td><td align="right" class='awrc'>1.0E+02</td><td scope="row" class='awrc'>ADDM:3890827801_2_48</td><td class='awrc'>20-Feb-20 21:32</td><td class='awrc'>20-Feb-20 21:45</td></tr>
<tr><td class='awrnc'>Top SQL Statements</td><td align="right" class='awrnc'>175.86</td><td align="right" class='awrnc'>99.41</td><td scope="row" class='awrnc'>ADDM:3890827801_2_48</td><td class='awrnc'>20-Feb-20 21:32</td><td class='awrnc'>20-Feb-20 21:45</td></tr>
<tr><td class='awrc'>&quot;User I/O&quot; wait Class</td><td align="right" class='awrc'>175.86</td><td align="right" class='awrc'>56.39</td><td scope="row" class='awrc'>ADDM:3890827801_2_48</td><td class='awrc'>20-Feb-20 21:32</td><td class='awrc'>20-Feb-20 21:45</td></tr>
<tr><td class='awrnc'>Global Cache Messaging</td><td align="right" class='awrnc'>175.86</td><td align="right" class='awrnc'>41.87</td><td scope="row" class='awrnc'>ADDM:3890827801_2_48</td><td class='awrnc'>20-Feb-20 21:32</td><td class='awrnc'>20-Feb-20 21:45</td></tr>
<tr><td class='awrc'>Undersized SGA</td><td align="right" class='awrc'>175.86</td><td align="right" class='awrc'>13.57</td><td scope="row" class='awrc'>ADDM:3890827801_2_48</td><td class='awrc'>20-Feb-20 21:32</td><td class='awrc'>20-Feb-20 21:45</td></tr>
</table><p />
<p />Load Profile<p />
<table border="0" width="600" class="tdiff" summary="This table displays load profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Per Second</th><th class="awrbg" scope="col">Per Transaction</th><th class="awrbg" scope="col">Per Exec</th><th class="awrbg" scope="col">Per Call</th></tr>
<tr><td scope="row" class='awrc'>DB Time(s):</td><td align="right" class='awrc'>	     175.7</td><td align="right" class='awrc'>		   521.4</td><td align="right" class='awrc'>	  0.01</td><td align="right" class='awrc'>     80.06</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU(s):</td><td align="right" class='awrnc'>		9.0</td><td align="right" class='awrnc'>	      26.7</td><td align="right" class='awrnc'>      0.00</td><td align="right" class='awrnc'>	    4.10</td></tr>
<tr><td scope="row" class='awrc'>Background CPU(s):</td><td align="right" class='awrc'> 	      1.5</td><td align="right" class='awrc'>		    4.5</td><td align="right" class='awrc'>	 0.00</td><td align="right" class='awrc'>      0.00</td></tr>
<tr><td scope="row" class='awrnc'>Redo size (bytes):</td><td align="right" class='awrnc'>	   12,915.3</td><td align="right" class='awrnc'>	  38,315.5</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Logical read (blocks):</td><td align="right" class='awrc'>	  1,658,674.0</td><td align="right" class='awrc'>	4,920,750.3</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Block changes:</td><td align="right" class='awrnc'>		   53.0</td><td align="right" class='awrnc'>		 157.4</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Physical read (blocks):</td><td align="right" class='awrc'>	      47,207.4</td><td align="right" class='awrc'>	   140,049.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Physical write (blocks):</td><td align="right" class='awrnc'> 	      4.3</td><td align="right" class='awrnc'>		    12.7</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Read IO requests:</td><td align="right" class='awrc'>		47,203.7</td><td align="right" class='awrc'>	     140,038.2</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write IO requests:</td><td align="right" class='awrnc'>		1.8</td><td align="right" class='awrnc'>	       5.4</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Read IO (MB):</td><td align="right" class='awrc'>	       368.8</td><td align="right" class='awrc'>	   1,094.1</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write IO (MB):</td><td align="right" class='awrnc'>		    0.0</td><td align="right" class='awrnc'>		   0.1</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM scan rows:</td><td align="right" class='awrc'>		 0.0</td><td align="right" class='awrc'>	       0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Session Logical Read IM:</td><td align="right" class='awrnc'> 	      0.0</td><td align="right" class='awrnc'>		     0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Global Cache blocks received:</td><td align="right" class='awrc'>		 2.2</td><td align="right" class='awrc'>	       6.4</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Global Cache blocks served:</td><td align="right" class='awrnc'>		 7.2</td><td align="right" class='awrnc'>	       21.5</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>User calls:</td><td align="right" class='awrc'>	       2.2</td><td align="right" class='awrc'>		     6.5</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parses (SQL):</td><td align="right" class='awrnc'>		   6.0</td><td align="right" class='awrnc'>		 17.7</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Hard parses (SQL):</td><td align="right" class='awrc'> 	      0.7</td><td align="right" class='awrc'>		    2.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL Work Area (MB):</td><td align="right" class='awrnc'>		 0.6</td><td align="right" class='awrnc'>		1.7</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Logons:</td><td align="right" class='awrc'>		   0.1</td><td align="right" class='awrc'>		 0.2</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>User logons:</td><td align="right" class='awrnc'>		  0.0</td><td align="right" class='awrnc'>		 0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Executes (SQL):</td><td align="right" class='awrc'>	      20,428.0</td><td align="right" class='awrc'>	    60,603.3</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Rollbacks:</td><td align="right" class='awrnc'>		0.0</td><td align="right" class='awrnc'>	       0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Transactions:</td><td align="right" class='awrc'>		 0.3</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
</table>
<p />
Instance Efficiency Percentages (Target 100%)
<p />
<table border="0" width="600" class="tdiff" summary="This table displays instance efficiency percentages">
<tr><td scope="row" class='awrc'>Buffer Nowait %:</td><td align="right" class='awrc'>		100.00</td><td class='awrc'>Redo NoWait %:</td><td align="right" class='awrc'>		 100.00</td></tr>
<tr><td scope="row" class='awrnc'>Buffer  Hit	%:</td><td align="right" class='awrnc'> 	   97.15</td><td class='awrnc'>In-memory Sort %:</td><td align="right" class='awrnc'>		100.00</td></tr>
<tr><td scope="row" class='awrc'>Library Hit   %:</td><td align="right" class='awrc'>		 99.96</td><td class='awrc'>Soft Parse %:</td><td align="right" class='awrc'>		 88.55</td></tr>
<tr><td scope="row" class='awrnc'>Execute to Parse %:</td><td align="right" class='awrnc'>	      99.97</td><td class='awrnc'>Latch Hit %:</td><td align="right" class='awrnc'>	       99.99</td></tr>
<tr><td scope="row" class='awrc'>Parse CPU to Parse Elapsd %:</td><td align="right" class='awrc'>	      8.53</td><td class='awrc'>% Non-Parse CPU:</td><td align="right" class='awrc'>		99.98</td></tr>
<tr><td scope="row" class='awrnc'>Flash Cache Hit %:</td><td align="right" class='awrnc'>	      0.00</td></tr>
</table>

<p />Top 10 Foreground Events by Total Wait Time<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top 10 wait events by total wait time"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (sec)</th><th class="awrbg" scope="col">Avg Wait</th><th class="awrbg" scope="col">% DB time</th><th class="awrbg" scope="col">Wait Class</th></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>560,366</td><td align="right" class='awrc'>57.8K</td><td align="right" class='awrc'>103.15ms</td><td align="right" class='awrc'>43.6</td><td class='awrc'>User I/O</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>348,638</td><td align="right" class='awrnc'>42.3K</td><td align="right" class='awrnc'>121.22ms</td><td align="right" class='awrnc'>31.9</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>1,171,285</td><td align="right" class='awrc'>16.8K</td><td align="right" class='awrc'>14.37ms</td><td align="right" class='awrc'>12.7</td><td class='awrc'>User I/O</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>257,262</td><td align="right" class='awrnc'>12.6K</td><td align="right" class='awrnc'>49.02ms</td><td align="right" class='awrnc'>9.5</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6776</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5.1</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>636</td><td align="right" class='awrnc'>306.3</td><td align="right" class='awrnc'>481.53ms</td><td align="right" class='awrnc'>.2</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>3,362</td><td align="right" class='awrc'>120</td><td align="right" class='awrc'>35.70ms</td><td align="right" class='awrc'>.1</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>105</td><td align="right" class='awrnc'>61.2</td><td align="right" class='awrnc'>582.72ms</td><td align="right" class='awrnc'>.0</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>read by other session</td><td align="right" class='awrc'>1,151</td><td align="right" class='awrc'>39.6</td><td align="right" class='awrc'>34.40ms</td><td align="right" class='awrc'>.0</td><td class='awrc'>User I/O</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>33.5</td><td align="right" class='awrnc'>523.69ms</td><td align="right" class='awrnc'>.0</td><td class='awrnc'>Cluster</td></tr>
</table><p />
<p />Wait Classes by Total Wait Time<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays wait class statistics ordered by total wait time"><tr><th class="awrbg" scope="col">Wait Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (sec)</th><th class="awrbg" scope="col">Avg Wait Time</th><th class="awrbg" scope="col">% DB time</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>1,737,876</td><td align="right" class='awrc'>74,724</td><td align="right" class='awrc'>43.00ms</td><td align="right" class='awrc'>56.4</td><td align="right" class='awrc'>99.2</td></tr>
<tr><td scope="row" class='awrnc'>Cluster</td><td align="right" class='awrnc'>613,454</td><td align="right" class='awrnc'>55,496</td><td align="right" class='awrnc'>90.46ms</td><td align="right" class='awrnc'>41.9</td><td align="right" class='awrnc'>73.6</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6,776</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5.1</td><td align="right" class='awrc'>9.0</td></tr>
<tr><td scope="row" class='awrnc'>Application</td><td align="right" class='awrnc'>111</td><td align="right" class='awrnc'>68</td><td align="right" class='awrnc'>612.28ms</td><td align="right" class='awrnc'>.1</td><td align="right" class='awrnc'>0.1</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>231,001</td><td align="right" class='awrc'>58</td><td align="right" class='awrc'>249.10us</td><td align="right" class='awrc'>.0</td><td align="right" class='awrc'>0.1</td></tr>
<tr><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>6,551</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>7.07ms</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.1</td></tr>
<tr><td scope="row" class='awrc'>Concurrency</td><td align="right" class='awrc'>19,517</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>1.03ms</td><td align="right" class='awrc'>.0</td><td align="right" class='awrc'>0.0</td></tr>
<tr><td scope="row" class='awrnc'>Configuration</td><td align="right" class='awrnc'>31</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>49.87ms</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.0</td></tr>
<tr><td scope="row" class='awrc'>Network</td><td align="right" class='awrc'>1,741</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>37.35us</td><td align="right" class='awrc'>.0</td><td align="right" class='awrc'>0.0</td></tr>
<tr><td scope="row" class='awrnc'>Commit</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.77ms</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.0</td></tr>
</table><p />

Host CPU
<p />
<table border="0" width="600" class="tdiff" summary="This table displays system load statistics">
<tr><th class="awrbg" scope="col">CPUs</th><th class="awrbg" scope="col">Cores</th><th class="awrbg" scope="col">Sockets</th><th class="awrbg" scope="col">Load Average Begin</th><th class="awrbg" scope="col">Load Average End</th><th class="awrbg" scope="col">%User</th><th class="awrbg" scope="col">%System</th><th class="awrbg" scope="col">%WIO</th><th class="awrbg" scope="col">%Idle</th></tr>
<tr><td align="right" class='awrc'>  128</td><td align="right" class='awrc'>   64</td><td align="right" class='awrc'>	 4</td><td align="right" class='awrc'> 101.35</td><td align="right" class='awrc'>   8.61</td><td align="right" class='awrc'>   5.3</td><td align="right" class='awrc'>	 2.9</td><td align="right" class='awrc'>  22.3</td><td align="right" class='awrc'>  90.9</td></tr>
</table>
<p />
Instance CPU
<p />
<table border="0" width="600" class="tdiff" summary="This table displays CPU usage and wait statistics">
<tr><th class="awrbg" scope="col">%Total CPU</th><th class="awrbg" scope="col">%Busy CPU</th><th class="awrbg" scope="col">%DB time waiting for CPU (Resource Manager)</th></tr>
<tr><td align="right" class='awrc'>	  8.6</td><td align="right" class='awrc'>      94.8</td><td align="right" class='awrc'>       0.0</td></tr>
</table>
<p />IO Profile<p />
<table border="0" width="600" class="tdiff" summary="This table displays IO profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Read+Write Per Second</th><th class="awrbg" scope="col">Read per Second</th><th class="awrbg" scope="col">Write Per Second</th></tr>
<tr><td scope="row" class='awrc'>Total Requests:</td><td align="right" class='awrc'>	      47,206.3</td><td align="right" class='awrc'>	    47,202.3</td><td align="right" class='awrc'>	       4.0</td></tr>
<tr><td scope="row" class='awrnc'>Database Requests:</td><td align="right" class='awrnc'>	   47,205.5</td><td align="right" class='awrnc'>	  47,203.7</td><td align="right" class='awrnc'> 	      1.8</td></tr>
<tr><td scope="row" class='awrc'>Optimized Requests:</td><td align="right" class='awrc'>	       0.0</td><td align="right" class='awrc'>		     0.0</td><td align="right" class='awrc'>		   0.0</td></tr>
<tr><td scope="row" class='awrnc'>Redo Requests:</td><td align="right" class='awrnc'>		    1.5</td><td align="right" class='awrnc'>		   0.0</td><td align="right" class='awrnc'>		  1.5</td></tr>
<tr><td scope="row" class='awrc'>Total (MB):</td><td align="right" class='awrc'>	     368.9</td><td align="right" class='awrc'>		   368.8</td><td align="right" class='awrc'>		   0.1</td></tr>
<tr><td scope="row" class='awrnc'>Database (MB):</td><td align="right" class='awrnc'>		  368.8</td><td align="right" class='awrnc'>		 368.8</td><td align="right" class='awrnc'>		  0.0</td></tr>
<tr><td scope="row" class='awrc'>Optimized Total (MB):</td><td align="right" class='awrc'>		 0.0</td><td align="right" class='awrc'>	       0.0</td><td align="right" class='awrc'>		     0.0</td></tr>
<tr><td scope="row" class='awrnc'>Redo (MB):</td><td align="right" class='awrnc'>		0.0</td><td align="right" class='awrnc'>	       0.0</td><td align="right" class='awrnc'> 	      0.0</td></tr>
<tr><td scope="row" class='awrc'>Database (blocks):</td><td align="right" class='awrc'> 	 47,211.7</td><td align="right" class='awrc'>	       47,207.4</td><td align="right" class='awrc'>		  4.3</td></tr>
<tr><td scope="row" class='awrnc'>Via Buffer Cache (blocks):</td><td align="right" class='awrnc'>	   47,210.1</td><td align="right" class='awrnc'>	  47,207.4</td><td align="right" class='awrnc'> 	      2.8</td></tr>
<tr><td scope="row" class='awrc'>Direct (blocks):</td><td align="right" class='awrc'>		    1.5</td><td align="right" class='awrc'>		  0.0</td><td align="right" class='awrc'>		1.5</td></tr>
</table>
<p />
Memory Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays memory statistics">
<tr><th class="awrbg" scope="col"> </th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th></tr>
<tr><td scope="row" class='awrc'>Host Mem (MB):</td><td align="right" class='awrc'> 2,064,280.9</td><td align="right" class='awrc'> 2,064,280.9</td></tr>
<tr><td scope="row" class='awrnc'>SGA use (MB):</td><td align="right" class='awrnc'>	14,336.0</td><td align="right" class='awrnc'>	 14,336.0</td></tr>
<tr><td scope="row" class='awrc'>PGA use (MB):</td><td align="right" class='awrc'>     4,249.7</td><td align="right" class='awrc'>     2,766.1</td></tr>
<tr><td scope="row" class='awrc'>% Host Mem used for SGA+PGA:</td><td align="right" class='awrc'>    0.90</td><td align="right" class='awrc'>	 0.83</td></tr>
</table>
<p />
Cache Sizes
<p />
<table border="0" width="600" class="tdiff" summary="This table displays cache sizes and other statistics for
		    different types of cache">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th><th class="awrnobg" scope="col"></th><th class="awrnobg" scope="col"></th></tr>
<tr><td scope="row" class='awrnc'>Buffer Cache:</td><td align="right" class='awrnc'>	11,168M</td><td align="right" class='awrnc'>	11,168M</td><td class='awrnc'>Std Block Size:</td><td align="right" class='awrnc'>	   8K</td></tr>
<tr><td scope="row" class='awrc'>Shared Pool Size:</td><td align="right" class='awrc'>	   2,138M</td><td align="right" class='awrc'>	  2,133M</td><td class='awrc'>Log Buffer:</td><td align="right" class='awrc'>	148,180K</td></tr>
<tr><td scope="row" class='awrnc'>In-Memory Area:</td><td align="right" class='awrnc'>	       0M</td><td align="right" class='awrnc'>	       0M</td></tr>
</table>
<p />
Shared Pool Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays shared pool statistics">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th></tr>
<tr><td scope="row" class='awrc'>Memory Usage %:</td><td align="right" class='awrc'>		93.88</td><td align="right" class='awrc'>	     86.96</td></tr>
<tr><td scope="row" class='awrnc'>% SQL with executions&gt;1:</td><td align="right" class='awrnc'>	      86.13</td><td align="right" class='awrnc'>	    75.36</td></tr>
<tr><td scope="row" class='awrc'>% Memory for SQL w/exec&gt;1:</td><td align="right" class='awrc'>	      91.91</td><td align="right" class='awrc'> 	   81.10</td></tr>
</table>
<p />
<a class="awr" name="top"></a>
<h2 class="awr">
Main Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#99999">Report Summary</a></li>
<li class="awr"><a class="awr" href="#21">Wait Events Statistics</a></li>
<li class="awr"><a class="awr" href="#22">SQL Statistics</a></li>
<li class="awr"><a class="awr" href="#23">Instance Activity Statistics</a></li>
<li class="awr"><a class="awr" href="#24">IO Stats</a></li>
<li class="awr"><a class="awr" href="#25">Buffer Pool Statistics</a></li>
<li class="awr"><a class="awr" href="#26">Advisory Statistics</a></li>
<li class="awr"><a class="awr" href="#27">Wait Statistics</a></li>
<li class="awr"><a class="awr" href="#28">Undo Statistics</a></li>
<li class="awr"><a class="awr" href="#29">Latch Statistics</a></li>
<li class="awr"><a class="awr" href="#30">Segment Statistics</a></li>
<li class="awr"><a class="awr" href="#31">Dictionary Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#32">Library Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#33">Memory Statistics</a></li>
<li class="awr"><a class="awr" href="#39">Replication Statistics (GoldenGate, XStream)</a></li>
<li class="awr"><a class="awr" href="#34">Advanced Queuing</a></li>
<li class="awr"><a class="awr" href="#6700">Resource Limit Statistics</a></li>
<li class="awr"><a class="awr" href="#37">Shared Server Statistics</a></li>
<li class="awr"><a class="awr" href="#36">Initialization Parameters</a></li>
<li class="awr"><a class="awr" href="#42">Active Session History (ASH) Report</a></li>
<li class="awr"><a class="awr" href="#99995">ADDM Reports</a></li>
</ul>
<h2 class="awr">
RAC Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#9997">RAC Report Summary</a></li>
<li class="awr"><a class="awr" href="#5100">Global Messaging Statistics</a></li>
<li class="awr"><a class="awr" href="#5200">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#5300">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#7">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#8">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#8790">Dynamic Remastering Statistics</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<p />
<a class="awr" name="21"></a>
<h2 class="awr">
Wait Events Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1500">Time Model Statistics</a></li>
<li class="awr"><a class="awr" href="#1600">Operating System Statistics</a></li>
<li class="awr"><a class="awr" href="#1610">Operating System Statistics - Detail</a></li>
<li class="awr"><a class="awr" href="#210">Foreground Wait Class</a></li>
<li class="awr"><a class="awr" href="#100">Foreground Wait Events</a></li>
<li class="awr"><a class="awr" href="#300">Background Wait Events</a></li>
<li class="awr"><a class="awr" href="#7400">Wait Event Histogram</a></li>
<li class="awr"><a class="awr" href="#7405">Wait Event Histogram (up to 64 us)</a></li>
<li class="awr"><a class="awr" href="#7410">Wait Event Histogram (up to 32 ms)</a></li>
<li class="awr"><a class="awr" href="#7420">Wait Event Histogram (up to 2 sec)</a></li>
<li class="awr"><a class="awr" href="#7430">Wait Event Histogram (up to 2 min)</a></li>
<li class="awr"><a class="awr" href="#7440">Wait Event Histogram (up to 1 hr)</a></li>
<li class="awr"><a class="awr" href="#5800">Service Statistics</a></li>
<li class="awr"><a class="awr" href="#5820">Service Wait Class Stats</a></li>
<li class="awr"><a class="awr" href="#5840">Top 10 Channel Waits</a></li>
<li class="awr"><a class="awr" href="#2310">Top Process Types by Wait Class</a></li>
<li class="awr"><a class="awr" href="#2320">Top Process Types by CPU Used</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1500"></a>
<h3 class="awr">Time Model Statistics</h3>
<ul>
<li class="awr">DB Time represents total time in user calls</li>
<li class="awr">DB CPU represents CPU time of foreground processes</li>
<li class="awr">Total CPU Time represents foreground and background processes</li>
<li class="awr">Statistics including the word "background" measure background process
   time, therefore do not contribute to the DB time statistic</li>
<li class="awr">Ordered by % of DB time in descending order, followed by Statistic Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays different time model statistics. For each statistic, time and % of DB time are displayed"><tr><th class="awrbg" scope="col">Statistic Name</th><th class="awrbg" scope="col">Time (s)</th><th class="awrbg" scope="col">% of  DB Time</th><th class="awrbg" scope="col">% of Total CPU Time</th></tr>
<tr><td scope="row" class='awrc'>sql execute elapsed time</td><td align="right" class='awrc'>132,166.15</td><td align="right" class='awrc'>99.81</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU</td><td align="right" class='awrnc'>6,776.02</td><td align="right" class='awrnc'>5.12</td><td align="right" class='awrnc'>85.71</td></tr>
<tr><td scope="row" class='awrc'>PL/SQL execution elapsed time</td><td align="right" class='awrc'>219.89</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>16.14</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hard parse elapsed time</td><td align="right" class='awrc'>15.92</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hard parse (sharing criteria) elapsed time</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hard parse (bind mismatch) elapsed time</td><td align="right" class='awrc'>0.84</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sequence load elapsed time</td><td align="right" class='awrnc'>0.46</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PL/SQL compilation elapsed time</td><td align="right" class='awrc'>0.41</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>connection management call elapsed time</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>repeated bind elapsed time</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DB time</td><td align="right" class='awrnc'>132,423.41</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>background cpu time</td><td align="right" class='awrc'>1,129.38</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>14.29</td></tr>
<tr><td scope="row" class='awrnc'>background elapsed time</td><td align="right" class='awrnc'>902.42</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>total CPU time</td><td align="right" class='awrc'>7,905.40</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1600"></a>
<h3 class="awr">Operating System Statistics</h3>
<ul>
<li class="awr"> *TIME statistic values are diffed.	 All others display actual values.  End Value is displayed if different </li>
<li class="awr"> ordered by statistic type (CPU Use, Virtual Memory, Hardware Config), Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays operating systems statistics. For each statistic, actual value is displayed. If the end value is different, it is also displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Value</th><th class="awrbg" scope="col">End Value</th></tr>
<tr><td scope="row" class='awrc'>FREE_MEMORY_BYTES</td><td align="right" class='awrc'>1,097,940,684,800</td><td align="right" class='awrc'>1,099,999,117,312</td></tr>
<tr><td scope="row" class='awrnc'>INACTIVE_MEMORY_BYTES</td><td align="right" class='awrnc'>2,242,338,816</td><td align="right" class='awrnc'>2,183,102,464</td></tr>
<tr><td scope="row" class='awrc'>BUSY_TIME</td><td align="right" class='awrc'>834,110</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IDLE_TIME</td><td align="right" class='awrnc'>8,313,126</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IOWAIT_TIME</td><td align="right" class='awrc'>2,044,214</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SYS_TIME</td><td align="right" class='awrnc'>265,518</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>USER_TIME</td><td align="right" class='awrc'>487,700</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LOAD</td><td align="right" class='awrnc'>101</td><td align="right" class='awrnc'>9</td></tr>
<tr><td scope="row" class='awrc'>PHYSICAL_MEMORY_BYTES</td><td align="right" class='awrc'>2,164,555,358,208</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>NUM_CPUS</td><td align="right" class='awrnc'>128</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>NUM_CPU_CORES</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>NUM_CPU_SOCKETS</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GLOBAL_RECEIVE_SIZE_MAX</td><td align="right" class='awrc'>4,194,304</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GLOBAL_SEND_SIZE_MAX</td><td align="right" class='awrnc'>1,048,576</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_RECEIVE_SIZE_DEFAULT</td><td align="right" class='awrc'>87,380</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_RECEIVE_SIZE_MAX</td><td align="right" class='awrnc'>6,291,456</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_RECEIVE_SIZE_MIN</td><td align="right" class='awrc'>4,096</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_SEND_SIZE_DEFAULT</td><td align="right" class='awrnc'>16,384</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_SEND_SIZE_MAX</td><td align="right" class='awrc'>4,194,304</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_SEND_SIZE_MIN</td><td align="right" class='awrnc'>4,096</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1610"></a>
<h3 class="awr">Operating System Statistics - Detail</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays some detailed operating systems statistics. load, % busy , % user, % sys, % idle, % iowait are displayed for begin and end snap time"><tr><th class="awrbg" scope="col">Snap Time</th><th class="awrbg" scope="col">Load</th><th class="awrbg" scope="col">%busy</th><th class="awrbg" scope="col">%user</th><th class="awrbg" scope="col">%sys</th><th class="awrbg" scope="col">%idle</th><th class="awrbg" scope="col">%iowait</th></tr>
<tr><td scope="row" class='awrc'>20-Feb 21:32:34</td><td align="right" class='awrc'>101.35</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>20-Feb 21:45:07</td><td align="right" class='awrnc'>8.61</td><td align="right" class='awrnc'>9.12</td><td align="right" class='awrnc'>5.33</td><td align="right" class='awrnc'>2.90</td><td align="right" class='awrnc'>90.88</td><td align="right" class='awrnc'>22.35</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="210"></a>
<h3 class="awr">Foreground Wait Class</h3>
<ul>
<li class="awr"> s  - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> ordered by wait time desc, waits desc </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
<li class="awr">Captured Time accounts for	  103.4%  of Total DB time     132,423.41 (s)</li>
<li class="awr">Total FG Wait Time:	      130,170.05 (s)  DB CPU time:	 6,776.02 (s)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays foreground wait class statistics"><tr><th class="awrbg" scope="col">Wait Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">%DB time</th></tr>
<tr><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>1,733,204</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>74,680</td><td align="right" class='awrc'>43.09ms</td><td align="right" class='awrc'>56.39</td></tr>
<tr><td scope="row" class='awrnc'>Cluster</td><td align="right" class='awrnc'>611,324</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>55,451</td><td align="right" class='awrnc'>90.71ms</td><td align="right" class='awrnc'>41.87</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6,776</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5.12</td></tr>
<tr><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>9,104</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>2.83ms</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>Concurrency</td><td align="right" class='awrc'>11,826</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>723.08us</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>401</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>7.83ms</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Configuration</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>59.20ms</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Network</td><td align="right" class='awrnc'>553</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8.07us</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Application</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>503.00us</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Commit</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="100"></a>
<h3 class="awr">Foreground Wait Events</h3>
<ul>
<li class="awr"> s  - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Only events with Total Wait Time (s) &gt;= .001 are shown </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Foreground Wait Events and their wait statistics"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">Waits /txn</th><th class="awrbg" scope="col">% DB time</th></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>560,366</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>57,801</td><td align="right" class='awrc'>103.15ms</td><td align="right" class='awrc'>2,206.17</td><td align="right" class='awrc'>43.65</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>348,638</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>42,262</td><td align="right" class='awrnc'>121.22ms</td><td align="right" class='awrnc'>1,372.59</td><td align="right" class='awrnc'>31.91</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>1,171,285</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>16,835</td><td align="right" class='awrc'>14.37ms</td><td align="right" class='awrc'>4,611.36</td><td align="right" class='awrc'>12.71</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>257,262</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>12,610</td><td align="right" class='awrnc'>49.02ms</td><td align="right" class='awrnc'>1,012.84</td><td align="right" class='awrnc'>9.52</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy acquire</td><td align="right" class='awrc'>636</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>306</td><td align="right" class='awrc'>481.53ms</td><td align="right" class='awrc'>2.50</td><td align="right" class='awrc'>0.23</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>3,362</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>120</td><td align="right" class='awrnc'>35.70ms</td><td align="right" class='awrnc'>13.24</td><td align="right" class='awrnc'>0.09</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>105</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>61</td><td align="right" class='awrc'>582.72ms</td><td align="right" class='awrc'>0.41</td><td align="right" class='awrc'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>read by other session</td><td align="right" class='awrnc'>1,151</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>34.40ms</td><td align="right" class='awrnc'>4.53</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>523.69ms</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>540</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>49.90ms</td><td align="right" class='awrnc'>2.13</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gcs drm freeze in enter server mode</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>254.51ms</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>128</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>96.79ms</td><td align="right" class='awrnc'>0.50</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc remaster</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>92.45ms</td><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc cr failure</td><td align="right" class='awrnc'>73</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>57.56ms</td><td align="right" class='awrnc'>0.29</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>62</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>54.46ms</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>401</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>7.83ms</td><td align="right" class='awrnc'>1.58</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>library cache: bucket mutex X</td><td align="right" class='awrc'>279</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>10.61ms</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>150</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>19.04ms</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>10,353</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>240.11us</td><td align="right" class='awrc'>40.76</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>186</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>12.80ms</td><td align="right" class='awrnc'>0.73</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>98</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>21.74ms</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>105</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>15.36ms</td><td align="right" class='awrnc'>0.41</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>531.54ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>59.20ms</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>14.58ms</td><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>1,971</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>706.70us</td><td align="right" class='awrnc'>7.76</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>540</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2.49ms</td><td align="right" class='awrc'>2.13</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>IPC send completion sync</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>15.33ms</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>335.31ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>library cache: mutex X</td><td align="right" class='awrnc'>481</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.75ms</td><td align="right" class='awrnc'>1.89</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>2,352</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>284.12us</td><td align="right" class='awrc'>9.26</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>cursor: pin S</td><td align="right" class='awrnc'>517</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.12ms</td><td align="right" class='awrnc'>2.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: WT - contention</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>64.39ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4.93ms</td><td align="right" class='awrnc'>0.31</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7.32ms</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13.47ms</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>name-service call wait</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>21.35ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>212</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>565.52us</td><td align="right" class='awrnc'>0.83</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.50ms</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5.76ms</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>662</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>87.53us</td><td align="right" class='awrc'>2.61</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>57.87ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>2,030</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>20.61us</td><td align="right" class='awrc'>7.99</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>library cache pin</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.69ms</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>row cache mutex</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>589.92us</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.50ms</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6.78ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>wait list latch free</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.12ms</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>692</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>28.13us</td><td align="right" class='awrc'>2.72</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>493.94us</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>885.31us</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>70</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>147.93us</td><td align="right" class='awrnc'>0.28</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>468.50us</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>219.76us</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>cr request retry</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9.38ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>228.08us</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: TX - index contention</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.21ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>61</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>92.66us</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4.39ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>491</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7.83us</td><td align="right" class='awrnc'>1.93</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: TO - contention</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.31ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: shared pool</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>54.48us</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>watchdog main loop</td><td align="right" class='awrc'>1,984</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5,913</td><td align="right" class='awrc'>2980.36ms</td><td align="right" class='awrc'>7.81</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" class='awrnc'>581</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>59.85ms</td><td align="right" class='awrnc'>2.29</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Execution Msg</td><td align="right" class='awrc'>105</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>329.31ms</td><td align="right" class='awrc'>0.41</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message from client</td><td align="right" class='awrnc'>493</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>24.70ms</td><td align="right" class='awrnc'>1.94</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Msg Fragment</td><td align="right" class='awrc'>321</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>380.96us</td><td align="right" class='awrc'>1.26</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="300"></a>
<h3 class="awr">Background Wait Events</h3>
<ul>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
<li class="awr"> Only events with Total Wait Time (s) &gt;= .001 are shown </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays background wait events statistics"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">Waits /txn</th><th class="awrbg" scope="col">% bg time</th></tr>
<tr><td scope="row" class='awrc'>enq: TX - row lock contention</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>66.98 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>7.42</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>2,683</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>9.02ms</td><td align="right" class='awrnc'>10.56</td><td align="right" class='awrnc'>2.68</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>2,906</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>7.44ms</td><td align="right" class='awrc'>11.44</td><td align="right" class='awrc'>2.39</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>989</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>17.36ms</td><td align="right" class='awrnc'>3.89</td><td align="right" class='awrnc'>1.90</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>713</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>20.36ms</td><td align="right" class='awrc'>2.81</td><td align="right" class='awrc'>1.61</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>2,226</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>5.71ms</td><td align="right" class='awrnc'>8.76</td><td align="right" class='awrnc'>1.41</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>46</td><td align="right" class='awrc'>96</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>230.97ms</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>1.18</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>269</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>37.97ms</td><td align="right" class='awrnc'>1.06</td><td align="right" class='awrnc'>1.13</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>243</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>39.88ms</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>1.07</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>347.10ms</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.85</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>1,016</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>6.70ms</td><td align="right" class='awrc'>4.00</td><td align="right" class='awrc'>0.75</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>1,133</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>4.49ms</td><td align="right" class='awrnc'>4.46</td><td align="right" class='awrnc'>0.56</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>156</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>26.37ms</td><td align="right" class='awrc'>0.61</td><td align="right" class='awrc'>0.46</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>192,160</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>18.82us</td><td align="right" class='awrnc'>756.54</td><td align="right" class='awrnc'>0.40</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>402</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>7.56ms</td><td align="right" class='awrc'>1.58</td><td align="right" class='awrc'>0.34</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>66.50ms</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>0.29</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>260</td><td align="right" class='awrc'>83</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>7.06ms</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>0.20</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering wait for read latch</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>31.70ms</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.17</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>2,637</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>524.00us</td><td align="right" class='awrc'>10.38</td><td align="right" class='awrc'>0.15</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>68</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>19.88ms</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>0.15</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>859</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.43ms</td><td align="right" class='awrc'>3.38</td><td align="right" class='awrc'>0.14</td></tr>
<tr><td scope="row" class='awrnc'>gc current block lost</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>529.36ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.12</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>126.52ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.11</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>56</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>17.76ms</td><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>0.11</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>93</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>9.55ms</td><td align="right" class='awrc'>0.37</td><td align="right" class='awrc'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>LGWR any worker group</td><td align="right" class='awrnc'>249</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3.53ms</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>0.10</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>1,695</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>383.42us</td><td align="right" class='awrc'>6.67</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>648.66ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.07</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>317</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2.04ms</td><td align="right" class='awrc'>1.25</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>89</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>6.77ms</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0.07</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>194.74ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>37.97ms</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>40.48ms</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>enq: CO - master slave det</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>40.39ms</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>87</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5.38ms</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>95</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4.79ms</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5.06ms</td><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>14.90ms</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>61</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5.69ms</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>LGWR all worker groups</td><td align="right" class='awrnc'>58</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5.64ms</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>331</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>.97ms</td><td align="right" class='awrc'>1.30</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>ASM file metadata operation</td><td align="right" class='awrnc'>1,524</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>129.00us</td><td align="right" class='awrnc'>6.00</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>library cache lock</td><td align="right" class='awrc'>497</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>392.28us</td><td align="right" class='awrc'>1.96</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>610</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>300.49us</td><td align="right" class='awrnc'>2.40</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>491</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>334.56us</td><td align="right" class='awrc'>1.93</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>25.67ms</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>7,404</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>18.09us</td><td align="right" class='awrc'>29.15</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4.33ms</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>7,874</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16.48us</td><td align="right" class='awrc'>31.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>oracle thread bootstrap</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>19.86ms</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context latch</td><td align="right" class='awrc'>308</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>376.98us</td><td align="right" class='awrc'>1.21</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>819</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>125.78us</td><td align="right" class='awrnc'>3.22</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>oradebug request completion</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>99.33ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>368</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>195.25us</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>227</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>284.74us</td><td align="right" class='awrc'>0.89</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>944</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>62.93us</td><td align="right" class='awrnc'>3.72</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>280</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>187.62us</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.62ms</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>.96ms</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group ordering</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.79ms</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.32ms</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>90</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>304.76us</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data update</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.06ms</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>814.84us</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>1,167</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>21.04us</td><td align="right" class='awrc'>4.59</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>read by other session</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.29ms</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>757</td><td align="right" class='awrc'>98</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>25.40us</td><td align="right" class='awrc'>2.98</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>527.56us</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>5,715</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.60us</td><td align="right" class='awrc'>22.50</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.92ms</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS initialization</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5.12ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>671.57us</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.38ms</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>851</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8.05us</td><td align="right" class='awrnc'>3.35</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6.33ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>305.28us</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.16ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>148.89us</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASM IO for non-blocking poll</td><td align="right" class='awrc'>487</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8.09us</td><td align="right" class='awrc'>1.92</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: DW - contention</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.28ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>131.96us</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.77ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>182.00us</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>614.25us</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.91ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: TA - contention</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>909.50us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>asynch descriptor resize</td><td align="right" class='awrc'>269</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6.71us</td><td align="right" class='awrc'>1.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>178.11us</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>737.00us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>244</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4.78us</td><td align="right" class='awrnc'>0.96</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>name-service call wait</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>558.50us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Idle Wait</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>191,213</td><td align="right" class='awrnc'>5167.91 s</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Space Manager: slave idle wait</td><td align="right" class='awrc'>9,642</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>39,647</td><td align="right" class='awrc'>4111.94ms</td><td align="right" class='awrc'>37.96</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>rdbms ipc message</td><td align="right" class='awrnc'>31,183</td><td align="right" class='awrnc'>56</td><td align="right" class='awrnc'>29,873</td><td align="right" class='awrnc'>957.98ms</td><td align="right" class='awrnc'>122.77</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>class slave wait</td><td align="right" class='awrc'>9,138</td><td align="right" class='awrc'>79</td><td align="right" class='awrc'>5,450</td><td align="right" class='awrc'>596.44ms</td><td align="right" class='awrc'>35.98</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LMS CR slave timer</td><td align="right" class='awrnc'>444,928</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4,436</td><td align="right" class='awrnc'>9.97ms</td><td align="right" class='awrnc'>1,751.69</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs yield cpu</td><td align="right" class='awrc'>150,607</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>4,414</td><td align="right" class='awrc'>29.31ms</td><td align="right" class='awrc'>592.94</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remote message</td><td align="right" class='awrnc'>4,956,215</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3,880</td><td align="right" class='awrnc'>782.83us</td><td align="right" class='awrnc'>19,512.66</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges remote message</td><td align="right" class='awrc'>46,862</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,968</td><td align="right" class='awrc'>63.34ms</td><td align="right" class='awrc'>184.50</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR worker group idle</td><td align="right" class='awrnc'>1,070</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,683</td><td align="right" class='awrnc'>2507.67ms</td><td align="right" class='awrnc'>4.21</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>wait for unread message on broadcast channel</td><td align="right" class='awrc'>1,138</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>2,227</td><td align="right" class='awrc'>1956.72ms</td><td align="right" class='awrc'>4.48</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pmon timer</td><td align="right" class='awrnc'>500</td><td align="right" class='awrnc'>99</td><td align="right" class='awrnc'>1,489</td><td align="right" class='awrnc'>2977.66ms</td><td align="right" class='awrnc'>1.97</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCR sleep</td><td align="right" class='awrc'>4,930</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,481</td><td align="right" class='awrc'>300.47ms</td><td align="right" class='awrc'>19.41</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DIAG idle wait</td><td align="right" class='awrnc'>12,974</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>1,472</td><td align="right" class='awrnc'>113.45ms</td><td align="right" class='awrnc'>51.08</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Data Guard: Gap Manager</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>780</td><td align="right" class='awrc'>60.00 s</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: qmn coordinator idle wait</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>756</td><td align="right" class='awrnc'>14.00 s</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: qmn slave idle wait</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>756</td><td align="right" class='awrc'>27.99 s</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OFS idle</td><td align="right" class='awrnc'>248</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>744</td><td align="right" class='awrnc'>2999.99ms</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pman timer</td><td align="right" class='awrc'>248</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>744</td><td align="right" class='awrc'>2999.67ms</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>742</td><td align="right" class='awrnc'>61.87 s</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM background timer</td><td align="right" class='awrc'>1,474</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>742</td><td align="right" class='awrc'>503.62ms</td><td align="right" class='awrc'>5.80</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM cluster membership changes</td><td align="right" class='awrnc'>424</td><td align="right" class='awrnc'>79</td><td align="right" class='awrnc'>742</td><td align="right" class='awrnc'>1750.35ms</td><td align="right" class='awrnc'>1.67</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>heartbeat redo informer</td><td align="right" class='awrc'>742</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>742</td><td align="right" class='awrc'>1000.12ms</td><td align="right" class='awrc'>2.92</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lreg timer</td><td align="right" class='awrnc'>247</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>742</td><td align="right" class='awrnc'>3002.91ms</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PING</td><td align="right" class='awrc'>688</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>740</td><td align="right" class='awrc'>1076.15ms</td><td align="right" class='awrc'>2.71</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SCM slave idle</td><td align="right" class='awrnc'>7,538</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>738</td><td align="right" class='awrnc'>97.84ms</td><td align="right" class='awrnc'>29.68</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dispatcher timer</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>720</td><td align="right" class='awrc'>60.01 s</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQPC idle</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>720</td><td align="right" class='awrnc'>30.00 s</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>smon timer</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>600</td><td align="right" class='awrc'>300.00 s</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Data Guard: Timer</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>600</td><td align="right" class='awrnc'>600.00 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message from client</td><td align="right" class='awrc'>245</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>59.29ms</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Parse Reply</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>22.94ms</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Execute Reply</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12.90ms</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" class='awrnc'>140</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>695.04us</td><td align="right" class='awrnc'>0.55</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>RMA: IPC0 completion sync</td><td align="right" class='awrc'>1,109</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>24.20us</td><td align="right" class='awrc'>4.37</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7400"></a>
<h3 class="awr">Wait Event Histogram</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (idle events last)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Total Waits</th><th class="awrbg" scope="col" id="&lt;8us">&lt;8us</th><th class="awrbg" scope="col" id="&lt;16us">&lt;16us</th><th class="awrbg" scope="col" id="&lt;32us">&lt;32us</th><th class="awrbg" scope="col" id="&lt;64us">&lt;64us</th><th class="awrbg" scope="col" id="&lt;128us">&lt;128us</th><th class="awrbg" scope="col" id="&lt;256us">&lt;256us</th><th class="awrbg" scope="col" id="&lt;512us">&lt;512us</th><th class="awrbg" scope="col" id="&gt;=512us">&gt;=512us</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>7292</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>29.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>67.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>530</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>66.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>27.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>1493</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>39.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>39.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.6</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>7753</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>1.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>48.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>46.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>75.0</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data query</td><td align="right" class='awrnc'>22</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>86.4</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data update</td><td align="right" class='awrc'>25</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>83.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>16.7</td></tr>
<tr><td scope="row" class='awrc'>DFS lock handle</td><td align="right" class='awrc'>68</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>52.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>44.1</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>2670</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>90.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>7.2</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>1074</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>387</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>11.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>20.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>38.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>10.1</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>22</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>95.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>23</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>4.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>91.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>2190</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>2.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>30.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>34.1</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>995</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>8.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>27.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>32.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.3</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>812</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>78.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>2.6</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>312</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>44.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>12.2</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>593</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>13.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>45.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>22.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>5.6</td></tr>
<tr><td scope="row" class='awrnc'>LGWR all worker groups</td><td align="right" class='awrnc'>55</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>94.5</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>249</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>92.4</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group ordering</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>66.7</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>1513</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>47.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>23.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>2.9</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>27</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>27</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>48.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>11.1</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>62</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>1.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>37.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>21.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>11.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>17.7</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>191.3K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>30.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>66.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message to client</td><td align="right" class='awrc'>737</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>79.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>56</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>19.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>48.2</td></tr>
<tr><td scope="row" class='awrc'>asynch descriptor resize</td><td align="right" class='awrc'>271</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>84.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>239</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>3261</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>1.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>64.5</td></tr>
<tr><td scope="row" class='awrc'>cr request retry</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>cursor: pin S</td><td align="right" class='awrnc'>494</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>769</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>95.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>547.1K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>914</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>95.1</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>243</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>1.1M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>40</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>95.0</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>72</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>91.7</td></tr>
<tr><td scope="row" class='awrc'>enq: CO - master slave det</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: DW - contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>17</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>29.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>70.6</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>93.8</td></tr>
<tr><td scope="row" class='awrc'>enq: MW - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>54</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>48.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>46.3</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>95</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>61.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>38.9</td></tr>
<tr><td scope="row" class='awrnc'>enq: TA - contention</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>enq: TD - KTF dump entries</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>93.3</td></tr>
<tr><td scope="row" class='awrc'>enq: TO - contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: TX - index contention</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: TX - row lock contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>14</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>85.7</td></tr>
<tr><td scope="row" class='awrc'>enq: WT - contention</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>75.0</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>656</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>93.1</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>62</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>91.9</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>234</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>59.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>39.3</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>87</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>104</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>47</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>51.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>36.2</td></tr>
<tr><td scope="row" class='awrnc'>gc cr failure</td><td align="right" class='awrnc'>73</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>34.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>65.8</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>3590</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>27.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>67.1</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>249.2K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>83.3</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>30</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>337.2K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>96.3</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>66</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>104</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>75.0</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>506</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>48.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>50.6</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>126</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>42.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>28.6</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>912</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>40.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>59.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>33</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>72.7</td></tr>
<tr><td scope="row" class='awrnc'>gc quiesce</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc remaster</td><td align="right" class='awrc'>72</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>2.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>44.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>gcs drm freeze in enter server mode</td><td align="right" class='awrnc'>65</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>706</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>7.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>49.0</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering wait for read latch</td><td align="right" class='awrnc'>49</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>22.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>46.9</td></tr>
<tr><td scope="row" class='awrc'>gcs resource directory to be unfrozen</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>32</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>81.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>18.8</td></tr>
<tr><td scope="row" class='awrc'>ges ipc enter server mode</td><td align="right" class='awrc'>163</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>92.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>ges resource directory to be unfrozen</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>93.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>kjctssqmg: quick message send wait</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksxr poll remote instances</td><td align="right" class='awrnc'>1152</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>54.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>39.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>3582</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>28.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>19.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA heap latch</td><td align="right" class='awrnc'>279</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>2.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>32.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>10.4</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context latch</td><td align="right" class='awrc'>309</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>5.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>23.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>21.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>28.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context root latch</td><td align="right" class='awrnc'>338</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>4.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>53.3</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>10.2K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>3.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>36.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>19.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>7.4</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>642</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>29.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>28.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>2.3</td></tr>
<tr><td scope="row" class='awrc'>latch: call allocation</td><td align="right" class='awrc'>70</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>10.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>7.1</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>60.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>2279</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>20.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>14.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>13.5</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>890</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>21.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>14.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>11.2</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>214</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>2.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>25.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>25.2</td></tr>
<tr><td scope="row" class='awrnc'>latch: kjci process context latch</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: messages</td><td align="right" class='awrc'>90</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>5.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>24.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>18.9</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>45</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>2.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>31.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>6.7</td></tr>
<tr><td scope="row" class='awrc'>latch: shared pool</td><td align="right" class='awrc'>27</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>7.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>29.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>25.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>libcache interrupt action by LCK</td><td align="right" class='awrnc'>5693</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>99.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache lock</td><td align="right" class='awrc'>511</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>92.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>7.0</td></tr>
<tr><td scope="row" class='awrnc'>library cache pin</td><td align="right" class='awrnc'>505</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>95.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>4.2</td></tr>
<tr><td scope="row" class='awrc'>library cache: bucket mutex X</td><td align="right" class='awrc'>277</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>70.4</td></tr>
<tr><td scope="row" class='awrnc'>library cache: mutex X</td><td align="right" class='awrnc'>484</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>28.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>34.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>18.2</td></tr>
<tr><td scope="row" class='awrc'>lock deadlock retry</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>1137</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>name-service call wait</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>90.0</td></tr>
<tr><td scope="row" class='awrnc'>oracle thread bootstrap</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>oradebug request completion</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>read by other session</td><td align="right" class='awrc'>1142</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>94.7</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>40</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>97.5</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>143</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>97.2</td></tr>
<tr><td scope="row" class='awrnc'>row cache mutex</td><td align="right" class='awrnc'>38</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>13.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>39.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>23.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>10.5</td></tr>
<tr><td scope="row" class='awrc'>transaction</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo_retention publish retry</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>18</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>AQPC idle</td><td align="right" class='awrnc'>24</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>ASM background timer</td><td align="right" class='awrc'>1445</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>74.0</td></tr>
<tr><td scope="row" class='awrnc'>ASM cluster membership changes</td><td align="right" class='awrnc'>417</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>DIAG idle wait</td><td align="right" class='awrc'>12.8K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>85.0</td></tr>
<tr><td scope="row" class='awrnc'>Data Guard: Gap Manager</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>Data Guard: Timer</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>GCR sleep</td><td align="right" class='awrnc'>4848</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group idle</td><td align="right" class='awrc'>1070</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>1.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>82.0</td></tr>
<tr><td scope="row" class='awrnc'>LMS CR slave timer</td><td align="right" class='awrnc'>436.9K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>OFS idle</td><td align="right" class='awrc'>243</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>PING</td><td align="right" class='awrnc'>678</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>24.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>13.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>39.1</td></tr>
<tr><td scope="row" class='awrc'>PX Deq Credit: send blkd</td><td align="right" class='awrc'>721</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>25.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>30.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>4.4</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Execute Reply</td><td align="right" class='awrnc'>27</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>92.6</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Execution Msg</td><td align="right" class='awrc'>105</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>80.0</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Msg Fragment</td><td align="right" class='awrnc'>321</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>6.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>60.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>15.6</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Parse Reply</td><td align="right" class='awrc'>27</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>70.4</td></tr>
<tr><td scope="row" class='awrnc'>PX Idle Wait</td><td align="right" class='awrnc'>35</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>RMA: IPC0 completion sync</td><td align="right" class='awrnc'>1096</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>5.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>65.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>.5</td></tr>
<tr><td scope="row" class='awrc'>SCM slave idle</td><td align="right" class='awrc'>7414</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>99.8</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message from client</td><td align="right" class='awrnc'>738</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>96.1</td></tr>
<tr><td scope="row" class='awrc'>Space Manager: slave idle wait</td><td align="right" class='awrc'>9479</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>92.9</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: qmn coordinator idle wait</td><td align="right" class='awrnc'>52</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: qmn slave idle wait</td><td align="right" class='awrc'>26</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>class slave wait</td><td align="right" class='awrnc'>8987</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>2.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>87.5</td></tr>
<tr><td scope="row" class='awrc'>dispatcher timer</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gcs remote message</td><td align="right" class='awrnc'>4.8M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>22.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>29.1</td></tr>
<tr><td scope="row" class='awrc'>gcs yield cpu</td><td align="right" class='awrc'>147.9K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>98.7</td></tr>
<tr><td scope="row" class='awrnc'>ges remote message</td><td align="right" class='awrnc'>46.2K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>86.7</td></tr>
<tr><td scope="row" class='awrc'>heartbeat monitor sleep</td><td align="right" class='awrc'>31</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>96.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>heartbeat redo informer</td><td align="right" class='awrnc'>731</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>lreg timer</td><td align="right" class='awrc'>244</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>pman timer</td><td align="right" class='awrnc'>243</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>pmon timer</td><td align="right" class='awrc'>490</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>99.6</td></tr>
<tr><td scope="row" class='awrnc'>rdbms ipc message</td><td align="right" class='awrnc'>30.8K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>5.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>77.6</td></tr>
<tr><td scope="row" class='awrc'>smon timer</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>wait for unread message on broadcast channel</td><td align="right" class='awrnc'>1120</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>watchdog main loop</td><td align="right" class='awrc'>1935</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7405"></a>
<h3 class="awr">Wait Event Histogram (up to 64 us)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds  </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 1us  - 64us</th><th class="awrbg" scope="col" id="&lt;1us"> &lt;1us</th><th class="awrbg" scope="col" id="&lt;2us"> &lt;2us</th><th class="awrbg" scope="col" id="&lt;4us"> &lt;4us</th><th class="awrbg" scope="col" id="&lt;8us">&lt;8us</th><th class="awrbg" scope="col" id="&lt;16us">&lt;16us</th><th class="awrbg" scope="col" id="&lt;32us">&lt;32us</th><th class="awrbg" scope="col" id="&lt;64us">&lt;64us</th><th class="awrbg" scope="col" id="&gt;=64us">&gt;=64us</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>7230</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>29.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>67.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>.9</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>528</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>66.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>27.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>.4</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>1338</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>16.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>39.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>10.4</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>7655</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>48.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>46.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>1.3</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>75.0</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>16.7</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>56</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>97.9</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>323</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>20.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>38.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>14.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>16.5</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>22</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>95.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>23</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>91.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>461</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>78.9</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>610</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>27.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>38.7</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>719</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>78.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>11.5</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>214</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>44.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>31.4</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>507</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>45.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>22.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>14.5</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>75.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>25.0</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>1213</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>41.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>23.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>19.8</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>17</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>48.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>37.0</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>87.1</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>189.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>30.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>66.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>1.1</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message to client</td><td align="right" class='awrc'>734</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>68.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>.4</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>28</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>asynch descriptor resize</td><td align="right" class='awrc'>267</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>81.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>1.5</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>1061</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>67.5</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>764</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>27.2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>68.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>.7</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>23</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>97.5</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>98.3</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>55</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>29</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc quiesce</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc remaster</td><td align="right" class='awrc'>36</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>44.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>155</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>78.0</td></tr>
<tr><td scope="row" class='awrc'>gcs remastering wait for read latch</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>10.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>89.8</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource directory to be unfrozen</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges ipc enter server mode</td><td align="right" class='awrc'>163</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>89.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>53.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>1115</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>54.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>39.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>3.2</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>781</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>78.2</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>196</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>32.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>29.7</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context latch</td><td align="right" class='awrnc'>106</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>23.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>65.7</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>91</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>73.1</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>5447</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>36.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>46.7</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>350</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>29.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>14.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>45.5</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>50</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>30.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>28.6</td></tr>
<tr><td scope="row" class='awrc'>latch: enqueue hash chains</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>60.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>655</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>71.3</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>241</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>72.9</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>123</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>25.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>42.5</td></tr>
<tr><td scope="row" class='awrc'>latch: kjci process context latch</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>38</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>24.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>57.8</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>68.9</td></tr>
<tr><td scope="row" class='awrnc'>latch: shared pool</td><td align="right" class='awrnc'>18</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>29.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>14.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>33.3</td></tr>
<tr><td scope="row" class='awrc'>libcache interrupt action by LCK</td><td align="right" class='awrc'>5689</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>92.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>library cache: bucket mutex X</td><td align="right" class='awrnc'>44</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>84.1</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>346</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>27.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>34.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>28.5</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>read by other session</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>99.0</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>99.3</td></tr>
<tr><td scope="row" class='awrnc'>row cache mutex</td><td align="right" class='awrnc'>31</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>39.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>23.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>18.4</td></tr>
<tr><td scope="row" class='awrc'>undo_retention publish retry</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7410"></a>
<h3 class="awr">Wait Event Histogram (up to 32 ms)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds,	ms is 1024 microseconds (approximately 1 millisecond) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 1ms  to 32ms</th><th class="awrbg" scope="col" id="&lt;512us"> &lt;512us</th><th class="awrbg" scope="col" id="&lt;1ms"> &lt;1ms</th><th class="awrbg" scope="col" id="&lt;2ms"> &lt;2ms</th><th class="awrbg" scope="col" id="&lt;4ms"> &lt;4ms</th><th class="awrbg" scope="col" id="&lt;8ms">&lt;8ms</th><th class="awrbg" scope="col" id="&lt;16ms">&lt;16ms</th><th class="awrbg" scope="col" id="&lt;32ms">&lt;32ms</th><th class="awrbg" scope="col" id="&gt;=32ms">&gt;=32ms</th></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>CGS wait for IPC msg</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS initialization</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>13.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>40.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>25</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>76.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: query</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>83.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>27</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>55.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>4.4</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>191</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>92.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>902</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>34.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>29.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>8.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>16.0</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>33</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>89.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.6</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>634</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>65.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>5.2</td></tr>
<tr><td scope="row" class='awrc'>IPC group service call</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC send completion sync</td><td align="right" class='awrnc'>20</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>97.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.1</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>22</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>87.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>5.1</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>33</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>94.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR all worker groups</td><td align="right" class='awrc'>52</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>5.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>49.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR any worker group</td><td align="right" class='awrnc'>230</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>7.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>55.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>16.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group ordering</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>33.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>44</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>97.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>27</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>48.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>88.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>82.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>59</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>20</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>51.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>12.5</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>131</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>45.2</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>1912</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>35.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>25.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>23.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>5.9</td></tr>
<tr><td scope="row" class='awrnc'>cr request retry</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cursor: pin S</td><td align="right" class='awrc'>494</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>99.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>102.5K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>81.3</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>868</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>4.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>53.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.1</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>216</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>21.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>37.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>25.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>11.1</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>1M</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>57.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>17.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>10.0</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>36</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>5.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>17.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>5.0</td></tr>
<tr><td scope="row" class='awrnc'>direct path write temp</td><td align="right" class='awrnc'>72</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>48.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>40.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>8.3</td></tr>
<tr><td scope="row" class='awrnc'>enq: CO - master slave det</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>8.3</td></tr>
<tr><td scope="row" class='awrc'>enq: DW - contention</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: FB - contention</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>29.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>41.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>23.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>6.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>6.3</td></tr>
<tr><td scope="row" class='awrnc'>enq: MW - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>25</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>53.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>35.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>33</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>61.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>4.2</td></tr>
<tr><td scope="row" class='awrc'>enq: TA - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>6.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>26.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>6.7</td></tr>
<tr><td scope="row" class='awrc'>enq: TO - contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TX - index contention</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>14.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>7.1</td></tr>
<tr><td scope="row" class='awrnc'>enq: WT - contention</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>12.5</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy acquire</td><td align="right" class='awrc'>250</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>6.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>22.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>55.0</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy release</td><td align="right" class='awrnc'>57</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>8.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>30.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>25.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>82</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>60.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>4.3</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>87</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>25.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>31.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>16</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>63.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.1</td></tr>
<tr><td scope="row" class='awrnc'>gc cr failure</td><td align="right" class='awrnc'>24</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>34.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>32.9</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>2305</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>32.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>26.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>21.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.9</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>180.2K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>16.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>27.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>11.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>30</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>73.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>227.5K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>3.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>16.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>28.8</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>77.3</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>76</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>26.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>32.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>1.9</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>251</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>49.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>34</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>71.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.6</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>474</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>41.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>20.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>7.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>21</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>27.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>30.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>9.1</td></tr>
<tr><td scope="row" class='awrc'>gc remaster</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>9.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>29.2</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>346</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>51.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs remastering wait for read latch</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>53.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>30.6</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>81.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>697</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>80.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.3</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA heap latch</td><td align="right" class='awrnc'>29</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>89.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context latch</td><td align="right" class='awrc'>89</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>71.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>23.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context root latch</td><td align="right" class='awrnc'>180</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>46.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>29.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>747</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>92.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>97.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: call allocation</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>92.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>307</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>86.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>84</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>88.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>1.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>54</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>74.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: messages</td><td align="right" class='awrc'>17</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>81.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>93.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache lock</td><td align="right" class='awrc'>36</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>93.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache pin</td><td align="right" class='awrnc'>21</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>95.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache: bucket mutex X</td><td align="right" class='awrc'>165</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>29.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>13.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>14.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>10.8</td></tr>
<tr><td scope="row" class='awrnc'>library cache: mutex X</td><td align="right" class='awrnc'>88</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>81.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>1135</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>31.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>21.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service call wait</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>10.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>20.0</td></tr>
<tr><td scope="row" class='awrnc'>oracle thread bootstrap</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>os thread creation</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>83.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>read by other session</td><td align="right" class='awrnc'>677</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>5.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>35.5</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>37</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>27.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>17.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>5.0</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>127</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>21.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>11.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>8.4</td></tr>
<tr><td scope="row" class='awrc'>row cache mutex</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>89.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>wait list latch free</td><td align="right" class='awrnc'>18</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7420"></a>
<h3 class="awr">Wait Event Histogram (up to 2 sec)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 ms is milliseconds    s is 1024 milliseconds (approximately 1 second) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 64ms  to 2s</th><th class="awrbg" scope="col" id="&lt;32ms">&lt;32ms</th><th class="awrbg" scope="col" id="&lt;64ms">&lt;64ms</th><th class="awrbg" scope="col" id="&lt;1/8s">&lt;1/8s</th><th class="awrbg" scope="col" id="&lt;1/4s">&lt;1/4s</th><th class="awrbg" scope="col" id="&lt;1/2s">&lt;1/2s</th><th class="awrbg" scope="col" id="&lt;1s">  &lt;1s</th><th class="awrbg" scope="col" id="&lt;2s">  &lt;2s</th><th class="awrbg" scope="col" id="&gt;=2s">&gt;=2s</th></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>95.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>172</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>84.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" class='awrnc'>113</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>94.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>94.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>87.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>108</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>54.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>20.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>21.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>191</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>94.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>444.6K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>18.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>32.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>28.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>27</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>88.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>114.2K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>90.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>95.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>91.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CO - master slave det</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>91.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>93.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>95.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>93.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>92.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: WT - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>87.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>357</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>45.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>41.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.6</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>95.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>1.3</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>104</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>32.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>66.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr failure</td><td align="right" class='awrnc'>24</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>67.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>105</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>27.3K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>89.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.1</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>96K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>71.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.4</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>50</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>22.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>40.9</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>7.6</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>1.5</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>98.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>98.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>62</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>93.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>90.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc remaster</td><td align="right" class='awrnc'>21</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>70.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs drm freeze in enter server mode</td><td align="right" class='awrc'>65</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>24.6</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>69.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering wait for read latch</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>69.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>98.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache: bucket mutex X</td><td align="right" class='awrc'>30</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>89.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service call wait</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>80.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>oradebug request completion</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>read by other session</td><td align="right" class='awrc'>405</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>64.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>95.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>2.5</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>91.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.7</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7430"></a>
<h3 class="awr">Wait Event Histogram (up to 2 min)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	s is 1024 milliseconds (approximately 1 second)    m is 64*1024 milliseconds (approximately 67 seconds or 1.12 minutes) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 4s	 to 2m</th><th class="awrbg" scope="col" id="&lt;2s">&lt;2s</th><th class="awrbg" scope="col" id="&lt;4s"> &lt;4s</th><th class="awrbg" scope="col" id="&lt;8s"> &lt;8s</th><th class="awrbg" scope="col" id="&lt;16s">&lt;16s</th><th class="awrbg" scope="col" id="&lt;32s">&lt;32s</th><th class="awrbg" scope="col" id="&lt;1m">&lt; 1m</th><th class="awrbg" scope="col" id="&lt;2m">&lt; 2m</th><th class="awrbg" scope="col" id="&gt;=2m">&gt;=2m</th></tr>
<tr><td scope="row" class='awrc'>enq: TX - row lock contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>99.4</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>98.7</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>154</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>1317</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.6</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>98.5</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>97.5</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.3</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>.7</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7440"></a>
<h3 class="awr">Wait Event Histogram (up to 1 hr)</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5800"></a>
<h3 class="awr">Service Statistics</h3>
<ul>
<li class="awr"> ordered by DB Time</li>
</ul>
<table border="0" class="tdiff" summary="This table displays service statistics. It displays service names and corresponding DB time, DB CPU, Physical reads, logical reads."><tr><th class="awrbg" scope="col">Service Name</th><th class="awrbg" scope="col">DB Time (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">Physical Reads (K)</th><th class="awrbg" scope="col">Logical Reads (K)</th></tr>
<tr><td scope="row" class='awrc'>p60sdb.example.com</td><td align="right" class='awrc'>129,620</td><td align="right" class='awrc'>6,633</td><td align="right" class='awrc'>34,560</td><td align="right" class='awrc'>1,214,620</td></tr>
<tr><td scope="row" class='awrnc'>SYS$BACKGROUND</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>65</td></tr>
<tr><td scope="row" class='awrc'>SYS$USERS</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>p60sdbXDB</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5820"></a>
<h3 class="awr">Service Wait Class Stats</h3>
<ul>
<li class="awr"> Wait Class info for services in the Service Statistics section.  </li>
<li class="awr"> Total Waits and Time Waited displayed for the following wait	  classes:  User I/O, Concurrency, Administrative, Network </li>
<li class="awr"> Time Waited (Wt Time) in seconds</li>
</ul>
<table border="0" class="tdiff" summary="This table displays service wait class statistics. It displays user I/O total wait, user I/O wait time, concurrency total wait, concurrency wait time, etc."><tr><th class="awrbg" scope="col">Service Name</th><th class="awrbg" scope="col">User I/O Total Wts</th><th class="awrbg" scope="col">User I/O Wt Time</th><th class="awrbg" scope="col">Concurcy Total Wts</th><th class="awrbg" scope="col">Concurcy Wt Time</th><th class="awrbg" scope="col">Admin Total Wts</th><th class="awrbg" scope="col">Admin Wt Time</th><th class="awrbg" scope="col">Network Total Wts</th><th class="awrbg" scope="col">Network Wt Time</th></tr>
<tr><td scope="row" class='awrc'>p60sdb.example.com</td>
<td align="right" class='awrc'>1659323</td><td align="right" class='awrc'>71004</td><td align="right" class='awrc'>11522</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>545</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SYS$BACKGROUND</td>
<td align="right" class='awrnc'>4628</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>6744</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>936</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SYS$USERS</td>
<td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5840"></a>
<h3 class="awr">Top 10 Channel Waits</h3>
<ul>
<li class="awr"> Top 10 Channel Waits by wait time </li>
</ul>
<table border="0" class="tdiff" summary="This table displays top 10 Channel Watis by wait time."><tr><th class="awrbg" scope="col">Channel</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg Wait</th></tr>
<tr><td scope="row" class='awrc'>kxfp control signal channel</td>
<td align="right" class='awrc'>13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>675.77us</td></tr>
<tr><td scope="row" class='awrnc'>obj broadcast channel</td>
<td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.31ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2310"></a>
<h3 class="awr">Top Process Types by Wait Class</h3>
<ul>
<li class="awr"> This table displays top process types ordered by wait class</li>
</ul>
<table border="0" class="tdiff" summary="Top Process Types by Wait Class. . This table displays top process types ordered by wait class"><tr><th class="awrbg" scope="col">Process Type</th><th class="awrbg" scope="col">Description</th><th class="awrbg" scope="col">Wait Class Type</th><th class="awrbg" scope="col">Wait Time (sec)</th></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>71,910.55</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>Cluster</td><td align="right" class='awrnc'>54,043.87</td></tr>
<tr><td scope="row" class='awrc'>MZ</td><td scope="row" class='awrc'>MMON slave class 2</td><td scope="row" class='awrc'>Application</td><td align="right" class='awrc'>66.98</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>24.52</td></tr>
<tr><td scope="row" class='awrc'>CKPT</td><td scope="row" class='awrc'>checkpoint</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>18.99</td></tr>
<tr><td scope="row" class='awrnc'>M</td><td scope="row" class='awrnc'>MMON slave class 1</td><td scope="row" class='awrnc'>Cluster</td><td align="right" class='awrnc'>18.40</td></tr>
<tr><td scope="row" class='awrc'>W</td><td scope="row" class='awrc'>space management slave pool</td><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>14.60</td></tr>
<tr><td scope="row" class='awrnc'>M</td><td scope="row" class='awrnc'>MMON slave class 1</td><td scope="row" class='awrnc'>User I/O</td><td align="right" class='awrnc'>13.72</td></tr>
<tr><td scope="row" class='awrc'>LMON</td><td scope="row" class='awrc'>global enqueue service monitor</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>12.53</td></tr>
<tr><td scope="row" class='awrnc'>MMON</td><td scope="row" class='awrnc'>Manageability Monitor Process</td><td scope="row" class='awrnc'>Concurrency</td><td align="right" class='awrnc'>10.22</td></tr>
<tr><td scope="row" class='awrc'>IMR</td><td scope="row" class='awrc'>CGS IMR Slave</td><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>9.19</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>Concurrency</td><td align="right" class='awrnc'>8.39</td></tr>
<tr><td scope="row" class='awrc'>RMS0</td><td scope="row" class='awrc'>rac management server</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>7.32</td></tr>
<tr><td scope="row" class='awrnc'>CKPT</td><td scope="row" class='awrnc'>checkpoint</td><td scope="row" class='awrnc'>User I/O</td><td align="right" class='awrnc'>6.01</td></tr>
<tr><td scope="row" class='awrc'>W</td><td scope="row" class='awrc'>space management slave pool</td><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>5.47</td></tr>
<tr><td scope="row" class='awrnc'>LG</td><td scope="row" class='awrnc'>Log Writer Slave</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>4.93</td></tr>
<tr><td scope="row" class='awrc'>MMON</td><td scope="row" class='awrc'>Manageability Monitor Process</td><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>4.85</td></tr>
<tr><td scope="row" class='awrnc'>P</td><td scope="row" class='awrnc'>Parallel query slave</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>4.79</td></tr>
<tr><td scope="row" class='awrc'>M</td><td scope="row" class='awrc'>MMON slave class 1</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>3.96</td></tr>
<tr><td scope="row" class='awrnc'>MZ</td><td scope="row" class='awrnc'>MMON slave class 2</td><td scope="row" class='awrnc'>Cluster</td><td align="right" class='awrnc'>3.82</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2320"></a>
<h3 class="awr">Top Process Types by CPU Used</h3>
<ul>
<li class="awr"> This table displays top process types ordered by CPU time</li>
</ul>
<table border="0" class="tdiff" summary="Top Process Types by CPU Used. . This table displays top process types ordered by CPU time"><tr><th class="awrbg" scope="col">Process Type</th><th class="awrbg" scope="col">Description</th><th class="awrbg" scope="col">CPU Time (sec)</th></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td align="right" class='awrc'>6,693.69</td></tr>
<tr><td scope="row" class='awrnc'>LM</td><td scope="row" class='awrnc'>global cache service process</td><td align="right" class='awrnc'>1,002.37</td></tr>
<tr><td scope="row" class='awrc'>RS*</td><td scope="row" class='awrc'>GCS RM Slave</td><td align="right" class='awrc'>37.34</td></tr>
<tr><td scope="row" class='awrnc'>VKTM</td><td scope="row" class='awrnc'>Virtual Keeper of TiMe process</td><td align="right" class='awrnc'>25.12</td></tr>
<tr><td scope="row" class='awrc'>P</td><td scope="row" class='awrc'>Parallel query slave</td><td align="right" class='awrc'>21.59</td></tr>
<tr><td scope="row" class='awrnc'>CR*</td><td scope="row" class='awrnc'>GCS CR Slave</td><td align="right" class='awrnc'>15.43</td></tr>
<tr><td scope="row" class='awrc'>DIA0</td><td scope="row" class='awrc'>diagnosibility process 0</td><td align="right" class='awrc'>13.13</td></tr>
<tr><td scope="row" class='awrnc'>M</td><td scope="row" class='awrnc'>MMON slave class 1</td><td align="right" class='awrnc'>13.10</td></tr>
<tr><td scope="row" class='awrc'>SCM</td><td scope="row" class='awrc'>DLM Statistics Collection and Management Slave</td><td align="right" class='awrc'>5.19</td></tr>
<tr><td scope="row" class='awrnc'>GCR</td><td scope="row" class='awrnc'>GCR Slaves (LMHB)</td><td align="right" class='awrnc'>4.51</td></tr>
<tr><td scope="row" class='awrc'>LMHB</td><td scope="row" class='awrc'>lm heartbeat monitor</td><td align="right" class='awrc'>3.62</td></tr>
<tr><td scope="row" class='awrnc'>IPC0</td><td scope="row" class='awrnc'>IPC Service 0</td><td align="right" class='awrnc'>2.64</td></tr>
<tr><td scope="row" class='awrc'>MMNL</td><td scope="row" class='awrc'>Manageability Monitor Process 2</td><td align="right" class='awrc'>2.21</td></tr>
<tr><td scope="row" class='awrnc'>DBRM</td><td scope="row" class='awrnc'>DataBase Resource Manager</td><td align="right" class='awrnc'>1.89</td></tr>
<tr><td scope="row" class='awrc'>MZ</td><td scope="row" class='awrc'>MMON slave class 2</td><td align="right" class='awrc'>1.86</td></tr>
<tr><td scope="row" class='awrnc'>LMD0</td><td scope="row" class='awrnc'>global enqueue service daemon 0</td><td align="right" class='awrnc'>1.81</td></tr>
<tr><td scope="row" class='awrc'>LMON</td><td scope="row" class='awrc'>global enqueue service monitor</td><td align="right" class='awrc'>1.79</td></tr>
<tr><td scope="row" class='awrnc'>W</td><td scope="row" class='awrnc'>space management slave pool</td><td align="right" class='awrnc'>1.38</td></tr>
<tr><td scope="row" class='awrc'>IMR</td><td scope="row" class='awrc'>CGS IMR Slave</td><td align="right" class='awrc'>1.20</td></tr>
<tr><td scope="row" class='awrnc'>LMD2</td><td scope="row" class='awrnc'>global enqueue service daemon 2</td><td align="right" class='awrnc'>1.07</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="22"></a>
<h2 class="awr">
SQL Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#400">SQL ordered by Elapsed Time</a></li>
<li class="awr"><a class="awr" href="#500">SQL ordered by CPU Time</a></li>
<li class="awr"><a class="awr" href="#550">SQL ordered by User I/O Wait Time</a></li>
<li class="awr"><a class="awr" href="#600">SQL ordered by Gets</a></li>
<li class="awr"><a class="awr" href="#700">SQL ordered by Reads</a></li>
<li class="awr"><a class="awr" href="#740">SQL ordered by Physical Reads (UnOptimized)</a></li>
<li class="awr"><a class="awr" href="#800">SQL ordered by Executions</a></li>
<li class="awr"><a class="awr" href="#900">SQL ordered by Parse Calls</a></li>
<li class="awr"><a class="awr" href="#1000">SQL ordered by Sharable Memory</a></li>
<li class="awr"><a class="awr" href="#1100">SQL ordered by Version Count</a></li>
<li class="awr"><a class="awr" href="#1150">SQL ordered by Cluster Wait Time</a></li>
<li class="awr"><a class="awr" href="#99997">Complete List of SQL Text</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="400"></a>
<h3 class="awr">SQL ordered by Elapsed Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> % Total DB Time is the Elapsed Time of the SQL statement divided     into the Total Database Time multiplied by 100 </li>
<li class="awr"> %Total - Elapsed Time	as a percentage of Total DB time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   87.9% of Total DB Time (s):	       132,423</li>
<li class="awr">Captured PL/SQL account for   34.2% of Total DB Time (s):	  132,423</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by elapsed time"><tr><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">Elapsed Time per Exec (s) </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">	SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>116,360.48</td><td align="right" class='awrc'>13,530,723</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>87.87</td><td align="right" class='awrc'>4.49</td><td align="right" class='awrc'>55.71</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>978.57</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>489.28</td><td align="right" class='awrnc'>0.74</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>40.27</td><td scope="row" class='awrnc'><a class="awr" href="#0fkurntnzjbs2">0fkurntnzjbs2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>977.47</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>488.73</td><td align="right" class='awrc'>0.74</td><td align="right" class='awrc'>1.69</td><td align="right" class='awrc'>35.91</td><td scope="row" class='awrc'><a class="awr" href="#9d1h2t7jhjzb0">9d1h2t7jhjzb0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>977.10</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>488.55</td><td align="right" class='awrnc'>0.74</td><td align="right" class='awrnc'>1.71</td><td align="right" class='awrnc'>37.19</td><td scope="row" class='awrnc'><a class="awr" href="#7j116g127a7n9">7j116g127a7n9</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>976.99</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>488.49</td><td align="right" class='awrc'>0.74</td><td align="right" class='awrc'>1.70</td><td align="right" class='awrc'>36.33</td><td scope="row" class='awrc'><a class="awr" href="#2jbx2sk2bynuw">2jbx2sk2bynuw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>976.69</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>488.35</td><td align="right" class='awrnc'>0.74</td><td align="right" class='awrnc'>3.77</td><td align="right" class='awrnc'>98.55</td><td scope="row" class='awrnc'><a class="awr" href="#26sn8ac7rgup8">26sn8ac7rgup8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>976.42</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>488.21</td><td align="right" class='awrc'>0.74</td><td align="right" class='awrc'>1.68</td><td align="right" class='awrc'>37.41</td><td scope="row" class='awrc'><a class="awr" href="#0f9fdb27bux51">0f9fdb27bux51</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>976.18</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>488.09</td><td align="right" class='awrnc'>0.74</td><td align="right" class='awrnc'>1.63</td><td align="right" class='awrnc'>38.47</td><td scope="row" class='awrnc'><a class="awr" href="#fy5wc7anwa0yh">fy5wc7anwa0yh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>976.12</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>488.06</td><td align="right" class='awrc'>0.74</td><td align="right" class='awrc'>1.68</td><td align="right" class='awrc'>41.50</td><td scope="row" class='awrc'><a class="awr" href="#bx7t0n3f5rv2v">bx7t0n3f5rv2v</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>975.79</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>487.90</td><td align="right" class='awrnc'>0.74</td><td align="right" class='awrnc'>1.74</td><td align="right" class='awrnc'>42.26</td><td scope="row" class='awrnc'><a class="awr" href="#00u1cz9td3zd9">00u1cz9td3zd9</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="500"></a>
<h3 class="awr">SQL ordered by CPU Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - CPU Time	as a percentage of Total DB CPU </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   77.3% of Total CPU Time (s): 	  6,776</li>
<li class="awr">Captured PL/SQL account for   67.3% of Total CPU Time (s):	     6,776</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by CPU time"><tr><th class="awrbg" scope="col">CPU    Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">CPU per  Exec (s)</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>5,223.50</td><td align="right" class='awrc'>13,530,723</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>77.09</td><td align="right" class='awrc'>116,360.48</td><td align="right" class='awrc'>4.49</td><td align="right" class='awrc'>55.71</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>973.60</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>486.80</td><td align="right" class='awrnc'>14.37</td><td align="right" class='awrnc'>974.60</td><td align="right" class='awrnc'>99.90</td><td align="right" class='awrnc'>0.02</td><td scope="row" class='awrnc'><a class="awr" href="#d8zwkn2fy9t2s">d8zwkn2fy9t2s</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>973.03</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>486.51</td><td align="right" class='awrc'>14.36</td><td align="right" class='awrc'>973.67</td><td align="right" class='awrc'>99.93</td><td align="right" class='awrc'>0.00</td><td scope="row" class='awrc'><a class="awr" href="#b329y81c4wbq1">b329y81c4wbq1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>971.18</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>485.59</td><td align="right" class='awrnc'>14.33</td><td align="right" class='awrnc'>972.68</td><td align="right" class='awrnc'>99.85</td><td align="right" class='awrnc'>0.07</td><td scope="row" class='awrnc'><a class="awr" href="#fndd8kn6zzc00">fndd8kn6zzc00</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>486.24</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>486.24</td><td align="right" class='awrc'>7.18</td><td align="right" class='awrc'>487.33</td><td align="right" class='awrc'>99.78</td><td align="right" class='awrc'>0.17</td><td scope="row" class='awrc'><a class="awr" href="#a52uzk244rp72">a52uzk244rp72</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>38.25</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>19.13</td><td align="right" class='awrnc'>0.56</td><td align="right" class='awrnc'>974.92</td><td align="right" class='awrnc'>3.92</td><td align="right" class='awrnc'>98.46</td><td scope="row" class='awrnc'><a class="awr" href="#6gfqnqrxd0dmy">6gfqnqrxd0dmy</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.94</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>18.97</td><td align="right" class='awrc'>0.56</td><td align="right" class='awrc'>974.59</td><td align="right" class='awrc'>3.89</td><td align="right" class='awrc'>98.46</td><td scope="row" class='awrc'><a class="awr" href="#4za5zb55hj6w6">4za5zb55hj6w6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>37.62</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>18.81</td><td align="right" class='awrnc'>0.56</td><td align="right" class='awrnc'>973.58</td><td align="right" class='awrnc'>3.86</td><td align="right" class='awrnc'>98.48</td><td scope="row" class='awrnc'><a class="awr" href="#6pcyz05z3k6jd">6pcyz05z3k6jd</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>37.60</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>18.80</td><td align="right" class='awrc'>0.55</td><td align="right" class='awrc'>974.45</td><td align="right" class='awrc'>3.86</td><td align="right" class='awrc'>98.48</td><td scope="row" class='awrc'><a class="awr" href="#dhz4fxc8z3b1n">dhz4fxc8z3b1n</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>37.58</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>18.79</td><td align="right" class='awrnc'>0.55</td><td align="right" class='awrnc'>973.51</td><td align="right" class='awrnc'>3.86</td><td align="right" class='awrnc'>98.50</td><td scope="row" class='awrnc'><a class="awr" href="#0fshmsa8432z1">0fshmsa8432z1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="550"></a>
<h3 class="awr">SQL ordered by User I/O Wait Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - User I/O Time as a percentage of Total User I/O Wait time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   86.8% of Total User I/O Wait Time (s):	   74,724</li>
<li class="awr">Captured PL/SQL account for   38.8% of Total User I/O Wait Time (s):	      74,724</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by user I/O time"><tr><th class="awrbg" scope="col">User I/O Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">UIO per  Exec (s)</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>64,826.95</td><td align="right" class='awrc'>13,530,723</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>86.76</td><td align="right" class='awrc'>116,360.48</td><td align="right" class='awrc'>4.49</td><td align="right" class='awrc'>55.71</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>962.54</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>481.27</td><td align="right" class='awrnc'>1.29</td><td align="right" class='awrnc'>976.69</td><td align="right" class='awrnc'>3.77</td><td align="right" class='awrnc'>98.55</td><td scope="row" class='awrnc'><a class="awr" href="#26sn8ac7rgup8">26sn8ac7rgup8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>961.60</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>480.80</td><td align="right" class='awrc'>1.29</td><td align="right" class='awrc'>975.09</td><td align="right" class='awrc'>3.66</td><td align="right" class='awrc'>98.62</td><td scope="row" class='awrc'><a class="awr" href="#ddpwcrwq8vccq">ddpwcrwq8vccq</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>961.52</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>480.76</td><td align="right" class='awrnc'>1.29</td><td align="right" class='awrnc'>974.83</td><td align="right" class='awrnc'>3.58</td><td align="right" class='awrnc'>98.63</td><td scope="row" class='awrnc'><a class="awr" href="#c6bsgstj3jm1y">c6bsgstj3jm1y</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>961.46</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>480.73</td><td align="right" class='awrc'>1.29</td><td align="right" class='awrc'>975.09</td><td align="right" class='awrc'>3.68</td><td align="right" class='awrc'>98.60</td><td scope="row" class='awrc'><a class="awr" href="#b7t6ccanqd3pt">b7t6ccanqd3pt</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>961.14</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>480.57</td><td align="right" class='awrnc'>1.29</td><td align="right" class='awrnc'>975.39</td><td align="right" class='awrnc'>3.74</td><td align="right" class='awrnc'>98.54</td><td scope="row" class='awrnc'><a class="awr" href="#d5jwvg7u8kh94">d5jwvg7u8kh94</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>960.89</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>480.44</td><td align="right" class='awrc'>1.29</td><td align="right" class='awrc'>974.87</td><td align="right" class='awrc'>3.74</td><td align="right" class='awrc'>98.57</td><td scope="row" class='awrc'><a class="awr" href="#1cvh1jrtm7sxd">1cvh1jrtm7sxd</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>960.53</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>480.27</td><td align="right" class='awrnc'>1.29</td><td align="right" class='awrnc'>974.19</td><td align="right" class='awrnc'>3.68</td><td align="right" class='awrnc'>98.60</td><td scope="row" class='awrnc'><a class="awr" href="#8wyaxgug4a648">8wyaxgug4a648</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>960.36</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>480.18</td><td align="right" class='awrc'>1.29</td><td align="right" class='awrc'>974.05</td><td align="right" class='awrc'>3.69</td><td align="right" class='awrc'>98.59</td><td scope="row" class='awrc'><a class="awr" href="#804vrfqav27ua">804vrfqav27ua</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>960.25</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>480.13</td><td align="right" class='awrnc'>1.29</td><td align="right" class='awrnc'>974.83</td><td align="right" class='awrnc'>3.84</td><td align="right" class='awrnc'>98.50</td><td scope="row" class='awrnc'><a class="awr" href="#3x31q3h9nbczf">3x31q3h9nbczf</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>959.92</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>479.96</td><td align="right" class='awrc'>1.28</td><td align="right" class='awrc'>974.92</td><td align="right" class='awrc'>3.92</td><td align="right" class='awrc'>98.46</td><td scope="row" class='awrc'><a class="awr" href="#6gfqnqrxd0dmy">6gfqnqrxd0dmy</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>959.67</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>479.83</td><td align="right" class='awrnc'>1.28</td><td align="right" class='awrnc'>974.45</td><td align="right" class='awrnc'>3.86</td><td align="right" class='awrnc'>98.48</td><td scope="row" class='awrnc'><a class="awr" href="#dhz4fxc8z3b1n">dhz4fxc8z3b1n</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>959.66</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>479.83</td><td align="right" class='awrc'>1.28</td><td align="right" class='awrc'>973.53</td><td align="right" class='awrc'>3.73</td><td align="right" class='awrc'>98.58</td><td scope="row" class='awrc'><a class="awr" href="#c2gukkg28mgry">c2gukkg28mgry</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>959.54</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>479.77</td><td align="right" class='awrnc'>1.28</td><td align="right" class='awrnc'>974.59</td><td align="right" class='awrnc'>3.89</td><td align="right" class='awrnc'>98.46</td><td scope="row" class='awrnc'><a class="awr" href="#4za5zb55hj6w6">4za5zb55hj6w6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>958.97</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>479.49</td><td align="right" class='awrc'>1.28</td><td align="right" class='awrc'>972.40</td><td align="right" class='awrc'>3.65</td><td align="right" class='awrc'>98.62</td><td scope="row" class='awrc'><a class="awr" href="#2wnzatwb6awz6">2wnzatwb6awz6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>958.95</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>479.48</td><td align="right" class='awrnc'>1.28</td><td align="right" class='awrnc'>972.76</td><td align="right" class='awrnc'>3.70</td><td align="right" class='awrnc'>98.58</td><td scope="row" class='awrnc'><a class="awr" href="#4kvs15brhx2na">4kvs15brhx2na</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>958.89</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>479.44</td><td align="right" class='awrc'>1.28</td><td align="right" class='awrc'>973.24</td><td align="right" class='awrc'>3.75</td><td align="right" class='awrc'>98.53</td><td scope="row" class='awrc'><a class="awr" href="#5b5dam6wbmycc">5b5dam6wbmycc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>958.86</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>479.43</td><td align="right" class='awrnc'>1.28</td><td align="right" class='awrnc'>973.51</td><td align="right" class='awrnc'>3.86</td><td align="right" class='awrnc'>98.50</td><td scope="row" class='awrnc'><a class="awr" href="#0fshmsa8432z1">0fshmsa8432z1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>958.82</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>479.41</td><td align="right" class='awrc'>1.28</td><td align="right" class='awrc'>972.73</td><td align="right" class='awrc'>3.75</td><td align="right" class='awrc'>98.57</td><td scope="row" class='awrc'><a class="awr" href="#3b0dw8qugt8u0">3b0dw8qugt8u0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>958.74</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>479.37</td><td align="right" class='awrnc'>1.28</td><td align="right" class='awrnc'>973.58</td><td align="right" class='awrnc'>3.86</td><td align="right" class='awrnc'>98.48</td><td scope="row" class='awrnc'><a class="awr" href="#6pcyz05z3k6jd">6pcyz05z3k6jd</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>958.70</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>479.35</td><td align="right" class='awrc'>1.28</td><td align="right" class='awrc'>972.66</td><td align="right" class='awrc'>3.78</td><td align="right" class='awrc'>98.57</td><td scope="row" class='awrc'><a class="awr" href="#cmg650ct9w552">cmg650ct9w552</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>958.58</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>479.29</td><td align="right" class='awrnc'>1.28</td><td align="right" class='awrnc'>973.36</td><td align="right" class='awrnc'>3.81</td><td align="right" class='awrnc'>98.48</td><td scope="row" class='awrnc'><a class="awr" href="#7mzdtp0dvu09c">7mzdtp0dvu09c</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="600"></a>
<h3 class="awr">SQL ordered by Gets</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - Buffer Gets	as a percentage of Total Buffer Gets </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Buffer Gets:   1,249,870,563</li>
<li class="awr">Captured SQL account for   87.9% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by buffer gets"><tr><th class="awrbg" scope="col">Buffer Gets </th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">Gets     per Exec  </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col"> %CPU</th><th class="awrbg" scope="col">	%IO</th><th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>1,097,986,868</td><td align="right" class='awrc'>13,530,723</td><td align="right" class='awrc'>81.15</td><td align="right" class='awrc'>87.85</td><td align="right" class='awrc'>116,360.48</td><td class='awrc'>4.5</td><td class='awrc'>55.7</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>341,634,534</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>170,817,267.00</td><td align="right" class='awrnc'>27.33</td><td align="right" class='awrnc'>973.67</td><td class='awrnc'>99.9</td><td class='awrnc'>0</td><td scope="row" class='awrnc'><a class="awr" href="#b329y81c4wbq1">b329y81c4wbq1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>297,209,006</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>148,604,503.00</td><td align="right" class='awrc'>23.78</td><td align="right" class='awrc'>972.68</td><td class='awrc'>99.8</td><td class='awrc'>.1</td><td scope="row" class='awrc'><a class="awr" href="#fndd8kn6zzc00">fndd8kn6zzc00</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>276,458,522</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>138,229,261.00</td><td align="right" class='awrnc'>22.12</td><td align="right" class='awrnc'>974.60</td><td class='awrnc'>99.9</td><td class='awrnc'>0</td><td scope="row" class='awrnc'><a class="awr" href="#d8zwkn2fy9t2s">d8zwkn2fy9t2s</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>144,125,875</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>144,125,875.00</td><td align="right" class='awrc'>11.53</td><td align="right" class='awrc'>487.33</td><td class='awrc'>99.8</td><td class='awrc'>.2</td><td scope="row" class='awrc'><a class="awr" href="#a52uzk244rp72">a52uzk244rp72</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,049,342</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>524,671.00</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>974.92</td><td class='awrnc'>3.9</td><td class='awrnc'>98.5</td><td scope="row" class='awrnc'><a class="awr" href="#6gfqnqrxd0dmy">6gfqnqrxd0dmy</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>1,035,555</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>517,777.50</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>974.59</td><td class='awrc'>3.9</td><td class='awrc'>98.5</td><td scope="row" class='awrc'><a class="awr" href="#4za5zb55hj6w6">4za5zb55hj6w6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>1,008,728</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>504,364.00</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>973.36</td><td class='awrnc'>3.8</td><td class='awrnc'>98.5</td><td scope="row" class='awrnc'><a class="awr" href="#7mzdtp0dvu09c">7mzdtp0dvu09c</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>994,999</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>497,499.50</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>973.58</td><td class='awrc'>3.9</td><td class='awrc'>98.5</td><td scope="row" class='awrc'><a class="awr" href="#6pcyz05z3k6jd">6pcyz05z3k6jd</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>987,714</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>493,857.00</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>973.51</td><td class='awrnc'>3.9</td><td class='awrnc'>98.5</td><td scope="row" class='awrnc'><a class="awr" href="#0fshmsa8432z1">0fshmsa8432z1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="700"></a>
<h3 class="awr">SQL ordered by Reads</h3>
<ul>
<li class="awr"> %Total - Physical Reads as a percentage of Total Disk Reads </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Disk Reads:      35,572,455</li>
<li class="awr">Captured SQL account for   88.3% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by physical reads"><tr><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">Reads	  per Exec  </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>31,399,070</td><td align="right" class='awrc'>13,530,723</td><td align="right" class='awrc'>2.32</td><td align="right" class='awrc'>88.27</td><td align="right" class='awrc'>116,360.48</td><td align="right" class='awrc'>4.49</td><td align="right" class='awrc'>55.71</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>530,796</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>265,398.00</td><td align="right" class='awrnc'>1.49</td><td align="right" class='awrnc'>974.45</td><td align="right" class='awrnc'>3.86</td><td align="right" class='awrnc'>98.48</td><td scope="row" class='awrnc'><a class="awr" href="#dhz4fxc8z3b1n">dhz4fxc8z3b1n</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>529,499</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>264,749.50</td><td align="right" class='awrc'>1.49</td><td align="right" class='awrc'>974.92</td><td align="right" class='awrc'>3.92</td><td align="right" class='awrc'>98.46</td><td scope="row" class='awrc'><a class="awr" href="#6gfqnqrxd0dmy">6gfqnqrxd0dmy</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>528,853</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>264,426.50</td><td align="right" class='awrnc'>1.49</td><td align="right" class='awrnc'>973.58</td><td align="right" class='awrnc'>3.86</td><td align="right" class='awrnc'>98.48</td><td scope="row" class='awrnc'><a class="awr" href="#6pcyz05z3k6jd">6pcyz05z3k6jd</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>527,934</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>263,967.00</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>974.83</td><td align="right" class='awrc'>3.84</td><td align="right" class='awrc'>98.50</td><td scope="row" class='awrc'><a class="awr" href="#3x31q3h9nbczf">3x31q3h9nbczf</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>527,891</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>263,945.50</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>972.73</td><td align="right" class='awrnc'>3.75</td><td align="right" class='awrnc'>98.57</td><td scope="row" class='awrnc'><a class="awr" href="#3b0dw8qugt8u0">3b0dw8qugt8u0</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>527,160</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>263,580.00</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>976.69</td><td align="right" class='awrc'>3.77</td><td align="right" class='awrc'>98.55</td><td scope="row" class='awrc'><a class="awr" href="#26sn8ac7rgup8">26sn8ac7rgup8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>526,389</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>263,194.50</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>975.39</td><td align="right" class='awrnc'>3.74</td><td align="right" class='awrnc'>98.54</td><td scope="row" class='awrnc'><a class="awr" href="#d5jwvg7u8kh94">d5jwvg7u8kh94</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>526,323</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>263,161.50</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>972.66</td><td align="right" class='awrc'>3.78</td><td align="right" class='awrc'>98.57</td><td scope="row" class='awrc'><a class="awr" href="#cmg650ct9w552">cmg650ct9w552</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>526,056</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>263,028.00</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>973.24</td><td align="right" class='awrnc'>3.75</td><td align="right" class='awrnc'>98.53</td><td scope="row" class='awrnc'><a class="awr" href="#5b5dam6wbmycc">5b5dam6wbmycc</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>525,443</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>262,721.50</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>974.59</td><td align="right" class='awrc'>3.89</td><td align="right" class='awrc'>98.46</td><td scope="row" class='awrc'><a class="awr" href="#4za5zb55hj6w6">4za5zb55hj6w6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>523,778</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>261,889.00</td><td align="right" class='awrnc'>1.47</td><td align="right" class='awrnc'>973.51</td><td align="right" class='awrnc'>3.86</td><td align="right" class='awrnc'>98.50</td><td scope="row" class='awrnc'><a class="awr" href="#0fshmsa8432z1">0fshmsa8432z1</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>520,016</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>260,008.00</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>972.76</td><td align="right" class='awrc'>3.70</td><td align="right" class='awrc'>98.58</td><td scope="row" class='awrc'><a class="awr" href="#4kvs15brhx2na">4kvs15brhx2na</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>519,048</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>259,524.00</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>974.87</td><td align="right" class='awrnc'>3.74</td><td align="right" class='awrnc'>98.57</td><td scope="row" class='awrnc'><a class="awr" href="#1cvh1jrtm7sxd">1cvh1jrtm7sxd</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>518,708</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>259,354.00</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>973.53</td><td align="right" class='awrc'>3.73</td><td align="right" class='awrc'>98.58</td><td scope="row" class='awrc'><a class="awr" href="#c2gukkg28mgry">c2gukkg28mgry</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>518,268</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>259,134.00</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>974.05</td><td align="right" class='awrnc'>3.69</td><td align="right" class='awrnc'>98.59</td><td scope="row" class='awrnc'><a class="awr" href="#804vrfqav27ua">804vrfqav27ua</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>517,006</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>258,503.00</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>974.19</td><td align="right" class='awrc'>3.68</td><td align="right" class='awrc'>98.60</td><td scope="row" class='awrc'><a class="awr" href="#8wyaxgug4a648">8wyaxgug4a648</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>515,808</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>257,904.00</td><td align="right" class='awrnc'>1.45</td><td align="right" class='awrnc'>975.09</td><td align="right" class='awrnc'>3.66</td><td align="right" class='awrnc'>98.62</td><td scope="row" class='awrnc'><a class="awr" href="#ddpwcrwq8vccq">ddpwcrwq8vccq</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>514,338</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>257,169.00</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>975.09</td><td align="right" class='awrc'>3.68</td><td align="right" class='awrc'>98.60</td><td scope="row" class='awrc'><a class="awr" href="#b7t6ccanqd3pt">b7t6ccanqd3pt</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>511,853</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>255,926.50</td><td align="right" class='awrnc'>1.44</td><td align="right" class='awrnc'>972.40</td><td align="right" class='awrnc'>3.65</td><td align="right" class='awrnc'>98.62</td><td scope="row" class='awrnc'><a class="awr" href="#2wnzatwb6awz6">2wnzatwb6awz6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>510,503</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>255,251.50</td><td align="right" class='awrc'>1.44</td><td align="right" class='awrc'>973.36</td><td align="right" class='awrc'>3.81</td><td align="right" class='awrc'>98.48</td><td scope="row" class='awrc'><a class="awr" href="#7mzdtp0dvu09c">7mzdtp0dvu09c</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>510,038</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>255,019.00</td><td align="right" class='awrnc'>1.43</td><td align="right" class='awrnc'>974.83</td><td align="right" class='awrnc'>3.58</td><td align="right" class='awrnc'>98.63</td><td scope="row" class='awrnc'><a class="awr" href="#c6bsgstj3jm1y">c6bsgstj3jm1y</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="740"></a>
<h3 class="awr">SQL ordered by Physical Reads (UnOptimized)</h3>
<ul>
<li class="awr"> UnOptimized Read Reqs = Physical Read Reqs -	    (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile) </li>
<li class="awr"> %Opt	- Optimized Reads as percentage of SQL Read Requests </li>
<li class="awr"> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs</li>
<li class="awr">Total Physical Read Requests:	   35,569,694</li>
<li class="awr">Captured SQL account for    0.4% of Total</li>
<li class="awr">Total UnOptimized Read Requests:      35,569,694</li>
<li class="awr">Captured SQL account for    0.4% of Total</li>
<li class="awr">Total Optimized Read Requests:		     1</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by unoptimized read requests"><tr><th class="awrbg" scope="col">UnOptimized Read Reqs</th><th class="awrbg" scope="col">Physical  Read Reqs</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">UnOptimized Reqs per Exec</th><th class="awrbg" scope="col">%Opt</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>530,796</td><td align="right" class='awrc'>530,796</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>265,398.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.49</td><td scope="row" class='awrc'><a class="awr" href="#dhz4fxc8z3b1n">dhz4fxc8z3b1n</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>529,499</td><td align="right" class='awrnc'>529,499</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>264,749.50</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.49</td><td scope="row" class='awrnc'><a class="awr" href="#6gfqnqrxd0dmy">6gfqnqrxd0dmy</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>528,853</td><td align="right" class='awrc'>528,853</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>264,426.50</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.49</td><td scope="row" class='awrc'><a class="awr" href="#6pcyz05z3k6jd">6pcyz05z3k6jd</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>527,934</td><td align="right" class='awrnc'>527,934</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>263,967.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.48</td><td scope="row" class='awrnc'><a class="awr" href="#3x31q3h9nbczf">3x31q3h9nbczf</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>527,891</td><td align="right" class='awrc'>527,891</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>263,945.50</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.48</td><td scope="row" class='awrc'><a class="awr" href="#3b0dw8qugt8u0">3b0dw8qugt8u0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>527,160</td><td align="right" class='awrnc'>527,160</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>263,580.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.48</td><td scope="row" class='awrnc'><a class="awr" href="#26sn8ac7rgup8">26sn8ac7rgup8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>526,389</td><td align="right" class='awrc'>526,389</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>263,194.50</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.48</td><td scope="row" class='awrc'><a class="awr" href="#d5jwvg7u8kh94">d5jwvg7u8kh94</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>526,323</td><td align="right" class='awrnc'>526,323</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>263,161.50</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.48</td><td scope="row" class='awrnc'><a class="awr" href="#cmg650ct9w552">cmg650ct9w552</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>526,056</td><td align="right" class='awrc'>526,056</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>263,028.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.48</td><td scope="row" class='awrc'><a class="awr" href="#5b5dam6wbmycc">5b5dam6wbmycc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>525,443</td><td align="right" class='awrnc'>525,443</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>262,721.50</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.48</td><td scope="row" class='awrnc'><a class="awr" href="#4za5zb55hj6w6">4za5zb55hj6w6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>523,778</td><td align="right" class='awrc'>523,778</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>261,889.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.47</td><td scope="row" class='awrc'><a class="awr" href="#0fshmsa8432z1">0fshmsa8432z1</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>520,016</td><td align="right" class='awrnc'>520,016</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>260,008.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.46</td><td scope="row" class='awrnc'><a class="awr" href="#4kvs15brhx2na">4kvs15brhx2na</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>519,048</td><td align="right" class='awrc'>519,048</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>259,524.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.46</td><td scope="row" class='awrc'><a class="awr" href="#1cvh1jrtm7sxd">1cvh1jrtm7sxd</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>518,708</td><td align="right" class='awrnc'>518,708</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>259,354.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.46</td><td scope="row" class='awrnc'><a class="awr" href="#c2gukkg28mgry">c2gukkg28mgry</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>518,268</td><td align="right" class='awrc'>518,268</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>259,134.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.46</td><td scope="row" class='awrc'><a class="awr" href="#804vrfqav27ua">804vrfqav27ua</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>517,006</td><td align="right" class='awrnc'>517,006</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>258,503.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.45</td><td scope="row" class='awrnc'><a class="awr" href="#8wyaxgug4a648">8wyaxgug4a648</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>515,808</td><td align="right" class='awrc'>515,808</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>257,904.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.45</td><td scope="row" class='awrc'><a class="awr" href="#ddpwcrwq8vccq">ddpwcrwq8vccq</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>514,338</td><td align="right" class='awrnc'>514,338</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>257,169.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.45</td><td scope="row" class='awrnc'><a class="awr" href="#b7t6ccanqd3pt">b7t6ccanqd3pt</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>511,853</td><td align="right" class='awrc'>511,853</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>255,926.50</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.44</td><td scope="row" class='awrc'><a class="awr" href="#2wnzatwb6awz6">2wnzatwb6awz6</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>510,503</td><td align="right" class='awrnc'>510,503</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>255,251.50</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.44</td><td scope="row" class='awrnc'><a class="awr" href="#7mzdtp0dvu09c">7mzdtp0dvu09c</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>510,038</td><td align="right" class='awrc'>510,038</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>255,019.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.43</td><td scope="row" class='awrc'><a class="awr" href="#c6bsgstj3jm1y">c6bsgstj3jm1y</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="800"></a>
<h3 class="awr">SQL ordered by Executions</h3>
<ul>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Total Executions:      15,393,234</li>
<li class="awr">Captured SQL account for   87.9% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by number of executions"><tr><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">Rows Processed</th><th class="awrbg" scope="col">Rows per Exec</th><th class="awrbg" scope="col">Elapsed	Time (s)</th><th class="awrbg" scope="col"> %CPU</th><th class="awrbg" scope="col">  %IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>13,530,723</td><td align="right" class='awrc'>13,530,657</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>116,360.48</td><td class='awrc'>4.5</td><td class='awrc'>55.7</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>1,351</td><td align="right" class='awrnc'>1,351</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>1.53</td><td class='awrnc'>12.1</td><td class='awrnc'>15</td><td scope="row" class='awrnc'><a class="awr" href="#f3ww8rgva3hrs">f3ww8rgva3hrs</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>update /* KSXM:FLUSH COL */ sy...</td></tr>
<tr><td align="right" class='awrc'>529</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.11</td><td class='awrc'>23.1</td><td class='awrc'>71.6</td><td scope="row" class='awrc'><a class="awr" href="#87gaftwrm2h68">87gaftwrm2h68</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select o.owner#, o.name, o.nam...</td></tr>
<tr><td align="right" class='awrnc'>349</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.23</td><td class='awrnc'>7.1</td><td class='awrnc'>72.6</td><td scope="row" class='awrnc'><a class="awr" href="#0gx3b09qrx9f5">0gx3b09qrx9f5</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select obj#, index# from oid$ ...</td></tr>
<tr><td align="right" class='awrc'>240</td><td align="right" class='awrc'>240</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.57</td><td class='awrc'>28.8</td><td class='awrc'>0</td><td scope="row" class='awrc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
<tr><td align="right" class='awrnc'>214</td><td align="right" class='awrnc'>214</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>1.58</td><td class='awrnc'>3.8</td><td class='awrnc'>85.1</td><td scope="row" class='awrnc'><a class="awr" href="#5cu0x10yu88sw">5cu0x10yu88sw</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>merge into sys.wri$_index_usag...</td></tr>
<tr><td align="right" class='awrc'>139</td><td align="right" class='awrc'>139</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>1.05</td><td class='awrc'>3</td><td class='awrc'>.6</td><td scope="row" class='awrc'><a class="awr" href="#3dbzmtf9ahvzt">3dbzmtf9ahvzt</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>merge /* KSXM:OPTIM_DML_INF */...</td></tr>
<tr><td align="right" class='awrnc'>133</td><td align="right" class='awrnc'>133</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0.51</td><td class='awrnc'>5.4</td><td class='awrnc'>68.4</td><td scope="row" class='awrnc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>INSERT INTO wri$_adv_message_g...</td></tr>
<tr><td align="right" class='awrc'>112</td><td align="right" class='awrc'>112</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.46</td><td class='awrc'>6.9</td><td class='awrc'>46.3</td><td scope="row" class='awrc'><a class="awr" href="#f80h0xb1qvbsk">f80h0xb1qvbsk</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>SELECT sys.wri$_adv_seq_msggro...</td></tr>
<tr><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0.07</td><td class='awrnc'>9.8</td><td class='awrnc'>85.1</td><td scope="row" class='awrnc'><a class="awr" href="#5u7g54s63p4ts">5u7g54s63p4ts</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select toid from type$ where p...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="900"></a>
<h3 class="awr">SQL ordered by Parse Calls</h3>
<ul>
<li class="awr">Total Parse Calls:	     4,482</li>
<li class="awr">Captured SQL account for   44.8% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by number of parse calls"><tr><th class="awrbg" scope="col">Parse Calls</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">% Total Parses</th><th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>529</td><td align="right" class='awrc'>1,351</td><td align="right" class='awrc'>11.80</td><td scope="row" class='awrc'><a class="awr" href="#f3ww8rgva3hrs">f3ww8rgva3hrs</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>update /* KSXM:FLUSH COL */ sy...</td></tr>
<tr><td align="right" class='awrnc'>241</td><td align="right" class='awrnc'>240</td><td align="right" class='awrnc'>5.38</td><td scope="row" class='awrnc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
<tr><td align="right" class='awrc'>214</td><td align="right" class='awrc'>214</td><td align="right" class='awrc'>4.77</td><td scope="row" class='awrc'><a class="awr" href="#5cu0x10yu88sw">5cu0x10yu88sw</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>merge into sys.wri$_index_usag...</td></tr>
<tr><td align="right" class='awrnc'>139</td><td align="right" class='awrnc'>139</td><td align="right" class='awrnc'>3.10</td><td scope="row" class='awrnc'><a class="awr" href="#3dbzmtf9ahvzt">3dbzmtf9ahvzt</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>merge /* KSXM:OPTIM_DML_INF */...</td></tr>
<tr><td align="right" class='awrc'>133</td><td align="right" class='awrc'>133</td><td align="right" class='awrc'>2.97</td><td scope="row" class='awrc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT INTO wri$_adv_message_g...</td></tr>
<tr><td align="right" class='awrnc'>112</td><td align="right" class='awrnc'>112</td><td align="right" class='awrnc'>2.50</td><td scope="row" class='awrnc'><a class="awr" href="#f80h0xb1qvbsk">f80h0xb1qvbsk</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>SELECT sys.wri$_adv_seq_msggro...</td></tr>
<tr><td align="right" class='awrc'>94</td><td align="right" class='awrc'>94</td><td align="right" class='awrc'>2.10</td><td scope="row" class='awrc'><a class="awr" href="#5u7g54s63p4ts">5u7g54s63p4ts</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select toid from type$ where p...</td></tr>
<tr><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>2.10</td><td scope="row" class='awrnc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td align="right" class='awrc'>60</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>1.34</td><td scope="row" class='awrc'><a class="awr" href="#grwydz59pu6mc">grwydz59pu6mc</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select text from view$ where r...</td></tr>
<tr><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>1.07</td><td scope="row" class='awrnc'><a class="awr" href="#bxpcry2tpc217">bxpcry2tpc217</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /*+ opt_param('parallel...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1000"></a>
<h3 class="awr">SQL ordered by Sharable Memory</h3>
<ul>
<li class="awr">Only Statements with Sharable Memory greater than 1048576 are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by amount of shared memory used"><tr><th class="awrbg" scope="col">Sharable Mem (b)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">% Total</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>13,219,809</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.59</td><td scope="row" class='awrc'><a class="awr" href="#9yv5dwv8k0awg">9yv5dwv8k0awg</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>WITH MONITOR_DATA AS (SELECT I...</td></tr>
<tr><td align="right" class='awrnc'>5,148,639</td><td align="right" class='awrnc'>13,530,723</td><td align="right" class='awrnc'>0.23</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrc'>4,172,668</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.19</td><td scope="row" class='awrc'><a class="awr" href="#atwuyuvqkf27w">atwuyuvqkf27w</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>SELECT /*+ OPT_PARAM('_fix_con...</td></tr>
<tr><td align="right" class='awrnc'>4,141,080</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0.19</td><td scope="row" class='awrnc'>akay050h1s6c4</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1100"></a>
<h3 class="awr">SQL ordered by Version Count</h3>
<ul>
<li class="awr">Only Statements with Version Count greater than 20 are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by version counts"><tr><th class="awrbg" scope="col">Version Count </th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>256</td><td align="right" class='awrc'>&#160;</td><td scope="row" class='awrc'>akay050h1s6c4</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>176</td><td align="right" class='awrnc'>13,530,723</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1150"></a>
<h3 class="awr">SQL ordered by Cluster Wait Time</h3>
<ul>
<li class="awr"> %Total - Cluster Time	as a percentage of Total Cluster Wait Time </li>
<li class="awr"> %Clu	- Cluster Time	as a percentage of Elapsed Time </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time </li>
<li class="awr"> Only SQL with Cluster Wait Time &gt; .005 seconds is reported</li>
<li class="awr">Total Cluster Wait Time (s):	      55,496</li>
<li class="awr">Captured SQL account for   86.5% of Total</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by cluster wait time"><tr><th class="awrbg" scope="col">Cluster Wait Time (s)</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed Time(s)</th><th class="awrbg" scope="col">%Clu</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>47,950.70</td><td align="right" class='awrc'>13,530,723</td><td align="right" class='awrc'>86.40</td><td align="right" class='awrc'>116,360.48</td><td align="right" class='awrc'>41.21</td><td align="right" class='awrc'>4.49</td><td align="right" class='awrc'>55.71</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>623.59</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1.12</td><td align="right" class='awrnc'>974.82</td><td align="right" class='awrnc'>63.97</td><td align="right" class='awrnc'>1.70</td><td align="right" class='awrnc'>35.61</td><td scope="row" class='awrnc'><a class="awr" href="#3dazjp5vng515">3dazjp5vng515</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>622.30</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1.12</td><td align="right" class='awrc'>977.47</td><td align="right" class='awrc'>63.66</td><td align="right" class='awrc'>1.69</td><td align="right" class='awrc'>35.91</td><td scope="row" class='awrc'><a class="awr" href="#9d1h2t7jhjzb0">9d1h2t7jhjzb0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>617.38</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1.11</td><td align="right" class='awrnc'>975.58</td><td align="right" class='awrnc'>63.28</td><td align="right" class='awrnc'>1.67</td><td align="right" class='awrnc'>36.21</td><td scope="row" class='awrnc'><a class="awr" href="#5v778mm0ddnmm">5v778mm0ddnmm</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>615.85</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1.11</td><td align="right" class='awrc'>976.99</td><td align="right" class='awrc'>63.04</td><td align="right" class='awrc'>1.70</td><td align="right" class='awrc'>36.33</td><td scope="row" class='awrc'><a class="awr" href="#2jbx2sk2bynuw">2jbx2sk2bynuw</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>614.11</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1.11</td><td align="right" class='awrnc'>975.73</td><td align="right" class='awrnc'>62.94</td><td align="right" class='awrnc'>1.69</td><td align="right" class='awrnc'>36.54</td><td scope="row" class='awrnc'><a class="awr" href="#1ckk5cxbvfp5b">1ckk5cxbvfp5b</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>611.34</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>974.90</td><td align="right" class='awrc'>62.71</td><td align="right" class='awrc'>1.60</td><td align="right" class='awrc'>37.02</td><td scope="row" class='awrc'><a class="awr" href="#6upw6ujrb22ua">6upw6ujrb22ua</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>610.02</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1.10</td><td align="right" class='awrnc'>975.51</td><td align="right" class='awrnc'>62.53</td><td align="right" class='awrnc'>1.67</td><td align="right" class='awrnc'>37.06</td><td scope="row" class='awrnc'><a class="awr" href="#br9195pb68r6p">br9195pb68r6p</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>608.50</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>977.10</td><td align="right" class='awrc'>62.28</td><td align="right" class='awrc'>1.71</td><td align="right" class='awrc'>37.19</td><td scope="row" class='awrc'><a class="awr" href="#7j116g127a7n9">7j116g127a7n9</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>607.11</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1.09</td><td align="right" class='awrnc'>976.42</td><td align="right" class='awrnc'>62.18</td><td align="right" class='awrnc'>1.68</td><td align="right" class='awrnc'>37.41</td><td scope="row" class='awrnc'><a class="awr" href="#0f9fdb27bux51">0f9fdb27bux51</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>604.10</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>975.64</td><td align="right" class='awrc'>61.92</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>38.04</td><td scope="row" class='awrc'><a class="awr" href="#91uw3n02c1mc0">91uw3n02c1mc0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>603.32</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1.09</td><td align="right" class='awrnc'>975.03</td><td align="right" class='awrnc'>61.88</td><td align="right" class='awrnc'>1.86</td><td align="right" class='awrnc'>37.63</td><td scope="row" class='awrnc'><a class="awr" href="#4ka23y2t2bggx">4ka23y2t2bggx</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>595.76</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1.07</td><td align="right" class='awrc'>976.18</td><td align="right" class='awrc'>61.03</td><td align="right" class='awrc'>1.63</td><td align="right" class='awrc'>38.47</td><td scope="row" class='awrc'><a class="awr" href="#fy5wc7anwa0yh">fy5wc7anwa0yh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>592.27</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>974.86</td><td align="right" class='awrnc'>60.75</td><td align="right" class='awrnc'>1.85</td><td align="right" class='awrnc'>38.66</td><td scope="row" class='awrnc'><a class="awr" href="#1fbzc0qr5fpkp">1fbzc0qr5fpkp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>591.42</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1.07</td><td align="right" class='awrc'>975.79</td><td align="right" class='awrc'>60.61</td><td align="right" class='awrc'>1.71</td><td align="right" class='awrc'>38.96</td><td scope="row" class='awrc'><a class="awr" href="#2v9xhm604zr9r">2v9xhm604zr9r</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>586.17</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1.06</td><td align="right" class='awrnc'>975.47</td><td align="right" class='awrnc'>60.09</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>39.46</td><td scope="row" class='awrnc'><a class="awr" href="#4asr6fcfymm3n">4asr6fcfymm3n</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>584.91</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1.05</td><td align="right" class='awrc'>975.70</td><td align="right" class='awrc'>59.95</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>39.61</td><td scope="row" class='awrc'><a class="awr" href="#55qsa2qh8h7r3">55qsa2qh8h7r3</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>582.66</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>975.52</td><td align="right" class='awrnc'>59.73</td><td align="right" class='awrnc'>1.72</td><td align="right" class='awrnc'>39.84</td><td scope="row" class='awrnc'><a class="awr" href="#7vb6ktx6wbjj7">7vb6ktx6wbjj7</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>580.85</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1.05</td><td align="right" class='awrc'>975.48</td><td align="right" class='awrc'>59.54</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>39.91</td><td scope="row" class='awrc'><a class="awr" href="#dayqkm9pjdtv5">dayqkm9pjdtv5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>578.93</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1.04</td><td align="right" class='awrnc'>978.57</td><td align="right" class='awrnc'>59.16</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>40.27</td><td scope="row" class='awrnc'><a class="awr" href="#0fkurntnzjbs2">0fkurntnzjbs2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>565.97</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>976.12</td><td align="right" class='awrc'>57.98</td><td align="right" class='awrc'>1.68</td><td align="right" class='awrc'>41.50</td><td scope="row" class='awrc'><a class="awr" href="#bx7t0n3f5rv2v">bx7t0n3f5rv2v</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>558.09</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>975.79</td><td align="right" class='awrnc'>57.19</td><td align="right" class='awrnc'>1.74</td><td align="right" class='awrnc'>42.26</td><td scope="row" class='awrnc'><a class="awr" href="#00u1cz9td3zd9">00u1cz9td3zd9</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>11.35</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>16.43</td><td align="right" class='awrc'>69.06</td><td align="right" class='awrc'>2.16</td><td align="right" class='awrc'>21.95</td><td scope="row" class='awrc'><a class="awr" href="#8fgdzmkchnn1a">8fgdzmkchnn1a</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT /*+ APPEND LEADING(@&quot;SE...</td></tr>
<tr><td align="right" class='awrnc'>7.80</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>8.73</td><td align="right" class='awrnc'>89.39</td><td align="right" class='awrnc'>0.47</td><td align="right" class='awrnc'>6.78</td><td scope="row" class='awrnc'><a class="awr" href="#0kkhhb2w93cx0">0kkhhb2w93cx0</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>update seg$ set type#=:4, bloc...</td></tr>
<tr><td align="right" class='awrc'>2.63</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>3.13</td><td align="right" class='awrc'>84.06</td><td align="right" class='awrc'>0.32</td><td align="right" class='awrc'>15.78</td><td scope="row" class='awrc'><a class="awr" href="#gjaap3w3qbf8c">gjaap3w3qbf8c</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select count(*) from ilmobj$ w...</td></tr>
<tr><td align="right" class='awrnc'>2.01</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2.24</td><td align="right" class='awrnc'>89.81</td><td align="right" class='awrnc'>0.60</td><td align="right" class='awrnc'>9.68</td><td scope="row" class='awrnc'><a class="awr" href="#04kug40zbu4dm">04kug40zbu4dm</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select policy#, action# from a...</td></tr>
<tr><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.81</td><td align="right" class='awrc'>83.94</td><td align="right" class='awrc'>0.89</td><td align="right" class='awrc'>15.65</td><td scope="row" class='awrc'><a class="awr" href="#8swypbbr0m372">8swypbbr0m372</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select order#, columns, types ...</td></tr>
<tr><td align="right" class='awrnc'>1.15</td><td align="right" class='awrnc'>1,351</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>75.17</td><td align="right" class='awrnc'>12.12</td><td align="right" class='awrnc'>15.05</td><td scope="row" class='awrnc'><a class="awr" href="#f3ww8rgva3hrs">f3ww8rgva3hrs</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>update /* KSXM:FLUSH COL */ sy...</td></tr>
<tr><td align="right" class='awrc'>1.11</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.47</td><td align="right" class='awrc'>75.30</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>24.33</td><td scope="row" class='awrc'><a class="awr" href="#9zbjgq87hy6uv">9zbjgq87hy6uv</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select t.ts#, t.file#, t.block...</td></tr>
<tr><td align="right" class='awrnc'>1.08</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.39</td><td align="right" class='awrnc'>78.02</td><td align="right" class='awrnc'>1.70</td><td align="right" class='awrnc'>20.77</td><td scope="row" class='awrnc'><a class="awr" href="#g0t052az3rx44">g0t052az3rx44</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select name, intcol#, segcol#,...</td></tr>
<tr><td align="right" class='awrc'>1.03</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.73</td><td align="right" class='awrc'>59.43</td><td align="right" class='awrc'>3.51</td><td align="right" class='awrc'>20.15</td><td scope="row" class='awrc'><a class="awr" href="#fxh7dn0mbs5cx">fxh7dn0mbs5cx</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'> WITH ash as (SELECT ash.event...</td></tr>
<tr><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>139</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>96.45</td><td align="right" class='awrnc'>2.95</td><td align="right" class='awrnc'>0.59</td><td scope="row" class='awrnc'><a class="awr" href="#3dbzmtf9ahvzt">3dbzmtf9ahvzt</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>merge /* KSXM:OPTIM_DML_INF */...</td></tr>
<tr><td align="right" class='awrc'>0.65</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>491.54</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>3.71</td><td align="right" class='awrc'>98.53</td><td scope="row" class='awrc'><a class="awr" href="#babvt2tsbymy9">babvt2tsbymy9</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.85</td><td align="right" class='awrnc'>69.26</td><td align="right" class='awrnc'>5.81</td><td align="right" class='awrnc'>25.26</td><td scope="row" class='awrnc'><a class="awr" href="#6wm3n4d7bnddg">6wm3n4d7bnddg</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'> SELECT source, (case when tim...</td></tr>
<tr><td align="right" class='awrc'>0.48</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>973.24</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>3.75</td><td align="right" class='awrc'>98.53</td><td scope="row" class='awrc'><a class="awr" href="#5b5dam6wbmycc">5b5dam6wbmycc</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.56</td><td align="right" class='awrnc'>25.34</td><td align="right" class='awrnc'>2.44</td><td align="right" class='awrnc'>73.48</td><td scope="row" class='awrnc'><a class="awr" href="#3un99a0zwp4vd">3un99a0zwp4vd</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select owner#, name, namespace...</td></tr>
<tr><td align="right" class='awrc'>0.39</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.65</td><td align="right" class='awrc'>59.57</td><td align="right" class='awrc'>1.73</td><td align="right" class='awrc'>39.18</td><td scope="row" class='awrc'><a class="awr" href="#6wvzvgvg6qsyb">6wvzvgvg6qsyb</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT INTO wri$_adv_findings ...</td></tr>
<tr><td align="right" class='awrnc'>0.34</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>85.45</td><td align="right" class='awrnc'>1.49</td><td align="right" class='awrnc'>14.01</td><td scope="row" class='awrnc'><a class="awr" href="#b1wc53ddd6h3p">b1wc53ddd6h3p</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select audit$, options from pr...</td></tr>
<tr><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.46</td><td align="right" class='awrc'>44.46</td><td align="right" class='awrc'>3.75</td><td align="right" class='awrc'>53.53</td><td scope="row" class='awrc'><a class="awr" href="#42mkua34ay6bc">42mkua34ay6bc</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT INTO wri$_adv_addm_fdg ...</td></tr>
<tr><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.54</td><td align="right" class='awrnc'>34.73</td><td align="right" class='awrnc'>5.99</td><td align="right" class='awrnc'>61.91</td><td scope="row" class='awrnc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>214</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.58</td><td align="right" class='awrc'>11.74</td><td align="right" class='awrc'>3.84</td><td align="right" class='awrc'>85.07</td><td scope="row" class='awrc'><a class="awr" href="#5cu0x10yu88sw">5cu0x10yu88sw</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>merge into sys.wri$_index_usag...</td></tr>
<tr><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>72</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.85</td><td align="right" class='awrnc'>20.63</td><td align="right" class='awrnc'>4.20</td><td align="right" class='awrnc'>77.53</td><td scope="row" class='awrnc'><a class="awr" href="#acmvv4fhdc9zh">acmvv4fhdc9zh</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select obj#, type#, ctime, mti...</td></tr>
<tr><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.59</td><td align="right" class='awrc'>28.15</td><td align="right" class='awrc'>6.41</td><td align="right" class='awrc'>66.73</td><td scope="row" class='awrc'><a class="awr" href="#121ffmrc95v7g">121ffmrc95v7g</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select i.obj#, i.ts#, i.file#,...</td></tr>
<tr><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>349</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.23</td><td align="right" class='awrnc'>13.38</td><td align="right" class='awrnc'>7.11</td><td align="right" class='awrnc'>72.56</td><td scope="row" class='awrnc'><a class="awr" href="#0gx3b09qrx9f5">0gx3b09qrx9f5</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select obj#, index# from oid$ ...</td></tr>
<tr><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>133</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.51</td><td align="right" class='awrc'>27.25</td><td align="right" class='awrc'>5.39</td><td align="right" class='awrc'>68.40</td><td scope="row" class='awrc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>INSERT INTO wri$_adv_message_g...</td></tr>
<tr><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>973.36</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>3.81</td><td align="right" class='awrnc'>98.48</td><td scope="row" class='awrnc'><a class="awr" href="#7mzdtp0dvu09c">7mzdtp0dvu09c</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>972.66</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>3.78</td><td align="right" class='awrc'>98.57</td><td scope="row" class='awrc'><a class="awr" href="#cmg650ct9w552">cmg650ct9w552</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>3.63</td><td align="right" class='awrnc'>2.78</td><td align="right" class='awrnc'>95.18</td><td scope="row" class='awrnc'><a class="awr" href="#03guhbfpak0w7">03guhbfpak0w7</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /*+ index(idl_ub1$ i_id...</td></tr>
<tr><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.64</td><td align="right" class='awrc'>3.25</td><td align="right" class='awrc'>4.47</td><td align="right" class='awrc'>94.96</td><td scope="row" class='awrc'><a class="awr" href="#a3jpjzh7mtwwp">a3jpjzh7mtwwp</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select /*+ index(idl_ub2$ i_id...</td></tr>
<tr><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>33.00</td><td align="right" class='awrnc'>12.34</td><td align="right" class='awrnc'>58.64</td><td scope="row" class='awrnc'><a class="awr" href="#5n1fs4m2n2y0r">5n1fs4m2n2y0r</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select pos#, intcol#, col#, sp...</td></tr>
<tr><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>43.04</td><td align="right" class='awrc'>11.96</td><td align="right" class='awrc'>48.28</td><td scope="row" class='awrc'><a class="awr" href="#6y55dxn24t86q">6y55dxn24t86q</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select obj#, intcol#, ts#, fil...</td></tr>
<tr><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.29</td><td align="right" class='awrnc'>5.28</td><td align="right" class='awrnc'>18.84</td><td align="right" class='awrnc'>77.27</td><td scope="row" class='awrnc'><a class="awr" href="#61tn3mam0vq0b">61tn3mam0vq0b</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'> SELECT source, (case when tim...</td></tr>
<tr><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.51</td><td align="right" class='awrc'>2.92</td><td align="right" class='awrc'>1.90</td><td align="right" class='awrc'>96.33</td><td scope="row" class='awrc'><a class="awr" href="#asvzxj61dc5vs">asvzxj61dc5vs</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select timestamp, flags from f...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>112</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.46</td><td align="right" class='awrnc'>3.07</td><td align="right" class='awrnc'>6.92</td><td align="right" class='awrnc'>46.29</td><td scope="row" class='awrnc'><a class="awr" href="#f80h0xb1qvbsk">f80h0xb1qvbsk</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>SELECT sys.wri$_adv_seq_msggro...</td></tr>
<tr><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>5.06</td><td align="right" class='awrc'>4.42</td><td align="right" class='awrc'>93.31</td><td scope="row" class='awrc'><a class="awr" href="#fh5ufah919kun">fh5ufah919kun</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select /*+ index(idl_sb4$ i_id...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>11.77</td><td align="right" class='awrnc'>8.75</td><td align="right" class='awrnc'>83.37</td><td scope="row" class='awrnc'><a class="awr" href="#9fjf75a1s4y19">9fjf75a1s4y19</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select procedure#, procedurena...</td></tr>
<tr><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>529</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>9.49</td><td align="right" class='awrc'>23.14</td><td align="right" class='awrc'>71.64</td><td scope="row" class='awrc'><a class="awr" href="#87gaftwrm2h68">87gaftwrm2h68</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select o.owner#, o.name, o.nam...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>8.78</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>77.49</td><td align="right" class='awrnc'>16.32</td><td scope="row" class='awrnc'><a class="awr" href="#9yv5dwv8k0awg">9yv5dwv8k0awg</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>WITH MONITOR_DATA AS (SELECT I...</td></tr>
<tr><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.58</td><td align="right" class='awrc'>1.72</td><td align="right" class='awrc'>15.15</td><td align="right" class='awrc'>67.69</td><td scope="row" class='awrc'><a class="awr" href="#49s332uhbnsma">49s332uhbnsma</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'> declare vsn varchar2(20); beg...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>4.49</td><td align="right" class='awrnc'>3.59</td><td align="right" class='awrnc'>93.63</td><td scope="row" class='awrnc'><a class="awr" href="#gx4mv66pvj3xz">gx4mv66pvj3xz</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select con#, type#, condlength...</td></tr>
<tr><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>4.58</td><td align="right" class='awrc'>5.53</td><td align="right" class='awrc'>92.91</td><td scope="row" class='awrc'><a class="awr" href="#9tt2m0mpc2qqp">9tt2m0mpc2qqp</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select /*+ index(idl_char$ i_i...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>7.37</td><td align="right" class='awrnc'>7.70</td><td align="right" class='awrnc'>87.32</td><td scope="row" class='awrnc'><a class="awr" href="#53saa2zkr6wc3">53saa2zkr6wc3</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select intcol#, nvl(pos#, 0), ...</td></tr>
<tr><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>2.32</td><td align="right" class='awrc'>3.50</td><td align="right" class='awrc'>95.48</td><td scope="row" class='awrc'><a class="awr" href="#grwydz59pu6mc">grwydz59pu6mc</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select text from view$ where r...</td></tr>
<tr><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>22.28</td><td align="right" class='awrnc'>7.49</td><td align="right" class='awrnc'>73.96</td><td scope="row" class='awrnc'><a class="awr" href="#2xgubd6ayhyb1">2xgubd6ayhyb1</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select max(procedure#) from pr...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="99997"></a>
<p />
<h3 class="awr">Complete List of SQL Text</h3><p />
<table border="0" class="tdiff" summary="This table displays the text of the SQL statements which have been
      referred to in the report">
<tr><th class="awrbg" scope="col">SQL Id</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="00u1cz9td3zd9"></a>00u1cz9td3zd9</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '124';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="03guhbfpak0w7"></a>03guhbfpak0w7</td><td class='awrnc'><pre_sqltext class="awr">select /*+ index(idl_ub1$ i_idl_ub11) */ piece#, length, piece from idl_ub1$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="04kug40zbu4dm"></a>04kug40zbu4dm</td><td class='awrc'><pre_sqltext class="awr">select policy#,  action# from aud_object_opt$ where object# = :1 and type = 2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0f9fdb27bux51"></a>0f9fdb27bux51</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '70';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0fkurntnzjbs2"></a>0fkurntnzjbs2</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '43';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0fshmsa8432z1"></a>0fshmsa8432z1</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '194';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0gx3b09qrx9f5"></a>0gx3b09qrx9f5</td><td class='awrc'><pre_sqltext class="awr">select obj#, index# from oid$ where user#=:1 and oid$=:2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0kkhhb2w93cx0"></a>0kkhhb2w93cx0</td><td class='awrnc'><pre_sqltext class="awr">update seg$ set type#=:4, blocks=:5, extents=:6, minexts=:7, maxexts=:8, extsize=:9, extpct=:10, user#=:11, iniexts=:12, lists=decode(:13,  65535,  NULL,  :13), groups=decode(:14,  65535,  NULL,  :14),  cachehint=:15,  hwmincr=:16,	spare1=DECODE(:17, 0, NULL, :17), scanhint=:18,  bitmapranges=:19 where ts#=:1 and file#=:2 and block#=:3</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="121ffmrc95v7g"></a>121ffmrc95v7g</td><td class='awrc'><pre_sqltext class="awr">select i.obj#, i.ts#, i.file#, i.block#, i.intcols, i.type#, i.flags, i.property, i.pctfree$, i.initrans, i.maxtrans, i.blevel, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey, i.clufac, i.cols, i.analyzetime, i.samplesize, i.dataobj#, nvl(i.degree, 1), nvl(i.instances, 1), i.rowcnt, mod(i.pctthres$, 256), i.indmethod#, i.trunccnt, nvl(c.unicols, 0), nvl(c.deferrable#+c.valid#, 0), nvl(i.spare1, i.intcols), i.spare4, i.spare2, i.spare6, decode(i.pctthres$, null, null, mod(trunc(i.pctthres$/256), 256)), nvl(i.evaledition#, 1), nvl(i.unusablebefore#, 0), nvl(i.unusablebeginning#, 0),  ist.cachedblk, ist.cachehit, ist.logicalread from ind$ i,  ind_stats$ ist,  (select enabled,  min(intcols) unicols, min(to_number(bitand(defer, 1))) deferrable#, min(to_number(bitand(defer, 4))) valid# from cdef$ where obj#=:1 and enabled &gt; 1 group by enabled) c where i.obj#=c.enabled(+) and i.obj# = ist.obj#(+) and i.bo#=:1 order by i.obj#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="1ckk5cxbvfp5b"></a>1ckk5cxbvfp5b</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '55';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="1cvh1jrtm7sxd"></a>1cvh1jrtm7sxd</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '188';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="1fbzc0qr5fpkp"></a>1fbzc0qr5fpkp</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '106';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;

		END IF;
WORKLOAD REPOSITORY report for


DB Name 	DB Id	 Unique Name DB Role	      Edition Release	 RAC CDB
------------ ----------- ----------- ---------------- ------- ---------- --- ---

P60SDB	      3890827801 p60sdb      PRIMARY	      EE      19.0.0.0.0 YES NO

Instance     Inst Num Startup Time
		IF ( v_do_scan_query != TRUE ) THEN
------------ -------- ---------------
p60sdb2 	    2 20-Feb-20 21:11

			SELECT COUNT(c2) INTO v_rowcnt
Host Name	 Platform			  CPUs Cores Sockets Memory(GB)
---------------- -------------------------------- ---- ----- ------- ----------
			FROM cf1
mcracpoc2.exampl Linux x86 64-bit		   128	  64	   4	2015.90

	      Snap Id	   Snap Time	  Sessions Curs/Sess Instances
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
	    --------- ------------------- -------- --------- ---------
Begin Snap:	   47 20-Feb-20 21:32:34       409	 2.4	     2

  End Snap:	   48 20-Feb-20 21:45:07       166	  .5	     2
   Elapsed:		  12.56 (mins)
   DB Time:	       2,207.06 (mins)
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;

Top ADDM Findings by Average Active Sessions
		ELSE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Finding Name				 Avg act Percen Task Name
---------------------------------------- ------- ------ ------------------------
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
Interconnect Latency			  175.86 1.E+02 ADDM:3890827801_2_48
Top SQL Statements			  175.86  99.41 ADDM:3890827801_2_48

"User I/O" wait Class			  175.86  56.39 ADDM:3890827801_2_48
Global Cache Messaging			  175.86  41.87 ADDM:3890827801_2_48
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
Undersized SGA				  175.86  13.57 ADDM:3890827801_2_48
Load Profile			Per Second   Per Transaction  Per Exec	Per Call

~~~~~~~~~~~~~~~ 	   ---------------   --------------- --------- ---------
	     DB Time(s):	     175.7	       521.4	  0.01	   80.06
	      DB CPU(s):	       9.0		26.7	  0.00	    4.10
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
      Background CPU(s):	       1.5		 4.5	  0.00	    0.00
      Redo size (bytes):	  12,915.3	    38,315.5
				v_scan_query_quota := TRUE;
  Logical read (blocks):       1,658,674.0	 4,920,750.3
	  Block changes:	      53.0	       157.4
 Physical read (blocks):	  47,207.4	   140,049.0
			END IF;
Physical write (blocks):	       4.3		12.7
       Read IO requests:	  47,203.7	   140,038.2
		END IF;
      Write IO requests:	       1.8		 5.4
	   Read IO (MB):	     368.8	     1,094.1
	  Write IO (MB):	       0.0		 0.1

	   IM scan rows:	       0.0		 0.0
Session Logical Read IM:	       0.0		 0.0
 RAC GC blocks received:	       2.2		 6.4
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
   RAC GC blocks served:	       7.2		21.5
	     User calls:	       2.2		 6.5
	ELSE
	   Parses (SQL):	       6.0		17.7
      Hard parses (SQL):	       0.7		 2.0
     SQL Work Area (MB):	       0.6		 1.7
		--
		 Logons:	       0.1		 0.2
	    User logons:	       0.0		 0.0
	 Executes (SQL):	  20,428.0	    60,603.3
		-- Do an UPDATE statement
	      Rollbacks:	       0.0		 0.0
	   Transactions:	       0.3

		--
Instance Efficiency Percentages (Target 100%)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	    Buffer Nowait %:  100.00	   Redo NoWait %:  100.00
	    Buffer  Hit   %:   97.15	In-memory Sort %:  100.00
	    Library Hit   %:   99.96	    Soft Parse %:   88.55
		v_my_serial := v_my_serial + v_loop_cnt ;
	 Execute to Parse %:   99.97	     Latch Hit %:   99.99
Parse CPU to Parse Elapsd %:	8.53	 % Non-Parse CPU:   99.98

	  Flash Cache Hit %:	0.00

Top 10 Foreground Events by Total Wait Time
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					   Total Wait	    Avg   % DB Wait
Event				     Waits Time (sec)	   Wait   time Class
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
------------------------------ ----------- ---------- --------- ------ --------
db file parallel read		   560,366	57.8K  103.15ms   43.6 User I/O
		--
gc cr multi block grant 	   348,638	42.3K  121.22ms   31.9 Cluster
db file sequential read 	 1,171,285	16.8K	14.37ms   12.7 User I/O
		v_updates_cnt := v_updates_cnt + 1;
gc cr grant busy		   257,262	12.6K	49.02ms    9.5 Cluster
DB CPU						 6776		   5.1
gc buffer busy acquire		       636	306.3  481.53ms     .2 Cluster

gc cr grant 2-way		     3,362	  120	35.70ms     .1 Cluster
gc cr block lost		       105	 61.2  582.72ms     .0 Cluster
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
read by other session		     1,151	 39.6	34.40ms     .0 User I/O
			v_update_quota := TRUE;
gc cr multi block mixed 		64	 33.5  523.69ms     .0 Cluster

		END IF;
Wait Classes by Total Wait Time
	END IF ;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
							  Avg		  Avg
					Total Wait	 Wait	% DB   Active
----------------------------------------------------------------------------------------------------------------------
Wait Class		    Waits	Time (sec)	 Time	time Sessions
---------------- ---------------- ---------------- ---------- ------ --------
User I/O		1,737,876	    74,724    43.00ms	56.4	 99.2
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
Cluster 		  613,454	    55,496    90.46ms	41.9	 73.6
DB CPU					     6,776		 5.1	  9.0
Application		      111		68   612.28ms	  .1	  0.1
----------------------------------------------------------------------------------------------------------------------
Other			  231,001		58   249.10us	  .0	  0.1
System I/O		    6,551		46     7.07ms	  .0	  0.1
Concurrency		   19,517		20     1.03ms	  .0	  0.0

Configuration		       31		 2    49.87ms	  .0	  0.0
Network 		    1,741		 0    37.35us	  .0	  0.0
Commit				1		 0     2.77ms	  .0	  0.0
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN

Host CPU
~~~~~~~~		  Load Average
		--
 CPUs Cores Sockets	Begin	    End     %User   %System	 %WIO	  %Idle
----- ----- ------- --------- --------- --------- --------- --------- ---------
  128	 64	  4    101.35	   8.61       5.3	2.9	 22.3	   90.9
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,

Instance CPU
~~~~~~~~~~~~
		-- so reset flags and counters before continuing
	      % of total CPU for Instance:	 8.6
	      % of busy  CPU for Instance:	94.8
  %DB time waiting for CPU - Resource Mgr:	 0.0
		--

IO Profile		    Read+Write/Second	  Read/Second	 Write/Second
~~~~~~~~~~		    ----------------- --------------- ---------------
		v_update_quota := FALSE;
	    Total Requests:	     47,206.3	     47,202.3		  4.0
	 Database Requests:	     47,205.5	     47,203.7		  1.8
		v_updates_cnt := 0;
	Optimized Requests:		  0.0		  0.0		  0.0
	     Redo Requests:		  1.5		  0.0		  1.5
		Total (MB):		368.9		368.8		  0.1
		v_selects_cnt := 0;
	     Database (MB):		368.8		368.8		  0.0
      Optimized Total (MB):		  0.0		  0.0		  0.0
		 Redo (MB):		  0.0		  0.0		  0.0
	END IF;
	 Database (blocks):	     47,211.7	     47,207.4		  4.3
 Via Buffer Cache (blocks):	     47,210.1	     47,207.4		  2.8

	   Direct (blocks):		  1.5		  0.0		  1.5

Memory Statistics
~~~~~~~~~~~~~~~~~			Begin	       End
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
				 ------------ ------------
		  Host Mem (MB):  2,064,280.9  2,064,280.9
		   SGA use (MB):     14,336.0	  14,336.0
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		   PGA use (MB):      4,249.7	   2,766.1
    % Host Mem used for SGA+PGA:	 0.90	      0.83

Cache Sizes			  Begin        End
~~~~~~~~~~~		     ---------- ----------
		-- so reset flags and counters
	       Buffer Cache:	11,168M    11,168M  Std Block Size:	    8K
	   Shared Pool Size:	 2,138M     2,133M	Log Buffer:   148,180K
		v_scan_query_quota := FALSE;
	     In-Memory Area:	     0M 	0M
		v_scan_queries_cnt := 0;

 Shared Pool Statistics        Begin	End
~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ------  ------
		v_random_access_queries_cnt := 0;
	     Memory Usage %:   93.88   86.96
    % SQL with executions>1:   86.13   75.36
  % Memory for SQL w/exec>1:   91.91   81.10
	END IF;


Time Model Statistics			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

-> DB Time represents total time in user calls
-> DB CPU represents CPU time of foreground processes
	v_loop_cnt := v_loop_cnt + 1 ;
-> Total CPU Time represents foreground and background processes
-> Statistics including the word "background" measure background process
   time, therefore do not contribute to the DB time statistic
	v_now := DBMS_UTILITY.GET_TIME();
-> Ordered by % of DB time in descending order, followed by Statistic Name

								% of  % of Total

Statistic Name					     Time (s) DB Time	CPU Time
------------------------------------------ ------------------ ------- ----------
sql execute elapsed time			    132,166.2	 99.8
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
DB CPU						      6,776.0	  5.1	    85.7
PL/SQL execution elapsed time				219.9	   .2
parse time elapsed					 16.1	   .0
		-- If this is a fixed-iteration count test cycle and we've hit the number of
hard parse elapsed time 				 15.9	   .0
hard parse (sharing criteria) elapsed time		  1.5	   .0
hard parse (bind mismatch) elapsed time 		  0.8	   .0
		-- iterations then set exit flag
sequence load elapsed time				  0.5	   .0
PL/SQL compilation elapsed time 			  0.4	   .0
connection management call elapsed time 		  0.1	   .0
		v_stop_immediate := TRUE ;
repeated bind elapsed time				  0.0	   .0
DB time 					    132,423.4
background cpu time				      1,129.4		    14.3
	END IF;
background elapsed time 				902.4
total CPU time					      7,905.4
			  ------------------------------------------------------
END LOOP;

Operating System Statistics		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> *TIME statistic values are diffed.

   All others display actual values.  End Value is displayed if different
-> ordered by statistic type (CPU Use, Virtual Memory, Hardware Config), Name
v_end_time := v_now ;

Statistic				   Value	End Value
------------------------- ---------------------- ----------------
v_now := DBMS_UTILITY.GET_TIME();
FREE_MEMORY_BYTES	       1,097,940,684,800 1.0999991173E+12
INACTIVE_MEMORY_BYTES		   2,242,338,816    2,183,102,464
BUSY_TIME				 834,110
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
IDLE_TIME			       8,313,126
IOWAIT_TIME			       2,044,214
SYS_TIME				 265,518

USER_TIME				 487,700
LOAD					     101		9
PHYSICAL_MEMORY_BYTES	       2,164,555,358,208
v_total_time := v_end_time - v_begin_time ;
NUM_CPUS				     128
NUM_CPU_CORES				      64
NUM_CPU_SOCKETS 			       4
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
GLOBAL_RECEIVE_SIZE_MAX 	       4,194,304
GLOBAL_SEND_SIZE_MAX		       1,048,576
TCP_RECEIVE_SIZE_DEFAULT		  87,380
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
TCP_RECEIVE_SIZE_MAX		       6,291,456
TCP_RECEIVE_SIZE_MIN			   4,096
TCP_SEND_SIZE_DEFAULT			  16,384
TCP_SEND_SIZE_MAX		       4,194,304
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
TCP_SEND_SIZE_MIN			   4,096
			  ------------------------------------------------------


Operating System Statistics - Detail	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

Snap Time	    Load    %busy    %user     %sys    %idle  %iowait
END;</pre_sqltext></td></tr>
--------------- -------- -------- -------- -------- -------- --------
20-Feb 21:32:34    101.3      N/A      N/A	N/A	 N/A	  N/A
<tr><td scope="row" class='awrc'><a class="awr" name="26sn8ac7rgup8"></a>26sn8ac7rgup8</td><td class='awrc'><pre_sqltext class="awr">DECLARE
20-Feb 21:45:07      8.6      9.1      5.3	2.9	90.9	 22.3
			  ------------------------------------------------------

v_default_schema_number PLS_INTEGER := '206';
Foreground Wait Class			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
v_update_pct PLS_INTEGER := '0';
-> ordered by wait time desc, waits desc
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0
v_max_loop_iterations PLS_INTEGER := '0';
-> Captured Time accounts for	     103.4%  of Total DB time	  132,423.41 (s)
-> Total FG Wait Time:		 130,170.05 (s)  DB CPU time:	    6,776.02 (s)

v_seconds_to_run PLS_INTEGER := '600';
				     %Time	Total Wait
Wait Class		       Waits -outs	  Time (s)   Avg wait  %DB time
-------------------- --------------- ----- --------------- ---------- ---------
v_scale PLS_INTEGER := '65536';
User I/O		   1,733,204	 0	    74,680    43.09ms	   56.4
Cluster 		     611,324	 0	    55,451    90.71ms	   41.9
DB CPU						     6,776		    5.1
v_work_unit PLS_INTEGER := '80' ;
Other			       9,104	22		26     2.83ms	    0.0
Concurrency		      11,826	 0		 9   723.08us	    0.0
System I/O			 401	 0		 3     7.83ms	    0.0
v_redo_stress  VARCHAR2(12) := 'LITE';
Configuration			  26	 0		 2    59.20ms	    0.0
Network 			 553	 0		 0     8.07us	    0.0
Application			   1	 0		 0   503.00us	    0.0
v_hot_schema_modulus PLS_INTEGER := '0';
Commit				   0			 0		    0.0
			  ------------------------------------------------------

v_do_hotspot   VARCHAR(7) := 'FALSE';

Foreground Wait Events			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
v_hotspot_mb  NUMBER := '10';
-> Only events with Total Wait Time (s) >= .001 are shown
-> ordered by wait time desc, waits desc (idle events last)
v_hotspot_offset_mb NUMBER := '0';
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
				       %Time	 Wait		   Waits   % DB
v_hotspot_modulus  PLS_INTEGER := '0';
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------

db file parallel read	       560,366	       57,801  103.15ms  2,206.2   43.6
gc cr multi block grant        348,638	       42,262  121.22ms  1,372.6   31.9
db file sequential read      1,171,285	       16,835	14.37ms  4,611.4   12.7
v_sleep_modulus PLS_INTEGER := '0';
gc cr grant busy	       257,262	       12,610	49.02ms  1,012.8    9.5
gc buffer busy acquire		   636		  306  481.53ms      2.5     .2
v_sleep_min NUMBER := '.1';
gc cr grant 2-way		 3,362		  120	35.70ms     13.2     .1
gc cr block lost		   105		   61  582.72ms      0.4     .0
read by other session		 1,151		   40	34.40ms      4.5     .0
v_sleep_max NUMBER := '.5';
gc cr multi block mixed 	    64		   34  523.69ms      0.3     .0
gc current grant busy		   540		   27	49.90ms      2.1     .0
gcs drm freeze in enter se	    66		   17  254.51ms      0.3     .0
v_scan_query_pct PLS_INTEGER := '0';
gc cr block 2-way		   128		   12	96.79ms      0.5     .0
gc remaster			    72	   3	    7	92.45ms      0.3     .0
gc cr failure			    73		    4	57.56ms      0.3     .0
v_obfuscate VARCHAR(5)	:= 'FALSE';
KJC: Wait for msg sends to	    62		    3	54.46ms      0.2     .0
control file sequential re	   401		    3	 7.83ms      1.6     .0

library cache: bucket mute	   279		    3	10.61ms      1.1     .0
db file scattered read		   150		    3	19.04ms      0.6     .0
latch: cache buffers chain	10,353		    2  240.11us     40.8     .0

gc current block busy		   186		    2	12.80ms      0.7     .0
gc current block 2-way		    98		    2	21.74ms      0.4     .0
row cache lock			   105	  34	    2	15.36ms      0.4     .0
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
gc current block lost		     3		    2  531.54ms      0.0     .0
enq: HW - contention		    26		    2	59.20ms      0.1     .0
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
Disk file Mirror Read		   100		    1	14.58ms      0.4     .0
latch free			 1,971		    1  706.70us      7.8     .0
latch: gcs resource hash	   540		    1	 2.49ms      2.1     .0

IPC send completion sync	    67		    1	15.33ms      0.3     .0
gc cr disk read 		     3		    1  335.31ms      0.0     .0
library cache: mutex X		   481		    1	 1.75ms      1.9     .0
v_num_tmp NUMBER := 0;
latch: gc element		 2,352		    1  284.12us      9.3     .0
cursor: pin S			   517		    1	 1.12ms      2.0     .0

enq: WT - contention		     8		    1	64.39ms      0.0     .0
gc current grant 2-way		    80		    0	 4.93ms      0.3     .0
gc current multi block req	    38		    0	 7.32ms      0.1     .0
v_loop_cnt PLS_INTEGER := 0;
enq: WF - contention		    13		    0	13.47ms      0.1     .0
name-service call wait		     8		    0	21.35ms      0.0     .0
latch: ges resource hash l	   212		    0  565.52us      0.8     .0
v_rowcnt PLS_INTEGER := 0;
gc cr grant congested		    30		    0	 3.50ms      0.1     .0
direct path write		    16		    0	 5.76ms      0.1     .0
latch: cache buffers lru c	   662		    0	87.53us      2.6     .0
v_updates_cnt PLS_INTEGER := 0;
gc current grant congested	     1		    0	57.87ms      0.0     .0
PX Deq: reap credit		 2,030	 100	    0	20.61us      8.0     .0
v_selects_cnt PLS_INTEGER := 0;

library cache pin		    14		    0	 1.69ms      0.1     .0
v_random_access_queries_cnt PLS_INTEGER := 0;
row cache mutex 		    36		    0  589.92us      0.1     .0
library cache lock		    14		    0	 1.50ms      0.1     .0
v_scan_queries_cnt PLS_INTEGER := 0;
gc cr block busy		     3		    0	 6.78ms      0.0     .0
wait list latch free		    18		    0	 1.12ms      0.1     .0

PGA memory operation		   692		    0	28.13us      2.7     .0
PX Deq: Slave Session Stat	    35		    0  493.94us      0.1     .0
enq: FB - contention		    16		    0  885.31us      0.1     .0
v_do_scan_query BOOLEAN :=FALSE;
Disk file operations I/O	    70		    0  147.93us      0.3     .0
enq: PS - contention		    22		    0  468.50us      0.1     .0
latch: object queue header	    46		    0  219.76us      0.2     .0
v_scan_query_quota  BOOLEAN := FALSE;
cr request retry		     1	 100	    0	 9.38ms      0.0     .0
DLM cross inst call comple	    37		    0  228.08us      0.1     .0
enq: TX - index contention	     2		    0	 3.21ms      0.0     .0
v_scan_workload_only BOOLEAN := FALSE;
latch: call allocation		    61		    0	92.66us      0.2     .0
gc current block congested	     1		    0	 4.39ms      0.0     .0
SQL*Net message to client	   491		    0	 7.83us      1.9     .0
v_random_workload_only BOOLEAN := FALSE;

Foreground Wait Events			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond

-> Only events with Total Wait Time (s) >= .001 are shown
-> ordered by wait time desc, waits desc (idle events last)
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0


						Total
				       %Time	 Wait		   Waits   % DB
v_random_block PLS_INTEGER := 1;
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
enq: TO - contention		     2		    0	 1.31ms      0.0     .0
v_tmp PLS_INTEGER;
latch: shared pool		    25		    0	54.48us      0.1     .0
watchdog main loop		 1,984		5,913 2980.36ms      7.8
PX Deq Credit: send blkd	   581		   35	59.85ms      2.3
v_now PLS_INTEGER;
PX Deq: Execution Msg		   105		   35  329.31ms      0.4
SQL*Net message from clien	   493		   12	24.70ms      1.9
PX Deq: Msg Fragment		   321		    0  380.96us      1.3
v_brick_wall PLS_INTEGER;
			  ------------------------------------------------------



Background Wait Events			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> ordered by wait time desc, waits desc (idle events last)
v_begin_time PLS_INTEGER;
-> Only events with Total Wait Time (s) >= .001 are shown
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

v_end_time PLS_INTEGER;
						Total
				       %Time	 Wait		   Waits   % bg
v_total_time PLS_INTEGER;
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
enq: TX - row lock content	     1	   0	   67	66.98 s      0.0    7.4
v_begin_cpu_tm PLS_INTEGER;
db file sequential read 	 2,683	   0	   24	 9.02ms     10.6    2.7
control file sequential re	 2,906	   0	   22	 7.44ms     11.4    2.4
Disk file Mirror Read		   989	   0	   17	17.36ms      3.9    1.9
v_end_cpu_tm PLS_INTEGER;
gc cr grant busy		   713	   0	   15	20.36ms      2.8    1.6
IMR slave acknowledgement	 2,226	   0	   13	 5.71ms      8.8    1.4
row cache lock			    46	  96	   11  230.97ms      0.2    1.2
v_total_cpu_tm PLS_INTEGER;
gc current grant busy		   269	   0	   10	37.97ms      1.1    1.1
control file parallel writ	   243	   0	   10	39.88ms      1.0    1.1

gc buffer busy acquire		    22	   0	    8  347.10ms      0.1     .8
db file parallel write		 1,016	   0	    7	 6.70ms      4.0     .8
log file parallel write 	 1,133	   0	    5	 4.49ms      4.5     .6
v_do_sleeps BOOLEAN := FALSE;
gc cr block 2-way		   156	   0	    4	26.37ms      0.6     .5
PX Deq: reap credit	       192,160	 100	    4	18.82us    756.5     .4
gc current block busy		   402	   0	    3	 7.56ms      1.6     .3
v_loop_control BOOLEAN := FALSE;
reliable message		    40	   0	    3	66.50ms      0.2     .3
KJC: Wait for msg sends to	   260	  83	    2	 7.06ms      1.0     .2
gcs remastering wait for r	    49	   0	    2	31.70ms      0.2     .2
v_update_quota BOOLEAN := FALSE;
DLM cross inst call comple	 2,637	   0	    1  524.00us     10.4     .2
DFS lock handle 		    68	 100	    1	19.88ms      0.3     .1
gcs log flush sync		   859	   0	    1	 1.43ms      3.4     .1
v_select_only_workload BOOLEAN := FALSE;
gc current block lost		     2	   0	    1  529.36ms      0.0     .1
gc current multi block req	     8	   0	    1  126.52ms      0.0     .1
Sync ASM rebalance		    56	   0	    1	17.76ms      0.2     .1
v_update_only_workload BOOLEAN := FALSE;
db file scattered read		    93	   0	    1	 9.55ms      0.4     .1
LGWR any worker group		   249	   0	    1	 3.53ms      1.0     .1
latch free			 1,695	   0	    1  383.42us      6.7     .1
v_do_update BOOLEAN := FALSE;
gc cr block lost		     1	   0	    1  648.66ms      0.0     .1
Disk file operations I/O	   317	   0	    1	 2.04ms      1.2     .1
gc current grant 2-way		    89	   0	    1	 6.77ms      0.4     .1
v_do_hot_schema BOOLEAN := FALSE;
gc cr multi block mixed 	     3	   0	    1  194.74ms      0.0     .1
enq: TM - contention		    14	   0	    1	37.97ms      0.1     .1
enq: CF - contention		    13	 100	    1	40.48ms      0.1     .1
v_stop_immediate BOOLEAN := FALSE;
enq: CO - master slave det	    13	 100	    1	40.39ms      0.1     .1
gc cr block busy		    87	   0	    0	 5.38ms      0.3     .1
enq: RO - fast object reus	    95	   0	    0	 4.79ms      0.4     .1
v_sharing_schema BOOLEAN := FALSE;
direct path write temp		    72	   0	    0	 5.06ms      0.3     .0
direct path write		    24	   0	    0	14.90ms      0.1     .0
gc buffer busy release		    61	   0	    0	 5.69ms      0.2     .0
v_seed VARCHAR2(128);
LGWR all worker groups		    58	   0	    0	 5.64ms      0.2     .0
latch: MGA shared context	   331	   0	    0	  .97ms      1.3     .0
ASM file metadata operatio	 1,524	   0	    0  129.00us      6.0     .0
v_home_schema_str VARCHAR2(80);
library cache lock		   497	   0	    0  392.28us      2.0     .0
KSV master wait 		   610	  94	    0  300.49us      2.4     .0
v_scratch VARCHAR2(200) ;
library cache pin		   491	   0	    0  334.56us      1.9     .0
ges lms sync during dynami	     6	  50	    0	25.67ms      0.0     .0
AQ: RAC AQ Network		 7,404	 100	    0	18.09us     29.1     .0

gc cr multi block grant 	    30	   0	    0	 4.33ms      0.1     .0
CGS wait for IPC msg		 7,874	 100	    0	16.48us     31.0     .0
oracle thread bootstrap 	     6	   0	    0	19.86ms      0.0     .0
v_cpu_pct NUMBER(6, 3);
latch: MGA shared context	   308	   0	    0  376.98us      1.2     .0
PGA memory operation		   819	   0	    0  125.78us      3.2     .0
oradebug request completio	     1	   0	    0	99.33ms      0.0     .0
v_my_serial NUMBER(16);
latch: gcs resource hash	   368	   0	    0  195.25us      1.4     .0
gc cr grant 2-way		   227	   0	    0  284.74us      0.9     .0
IPC group service call		   944	   0	    0	62.93us      3.7     .0

latch: MGA heap latch		   280	   0	    0  187.62us      1.1     .0
PX Deq: Join ACK		    27	   0	    0	 1.62ms      0.1     .0
gc cr disk read 		    44	   0	    0	  .96ms      0.2     .0
BEGIN
LGWR worker group ordering	     9	   0	    0	 3.79ms      0.0     .0

Background Wait Events			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
						Total
				       %Time	 Wait		   Waits   % bg
Event				 Waits -outs Time (s)  Avg wait     /txn   time
EXECUTE IMMEDIATE v_home_schema_str;
-------------------------- ----------- ----- -------- --------- -------- ------
CSS operation: data query	    22	   0	    0	 1.32ms      0.1     .0
latch: messages 		    90	   0	    0  304.76us      0.4     .0

CSS operation: data update	    25	   0	    0	 1.06ms      0.1     .0
enq: PS - contention		    32	  47	    0  814.84us      0.1     .0
ksxr poll remote instances	 1,167	 100	    0	21.04us      4.6     .0

read by other session		     6	   0	    0	 3.29ms      0.0     .0
IPC send completion sync	   757	  98	    0	25.40us      3.0     .0
ges inquiry response		    32	   0	    0  527.56us      0.1     .0
IF ( v_hot_schema_modulus != 0 ) THEN
libcache interrupt action	 5,715	   0	    0	 2.60us     22.5     .0
os thread creation		     6	   0	    0	 1.92ms      0.0     .0
CSS initialization		     2	   0	    0	 5.12ms      0.0     .0
	v_do_hot_schema := TRUE;
gc current block 2-way		    14	   0	    0  671.57us      0.1     .0
enq: HW - contention		     5	   0	    0	 1.38ms      0.0     .0
db file async I/O submit	   851	   0	    0	 8.05us      3.4     .0
END IF;
db file parallel read		     1	   0	    0	 6.33ms      0.0     .0
latch: gc element		    18	   0	    0  305.28us      0.1     .0
ges2 LMON to wake up LMD -	     2	   0	    0	 2.16ms      0.0     .0

PX Deq: Signal ACK EXT		    27	   0	    0  148.89us      0.1     .0
ASM IO for non-blocking po	   487	   0	    0	 8.09us      1.9     .0
enq: DW - contention		     3	 100	    0	 1.28ms      0.0     .0
IF ( v_sleep_modulus != 0 )	  THEN
PX Deq: Slave Session Stat	    27	   0	    0  131.96us      0.1     .0
log file sync			     1	   0	    0	 2.77ms      0.0     .0
latch: cache buffers chain	    15	   0	    0  182.00us      0.1     .0
	v_do_sleeps := TRUE;
CSS operation: action		     4	   0	    0  614.25us      0.0     .0
gc current grant congested	     1	   0	    0	 1.91ms      0.0     .0
enq: TA - contention		     2	   0	    0  909.50us      0.0     .0
END IF;
asynch descriptor resize	   269	 100	    0	 6.71us      1.1     .0
latch: call allocation		     9	   0	    0  178.11us      0.0     .0

enq: FB - contention		     2	   0	    0  737.00us      0.0     .0
SQL*Net message to client	   244	   0	    0	 4.78us      1.0     .0
name-service call wait		     2	   0	    0  558.50us      0.0     .0
IF ( v_max_loop_iterations &gt; 0 )  THEN
PX Idle Wait			    37	   0  191,213 5167.91 s      0.1
Space Manager: slave idle	 9,642	   0   39,647 4111.94ms     38.0
rdbms ipc message		31,183	  56   29,873  957.98ms    122.8
	v_loop_control := TRUE ;
class slave wait		 9,138	  79	5,450  596.44ms     36.0
LMS CR slave timer	       444,928	   0	4,436	 9.97ms  1,751.7
gcs yield cpu		       150,607	 100	4,414	29.31ms    592.9
END IF;
gcs remote message	     4,956,215	   0	3,880  782.83us 1.95E+04
ges remote message		46,862	   0	2,968	63.34ms    184.5
LGWR worker group idle		 1,070	   0	2,683 2507.67ms      4.2

wait for unread message on	 1,138	 100	2,227 1956.72ms      4.5
pmon timer			   500	  99	1,489 2977.66ms      2.0
GCR sleep			 4,930	   0	1,481  300.47ms     19.4
DIAG idle wait			12,974	  63	1,472  113.45ms     51.1
IF ( v_update_pct = 0 ) 	  THEN
Data Guard: Gap Manager 	    13	   0	  780	60.00 s      0.1
Streams AQ: qmn coordinato	    54	   0	  756	14.00 s      0.2
Streams AQ: qmn slave idle	    27	   0	  756	27.99 s      0.1
	v_select_only_workload := TRUE;
OFS idle			   248	 100	  744 2999.99ms      1.0
pman timer			   248	 100	  744 2999.67ms      1.0
REPL Capture/Apply: RAC AQ	    12	 100	  742	61.87 s      0.0
END IF;
ASM background timer		 1,474	   0	  742  503.62ms      5.8
ASM cluster membership cha	   424	  79	  742 1750.35ms      1.7
heartbeat redo informer 	   742	   0	  742 1000.12ms      2.9

lreg timer			   247	 100	  742 3002.91ms      1.0
PING				   688	  19	  740 1076.15ms      2.7
SCM slave idle			 7,538	   0	  738	97.84ms     29.7
dispatcher timer		    12	 100	  720	60.01 s      0.0
IF ( v_update_pct = 100 )	  THEN
AQPC idle			    24	 100	  720	30.00 s      0.1
smon timer			     2	 100	  600  300.00 s      0.0
Data Guard: Timer		     1	   0	  600  600.00 s      0.0
	v_update_only_workload := TRUE;

Background Wait Events			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> ordered by wait time desc, waits desc (idle events last)
END IF;
-> Only events with Total Wait Time (s) >= .001 are shown
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total

				       %Time	 Wait		   Waits   % bg
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
IF ( v_scan_query_pct = 0 ) 	THEN
SQL*Net message from clien	   245	   0	   15	59.29ms      1.0
PX Deq: Parse Reply		    27	   0	    1	22.94ms      0.1
PX Deq: Execute Reply		    27	   0	    0	12.90ms      0.1
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
PX Deq Credit: send blkd	   140	   0	    0  695.04us      0.6
						v_do_scan_query := TRUE;
RMA: IPC0 completion sync	 1,109	   0	    0	24.20us      4.4
					ELSE
			  ------------------------------------------------------


						v_do_scan_query := FALSE;
Wait Event Histogram			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
					END IF;
-> Units for % of Total Waits:
   us is microseconds
-> % of Total Waits: value of .0 indicates value was <.05%;
				ELSE
   value of null is truly 0
-> Ordered by Event (idle events last)

					-- Scan quota has been filled,	force drain some random access SELECTS
						 % of Total Waits
				 -----------------------------------------------
					v_do_scan_query := FALSE;
			   Total
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
				END IF;
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
			END IF;
AQ: RAC AQ Network	    7292	29.7  67.6   1.8    .7	  .1	.0
		END IF;
ASM IO for non-blocking p    530  66.8	27.7   3.2   1.9    .2	  .2
ASM file metadata operati   1493  39.0	 5.9  39.6   5.2   6.8	  .5   2.5    .6

AWR Flush		       4 100.0
CGS wait for IPC msg	    7753   1.7	48.6  46.6   1.9    .9	  .3	.0    .0

CSS initialization	       2	50.0				    50.0
CSS operation: action	       4	      25.0			    75.0
CSS operation: data query     22				      13.6  86.4
		IF ( v_do_scan_query != TRUE ) THEN
CSS operation: data updat     25					   100.0
CSS operation: query	       6  83.3					    16.7
			SELECT COUNT(c2) INTO v_rowcnt
DFS lock handle 	      68				 2.9  52.9  44.1
DLM cross inst call compl   2670	  .2   1.8    .1    .1	  .3  90.3   7.2
			FROM cf1
Disk file Mirror Read	    1074					   100.0
Disk file operations I/O     387  11.1	20.2  38.0  14.2   3.1	  .8   2.6  10.1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
GCR CSS group query	      22	95.5	     4.5
GCR CSS group update	      23   4.3	91.3	     4.3

IMR slave acknowledgement   2190   2.4	10.1   4.8   3.7  30.9	12.5   1.5  34.1
IPC group service call	     995   8.4	 5.1  27.0  20.7  32.9	 4.8	.7    .3
IPC send completion sync     812	 6.9  78.8   2.8   1.4	 4.2   3.3   2.6
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
KJC: Wait for msg sends t    312	44.2  12.8  11.5  11.5	 3.8   3.8  12.2
KSV master wait 	     593  13.8	45.4  22.1   4.2   7.3	 1.3	.3   5.6
		ELSE
LGWR all worker groups	      55				 3.6   1.8  94.5
LGWR any worker group	     249			   1.2	 4.8   1.6  92.4
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
LGWR wait for redo copy        4		    75.0	25.0
LGWR worker group orderin      9			  11.1	11.1  11.1  66.7

PGA memory operation	    1513  47.9	23.4   5.9   3.0   3.4	 7.9   5.6   2.9
PX Deq: Join ACK	      27					   100.0
PX Deq: Signal ACK EXT	      27	 3.7  48.1  11.1  11.1	 3.7  11.1  11.1
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
PX Deq: Slave Session Sta     62   1.6	 4.8   3.2   3.2  37.1	21.0  11.3  17.7
PX Deq: reap credit	  191.3K    .1	30.4  66.5   1.9    .8	  .2	.1    .0

SQL*Net message to client    737  79.9	16.0   2.4   1.2    .4
Sync ASM rebalance	      56  19.6	17.9   8.9   3.6	       1.8  48.2
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
asynch descriptor resize     271  84.1	13.3	.7    .4   1.5
buffer busy waits	       2		    50.0	50.0
				v_scan_query_quota := TRUE;
control file parallel wri    239					   100.0
control file sequential r   3261   1.1	15.5  15.1    .8    .4	 2.0	.6  64.5
cr request retry	       1					   100.0
			END IF;
cursor: pin S		     494					   100.0
db file async I/O submit     769  95.2	 2.2   1.2    .8    .4	  .1	      .1
		END IF;
db file parallel read	  547.1K					   100.0
db file parallel write	     914		.2   2.3    .4	  .7   1.3  95.1

db file scattered read	     243					   100.0
db file sequential read     1.1M					   100.0
direct path write	      40				       5.0  95.0
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
direct path write temp	      72					   100.0
enq: CF - contention	      12				       8.3  91.7
	ELSE
enq: CO - master slave de     12					   100.0
enq: DW - contention	       3					   100.0
enq: FB - contention	      17				      29.4  70.6
		--
enq: HW - contention	      16				       6.3  93.8
enq: MW - contention	       1					   100.0
		-- Do an UPDATE statement
enq: PS - contention	      54			   5.6	      48.1  46.3
enq: RO - fast object reu     95				      61.1  38.9
		--
enq: TA - contention	       2				      50.0  50.0
enq: TD - KTF dump entrie      1				     100.0

enq: TM - contention	      15				       6.7  93.3
enq: TO - contention	       2					   100.0
enq: TX - index contentio      2					   100.0
		v_my_serial := v_my_serial + v_loop_cnt ;
enq: TX - row lock conten      1					   100.0
enq: WF - contention	      14				      14.3  85.7


Wait Event Histogram			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
-> Units for % of Total Waits:
   us is microseconds
		--
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (idle events last)
		-- Increment count of UPDATES and set UPDATE quota flag if needed

						 % of Total Waits
				 -----------------------------------------------
		--
			   Total
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
		v_updates_cnt := v_updates_cnt + 1;
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
enq: WT - contention	       8				      25.0  75.0

gc buffer busy acquire	     656	  .3	.9    .5    .8	 1.8   2.6  93.1
gc buffer busy release	      62			   1.6	 4.8   1.6  91.9
gc cr block 2-way	     234				 1.3  59.4  39.3
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
gc cr block busy	      87					   100.0
gc cr block lost	     104					   100.0
			v_update_quota := TRUE;
gc cr disk read 	      47				51.1  12.8  36.2
gc cr failure		      73				      34.2  65.8
gc cr grant 2-way	    3590		      .0    .1	 5.6  27.2  67.1
		END IF;
gc cr grant busy	  249.2K	  .0	.0    .0    .0	  .1  16.5  83.3
gc cr grant congested	      30					   100.0
	END IF ;
gc cr multi block grant   337.2K	  .0	.0    .0    .0	  .0   3.6  96.3
gc cr multi block mixed       66					   100.0
gc current block 2-way	     104				      25.0  75.0
----------------------------------------------------------------------------------------------------------------------
gc current block busy	     506			    .2	 1.0  48.2  50.6
gc current block congeste      1					   100.0
gc current block lost	       4					   100.0
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
gc current grant 2-way	     126				28.6  42.9  28.6
gc current grant busy	     912				  .1  40.9  59.0
gc current grant congeste      2					   100.0
----------------------------------------------------------------------------------------------------------------------
gc current multi block re     33				      27.3  72.7
gc quiesce		       1       100.0

gc remaster		      72   2.8	44.4   2.8			    50.0
gcs drm freeze in enter s     65					   100.0
gcs log flush sync	     706   7.6	 9.5   1.7   3.1   5.4	14.0   9.6  49.0
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
gcs remastering wait for      49		    10.2  10.2	22.4  10.2  46.9
gcs resource directory to      4 100.0
		--
ges inquiry response	      32				      81.3  18.8
ges ipc enter server mode    163  92.0	 7.4	.6
ges lms sync during dynam      6					   100.0
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
ges resource directory to     15  93.3		     6.7
ges2 LMON to wake up LMD       2					   100.0
kjctssqmg: quick message       1			       100.0
		-- so reset flags and counters before continuing
ksxr poll remote instance   1152	54.0  39.9   2.9   1.6	 1.0	.6
latch free		    3582    .8	13.4   4.2   3.4  14.2	16.2  28.0  19.8
		--
latch: MGA heap latch	     279   2.2	22.2  32.6  13.3   7.5	 7.9   3.9  10.4
latch: MGA shared context    309   5.8	23.3   3.9   1.3   4.5	11.0  21.4  28.8
		v_update_quota := FALSE;
latch: MGA shared context    338   4.1	11.5   5.0   6.2   5.3	 7.1   7.4  53.3
latch: cache buffers chai  10.2K   3.1	36.2   7.8   6.2  19.4	13.4   6.5   7.4
		v_updates_cnt := 0;
latch: cache buffers lru     642    .3	29.0  10.7  14.5  28.5	12.3   2.3   2.3
latch: call allocation	      70  10.0	12.9  18.6  30.0   7.1	10.0   4.3   7.1
		v_selects_cnt := 0;
latch: enqueue hash chain      5	60.0  20.0  20.0
latch: gc element	    2279    .4	18.2   5.6   4.7  20.8	22.5  14.5  13.5
	END IF;
latch: gcs resource hash     890   1.0	18.1   3.6   4.4  21.6	25.6  14.5  11.2
latch: ges resource hash     214   2.3	16.4  25.2  13.6   7.9	 4.2   5.1  25.2

latch: kjci process conte      1	     100.0
latch: messages 	      90   5.6	24.4   5.6   6.7  13.3	13.3  12.2  18.9
latch: object queue heade     45   2.2	20.0   2.2   6.7  31.1	15.6  15.6   6.7
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
latch: shared pool	      27   7.4	29.6  14.8  14.8  25.9	 3.7   3.7
libcache interrupt action   5693  99.3	  .3	.3    .1    .1	  .0
library cache lock	     511				  .2  92.8   7.0
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
library cache pin	     505				  .6  95.2   4.2
library cache: bucket mut    277	 5.8   4.7   5.4   4.3	 4.3   5.1  70.4
		-- so reset flags and counters
library cache: mutex X	     484  28.5	34.1   7.0   1.9   4.1	 1.4   4.8  18.2
lock deadlock retry	       4	25.0  75.0
log file parallel write     1137					   100.0
		v_scan_query_quota := FALSE;
log file sequential read       1 100.0
log file sync		       1					   100.0
name-service call wait	      10				      10.0  90.0
		v_scan_queries_cnt := 0;
oracle thread bootstrap        6					   100.0

Wait Event Histogram			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
		v_random_access_queries_cnt := 0;
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
	END IF;
   us is microseconds
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0

-> Ordered by Event (idle events last)

						 % of Total Waits
	v_loop_cnt := v_loop_cnt + 1 ;
				 -----------------------------------------------
			   Total
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
	v_now := DBMS_UTILITY.GET_TIME();
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
oradebug request completi      1					   100.0

os thread creation	       6					   100.0
read by other session	    1142	  .3	.2    .5    .6	 1.1   2.6  94.7
reliable message	      40				       2.5  97.5
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
row cache lock		     143		.7		       2.1  97.2
row cache mutex 	      38  13.2	39.5  23.7   5.3   5.3	 2.6	    10.5
transaction		       1				     100.0
		-- If this is a fixed-iteration count test cycle and we've hit the number of
undo_retention publish re      2 100.0
wait list latch free	      18					   100.0
AQPC idle		      24					   100.0
		-- iterations then set exit flag
ASM background timer	    1445			   3.0	19.6   3.3  74.0
ASM cluster membership ch    417					   100.0
DIAG idle wait		   12.8K		.0    .4   1.3	 1.3  12.0  85.0
		v_stop_immediate := TRUE ;
Data Guard: Gap Manager       13					   100.0
Data Guard: Timer	       1					   100.0
	END IF;
END LOOP;
GCR sleep		    4848					   100.0

LGWR worker group idle	    1070   1.3	 1.6   1.7   8.1   2.3	 1.6   1.4  82.0
LMS CR slave timer	  436.9K					   100.0
v_end_time := v_now ;
OFS idle		     243					   100.0
PING			     678	       4.4  24.8  10.8	13.7   7.2  39.1
v_now := DBMS_UTILITY.GET_TIME();
PX Deq Credit: send blkd     721	25.7   6.1   5.3  18.2	30.9   9.4   4.4
PX Deq: Execute Reply	      27			   3.7	       3.7  92.6
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
PX Deq: Execution Msg	     105				      20.0  80.0

PX Deq: Msg Fragment	     321   6.9	 1.2	.9  12.8    .6	 1.9  60.1  15.6
PX Deq: Parse Reply	      27			   3.7	 3.7  22.2  70.4
PX Idle Wait		      35					   100.0
v_total_time := v_end_time - v_begin_time ;
REPL Capture/Apply: RAC A     12					   100.0
RMA: IPC0 completion sync   1096   5.8	65.4  21.2   2.3   3.5	  .7	.6    .5
SCM slave idle		    7414	  .0		    .0	  .0	.1  99.8
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
SQL*Net message from clie    738				  .4   3.5  96.1
Space Manager: slave idle   9479    .4	  .4	.1    .6   2.8	 2.4	.4  92.9
Streams AQ: qmn coordinat     52				50.0	    50.0
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
Streams AQ: qmn slave idl     26					   100.0
class slave wait	    8987   2.0	 1.0	.3   5.6   2.8	  .7	.3  87.5
dispatcher timer	      12					   100.0
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
gcs remote message	    4.8M    .0	  .1   3.6  12.7  14.5	17.9  22.0  29.1
gcs yield cpu		  147.9K    .3	  .9	.0    .0    .0	  .0	.0  98.7

ges remote message	   46.2K    .1	 1.7	.2    .4    .9	 4.3   5.6  86.7
heartbeat monitor sleep       31  96.8	 3.2
heartbeat redo informer      731					   100.0
END;</pre_sqltext></td></tr>
lreg timer		     244					   100.0
pman timer		     243					   100.0
pmon timer		     490	  .4				    99.6
rdbms ipc message	   30.8K   5.5	 2.0	.8   1.3   2.4	 5.7   4.7  77.6
<tr><td scope="row" class='awrnc'><a class="awr" name="2jbx2sk2bynuw"></a>2jbx2sk2bynuw</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
smon timer		       2					   100.0
wait for unread message o   1120					   100.0
watchdog main loop	    1935					   100.0
v_default_schema_number PLS_INTEGER := '33';
			  ------------------------------------------------------


v_update_pct PLS_INTEGER := '0';
Wait Event Histogram (up to 64 us)	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
v_max_loop_iterations PLS_INTEGER := '0';
-> Units for % of Total Waits:
   us is microseconds
-> % of Total Waits: total waits for all wait classes, including Idle
v_seconds_to_run PLS_INTEGER := '600';
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)
v_scale PLS_INTEGER := '65536';

						 % of Total Waits
				 -----------------------------------------------
v_work_unit PLS_INTEGER := '80' ;
			   Waits
			    1us
Event			  - 64us  <1us	<2us  <4us  <8us <16us <32us <64us >=64u
v_redo_stress  VARCHAR2(12) := 'LITE';
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
AQ: RAC AQ Network	    7230			  29.7	67.6   1.8    .9
ASM IO for non-blocking p    528		    66.8  27.7	 3.2   1.9    .4
v_hot_schema_modulus PLS_INTEGER := '0';
ASM file metadata operati   1338	      22.5  16.5   5.9	39.6   5.2  10.4
AWR Flush		       4	      50.0  50.0
CGS wait for IPC msg	    7655		     1.7  48.6	46.6   1.9   1.3
v_do_hotspot   VARCHAR(7) := 'FALSE';
CSS initialization	       1			  50.0		    50.0
CSS operation: action	       1				25.0	    75.0
CSS operation: query	       5	16.7  50.0  16.7		    16.7
v_hotspot_mb  NUMBER := '10';
DLM cross inst call compl     56			    .2	 1.8	.1  97.9
Disk file operations I/O     323		    11.1  20.2	38.0  14.2  16.5
GCR CSS group query	      22			  95.5	       4.5
v_hotspot_offset_mb NUMBER := '0';
GCR CSS group update	      23		     4.3  91.3	       4.3
IMR slave acknowledgement    461		     2.4  10.1	 4.8   3.7  78.9
v_hotspot_modulus  PLS_INTEGER := '0';
IPC group service call	     610	       1.1   7.3   5.1	27.0  20.7  38.7
IPC send completion sync     719			   6.9	78.8   2.8  11.5

KJC: Wait for msg sends t    214			  44.2	12.8  11.5  31.4
KSV master wait 	     507		    13.8  45.4	22.1   4.2  14.5
v_sleep_modulus PLS_INTEGER := '0';
LGWR wait for redo copy        3				      75.0  25.0
PGA memory operation	    1213	       6.5  41.4  23.4	 5.9   3.0  19.8
PX Deq: Signal ACK EXT	      17			   3.7	48.1  11.1  37.0
v_sleep_min NUMBER := '.1';
PX Deq: Slave Session Sta      8		     1.6   4.8	 3.2   3.2  87.1
PX Deq: reap credit	  189.1K		      .1  30.4	66.5   1.9   1.1
v_sleep_max NUMBER := '.5';
SQL*Net message to client    734	      11.8  68.1  16.0	 2.4   1.2    .4
Sync ASM rebalance	      28		    19.6  17.9	 8.9   3.6  50.0
asynch descriptor resize     267	       3.0  81.2  13.3	  .7	.4   1.5
v_scan_query_pct PLS_INTEGER := '0';
buffer busy waits	       1				      50.0  50.0
control file sequential r   1061		     1.1  15.5	15.1	.8  67.5
db file async I/O submit     764	      27.2  68.0   2.2	 1.2	.8    .7
v_obfuscate VARCHAR(5)	:= 'FALSE';
db file parallel write	      23				  .2   2.3  97.5
gc buffer busy acquire	      11			    .3	  .9	.5  98.3

gc cr grant 2-way	       1					.0 100.0
gc cr grant busy	      55			    .0	  .0	.0 100.0
gc cr multi block grant       29			    .0	  .0	.0 100.0

gc quiesce		       1			 100.0
gc remaster		      36		     2.8  44.4	 2.8	    50.0
gcs log flush sync	     155		     7.6   9.5	 1.7   3.1  78.0
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
gcs remastering wait for       5				      10.2  89.8
gcs resource directory to      4	      50.0  50.0
ges ipc enter server mode    163	       3.1  89.0   7.4	  .6
ges resource directory to     15	      40.0  53.3	       6.7
ksxr poll remote instance   1115			  54.0	39.9   2.9   3.2
latch free		     781		      .8  13.4	 4.2   3.4  78.2
latch: MGA heap latch	     196		     2.2  22.2	32.6  13.3  29.7
latch: MGA shared context    106		     5.8  23.3	 3.9   1.3  65.7
latch: MGA shared context     91		     4.1  11.5	 5.0   6.2  73.1
latch: cache buffers chai   5447		     3.1  36.2	 7.8   6.2  46.7
latch: cache buffers lru     350		      .3  29.0	10.7  14.5  45.5
latch: call allocation	      50		    10.0  12.9	18.6  30.0  28.6
latch: enqueue hash chain      5			  60.0	20.0  20.0
latch: gc element	     655		      .4  18.2	 5.6   4.7  71.3
latch: gcs resource hash     241		     1.0  18.1	 3.6   4.4  72.9
latch: ges resource hash     123		     2.3  16.4	25.2  13.6  42.5
latch: kjci process conte      1			       100.0
latch: messages 	      38		     5.6  24.4	 5.6   6.7  57.8
latch: object queue heade     14		     2.2  20.0	 2.2   6.7  68.9
latch: shared pool	      18		     7.4  29.6	14.8  14.8  33.3
libcache interrupt action   5689	 1.1  92.0   6.2    .3	  .3	.1    .1
library cache: bucket mut     44			   5.8	 4.7   5.4  84.1
library cache: mutex X	     346	       1.4  27.1  34.1	 7.0   1.9  28.5
lock deadlock retry	       4			  25.0	75.0

Wait Event Histogram (up to 64 us)	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------
			   Waits
			    1us
Event			  - 64us  <1us	<2us  <4us  <8us <16us <32us <64us >=64u
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
log file sequential read       1		   100.0
read by other session	      11			    .3	  .2	.5  99.0
row cache lock		       1				  .7	    99.3
row cache mutex 	      31		    13.2  39.5	23.7   5.3  18.4
undo_retention publish re      2		   100.0
			  ------------------------------------------------------


Wait Event Histogram (up to 32 ms)	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds,
   ms is 1024 microseconds (approximately 1 millisecond)
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------
			   Waits
			    1ms
Event			  to 32m  <512	<1ms  <2ms  <4ms  <8ms <16ms <32ms >=32m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
ASM file metadata operati      7  99.4	  .2	      .1		.2    .1
CGS wait for IPC msg	       2 100.0	  .0
CSS initialization	       1  50.0				50.0
CSS operation: action	       3  25.0	75.0
CSS operation: data query     19  13.6	27.3  40.9  18.2
CSS operation: data updat     25	76.0  20.0	   4.0
CSS operation: query	       1  83.3	16.7
DFS lock handle 	      27  55.9	17.6  16.2   5.9		     4.4
DLM cross inst call compl    191  92.8	 6.8	.3    .0	  .0	      .0
Disk file Mirror Read	     902	       1.3  34.8  29.3	10.4   8.1  16.0
Disk file operations I/O      33  89.9	 3.4	.3   2.1   1.0	 1.6	.3   1.6
IMR slave acknowledgement    634  65.9	  .5	.1  11.5   9.8	 3.7   3.4   5.2
IPC group service call	       3  99.7	  .3
IPC send completion sync      20  97.4	 2.5				      .1
KJC: Wait for msg sends t     22  87.8	 3.2   2.6    .6    .6		     5.1
KSV master wait 	      33  94.4		     3.2   2.0	  .2	.2
LGWR all worker groups	      52   5.5	 9.1   1.8  49.1   7.3	27.3
LGWR any worker group	     230   7.6	 4.8   8.4  55.8  16.9	 6.4
LGWR worker group orderin      6  33.3		    22.2  33.3	11.1
PGA memory operation	      44  97.1	 1.7	.9    .3    .1
PX Deq: Join ACK	      27	48.1  33.3  11.1   3.7	 3.7
PX Deq: Signal ACK EXT	       3  88.9	11.1
PX Deq: Slave Session Sta     11  82.3	 9.7   6.5	   1.6
PX Deq: reap credit	      59 100.0	  .0	.0    .0    .0
Sync ASM rebalance	      20  51.8	10.7		  12.5	 8.9   3.6  12.5
control file parallel wri    131		    19.2  19.2	10.9   5.4  45.2
control file sequential r   1912  35.5	  .0	.7  25.9  23.2	 6.6   2.3   5.9
cr request retry	       1			       100.0
cursor: pin S		     494	      99.8	    .2
db file async I/O submit       1  99.9		      .1
db file parallel read	  102.5K		      .0   2.5	 8.4   7.8  81.3
db file parallel write	     868   4.9	 2.2   3.6  11.6  53.1	21.4   3.1    .1
db file scattered read	     216		    21.0  37.4	25.1   5.3  11.1
db file sequential read       1M		.0  10.5  57.0	17.8   4.8  10.0
direct path write	      36   5.0	       2.5  25.0  22.5	22.5  17.5   5.0
direct path write temp	      72		    48.6  40.3	11.1
enq: CF - contention	      10   8.3	33.3  16.7  33.3		     8.3
enq: CO - master slave de     11	50.0  25.0   8.3	 8.3	     8.3
enq: DW - contention	       3	     100.0
enq: FB - contention	      12  29.4	41.2  23.5   5.9
enq: HW - contention	      14   6.3	37.5  37.5  12.5		     6.3
enq: MW - contention	       1       100.0
enq: PS - contention	      25  53.7	35.2   9.3	   1.9
enq: RO - fast object reu     33  61.1	 9.5  10.5  12.6   1.1	 1.1	     4.2
enq: TA - contention	       1  50.0	      50.0
enq: TM - contention	      13   6.7	40.0  26.7	  20.0		     6.7
enq: TO - contention	       2	50.0  50.0
enq: TX - index contentio      2		   100.0
enq: WF - contention	      11  14.3	42.9  21.4  14.3		     7.1
enq: WT - contention	       5  25.0	37.5  12.5		12.5	    12.5
gc buffer busy acquire	     250   6.9	 1.2	.8   1.4  22.1	12.3	.3  55.0
gc buffer busy release	      57   8.1	 9.7   6.5  17.7  30.6	25.8   1.6
gc cr block 2-way	      82  60.7	 7.3   9.0  11.5   6.4	  .9	     4.3
gc cr block busy	      87	 6.9  20.7  25.3  16.1	31.0
gc cr disk read 	      16  63.8	 8.5  12.8   6.4   6.4		     2.1
gc cr failure		      24  34.2	 8.2   4.1   8.2   2.7	 6.8   2.7  32.9
gc cr grant 2-way	    2305  32.9	26.4  21.5  11.4   4.0	  .8	.1   2.9
gc cr grant busy	  180.2K  16.7	27.1  21.2  14.4   6.6	 1.9   1.1  11.0
gc cr grant congested	      30	      10.0  73.3  10.0	 6.7
gc cr multi block grant   227.5K   3.7	14.3  16.6  15.6  11.1	 6.3   3.5  28.8

Wait Event Histogram (up to 32 ms)	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds,
   ms is 1024 microseconds (approximately 1 millisecond)
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------
			   Waits
			    1ms
Event			  to 32m  <512	<1ms  <2ms  <4ms  <8ms <16ms <32ms >=32m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
gc cr multi block mixed       15	 4.5   3.0   3.0   7.6	       4.5  77.3
gc current block 2-way	      76  25.0	26.0  32.7  11.5   2.9		     1.9
gc current block busy	     251  49.4	14.6  15.0   4.2   5.3	10.3	.2   1.0
gc current block congeste      1			 100.0
gc current grant 2-way	      34  71.4	12.7   9.5   3.2   1.6		     1.6
gc current grant busy	     474  41.0	20.9  15.9   9.2   4.3	 1.1	.5   7.0
gc current grant congeste      1	      50.0			    50.0
gc current multi block re     21  27.3	30.3  18.2  12.1	       3.0   9.1
gc remaster		      15  50.0				11.1   9.7  29.2
gcs log flush sync	     346  51.0	19.3   5.8  11.6   5.2	 6.9	.1
gcs remastering wait for       8  53.1	 2.0   4.1   4.1   6.1		    30.6
ges inquiry response	       6  81.3	12.5   3.1   3.1
ges lms sync during dynam      3	      16.7  16.7  16.7		    50.0
ges2 LMON to wake up LMD       2	      50.0  50.0
latch free		     697  80.2	14.4   3.1    .8   1.0	  .1	.1    .3
latch: MGA heap latch	      29  89.6	 2.2   7.5    .7
latch: MGA shared context     89  71.2	23.6   2.9   2.3
latch: MGA shared context    180  46.7	11.8  29.0  11.8    .6
latch: cache buffers chai    747  92.6	 4.0   1.9   1.1    .3	  .0	.0    .1
latch: cache buffers lru      15  97.7	 1.9	.5
latch: call allocation	       5  92.9	 5.7   1.4
latch: gc element	     307  86.5	 8.5   3.7   1.0    .3
latch: gcs resource hash      84  88.8	 5.5   2.9    .2    .2	  .1	.4   1.8
latch: ges resource hash      54  74.8	 4.7   8.9  11.7
latch: messages 	      17  81.1	 4.4  14.4
latch: object queue heade      3  93.3	 2.2   2.2   2.2
library cache lock	      36  93.0	 3.9   2.2    .8	  .2
library cache pin	      21  95.8	 2.6	.6    .8    .2
library cache: bucket mut    165  29.6	 3.2   6.1  13.4   8.7	13.7  14.4  10.8
library cache: mutex X	      88  81.8	 2.7   2.1    .6	 9.5   3.3
log file parallel write     1135	31.5  13.3  15.3  21.7	16.4   1.6    .2
log file sync		       1		   100.0
name-service call wait	       7  10.0	30.0  30.0  10.0		    20.0
oracle thread bootstrap        6				     100.0
os thread creation	       6	      83.3  16.7
read by other session	     677   5.3	 5.3   5.9  14.5  14.1	11.3   8.2  35.5
reliable message	      37   2.5	27.5  17.5  37.5	 7.5   2.5   5.0
row cache lock		     127   2.8	16.1  21.0  14.7  16.1	 9.8  11.2   8.4
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;
row cache mutex 	       4  89.5	 5.3			 5.3

wait list latch free	      18	     100.0
			  ------------------------------------------------------

IF ( v_max_loop_iterations &gt; 0 )  THEN

Wait Event Histogram (up to 2 sec)	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
	v_loop_control := TRUE ;
-> Units for % of Total Waits:
   ms is milliseconds
END IF;
   s is 1024 milliseconds (approximately 1 second)
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;

   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

IF ( v_update_pct = 0 ) 	  THEN
						 % of Total Waits
				 -----------------------------------------------
			   Waits
	v_select_only_workload := TRUE;
			   64ms
Event			   to 2s <32ms <64ms <1/8s <1/4s <1/2s	 <1s   <2s  >=2s
END IF;
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
ASM file metadata operati      2  99.9	  .1
DFS lock handle 	       3  95.6	       1.5	   1.5	 1.5

DLM cross inst call compl      1 100.0			    .0
Disk file Mirror Read	     172  84.0	 9.4   6.3    .3
IF ( v_update_pct = 100 )	  THEN
Disk file operations I/O       6  98.4	  .5   1.0
IMR slave acknowledgement    113  94.8	 3.0   2.2
IPC send completion sync       1  99.9				  .1
	v_update_only_workload := TRUE;
KJC: Wait for msg sends t     16  94.9			   5.1
Sync ASM rebalance	       7  87.5	 8.9	     1.8   1.8
END IF;
control file parallel wri    108  54.8	20.1  21.8   3.3
control file sequential r    191  94.1	 3.3   2.2    .3
db file parallel read	  444.6K  18.7	17.7  32.4  28.0   3.1	  .0

db file parallel write	       1  99.9	  .1
db file scattered read	      27  88.9	 4.1   6.6    .4
IF ( v_scan_query_pct = 0 ) 	THEN
db file sequential read   114.2K  90.0	 4.9   4.5    .5    .0
direct path write	       2  95.0	 2.5   2.5
	v_random_workload_only := TRUE;
enq: CF - contention	       1  91.7			   8.3
enq: CO - master slave de      1  91.7			   8.3
enq: HW - contention	       1  93.8			   6.3
END IF;
enq: RO - fast object reu      4  95.8	 1.1   2.1   1.1
enq: TM - contention	       1  93.3			   6.7

enq: WF - contention	       1  92.9		     7.1
enq: WT - contention	       1  87.5			  12.5
gc buffer busy acquire	     357  45.0	  .5   2.4   4.4   3.7	41.3   2.1    .6
IF ( v_scan_query_pct = 100 ) 	THEN
gc cr block 2-way	       7  95.7				 2.6	.4   1.3
gc cr block lost	     104			  32.7	66.3   1.0
gc cr disk read 	       1  97.9				 2.1
	v_scan_workload_only := TRUE;
gc cr failure		      24  67.1	11.0  15.1   2.7   1.4	 2.7
gc cr grant 2-way	     105  97.1		.0		 2.6	.3
END IF;
gc cr grant busy	   27.3K  89.0	 2.1   4.1    .9    .2	 3.1	.5    .1

gc cr multi block grant      96K  71.2	 4.4  12.0   3.2   1.0	 5.6   2.3    .4
gc cr multi block mixed       50  22.7	 1.5   7.6  13.6   4.5	40.9   7.6   1.5
v_seconds_to_run := v_seconds_to_run * 100 ;
gc current block 2-way	       2  98.1				 1.9
gc current block busy	       5  99.0	  .4			  .6
gc current block lost	       4			  25.0	75.0

gc current grant 2-way	       2  98.4		.8	    .8
gc current grant busy	      62  93.0	 1.1   2.5    .7    .2	 2.2	.1    .2
gc current grant congeste      1  50.0	50.0
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
gc current multi block re      3  90.9	       6.1		 3.0
gc remaster		      21  70.8	 1.4  16.7   8.3	       2.8

gcs drm freeze in enter s     65	 3.1   3.1  24.6  69.2
gcs remastering wait for      15  69.4	      28.6   2.0
ges lms sync during dynam      3  50.0	50.0
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
latch free		      12  99.7	  .3	.1
latch: cache buffers chai      8  99.9	  .0	.1
latch: gcs resource hash      16  98.2	  .8   1.0
-- DBMS_RANDOM.seed (val =&gt; v_seed);
library cache: bucket mut     30  89.2	 9.4   1.4
log file parallel write        2  99.8	  .2
name-service call wait	       2  80.0	10.0  10.0

oradebug request completi      1	     100.0
read by other session	     405  64.5	16.3  15.0   3.9    .4
v_begin_time := DBMS_UTILITY.GET_TIME();
reliable message	       1  95.0	 2.5				     2.5
row cache lock		      11  91.6	 3.5	     3.5	  .7	      .7
			  ------------------------------------------------------
v_now := v_begin_time ;


Wait Event Histogram (up to 2 min)	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
v_brick_wall := v_now + v_seconds_to_run ;
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   s is 1024 milliseconds (approximately 1 second)
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
   m is 64*1024 milliseconds (approximately 67 seconds or 1.12 minutes)
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;

   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

----------------------------------------------------------------------------------------------------------------------
						 % of Total Waits
				 -----------------------------------------------
			   Waits
			    4s
-- The following WHILE loop is the master work loop control
Event			   to 2m   <2s	 <4s   <8s  <16s  <32s	< 1m  < 2m  >=2m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
enq: TX - row lock conten      1			       100.0
----------------------------------------------------------------------------------------------------------------------
gc buffer busy acquire	       4  99.4	  .5	.2
gc cr block 2-way	       3  98.7	 1.3
gc cr grant busy	     154  99.9	  .0	.0    .0
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
gc cr multi block grant     1317  99.6	  .3	.1    .0
gc cr multi block mixed        1  98.5	 1.5
gc current grant busy	       2  99.8	  .1	.1

reliable message	       1  97.5	 2.5
row cache lock		       1  99.3		      .7
			  ------------------------------------------------------
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME


Wait Event Histogram (up to 1 hr)	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
		  No data exists for this section of the report.
			  ------------------------------------------------------

			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );

Service Statistics			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> ordered by DB Time

			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
							   Physical	 Logical
Service Name		      DB Time (s)   DB CPU (s)	  Reads (K)    Reads (K)
			DBMS_LOCK.SLEEP(v_num_tmp);
---------------------------- ------------ ------------ ------------ ------------
p60sdb.example.com		  129,620	 6,633	     34,560    1,214,620
SYS$BACKGROUND				3	     2		  3	      65
		END IF;
SYS$USERS				0	     0		  0	       0
p60sdbXDB				0	     0		  0	       0
			  ------------------------------------------------------
	END IF;

Service Wait Class Stats		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Wait Class info for services in the Service Statistics section.

-> Total Waits and Time Waited displayed for the following wait
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
   classes:  User I/O, Concurrency, Administrative, Network
-> Time Waited (Wt Time) in seconds

Service Name
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
----------------------------------------------------------------
 User I/O  User I/O  Concurcy  Concurcy     Admin     Admin   Network	Network
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
Total Wts   Wt Time Total Wts	Wt Time Total Wts   Wt Time Total Wts	Wt Time
--------- --------- --------- --------- --------- --------- --------- ---------
p60sdb.example.com
			v_sharing_schema := TRUE ;
  1659323     71004	11522	      8 	0	  0	  545	      0
SYS$BACKGROUND
     4628	 43	 6744	     11 	0	  0	  936	      0
		ELSE
SYS$USERS
	0	  0	    0	      0 	0	  0	    0	      0
			  ------------------------------------------------------
			IF ( v_sharing_schema = TRUE ) THEN

Top 10 Channel Waits			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Top 10 Channel Waits by wait time

				EXECUTE IMMEDIATE v_home_schema_str;
Channel
----------------------------------------------------------------
	       Total
				v_sharing_schema := FALSE;
		Wait
      Waits Time (s)  Avg Wait
----------- -------- ---------
			END IF;
kxfp control signal channel
	 13	   0  675.77us
obj broadcast channel
		END IF;
	 23	   0	3.31ms
			  ------------------------------------------------------


	END IF;
Top Process Types by Wait Class 	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> This table displays top process types ordered by wait class


Proce Description		     Wait Class Type  Wait Time (sec
----- ------------------------------ ---------------- --------------
      Others (foregrounds + unclassi User I/O		    71,910.5
	-- Choose the random block. The v_do_hotspot handler that follows can override.
      Others (foregrounds + unclassi Cluster		    54,043.9
MZ    MMON slave class 2	     Application		67.0
      Others (foregrounds + unclassi Other			24.5
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
CKPT  checkpoint		     System I/O 		19.0
M     MMON slave class 1	     Cluster			18.4
W     space management slave pool    Cluster			14.6

M     MMON slave class 1	     User I/O			13.7
LMON  global enqueue service monitor Other			12.5
MMON  Manageability Monitor Process  Concurrency		10.2
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
IMR   CGS IMR Slave		     User I/O			 9.2
      Others (foregrounds + unclassi Concurrency		 8.4
RMS0  rac management server	     System I/O 		 7.3
CKPT  checkpoint		     User I/O			 6.0
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
W     space management slave pool    User I/O			 5.5
LG    Log Writer Slave		     System I/O 		 4.9
MMON  Manageability Monitor Process  Cluster			 4.9
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
P     Parallel query slave	     Other			 4.8
M     MMON slave class 1	     Other			 4.0
MZ    MMON slave class 2	     Cluster			 3.8
			  ------------------------------------------------------
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );


Top Process Types by CPU Used		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
	END IF;
-> This table displays top process types ordered by CPU time

Proces Description		      CPU Time (sec)

------ ------------------------------ --------------
----------------------------------------------------------------------------------------------------------------------
       Others (foregrounds + unclassi	     6,693.7
LM     global cache service process	     1,002.4
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
RS*    GCS RM Slave				37.3
VKTM   Virtual Keeper of TiMe process		25.1
P      Parallel query slave			21.6
----------------------------------------------------------------------------------------------------------------------
CR*    GCS CR Slave				15.4
DIA0   diagnosibility process 0 		13.1
M      MMON slave class 1			13.1

SCM    DLM Statistics Collection and		 5.2
GCR    GCR Slaves (LMHB)			 4.5
LMHB   lm heartbeat monitor			 3.6
	IF  ( v_select_only_workload = TRUE ) THEN
IPC0   IPC Service 0				 2.6
MMNL   Manageability Monitor Process		 2.2
DBRM   DataBase Resource Manager		 1.9
		-- handle case where user specified zero pct updates (a SELECT-only workload)
MZ     MMON slave class 2			 1.9
LMD0   global enqueue service daemon		 1.8
		v_do_update := FALSE;
LMON   global enqueue service monitor		 1.8
W      space management slave pool		 1.4
IMR    CGS IMR Slave				 1.2
		v_update_quota := TRUE ;
LMD2   global enqueue service daemon		 1.1
			  ------------------------------------------------------

	ELSE

SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Resources reported for PL/SQL code includes the resources used by all SQL
		IF ( v_update_only_workload = TRUE ) THEN
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
			-- handle case where user specified 100% updates
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
			v_do_update := TRUE;
-> Captured SQL account for   87.9% of Total DB Time (s):	  132,423
-> Captured PL/SQL account for	 34.2% of Total DB Time (s):	     132,423

			v_update_quota := FALSE;
	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
		ELSE
       116,360.5     13,530,723 	 0.01	87.9	4.5   55.7 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES

	   978.6	      2        489.28	  .7	1.8   40.3 0fkurntnzjbs2
Module: SQL*Plus
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
			IF ( v_update_quota = FALSE ) THEN
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	   977.5	      2        488.73	  .7	1.7   35.9 9d1h2t7jhjzb0
Module: SQL*Plus
				-- Handle case where user has set UPDATE_PCT to a valid value
DECLARE v_default_schema_number PLS_INTEGER := '18'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
				--
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

				-- We are doing updates during this run and quota has not been met yet
	   977.1	      2        488.55	  .7	1.7   37.2 7j116g127a7n9
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '92'; v_update_pct PLS_INTEGER :=
				-- We still vacillate until update quota has been met
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_

stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	   977.0	      2        488.49	  .7	1.7   36.3 2jbx2sk2bynuw
Module: SQL*Plus
				IF ( MOD(v_random_block,  2) = 0 ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '33'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
					v_do_update := TRUE;
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

				ELSE
	   976.7	      2        488.35	  .7	3.8   98.6 26sn8ac7rgup8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '206'; v_update_pct PLS_INTEGER :
					v_do_update := FALSE;
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
				END IF;

	   976.4	      2        488.21	  .7	1.7   37.4 0f9fdb27bux51
Module: SQL*Plus
			ELSE
DECLARE v_default_schema_number PLS_INTEGER := '70'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
				-- UPDATE quota has been filled,  force drain some SELECTs
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	   976.2	      2        488.09	  .7	1.6   38.5 fy5wc7anwa0yh
Module: SQL*Plus
				v_do_update := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '154'; v_update_pct PLS_INTEGER :
			END IF;
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
		END IF;

	   976.1	      2        488.06	  .7	1.7   41.5 bx7t0n3f5rv2v
Module: SQL*Plus
	END IF;
DECLARE v_default_schema_number PLS_INTEGER := '62'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_

stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho


SQL ordered by Elapsed Time		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
----------------------------------------------------------------------------------------------------------------------
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
-- The type of SQL is now determined...execute it in the following section
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
----------------------------------------------------------------------------------------------------------------------
-> Captured SQL account for   87.9% of Total DB Time (s):	  132,423
-> Captured PL/SQL account for	 34.2% of Total DB Time (s):	     132,423


	Elapsed 		 Elapsed Time
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
	IF ( v_do_update != TRUE ) THEN
---------------- -------------- ------------- ------ ------ ------ -------------
	   975.8	      2        487.90	  .7	1.7   42.3 00u1cz9td3zd9
Module: SQL*Plus
		--
DECLARE v_default_schema_number PLS_INTEGER := '124'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
		-- Do a SELECT statement
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

			  ------------------------------------------------------

		-- Work out scan or random

SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Resources reported for PL/SQL code includes the resources used by all SQL
		IF  ( v_random_workload_only = TRUE ) THEN
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
-> Captured SQL account for   77.3% of Total CPU Time (s):	     6,776
-> Captured PL/SQL account for	 67.3% of Total CPU Time (s):		6,776

			v_do_scan_query := FALSE;
    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
			v_scan_query_quota := TRUE ;
   5,223.5   13,530,723       0.00   77.1  116,360.5	4.5   55.7 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )
		ELSE

     973.6	      2     486.80   14.4      974.6   99.9	.0 d8zwkn2fy9t2s
Module: SQL*Plus
			IF ( v_scan_workload_only = TRUE ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '179'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

     973.0	      2     486.51   14.4      973.7   99.9	.0 b329y81c4wbq1
Module: SQL*Plus
				v_do_scan_query := TRUE;
DECLARE v_default_schema_number PLS_INTEGER := '189'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
				v_scan_query_quota := FALSE;
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

     971.2	      2     485.59   14.3      972.7   99.8	.1 fndd8kn6zzc00
			ELSE
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '172'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
				IF ( v_scan_query_quota = FALSE ) THEN
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
     486.2	      1     486.24    7.2      487.3   99.8	.2 a52uzk244rp72
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '200'; v_update_pct PLS_INTEGER :
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
      38.3	      2      19.13    0.6      974.9	3.9   98.5 6gfqnqrxd0dmy
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
						v_do_scan_query := TRUE;
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
					ELSE
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

      37.9	      2      18.97    0.6      974.6	3.9   98.5 4za5zb55hj6w6
Module: SQL*Plus
						v_do_scan_query := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '11'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
					END IF;
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

      37.6	      2      18.81    0.6      973.6	3.9   98.5 6pcyz05z3k6jd
				ELSE
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '183'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
					-- Scan quota has been filled,	force drain some random access SELECTS
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

      37.6	      2      18.80    0.6      974.5	3.9   98.5 dhz4fxc8z3b1n
					v_do_scan_query := FALSE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '193'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
				END IF;
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h


			END IF;
SQL ordered by CPU Time 		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
		END IF;
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time

-> Captured SQL account for   77.3% of Total CPU Time (s):	     6,776
-> Captured PL/SQL account for	 67.3% of Total CPU Time (s):		6,776

    CPU 		  CPU per	    Elapsed

  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
      37.6	      2      18.79    0.6      973.5	3.9   98.5 0fshmsa8432z1
		IF ( v_do_scan_query != TRUE ) THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '194'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			SELECT COUNT(c2) INTO v_rowcnt
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

			  ------------------------------------------------------
			FROM cf1


SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Resources reported for PL/SQL code includes the resources used by all SQL
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time

-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   86.8% of Total User I/O Wait Time (s):	      74
-> Captured PL/SQL account for	 38.8% of Total User I/O Wait Time (s):

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
  User I/O		  UIO per	    Elapsed
		ELSE
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
---------- ------------ ---------- ------ ---------- ------ ------ -------------
  64,827.0   13,530,723       0.00   86.8  116,360.5	4.5   55.7 bhdvtsvjhgvrh

Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

     962.5	      2     481.27    1.3      976.7	3.8   98.6 26sn8ac7rgup8
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '206'; v_update_pct PLS_INTEGER :

= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
     961.6	      2     480.80    1.3      975.1	3.7   98.6 ddpwcrwq8vccq
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '180'; v_update_pct PLS_INTEGER :
				v_scan_query_quota := TRUE;
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

			END IF;
     961.5	      2     480.76    1.3      974.8	3.6   98.6 c6bsgstj3jm1y
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
		END IF;
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho


     961.5	      2     480.73    1.3      975.1	3.7   98.6 b7t6ccanqd3pt
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '192'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	ELSE
     961.1	      2     480.57    1.3      975.4	3.7   98.5 d5jwvg7u8kh94
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '181'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		--
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

     960.9	      2     480.44    1.3      974.9	3.7   98.6 1cvh1jrtm7sxd
		-- Do an UPDATE statement
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '188'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		--
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

     960.5	      2     480.27    1.3      974.2	3.7   98.6 8wyaxgug4a648

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '175'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		v_my_serial := v_my_serial + v_loop_cnt ;
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

     960.4	      2     480.18    1.3      974.1	3.7   98.6 804vrfqav27ua

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho


SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
		--
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
		-- Increment count of UPDATES and set UPDATE quota flag if needed
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   86.8% of Total User I/O Wait Time (s):	      74
		--
-> Captured PL/SQL account for	 38.8% of Total User I/O Wait Time (s):
		v_updates_cnt := v_updates_cnt + 1;

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id

---------- ------------ ---------- ------ ---------- ------ ------ -------------
     960.3	      2     480.13    1.3      974.8	3.8   98.5 3x31q3h9nbczf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '182'; v_update_pct PLS_INTEGER :
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

			v_update_quota := TRUE;
     959.9	      2     479.96    1.3      974.9	3.9   98.5 6gfqnqrxd0dmy
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
		END IF;
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	END IF ;
     959.7	      2     479.83    1.3      974.5	3.9   98.5 dhz4fxc8z3b1n
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '193'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
----------------------------------------------------------------------------------------------------------------------
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

     959.7	      2     479.83    1.3      973.5	3.7   98.6 c2gukkg28mgry
Module: SQL*Plus
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

     959.5	      2     479.77    1.3      974.6	3.9   98.5 4za5zb55hj6w6
Module: SQL*Plus
----------------------------------------------------------------------------------------------------------------------
DECLARE v_default_schema_number PLS_INTEGER := '11'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_

stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

     959.0	      2     479.49    1.3      972.4	3.6   98.6 2wnzatwb6awz6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

		--
     959.0	      2     479.48    1.3      972.8	3.7   98.6 4kvs15brhx2na
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '210'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

     958.9	      2     479.44    1.3      973.2	3.8   98.5 5b5dam6wbmycc
		-- so reset flags and counters before continuing
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="2v9xhm604zr9r"></a>2v9xhm604zr9r</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '86';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;

 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

v_random_block PLS_INTEGER := 1;
     958.9	      2     479.43    1.3      973.5	3.9   98.5 0fshmsa8432z1
Module: SQL*Plus
v_tmp PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '194'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

v_now PLS_INTEGER;
SQL ordered by User I/O Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Resources reported for PL/SQL code includes the resources used by all SQL
v_brick_wall PLS_INTEGER;
   statements called by the code.

-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
v_begin_time PLS_INTEGER;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   86.8% of Total User I/O Wait Time (s):	      74
v_end_time PLS_INTEGER;
-> Captured PL/SQL account for	 38.8% of Total User I/O Wait Time (s):

  User I/O		  UIO per	    Elapsed
v_total_time PLS_INTEGER;
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
v_begin_cpu_tm PLS_INTEGER;
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

v_end_cpu_tm PLS_INTEGER;
     958.8	      2     479.41    1.3      972.7	3.7   98.6 3b0dw8qugt8u0
Module: SQL*Plus
v_total_cpu_tm PLS_INTEGER;
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '

600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
v_do_sleeps BOOLEAN := FALSE;

     958.7	      2     479.37    1.3      973.6	3.9   98.5 6pcyz05z3k6jd
Module: SQL*Plus
v_loop_control BOOLEAN := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '183'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
v_update_quota BOOLEAN := FALSE;
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

v_select_only_workload BOOLEAN := FALSE;
     958.7	      2     479.35    1.3      972.7	3.8   98.6 cmg650ct9w552
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '187'; v_update_pct PLS_INTEGER :
v_update_only_workload BOOLEAN := FALSE;
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
v_do_update BOOLEAN := FALSE;
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

     958.6	      2     479.29    1.3      973.4	3.8   98.5 7mzdtp0dvu09c
v_do_hot_schema BOOLEAN := FALSE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
v_stop_immediate BOOLEAN := FALSE;
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
v_sharing_schema BOOLEAN := FALSE;

			  ------------------------------------------------------

v_seed VARCHAR2(128);

SQL ordered by Gets			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Resources reported for PL/SQL code includes the resources used by all SQL
v_home_schema_str VARCHAR2(80);
   statements called by the code.
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
v_scratch VARCHAR2(200) ;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	1,249,870,563

-> Captured SQL account for   87.9% of Total

     Buffer		    Gets	      Elapsed
v_cpu_pct NUMBER(6, 3);
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------
v_my_serial NUMBER(16);
1.09799E+09  13,530,723 	81.1   87.8  116,360.5	 4.5  55.7 bhdvtsvjhgvrh
Module: SQL*Plus

SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

3.41635E+08	      2 1.708173E+08   27.3	 973.7	99.9	 0 b329y81c4wbq1
BEGIN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '189'; v_update_pct PLS_INTEGER :

= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;

2.97209E+08	      2 1.486045E+08   23.8	 972.7	99.8	.1 fndd8kn6zzc00
Module: SQL*Plus
EXECUTE IMMEDIATE v_home_schema_str;
DECLARE v_default_schema_number PLS_INTEGER := '172'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h


2.76459E+08	      2 1.382293E+08   22.1	 974.6	99.9	 0 d8zwkn2fy9t2s
Module: SQL*Plus
IF ( v_hot_schema_modulus != 0 ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '179'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	v_do_hot_schema := TRUE;
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
END IF;

1.44126E+08	      1 1.441259E+08   11.5	 487.3	99.8	.2 a52uzk244rp72
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '200'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
IF ( v_sleep_modulus != 0 )	  THEN
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	v_do_sleeps := TRUE;
  1,049,342	      2    524,671.0	0.1	 974.9	 3.9  98.5 6gfqnqrxd0dmy
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
END IF;
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_

stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

  1,035,555	      2    517,777.5	0.1	 974.6	 3.9  98.5 4za5zb55hj6w6
IF ( v_max_loop_iterations &gt; 0 )  THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '11'; v_update_pct PLS_INTEGER :=
	v_loop_control := TRUE ;
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
END IF;

  1,008,728	      2    504,364.0	0.1	 973.4	 3.8  98.5 7mzdtp0dvu09c
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
END IF;
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho


    994,999	      2    497,499.5	0.1	 973.6	 3.9  98.5 6pcyz05z3k6jd
IF ( v_update_pct = 100 )	  THEN
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '183'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	v_update_only_workload := TRUE;
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
END IF;


SQL ordered by Gets			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
IF ( v_scan_query_pct = 0 ) 	THEN
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
	v_random_workload_only := TRUE;
-> Total Buffer Gets:	1,249,870,563
-> Captured SQL account for   87.9% of Total

END IF;
     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id

----------- ----------- ------------ ------ ---------- ----- ----- -------------
    987,714	      2    493,857.0	0.1	 973.5	 3.9  98.5 0fshmsa8432z1
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '194'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
IF ( v_scan_query_pct = 100 ) 	THEN
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	v_scan_workload_only := TRUE;
			  ------------------------------------------------------


END IF;
SQL ordered by Reads			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> %Total - Physical Reads as a percentage of Total Disk Reads

-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	  35,572,455
v_seconds_to_run := v_seconds_to_run * 100 ;
-> Captured SQL account for   88.3% of Total


   Physical		 Reads		    Elapsed
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------

 31,399,070  13,530,723        2.3   88.3  116,360.5	4.5   55.7 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');

    530,796	      2  265,398.0    1.5      974.5	3.9   98.5 dhz4fxc8z3b1n
Module: SQL*Plus
-- DBMS_RANDOM.seed (val =&gt; v_seed);
DECLARE v_default_schema_number PLS_INTEGER := '193'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

v_begin_time := DBMS_UTILITY.GET_TIME();
    529,499	      2  264,749.5    1.5      974.9	3.9   98.5 6gfqnqrxd0dmy
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
v_now := v_begin_time ;
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
v_brick_wall := v_now + v_seconds_to_run ;

    528,853	      2  264,426.5    1.5      973.6	3.9   98.5 6pcyz05z3k6jd
Module: SQL*Plus
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
DECLARE v_default_schema_number PLS_INTEGER := '183'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

    527,934	      2  263,967.0    1.5      974.8	3.8   98.5 3x31q3h9nbczf
----------------------------------------------------------------------------------------------------------------------
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '182'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
-- The following WHILE loop is the master work loop control
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

----------------------------------------------------------------------------------------------------------------------
    527,891	      2  263,945.5    1.5      972.7	3.7   98.6 3b0dw8qugt8u0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
'0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_s

tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    527,160	      2  263,580.0    1.5      976.7	3.8   98.6 26sn8ac7rgup8
Module: SQL*Plus
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
DECLARE v_default_schema_number PLS_INTEGER := '206'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

    526,389	      2  263,194.5    1.5      975.4	3.7   98.5 d5jwvg7u8kh94
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '181'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

			DBMS_LOCK.SLEEP(v_num_tmp);
    526,323	      2  263,161.5    1.5      972.7	3.8   98.6 cmg650ct9w552
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '187'; v_update_pct PLS_INTEGER :
		END IF;
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
	END IF;
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h



SQL ordered by Reads			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	  35,572,455
-> Captured SQL account for   88.3% of Total

		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
   Physical		 Reads		    Elapsed
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
    526,056	      2  263,028.0    1.5      973.2	3.8   98.5 5b5dam6wbmycc
			v_sharing_schema := TRUE ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		ELSE
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

			IF ( v_sharing_schema = TRUE ) THEN
    525,443	      2  262,721.5    1.5      974.6	3.9   98.5 4za5zb55hj6w6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '11'; v_update_pct PLS_INTEGER :=
				EXECUTE IMMEDIATE v_home_schema_str;
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
				v_sharing_schema := FALSE;
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    523,778	      2  261,889.0    1.5      973.5	3.9   98.5 0fshmsa8432z1
			END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '194'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		END IF;
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	END IF;
    520,016	      2  260,008.0    1.5      972.8	3.7   98.6 4kvs15brhx2na
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '210'; v_update_pct PLS_INTEGER :

= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
	-- Choose the random block. The v_do_hotspot handler that follows can override.

    519,048	      2  259,524.0    1.5      974.9	3.7   98.6 1cvh1jrtm7sxd
Module: SQL*Plus
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
DECLARE v_default_schema_number PLS_INTEGER := '188'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo

_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

    518,708	      2  259,354.0    1.5      973.5	3.7   98.6 c2gukkg28mgry
Module: SQL*Plus
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    518,268	      2  259,134.0    1.5      974.1	3.7   98.6 804vrfqav27ua
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    517,006	      2  258,503.0    1.5      974.2	3.7   98.6 8wyaxgug4a648
	END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '175'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

----------------------------------------------------------------------------------------------------------------------
    515,808	      2  257,904.0    1.5      975.1	3.7   98.6 ddpwcrwq8vccq
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '180'; v_update_pct PLS_INTEGER :
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by Reads			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> %Total - Physical Reads as a percentage of Total Disk Reads
----------------------------------------------------------------------------------------------------------------------
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time

-> Total Disk Reads:	  35,572,455
-> Captured SQL account for   88.3% of Total

	IF  ( v_select_only_workload = TRUE ) THEN
   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
		-- handle case where user specified zero pct updates (a SELECT-only workload)
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

		v_do_update := FALSE;
    514,338	      2  257,169.0    1.4      975.1	3.7   98.6 b7t6ccanqd3pt
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '192'; v_update_pct PLS_INTEGER :
		v_update_quota := TRUE ;
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
	ELSE

    511,853	      2  255,926.5    1.4      972.4	3.6   98.6 2wnzatwb6awz6
Module: SQL*Plus
		IF ( v_update_only_workload = TRUE ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
			-- handle case where user specified 100% updates
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    510,503	      2  255,251.5    1.4      973.4	3.8   98.5 7mzdtp0dvu09c
Module: SQL*Plus
			v_do_update := TRUE;
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			v_update_quota := FALSE;
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    510,038	      2  255,019.0    1.4      974.8	3.6   98.6 c6bsgstj3jm1y
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			IF ( v_update_quota = FALSE ) THEN
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
				-- Handle case where user has set UPDATE_PCT to a valid value
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

			  ------------------------------------------------------

				--

SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb2  Snaps: 47-
-> UnOptimized Read Reqs = Physical Read Reqs -
				-- We are doing updates during this run and quota has not been met yet
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
				-- We still vacillate until update quota has been met
-> Total Physical Read Requests:      35,569,694
-> Captured SQL account for    0.4% of Total
-> Total UnOptimized Read Requests:	 35,569,694

-> Captured SQL account for    0.4% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

				IF ( MOD(v_random_block,  2) = 0 ) THEN
UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
					v_do_update := TRUE;
    530,796	530,796 	 2    265,398.0    0.0	  1.5 dhz4fxc8z3b1n
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '193'; v_update_pct PLS_INTEGER :
				ELSE
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
					v_do_update := FALSE;

    529,499	529,499 	 2    264,749.5    0.0	  1.5 6gfqnqrxd0dmy
Module: SQL*Plus
				END IF;
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
			ELSE
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    528,853	528,853 	 2    264,426.5    0.0	  1.5 6pcyz05z3k6jd
Module: SQL*Plus
				-- UPDATE quota has been filled,  force drain some SELECTs
DECLARE v_default_schema_number PLS_INTEGER := '183'; v_update_pct PLS_INTEGER :
				v_do_update := FALSE;
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
			END IF;

    527,934	527,934 	 2    263,967.0    0.0	  1.5 3x31q3h9nbczf
Module: SQL*Plus
		END IF;
DECLARE v_default_schema_number PLS_INTEGER := '182'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
	END IF;
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

    527,891	527,891 	 2    263,945.5    0.0	  1.5 3b0dw8qugt8u0

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
----------------------------------------------------------------------------------------------------------------------
600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

-- The type of SQL is now determined...execute it in the following section
    527,160	527,160 	 2    263,580.0    0.0	  1.5 26sn8ac7rgup8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '206'; v_update_pct PLS_INTEGER :
----------------------------------------------------------------------------------------------------------------------
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h


    526,389	526,389 	 2    263,194.5    0.0	  1.5 d5jwvg7u8kh94
Module: SQL*Plus
	IF ( v_do_update != TRUE ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '181'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
		--
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

    526,323	526,323 	 2    263,161.5    0.0	  1.5 cmg650ct9w552
Module: SQL*Plus
		-- Do a SELECT statement
DECLARE v_default_schema_number PLS_INTEGER := '187'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
		-- Work out scan or random
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

    526,056	526,056 	 2    263,028.0    0.0	  1.5 5b5dam6wbmycc
Module: SQL*Plus
		IF  ( v_random_workload_only = TRUE ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb2  Snaps: 47-
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:      35,569,694
			v_do_scan_query := FALSE;
-> Captured SQL account for    0.4% of Total
-> Total UnOptimized Read Requests:	 35,569,694
-> Captured SQL account for    0.4% of Total
-> Total Optimized Read Requests:		1
			v_scan_query_quota := TRUE ;
-> Captured SQL account for    0.0% of Total

UnOptimized   Physical		    UnOptimized
		ELSE
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
			IF ( v_scan_workload_only = TRUE ) THEN
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    525,443	525,443 	 2    262,721.5    0.0	  1.5 4za5zb55hj6w6
Module: SQL*Plus
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
DECLARE v_default_schema_number PLS_INTEGER := '11'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
				v_do_scan_query := TRUE;
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    523,778	523,778 	 2    261,889.0    0.0	  1.5 0fshmsa8432z1
Module: SQL*Plus
				v_scan_query_quota := FALSE;
DECLARE v_default_schema_number PLS_INTEGER := '194'; v_update_pct PLS_INTEGER :
			ELSE
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

				IF ( v_scan_query_quota = FALSE ) THEN
    520,016	520,016 	 2    260,008.0    0.0	  1.5 4kvs15brhx2na
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '210'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
    519,048	519,048 	 2    259,524.0    0.0	  1.5 1cvh1jrtm7sxd
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '188'; v_update_pct PLS_INTEGER :
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

						v_do_scan_query := TRUE;
    518,708	518,708 	 2    259,354.0    0.0	  1.5 c2gukkg28mgry
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '78'; v_update_pct PLS_INTEGER :=
					ELSE
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

						v_do_scan_query := FALSE;
    518,268	518,268 	 2    259,134.0    0.0	  1.5 804vrfqav27ua
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '81'; v_update_pct PLS_INTEGER :=
					END IF;
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
				ELSE

    517,006	517,006 	 2    258,503.0    0.0	  1.5 8wyaxgug4a648
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '175'; v_update_pct PLS_INTEGER :
					-- Scan quota has been filled,	force drain some random access SELECTS
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
					v_do_scan_query := FALSE;

    515,808	515,808 	 2    257,904.0    0.0	  1.5 ddpwcrwq8vccq
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '180'; v_update_pct PLS_INTEGER :
				END IF;
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
			END IF;

    514,338	514,338 	 2    257,169.0    0.0	  1.4 b7t6ccanqd3pt

SQL ordered by Physical Reads (UnOptimized)DB/Inst: P60SDB/p60sdb2  Snaps: 47-
		END IF;
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests

-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:      35,569,694
-> Captured SQL account for    0.4% of Total

-> Total UnOptimized Read Requests:	 35,569,694
-> Captured SQL account for    0.4% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total
		IF ( v_do_scan_query != TRUE ) THEN

UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
			SELECT COUNT(c2) INTO v_rowcnt
----------- ----------- ---------- ------------ ------ ------ -------------
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '192'; v_update_pct PLS_INTEGER :
			FROM cf1
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

    511,853	511,853 	 2    255,926.5    0.0	  1.4 2wnzatwb6awz6
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    510,503	510,503 	 2    255,251.5    0.0	  1.4 7mzdtp0dvu09c
		ELSE
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    510,038	510,038 	 2    255,019.0    0.0	  1.4 c6bsgstj3jm1y

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '38'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

			  ------------------------------------------------------



SQL ordered by Executions		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Executions:	  15,393,234
-> Captured SQL account for   87.9% of Total

				v_scan_query_quota := TRUE;
					      Elapsed
 Executions   Rows Processed  Rows per Exec   Time (s)	%CPU   %IO    SQL Id
------------ --------------- -------------- ---------- ----- ----- -------------
			END IF;
  13,530,723	  13,530,657		1.0  116,360.5	 4.5  55.7 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

		END IF;
       1,351	       1,351		1.0	   1.5	12.1	15 f3ww8rgva3hrs
update /* KSXM:FLUSH COL */ sys.col_usage$ set equality_preds
 = equality_preds + decode(bitand(:flag,1),0,0,1), equijoin_preds = equ

ijoin_preds + decode(bitand(:flag,2),0,0,1), nonequijoin_preds = nonequijoi
n_preds + decode(bitand(:flag,4),0,0,1), range_preds = range_preds

	 529		  37		0.1	   0.1	23.1  71.6 87gaftwrm2h68
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$
o where o.obj#=:1

	 349		   0		0.0	   1.2	 7.1  72.6 0gx3b09qrx9f5
	ELSE
select obj#,index# from oid$ where user#=:1 and oid$=:2

	 240		 240		1.0	   0.6	28.8	 0 9babjv8yq8ru3
Module: SQL*Plus
		--
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;

	 214		 214		1.0	   1.6	 3.8  85.1 5cu0x10yu88sw
merge into sys.wri$_index_usage iu us
		-- Do an UPDATE statement
ing dual on (
iu.obj# = :objn) when mat
ched then update

		--
	 139		 139		1.0	   1.0	   3	.6 3dbzmtf9ahvzt
merge /* KSXM:OPTIM_DML_INF */ into sys.mon_mods_all$ m using
 dual on (m.obj#
 = :objn and (:pobjn = 0

		v_my_serial := v_my_serial + v_loop_cnt ;
 or m.obj# = :pobjn


	 133		 133		1.0	   0.5	 5.4  68.4 fn5s5p6hr6702
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="2wnzatwb6awz6"></a>2wnzatwb6awz6</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '80';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)
v_random_workload_only BOOLEAN := FALSE;

	 112		 112		1.0	   0.5	 6.9  46.3 f80h0xb1qvbsk

SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual

	  94		  94		1.0	   0.1	 9.8  85.1 5u7g54s63p4ts

select toid from type$ where package_obj#=:1 and typ_name=:2

v_random_block PLS_INTEGER := 1;
			  ------------------------------------------------------


v_tmp PLS_INTEGER;
SQL ordered by Parse Calls		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Total Parse Calls:		4,482
-> Captured SQL account for   44.8% of Total
v_now PLS_INTEGER;

			    % Total
 Parse Calls  Executions     Parses    SQL Id
v_brick_wall PLS_INTEGER;
------------ ------------ --------- -------------
	 529	    1,351     11.80 f3ww8rgva3hrs

update /* KSXM:FLUSH COL */ sys.col_usage$ set equality_preds
v_begin_time PLS_INTEGER;
 = equality_preds + decode(bitand(:flag,1),0,0,1), equijoin_preds = equ
ijoin_preds + decode(bitand(:flag,2),0,0,1), nonequijoin_preds = nonequijoi
v_end_time PLS_INTEGER;
n_preds + decode(bitand(:flag,4),0,0,1), range_preds = range_preds

	 241	      240      5.38 9babjv8yq8ru3
v_total_time PLS_INTEGER;
Module: SQL*Plus
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;

v_begin_cpu_tm PLS_INTEGER;
	 214	      214      4.77 5cu0x10yu88sw
merge into sys.wri$_index_usage iu us
v_end_cpu_tm PLS_INTEGER;
ing dual on (
iu.obj# = :objn) when mat
ched then update
v_total_cpu_tm PLS_INTEGER;

	 139	      139      3.10 3dbzmtf9ahvzt

merge /* KSXM:OPTIM_DML_INF */ into sys.mon_mods_all$ m using
 dual on (m.obj#
 = :objn and (:pobjn = 0
v_do_sleeps BOOLEAN := FALSE;
 or m.obj# = :pobjn

	 133	      133      2.97 fn5s5p6hr6702
v_loop_control BOOLEAN := FALSE;
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)

v_update_quota BOOLEAN := FALSE;
	 112	      112      2.50 f80h0xb1qvbsk
SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual

v_select_only_workload BOOLEAN := FALSE;
	  94	       94      2.10 5u7g54s63p4ts
select toid from type$ where package_obj#=:1 and typ_name=:2

v_update_only_workload BOOLEAN := FALSE;
	  94	       94      2.10 f7xnvp44nukp7
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin
v_do_update BOOLEAN := FALSE;
_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
,:bind3,:step_id)

v_do_hot_schema BOOLEAN := FALSE;
	  60	       60      1.34 grwydz59pu6mc
select text from view$ where rowid=:1

v_stop_immediate BOOLEAN := FALSE;
	  48	       48      1.07 bxpcry2tpc217
select /*+ opt_param('parallel_execution_enabled',
 'false') EXEC_FROM_DBMS_XPLAN */ * from gv$all_sql_plan where 1=0
v_sharing_schema BOOLEAN := FALSE;

			  ------------------------------------------------------

v_seed VARCHAR2(128);

SQL ordered by Sharable Memory		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
v_home_schema_str VARCHAR2(80);
-> Only Statements with Sharable Memory greater than 1048576 are displayed

Sharable Mem (b)  Executions   % Total	  SQL Id
v_scratch VARCHAR2(200) ;
---------------- ------------ -------- -------------
      13,219,809	   12	  0.59 9yv5dwv8k0awg

WITH MONITOR_DATA AS (SELECT INST_ID, KEY, NVL2(PX_QCSID, NULL, STATUS) STATUS,
FIRST_REFRESH_TIME, LAST_REFRESH_TIME, REFRESH_COUNT, PROCESS_NAME, SID, SQL_ID,
v_cpu_pct NUMBER(6, 3);
 SQL_EXEC_START, SQL_EXEC_ID, DBOP_NAME, DBOP_EXEC_ID, SQL_PLAN_HASH_VALUE, SQL_
FULL_PLAN_HASH_VALUE, SESSION_SERIAL#, SQL_TEXT, PX_SERVER#, PX_SERVER_GROUP, PX

v_my_serial NUMBER(16);
       5,148,639   13,530,723	  0.23 bhdvtsvjhgvrh
Module: SQL*Plus

SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

       4,172,668	   12	  0.19 atwuyuvqkf27w
BEGIN
SELECT /*+ OPT_PARAM('_fix_control' '16391176:1') */ GROUP_TYPE, BUCKET_START, B
UCKET_END, TM_GROUP_TYPE, TM_BUCKET_START, TM_BUCKET_END, SUM(TM_CPU_FIRST_BUCKE

T_VALUE) TM_CPU_FIRST_BUCKET_VALUE, SUM(TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDD
LE_BUCKETS_VALUE, SUM(TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE, SUM(TM

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
       4,141,080	  N/A	  0.19 akay050h1s6c4

			  ------------------------------------------------------
EXECUTE IMMEDIATE v_home_schema_str;


SQL ordered by Version Count		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

-> Only Statements with Version Count greater than 20 are displayed


 Version
  Count   Executions	 SQL Id
-------- ------------ -------------
IF ( v_hot_schema_modulus != 0 ) THEN
     256	  N/A akay050h1s6c4

     176   13,530,723 bhdvtsvjhgvrh
	v_do_hot_schema := TRUE;
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

END IF;
			  ------------------------------------------------------



SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
IF ( v_sleep_modulus != 0 )	  THEN
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
	v_do_sleeps := TRUE;
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	 55,496
END IF;
-> Captured SQL account for   86.5% of Total


       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
IF ( v_max_loop_iterations &gt; 0 )  THEN
-------------- ------------ ------ ---------- ------ ------ ------ -------------
	v_loop_control := TRUE ;
      47,950.7	 13,530,723   86.4  116,360.5	41.2	4.5   55.7 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )
END IF;

	 623.6		  2    1.1	974.8	64.0	1.7   35.6 3dazjp5vng515
Module: SQL*Plus

DECLARE v_default_schema_number PLS_INTEGER := '185'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
IF ( v_update_pct = 0 ) 	  THEN
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	v_select_only_workload := TRUE;
	 622.3		  2    1.1	977.5	63.7	1.7   35.9 9d1h2t7jhjzb0
Module: SQL*Plus
END IF;
DECLARE v_default_schema_number PLS_INTEGER := '18'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

IF ( v_update_pct = 100 )	  THEN
	 617.4		  2    1.1	975.6	63.3	1.7   36.2 5v778mm0ddnmm
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '221'; v_update_pct PLS_INTEGER :
	v_update_only_workload := TRUE;
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
END IF;
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 615.8		  2    1.1	977.0	63.0	1.7   36.3 2jbx2sk2bynuw

Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '33'; v_update_pct PLS_INTEGER :=
IF ( v_scan_query_pct = 0 ) 	THEN
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
	v_random_workload_only := TRUE;

	 614.1		  2    1.1	975.7	62.9	1.7   36.5 1ckk5cxbvfp5b
Module: SQL*Plus
END IF;
DECLARE v_default_schema_number PLS_INTEGER := '55'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

IF ( v_scan_query_pct = 100 ) 	THEN
	 611.3		  2    1.1	974.9	62.7	1.6   37.0 6upw6ujrb22ua
Module: SQL*Plus
	v_scan_workload_only := TRUE;
DECLARE v_default_schema_number PLS_INTEGER := '105'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
END IF;
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h


	 610.0		  2    1.1	975.5	62.5	1.7   37.1 br9195pb68r6p
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
v_seconds_to_run := v_seconds_to_run * 100 ;
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_

stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	 608.5		  2    1.1	977.1	62.3	1.7   37.2 7j116g127a7n9
Module: SQL*Plus
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
DECLARE v_default_schema_number PLS_INTEGER := '92'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');

SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-- DBMS_RANDOM.seed (val =&gt; v_seed);
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time

-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	 55,496
v_begin_time := DBMS_UTILITY.GET_TIME();
-> Captured SQL account for   86.5% of Total

       Cluster			      Elapsed
v_now := v_begin_time ;
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

-------------- ------------ ------ ---------- ------ ------ ------ -------------
----------------------------------------------------------------------------------------------------------------------
	 607.1		  2    1.1	976.4	62.2	1.7   37.4 0f9fdb27bux51
Module: SQL*Plus
-- The following WHILE loop is the master work loop control
DECLARE v_default_schema_number PLS_INTEGER := '70'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
----------------------------------------------------------------------------------------------------------------------
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	 604.1		  2    1.1	975.6	61.9	1.7   38.0 91uw3n02c1mc0
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '166'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
	 603.3		  2    1.1	975.0	61.9	1.9   37.6 4ka23y2t2bggx
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '61'; v_update_pct PLS_INTEGER :=
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );

	 595.8		  2    1.1	976.2	61.0	1.6   38.5 fy5wc7anwa0yh
Module: SQL*Plus
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
DECLARE v_default_schema_number PLS_INTEGER := '154'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
			DBMS_LOCK.SLEEP(v_num_tmp);
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 592.3		  2    1.1	974.9	60.8	1.9   38.7 1fbzc0qr5fpkp
		END IF;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '106'; v_update_pct PLS_INTEGER :
	END IF;
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h


	 591.4		  2    1.1	975.8	60.6	1.7   39.0 2v9xhm604zr9r
Module: SQL*Plus
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
DECLARE v_default_schema_number PLS_INTEGER := '86'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	 586.2		  2    1.1	975.5	60.1	1.8   39.5 4asr6fcfymm3n
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '101'; v_update_pct PLS_INTEGER :
			v_sharing_schema := TRUE ;
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
		ELSE

	 584.9		  2    1.1	975.7	59.9	1.7   39.6 55qsa2qh8h7r3
Module: SQL*Plus
			IF ( v_sharing_schema = TRUE ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '191'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
				EXECUTE IMMEDIATE v_home_schema_str;
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 582.7		  2    1.0	975.5	59.7	1.7   39.8 7vb6ktx6wbjj7
				v_sharing_schema := FALSE;
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '116'; v_update_pct PLS_INTEGER :
			END IF;
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
		END IF;
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
	END IF;

-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	 55,496
	-- Choose the random block. The v_do_hotspot handler that follows can override.
-> Captured SQL account for   86.5% of Total

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h


	 580.8		  2    1.0	975.5	59.5	1.7   39.9 dayqkm9pjdtv5
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '184'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
	 578.9		  2    1.0	978.6	59.2	1.8   40.3 0fkurntnzjbs2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	 566.0		  2    1.0	976.1	58.0	1.7   41.5 bx7t0n3f5rv2v
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '62'; v_update_pct PLS_INTEGER :=
	END IF;
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_

stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	 558.1		  2    1.0	975.8	57.2	1.7   42.3 00u1cz9td3zd9
Module: SQL*Plus
----------------------------------------------------------------------------------------------------------------------
DECLARE v_default_schema_number PLS_INTEGER := '124'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	  11.3		 14    0.0	 16.4	69.1	2.2   22.0 8fgdzmkchnn1a
INSERT /*+ APPEND LEADING(@"SEL$F5BB74E1" "H"@"SEL$2" "A"@"SEL$1") USE_NL(@"SE
----------------------------------------------------------------------------------------------------------------------
L$F5BB74E1" "A"@"SEL$1") */ INTO WRH$_ACTIVE_SESSION_HISTORY ( snap_id
, dbid, instance_number , sample_id, sample_time,sample_time_utc, usecs_per_row

, session_id, session_serial#, session_type , flags , user_id , sql_id, sql_chil

	   7.8		 34    0.0	  8.7	89.4	 .5    6.8 0kkhhb2w93cx0
	IF  ( v_select_only_workload = TRUE ) THEN
update seg$ set type#=:4,blocks=:5,extents=:6,minexts=:7,maxexts=:8,extsize=:9,e
xtpct=:10,user#=:11,iniexts=:12,lists=decode(:13, 65535, NULL, :13),groups=decod
e(:14, 65535, NULL, :14), cachehint=:15, hwmincr=:16, spare1=DECODE(:17,0,NULL,:
		-- handle case where user specified zero pct updates (a SELECT-only workload)
17),scanhint=:18, bitmapranges=:19 where ts#=:1 and file#=:2 and block#=:3

	   2.6		 22    0.0	  3.1	84.1	 .3   15.8 gjaap3w3qbf8c
		v_do_update := FALSE;
select count(*) from ilmobj$ where rownum = 1

	   2.0		 77    0.0	  2.2	89.8	 .6    9.7 04kug40zbu4dm
		v_update_quota := TRUE ;
select policy#, action# from aud_object_opt$ where object# = :1 and type = 2

	   1.5		 19    0.0	  1.8	83.9	 .9   15.6 8swypbbr0m372
	ELSE
select order#,columns,types from access$ where d_obj#=:1

	   1.2	      1,351    0.0	  1.5	75.2   12.1   15.0 f3ww8rgva3hrs
		IF ( v_update_only_workload = TRUE ) THEN
update /* KSXM:FLUSH COL */ sys.col_usage$ set equality_preds
 = equality_preds + decode(bitand(:flag,1),0,0,1), equijoin_preds = equ
ijoin_preds + decode(bitand(:flag,2),0,0,1), nonequijoin_preds = nonequijoi
			-- handle case where user specified 100% updates
n_preds + decode(bitand(:flag,4),0,0,1), range_preds = range_preds

	   1.1		 16    0.0	  1.5	75.3	1.0   24.3 9zbjgq87hy6uv
			v_do_update := TRUE;
select t.ts#,t.file#,t.block#,nvl(t.bobj#,0),nvl(t.tab#,0),t.intcols,nvl(t.cluco

SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
			v_update_quota := FALSE;
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
		ELSE
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
-> Total Cluster Wait Time (s): 	 55,496
-> Captured SQL account for   86.5% of Total

       Cluster			      Elapsed
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
			IF ( v_update_quota = FALSE ) THEN
ls,0),t.flags,t.pctfree$,t.pctused$,t.initrans,t.maxtrans,t.rowcnt,t.blkcnt,t.em
pcnt,t.avgspc,t.chncnt,t.avgrln,t.analyzetime,t.samplesize,t.cols,t.property,nvl
(t.degree,1),nvl(t.instances,1),t.avgspc_flb,t.flbcnt,t.kernelcols,nvl(t.trigfla
				-- Handle case where user has set UPDATE_PCT to a valid value

	   1.1		 44    0.0	  1.4	78.0	1.7   20.8 g0t052az3rx44
select name,intcol#,segcol#,type#,length,nvl(precision#,0),decode(type#,2,nvl(sc
				--
ale,-127/*MAXSB1MINAL*/),178,scale,179,scale,180,scale,181,scale,182,scale,183,s
cale,231,scale,0),null$,fixedstorage,nvl(deflength,0),default$,rowid,col#,proper
ty, nvl(charsetid,0),nvl(charsetform,0),spare1,spare2,nvl(spare3,0), nvl(evaledi
				-- We are doing updates during this run and quota has not been met yet

	   1.0		  1    0.0	  1.7	59.4	3.5   20.2 fxh7dn0mbs5cx
				-- We still vacillate until update quota has been met
 WITH ash as (SELECT ash.event_id, sum(decode(ash.session_type, 1, 1, 0)) as c
nt_fg, count(*) as cnt_total FROM WRH$_ACTIVE_SESSION_HISTORY ash WHERE ash

.dbid = :dbid AND ash.snap_id > :bid AND ash.snap_id <= :eid AND ash.wait_tim
e = 0 GROUP BY ash.event_id ), evts as (SELECT event_id, sum(w_cnt) as w_cnt

				IF ( MOD(v_random_block,  2) = 0 ) THEN
	   1.0		139    0.0	  1.0	96.5	3.0	.6 3dbzmtf9ahvzt
merge /* KSXM:OPTIM_DML_INF */ into sys.mon_mods_all$ m using
 dual on (m.obj#
					v_do_update := TRUE;
 = :objn and (:pobjn = 0
 or m.obj# = :pobjn

	    .6		  1    0.0	491.5	 0.1	3.7   98.5 babvt2tsbymy9
				ELSE
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '69'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
					v_do_update := FALSE;
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

				END IF;
	    .6		  1    0.0	  0.9	69.3	5.8   25.3 6wm3n4d7bnddg
 SELECT source, (case when time_secs < 1 then 1 else time_secs end) as ti
me_secs, operation FROM ( SELECT 1 as source, trunc(
			ELSE
(sysdate - cast(ll.log_date as date)) * 86400) as time_secs,
 decode(ll.operation, 'OPEN', 0

	    .5		  2    0.0	973.2	 0.0	3.8   98.5 5b5dam6wbmycc
				-- UPDATE quota has been filled,  force drain some SELECTs
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '79'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
				v_do_update := FALSE;
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

			END IF;
	    .4		 19    0.0	  1.6	25.3	2.4   73.5 3un99a0zwp4vd
select owner#,name,namespace,remoteowner,linkname,p_timestamp,p_obj#, nvl(proper
ty,0),subname,type#,flags,d_attrs from dependency$ d, obj$ o where d_obj#=:1 and
		END IF;
 p_obj#=obj#(+) order by order#

	    .4		 39    0.0	  0.6	59.6	1.7   39.2 6wvzvgvg6qsyb
	END IF;
INSERT INTO wri$_adv_findings (id, task_id, type, parent, obj_id, impact_msg_id,
 impact_val, msg_id, more_info_id, name_msg_code, flags, exec_name) VALUES (:1,
:2, :3, :4, :5, :6, :7,:8, :9, :10, :11, :12)


	    .3		 10    0.0	  0.4	85.5	1.5   14.0 b1wc53ddd6h3p
select audit$,options from procedure$ where obj#=:1

----------------------------------------------------------------------------------------------------------------------
	    .2		 35    0.0	  0.5	44.5	3.7   53.5 42mkua34ay6bc
INSERT INTO wri$_adv_addm_fdg ( TASK_ID, FINDING_ID, RULE_ID, ADDM_FDG_ID, ADDM_
SEQ, DATABASE_TIME, ACTIVE_SESSIONS, PERC_ACTIVE_SESS, IS_AGGREGATE, METER_L
-- The type of SQL is now determined...execute it in the following section
EVEL, QUERY_TYPE, QUERY_IS_APPROX, QUERY_ARGS) VALUES ( :tid, :kea_id, :rid, :
fdg_id, :keh_id, :dbt, round(:dbt / (1000000 * :sint) , 2), ro

----------------------------------------------------------------------------------------------------------------------
SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time

-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
	IF ( v_do_update != TRUE ) THEN
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	 55,496
-> Captured SQL account for   86.5% of Total
		--

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
		-- Do a SELECT statement
-------------- ------------ ------ ---------- ------ ------ ------ -------------

		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
	    .2		 94    0.0	  0.5	34.7	6.0   61.9 f7xnvp44nukp7
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin
_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
			v_do_scan_query := FALSE;
,:bind3,:step_id)

	    .2		214    0.0	  1.6	11.7	3.8   85.1 5cu0x10yu88sw
merge into sys.wri$_index_usage iu us
			v_scan_query_quota := TRUE ;
ing dual on (
iu.obj# = :objn) when mat
ched then update

		ELSE
	    .2		 72    0.0	  0.9	20.6	4.2   77.5 acmvv4fhdc9zh
select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spar
e2, spare3, signature, spare7, spare8, spare9, nvl(dflcollid, 16382), creappid,
			IF ( v_scan_workload_only = TRUE ) THEN
creverid, modappid, modverid, crepatchid, modpatchid from obj$ where owner#=:1 a
nd name=:2 and namespace=:3 and remoteowner is null and linkname is null and sub

				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
	    .2		 31    0.0	  0.6	28.1	6.4   66.7 121ffmrc95v7g
select i.obj#,i.ts#,i.file#,i.block#,i.intcols,i.type#,i.flags,i.property,i.pctf
ree$,i.initrans,i.maxtrans,i.blevel,i.leafcnt,i.distkey,i.lblkkey,i.dblkkey,i.cl
				v_do_scan_query := TRUE;
ufac,i.cols,i.analyzetime,i.samplesize,i.dataobj#,nvl(i.degree,1),nvl(i.instance
s,1),i.rowcnt,mod(i.pctthres$,256),i.indmethod#,i.trunccnt,nvl(c.unicols,0),nvl(

				v_scan_query_quota := FALSE;
	    .2		349    0.0	  1.2	13.4	7.1   72.6 0gx3b09qrx9f5
select obj#,index# from oid$ where user#=:1 and oid$=:2

			ELSE
	    .1		133    0.0	  0.5	27.2	5.4   68.4 fn5s5p6hr6702
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)

				IF ( v_scan_query_quota = FALSE ) THEN
	    .1		  2    0.0	973.4	 0.0	3.8   98.5 7mzdtp0dvu09c
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '66'; v_update_pct PLS_INTEGER :=
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN

	    .1		  2    0.0	972.7	 0.0	3.8   98.6 cmg650ct9w552
Module: SQL*Plus
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
DECLARE v_default_schema_number PLS_INTEGER := '187'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
						v_do_scan_query := TRUE;
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	    .0		 13    0.0	  1.0	 3.6	2.8   95.2 03guhbfpak0w7
					ELSE
select /*+ index(idl_ub1$ i_idl_ub11) */ piece#,length,piece from idl_ub1$ where
 obj#=:1 and part=:2 and version=:3 order by piece#

	    .0		 13    0.0	  0.6	 3.2	4.5   95.0 a3jpjzh7mtwwp
						v_do_scan_query := FALSE;
select /*+ index(idl_ub2$ i_idl_ub21) */ piece#,length,piece from idl_ub2$ where
 obj#=:1 and part=:2 and version=:3 order by piece#

					END IF;
	    .0		 45    0.0	  0.1	33.0   12.3   58.6 5n1fs4m2n2y0r
select pos#,intcol#,col#,spare1,bo#,spare2,spare3 from icol$ where obj#=:1

				ELSE
	    .0		 18    0.0	  0.0	43.0   12.0   48.3 6y55dxn24t86q
select obj#, intcol#, ts#, file#, block#, property from lob$ where lobj#=:1

	    .0		  1    0.0	  0.3	 5.3   18.8   77.3 61tn3mam0vq0b
					-- Scan quota has been filled,	force drain some random access SELECTS

SQL ordered by Cluster Wait Time	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
					v_do_scan_query := FALSE;
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
				END IF;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
			END IF;
-> Total Cluster Wait Time (s): 	 55,496
-> Captured SQL account for   86.5% of Total

       Cluster			      Elapsed
		END IF;
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id

-------------- ------------ ------ ---------- ------ ------ ------ -------------
 SELECT source, (case when time_secs < 1 then 1 else time_secs end) as ti
me_secs, operation FROM ( SELECT 1 as source, trunc(

(sysdate - cast(ll.log_date as date)) * 86400) as time_secs,
 decode(ll.operation, 'OPEN', 0

		IF ( v_do_scan_query != TRUE ) THEN
	    .0		 14    0.0	  0.5	 2.9	1.9   96.3 asvzxj61dc5vs
select timestamp, flags from fixed_obj$ where obj#=:1

	    .0		112    0.0	  0.5	 3.1	6.9   46.3 f80h0xb1qvbsk
			SELECT COUNT(c2) INTO v_rowcnt
SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual

	    .0		 13    0.0	  0.3	 5.1	4.4   93.3 fh5ufah919kun
			FROM cf1
select /*+ index(idl_sb4$ i_idl_sb41) */ piece#,length,piece from idl_sb4$ where
 obj#=:1 and part=:2 and version=:3 order by piece#

	    .0		  5    0.0	  0.1	11.8	8.8   83.4 9fjf75a1s4y19
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
select procedure#,procedurename,properties,itypeobj#, properties2 from procedure
info$ where obj#=:1 order by procedurename desc, overload# desc


	    .0		529    0.0	  0.1	 9.5   23.1   71.6 87gaftwrm2h68
select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$
o where o.obj#=:1

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
	    .0		 12    0.0	  8.8	 0.1   77.5   16.3 9yv5dwv8k0awg
WITH MONITOR_DATA AS (SELECT INST_ID, KEY, NVL2(PX_QCSID, NULL, STATUS) STATUS,
FIRST_REFRESH_TIME, LAST_REFRESH_TIME, REFRESH_COUNT, PROCESS_NAME, SID, SQL_ID,
		ELSE
 SQL_EXEC_START, SQL_EXEC_ID, DBOP_NAME, DBOP_EXEC_ID, SQL_PLAN_HASH_VALUE, SQL_
FULL_PLAN_HASH_VALUE, SESSION_SERIAL#, SQL_TEXT, PX_SERVER#, PX_SERVER_GROUP, PX

			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
	    .0		 30    0.0	  0.6	 1.7   15.1   67.7 49s332uhbnsma
 declare vsn varchar2(20); begin vsn :=
 dbms_rcvman.getPackageVersion; :pkg_vsn:pkg_vsn_i := vsn;

 if vsn is not null then :pkg_vsnub4 :=
 to_number(substr(vsn,1,2) || substr(vsn,4,2) || s

	    .0		 25    0.0	  0.2	 4.5	3.6   93.6 gx4mv66pvj3xz
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
select con#,type#,condlength,intcols,robj#,rcon#,match#,refact,nvl(enabled,0),ro
wid,cols,nvl(defer,0),mtime,nvl(spare1,0),spare2,spare3 from cdef$ where obj#=:1


	    .0		 13    0.0	  0.2	 4.6	5.5   92.9 9tt2m0mpc2qqp
select /*+ index(idl_char$ i_idl_char1) */ piece#,length,piece from idl_char$ wh
ere obj#=:1 and part=:2 and version=:3 order by piece#

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
	    .0		 77    0.0	  0.1	 7.4	7.7   87.3 53saa2zkr6wc3
select intcol#,nvl(pos#,0),col#,nvl(spare1,0) from ccol$ where con#=:1

	    .0		 60    0.0	  0.3	 2.3	3.5   95.5 grwydz59pu6mc
				v_scan_query_quota := TRUE;
select text from view$ where rowid=:1

	    .0		  5    0.0	  0.0	22.3	7.5   74.0 2xgubd6ayhyb1
			END IF;
select max(procedure#) from procedureplsql$ where obj#=:1

			  ------------------------------------------------------

		END IF;

Key Instance Activity Stats		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Ordered by statistic name


Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
db block changes			     39,971	      53.0	   157.4
execute count				 15,393,234	  20,428.0	60,603.3
gc cr block receive time		      1,674	       2.2	     6.6
gc cr blocks received				339	       0.5	     1.3
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
gc current block receive time			870	       1.2	     3.4
gc current blocks received		      1,289	       1.7	     5.1
logons cumulative				 44	       0.1	     0.2
	ELSE
opened cursors cumulative		 15,410,106	  20,450.4	60,669.7
parse count (total)			      4,482	       6.0	    17.7
parse time elapsed			      1,419	       1.9	     5.6
		--
physical reads				 35,572,455	  47,207.4     140,049.0
physical writes 			      3,234	       4.3	    12.7
redo size				  9,732,148	  12,915.3	38,315.5
		-- Do an UPDATE statement
session cursor cache hits		 15,390,940	  20,425.0	60,594.3
session logical reads		      1,249,870,563    1,658,674.0   4,920,750.3
		--
user calls				      1,654	       2.2	     6.5
user commits					254	       0.3	     1.0
workarea executions - optimal		      1,547	       2.1	     6.1

			  ------------------------------------------------------


Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
		v_my_serial := v_my_serial + v_loop_cnt ;
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------

ASSM bg: segment fix monitor			  1	       0.0	     0.0
ASSM cbk:blocks examined		      1,026	       1.4	     4.0
ASSM cbk:blocks marked full			244	       0.3	     1.0
ASSM gsp:L1 bitmaps examined			840	       1.1	     3.3
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
ASSM gsp:L2 bitmap full 			 42	       0.1	     0.2
ASSM gsp:L2 bitmaps examined			341	       0.5	     1.3
ASSM gsp:Search all				 48	       0.1	     0.2
		--
ASSM gsp:Search hint				 17	       0.0	     0.1
ASSM gsp:Search steal				 21	       0.0	     0.1
ASSM gsp:bump HWM				 21	       0.0	     0.1
ASSM gsp:get free block 			782	       1.0	     3.1
		-- Increment count of UPDATES and set UPDATE quota flag if needed
ASSM gsp:get free data block			602	       0.8	     2.4
ASSM gsp:get free index block			180	       0.2	     0.7
ASSM gsp:good hint				645	       0.9	     2.5
ASSM rsv:fill reserve				 14	       0.0	     0.1
		--
ASSM wasted db state change			  2	       0.0	     0.0
Batched IO (bound) vector count 		579	       0.8	     2.3
Batched IO block miss count		 34,487,572	  45,767.7     135,777.8
		v_updates_cnt := v_updates_cnt + 1;
Batched IO buffer defrag count			  0	       0.0	     0.0
Batched IO double miss count		    661,254	     877.5	 2,603.4
Batched IO same unit count			440	       0.6	     1.7

Batched IO single block count		      3,512	       4.7	    13.8
Batched IO slow jump count			  0	       0.0	     0.0
Batched IO vector block count		 34,499,198	  45,783.1     135,823.6
Batched IO vector read count		    551,958	     732.5	 2,173.1
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="2xgubd6ayhyb1"></a>2xgubd6ayhyb1</td><td class='awrc'><pre_sqltext class="awr">select max(procedure#) from procedureplsql$ where obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3b0dw8qugt8u0"></a>3b0dw8qugt8u0</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '1';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
Block Cleanout Optim referenced 		 21	       0.0	     0.1
v_end_time PLS_INTEGER;
CCursor + sql area evicted			207	       0.3	     0.8
CPU used by this session		    788,976	   1,047.0	 3,106.2
v_total_time PLS_INTEGER;
CPU used when call started		    740,989	     983.4	 2,917.3
CR blocks created				453	       0.6	     1.8
v_begin_cpu_tm PLS_INTEGER;
Cached Commit SCN referenced	      1,213,805,450    1,610,812.8   4,778,761.6
Client Advertised Receive Window	      1,694	       2.3	     6.7
v_end_cpu_tm PLS_INTEGER;
Client Advertised Send Window		      1,694	       2.3	     6.7
Client Path Maximum Transmission	    350,900	     465.7	 1,381.5
v_total_cpu_tm PLS_INTEGER;
Client Send Congestion Window		      2,161	       2.9	     8.5

Client Time (usec) Last Ack Rece	    259,054	     343.8	 1,019.9
v_do_sleeps BOOLEAN := FALSE;
Client Time (usec) Last Data Rec		125	       0.2	     0.5
Client Time (usec) Last Data Sen	    268,292	     356.0	 1,056.3
v_loop_control BOOLEAN := FALSE;
Client Time (usec) Round Trip Ti	  1,702,039	   2,258.7	 6,700.9
Client Time (usec) Round Trip Ti	  2,783,716	   3,694.2	10,959.5
v_update_quota BOOLEAN := FALSE;
Client Total Bytes Acked		  3,818,288	   5,067.2	15,032.6
Client Total Bytes Received		  1,479,605	   1,963.6	 5,825.2
Client Total Number of Retransmi		207	       0.3	     0.8
v_select_only_workload BOOLEAN := FALSE;
Commit SCN cached				 62	       0.1	     0.2
DBWR checkpoint buffers written 		  7	       0.0	     0.0
DBWR checkpoints				 56	       0.1	     0.2
DBWR fusion writes				 59	       0.1	     0.2
DBWR object drop buffers written		 48	       0.1	     0.2
DBWR thread checkpoint buffers w		  0	       0.0	     0.0
DBWR transaction table writes			 69	       0.1	     0.3
DBWR undo block writes				594	       0.8	     2.3
DFO trees parallelized				 14	       0.0	     0.1
Effective IO time				  0	       0.0	     0.0
HSC Heap Segment Block Changes		      5,135	       6.8	    20.2
Heap Segment Array Inserts			230	       0.3	     0.9
Heap Segment Array Updates			  4	       0.0	     0.0
Heatmap Blklevel Flush Task Coun		  0	       0.0	     0.0
KTFB alloc req					 29	       0.0	     0.1
KTFB alloc space (block)		 20,054,016	  26,613.2	78,952.8
KTFB alloc time (ms)			  3,829,367	   5,081.9	15,076.3

Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
KTFB apply req					  0	       0.0	     0.0
KTFB apply time (ms)				  0	       0.0	     0.0
KTFB commit req 				  0	       0.0	     0.0
KTFB commit time (ms)				  0	       0.0	     0.0
KTFB free req					  0	       0.0	     0.0
KTFB free space (block) 			  0	       0.0	     0.0
KTFB free time (ms)				  0	       0.0	     0.0
LOB table id lookup cache misses		  0	       0.0	     0.0
PX local messages recv'd			192	       0.3	     0.8
PX local messages sent				192	       0.3	     0.8
PX remote messages recv'd			253	       0.3	     1.0
PX remote messages sent 			793	       1.1	     3.1
Parallel operations not downgrad		 14	       0.0	     0.1
Requests to/from client 			734	       1.0	     2.9
SMON posted for instance recover		  0	       0.0	     0.0
SQL*Net roundtrips to/from clien		493	       0.7	     1.9
TBS Extension: tasks created			  0	       0.0	     0.0
TBS Extension: tasks executed			  0	       0.0	     0.0
active txn count during cleanout		357	       0.5	     1.4
background checkpoints completed		  1	       0.0	     0.0
background checkpoints started			  0	       0.0	     0.0
background timeouts			     10,175	      13.5	    40.1
blocks cleaned out using minact 		151	       0.2	     0.6
buffer is not pinned count	      1,314,957,270    1,745,049.0   5,176,997.1
buffer is pinned count		      1,200,086,931    1,592,607.3   4,724,751.7
bytes received via SQL*Net from 	    241,471	     320.5	   950.7
bytes sent via SQL*Net to client	    130,995	     173.8	   515.7
calls to get snapshot scn: kcmgs	 15,415,869	  20,458.0	60,692.4
calls to kcmgas 			      4,723	       6.3	    18.6
calls to kcmgcs 			     12,317	      16.4	    48.5
cell physical IO interconnect by    291,524,852,736  386,875,813.2 1.1477356E+09
change write time				 27	       0.0	     0.1
cleanout - number of ktugct call	      1,244	       1.7	     4.9
cleanouts and rollbacks - consis		 10	       0.0	     0.0
cleanouts only - consistent read		103	       0.1	     0.4
cluster key scan block gets		      1,191	       1.6	     4.7
cluster key scans				734	       1.0	     2.9
commit batch/immediate performed		  8	       0.0	     0.0
commit batch/immediate requested		  8	       0.0	     0.0
commit cleanout failures: block 		 26	       0.0	     0.1
commit cleanout failures: callba		 16	       0.0	     0.1
commit cleanout failures: cannot		  5	       0.0	     0.0
commit cleanouts			      2,995	       4.0	    11.8
commit cleanouts successfully co	      2,948	       3.9	    11.6
commit immediate performed			  8	       0.0	     0.0
commit immediate requested			  8	       0.0	     0.0
commit txn count during cleanout		298	       0.4	     1.2
consistent changes			      9,226	      12.2	    36.3
consistent gets 		      1,249,812,368    1,658,596.8   4,920,521.1
consistent gets examination		 15,420,549	  20,464.3	60,710.8
consistent gets examination (fas	 15,418,804	  20,461.9	60,704.0
consistent gets from cache	      1,249,812,297    1,658,596.7   4,920,520.9
consistent gets pin		      1,234,391,688    1,638,132.3   4,859,809.8
consistent gets pin (fastpath)	      1,232,685,242    1,635,867.8   4,853,091.5
cursor authentications				176	       0.2	     0.7
cursor reload failures				  7	       0.0	     0.0
data blocks consistent reads - u		 48	       0.1	     0.2
db block changes			     39,971	      53.0	   157.4
db block gets				     48,154	      63.9	   189.6
db block gets direct				896	       1.2	     3.5

Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
db block gets from cache		     47,258	      62.7	   186.1
db block gets from cache (fastpa	     30,327	      40.3	   119.4
deferred (CURRENT) block cleanou	      1,305	       1.7	     5.1
dirty buffers inspected 		      1,694	       2.3	     6.7
enqueue conversions				415	       0.6	     1.6
enqueue releases			     14,938	      19.8	    58.8
enqueue requests			     14,915	      19.8	    58.7
enqueue timeouts				217	       0.3	     0.9
enqueue waits					261	       0.4	     1.0
exchange deadlocks				  0	       0.0	     0.0
execute count				 15,393,234	  20,428.0	60,603.3
fastpath consistent get quota li		  0	       0.0	     0.0
file io service time		      2,287,387,524    3,035,538.5   9,005,462.7
frame signature mismatch			  0	       0.0	     0.0
free buffer inspected			 37,839,283	  50,215.6     148,973.6
free buffer requested			 35,563,517	  47,195.5     140,013.9
gc blocks compressed			      4,509	       6.0	    17.8
gc blocks lost					434	       0.6	     1.7
gc cleanout applied				  4	       0.0	     0.0
gc cleanout saved				  8	       0.0	     0.0
gc cr anti locks created			  0	       0.0	     0.0
gc cr anti locks expanded			 11	       0.0	     0.0
gc cr anti locks shrunk 			 11	       0.0	     0.0
gc cr block build time				 11	       0.0	     0.0
gc cr block flush time				 38	       0.1	     0.2
gc cr block receive time		      1,674	       2.2	     6.6
gc cr blocks built			      1,083	       1.4	     4.3
gc cr blocks flushed				 91	       0.1	     0.4
gc cr blocks received				339	       0.5	     1.3
gc cr blocks served			      1,410	       1.9	     5.6
gc cr bypass requests				 40	       0.1	     0.2
gc cr multiblock grant time		 40,497,346	  53,743.1     159,438.4
gc cr multiblock grants received	 13,121,634	  17,413.4	51,660.0
gc current block flush time			 84	       0.1	     0.3
gc current block pin time			 18	       0.0	     0.1
gc current block receive time			870	       1.2	     3.4
gc current blocks flushed			154	       0.2	     0.6
gc current blocks pinned			 18	       0.0	     0.1
gc current blocks received		      1,289	       1.7	     5.1
gc current blocks served		      4,041	       5.4	    15.9
gc force cr read cr				169	       0.2	     0.7
gc force cr read current			  3	       0.0	     0.0
gc kbytes saved 			     23,695	      31.5	    93.3
gc kbytes sent				     19,913	      26.4	    78.4
gc local grants 			 28,645,406	  38,014.7     112,777.2
gc merge pi bg					 96	       0.1	     0.4
gc merge pi fg					243	       0.3	     1.0
gc no change made				 12	       0.0	     0.1
gc read time waited			      6,664	       8.8	    26.2
gc read waits					819	       1.1	     3.2
gc reader bypass grants 			  6	       0.0	     0.0
gc reader bypass waits				  5	       0.0	     0.0
gc remote grants			  6,879,593	   9,129.8	27,085.0
gc status messages received		      3,709	       4.9	    14.6
gc status messages sent 		      1,464	       1.9	     5.8
gcs affinity lock failures		     93,368	     123.9	   367.6
gcs affinity lock grants		 18,160,162	  24,099.9	71,496.7
gcs anti-locks created				  0	       0.0	     0.0
gcs data block access records		 35,696,349	  47,371.8     140,536.8
gcs messages sent			 24,364,481	  32,333.5	95,923.2

Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
gcs read-mostly lock failures		     10,968	      14.6	    43.2
gcs read-mostly lock grants		  3,636,120	   4,825.4	14,315.4
gcs stats management (SCM) proce		  0	       0.0	     0.0
ges messages sent			     17,455	      23.2	    68.7
global enqueue get time 		      8,849	      11.7	    34.8
global enqueue gets async			  0	       0.0	     0.0
global enqueue gets sync		     46,032	      61.1	   181.2
global enqueue releases 		     49,605	      65.8	   195.3
heap block compress				 63	       0.1	     0.3
hot buffers moved to head of LRU	  7,219,260	   9,580.5	28,422.3
immediate (CR) block cleanout ap		113	       0.2	     0.4
immediate (CURRENT) block cleano		412	       0.6	     1.6
index crx upgrade (positioned)			  0	       0.0	     0.0
index fast full scans (full)			  2	       0.0	     0.0
index fetch by key			      7,338	       9.7	    28.9
index range scans			 15,418,436	  20,461.5	60,702.5
leaf node 90-10 splits				 72	       0.1	     0.3
leaf node splits				168	       0.2	     0.7
lob reads					398	       0.5	     1.6
lob writes				      7,311	       9.7	    28.8
lob writes unaligned			      7,311	       9.7	    28.8
logical read bytes from cache	 1.023884619776E+13 1.35877333E+10 4.0310418E+10
logons cumulative				 44	       0.1	     0.2
max cf enq hold time				139	       0.2	     0.6
messages received			      7,433	       9.9	    29.3
messages sent				      7,433	       9.9	    29.3
min active SCN optimization appl		  0	       0.0	     0.0
no buffer to keep pinned count			  0	       0.0	     0.0
no work - consistent read gets	      1,233,175,292    1,636,518.1   4,855,020.8
non-idle wait count			  3,030,800	   4,022.1	11,932.3
opened cursors cumulative		 15,410,106	  20,450.4	60,669.7
parse count (describe)				 14	       0.0	     0.1
parse count (failures)				  0	       0.0	     0.0
parse count (hard)				513	       0.7	     2.0
parse count (total)			      4,482	       6.0	    17.7
parse time cpu					121	       0.2	     0.5
parse time elapsed			      1,419	       1.9	     5.6
physical read IO requests		 35,569,694	  47,203.7     140,038.2
physical read bytes		    291,409,543,168  386,722,788.5 1.1472817E+09
physical read total IO requests 	 35,568,619	  47,202.3     140,033.9
physical read total bytes	    291,427,581,952  386,746,727.4 1.1473527E+09
physical read total multi block 		 16	       0.0	     0.1
physical reads				 35,572,455	  47,207.4     140,049.0
physical reads cache			 35,572,455	  47,207.4     140,049.0
v_update_only_workload BOOLEAN := FALSE;
physical reads cache prefetch		 33,832,221	  44,898.0     133,197.7
physical reads direct				  0	       0.0	     0.0
physical reads direct (lob)			  0	       0.0	     0.0
v_do_update BOOLEAN := FALSE;
physical reads direct temporary 		  0	       0.0	     0.0
physical reads prefetch warmup			  0	       0.0	     0.0
physical write IO requests		      1,382	       1.8	     5.4
physical write bytes			 26,492,928	  35,158.2     104,302.9
v_do_hot_schema BOOLEAN := FALSE;
physical write total IO requests	      2,994	       4.0	    11.8
physical write total bytes		 44,707,328	  59,330.1     176,013.1
physical write total multi block		 68	       0.1	     0.3
v_stop_immediate BOOLEAN := FALSE;
physical writes 			      3,234	       4.3	    12.7
physical writes direct			      1,160	       1.5	     4.6
physical writes direct (lob)			264	       0.4	     1.0
v_sharing_schema BOOLEAN := FALSE;
physical writes direct temporary		199	       0.3	     0.8
physical writes from cache		      2,074	       2.8	     8.2
physical writes non checkpoint		      3,011	       4.0	    11.9

v_seed VARCHAR2(128);
Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Ordered by statistic name

v_home_schema_str VARCHAR2(80);
Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
pinned buffers inspected		     29,710	      39.4	   117.0
v_scratch VARCHAR2(200) ;
prefetch warmup blocks aged out 		  0	       0.0	     0.0
prefetched blocks aged out befor		  0	       0.0	     0.0
process last non-idle time			747	       1.0	     2.9

recursive calls 			 15,436,316	  20,485.2	60,772.9
recursive cpu usage			    755,287	   1,002.3	 2,973.6
redo KB read					  0	       0.0	     0.0
v_cpu_pct NUMBER(6, 3);
redo blocks checksummed by FG (e	      9,502	      12.6	    37.4
redo blocks written			     20,234	      26.9	    79.7
redo blocks written (group 0)		     19,220	      25.5	    75.7
v_my_serial NUMBER(16);
redo blocks written (group 1)		      1,014	       1.4	     4.0
redo entries				     17,518	      23.3	    69.0
redo ordering marks				  0	       0.0	     0.0

redo size				  9,732,148	  12,915.3	38,315.5
redo size for direct writes		      1,468	       2.0	     5.8
redo subscn max counts				633	       0.8	     2.5
BEGIN
redo synch time 				  0	       0.0	     0.0
redo synch time (usec)			      2,790	       3.7	    11.0
redo synch time overhead (usec) 		 51	       0.1	     0.2

redo synch time overhead count (		  1	       0.0	     0.0
redo synch writes				  3	       0.0	     0.0
redo wastage				    268,616	     356.5	 1,057.5
redo write active strands		      1,131	       1.5	     4.5
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
redo write broadcast ack count			  3	       0.0	     0.0
redo write broadcast ack time		      2,341	       3.1	     9.2
EXECUTE IMMEDIATE v_home_schema_str;
redo write finish time			  5,258,516	   6,978.5	20,702.8
redo write gather time			    164,046	     217.7	   645.9

redo write info find				  1	       0.0	     0.0
redo write schedule time		    173,286	     230.0	   682.2
redo write size count (   4KB)			964	       1.3	     3.8

redo write size count (   8KB)			 67	       0.1	     0.3
redo write size count (  16KB)			 37	       0.1	     0.2
redo write size count (  32KB)			 13	       0.0	     0.1
IF ( v_hot_schema_modulus != 0 ) THEN
redo write size count ( 128KB)			 23	       0.0	     0.1
redo write size count ( 256KB)			 21	       0.0	     0.1
	v_do_hot_schema := TRUE;
redo write size count ( 512KB)			  2	       0.0	     0.0
redo write size count (1024KB)			  3	       0.0	     0.0
redo write time 				530	       0.7	     2.1
END IF;
redo write time (usec)			  5,293,624	   7,025.0	20,841.0
redo write total time			  5,362,175	   7,116.0	21,110.9
redo write worker delay (usec)		     96,305	     127.8	   379.2

redo write worker delay count		      1,130	       1.5	     4.5
redo writes				      1,130	       1.5	     4.5
redo writes (group 0)				895	       1.2	     3.5
redo writes (group 1)				235	       0.3	     0.9
IF ( v_sleep_modulus != 0 )	  THEN
redo writes adaptive all		      1,130	       1.5	     4.5
redo writes adaptive worker		      1,130	       1.5	     4.5
remote Oradebug requests			  1	       0.0	     0.0
	v_do_sleeps := TRUE;
rollback changes - undo records 		  0	       0.0	     0.0
rollbacks only - consistent read		 38	       0.1	     0.2
rows fetched via callback		      3,523	       4.7	    13.9
END IF;
saved cleanouts 				  4	       0.0	     0.0
saved cleanouts successfully com		  4	       0.0	     0.0
securefile allocation bytes		  2,162,688	   2,870.1	 8,514.5

securefile allocation chunks			 88	       0.1	     0.4
securefile bytes non-transformed	  1,836,496	   2,437.2	 7,230.3
securefile direct read bytes			  0	       0.0	     0.0
securefile direct read ops			  0	       0.0	     0.0
IF ( v_max_loop_iterations &gt; 0 )  THEN
securefile direct write bytes		  2,162,688	   2,870.1	 8,514.5
securefile direct write ops			 87	       0.1	     0.3

Instance Activity Stats 		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
	v_loop_control := TRUE ;
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
END IF;
securefile number of non-transfo		 97	       0.1	     0.4
segment cfs allocations 			 34	       0.1	     0.1
segment chunks allocation from d		 87	       0.1	     0.3

segment dispenser allocations			 85	       0.1	     0.3
segment dispenser load empty			 75	       0.1	     0.3
segment dispenser load tasks			 76	       0.1	     0.3
segment prealloc ops				187	       0.3	     0.7
IF ( v_update_pct = 0 ) 	  THEN
segment prealloc tasks				184	       0.2	     0.7
segment prealloc time (ms)		      5,420	       7.2	    21.3
session connect time				804	       1.1	     3.2
	v_select_only_workload := TRUE;
session cursor cache hits		 15,390,940	  20,425.0	60,594.3
session logical reads		      1,249,870,563    1,658,674.0   4,920,750.3
shared hash latch upgrades - no 	  8,175,109	  10,849.0	32,185.5
END IF;
shared hash latch upgrades - wai		191	       0.3	     0.8
shared io pool buffer get succes		 86	       0.1	     0.3
sorts (memory)				      1,306	       1.7	     5.1

sorts (rows)				    154,628	     205.2	   608.8
sql area evicted				182	       0.2	     0.7
sql area purged 				  4	       0.0	     0.0
summed dirty queue length		      1,454	       1.9	     5.7
IF ( v_update_pct = 100 )	  THEN
switch current caused by our pin		380	       0.5	     1.5
switch current to new buffer			403	       0.5	     1.6
	v_update_only_workload := TRUE;
table fetch by rowid		      1,249,893,383    1,658,704.3   4,920,840.1
table fetch continued row			237	       0.3	     0.9
table scan blocks gotten		     12,159	      16.1	    47.9
END IF;
table scan disk non-IMC rows got	    423,970	     562.6	 1,669.2
table scan rows gotten			    423,970	     562.6	 1,669.2

table scans (short tables)			889	       1.2	     3.5
total cf enq hold time			      3,275	       4.4	    12.9
total number of cf enq holders			 87	       0.1	     0.3
IF ( v_scan_query_pct = 0 ) 	THEN
total number of times SMON poste		  0	       0.0	     0.0
transaction lock background gets		  0	       0.0	     0.0
transaction lock foreground requ		  0	       0.0	     0.0
transaction rollbacks				  0	       0.0	     0.0
	v_random_workload_only := TRUE;
transaction tables consistent re		  0	       0.0	     0.0
transaction tables consistent re		  2	       0.0	     0.0
undo change vector size 		  3,367,488	   4,468.9	13,257.8
user calls				      1,654	       2.2	     6.5
END IF;
user commits					254	       0.3	     1.0
user logons cumulative				  1	       0.0	     0.0
user logouts cumulative 			242	       0.3	     1.0

workarea executions - optimal		      1,547	       2.1	     6.1
write clones created in foregrou		  3	       0.0	     0.0
			  ------------------------------------------------------

IF ( v_scan_query_pct = 100 ) 	THEN

Instance Activity Stats - Absolute ValuesDB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Statistics with absolute values (should not be diffed)

	v_scan_workload_only := TRUE;
Statistic			     Begin Value       End Value
-------------------------------- --------------- ---------------
logons current				     409	     166
opened cursors current			     992	      83
END IF;
session cursor cache count		  15,237	  15,326
session pga memory		   2,187,605,520     838,461,704
session pga memory max		   2,459,853,648   1,036,513,256

session uga memory		   1,025,083,552     400,008,056
session uga memory max		   2,717,099,888   3,246,095,000
			  ------------------------------------------------------

v_seconds_to_run := v_seconds_to_run * 100 ;
Instance Activity Stats - Thread ActivityDB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Statistics identified by '(derived)' come from sources other than SYSSTAT

Statistic				      Total  per Hour

-------------------------------- ------------------ ---------
log switches (derived)				  0	  .00
			  ------------------------------------------------------

IOStat by Function summary		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> ordered by (Data Read + Write) desc


		 Reads:  Reqs	 Data	Writes:  Reqs	 Data	 Waits:    Avg
Function Name	   Data per sec per sec    Data per sec per sec   Count    Time
--------------- ------- ------- ------- ------- ------- ------- ------- --------
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
Buffer Cache Re  259.7G 4.5E+04 352.909      0M     0.0      0M    1.6M  19.26ms
Others		    50M     4.3   .066M     14M     0.8   .019M    2394  13.69ms
DBWR		     0M     0.0      0M     12M     1.2   .016M       0
LGWR		     0M     0.0      0M     10M     1.5   .013M    1148   4.40ms
-- DBMS_RANDOM.seed (val =&gt; v_seed);
Direct Writes	     0M     0.0      0M      3M     0.1   .004M       0
TOTAL:		 259.7G 4.5E+04 352.976     39M     3.6   .052M    1.6M  19.24ms
			  ------------------------------------------------------


IOStat by Filetype summary		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
v_begin_time := DBMS_UTILITY.GET_TIME();
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> Small Read and Large Read are average service times
-> Ordered by (Data Read + Write) desc

v_now := v_begin_time ;
		Reads:	Reqs	Data   Writes:	Reqs	Data	  Small    Large
Filetype Name	  Data per sec per sec	  Data per sec per sec	   Read     Read
-------------- ------- ------- ------- ------- ------- ------- -------- --------
v_brick_wall := v_now + v_seconds_to_run ;
Data File	259.4G 4.5E+04 352.545	   17M	   1.3	 .023M	 1.57ms  39.19ms
Control File	   50M	   4.2	 .066M	    8M	   0.6	 .011M	 6.35ms
Log File	    0M	   0.0	    0M	   10M	   1.5	 .013M
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
Temp File	    1M	   0.2	 .001M	    2M	   0.2	 .003M	 4.38ms
TOTAL:		259.5G 4.5E+04 352.612	   37M	   3.6	 .049M	 1.57ms  39.19ms
			  ------------------------------------------------------


IOStat by Function/Filetype summary	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> Ordered by (Data Read + Write) desc for each function
----------------------------------------------------------------------------------------------------------------------

  Reads:  Reqs	  Data	 Writes:  Reqs	  Data	  Waits:      Avg
    Data per sec per sec    Data per sec per sec   Count     Time
 ------- ------- ------- ------- ------- ------- ------- ----------
-- The following WHILE loop is the master work loop control
Buffer Cache Reads
  257.7G 4.5E+04 350.153      0M     0.0      0M    1.1M    14.26ms
 Buffer Cache Reads (Data File)
  257.7G 4.5E+04 350.15M      0M     0.0      0M    1.1M    14.26ms
----------------------------------------------------------------------------------------------------------------------
 Buffer Cache Reads (Temp File)
      2M     0.2   .003M      0M     0.0      0M     156     4.87ms
Others
     49M     4.2   .065M     14M     0.7   .019M    2149     9.90ms
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
 Others (Control File)
     49M     4.2   .065M      8M     0.6   .011M    2141     9.92ms
 Others (Data File)
      0M     0.0      0M      5M     0.0   .007M       8     3.17ms

 Others (Temp File)
      0M     0.0      0M      1M     0.1   .001M       0
 DBWR (Data File)
      0M     0.0      0M     12M     1.1   .016M       0
DBWR
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
      0M     0.0      0M     12M     1.2   .016M       0
 DBWR (Temp File)
      0M     0.0      0M      0M     0.1      0M       0
 LGWR (Log File)
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
      0M     0.0      0M     10M     1.5   .013M       0
LGWR
      0M     0.0      0M     10M     1.5   .013M       0
 Direct Writes (Data File)
      0M     0.0      0M      3M     0.1   .004M       0
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
Direct Writes
      0M     0.0      0M      3M     0.1   .004M       0
TOTAL:
  257.7G 4.5E+04 350.218     39M     3.6   .052M    1.1M    14.25ms
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			  ------------------------------------------------------


Tablespace IO Stats			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

			DBMS_LOCK.SLEEP(v_num_tmp);
		  No data exists for this section of the report.
			  ------------------------------------------------------


File IO Stats				 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
		END IF;

		  No data exists for this section of the report.
			  ------------------------------------------------------


	END IF;
Buffer Pool Statistics			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Standard block size Pools  D: default,  K: keep,  R: recycle
-> Default Pools for other block sizes: 2k, 4k, 8k, 16k, 32k


							    Free   Writ   Buffer
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
     Number of Pool	  Buffer     Physical	 Physical   Buff   Comp     Busy
						v_do_scan_query := TRUE;
P      Buffers Hit%	    Gets	Reads	   Writes   Wait   Wait    Waits
--- ---------- ---- ------------ ------------ ----------- ------ ------ --------
					ELSE
D    1,301,072	 97 1.257768E+09   35,806,879	    2,235      0      0    4,205
			  ------------------------------------------------------
						v_do_scan_query := FALSE;

Checkpoint Activity			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Total Physical Writes:			 3,234
					END IF;

					  Other    Autotune	 Thread
				ELSE
       MTTR    Log Size    Log Ckpt    Settings        Ckpt	   Ckpt
					-- Scan quota has been filled,	force drain some random access SELECTS
     Writes	 Writes      Writes	 Writes      Writes	 Writes
----------- ----------- ----------- ----------- ----------- -----------
					v_do_scan_query := FALSE;
	  0	      0 	  0	      0 	  7	      0
			  ------------------------------------------------------

				END IF;
Instance Recovery Stats 		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> B: Begin Snapshot,  E: End Snapshot

			END IF;
									    Estd
  Targt  Estd					  Log Ckpt Log Ckpt    Opt   RAC
		END IF;
  MTTR	 MTTR Recovery	Actual	 Target   Log Sz   Timeout Interval    Log Avail
   (s)	  (s) Estd IOs RedoBlks RedoBlks RedoBlks RedoBlks RedoBlks  Sz(M)  Time

- ----- ----- -------- -------- -------- -------- -------- -------- ------ -----
B     0     0	   198	   2587 8.49E+07 8.49E+07      N/A	N/A    N/A     0

E     0     0	   528	   5847    20522 8.49E+07    20522	N/A    N/A     0
			  ------------------------------------------------------

		IF ( v_do_scan_query != TRUE ) THEN
MTTR Advisory				     DB/Inst: P60SDB/p60sdb2  Snap: 48

		  No data exists for this section of the report.
			SELECT COUNT(c2) INTO v_rowcnt
			  ------------------------------------------------------

Buffer Pool Advisory			     DB/Inst: P60SDB/p60sdb2  Snap: 48
			FROM cf1
-> Only rows with estimated physical reads >0 are displayed
-> ordered by Block Size, Buffers For Estimate

			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
				    Est
				   Phys      Estimated			Est
    Size for   Size	 Buffers   Read     Phys Reads	   Est Phys %DBtime

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
P    Est (M) Factor  (thousands) Factor    (thousands)	  Read Time for Rds
--- -------- ------ ------------ ------ -------------- ------------ -------
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
D      1,088	 .1	     127   14.6        951,710		  1 1.7E+06
D      2,176	 .2	     254    4.5        293,870		  1 5.2E+05
D      3,264	 .3	     380    1.4 	93,028		  1 1.6E+05
D      4,352	 .4	     507    1.2 	79,777		  1 1.4E+05
D      5,440	 .5	     634    1.2 	76,746		  1 1.3E+05

D      6,528	 .6	     761    1.1 	74,361		  1 1.3E+05
D      7,616	 .7	     887    1.1 	72,117		  1 1.3E+05
D      8,704	 .8	   1,014    1.1 	70,003		  1 1.2E+05
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
D      9,792	 .9	   1,141    1.0 	67,919		  1 1.2E+05
D     10,880	1.0	   1,268    1.0 	65,908		  1 1.2E+05
D     11,168	1.0	   1,301    1.0 	65,380		  1 1.1E+05

D     11,968	1.1	   1,394    1.0 	63,974		  1 1.1E+05
D     13,056	1.2	   1,521    1.0 	62,130		  1 1.1E+05
D     14,144	1.3	   1,648    0.9 	60,369		  1 1.1E+05
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
D     15,232	1.4	   1,775    0.9 	58,692		  1 1.0E+05
D     16,320	1.5	   1,901    0.9 	57,083		  1 1.0E+05
D     17,408	1.6	   2,028    0.8 	55,543		  1 9.7E+04
				v_scan_query_quota := TRUE;
D     18,496	1.7	   2,155    0.8 	54,071		  1 9.4E+04
D     19,584	1.8	   2,282    0.8 	52,663		  1 9.2E+04
			END IF;
D     20,672	1.9	   2,408    0.8 	51,307		  1 9.0E+04
D     21,760	1.9	   2,535    0.8 	49,985		  1 8.7E+04
			  ------------------------------------------------------
		END IF;


PGA Aggr Summary			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

-> PGA cache hit % - percentage of W/A (WorkArea) data processed only in-memory

PGA Cache Hit %   W/A MB Processed  Extra W/A MB Read/Written
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
--------------- ------------------ --------------------------
	  100.0 	       431			    0
			  ------------------------------------------------------
	ELSE

PGA Aggr Target Stats			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
		--
-> B: Begin Snap   E: End Snap (rows dentified with B or E contain data
   which is absolute i.e. not diffed over the interval)
		-- Do an UPDATE statement
-> Auto PGA Target - actual workarea memory target
-> W/A PGA Used    - amount of memory used for all Workareas (manual + auto)
		--
-> %PGA W/A Mem    - percentage of PGA memory allocated to workareas
-> %Auto W/A Mem   - percentage of workarea memory controlled by Auto Mem Mgmt

-> %Man W/A Mem    - percentage of workarea memory under manual control

						%PGA  %Auto   %Man
		v_my_serial := v_my_serial + v_loop_cnt ;
    PGA Aggr   Auto PGA   PGA Mem    W/A PGA	 W/A	W/A    W/A Global Mem
   Target(M)  Target(M)  Alloc(M)    Used(M)	 Mem	Mem    Mem   Bound(K)
- ---------- ---------- ---------- ---------- ------ ------ ------ ----------

B      8,082	  4,008    4,249.7	  0.0	  .0	 .0	.0    827,590
E      8,082	  5,127    2,766.1	  0.0	  .0	 .0	.0    827,590
			  ------------------------------------------------------
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);

PGA Aggr Target Histogram		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Optimal Executions are purely in-memory operations
		--

  Low	  High
Optimal Optimal    Total Execs	Optimal Execs 1-Pass Execs M-Pass Execs
		-- Increment count of UPDATES and set UPDATE quota flag if needed
------- ------- -------------- -------------- ------------ ------------
     2K      4K 	   911		  911		 0	      0
    64K    128K 	   142		  142		 0	      0
		--
   128K    256K 	    68		   68		 0	      0
   256K    512K 	    48		   48		 0	      0
   512K   1024K 	   177		  177		 0	      0
		v_updates_cnt := v_updates_cnt + 1;
     1M      2M 	   197		  197		 0	      0
     2M      4M 	    12		   12		 0	      0

			  ------------------------------------------------------

PGA Memory Advisory			     DB/Inst: P60SDB/p60sdb2  Snap: 48
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
-> When using Auto Memory Mgmt, minimally choose a pga_aggregate_target value
   where Estd PGA Overalloc Count is 0

			v_update_quota := TRUE;
				       Estd Extra    Estd P Estd PGA
PGA Target    Size	     W/A MB   W/A MB Read/    Cache Overallo	Estd
  Est (MB)   Factr	  Processed Written to Disk   Hit %    Count	Time
		END IF;
---------- ------- ---------------- ---------------- ------ -------- -------
     1,010     0.1	    4,559.4	       474.2   91.0	  50 2.4E+07
	END IF ;
     2,021     0.3	    4,559.4	       470.1   91.0	  47 2.4E+07
     4,041     0.5	    4,559.4		 0.0  100.0	   0 2.2E+07
     6,062     0.8	    4,559.4		 0.0  100.0	   0 2.2E+07
----------------------------------------------------------------------------------------------------------------------
     8,082     1.0	    4,559.4		 0.0  100.0	   0 2.2E+07
     9,698     1.2	    4,559.4		 0.0  100.0	   0 2.2E+07
    11,315     1.4	    4,559.4		 0.0  100.0	   0 2.2E+07
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
    12,931     1.6	    4,559.4		 0.0  100.0	   0 2.2E+07
    14,548     1.8	    4,559.4		 0.0  100.0	   0 2.2E+07
    16,164     2.0	    4,559.4		 0.0  100.0	   0 2.2E+07
----------------------------------------------------------------------------------------------------------------------
    24,246     3.0	    4,559.4		 0.0  100.0	   0 2.2E+07
    32,328     4.0	    4,559.4		 0.0  100.0	   0 2.2E+07
    48,492     6.0	    4,559.4		 0.0  100.0	   0 2.2E+07

    64,656     8.0	    4,559.4		 0.0  100.0	   0 2.2E+07
			  ------------------------------------------------------


	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
Shared Pool Advisory			     DB/Inst: P60SDB/p60sdb2  Snap: 48
-> SP: Shared Pool     Est LC: Estimated Library Cache	 Factr: Factor
		--
-> Note there is often a 1:Many correlation between a single logical object
   in the Library Cache, and the physical number of memory objects associated
   with it.  Therefore comparing the number of Lib Cache objects (e.g. in
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
   v$librarycache), with the number of Lib Cache Memory Objects is invalid.

				       Est LC Est LC  Est LC Est LC
		-- so reset flags and counters before continuing
  Shared    SP	 Est LC 		 Time	Time	Load   Load	  Est LC
		--
    Pool  Size	   Size       Est LC	Saved  Saved	Time   Time	 Mem Obj
 Size(M) Factr	    (M)      Mem Obj	  (s)  Factr	 (s)  Factr	Hits (K)
-------- ----- -------- ------------ -------- ------ ------- ------ ------------
		v_update_quota := FALSE;
   2,720   1.0	    132        6,620 2.94E+06	 1.0   3,796	1.0	   3,463
   2,752   1.0	    164        7,620 2.94E+06	 1.0   3,786	1.0	   3,464
		v_updates_cnt := 0;
   2,784   1.0	    195        8,847 2.94E+06	 1.0   3,769	1.0	   3,465
   2,816   1.0	    227       10,147 2.94E+06	 1.0   3,748	1.0	   3,465
   2,848   1.0	    258       12,069 2.94E+06	 1.0   3,742	1.0	   3,465
		v_selects_cnt := 0;
   2,880   1.1	    270       12,652 2.94E+06	 1.0   3,742	1.0	   3,465
   2,912   1.1	    270       12,652 2.94E+06	 1.0   3,742	1.0	   3,465
	END IF;
   2,944   1.1	    270       12,652 2.94E+06	 1.0   3,742	1.0	   3,465
   2,976   1.1	    270       12,652 2.94E+06	 1.0   3,742	1.0	   3,465

   3,008   1.1	    270       12,652 2.94E+06	 1.0   3,742	1.0	   3,465
   3,296   1.2	    270       12,652 2.94E+06	 1.0   3,742	1.0	   3,465
   3,584   1.3	    270       12,652 2.94E+06	 1.0   3,742	1.0	   3,465
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
   3,872   1.4	    270       12,652 2.94E+06	 1.0   3,742	1.0	   3,465
   4,160   1.5	    270       12,652 2.94E+06	 1.0   3,742	1.0	   3,465
   4,448   1.6	    270       12,652 2.94E+06	 1.0   3,742	1.0	   3,465
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
   4,736   1.7	    270       12,652 2.94E+06	 1.0   3,742	1.0	   3,465
   5,024   1.8	    270       12,652 2.94E+06	 1.0   3,742	1.0	   3,465
   5,312   2.0	    270       12,652 2.94E+06	 1.0   3,742	1.0	   3,465
		-- so reset flags and counters
   5,600   2.1	    270       12,652 2.94E+06	 1.0   3,742	1.0	   3,465
			  ------------------------------------------------------

		v_scan_query_quota := FALSE;
SGA Target Advisory			     DB/Inst: P60SDB/p60sdb2  Snap: 48

SGA Target   SGA Size	    Est DB     Est Physical
		v_scan_queries_cnt := 0;
  Size (M)     Factor	  Time (s)	      Reads
---------- ---------- ------------ ----------------
     5,376	  0.4	   695,079	293,868,244
		v_random_access_queries_cnt := 0;
     7,168	  0.5	   339,295	 93,028,639
     8,960	  0.6	   310,466	 76,749,117
    10,752	  0.8	   302,250	 72,113,703
	END IF;
    12,544	  0.9	   294,818	 67,916,333
    14,336	  1.0	   290,318	 65,379,604
    16,128	  1.1	   284,570	 62,130,238

    17,920	  1.3	   278,473	 58,691,271
    19,712	  1.4	   272,899	 55,539,974
    21,504	  1.5	   270,286	 54,068,933
	v_loop_cnt := v_loop_cnt + 1 ;
    23,296	  1.6	   265,380	 51,303,375
    25,088	  1.8	   263,057	 49,982,707
    26,880	  1.9	   263,057	 49,982,707
	v_now := DBMS_UTILITY.GET_TIME();
    28,672	  2.0	   263,057	 49,982,707
			  ------------------------------------------------------


Streams Pool Advisory			     DB/Inst: P60SDB/p60sdb2  Snap: 48

		  No data exists for this section of the report.
			  ------------------------------------------------------

Java Pool Advisory			     DB/Inst: P60SDB/p60sdb2  Snap: 48
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN

		  No data exists for this section of the report.
			  ------------------------------------------------------

		-- If this is a fixed-iteration count test cycle and we've hit the number of
Buffer Wait Statistics			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> ordered by wait time desc, waits desc

		-- iterations then set exit flag
Class			 Waits Total Wait Time (s)  Avg Time (ms)
------------------ ----------- ------------------- --------------
data block		 4,136		       344	       83
		v_stop_immediate := TRUE ;
free list		     6			 3	      495
1st level bmb		     4			 0		0
			  ------------------------------------------------------
	END IF;


Enqueue Activity			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
END LOOP;
-> only enqueues with requests are shown
-> Enqueue stats gathered prior to 10g should not be compared with 10g data

-> ordered by Wait Time desc, Waits desc, Requests desc

Enqueue Type (Request Reason)
v_end_time := v_now ;
------------------------------------------------------------------------------
    Requests	Succ Gets Failed Gets	    Waits  Wt Time (s) Av Wt Time(ms)
------------ ------------ ----------- ----------- ------------ --------------
v_now := DBMS_UTILITY.GET_TIME();
TX-Transaction (row lock contention)
	   1		1	    0		1	    67	    66,977.00
TM-DML
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
       2,140	    2,140	    0	       15	     1		35.80
CO-KTUCLO Master Slave enq (master slave det)
	  12		0	   12	       12	     1		43.75

CF-Controlfile Transaction
       1,476	    1,476	    0	       12	     1		43.58
HW-Segment High Water Mark
v_total_time := v_end_time - v_begin_time ;
	 113	      113	    0		9	     1		57.67
RO-Multiple Object Reuse (fast object reuse)
	 368	      368	    0	       95	     0		 4.85
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
WF-AWR Flush
	  28	       26	    2	       10	     0		17.60
PS-PX Process Reservation
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
	 125	      120	    5	       54	     0		  .87
WT-AWR CDB-Wide Table Lock
	  20	       20	    0		5	     0		 2.40
FB-Format Block
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
	  20	       20	    0		9	     0		  .89
TX-Transaction (index contention)
	   2		2	    0		2	     0		 3.00

DW-In memory Dispenser
	 187	       15	  172		3	     0		 1.33
TO-Temp Object
	  69	       69	    0		2	     0		 1.50
END;</pre_sqltext></td></tr>
TA-Instance Undo
	   2		2	    0		2	     0		  .50
MW-MWIN Schedule
	   1		1	    0		1	     0		 1.00
<tr><td scope="row" class='awrc'><a class="awr" name="3dazjp5vng515"></a>3dazjp5vng515</td><td class='awrc'><pre_sqltext class="awr">DECLARE
TD-KTF map table enqueue (KTF dump entries)
	   2		2	    0		1	     0		  .00
JG-Job Scheduler1
v_default_schema_number PLS_INTEGER := '185';
v_update_pct PLS_INTEGER := '0';
       3,003	    3,003	    0		0	     0		  N/A
v_max_loop_iterations PLS_INTEGER := '0';
JG-Job Scheduler1 (queue lock)
       3,003	    3,003	    0		0	     0		  N/A
TX-Transaction
v_seconds_to_run PLS_INTEGER := '600';
       2,122	    2,097	   25		0	     0		  N/A
SJ-KTSJ Slave Task Cancel (Slave Task Cancel)
v_scale PLS_INTEGER := '65536';
	 717	      716	    0		0	     0		  N/A
CU-Cursor
	 428	      428	    0		0	     0		  N/A
JG-Job Scheduler1 (q mem clnup lck)
v_work_unit PLS_INTEGER := '80' ;
	 286	      286	    0		0	     0		  N/A
DD-ASM Local Disk Group
	 239	      239	    0		0	     0		  N/A
v_redo_stress  VARCHAR2(12) := 'LITE';
TT-Tablespace
	 166	      166	    0		0	     0		  N/A
MR-Media Recovery
	 162	      162	    0		0	     0		  N/A
v_hot_schema_modulus PLS_INTEGER := '0';
BU-Buddy Instance Context (recovery set construct)
	  79	       79	    0		0	     0		  N/A
IS-Instance State
v_do_hotspot   VARCHAR(7) := 'FALSE';
	  59	       59	    0		0	     0		  N/A
SE-Session Migration
	  46	       46	    0		0	     0		  N/A
SH-Active Session History Flushing
v_hotspot_mb  NUMBER := '10';
	  17	       17	    0		0	     0		  N/A
DA-Instance DP Array (Slave Process Array)
	  15	       15	    0		0	     0		  N/A
v_hotspot_offset_mb NUMBER := '0';

Enqueue Activity			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> only enqueues with requests are shown
v_hotspot_modulus  PLS_INTEGER := '0';
-> Enqueue stats gathered prior to 10g should not be compared with 10g data
-> ordered by Wait Time desc, Waits desc, Requests desc

Enqueue Type (Request Reason)

------------------------------------------------------------------------------
    Requests	Succ Gets Failed Gets	    Waits  Wt Time (s) Av Wt Time(ms)
------------ ------------ ----------- ----------- ------------ --------------
v_sleep_modulus PLS_INTEGER := '0';
PW-Buffer Cache PreWarm (flush prewarm buffers)
v_sleep_min NUMBER := '.1';
	  15	       15	    0		0	     0		  N/A
XR-Quiesce / Force Logging (database force logging)
	  15	       15	    0		0	     0		  N/A
v_sleep_max NUMBER := '.5';
AF-Advisor Framework (task serialization)
	  13	       13	    0		0	     0		  N/A
SQ-Sequence Cache
	  13	       13	    0		0	     0		  N/A
v_scan_query_pct PLS_INTEGER := '0';
TH-Threshold Chain (metric threshold evaluation)
	  12	       12	    0		0	     0		  N/A
PR-Process Startup
	   6		6	    0		0	     0		  N/A
v_obfuscate VARCHAR(5)	:= 'FALSE';
AE-Edition Lock (lock)
	   5		5	    0		0	     0		  N/A
IT-In-Mem Temp Table Meta Creation

	   4		4	    0		0	     0		  N/A
PV-KSV slave startup (syncstart)
	   4		4	    0		0	     0		  N/A
DR-Distributed Recovery

	   1		1	    0		0	     0		  N/A
FP-File Object (global fob contention)
	   1		1	    0		0	     0		  N/A
RS-Reclaimable Space (read alert level)
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
	   1		1	    0		0	     0		  N/A
XL-ASM Extent Fault Lock (fault extent map)
	   1		1	    0		0	     0		  N/A
			  ------------------------------------------------------
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;


Undo Segment Summary			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

-> Min/Max TR (mins) - Min and Max Tuned Retention (minutes)
-> STO - Snapshot Too Old count,  OOS - Out of Space count
-> Undo segment block stats:
v_num_tmp NUMBER := 0;
-> uS - unexpired Stolen,   uR - unexpired Released,   uU - unexpired reUsed
-> eS - expired   Stolen,   eR - expired   Released,   eU - expired   reUsed


Undo   Num Undo       Number of  Max Qry   Max Tx Min/Max   STO/     uS/uR/uU/
 TS# Blocks (K)    Transactions  Len (s) Concurcy TR (mins) OOS      eS/eR/eU
---- ---------- --------------- -------- -------- --------- ----- --------------
v_loop_cnt PLS_INTEGER := 0;
   5	     .5 	    520      324	4 19.8/19.8 0/0   0/0/0/0/0/0
			  ------------------------------------------------------

Undo Segment Stats			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
v_rowcnt PLS_INTEGER := 0;
-> Most recent 35 Undostat rows, ordered by Time desc

		Num Undo    Number of Max Qry  Max Tx Tun Ret STO/    uS/uR/uU/
v_updates_cnt PLS_INTEGER := 0;
End Time	  Blocks Transactions Len (s)	Concy  (mins) OOS     eS/eR/eU
------------ ----------- ------------ ------- ------- ------- ----- ------------
20-Feb 21:41	     537	  520	  324	    4	   20 0/0   0/0/0/0/0/0
v_selects_cnt PLS_INTEGER := 0;
			  ------------------------------------------------------


Latch Activity				 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
v_random_access_queries_cnt PLS_INTEGER := 0;
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
v_scan_queries_cnt PLS_INTEGER := 0;
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------

AQ Background: interrupt	      1    0.0		   0	       26    0.0
AQ Coord jobx_kwsbgsgn l	     24    0.0		   0		0    N/A
AQ Message drive state o	      1    0.0		   0		0    N/A
v_do_scan_query BOOLEAN :=FALSE;
AQ Sharded master pool l	     24    0.0		   0		0    N/A
AQ deq hash table latch 	      1    0.0		   0		0    N/A
ASM Keyed state latch		    260    0.8	  0.5	   0		0    N/A
v_scan_query_quota  BOOLEAN := FALSE;
ASM allocation			 43,013    0.0		   0		0    N/A
ASM connection state lat	  3,253    0.0		   0		0    N/A
v_scan_workload_only BOOLEAN := FALSE;
ASM db client latch		    682    0.0		   0		0    N/A
ASM map headers 		      4    0.0		   0		0    N/A
ASM map load waiting lis	      1    0.0		   0		0    N/A
v_random_workload_only BOOLEAN := FALSE;
ASM map operation freeli	 18,422    5.1	  0.0	   0		0    N/A
ASM map operation hash t     71,907,065    0.0	  0.1	   0		0    N/A
ASM network background l	  3,800    0.0		   0		0    N/A

ASM network state latch 	     18    0.0		   0		0    N/A
ASM remote client latch 	     11    0.0		   0		0    N/A
AWR Alerted Metric Eleme	 10,761    0.0		   0		0    N/A

Autotask management		     13    0.0		   0		0    N/A
Change Notification Hash	    327    0.0		   0		0    N/A
Column stats entry latch	      1    0.0		   0		0    N/A
v_random_block PLS_INTEGER := 1;
Consistent RBA			  1,133    0.0		   0		0    N/A
DML lock allocation		  4,364    0.0		   0		0    N/A
Event Group Locks		     52    0.0		   0		0    N/A
v_tmp PLS_INTEGER;
FIB s.o chain latch		      1    0.0		   0		0    N/A
FOB consolidated s.o lis	      1    0.0		   0		0    N/A
File State Object Pool P	      1    0.0		   0		0    N/A
v_now PLS_INTEGER;
GCS logfile block		      1    0.0		   0		0    N/A
GCS logfile write queue 	      1    0.0		   0		0    N/A
Hang Manager wait event 	     49    0.0		   0	    8,713    0.0
v_brick_wall PLS_INTEGER;
I/O Staticstics latch		      1    0.0		   0		0    N/A
ILM Stats Stripe Latch		      1    0.0		   0		0    N/A
ILM Stats main anchor la	    821    0.0		   0		0    N/A

ILM access tracking exte	      1    0.0		   0		0    N/A
ILM activity tracking la	      1    0.0		   0		0    N/A
v_begin_time PLS_INTEGER;
IM Global dictionary lat	      1    0.0		   0		0    N/A
IM Global dictionary que	      1    0.0		   0		0    N/A
IM Global dictionary rw 	      1    0.0		   0		0    N/A
v_end_time PLS_INTEGER;
IM area sb latch		      1    0.0		   0		0    N/A
IM area scb latch		      1    0.0		   0		0    N/A
IM emb latch			      1    0.0		   0		0    N/A
IM seg hdr latch		      1    0.0		   0		0    N/A
v_total_time PLS_INTEGER;
IMFS defer write list		      1    0.0		   0		0    N/A
IMXT hash table latch		      1    0.0		   0		0    N/A
IPC other latch 		      8    0.0		   0		0    N/A
v_begin_cpu_tm PLS_INTEGER;
IPC stats buffer allocat	      1    0.0		   0		0    N/A
In memory undo latch		      1    0.0		   0		0    N/A
JS Sh mem access		    148    0.0		   0		0    N/A
v_end_cpu_tm PLS_INTEGER;
JS broadcast add buf lat	    168    0.0		   0		0    N/A
JS broadcast drop buf la	    168    0.0		   0		0    N/A
JS broadcast load blnc l	    168    0.0		   0		0    N/A
JS mem alloc latch		      2    0.0		   0		0    N/A
v_total_cpu_tm PLS_INTEGER;
JS queue access latch		      3    0.0		   0		0    N/A
JS queue state obj latch	  6,174    0.0		   0		0    N/A
JS slv state obj latch		      1    0.0		   0		0    N/A

KCNIBR - invalid block r	      1    0.0		   0		0    N/A
KDCStatHash latch		      1    0.0		   0		0    N/A
KDFI Buffer Latch		      1    0.0		   0		0    N/A
KDFI Hash Bucket Latch		      1    0.0		   0		0    N/A
v_do_sleeps BOOLEAN := FALSE;
KDFI Hash Elem Latch		      1    0.0		   0		0    N/A
KDMADO action list latch	      1    0.0		   0		0    N/A

v_loop_control BOOLEAN := FALSE;
Latch Activity				 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
v_update_quota BOOLEAN := FALSE;
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
v_select_only_workload BOOLEAN := FALSE;
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
v_update_only_workload BOOLEAN := FALSE;
KDMADO bll latch		      1    0.0		   0		0    N/A
KDMADO latch			      1    0.0		   0		0    N/A
KFC FX Hash Latch		      1    0.0		   0		0    N/A
KFC Hash Latch			      1    0.0		   0		0    N/A
v_do_update BOOLEAN := FALSE;
KFCL LE Freelist		      1    0.0		   0		0    N/A
KFIAS client latch		      1    0.0		   0		0    N/A
KFIAS cluster latch		      1    0.0		   0		0    N/A
KFIAS endpoint latch		      1    0.0		   0		0    N/A
v_do_hot_schema BOOLEAN := FALSE;
KFIAS node latch		      1    0.0		   0		0    N/A
KFIAS process latch		      1    0.0		   0		0    N/A
KFIAS queue latch		      1    0.0		   0		0    N/A
KFK SGA Libload latch		  6,910    0.0		   0		0    N/A
v_stop_immediate BOOLEAN := FALSE;
KFMD SGA			    425    0.0		   0		0    N/A
KGNFS-NFS:SHM structure 	      1    0.0		   0		0    N/A
KGNFS-NFS:SVR LIST		    248    0.0		   0		0    N/A
v_sharing_schema BOOLEAN := FALSE;
KJC message pool KGH cal	      1    0.0		   0		0    N/A
KJC message pool free li      1,958,748    0.8	  0.1	   0	1,163,358    1.1
KJC message pool pending	      1    0.0		   0		0    N/A
v_seed VARCHAR2(128);
KJCT flow control latch       8,664,801    0.0	  0.0	   0		0    N/A
KMG MMAN ready and start	    247    0.0		   0		0    N/A
KSFS OFS ctx level paren	      1    0.0		   0		0    N/A
KSFS OFS req layer paren	      1    0.0		   0		0    N/A
v_home_schema_str VARCHAR2(80);
KSFS OFS sess layer pare	      1    0.0		   0		0    N/A
KSFS Receive and Send Qu	      1    0.0		   0		0    N/A
KSFS id table parent lat	      1    0.0		   0		0    N/A
v_scratch VARCHAR2(200) ;
KSFS ksfs_node latch		      1    0.0		   0		0    N/A
KSFSD name cache parent 	      1    0.0		   0		0    N/A
KSGL LS Segment latch		      1    0.0		   0		0    N/A
KSGL SGA anchor latch		      1    0.0		   0		0    N/A

KSIPC ASPC anchor latch 	      1    0.0		   0		0    N/A
KSIPC SGA allocation par	  1,024    0.5	  0.0	   0		0    N/A
v_cpu_pct NUMBER(6, 3);
KSIPCGSN Hash Table latc	      1    0.0		   0		0    N/A
KSIPCGSN Namespace latch	      1    0.0		   0		0    N/A
KSK PDB IO STAT 		      1    0.0		   0		0    N/A
KSRMA SGA anchor latch		      1    0.0		   0		0    N/A
v_my_serial NUMBER(16);
KSRMF SGA anchor latch		      1    0.0		   0		0    N/A
KSWL SGA anchor latch		      1    0.0		   0		0    N/A
KSXR hang analysis phase	     83    0.0		   0		2    0.0

KSXR hang analysis phase	    360    0.0		   0		0    N/A
KSXR large replies		      6    0.0		   0		0    N/A
KTF sga latch			      4    0.0		   0	      224    0.0
BEGIN
KTILM latch			      1    0.0		   0		0    N/A
KTU in-memory txn table 	      1    0.0		   0		0    N/A

KTURMA ODPSCN latch		      1    0.0		   0		0    N/A
KTURMA SGA allocation pa	      1    0.0		   0		0    N/A
KWQMN job cache list lat	    104    0.0		   0		0    N/A
Latch for NonceHistory		      1    0.0		   0		0    N/A
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
Locator state objects po	      1    0.0		   0		0    N/A
Lost write change tracki	      1    0.0		   0		0    N/A
Lsod array latch		    328    0.0		   0		0    N/A
MGA asr alloc latch		     12    0.0		   0		0    N/A
EXECUTE IMMEDIATE v_home_schema_str;
MGA heap latch			    530   38.7	  2.4	   0		0    N/A
MGA shared context latch	  4,625    6.9	  1.7	   0		0    N/A
MGA shared context root 	    530   45.7	  6.5	   0		0    N/A

MQL Tracking Latch		      0    N/A		   0	       14    0.0
Memory Management Latch 	      0    N/A		   0	      247    0.0
Memory Queue			      1    0.0		   0		0    N/A

IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------
Memory Queue Message Sub	      1    0.0		   0		0    N/A

Memory Queue Message Sub	      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A

	IF  ( v_select_only_workload = TRUE ) THEN
Latch Activity				 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
		-- handle case where user specified zero pct updates (a SELECT-only workload)
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0
		v_do_update := FALSE;

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
		v_update_quota := TRUE ;
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
	ELSE
Memory Queue Message Sub	      1    0.0		   0		0    N/A
Memory Queue Subscriber 	      1    0.0		   0		0    N/A
Message cache latch		      1    0.0		   0		0    N/A
		IF ( v_update_only_workload = TRUE ) THEN
MinActiveScn Latch		     39    0.0		   0		0    N/A
Mutex				      1    0.0		   0		0    N/A
Mutex Stats			      1    0.0		   0		0    N/A
			-- handle case where user specified 100% updates
Nologging Standby SCN Ti	    220    0.0		   0		0    N/A
			v_do_update := TRUE;
			v_update_quota := FALSE;
OS process			  1,786    0.0		   0		0    N/A
		ELSE
OS process allocation		  1,759    0.0		   0		0    N/A
OS process: request allo	    259    0.0		   0		0    N/A
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
PDB Hash Table Latch		      1    0.0		   0		0    N/A
PDB LRU structure		     40    0.0		   0		0    N/A
PL/SQL warning settings 	     44    0.0		   0		0    N/A
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
PX hash array latch		      1    0.0		   0		0    N/A
Parent latch for depende	      1    0.0		   0		0    N/A
			IF ( v_update_quota = FALSE ) THEN
Parent latch for query h	      1    0.0		   0		0    N/A
Parent latch for segment	      1    0.0		   0		0    N/A
QMT				      1    0.0		   0		0    N/A
				-- Handle case where user has set UPDATE_PCT to a valid value
Real-time descriptor lat	 35,118    0.0		   0		0    N/A
Report Request stats lat	     64    0.0		   0		0    N/A
Report Request struct la	     24    0.0		   0		0    N/A
				--
Request holder compeltio	     13    0.0		   0		0    N/A
Retry Ht elm latch		      1    0.0		   0		0    N/A
Retry bkt latch 		      1    0.0		   0		0    N/A
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met
SGA Blackbox latch		      6    0.0		   0		0    N/A
SGA IO buffer pool latch	      6    0.0		   0		6    0.0

SGA Logging Bkt Latch		      1    0.0		   0		0    N/A
SGA Logging Log Latch		 32,869    0.0		   0		0    N/A
SGA blob parent 		      1    0.0		   0		0    N/A
				IF ( MOD(v_random_block,  2) = 0 ) THEN
SGA bucket locks		      1    0.0		   0		0    N/A
SGA heap locks			      1    0.0		   0		0    N/A
SGA pool locks			      1    0.0		   0		0    N/A
					v_do_update := TRUE;
SO private so latch		    704    0.1	  0.0	   0	       24    0.0
SQL memory manager latch	      1    0.0		   0	      246    0.0
				ELSE
SQL memory manager worka	 33,734    0.0		   0		0    N/A
SR Stats Stripe Latch		      1    0.0		   0		0    N/A
Sched IM Job latch		     12    0.0		   0		0    N/A
					v_do_update := FALSE;
Sched InMem Job Cache		      1    0.0		   0		0    N/A
Shared B-Tree			     27    0.0		   0		0    N/A
				END IF;
Streams Generic 		      1    0.0		   0		0    N/A
Subscriber Ht elm latch 	      1    0.0		   0		0    N/A
Testing 			      1    0.0		   0		0    N/A
			ELSE
Token Manager			      1    0.0		   0		0    N/A
Txn Ht elm latch		      1    0.0		   0		0    N/A
Txn bkt latch			      1    0.0		   0		0    N/A
				-- UPDATE quota has been filled,  force drain some SELECTs
UM object latch 		      1    0.0		   0		0    N/A
WCR: sync			      1    0.0		   0		0    N/A
				v_do_update := FALSE;
Write State Object Pool 	      1    0.0		   0		0    N/A
X$KSFQP 			      1    0.0		   0		0    N/A
XDB NFS Security Latch		      1    0.0		   0		0    N/A
			END IF;
XDB unused session pool 	      1    0.0		   0		0    N/A
XDB used session pool		      1    0.0		   0		0    N/A
		END IF;
active checkpoint queue 	 10,230    4.6	  0.0	   0		0    N/A
active service list		  3,974    0.5	  0.0	   0	      777    0.0
archive destination		     26    0.0		   0		0    N/A
	END IF;
begin backup scn array		    110    0.0		   0		0    N/A
buffer pool			      1    0.0		   0		0    N/A

business card			     29    0.0		   0		0    N/A
cache buffer handles		    102    0.0		   0		0    N/A
cache buffers chains	  2,608,602,603    0.0	  0.2	   2   70,930,594    0.0
----------------------------------------------------------------------------------------------------------------------

Latch Activity				 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
-- The type of SQL is now determined...execute it in the following section
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0
----------------------------------------------------------------------------------------------------------------------

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait

Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
	IF ( v_do_update != TRUE ) THEN
cache buffers lru chain      14,282,824    0.2	  0.0	   0   35,992,452    0.5
cache table scan latch		    243    0.0		   0	      243    0.0
call allocation 		  2,002    4.6	  1.3	   0		0    N/A
		--
change notification clie	      1    0.0		   0		0    N/A
channel handle pool latc	    524    1.0	  0.0	   0		0    N/A
		-- Do a SELECT statement
channel operations paren	  2,980    0.1	  0.0	   0		2    0.0
checkpoint queue latch		389,683    0.0		   0	    2,787    0.0
		-- Work out scan or random
client/application info 	    297    0.0		   0		0    N/A
compile environment latc	     56    0.0		   0		0    N/A
cp handoff latch		      1    0.0		   0		0    N/A
		IF  ( v_random_workload_only = TRUE ) THEN
cp pool latch			      1    0.0		   0		0    N/A
cp server hash latch		      1    0.0		   0		0    N/A
cp sga latch			     11    0.0		   0		0    N/A
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
cp srv type state latch 	    742    0.0		   0		0    N/A
cp srv type wait latch		      1    0.0		   0		0    N/A
cr slave free list		      1    0.0		   0		0    N/A
			v_do_scan_query := FALSE;
cvmap freelist lock		      1    0.0		   0		0    N/A
deferred cleanup latch		     11    0.0		   0		0    N/A
dispatcher info 		      4    0.0		   0		0    N/A
			v_scan_query_quota := TRUE ;
dml lock allocation		     11    0.0		   0		0    N/A
done queue latch		      1    0.0		   0		0    N/A
		ELSE
dtp latch			    258    0.0		   0		0    N/A
dummy allocation		    332    0.6	  0.0	   0		0    N/A
eighth spare latch - X p	      1    0.0		   0		0    N/A
			IF ( v_scan_workload_only = TRUE ) THEN
eleventh spare latch - c	      1    0.0		   0		0    N/A
enqueue freelist latch		      1    0.0		   0	   22,162    0.0
enqueue hash chains		 39,617    0.1	  0.1	   0	      191    0.0
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
enqueues			    248    0.0		   0		0    N/A
error message lists		     68    0.0		   0		0    N/A
fast space usage latch		     86    0.0		   0		0    N/A
				v_do_scan_query := TRUE;
fifteenth spare latch - 	      1    0.0		   0		0    N/A
file cache latch		    146    0.0		   0		0    N/A
first Audit Vault latch 	      1    0.0		   0		0    N/A
				v_scan_query_quota := FALSE;
flash file access latch 	      1    0.0		   0		0    N/A
flashback copy			      1    0.0		   0		0    N/A
fourteenth spare latch -	      1    0.0		   0		0    N/A
			ELSE
fourth Audit Vault latch	      1    0.0		   0		0    N/A
gc element		     53,445,494    0.1	  0.1	   1	3,408,003    0.1
gc imc list			     11    0.0		   0		0    N/A
				IF ( v_scan_query_quota = FALSE ) THEN
gc xid list			    170    0.0		   0		0    N/A
gcr global ctx			    103    0.0		   0		0    N/A
gcs affinity object free	     81    0.0		   0		0    N/A
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
gcs commit scn state		      1    0.0		   0		0    N/A
gcs nodemap pool		  1,739    0.0		   0		0    N/A
gcs opaque info freelist	  6,563    0.0	  0.0	   0		0    N/A
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
gcs partitioned table ha     51,017,669    0.0	  0.0	   0   22,125,068    0.0
gcs pcm hashed value buc	      1    0.0		   0		0    N/A
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
gcs remaster request que	      2    0.0		   0		0    N/A
gcs remastering latch		 41,835    0.4	  0.2	   1		0    N/A
gcs resource freelist	     18,008,774    0.3	  0.0	   0	6,783,458    0.3
						v_do_scan_query := TRUE;
gcs resource hash	     78,687,223    0.0	  0.1	   1	   21,855    0.4
gcs resource scan list		      1    0.0		   0		0    N/A
gcs resource timerq list	      1    0.0		   0		0    N/A
					ELSE
gcs resource validate li	      1    0.0		   0		0    N/A
gcs shadows freelist	     11,191,670    0.0		   0		0    N/A
ges cached resource list	 41,041    0.0	  0.2	   0	   54,123    0.0
ges deadlock list		  2,060    0.0		   0	       16    0.0
						v_do_scan_query := FALSE;
ges domain table		 97,627    0.0		   0		0    N/A
ges enqueue table freeli	  6,839    0.0		   0		0    N/A
					END IF;
ges group table 		 97,920    0.0	  0.0	   0		0    N/A

Latch Activity				 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
				ELSE
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
					-- Scan quota has been filled,	force drain some random access SELECTS
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
					v_do_scan_query := FALSE;
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
				END IF;
ges process hash list		 22,341    0.0		   0		0    N/A
ges process parent latch	198,918    0.0		   0		0    N/A
ges process table freeli	    259    0.0		   0		0    N/A
			END IF;
ges remote lock freelist	  1,463    0.0		   0		0    N/A
ges resource hash list		150,037    0.7	  0.3	   0	    7,566    0.0
		END IF;
ges resource scan list		     51    0.0		   0		0    N/A
ges resource table freel	 13,685    0.0	  0.0	   0		2    0.0
ges s-lock bitvec freeli	    760    0.0		   0		0    N/A

ges timeout list		  2,079    0.0		   0	      204    0.0
ges value block free lis	      1    0.0		   0		0    N/A
global KZLD latch for au	      1    0.0		   0		0    N/A

global tx hash mapping		      1    0.0		   0		0    N/A
granule from data transf	      1    0.0		   0		0    N/A
gws:Sharding global desc	     50    0.0		   0		0    N/A
		IF ( v_do_scan_query != TRUE ) THEN
hash table Sql Plan Find	     25    0.0		   0	       91    0.0
hash table column usage 	    671    0.0		   0	   33,129    0.0
hash table expression us	      1    0.0		   0		0    N/A
			SELECT COUNT(c2) INTO v_rowcnt
hash table modification 	      1    0.0		   0		0    N/A
hash table sql contorl l	      1    0.0		   0		0    N/A
heartbeat check 		      1    0.0		   0	      706    0.0
			FROM cf1
heartbeat structure mana	      0    N/A		   0	      371    0.0
imc buf hdl lat 		      1    0.0		   0		0    N/A
imc cr clone buf		      1    0.0		   0		0    N/A
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
imc hash lat			      1    0.0		   0		0    N/A
imc sj lat			      1    0.0		   0		0    N/A
imc srchsp lat			      1    0.0		   0		0    N/A

imc-txn-wrk-lat 		      1    0.0		   0		0    N/A
in-memory area latch		      1    0.0		   0		0    N/A
in-memory columnar segme	      1    0.0		   0		0    N/A
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
in-memory columnar ts ex	      1    0.0		   0		0    N/A
in-memory global pool la	      1    0.0		   0		0    N/A
internal temp table obje	    133    0.0		   0		0    N/A
		ELSE
interrupt manipulation		    162    0.0		   0		0    N/A
intra txn parallel recov	      1    0.0		   0		0    N/A
io pool granule list		    172    0.0		   0		0    N/A
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
io pool granule metadata	    346    0.0		   0		0    N/A
job workq parent latch		      1    0.0		   0		0    N/A
job_queue_processes para	     12    0.0		   0		0    N/A

k2q global data latch		    494    0.0		   0		0    N/A
k2q lock allocation		      1    0.0		   0		0    N/A
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
kKCN Cqn SGA			      1    0.0		   0		0    N/A
kcb DW scan objtemp hash	      1    0.0		   0		0    N/A

kcn buffer chains		      1    0.0		   0		0    N/A
kdlx hb parent latch		      1    0.0		   0		0    N/A
kgb parent			      1    0.0		   0		0    N/A
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
kgnfs mount latch		      1    0.0		   0		0    N/A
kjbr roi instance map		      1    0.0		   0		0    N/A
kjci objects freelist la	 23,835    0.0		   0		0    N/A
				v_scan_query_quota := TRUE;
kjci process context lat	 20,193    0.2	  0.0	   0	   14,015    0.0
kjci process list latch 	  9,445    0.0	  0.0	   0		0    N/A
kjci request sequence la	  2,674    0.0		   0		0    N/A
			END IF;
kjcipctx state object fr	    202    0.0		   0		0    N/A
kjoedcso state object fr	     11    0.0		   0		0    N/A
kjoeq omni enqueue hash 	      1    0.0		   0		0    N/A
		END IF;
kjoer owner hash bucket 	      1    0.0		   0		0    N/A
kjpm my inst data		     24    0.0		   0		0    N/A
kjsc Request obj freelis	    524    0.0		   0		0    N/A

kjsc Ring Buffer obj fre	    262    0.0		   0		0    N/A
kjsc protect control req	    262    0.0		   0	    7,525    0.0
kjsc protect warm up con	    136    0.0		   0		0    N/A
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects

Latch Activity				 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
	ELSE
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0
		--

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
		-- Do an UPDATE statement
		--

Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
		v_my_serial := v_my_serial + v_loop_cnt ;
------------------------ -------------- ------ ------ ------ ------------ ------
kjsca protect pkey hash 	  3,668    0.0		   0		0    N/A
kjsca protect service ha	  3,859    0.0		   0		0    N/A
kjscpss state object fre	    262    0.0		   0		0    N/A
kokc descriptor allocati	     46    0.0		   0		0    N/A

kpoxft latch			      0    N/A		   0	      226    7.1
krso process			     25    0.0		   0		0    N/A
ksevn object root latch 	    247    0.0		   0		0    N/A
ksfv messages			      1    0.0		   0		0    N/A
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
ksi resource reuse count	      1    0.0		   0		0    N/A
ksim group membership ca	  1,411    0.0		   0		0    N/A
ksim membership request 	      0    N/A		   0	      329    0.0
		--
ksns object latch		      1    0.0		   0		0    N/A
kss move lock			      9    0.0		   0		0    N/A
ksuosstats global area		     58    0.0		   0	      281    0.0
		-- Increment count of UPDATES and set UPDATE quota flag if needed
ksutcpistat latch		      1    0.0		   0		0    N/A
ksv allocation latch		     29    0.0		   0		0    N/A
ksv class latch 		 16,615    0.0	  0.5	   0		0    N/A
		--
ksv instance latch		      2    0.0		   0		0    N/A
ksv msg queue latch		    113    0.0		   0	      112    0.0
ksxp shared latch		    259    0.4	  0.0	   0		0    N/A
		v_updates_cnt := v_updates_cnt + 1;
ksxp so latch			    259    0.0		   0		0    N/A
ksz_so allocation latch 	    259    0.0		   0		0    N/A

ktfbn latch			    131    0.0		   0		0    N/A
ktm adg jrnls			      1    0.0		   0		0    N/A
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
ktm adg lookuptable leve	      1    0.0		   0		0    N/A
ktm adg lookuptable leve	      1    0.0		   0		0    N/A
ktm adg space			      1    0.0		   0		0    N/A
			v_update_quota := TRUE;
ktm adg stages			      1    0.0		   0		0    N/A
ktm adg worklink		      1    0.0		   0		0    N/A
ktm global data 		     12    0.0		   0		0    N/A
		END IF;
ktm prv jrnls			      1    0.0		   0		0    N/A
ktmpj HT ls			      1    0.0		   0		0    N/A
kwqbsn:qsga			     26    0.0		   0		0    N/A
	END IF ;
kwslbmdl: metadata latch	     25    0.0		   0		0    N/A
kwslbql: queue latch		      1    0.0		   0		0    N/A
kwslbutl: uncommitted tx	      1    0.0		   0		0    N/A
kwsptQcachLt: queue cach	      1    0.0		   0		0    N/A
----------------------------------------------------------------------------------------------------------------------
kwsptTrncTsksLt: trunc t	      1    0.0		   0		0    N/A
kwsptjobAdPtLt: AdPt lis	     17    0.0		   0		0    N/A
kwsslLat: skiplist latch	      1    0.0		   0		0    N/A
kxfxscanrate_latch		      1    0.0		   0		0    N/A
lgwr LWN SCN			  1,334    0.0		   0		0    N/A
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
list of block allocation	    247    0.0		   0		0    N/A
loader state object free	    174    0.0		   0		0    N/A
lob segment dispenser la	    212    0.0		   0		0    N/A
lob segment hash table l	    746    0.0		   0		0    N/A
----------------------------------------------------------------------------------------------------------------------
lob segment query latch 	      1    0.0		   0		0    N/A
lock DBA buffer during m	      1    0.0		   0		0    N/A
log write info			      0    N/A		   0	    1,190    0.8

log write worker phase		     19    0.0		   0		0    N/A
logical standby cache		      1    0.0		   0		0    N/A
logminer context allocat	      1    0.0		   0		0    N/A
logminer local			      1    0.0		   0		0    N/A
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
logminer work area		      1    0.0		   0		0    N/A
longop free list parent 	      1    0.0		   0		0    N/A
managed standby 		     24    0.0		   0		0    N/A
		--
message bitmap latch		      1    0.0		   0		0    N/A
message pool operations 	    930    0.0		   0		0    N/A
messages			 74,217    8.6	  0.0	   0		0    N/A
msg queue latch 		      1    0.0		   0		0    N/A
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,

Latch Activity				 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
		-- so reset flags and counters before continuing
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

		--
					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
		v_update_quota := FALSE;
------------------------ -------------- ------ ------ ------ ------------ ------
multiblock read objects       1,117,323    0.1	  0.1	   0		0    N/A
name-service memory obje	    184    0.0		   0		0    N/A
		v_updates_cnt := 0;
name-service namespace b	  4,183    0.0		   0		0    N/A
name-service pending que	     90    0.0		   0		0    N/A
name-service request		     20    0.0		   0		0    N/A
		v_selects_cnt := 0;
name-service request que	  7,652    0.0		   0		0    N/A
ncodef allocation latch 	     11    0.0		   0		0    N/A
ninth spare latch - X pa	      1    0.0		   0		0    N/A
	END IF;
object queue header free	201,076    0.0		   0		0    N/A
object queue header oper     72,013,869    0.0	  0.2	   0	  573,059    0.0
object queue memory		    149    0.0		   0		0    N/A

object stats modificatio	    257    0.0		   0		0    N/A
parallel query alloc buf	    353    0.0		   0	    1,760    0.0
parallel query stats		     78    0.0		   0		0    N/A
parallel txn reco latch 	    136    0.0		   0		0    N/A
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
parameter table manageme	    690    0.0		   0		0    N/A
pdb enqueue hash chains 	      1    0.0		   0		0    N/A
peshm				      1    0.0		   0		0    N/A
pesom_free_list 		      1    0.0		   0		0    N/A
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
pesom_hash_node 		      1    0.0		   0		0    N/A
pkey global statistics		      1    0.0		   0		0    N/A
pmon dead latch 		     17    0.0		   0		0    N/A
		-- so reset flags and counters
post/wait queue 		 96,374    0.2	  0.0	   0	   96,379    0.3
process allocation		  3,896    0.0		   0		0    N/A
process group creation		    259    0.0		   0		0    N/A
		v_scan_query_quota := FALSE;
process memory detail		      1    0.0		   0		0    N/A
process pkey statistics 	      1    0.0		   0		0    N/A
process queue			    168    0.0		   0		0    N/A
		v_scan_queries_cnt := 0;
process queue reference 	  6,861    0.0		   0	    1,339    0.0
qmn task queue latch		    104    0.0		   0		0    N/A
quarantine object		     11    0.0		   0		0    N/A
query server freelists		    173    0.0		   0		0    N/A
		v_random_access_queries_cnt := 0;
query server process		    548    0.0		   0		4    0.0
queued dump request		      2    0.0		   0		0    N/A
queuing load statistics 	      1    0.0		   0		0    N/A
	END IF;
read-moslty lock queue u	      1    0.0		   0		0    N/A
recovery domain hash buc	  1,040    0.0		   0		0    N/A
redo allocation 		 11,809    0.0	  0.0	   0	   17,792    0.0

redo copy			      1    0.0		   0	   17,794    0.0
redo transport task		      1    0.0		   0		0    N/A
redo writing			 13,718    1.3	  0.0	   0		0    N/A
	v_loop_cnt := v_loop_cnt + 1 ;
remote tool request latc	    287    0.3	  0.0	   0		0    N/A
resmgr group change latc	     36    0.0		   0		0    N/A
resmgr:active threads		    335    0.3	  1.0	   0	       13    0.0
	v_now := DBMS_UTILITY.GET_TIME();
resmgr:actses change gro	     41    0.0		   0		0    N/A
resmgr:actses change sta	      1    0.0		   0		0    N/A
resmgr:free threads list	    331    1.5	  0.2	   0		0    N/A

resmgr:plan CPU method		      1    0.0		   0		0    N/A
resmgr:plan change alloc	      1    0.0		   0		0    N/A
resmgr:plan change latch	      1    0.0		   0		0    N/A
resmgr:resource group CP	      1    0.0		   0		0    N/A
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
resmgr:schema config		      6    0.0		   0	       13    0.0
resmgr:session queuing		      1    0.0		   0		0    N/A
row cache objects		      1    0.0		   0		0    N/A
rt rmv count latch		      0    N/A		   0	      371    0.0
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
second Audit Vault latch	      1    0.0		   0		0    N/A
segmented array pool		      1    0.0		   0		0    N/A
sequence cache			    437    0.0		   0		0    N/A
		v_stop_immediate := TRUE ;
service drain list		    741    0.0		   0		0    N/A
session allocation		  1,106    0.0		   0	      526    0.0

Latch Activity				 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
	END IF;
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
END LOOP;
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait

Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
v_end_time := v_now ;
session idle bit		  4,833    0.0		   0		0    N/A
session queue latch		      1    0.0		   0		0    N/A
session state list latch	    339    0.0		   0		0    N/A
v_now := DBMS_UTILITY.GET_TIME();
session statistics		    333    0.0		   0		0    N/A
session switching		    270    4.4	  0.3	   0		0    N/A
session timer			    247    0.0		   0		0    N/A
seventh spare latch - X 	      1    0.0		   0		0    N/A
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
sga hash table parent la	      1    0.0		   0		0    N/A
shard latch			      1    0.0		   0		0    N/A
shardgroup list latch		    529    0.0		   0		0    N/A

shared pool			 96,748    1.2	  0.0	   0	       98    0.0
shared pool sim alloc		     19    0.0		   0		0    N/A
shared pool simulator		  1,552    0.0		   0		0    N/A
shared server configurat	    247    0.0		   0		0    N/A
v_total_time := v_end_time - v_begin_time ;
sim partition latch		      1    0.0		   0		0    N/A
simulator hash latch	     83,512,424    0.0	  0.0	   0		0    N/A
simulator lru latch		      1    0.0		   0   79,989,245    0.2
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
sixth spare latch - X pa	      1    0.0		   0		0    N/A
sort extent pool		    725    0.0		   0		0    N/A
space background task la	  2,686   50.7	  0.9	   1	      480    9.6
state object free list		      2    0.0		   0		0    N/A
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
statistics aggregation		    145    0.0		   0		0    N/A
subscriber Ht bkt		      1    0.0		   0		0    N/A
tablespace key chain		      1    0.0		   0		0    N/A
temp lob duration state 	    112    0.0		   0		0    N/A
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
temporary table state ob	      9    0.0		   0		0    N/A
tenth spare latch - X pa	      1    0.0		   0		0    N/A
test excl. parent l0		      1    0.0		   0		0    N/A

test excl. parent2 l0		      1    0.0		   0		0    N/A
test excl. parent2 lmid 	      1    0.0		   0		0    N/A
test mixed exclusive		      1    0.0		   0		0    N/A
test mode exclusive		      1    0.0		   0		0    N/A
END;</pre_sqltext></td></tr>
test open exclusive		      1    0.0		   0		0    N/A
test pdb exclusive		      1    0.0		   0		0    N/A
test shared parent2 lmid	      1    0.0		   0		0    N/A
thirteenth spare latch -	      1    0.0		   0		0    N/A
threshold alerts latch		     25    0.0		   0		0    N/A
transaction allocation		    633    0.0		   0		0    N/A
twelfth spare latch - ch	      1    0.0		   0		0    N/A
twenty-fifth spare latch	      1    0.0		   0		0    N/A
twenty-first spare latch	      1    0.0		   0		0    N/A
twenty-fourth spare latc	      1    0.0		   0		0    N/A
twenty-second spare latc	      1    0.0		   0		0    N/A
twenty-third spare latch	      1    0.0		   0		0    N/A
undo global data		  7,576    0.0	  0.0	   0		0    N/A
virtual circuit buffers 	      1    0.0		   0		0    N/A
virtual circuit holder		      1    0.0		   0		0    N/A
<tr><td scope="row" class='awrnc'><a class="awr" name="3dbzmtf9ahvzt"></a>3dbzmtf9ahvzt</td><td class='awrnc'><pre_sqltext class="awr">merge /* KSXM:OPTIM_DML_INF */  into sys.mon_mods_all$ m 		  using dual								     on (m.obj# = :objn and							    (:pobjn = 0 or								m.obj# = :pobjn or							   m.obj# in (select obj#								 from tabpart$								    where bo# = :pobjn and obj# = :objn 				       union all								  select obj#								     from tabcompart$								where bo# = :pobjn and obj# = :objn					   union all								      select tsp.obj#								 from tabsubpart$ tsp,	tabcompart$ tcp 				     where tsp.pobj# = tcp.obj# 						  and (tcp.bo# = :pobjn or tcp.obj# = :pobjn)				     and tsp.obj# = :objn)))				      when matched then 							   update								      set inserts = decode(:reset,  1,	0,  inserts) + :ins,				 updates = decode(:reset,  1,  0,  updates) + :upd,				deletes = decode(:reset,  1,  0,  deletes) + :del,			       flags =	decode(:reset,	1,  0,	flags - bitand(flags,  :flag)) + :flag,        drop_segments = decode(:reset,  1,  0,  drop_segments) + :dropseg,	      timestamp = :time 						   when NOT matched then							insert (obj#,  inserts,  updates,  deletes,					       timestamp,  flags,  drop_segments)				    values (:objn,  :ins,  :upd,  :del,  :time,  :flag,  :dropseg)		     where :ins != 0 or :upd != 0 or :del != 0 or :flag != 0 or :dropseg !=0</pre_sqltext></td></tr>
virtual circuit queues		      1    0.0		   0		0    N/A
			  ------------------------------------------------------


Latch Sleep Breakdown			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> ordered by misses desc

<tr><td scope="row" class='awrc'><a class="awr" name="3un99a0zwp4vd"></a>3un99a0zwp4vd</td><td class='awrc'><pre_sqltext class="awr">select owner#, name, namespace, remoteowner, linkname, p_timestamp, p_obj#,  nvl(property, 0), subname, type#, flags, d_attrs from dependency$ d,	obj$ o where d_obj#=:1 and p_obj#=obj#(+) order by order#</pre_sqltext></td></tr>
				       Get				   Spin
Latch Name			  Requests	 Misses      Sleeps	   Gets
-------------------------- --------------- ------------ ----------- -----------
cache buffers chains	     2,608,602,603	 77,221      13,494	 67,590
<tr><td scope="row" class='awrnc'><a class="awr" name="3x31q3h9nbczf"></a>3x31q3h9nbczf</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
gcs resource freelist		18,008,774	 50,927       1,117	 49,910
gc element			53,445,494	 31,362       2,714	 28,993
cache buffers lru chain 	14,282,824	 28,432 	697	 27,775
v_default_schema_number PLS_INTEGER := '182';
KJC message pool free list	 1,958,748	 15,450       1,077	 14,485
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
gcs resource hash		78,687,223	 12,559       1,000	 11,651
messages			    74,217	  6,398 	 90	  6,309
	v_loop_control := TRUE ;
ASM map operation hash tab	71,907,065	  4,986 	351	  4,678
KJCT flow control latch 	 8,664,801	  3,661 	114	  3,558
END IF;
space background task latc	     2,686	  1,361       1,286	    264
multiblock read objects 	 1,117,323	  1,213 	 63	  1,156

shared pool			    96,748	  1,170 	 42	  1,144
ges resource hash list		   150,037	    987 	266	    826
IF ( v_update_pct = 0 ) 	  THEN
ASM map operation freelist	    18,422	    943 	 42	    933
simulator hash latch		83,512,424	    538 	 17	    525
	v_select_only_workload := TRUE;
active checkpoint queue la	    10,230	    470 	 18	    452
MGA shared context latch	     4,625	    319 	530	     11
END IF;
object queue header operat	72,013,869	    294 	 52	    248
MGA shared context root la	       530	    242       1,561	     15

post/wait queue 		    96,374	    214 	  2	    212
MGA heap latch			       530	    205 	482	     86
gcs remastering latch		    41,835	    181 	 45	    142
IF ( v_update_pct = 100 )	  THEN
call allocation 		     2,002	     92 	115	     44
kjci process context latch	    20,193	     50 	  1	     49
	v_update_only_workload := TRUE;
enqueue hash chains		    39,617	     42 	  5	     37
ges cached resource lists	    41,041	     19 	  3	     16
session switching		       270	     12 	  3	     10
END IF;
resmgr:free threads list	       331	      5 	  1	      4
ksv class latch 		    16,615	      4 	  2	      2

ASM Keyed state latch		       260	      2 	  1	      1
resmgr:active threads		       335	      1 	  1	      0
IF ( v_scan_query_pct = 0 ) 	THEN
			  ------------------------------------------------------


	v_random_workload_only := TRUE;
Latch Miss Sources			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> only latches with sleeps are shown
-> ordered by name, sleeps desc
END IF;

						     NoWait		 Waiter

Latch Name		 Where			     Misses	Sleeps	 Sleeps
IF ( v_scan_query_pct = 100 ) 	THEN
------------------------ -------------------------- ------- ---------- --------
ASM Keyed state latch	 kfksoClose			  0	     1	      1
	v_scan_workload_only := TRUE;
END IF;

ASM map operation freeli kffmsoDelete_1 		  0	    41	     42
ASM map operation freeli kffmsoDelete_2 		  0	     1	      0
v_seconds_to_run := v_seconds_to_run * 100 ;
ASM map operation hash t kffmTranslate			  0	   213	    185
ASM map operation hash t kffmDoDone_1			  0	   138	    166

KJC message pool free li kjcsmpav: allocate a msg b	  0	   540	  1,073
KJC message pool free li kjcspfmbq: free vector of	  0	   533	      0
KJCT flow control latch  kjctcsnd: send normal mess	  0	    75	     68
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
KJCT flow control latch  kjcts_sedeqv3: dequeue a v	  0	    24	      3
KJCT flow control latch  kjctr_updatetkt: update ti	  0	     8	     21

KJCT flow control latch  kjcts_sqenq2: queue a mess	  0	     4	     40
KJCT flow control latch  kjcts_sqenq: queue a messa	  0	     2	      8
KJCT flow control latch  kjctr_releasetkt: change t	  0	     1	      0
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
MGA pid alloc latch	 ksm_mga_sctx_rtrcv_do_whr2	  0	    15	    269
MGA shared context latch ksm_mga_detach_whr2		  0	   345	    151
-- DBMS_RANDOM.seed (val =&gt; v_seed);
MGA shared context latch ksm_mga_sync_whr1		  0	   172	    112
MGA shared context root  ksm_mga_detach_whr1		  0	 1,543	  1,547

active checkpoint queue  kcbbacq: scan active check	  0	    12	     12
cache buffers chains	 kcbzibmlt: multi-block rea	  0	14,775	      0
cache buffers chains	 kcbzwb 			  0	 2,076	  2,032
v_begin_time := DBMS_UTILITY.GET_TIME();
cache buffers chains	 kcbzgb: scan from tail now	  0	 1,860	      0
cache buffers chains	 kcbgtcr: slow path excl	  0	 1,108	    349
v_now := v_begin_time ;
cache buffers chains	 kclcls_3			  0	   651	    103
cache buffers chains	 kcbgtcr: fast path exam	  0	   419	    791
cache buffers chains	 kcbzibmlt: finish free buf	  0	   278	    209
v_brick_wall := v_now + v_seconds_to_run ;
cache buffers chains	 kcbgtcr: convert latch 	  0	   262	      0
cache buffers chains	 kcbgtcr: convert latch 4	  0	   129	      0
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
cache buffers chains	 kcbgtcr: fast path pin 	  0	   101	 14,950
cache buffers chains	 kcbrls: fast pin release	  0	    92	  3,403

cache buffers chains	 kclexpandlock			  0	    37	     14
cache buffers chains	 kcbzib: finish processing	  0	    28	     17
----------------------------------------------------------------------------------------------------------------------
cache buffers chains	 kcbgtcr: retry after read	  0	    27	      2
cache buffers chains	 kclwcrs			  0	    11	      5
cache buffers chains	 kclexpand_1			  0	     5	      0
-- The following WHILE loop is the master work loop control
cache buffers chains	 kcbgtcr: slow path shr 	  0	     2	      1
cache buffers chains	 kcbrls: fast pin exclusive	  0	     2	      0
cache buffers chains	 kclrqchk			  0	     2	      3
----------------------------------------------------------------------------------------------------------------------
cache buffers chains	 kcbchg: aux pin		  0	     1	      0
cache buffers chains	 kcbchg: change complete	  0	     1	      1
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
cache buffers chains	 kcbchg: rollback		  0	     1	      1
cache buffers chains	 kcbgcur: fast path excl	  0	     1	      0
cache buffers chains	 kcbgcur: slow path		  0	     1	      0

cache buffers chains	 kcbnlc 			  0	     1	      0
cache buffers chains	 kclcsr_2			  0	     1	      0
cache buffers lru chain  kcbzgws			  0	   431	      0
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
cache buffers lru chain  kcbzgb_2			  0	   264	    694
call allocation 	 ksuxds 			  0	   111	    104
call allocation 	 ksudlp: top call		  0	     4	     11
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
gc element		 kclnfndnewm			  0	 1,511	    832
gc element		 kclulb 			  0	   526	    825
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
gc element		 KCLUNLNK			  0	   380	    822
gc element		 kclnfndx			  0	   270	    413
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
gc element		 kclplz 			  0	   142	      0
gc element		 kclplz_1			  0	    61	     13
gc element		 kclhngcbk1			  0	     9	      0
			DBMS_LOCK.SLEEP(v_num_tmp);
gc element		 kclexpand_2			  0	     4	      0
gc element		 kclchkping			  0	     3	      0
		END IF;
gc element		 kclnfndnew			  0	     3	      1
gc element		 kclcqchk			  0	     1	      0
gc element		 kclnfndnewby			  0	     1	      0
	END IF;

Latch Miss Sources			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

-> only latches with sleeps are shown
-> ordered by name, sleeps desc

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps
------------------------ -------------------------- ------- ---------- --------
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
gcs remastering latch	 kjfcdrmrfg end step		  0	    27	      0
gcs remastering latch	 kjxpdrmstart set buckets	  0	    18	      0
gcs remastering latch	 previous rm finished		  0	     1	      0
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
gcs resource freelist	 kjbralc: check freelist no	  0	   877	      0
gcs resource freelist	 kjbrralc: reserve allocati	  0	    99	     54
			v_sharing_schema := TRUE ;
gcs resource freelist	 kjbrfr_bg2			  0	    74	    289
gcs resource freelist	 kjbralc add resource		  0	    66	    773
gcs resource hash	 kjbcropen			  0	   534	    263
		ELSE
gcs resource hash	 kjblocalobj_nolock		  0	   165	    341
gcs resource hash	 kjbmpclose			  0	    65	     84
gcs resource hash	 kjbmpopen			  0	    64	    142
			IF ( v_sharing_schema = TRUE ) THEN
gcs resource hash	 kjbclose_remaster		  0	    61	    116
gcs resource hash	 kjbrrcfwst			  0	    46	      0
gcs resource hash	 kjblpast			  0	    33	     49
				EXECUTE IMMEDIATE v_home_schema_str;
gcs resource hash	 kjbrrcres_99			  0	    19	      0
gcs resource hash	 kjbralc: reacquire		  0	     7	      0
				v_sharing_schema := FALSE;
gcs resource hash	 kjbopen:affinity		  0	     2	      3
gcs resource hash	 kclfwrite1			  0	     1	      0
gcs resource hash	 kjbcancel			  0	     1	      0
			END IF;
ges cached resource list kjruch: cached obj cleanup	  0	     2	      0
ges cached resource list kjrm2c: move resource to c	  0	     1	      3
		END IF;
ges resource hash list	 kjrmas1: lookup master nod	  0	   111	     45
ges resource hash list	 kjlrlr: remove lock from r	  0	   108	     93
	END IF;
ges resource hash list	 kjrref: find matched resou	  0	    45	    127
kjci process context lat kjci_finish_int:2		  0	     1	      7

ksv class latch 	 ksvclsl: checkpool		  0	     2	      0
messages		 ksarcv 			  0	    39	     32
messages		 ksaamb: after wakeup		  0	    28	     36
	-- Choose the random block. The v_do_hotspot handler that follows can override.
messages		 ksarcv: after wait		  0	    23	     22
multiblock read objects  kcbzibmlt: normal mbr free	  0	    35	     27
multiblock read objects  kcbzibmlt			  0	    25	     33
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
object queue header oper kcbo_unlink_q			  0	    51	     25
object queue header oper kcbo_link_q			  0	     3	     29

post/wait queue 	 ksliwat:remove 		  0	     2	      2
resmgr:active threads	 kgskmetricupd			  0	     1	      0
resmgr:free threads list kskthrsod			  0	     1	      1
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
session switching	 kskexeall			  0	     3	      3
simulator hash latch	 kcbsacc: lookup dba		  0	    14	     16
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
simulator hash latch	 kcbsacc: insert dba		  0	     3	      0
space background task la ktsj_grab_task 		  0	   906	  1,109
space background task la ktsj_detach_task		  0	   184	    177
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
space background task la ktsj_smco_purgeexpired 	  0	   180	      0
space background task la ktsjCreateTask 		  0	     8	      0
space background task la ktsj_smco_movetasks		  0	     8	      0
unknown latch		 kghfre 			  0	   515	    509
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
unknown latch		 kghupr1			  0	     5	     12
unknown latch		 ksqrcl 			  0	     3	      4
	END IF;
unknown latch		 kghfrunp: no latch		  0	     2	      0
unknown latch		 ksqcmi: if lk mode not req	  0	     2	      1
unknown latch		 kghalo 			  0	     1	      2

			  ------------------------------------------------------

Mutex Sleep Summary			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
----------------------------------------------------------------------------------------------------------------------
-> ordered by number of sleeps desc

									 Wait
Mutex Type	      Location				     Sleeps    Time (ms)
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
--------------------- -------------------------------- ------------ ------------
Library Cache	      kglhdgh1	64			      4,622	   2,759
Cursor Pin	      kksfbc [KKSCHLFSP2]			378	     415
----------------------------------------------------------------------------------------------------------------------
Library Cache	      kgllkdl1	85				291	     108
Cursor Pin	      kksLockDelete [KKSCHLPIN6]		120	     134

Library Cache	      kglpndl1	95				110	     169
Library Cache	      kglhdgh3	   161				104	      29
Library Cache	      kglpin1	4				 94	     111
	IF  ( v_select_only_workload = TRUE ) THEN
Library Cache	      kglhdgn2 106				 69	      30
Library Cache	      kglget2	2				 66	     176
Library Cache	      kglpnal2	91				 45	      25
		-- handle case where user specified zero pct updates (a SELECT-only workload)
Library Cache	      kgllkc1	57				 44	       1
Row Cache	      [19] kqrpre				 39	      21
Library Cache	      kglpnal1	90				 39	      21
		v_do_update := FALSE;
Library Cache	      kglhdgn1	62				 28	      31
Library Cache	      kglnti1	46				 11	      10
Row Cache	      [16] kqrReadFromDB			 10	       0
		v_update_quota := TRUE ;
Row Cache	      [06] kqrGetClusterLock			  9	       0
Row Cache	      [10] kqreqd				  4	       0
Library Cache	      kgldtin1	42				  1	       0
	ELSE
			  ------------------------------------------------------


		IF ( v_update_only_workload = TRUE ) THEN
Parent Latch Statistics 		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			-- handle case where user specified 100% updates
			  ------------------------------------------------------

Child Latch Statistics			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

			v_do_update := TRUE;
		  No data exists for this section of the report.
			  ------------------------------------------------------

			v_update_quota := FALSE;

Segments by Logical Reads		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Total Logical Reads:   1,249,870,563
		ELSE
-> Captured Segments account for   93.5% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
		     Tablespace
Owner			Name
-------------------- ----------
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
		     Subobject	Obj.				 Logical
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
			IF ( v_update_quota = FALSE ) THEN
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER189 	     IOPS
CF1				TABLE	   80525      80548  358,679,440   28.70
				-- Handle case where user has set UPDATE_PCT to a valid value
USER172 	     IOPS
CF1				TABLE	   80449      80457  311,152,208   24.89
USER179 	     IOPS
				--
CF1				TABLE	   80478      80487  289,512,528   23.16
USER200 	     IOPS
CF1				TABLE	   80594      80615  152,950,896   12.24
				-- We are doing updates during this run and quota has not been met yet
USER189 	     IOPS
I_CF1				INDEX	   80574      80574    9,801,744     .78
			  ------------------------------------------------------
				-- We still vacillate until update quota has been met

Segments by Physical Reads		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Total Physical Reads:      35,572,455

-> Captured Segments account for   48.3% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

				IF ( MOD(v_random_block,  2) = 0 ) THEN
		     Tablespace
Owner			Name
-------------------- ----------
					v_do_update := TRUE;
		     Subobject	Obj.				Physical
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
				ELSE
USER193 	     IOPS
CF1				TABLE	   80544      80563	 573,205    1.61
USER183 	     IOPS
					v_do_update := FALSE;
CF1				TABLE	   80499      80515	 571,907    1.61
USER35		     IOPS
CF1				TABLE	   79780      79802	 571,140    1.61
				END IF;
USER1		     IOPS
CF1				TABLE	   79588      79584	 569,492    1.60
USER182 	     IOPS
			ELSE
CF1				TABLE	   80496      80501	 569,146    1.60
			  ------------------------------------------------------

				-- UPDATE quota has been filled,  force drain some SELECTs
Segments by Physical Read Requests	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Total Physical Read Requests:      35,569,694
-> Captured Segments account for   48.2% of Total
				v_do_update := FALSE;
-> When ** MISSING ** occurs, some of the object attributes may not be available
			END IF;

		     Tablespace
Owner			Name
		END IF;
-------------------- ----------
		     Subobject	Obj.			       Phys Read
Object Name	       Name	Type	    Obj#   Dataobj#	Requests  %Total
	END IF;
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER193 	     IOPS

CF1				TABLE	   80544      80563	 573,205    1.61
USER183 	     IOPS
CF1				TABLE	   80499      80515	 571,908    1.61
----------------------------------------------------------------------------------------------------------------------
USER35		     IOPS
CF1				TABLE	   79780      79802	 571,141    1.61
USER1		     IOPS
CF1				TABLE	   79588      79584	 569,493    1.60
-- The type of SQL is now determined...execute it in the following section
USER182 	     IOPS
CF1				TABLE	   80496      80501	 569,152    1.60
			  ------------------------------------------------------

Segments by UnOptimized Reads		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Total UnOptimized Read Requests:	 35,569,694
-> Captured Segments account for   48.2% of Total
----------------------------------------------------------------------------------------------------------------------
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace

Owner			Name
-------------------- ----------
		     Subobject	Obj.			     UnOptimized
	IF ( v_do_update != TRUE ) THEN
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER193 	     IOPS
		--
CF1				TABLE	   80544      80563	 573,205    1.61
USER183 	     IOPS
CF1				TABLE	   80499      80515	 571,908    1.61
		-- Do a SELECT statement
USER35		     IOPS
CF1				TABLE	   79780      79802	 571,141    1.61
USER1		     IOPS
		-- Work out scan or random
CF1				TABLE	   79588      79584	 569,493    1.60
USER182 	     IOPS
		IF  ( v_random_workload_only = TRUE ) THEN
CF1				TABLE	   80496      80501	 569,152    1.60
			  ------------------------------------------------------

			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
Segments by Optimized Reads		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			v_do_scan_query := FALSE;
			  ------------------------------------------------------

Segments by Direct Physical Reads	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

			v_scan_query_quota := TRUE ;
		  No data exists for this section of the report.
			  ------------------------------------------------------

		ELSE
Segments by Physical Writes		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Total Physical Writes:	    3,234
-> Captured Segments account for   39.5% of Total
			IF ( v_scan_workload_only = TRUE ) THEN
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
-------------------- ----------
		     Subobject	Obj.				Physical
Object Name	       Name	Type	    Obj#   Dataobj#	  Writes  %Total
				v_do_scan_query := TRUE;
-------------------- ---------- ----- ---------- ---------- ------------ -------
SYS		     SYSAUX
WRH$_ACTIVE_SESSION_ 0827801_46 TABLE	   84842      84842	     788   24.37
				v_scan_query_quota := FALSE;
SYS		     SYSAUX
WRH$_ACTIVE_SESSION_ 0827801_46 INDEX	   84844      84847	     151    4.67
SYS		     SYSAUX
			ELSE
WRH$_SQL_PLAN			TABLE	   11147      11147	     108    3.34
SYS		     SYSAUX
WRH$_SQL_PLAN_PK		INDEX	   11150      11150	      55    1.70
				IF ( v_scan_query_quota = FALSE ) THEN
SYS		     SYSAUX
WRH$_SQL_BIND_METADA		INDEX	   11152      11152	      22     .68
			  ------------------------------------------------------

					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
Segments by Physical Write Requests	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Total Physical Write Requests:	    1,382
-> Captured Segments account for   30.4% of Total
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
-------------------- ----------
		     Subobject	Obj.			      Phys Write
Object Name	       Name	Type	    Obj#   Dataobj#	Requests  %Total
						v_do_scan_query := TRUE;
-------------------- ---------- ----- ---------- ---------- ------------ -------
SYS		     SYSAUX
WRH$_ACTIVE_SESSION_ 0827801_46 INDEX	   84844      84847	     108    7.81
					ELSE
SYS		     SYSAUX
WRH$_ACTIVE_SESSION_ 0827801_46 TABLE	   84842      84842	     107    7.74
SYS		     SYSAUX
						v_do_scan_query := FALSE;
WRH$_SQL_PLAN			TABLE	   11147      11147	      44    3.18
SYS		     SYSAUX
WRH$_SQL_PLAN_PK		INDEX	   11150      11150	      42    3.04
					END IF;
SYS		     SYSAUX
WRH$_SQL_BIND_METADA		INDEX	   11152      11152	      14    1.01
			  ------------------------------------------------------
				ELSE

Segments by Direct Physical Writes	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Total Direct Physical Writes:	   1,160
					-- Scan quota has been filled,	force drain some random access SELECTS
-> Captured Segments account for   56.7% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
					v_do_scan_query := FALSE;
Owner			Name
-------------------- ----------
		     Subobject	Obj.				  Direct
				END IF;
Object Name	       Name	Type	    Obj#   Dataobj#	  Writes  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
SYS		     SYSAUX
			END IF;
WRH$_ACTIVE_SESSION_ 0827801_46 TABLE	   84842      84842	     647   55.78
SYS		     SYSAUX
SYS_LOB0000007451C00 S_LOB_P258 LOB P	   79022      79022	      11     .95
		END IF;
			  ------------------------------------------------------

Segments by Table Scans 		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48


		  No data exists for this section of the report.
			  ------------------------------------------------------


Segments by DB Blocks Changes		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> % of Capture shows % of DB Block Changes for each top segment compared
		IF ( v_do_scan_query != TRUE ) THEN
-> with total DB Block Changes for all segments captured by the Snapshot
-> When ** MISSING ** occurs, some of the object attributes may not be available

			SELECT COUNT(c2) INTO v_rowcnt
		     Tablespace
Owner			Name
-------------------- ----------
			FROM cf1
		     Subobject	Obj.				DB Block    % of
Object Name	       Name	Type	    Obj#   Dataobj#	 Changes Capture
-------------------- ---------- ----- ---------- ---------- ------------ -------
SYS		     SYSAUX
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
WRH$_SYSSTAT_PK      0827801_46 INDEX	   84824      84824	   1,712   16.67

SYS		     SYSAUX
WRH$_SQL_PLAN_PK		INDEX	   11150      11150	   1,536   14.95
SYS		     SYSAUX
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
WRH$_SQL_PLAN			TABLE	   11147      11147	   1,504   14.64
SYS		     SYSAUX
WRH$_ACTIVE_SESSION_ 0827801_46 INDEX	   84844      84847	     784    7.63
		ELSE
SYS		     SYSAUX
WRH$_LATCH_PK	     0827801_46 INDEX	   84804      84804	     656    6.39
			  ------------------------------------------------------

			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

Segments by Row Lock Waits		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> % of Capture shows % of row lock waits for each top segment compared

-> with total row lock waits for all segments captured by the Snapshot
-> When ** MISSING ** occurs, some of the object attributes may not be available

			v_scan_queries_cnt := v_scan_queries_cnt + 1;
		     Tablespace
Owner			Name
-------------------- ----------
								     Row

		     Subobject	Obj.				    Lock    % of
Object Name	       Name	Type	    Obj#   Dataobj#	   Waits Capture
-------------------- ---------- ----- ---------- ---------- ------------ -------
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
SYS		     SYSAUX
WRH$_SEG_STAT_OBJ_IN		INDEX	   11341      11341	       2   66.67
SYS		     SYSTEM
				v_scan_query_quota := TRUE;
OPTSTAT_HIST_CONTROL		TABLE	     696	696	       1   33.33
			  ------------------------------------------------------

			END IF;
Segments by ITL Waits			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			  ------------------------------------------------------
		END IF;

Segments by Buffer Busy Waits		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> % of Capture shows % of Buffer Busy Waits for each top segment compared

-> with total Buffer Busy Waits for all segments captured by the Snapshot
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
Owner			Name
-------------------- ----------
								  Buffer
	ELSE
		     Subobject	Obj.				    Busy    % of
Object Name	       Name	Type	    Obj#   Dataobj#	   Waits Capture
-------------------- ---------- ----- ---------- ---------- ------------ -------
		--
SYS		     SYSAUX
EXP_OBJ$			TABLE	     724	724	       1   50.00
SYS		     SYSTEM
SEG$				TABLE	      14	  8	       1   50.00
		-- Do an UPDATE statement
			  ------------------------------------------------------

Segments by Global Cache Buffer Busy	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
		--
-> % of Capture shows % of GC Buffer Busy for each top segment compared
-> with GC Buffer Busy for all segments captured by the Snapshot
-> When ** MISSING ** occurs, some of the object attributes may not be available


		     Tablespace
Owner			Name
-------------------- ----------
		v_my_serial := v_my_serial + v_loop_cnt ;
								      GC
		     Subobject	Obj.				  Buffer    % of

Object Name	       Name	Type	    Obj#   Dataobj#	    Busy Capture
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER61		     IOPS
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
CF1				TABLE	   79885      79917	      12   11.32
SYS		     SYSTEM
SEG$				TABLE	      14	  8	       8    7.55
USER33		     IOPS
		--
CF1				TABLE	   79732      79766	       7    6.60
USER55		     IOPS
CF1				TABLE	   79867      79892	       7    6.60
USER92		     IOPS
		-- Increment count of UPDATES and set UPDATE quota flag if needed
CF1				TABLE	   80038      80074	       6    5.66
			  ------------------------------------------------------


		--
Segments by CR Blocks Received		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Total CR Blocks Received:		 339
-> Captured Segments account for   28.9% of Total
		v_updates_cnt := v_updates_cnt + 1;
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name

-------------------- ----------
								   CR
		     Subobject	Obj.				 Blocks
Object Name	       Name	Type	    Obj#   Dataobj#	Received  %Total
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
-------------------- ---------- ----- ---------- ---------- ------------ -------
SYS		     SYSAUX
EXP_OBJ$			TABLE	     724	724	      60   17.70
			v_update_quota := TRUE;
SYS		     SYSTEM
SEG$				TABLE	      14	  8	      11    3.24
SYS		     SYSTEM
OPTSTAT_HIST_CONTROL		TABLE	     696	696	      10    2.95
		END IF;
SYS		     SYSAUX
WRI$_INDEX_USAGE		TABLE	    9236       9236	       7    2.06
SYS		     SYSAUX
	END IF ;
SYS_LOB0000007451C00 S_LOB_P258 LOB P	   79022      79022	       4    1.18
			  ------------------------------------------------------

Segments by Current Blocks Received	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
----------------------------------------------------------------------------------------------------------------------
-> Total Current Blocks Received:	    1,289
-> Captured Segments account for   19.4% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
		     Tablespace
Owner			Name
-------------------- ----------
								 Current
		     Subobject	Obj.				 Blocks
----------------------------------------------------------------------------------------------------------------------
Object Name	       Name	Type	    Obj#   Dataobj#	Received  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
SYS		     SYSAUX

EXP_OBJ$			TABLE	     724	724	     143   11.09
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
SYS		     SYSAUX
WRM$_SNAPSHOT_DETAIL		INDEX	   11582      11582	      42    3.26
SYS		     SYSTEM
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
SEG$				TABLE	      14	  8	      19    1.47
SYS		     SYSAUX
WRH$_ACTIVE_SESSION_ 0827801_46 TABLE	   84842      84842	      18    1.40
		-- so reset flags and counters before continuing
SYS		     SYSAUX
WRI$_INDEX_USAGE		TABLE	    9236       9236	      13    1.01
			  ------------------------------------------------------
		--

Segments by Global Cache Remote Grants	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Total Global Cache Remote Grants:	   6,879,593
		v_update_quota := FALSE;
-> Captured Segments account for   37.0% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
		v_updates_cnt := 0;
Owner			Name
-------------------- ----------
								      GC
		     Subobject	Obj.				  Remote
		v_selects_cnt := 0;
Object Name	       Name	Type	    Obj#   Dataobj#	  Grants  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
	END IF;
USER106 	     IOPS
CF1				TABLE	   80123      80142	  94,409    1.37
USER3		     IOPS

CF1				TABLE	   79626      79636	  91,038    1.32
USER5		     IOPS
CF1				TABLE	   79632      79643	  90,416    1.31
USER15		     IOPS
CF1				TABLE	   79662      79652	  89,732    1.30
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
USER101 	     IOPS
CF1				TABLE	   80105      80114	  89,559    1.30
			  ------------------------------------------------------


		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
Dictionary Cache Stats			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> "Pct Misses"  should be very low (< 2% in most cases)
-> "Final Usage" is the number of cache entries being used
		-- so reset flags and counters

				   Get	  Pct	 Scan	Pct	 Mod	  Final
Cache			      Requests	 Miss	 Reqs  Miss	Reqs	  Usage
		v_scan_query_quota := FALSE;
------------------------- ------------ ------ ------- ----- -------- ----------
dc_awr_control			    66	  0.0	    0	N/A	   6	      1
dc_global_oids			 3,851	  9.1	    0	N/A	   0	    567
		v_scan_queries_cnt := 0;
dc_histogram_data		 8,792	  2.1	    0	N/A	   0	  1,519
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
dc_histogram_defs		15,766	  9.3	    0	N/A	  73	  5,410
dc_objects			 8,119	  1.7	    0	N/A	   8	  3,787
dc_profiles			     2	  0.0	    0	N/A	   0	      1
dc_props			   635	  0.2	    0	N/A	   0	      3
dc_rollback_segments		   208	  0.0	    0	N/A	   0	     70
dc_segments			   743	 18.3	    0	N/A	  41	    813
dc_sequences			    25	 24.0	    0	N/A	  25	      5
dc_tablespaces			   615	  0.3	    0	N/A	   0	      8
dc_users			   216	  0.5	    4	0.0	   0	    481
outstanding_alerts		     3	100.0	    0	N/A	   0	      3
			  ------------------------------------------------------

Dictionary Cache Stats (RAC)		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			  ------------------------------------------------------

Library Cache Activity			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> "Pct Misses"  should be very low

			 Get	Pct	       Pin    Pct	      Invali-
Namespace	    Requests   Miss	  Requests   Miss    Reloads  dations
--------------- ------------ ------ -------------- ------ ---------- --------
ACCOUNT_STATUS		   4	0.0		 0    N/A	   0	    0
AUDIT POLICY		   2	0.0		 2    0.0	   0	    0
BODY			 333	1.5	     1,042    0.5	   0	    0
CLUSTER 		  20	0.0		20    0.0	   0	    0
DBLINK			   5	0.0		 0    N/A	   0	    0
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
EDITION 		   5	0.0		10    0.0	   0	    0
INDEX			 165	3.0	       165    6.7	   6	    0
OBJECT ID		   2  100.0		 0    N/A	   0	    0

SCHEMA			 387	0.3		 0    N/A	   0	    0
END;</pre_sqltext></td></tr>
SQL AREA	       3,111   25.9	15,547,144    0.0	 265	    4
SQL AREA BUILD		 495   76.4		 0    N/A	   0	    0
SQL AREA STATS		 429   92.5	       429   92.5	   0	    0
TABLE/PROCEDURE        2,194   12.4	     9,038    8.4	 224	    0
TRIGGER 		   7   42.9		 7   42.9	   0	    0
<tr><td scope="row" class='awrc'><a class="awr" name="42mkua34ay6bc"></a>42mkua34ay6bc</td><td class='awrc'><pre_sqltext class="awr">INSERT INTO wri$_adv_addm_fdg ( TASK_ID,  FINDING_ID,  RULE_ID,  ADDM_FDG_ID,  ADDM_SEQ,	 DATABASE_TIME,  ACTIVE_SESSIONS,  PERC_ACTIVE_SESS,	IS_AGGREGATE,  METER_LEVEL,    QUERY_TYPE,  QUERY_IS_APPROX,  QUERY_ARGS) VALUES ( :tid,  :kea_id,  :rid,  :fdg_id,  :keh_id,  :dbt,	       round(:dbt / (1000000 * :sint) ,  2),	       round(((:dbt * 100) / :total_dbt) ,  2), 	  'N',	NULL,		:aqt,  decode(:aqa,  0,  'N',  'Y'),	       decode(:aqargs,	' ',  NULL,  :aqargs)) </pre_sqltext></td></tr>
			  ------------------------------------------------------

Library Cache Activity (RAC)		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

<tr><td scope="row" class='awrnc'><a class="awr" name="49s332uhbnsma"></a>49s332uhbnsma</td><td class='awrnc'><pre_sqltext class="awr">      declare
		    GES Lock	  GES Pin      GES Pin	 GES Inval GES Invali-
	 vsn  varchar2(20);
Namespace	    Requests	 Requests     Releases	  Requests     dations
--------------- ------------ ------------ ------------ ----------- -----------
ACCOUNT_STATUS		   4		0	     0		 0	     0
	    begin
AUDIT POLICY		   2		2	     2		 0	     0
BODY			  36	      993	   993		 0	     0
CLUSTER 		  20	       20	    20		 0	     0
	      vsn := dbms_rcvman.getPackageVersion;
DBLINK			   5		0	     0		 0	     0
EDITION 		   5		5	     5		 0	     0
INDEX			 165	      165	   165		 0	     0
	      :pkg_vsn:pkg_vsn_i := vsn;
SCHEMA			   3		0	     0		 0	     0
TABLE/PROCEDURE        2,863	    5,933	 5,933		 0	     0
TRIGGER 		   0		7	     7		 0	     0
	      if vsn is not null then
			  ------------------------------------------------------


		 :pkg_vsnub4 :=
Memory Dynamic Components		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Min/Max sizes since instance startup
-> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred
		   to_number(substr(vsn, 1, 2) || substr(vsn, 4, 2) ||
-> ordered by Component

		 Begin Snap	Current 	Min	    Max   Oper Last Op
			     substr(vsn, 7, 2) || nvl(substr(vsn, 10, 2), '00'));
Component	  Size (Mb)   Size (Mb)   Size (Mb)   Size (Mb)  Count Typ/Mod
--------------- ----------- ----------- ----------- ----------- ------ -------
	      end if;
ASM Buffer Cach 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 16K buf 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 2K buff 	.00	    .00 	.00	    .00      0 STA/
	    end;</pre_sqltext></td></tr>
DEFAULT 32K buf 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 4K buff 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 8K buff 	.00	    .00 	.00	    .00      0 STA/
<tr><td scope="row" class='awrc'><a class="awr" name="4asr6fcfymm3n"></a>4asr6fcfymm3n</td><td class='awrc'><pre_sqltext class="awr">DECLARE
DEFAULT buffer	  11,168.00   11,168.00   11,168.00   11,648.00      0 SHR/DEF
Data Transfer C 	.00	    .00 	.00	    .00      0 STA/
In Memory RO Ex 	.00	    .00 	.00	    .00      0 STA/
v_default_schema_number PLS_INTEGER := '101';
In Memory RW Ex 	.00	    .00 	.00	    .00      0 STA/
In-Memory Area		.00	    .00 	.00	    .00      0 STA/
KEEP buffer cac 	.00	    .00 	.00	    .00      0 STA/
v_update_pct PLS_INTEGER := '0';
PGA Target	   8,096.00    8,096.00    8,096.00    8,096.00      0 STA/
RECYCLE buffer		.00	    .00 	.00	    .00      0 STA/
SGA Target	  14,336.00   14,336.00   14,336.00   14,336.00      0 STA/
v_max_loop_iterations PLS_INTEGER := '0';
Shared IO Pool	     128.00	 128.00      128.00	 128.00      0 STA/
java pool		.00	    .00 	.00	    .00      0 STA/
v_seconds_to_run PLS_INTEGER := '600';
large pool	     160.00	 160.00      160.00	 160.00      0 STA/
memoptimize buf 	.00	    .00 	.00	    .00      0 STA/
shared pool	   2,720.00    2,720.00    1,504.00    2,720.00      0 GRO/DEF
v_scale PLS_INTEGER := '65536';
streams pool		.00	    .00 	.00	    .00      0 STA/
unified pga poo 	.00	    .00 	.00	    .00      0 STA/
			  ------------------------------------------------------
v_work_unit PLS_INTEGER := '80' ;

Memory Resize Operations Summary	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

v_redo_stress  VARCHAR2(12) := 'LITE';
		  No data exists for this section of the report.
			  ------------------------------------------------------

v_hot_schema_modulus PLS_INTEGER := '0';
Memory Resize Ops			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
v_do_hotspot   VARCHAR(7) := 'FALSE';
			  ------------------------------------------------------

Process Memory Summary			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
v_hotspot_mb  NUMBER := '10';
-> B: Begin Snap   E: End Snap
-> All rows below contain absolute values (i.e. not diffed over the interval)
-> Max Alloc is Maximum PGA Allocation size at snapshot time
v_hotspot_offset_mb NUMBER := '0';
-> Hist Max Alloc is the Historical Max Allocation for still-connected processes
-> ordered by Begin/End snapshot, Alloc (MB) desc
v_hotspot_modulus  PLS_INTEGER := '0';
-> Top 10 containers by Alloc (MB) at end snapshot time are displayed

							     Hist

				     Avg  Std Dev     Max     Max
		Alloc	   Used    Alloc    Alloc   Alloc   Alloc    Num    Num
v_sleep_modulus PLS_INTEGER := '0';
   Category	 (MB)	   (MB)     (MB)     (MB)    (MB)    (MB)   Proc  Alloc
 - -------- --------- --------- -------- -------- ------- ------- ------ ------
B Freeable     382.6	    .0	    1.3      3.7      43     N/A    289    289
v_sleep_min NUMBER := '.1';
  Other      2,240.7	   N/A	    3.3      3.8      54      54    671    671
  PL/SQL       118.6	 116.2	     .3       .2       2       2    413    411
v_sleep_max NUMBER := '.5';
  SQL	       228.1	 211.3	     .7       .5       1      13    313    299
  Total      2,970.0	 327.5	    5.7      8.2      99      69  1,686  1,670
E Freeable     253.6	    .0	    4.8      7.8      38     N/A     53     53
v_scan_query_pct PLS_INTEGER := '0';
  Other      1,221.6	   N/A	    2.9      4.8      55      55    426    426
  PL/SQL	 7.2	   6.6	     .0       .2       2       2    170    166
  SQL		 3.9	   2.2	     .1       .1       1      13     76     48
v_obfuscate VARCHAR(5)	:= 'FALSE';
  Total      1,486.3	   8.7	    7.7     12.9      95      70    725    693
			  ------------------------------------------------------


SGA Memory Summary			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

						      End Size (Bytes)

SGA regions			Begin Size (Bytes)	(if different)
------------------------------ ------------------- -------------------
Database Buffers		    11,844,714,496
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
Fixed Size				16,031,944
Redo Buffers			       151,736,320
Variable Size			    30,937,186,304
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
			       -------------------
sum				    42,949,669,064
			  ------------------------------------------------------


SGA breakdown difference by Pool and NameDB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> ordered by Pool, Name
v_num_tmp NUMBER := 0;
-> N/A value for Begin MB or End MB indicates the size of that Pool/Name was
   insignificant, or zero in that snapshot


Pool   Name				    Begin MB	     End MB  % Diff
------ ------------------------------ -------------- -------------- -------
large  PX msg pool			       128.0	      128.0    0.00
v_loop_cnt PLS_INTEGER := 0;
large  free memory				31.6	       31.6    0.00
shared ASH buffers			       254.0	      254.0    0.00
shared KGLH0					45.7	       51.9   13.59
v_rowcnt PLS_INTEGER := 0;
shared KJSC rnb slots			       144.8	       38.9  -73.15
shared KKSSP					28.4		N/A -100.00
shared SO private sga				66.8	       66.8    0.00
v_updates_cnt PLS_INTEGER := 0;
shared SQLA				       157.8	      133.6  -15.29
shared db_block_hash_buckets			64.0	       64.0    0.00
shared dbwriter coalesce buffer 		64.1	       64.1    0.00
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
shared free memory			       130.9	      278.0  112.40
shared gc name table				48.0	       48.0    0.00
shared gcs resources			       419.5	      419.5    0.00
v_scan_queries_cnt PLS_INTEGER := 0;
shared gcs resv res hash bucket 	       144.0	      144.0    0.00
shared gcs shadows			       228.8	      228.8    0.00
shared ges big msg buffers			30.4	       30.4    0.00

shared ges enqueues				51.2	       51.2    0.00
shared ges resource permanent			55.9	       55.9    0.00
shared ksunfy_meta 1			       100.9	      100.9    0.00
v_do_scan_query BOOLEAN :=FALSE;
shared object queue hash buckets		64.0	       64.0    0.00
shared row cache				  .0		 .0    0.00
shared session					38.7	       38.7    0.00
v_scan_query_quota  BOOLEAN := FALSE;
       buffer_cache			    11,168.0	   11,168.0    0.00
       fixed_sga				15.3	       15.3    0.00
v_scan_workload_only BOOLEAN := FALSE;
       log_buffer			       144.7	      144.7    0.00
       shared_io_pool			       128.0	      128.0    0.00
			  ------------------------------------------------------
v_random_workload_only BOOLEAN := FALSE;


Replication System Resource Usage	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48


		  No data exists for this section of the report.
			  ------------------------------------------------------


Replication SGA Usage			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

v_random_block PLS_INTEGER := 1;
		  No data exists for this section of the report.
			  ------------------------------------------------------


v_tmp PLS_INTEGER;
GoldenGate Capture			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
v_now PLS_INTEGER;
			  ------------------------------------------------------

GoldenGate Capture Rate 		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

v_brick_wall PLS_INTEGER;
		  No data exists for this section of the report.
			  ------------------------------------------------------


GoldenGate Apply Reader 		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
v_begin_time PLS_INTEGER;
			  ------------------------------------------------------

GoldenGate Apply Coordinator		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

v_end_time PLS_INTEGER;
		  No data exists for this section of the report.
			  ------------------------------------------------------

v_total_time PLS_INTEGER;
GoldenGate Apply Server 		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
v_begin_cpu_tm PLS_INTEGER;
			  ------------------------------------------------------

GoldenGate Apply Coordinator Rate	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

v_end_cpu_tm PLS_INTEGER;
		  No data exists for this section of the report.
			  ------------------------------------------------------

v_total_cpu_tm PLS_INTEGER;
GoldenGate Apply Reader and Server Rate  DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.

			  ------------------------------------------------------


XStream Capture 			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
v_do_sleeps BOOLEAN := FALSE;

		  No data exists for this section of the report.
			  ------------------------------------------------------

v_loop_control BOOLEAN := FALSE;
XStream Capture Rate			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
v_update_quota BOOLEAN := FALSE;
			  ------------------------------------------------------

XStream Apply Reader			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

v_select_only_workload BOOLEAN := FALSE;
		  No data exists for this section of the report.
			  ------------------------------------------------------

v_update_only_workload BOOLEAN := FALSE;
XStream Apply Coordinator		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			  ------------------------------------------------------
v_do_update BOOLEAN := FALSE;

XStream Apply Server			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
v_do_hot_schema BOOLEAN := FALSE;
			  ------------------------------------------------------

v_stop_immediate BOOLEAN := FALSE;
XStream Apply Coordinator Rate		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			  ------------------------------------------------------
v_sharing_schema BOOLEAN := FALSE;

XStream Apply Reader and Server Rate	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

v_seed VARCHAR2(128);
		  No data exists for this section of the report.
			  ------------------------------------------------------


v_home_schema_str VARCHAR2(80);
Table Statistics by DML Operations	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
v_scratch VARCHAR2(200) ;
			  ------------------------------------------------------


Table Statistics by Conflict Resolutions DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			  ------------------------------------------------------
v_cpu_pct NUMBER(6, 3);

Replication Large Transaction Statistics DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

v_my_serial NUMBER(16);
		  No data exists for this section of the report.
			  ------------------------------------------------------


Replication Long Running Transaction StatisticsDB/Inst: P60SDB/p60sdb2	Snaps:

		  No data exists for this section of the report.
BEGIN
			  ------------------------------------------------------


Advanced Queue CPU/IO Usage		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48


		  No data exists for this section of the report.
			  ------------------------------------------------------

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
Buffered Queues 			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
EXECUTE IMMEDIATE v_home_schema_str;
			  ------------------------------------------------------

Buffered Queue Subscribers		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48


		  No data exists for this section of the report.
			  ------------------------------------------------------


Rule Set				 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			  ------------------------------------------------------
IF ( v_hot_schema_modulus != 0 ) THEN

Persistent Queues			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
	v_do_hot_schema := TRUE;
			  ------------------------------------------------------

Persistent Queues Rate			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
END IF;

		  No data exists for this section of the report.
			  ------------------------------------------------------


Persistent Queue Subscribers		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
IF ( v_sleep_modulus != 0 )	  THEN
			  ------------------------------------------------------


	v_do_sleeps := TRUE;
Resource Limit Stats			     DB/Inst: P60SDB/p60sdb2  Snap: 48
-> Only rows with Current or Maximum Utilization > 80% of Limit are shown
-> For "UNLIMITED" resources, rows whose Current or Maximum Utilization
END IF;
   exceeds 2*Initial Allocation are shown
-> Ordered by Resource Name


				  Current      Maximum	   Initial
Resource Name			Utilization  Utilization Allocation   Limit
------------------------------ ------------ ------------ ---------- ----------
IF ( v_max_loop_iterations &gt; 0 )  THEN
ges_cache_ress			     12,692	  14,826	  0  UNLIMITED
			  ------------------------------------------------------

Shared Servers Activity 		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
	v_loop_control := TRUE ;
-> Values represent averages for all samples

   Avg Total   Avg Active    Avg Total	 Avg Active    Avg Total   Avg Active
END IF;
 Connections  Connections Shared Srvrs Shared Srvrs  Dispatchers  Dispatchers
------------ ------------ ------------ ------------ ------------ ------------
	   0		0	     1		  0	       1	    0

			  ------------------------------------------------------

Shared Servers Rates			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

IF ( v_update_pct = 0 ) 	  THEN
  Common     Disp			 Common       Disp     Server
   Queue    Queue   Server    Server	  Queue      Queue	Total	  Server
	v_select_only_workload := TRUE;
 Per Sec  Per Sec Msgs/Sec    KB/Sec	  Total      Total	 Msgs  Total(KB)
-------- -------- -------- --------- ---------- ---------- ---------- ----------
       0	0	 0	 0.0	      0 	 0	    0	       0
END IF;
			  ------------------------------------------------------


Shared Servers Utilization		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Statistics are combined for all servers
-> Incoming and Outgoing Net % are included in %Busy

IF ( v_update_pct = 100 )	  THEN
  Total Server			  Incoming  Outgoing
      Time (s)	  %Busy    %Idle     Net %     Net %
-------------- -------- -------- --------- ---------
	v_update_only_workload := TRUE;
	   726	    0.0    100.0       0.0	 0.0
			  ------------------------------------------------------

Shared Servers Common Queue		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
END IF;

		  No data exists for this section of the report.
			  ------------------------------------------------------


Shared Servers Dispatchers		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Ordered by %Busy, descending
IF ( v_scan_query_pct = 0 ) 	THEN
-> Total Queued, Total Queue Wait and Avg Queue Wait are for dispatcher queue
-> Name suffixes:
     "(N)" - dispatcher started between begin and end snapshots
	v_random_workload_only := TRUE;
     "(R)" - dispatcher re-started between begin and end snapshots

	      Avg Total Disp			    Total Total Queue  Avg Queue
END IF;
Name	    Conns   Time (s)	%Busy	 %Idle	   Queued    Wait (s)  Wait (ms)
------- --------- ---------- -------- -------- ---------- ----------- ----------
D000	      0.0	 727	  0.0	 100.0		0	    0

			  ------------------------------------------------------


Modified Parameters			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
IF ( v_scan_query_pct = 100 ) 	THEN
-> This section shows all the modified initialization parameters that
were in effect during the entire snapshot interval
-> End Value is displayed only if the parameter value was modified within
	v_scan_workload_only := TRUE;
the snapshot interval

								End value
Parameter Name		      Begin value			(if different)
END IF;
----------------------------- --------------------------------- --------------
_ipddb_enable		      TRUE
audit_file_dest 	      /u01/app/oracle/admin/p60sdb/adum

audit_trail		      DB
cluster_database	      TRUE
compatible		      19.0.0
control_files		      +P60S/P60SDB/CONTROLFILE/current.
v_seconds_to_run := v_seconds_to_run * 100 ;
db_block_size		      8192
db_create_file_dest	      +P60S
db_domain		      example.com
db_name 		      p60sdb

db_recovery_file_dest	      +P60SFRA
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
db_recovery_file_dest_size    811597824000
diagnostic_dest 	      /u01/app/oracle
dispatchers		      (PROTOCOL=TCP) (SERVICE=p60sdbXDB

instance_number 	      2
listener_networks
local_listener		       (ADDRESS=(PROTOCOL=TCP)(HOST=192
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
nls_language		      AMERICAN
nls_territory		      AMERICA
open_cursors		      300
pga_aggregate_target	      8474591232
-- DBMS_RANDOM.seed (val =&gt; v_seed);
processes		      2560
remote_listener 	       mcracpoc-scan.example.com:1521
remote_login_passwordfile     EXCLUSIVE

sga_max_size		      42949672960
sga_target		      15032385536
thread			      2
undo_tablespace 	      UNDOTBS2
v_begin_time := DBMS_UTILITY.GET_TIME();
			  ------------------------------------------------------


Modified Multi-Valued Parameters	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
v_now := v_begin_time ;
-> This section only displays parameters that have more than one value
->'(NULL)' indicates a missing parameter value
-> A blank in the 'End Snapshot' indicates the same value as the 'Begin Snapshot

v_brick_wall := v_now + v_seconds_to_run ;
								End value
Parameter Name		      Begin value			(if different)
----------------------------- --------------------------------- --------------
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
control_files		      +P60S/P60SDB/CONTROLFILE/current.
			      +P60SFRA/P60SDB/CONTROLFILE/curre
			  ------------------------------------------------------


Top SQL with Top Events 		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Top SQL statements by DB Time along with the top events by DB Time
----------------------------------------------------------------------------------------------------------------------
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Event is the percentage of DB Time due to the event that the SQL is
-- The following WHILE loop is the master work loop control
   waiting on.
-> % Row Source is the percentage of DB Time due to the row source for the
   SQL waiting on the event.
-> Executions is the number of executions of the SQL that were sampled in ASH.
----------------------------------------------------------------------------------------------------------------------

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
									   % Row
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
Event			       % Event Top Row Source			  Source
------------------------------ ------- --------------------------------- -------
	  bhdvtsvjhgvrh 	  1497866750		    12711	   98.89

db file parallel read		 40.06 TABLE ACCESS - BY INDEX ROWID BAT   40.06
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
gc cr multi block request	 34.28 TABLE ACCESS - BY INDEX ROWID BAT   34.28


db file sequential read 	 11.50 TABLE ACCESS - BY INDEX ROWID BAT   10.37

		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			  ------------------------------------------------------

Top SQL with Top Row Sources		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Top SQL statements by DB Time along with the top row sources by DB Time
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Row Source is the percentage of DB Time spent on the row source by
   that SQL.
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
-> % Event is the percentage of DB Time spent on the event by the
   SQL executing the row source.
-> Executions is the number of executions of the SQL that were sampled in ASH.

			DBMS_LOCK.SLEEP(v_num_tmp);
		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
					   % Row
		END IF;
Row Source				  Source Top Event		 % Event
---------------------------------------- ------- ----------------------- -------
	  bhdvtsvjhgvrh 	  1497866750		    12711	   98.89
	END IF;
TABLE ACCESS - BY INDEX ROWID BATCHED	   94.10 db file parallel read	   40.06
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )



INDEX - RANGE SCAN			    4.30 gc cr grant busy	    2.81

			  ------------------------------------------------------

Top Sessions				 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema

		  No data exists for this section of the report.
			  ------------------------------------------------------

		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
Top Blocking Sessions			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			  ------------------------------------------------------

			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
Top PL/SQL Procedures			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			  ------------------------------------------------------
			v_sharing_schema := TRUE ;

Top Events				 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Top Events by DB Time
-> % Activity is the percentage of DB Time due to the event
		ELSE

Event				    Event Class     Session Type
----------------------------------- --------------- ---------------
	   Avg Active
			IF ( v_sharing_schema = TRUE ) THEN
% Activity   Sessions
---------- ----------
db file parallel read		    User I/O	    FOREGROUND
     40.06	68.43
				EXECUTE IMMEDIATE v_home_schema_str;
gc cr multi block request	    Cluster	    FOREGROUND
     34.28	58.57
db file sequential read 	    User I/O	    FOREGROUND
     11.54	19.71
				v_sharing_schema := FALSE;
gc cr grant busy		    Cluster	    FOREGROUND
      9.30	15.88
CPU + Wait for CPU		    CPU 	    FOREGROUND
      3.68	 6.28
			END IF;
			  ------------------------------------------------------

Top Event P1/P2/P3 Values		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
		END IF;
-> Top Events by DB Time and the top P1/P2/P3 values for those events.
-> % Event is the percentage of DB Time due to the event
-> % Activity is the percentage of DB Time due to the event with the given
	END IF;
   P1,P2,P3 Values.

Event			       % Event		   P1, P2, P3 Values % Activity
------------------------------ ------- ----------------------------- ----------

Parameter 1		   Parameter 2		      Parameter 3
-------------------------- -------------------------- --------------------------
db file parallel read		 40.06		       "1","77","77"	  29.69
files			   blocks		      requests
	-- Choose the random block. The v_do_hotspot handler that follows can override.

gc cr multi block request	 34.28		  "9","23130245","1"	   0.02
file#			   block#		      class#

	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);
db file sequential read 	 11.55		       "1","977","1"	   0.01
file#			   block#		      blocks

			  ------------------------------------------------------


Top DB Objects				 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			  ------------------------------------------------------
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot

Activity Over Time			 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Analysis period is divided into smaller time slots as indicated
   in the 'Slot Time (Duration)'.
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
-> Top 3 events are reported in each of those slots
-> 'Slot Count' shows the number of ASH samples in that slot
-> 'Event Count' shows the number of ASH samples waiting for
   that event in that slot
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
-> '% Event' is 'Event Count' over all ASH samples in the analysis period

			 Slot					Event
Slot Time (Duration)	Count Event				Count % Event
-------------------- -------- ------------------------------ -------- -------
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
21:32:34   (2.4 min)	2,673 db file parallel read		  996	 7.74
			      gc cr multi block request 	  995	 7.74
			      db file sequential read		  276	 2.15
21:35:00   (5.0 min)	7,263 db file parallel read		2,900	22.55
	END IF;
			      gc cr multi block request 	2,508	19.50
			      db file sequential read		  856	 6.65
21:40:00   (5.0 min)	2,927 db file parallel read		1,257	 9.77

			      gc cr multi block request 	  907	 7.05
			      db file sequential read		  354	 2.75
			  ------------------------------------------------------



----------------------------------------------------------------------------------------------------------------------
	  ADDM Report for Task 'ADDM:3890827801_2_48'
	  -------------------------------------------

Analysis Period
---------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
AWR snapshot range from 47 to 48.
Time period starts at 20-FEB-20 09.32.34 PM
Time period ends at 20-FEB-20 09.45.08 PM

Analysis Target
----------------------------------------------------------------------------------------------------------------------
---------------
Database 'P60SDB' with DB ID 3890827801.
Database version 19.0.0.0.0.
ADDM performed an analysis of instance p60sdb2, numbered 2 and hosted at

mcracpoc2.example.com.

Activity During the Analysis Period
-----------------------------------
Total database time was 132423 seconds.
	IF  ( v_select_only_workload = TRUE ) THEN
The average number of active sessions was 175.63.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
		-- handle case where user specified zero pct updates (a SELECT-only workload)
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       175.63 | 100	   1
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
2  Top SQL Statements	      174.6 | 99.41	   1
3  "User I/O" wait Class      99.04 | 56.39	   0
		-- Do an UPDATE statement
4  Global Cache Messaging     73.53 | 41.87	   1
5  Undersized SGA	      23.83 | 13.57	   1
		--
6  Buffer Busy - Hot Objects  17.17 | 9.78	   0



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		v_my_serial := v_my_serial + v_loop_cnt ;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



	  Findings and Recommendations
	  ----------------------------
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);

Finding 1: Interconnect Latency
Impact is 175.86 active sessions, 100% of total activity.
		--
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time on this instance.
		-- Increment count of UPDATES and set UPDATE quota flag if needed
The instance was consuming 66959 kilo bits per second of interconnect
bandwidth.
		--
0% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 98% for database lock management.
		v_updates_cnt := v_updates_cnt + 1;
The average latency for 8K interconnect messages was 47609 microseconds.
The instance is using the private interconnect device "fg-priv:1" with IP

address 169.254.26.102 and source "?".

   Recommendation 1: Host Configuration
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
   Estimated benefit is 175.63 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
			v_update_quota := TRUE;
      Investigate cause of high network interconnect latency between database
      instances. Oracle's recommended solution is to use a high speed
		END IF;
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
	END IF ;
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
----------------------------------------------------------------------------------------------------------------------
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.

   Symptoms That Led to the Finding:
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
----------------------------------------------------------------------------------------------------------------------
      Impact is 73.53 active sessions, 41.87% of total activity.
	 Wait class "Cluster" was consuming significant database time.

	 Impact is 73.54 active sessions, 41.87% of total activity.


	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
Finding 2: Top SQL Statements
Impact is 174.83 active sessions, 99.41% of total activity.
-----------------------------------------------------------
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
SQL statements consuming significant database time were found. These
		-- so reset flags and counters before continuing
statements offer a good opportunity for performance improvement.

		--
   Recommendation 1: SQL Tuning
   Estimated benefit is 174.6 active sessions, 99.41% of total activity.
		v_update_quota := FALSE;
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
		v_updates_cnt := 0;
      "bhdvtsvjhgvrh".
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
		v_selects_cnt := 0;
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND
	 (CUSTID < :B1 )
   Rationale
	END IF;
      The SQL spent 100% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.

   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
      execution.
   Rationale
      SQL statement with SQL_ID "bhdvtsvjhgvrh" was executed 13530723 times
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
      and had an average elapsed time of 0.0085 seconds.


		-- so reset flags and counters
Finding 3: "User I/O" wait Class
Impact is 99.18 active sessions, 56.39% of total activity.
----------------------------------------------------------
		v_scan_query_quota := FALSE;
Wait class "User I/O" was consuming significant database time.
Waits for I/O to temporary tablespaces were not consuming significant database
		v_scan_queries_cnt := 0;
time.
The throughput of the I/O subsystem was not significantly lower than expected.

		v_random_access_queries_cnt := 0;
   No recommendations are available.


	END IF;
Finding 4: Global Cache Messaging
Impact is 73.62 active sessions, 41.87% of total activity.
----------------------------------------------------------

Inter-instance messaging was consuming significant database time on this
instance.

	v_loop_cnt := v_loop_cnt + 1 ;
   Recommendation 1: Application Analysis
   Estimated benefit is 73.53 active sessions, 41.87% of total activity.
	v_now := DBMS_UTILITY.GET_TIME();
   ---------------------------------------------------------------------
   Action
      Look at the "Top SQL Statements" finding for SQL statements consuming

      significant time on Cluster waits. For example, the SELECT statement
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
      with SQL_ID "bhdvtsvjhgvrh" is responsible for 100% of Cluster wait
		-- If this is a fixed-iteration count test cycle and we've hit the number of
      during the analysis period.

   Symptoms That Led to the Finding:
		-- iterations then set exit flag
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
		v_stop_immediate := TRUE ;
      Impact is 73.54 active sessions, 41.87% of total activity.


Finding 5: Undersized SGA
	END IF;
Impact is 23.86 active sessions, 13.57% of total activity.
----------------------------------------------------------
END LOOP;
The SGA was inadequately sized, causing additional I/O or hard parses.
The value of parameter "sga_target" was "14336 M" during the analysis period.


   Recommendation 1: Database Configuration
   Estimated benefit is 9.89 active sessions, 5.63% of total activity.
   -------------------------------------------------------------------
v_end_time := v_now ;
   Action
      Increase the size of the SGA by setting the parameter "sga_target" to
      17920 M.
v_now := DBMS_UTILITY.GET_TIME();

   Symptoms That Led to the Finding:
   ---------------------------------
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
      Wait class "User I/O" was consuming significant database time.
      Impact is 99.04 active sessions, 56.39% of total activity.



Finding 6: Buffer Busy - Hot Objects
Impact is 17.19 active sessions, 9.78% of total activity.
v_total_time := v_end_time - v_begin_time ;
---------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;

   No recommendations are available.

   Symptoms That Led to the Finding:
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
      Impact is 17.17 active sessions, 9.78% of total activity.
	 Inter-instance messaging was consuming significant database time on
	 this instance.

	 Impact is 73.53 active sessions, 41.87% of total activity.
	    Wait class "Cluster" was consuming significant database time.
END;</pre_sqltext></td></tr>
	    Impact is 73.54 active sessions, 41.87% of total activity.



<tr><td scope="row" class='awrnc'><a class="awr" name="4ka23y2t2bggx"></a>4ka23y2t2bggx</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

v_default_schema_number PLS_INTEGER := '61';
	  Additional Information
	  ----------------------

Warnings
v_update_pct PLS_INTEGER := '0';
--------
The flushing of snapshots 47 and 48 took 84 seconds which is 11% of the
v_max_loop_iterations PLS_INTEGER := '0';
analysis period time. This may reduce the reliability of the ADDM analysis.

Miscellaneous Information
v_seconds_to_run PLS_INTEGER := '600';
-------------------------
Wait class "Application" was not consuming significant database time.
Wait class "Commit" was not consuming significant database time.
v_scale PLS_INTEGER := '65536';
Wait class "Concurrency" was not consuming significant database time.
Wait class "Configuration" was not consuming significant database time.
v_work_unit PLS_INTEGER := '80' ;
CPU was not a bottleneck for the instance.
Wait class "Network" was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
v_redo_stress  VARCHAR2(12) := 'LITE';
time.
Hard parsing of SQL statements was not consuming significant database time.

v_hot_schema_modulus PLS_INTEGER := '0';
RAC Statistics  DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

				Begin	End
				----- -----
	   Number of Instances:     2	  2
v_do_hotspot   VARCHAR(7) := 'FALSE';
	       Number of LMS's:     6	  6
      Number of realtime LMS's:     6	  6  (0 priority changes)


v_hotspot_mb  NUMBER := '10';
Global Cache Load Profile
~~~~~~~~~~~~~~~~~~~~~~~~~		   Per Second	    Per Transaction
v_hotspot_offset_mb NUMBER := '0';
				      ---------------	    ---------------
  Global Cache blocks received: 		 2.16		       6.41
    Global Cache blocks served: 		 7.23		      21.46
v_hotspot_modulus  PLS_INTEGER := '0';
     GCS/GES messages received: 	    37,095.94		 110,051.69
	 GCS/GES messages sent: 	    32,358.64		  95,997.64

	    DBWR Fusion writes: 		 0.08		       0.23
 Estd Interconnect traffic (KB) 	    13,640.50


v_sleep_modulus PLS_INTEGER := '0';
Global Cache Efficiency Percentages (Target local+remote 100%)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
v_sleep_min NUMBER := '.1';
Buffer access -  local cache %:   97.15
Buffer access - remote cache %:    0.00
Buffer access - 	disk %:    2.85
v_sleep_max NUMBER := '.5';
Global Cache Locality	     %:   80.63


v_scan_query_pct PLS_INTEGER := '0';
Global Cache and Enqueue Services - Workload Characteristics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	  Avg global cache cr block receive time (us):	       49,380.5
v_obfuscate VARCHAR(5)	:= 'FALSE';
     Avg global cache current block receive time (us):		6,749.4
			       Avg LMS process busy %:		   14.1


	    Avg global cache cr block build time (us):		  101.6
      Global cache log flushes for cr blocks served %:		    6.5

	    Avg global cache cr block flush time (us):		4,175.8

	 Avg global cache current block pin time (us):	       10,000.0
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
 Global cache log flushes for current blocks served %:		    3.9
       Avg global cache current block flush time (us):		5,316.5

v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
		     Avg global enqueue get time (us):		1,922.4

Global Cache and Enqueue Services - Messaging Statistics

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     Avg message sent queue time (us):		  387.5
	     Avg message sent queue time on ksxp (us):	       39,816.8
v_num_tmp NUMBER := 0;
	  Avg message received kernel queue time (us):		   42.5
		 Avg message received queue time (us):		   12.2
		    Avg GCS message process time (us):		   11.8

		    Avg GES message process time (us):		   38.5

			    % of direct sent messages:		   3.67
v_loop_cnt PLS_INTEGER := 0;
			  % of indirect sent messages:		  96.20
			% of flow controlled messages:		   0.14
	  -------------------------------------------------------------
v_rowcnt PLS_INTEGER := 0;

Cluster Interconnect
-> if Public/Source at End snap is different a '*' is displayed
v_updates_cnt PLS_INTEGER := 0;
~~~~~~~~~~~~~~~~~~~~
				    Begin			    End
	     --------------------------------------------------   -------
v_selects_cnt PLS_INTEGER := 0;
Interface    IP Address      Pub Source 			  Pub Src
----------   --------------- --- ------------------------------   --- ---

fg-priv:1    169.254.26.102  N

Global Messaging Statistics		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
v_random_access_queries_cnt PLS_INTEGER := 0;

Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
v_scan_queries_cnt PLS_INTEGER := 0;
Cluster reconfiguration count			 0	    0.0 	 0.0
Domain reconfiguration count			 0	    0.0 	 0.0
Global Enqueue S-optim Broadcasts	       100	    0.1 	 0.4

Global Enqueue S-optim S-lock get	    38,549	   51.2        151.8
Global Enqueue S-optim anti-locks		90	    0.1 	 0.4
KA local message waits				 0	    0.0 	 0.0
v_do_scan_query BOOLEAN :=FALSE;
KA local messages received			 0	    0.0 	 0.0
KA messages received actual			 0	    0.0 	 0.0
KA messages received logical			 0	    0.0 	 0.0
v_scan_query_quota  BOOLEAN := FALSE;
KA requests failed				 0	    0.0 	 0.0
KA requests succeeded				 0	    0.0 	 0.0
Pseudo reconfiguration count			 0	    0.0 	 0.0
v_scan_workload_only BOOLEAN := FALSE;
Pseudo rm reconfig count			 0	    0.0 	 0.0
acks for commit broadcast(actual)	       393	    0.5 	 1.5
acks for commit broadcast(logical	       545	    0.7 	 2.1
v_random_workload_only BOOLEAN := FALSE;
broadcast msgs on commit(actual)	       800	    1.1 	 3.1
broadcast msgs on commit(logical)	     1,116	    1.5 	 4.4


v_random_block PLS_INTEGER := 1;
broadcast msgs on commit(wasted)	       505	    0.7 	 2.0
dynamically allocated gcs resourc		 0	    0.0 	 0.0
v_tmp PLS_INTEGER;
dynamically allocated gcs shadows		 0	    0.0 	 0.0
flow control messages received			 2	    0.0 	 0.0
v_now PLS_INTEGER;
flow control messages sent			 4	    0.0 	 0.0
v_brick_wall PLS_INTEGER;
gcs assume cvt					 0	    0.0 	 0.0
gcs assume no cvt			     2,620	    3.5 	10.3
gcs ast to fg				     1,239	    1.6 	 4.9

gcs ast xid					 0	    0.0 	 0.0
gcs bidless ast to lms				 0	    0.0 	 0.0
gcs blocked converts			       227	    0.3 	 0.9
v_begin_time PLS_INTEGER;
gcs blocked cr converts 		       887	    1.2 	 3.5
gcs compatible basts				 2	    0.0 	 0.0
gcs compatible cr basts (global)		33	    0.0 	 0.1
v_end_time PLS_INTEGER;
gcs compatible cr basts (local) 	     3,093	    4.1 	12.2
gcs cr basts to PIs				 0	    0.0 	 0.0
gcs cr requests to slave			 0	    0.0 	 0.0
v_total_time PLS_INTEGER;
gcs cr serve without current lock		 0	    0.0 	 0.0
gcs dbwr flush pi msgs			       998	    1.3 	 3.9
gcs dbwr write request msgs			59	    0.1 	 0.2
v_begin_cpu_tm PLS_INTEGER;
gcs error msgs					 0	    0.0 	 0.0
gcs flash read serve requests to		 0	    0.0 	 0.0
gcs force cr block only 			 2	    0.0 	 0.0
v_end_cpu_tm PLS_INTEGER;
gcs force cr grant				 2	    0.0 	 0.0
gcs force cr no current 			 0	    0.0 	 0.0
gcs forward cr to pinged instance		 0	    0.0 	 0.0
v_total_cpu_tm PLS_INTEGER;
gcs grant ast				     1,239	    1.6 	 4.9
gcs grant request in partial open		 0	    0.0 	 0.0
gcs immediate (compatible) conver	       334	    0.4 	 1.3

gcs immediate (null) converts		       794	    1.1 	 3.1
gcs immediate cr (compatible) con	   391,498	  519.5      1,541.3
gcs immediate cr (null) converts	16,972,035     22,523.2     66,819.0
v_do_sleeps BOOLEAN := FALSE;
gcs lms flush pi msgs				 0	    0.0 	 0.0
gcs lms write request msgs			 9	    0.0 	 0.0
gcs msgs process time(ms)		   329,886	  437.8      1,298.8
v_loop_control BOOLEAN := FALSE;
gcs msgs received			27,941,962     37,081.1    110,007.7
gcs new served by master		       156	    0.2 	 0.6
gcs out-of-order msgs			     1,092	    1.4 	 4.3
v_update_quota BOOLEAN := FALSE;
gcs pings refused			       119	    0.2 	 0.5
gcs pkey conflicts retry			 0	    0.0 	 0.0
gcs queued converts				 0	    0.0 	 0.0
v_select_only_workload BOOLEAN := FALSE;
gcs read-mostly failure unmount d		 0	    0.0 	 0.0
gcs reader bypass N->Xw ping loca		 0	    0.0 	 0.0

v_update_only_workload BOOLEAN := FALSE;
Global Messaging Statistics		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

Statistic				     Total   per Second    per Trans
v_do_update BOOLEAN := FALSE;
--------------------------------- ---------------- ------------ ------------
gcs reader bypass N->Xw ping remo		 0	    0.0 	 0.0
v_do_hot_schema BOOLEAN := FALSE;
gcs reader bypass grant X on assu		 0	    0.0 	 0.0
gcs reader bypass grant ast			 0	    0.0 	 0.0
gcs reader bypass grant fg ast			 0	    0.0 	 0.0
v_stop_immediate BOOLEAN := FALSE;
gcs reader bypass grant immediate		 6	    0.0 	 0.0
gcs recovery claim msgs 			 0	    0.0 	 0.0
gcs refuse xid					 1	    0.0 	 0.0
v_sharing_schema BOOLEAN := FALSE;
gcs refuse xid to fg				 1	    0.0 	 0.0
gcs refuse xid to lms				 0	    0.0 	 0.0
gcs refuse xid to master			 0	    0.0 	 0.0
v_seed VARCHAR2(128);
gcs regular cr					 0	    0.0 	 0.0
gcs resources for dynamic sga			 0	    0.0 	 0.0
v_home_schema_str VARCHAR2(80);
gcs retry convert request			 0	    0.0 	 0.0
gcs shadows for dynamic sga			 0	    0.0 	 0.0
gcs share recovery bast 			 0	    0.0 	 0.0
v_scratch VARCHAR2(200) ;
gcs side channel msgs actual		       478	    0.6 	 1.9
gcs side channel msgs logical		     5,773	    7.7 	22.7
gcs stale cr				       200	    0.3 	 0.8

gcs undo cr				       465	    0.6 	 1.8
gcs write notification msgs			 0	    0.0 	 0.0
gcs writes refused				 0	    0.0 	 0.0
v_cpu_pct NUMBER(6, 3);
ges msgs process time(ms)		       287	    0.4 	 1.1
ges msgs received			     7,457	    9.9 	29.4
ges remote lock allocation		       188	    0.2 	 0.7
v_my_serial NUMBER(16);
global posts dropped				 0	    0.0 	 0.0
global posts queue time 			 0	    0.0 	 0.0
global posts queued				 0	    0.0 	 0.0

global posts requested				 0	    0.0 	 0.0
global posts sent				 0	    0.0 	 0.0
implicit batch messages received	    24,237	   32.2 	95.4
BEGIN
implicit batch messages sent		    23,848	   31.6 	93.9
lmd msg send time(ms)				 0	    0.0 	 0.0
lms(s) msg send time(ms)			 0	    0.0 	 0.0

messages flow controlled		     9,891	   13.1 	38.9
messages queue sent actual		 2,440,059	3,238.1      9,606.5
messages queue sent logical		   394,699	  523.8      1,553.9
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
messages received actual		 4,739,875	6,290.2     18,660.9
messages received logical		27,949,419     37,091.0    110,037.1
messages sent directly			   265,122	  351.8      1,043.8
EXECUTE IMMEDIATE v_home_schema_str;
messages sent indirectly		 6,955,473	9,230.4     27,383.8
messages sent not implicit batche	    20,733	   27.5 	81.6
messages sent pbatched			24,073,293     31,947.1     94,776.7

msgs causing lmd to send msgs			 0	    0.0 	 0.0
msgs causing lms(s) to send msgs		 0	    0.0 	 0.0
msgs received kernel queue time ( 1.1869148030E+12 1.575127E+09 4.672893E+09

msgs received queue time (ms)		   340,441	  451.8      1,340.3
msgs received queued			27,949,419     37,091.0    110,037.1
msgs sent queue time (ms)		   958,572	1,272.1      3,773.9
IF ( v_hot_schema_modulus != 0 ) THEN
msgs sent queue time on ksxp (ms)      175,927,384    233,469.1    692,627.5
msgs sent queued			 2,473,967	3,283.1      9,740.0
msgs sent queued on ksxp		 4,418,426	5,863.6     17,395.4
	v_do_hot_schema := TRUE;
number of broadcasted resources 		 0	    0.0 	 0.0
number of directly freed master r		 0	    0.0 	 0.0
number of ges deadlock detected 		 0	    0.0 	 0.0
END IF;
number of lock borrowed by LMD			 0	    0.0 	 0.0
number of received ODPS messages		 0	    0.0 	 0.0
number of received RBA messages 		 0	    0.0 	 0.0

number of resource borrowed by LM		 0	    0.0 	 0.0
number of sent ODPS messages			 0	    0.0 	 0.0
number of sent RBA messages			 0	    0.0 	 0.0

IF ( v_sleep_modulus != 0 )	  THEN
Global Messaging Statistics		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

Statistic				     Total   per Second    per Trans
	v_do_sleeps := TRUE;
--------------------------------- ---------------- ------------ ------------
process batch messages received 	 4,264,810	5,659.7     16,790.6
process batch messages sent		 4,175,053	5,540.6     16,437.2
END IF;
receiver cycle time			 1,149,849	1,525.9      4,527.0
receiver loop count			 4,900,899	6,503.9     19,294.9

			  ------------------------------------------------------


IF ( v_max_loop_iterations &gt; 0 )  THEN
Global CR Server Statistics		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48

Statistic				    Total
------------------------------ ------------------
	v_loop_control := TRUE ;
CR Block Requests			    1,075
CURRENT Block Requests			      555
Data Block Requests			    1,075
END IF;
Undo Block Requests			       15
TX Block Requests			      441
Current Results 			    1,328
Private results 				5

Zero Results				       34
Disk Read Results			      261
Fail Results					0
Fairness Down Converts			      827
IF ( v_update_pct = 0 ) 	  THEN
Light Works				    1,721
Flushes 				       91
Builds					    1,075
Errors						0
	v_select_only_workload := TRUE;
			  ------------------------------------------------------

Global Current Server Statistics	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
END IF;
-> Pins    = CURRENT Block Pin Operations
-> Flushes = Redo Flush before CURRENT Block Served Operations


Statistic	  Total % <100us   % <1ms  % <10ms % <100ms    % <1s   % <10s
---------- ------------ -------- -------- -------- -------- -------- --------
Pins		     18    55.56    22.22     5.56    11.11	5.56
IF ( v_update_pct = 100 )	  THEN
Flushes 	    158 	    24.68    53.16    22.15
			  ------------------------------------------------------

Global Cache Transfer Statistics	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
	v_update_only_workload := TRUE;
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> Busy        (Busy) - Block Transfer impacted by Remote Contention
END IF;
-> Congested (Congst) - Block Transfer impacted by Remote System Load
-> ordered by CR + Current Blocks Received desc

			       CR			  Current

		 ----------------------------- -----------------------------
Inst Block	   Blocks      %      %      %	 Blocks      %	    %	   %
  No Class	 Received  Immed   Busy Congst Received  Immed	 Busy Congst
IF ( v_scan_query_pct = 0 ) 	THEN
---- ----------- -------- ------ ------ ------ -------- ------ ------ ------
   1 data block       278   69.1   30.9     .0	  1,186   62.8	 36.8	  .4
   1 Others	       33  100.0     .0     .0	     78   11.5	 88.5	  .0
	v_random_workload_only := TRUE;
   1 undo header       21   95.2    4.8     .0	     17     .0	100.0	  .0
   1 undo block 	1  100.0     .0     .0	    N/A    N/A	  N/A	 N/A
			  ------------------------------------------------------
END IF;

Global Cache Transfer Times (us)	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Avg Time - average time of all blocks (Immed,Busy,Congst) in us

-> Immed, Busy, Congst -  Average times in us
-> ordered by CR + Current Blocks Received desc

		    CR Avg Time (us)	     Current Avg Time (us)
IF ( v_scan_query_pct = 100 ) 	THEN
	      --------------------------- ---------------------------
Inst Block
  No Class	 All  Immed   Busy Congst    All  Immed   Busy Congst
	v_scan_workload_only := TRUE;
---- -------- ------ ------ ------ ------ ------ ------ ------ ------
   1 data blo  57114  80263   5434    N/A   6505   6176   7106	 3180
   1 others    31409  31409    N/A    N/A  14071    998  15776	  N/A
END IF;
   1 undo hea	 743	750    608    N/A   2897    N/A   2897	  N/A
   1 undo blo	 342	342    N/A    N/A    N/A    N/A    N/A	  N/A
			  ------------------------------------------------------


Global Cache Transfer (Immediate)	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
v_seconds_to_run := v_seconds_to_run * 100 ;
-> % of Blocks Received requiring 2 or 3 hops
-> ordered by CR + Current Blocks Received desc

				   CR			    Current

		      --------------------------- ---------------------------
 Src Block     Blocks  Immed Blks	%	%  Immed Blks	    %	    %
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
Inst Class	 Lost	 Received    2hop    3hop    Received	 2hop	 3hop
---- -------- ------- ----------- ------- ------- ----------- ------- -------
   1 data blo		      192   100.0     0.0	  745	100.0	  0.0

   1 others		       33   100.0     0.0	    9	100.0	  0.0
   1 undo hea		       20   100.0     0.0	  N/A	  N/A	  N/A
   1 undo blo			1   100.0     0.0	  N/A	  N/A	  N/A
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
			  ------------------------------------------------------

Global Cache Times (Immediate)		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-- DBMS_RANDOM.seed (val =&gt; v_seed);
-> Blocks Lost, 2-hop and 3-hop Average times in (us)
-> ordered by CR + Current Blocks Received desc

		       CR Avg Time (us)   Current Avg Time (us)

		     -------------------- --------------------
 Src Block	Lost
Inst Class	Time  Immed   2hop   3hop  Immed   2hop   3hop
v_begin_time := DBMS_UTILITY.GET_TIME();
---- -------- ------ ------ ------ ------ ------ ------ ------
   1 data blo	      80263  80263    N/A   6176   6176    N/A
   1 others	      31409  31409    N/A    998    998    N/A
v_now := v_begin_time ;
   1 undo hea		750    750    N/A    N/A    N/A    N/A
   1 undo blo		342    342    N/A    N/A    N/A    N/A
			  ------------------------------------------------------

v_brick_wall := v_now + v_seconds_to_run ;
Interconnect Ping Latency Statistics	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Ping latency of the roundtrip of a message from this instance to -> target in
-> The target instance is identified by an instance number.
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
-> Average and standard deviation of ping latency is given in microseconds
-> for message sizes of 500 bytes and 8K.
-> Note that latency of a message from the instance to itself is used as

-> control, since message latency can include wait for CPU

   Target 500B Pin Avg La      Stddev  8K Ping Avg La	   Stddev
 Instance    Count 500B m    500B msg	 Count 8K msg	   8K msg
----------------------------------------------------------------------------------------------------------------------
--------- -------- ------ ----------- -------- ------ -----------
	1	67  48130      373.77	    73	47609	   358.16
	2	67    289	  .14	    73	  273	      .14
			  ------------------------------------------------------
-- The following WHILE loop is the master work loop control

Interconnect Throughput by Client	 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Throughput of interconnect usage by major consumers
-> All throughput numbers are megabytes per second
----------------------------------------------------------------------------------------------------------------------

			Send	 Receive
Used By 	  Mbytes/sec  Mbytes/sec
---------------- ----------- -----------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

Global Cache		 .03	     .01
Parallel Query		 .02	     .00
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
DB Locks		8.04	   10.05
DB Streams		 N/A	     N/A
Other			 .01	     .01
			  ------------------------------------------------------
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN

Interconnect Device Statistics		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Throughput and errors of interconnect devices (at OS level)
-> All throughput numbers are megabytes per second
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );

Device Name	IP Address	 Public Source
--------------- ---------------- ------ -------------------------------
				  Send	   Send
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
       Send	Send	 Send	Buffer	Carrier
 Mbytes/sec   Errors  Dropped  Overrun	   Lost
----------- -------- -------- -------- --------
			       Receive	Receive
			DBMS_LOCK.SLEEP(v_num_tmp);
    Receive  Receive  Receive	Buffer	  Frame
 Mbytes/sec   Errors  Dropped  Overrun	 Errors
----------- -------- -------- -------- --------
fg-priv:1	169.254.26.102	 NO
		END IF;
	.00	   0	    0	     0	      0
	.00	   0	    0	     0	      0
			  ------------------------------------------------------

	END IF;
Dynamic Remastering Statistics		 DB/Inst: P60SDB/p60sdb2  Snaps: 47-48
-> Times are in seconds
-> Affinity objects - Affinity objects mastered at the begin/end snapshot

-> Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema

							per    Begin	  End
Name					Total	Remaster Op	Snap	 Snap
-------------------------------- ------------ ------------- -------- --------
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
remaster ops				    1	       1.00
remastered objects			   81	      81.00
replayed locks received 		    0	       0.00
replayed locks sent			    0	       0.00
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
resources cleaned			    0	       0.00
remaster time (s)			  0.3	       0.31
freeze time (s) 			  0.0	       0.01
cleanup time (s)			  0.1	       0.05
			v_sharing_schema := TRUE ;
replay time (s) 			  0.1	       0.05
fixwrite time (s)			  0.0	       0.04
sync time (s)				  0.1	       0.13
affinity objects					N/A	  52	   52
		ELSE
read-mostly objects					N/A	  19	  100
affinity objects (other inst)				N/A	   3	    3
read-mostly objects (persistent)			N/A	   2	    2
			IF ( v_sharing_schema = TRUE ) THEN
			  ------------------------------------------------------

End of Report
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="4kvs15brhx2na"></a>4kvs15brhx2na</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '210';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
Report written to awr.txt
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
SQL> v_end_cpu_tm PLS_INTEGER;
SQL> v_total_cpu_tm PLS_INTEGER;
SQL> SQL> 
SQL> SQL> v_do_sleeps BOOLEAN := FALSE;
SQL> v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';

			v_sharing_schema := TRUE ;



		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;

			v_scan_query_quota := TRUE ;
Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
		ELSE
AWR reports can be generated in the following formats.	Please enter the
			IF ( v_scan_workload_only = TRUE ) THEN
name of the format at the prompt.  Default value is 'html'.

'html'		HTML format (default)
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
'text'		Text format
'active-html'	Includes Performance Hub active report

				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="4za5zb55hj6w6"></a>4za5zb55hj6w6</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '11';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;


Type Specified:  text
v_num_tmp NUMBER := 0;


v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="53saa2zkr6wc3"></a>53saa2zkr6wc3</td><td class='awrc'><pre_sqltext class="awr">select intcol#, nvl(pos#, 0), col#, nvl(spare1, 0) from ccol$ where con#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="55qsa2qh8h7r3"></a>55qsa2qh8h7r3</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '191';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5b5dam6wbmycc"></a>5b5dam6wbmycc</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '79';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;




IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--


		-- Do a SELECT statement

		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5cu0x10yu88sw"></a>5cu0x10yu88sw</td><td class='awrnc'><pre_sqltext class="awr">merge into sys.wri$_index_usage iu					     using dual 								   on (iu.obj# = :objn) 						       when matched then							     update									  set iu.total_access_count = iu.total_access_count + :ns,			    iu.total_rows_returned = iu.total_rows_returned + :rr,			  iu.total_exec_count = iu.total_exec_count + :ne,				iu.bucket_0_access_count = iu.bucket_0_access_count + :nsh0,		      iu.bucket_1_access_count = iu.bucket_1_access_count + :nsh1,		    iu.bucket_2_10_access_count = iu.bucket_2_10_access_count + :nsh2_10,	  iu.bucket_2_10_rows_returned = iu.bucket_2_10_rows_returned + 						  :nrh2_10,				     iu.bucket_11_100_access_count = iu.bucket_11_100_access_count +						     :nsh11_100,				iu.bucket_11_100_rows_returned = iu.bucket_11_100_rows_returned +						:nrh11_100,				   iu.bucket_101_1000_access_count = iu.bucket_101_1000_access_count +						   :nsh101_1000,			      iu.bucket_101_1000_rows_returned = iu.bucket_101_1000_rows_returned +					      :nrh101_1000,				 iu.bucket_1000_plus_access_count = iu.bucket_1000_plus_access_count +						 :nsh1000plus,				    iu.bucket_1000_plus_rows_returned = iu.bucket_1000_plus_rows_returned					    + :nrh1000plus,			       last_used = SYSDATE						       when NOT matched then							     insert (iu.obj#,  iu.total_access_count,						    iu.total_rows_returned,							  iu.total_exec_count,								iu.bucket_0_access_count,						      iu.bucket_1_access_count, 						    iu.bucket_2_10_access_count,						  iu.bucket_2_10_rows_returned, 						iu.bucket_11_100_access_count,						      iu.bucket_11_100_rows_returned,						    iu.bucket_101_1000_access_count,						  iu.bucket_101_1000_rows_returned,						iu.bucket_1000_plus_access_count,					      iu.bucket_1000_plus_rows_returned,					    iu.last_used)							 values (:objn,  :ns,  :rr,								 :ne,  :nsh0,  :nsh1,  :nsh2_10,  :nrh2_10,  :nsh11_100,  :nrh11_100,		       :nsh101_1000,  :nrh101_1000,  :nsh1000plus,  :nrh1000plus,			SYSDATE)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5n1fs4m2n2y0r"></a>5n1fs4m2n2y0r</td><td class='awrc'><pre_sqltext class="awr">select pos#, intcol#, col#, spare1, bo#, spare2, spare3 from icol$ where obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5u7g54s63p4ts"></a>5u7g54s63p4ts</td><td class='awrnc'><pre_sqltext class="awr">select toid from type$ where package_obj#=:1 and typ_name=:2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5v778mm0ddnmm"></a>5v778mm0ddnmm</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '221';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="61tn3mam0vq0b"></a>61tn3mam0vq0b</td><td class='awrnc'><pre_sqltext class="awr"> SELECT source,	       (case when time_secs &lt; 1 then 1 else time_secs end) as time_secs,	    operation  FROM   ( SELECT	1  as source,		       trunc((sysdate - cast(ll.log_date as date)) * 86400)		      as time_secs,		     decode(ll.operation,			  'OPEN',   0			     ,	 1 ) as operation,		    ll.log_id as log_id 	 FROM  DBA_SCHEDULER_WINDOW_LOG ll ,		      ( SELECT max(l.log_id) as max_log_id		     FROM  DBA_SCHEDULER_WINDOW_LOG l , 			 DBA_SCHEDULER_WINGROUP_MEMBERS m		    WHERE  l.window_name = m.window_name		     AND  m.window_group_name = 'MAINTENANCE_WINDOW_GROUP'		       AND  l.operation in ('OPEN',  'CLOSE')			  AND  CAST(l.log_date AS DATE) &lt; ( SELECT cast(min(end_interval_time) as date) as btime FROM  WRM$_SNAPSHOT bsi  WHERE  bsi.dbid = :dbid  AND bsi.snap_id = :bid							 )		 ) max_log	    WHERE  ll.log_id = max_log.max_log_id	   UNION ALL	      SELECT  2  as source,		      trunc((sysdate - cast(l.log_date as date)) * 86400)		    as time_secs,		   decode(l.operation,			       'OPEN',	 0			  ,   1 ) as operation, 		 l.log_id as log_id	     FROM  DBA_SCHEDULER_WINDOW_LOG l , 		DBA_SCHEDULER_WINGROUP_MEMBERS m	  WHERE  l.window_name = m.window_name		  AND  m.window_group_name = 'MAINTENANCE_WINDOW_GROUP' 	   AND	l.operation in ('OPEN',  'CLOSE')	     AND  CAST(l.log_date AS DATE) &lt;= ( SELECT cast(max(end_interval_time) as date) as etime FROM  WRM$_SNAPSHOT esi  WHERE	esi.dbid = :dbid  AND esi.snap_id = :eid					     )		 AND  CAST(l.log_date AS DATE) &gt;= ( SELECT cast(min(end_interval_time) as date) as btime FROM  WRM$_SNAPSHOT bsi  WHERE  bsi.dbid = :dbid  AND bsi.snap_id = :bid						 )	   UNION ALL	      SELECT  0  as source,		     trunc((sysdate - et.etime) * 86400) as time_secs,			 3  as operation,		   0 as log_id		FROM (	SELECT cast(max(end_interval_time) as date) as etime FROM  WRM$_SNAPSHOT esi  WHERE  esi.dbid = :dbid  AND esi.snap_id = :eid		    ) et	  UNION ALL	     SELECT  0	as source,		    trunc((sysdate - bt.btime) * 86400) as time_secs,			2  as operation,		  0 as log_id	       FROM (  SELECT cast(min(end_interval_time) as date) as btime FROM  WRM$_SNAPSHOT bsi  WHERE  bsi.dbid = :dbid  AND bsi.snap_id = :bid		   ) bt        )  WHERE time_secs &gt;= 0  ORDER BY source ASC,  time_secs DESC,  log_id ASC </pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6gfqnqrxd0dmy"></a>6gfqnqrxd0dmy</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '35';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6pcyz05z3k6jd"></a>6pcyz05z3k6jd</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '183';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6upw6ujrb22ua"></a>6upw6ujrb22ua</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '105';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6wm3n4d7bnddg"></a>6wm3n4d7bnddg</td><td class='awrnc'><pre_sqltext class="awr"> SELECT source,	       (case when time_secs &lt; 1 then 1 else time_secs end) as time_secs,	    operation  FROM   ( SELECT	1  as source,		       trunc((sysdate - cast(ll.log_date as date)) * 86400)		      as time_secs,		     decode(ll.operation,			  'OPEN',   0			     ,	 1 ) as operation,		    ll.log_id as log_id 	 FROM  DBA_SCHEDULER_WINDOW_LOG ll ,		      ( SELECT max(l.log_id) as max_log_id		     FROM  DBA_SCHEDULER_WINDOW_LOG l , 			 DBA_SCHEDULER_WINGROUP_MEMBERS m		    WHERE  l.window_name = m.window_name		     AND  m.window_group_name = 'MAINTENANCE_WINDOW_GROUP'		       AND  l.operation in ('OPEN',  'CLOSE')			  AND  CAST(l.log_date AS DATE) &lt; ( SELECT cast(min(end_interval_time) as date) as btime FROM  WRM$_SNAPSHOT bsi  WHERE  bsi.dbid = :dbid  AND bsi.instance_number = :inst  AND bsi.snap_id = :bid							  )		  ) max_log	     WHERE  ll.log_id = max_log.max_log_id	    UNION ALL	       SELECT  2  as source,		       trunc((sysdate - cast(l.log_date as date)) * 86400)		     as time_secs,		    decode(l.operation, 			'OPEN',   0			   ,   1 ) as operation,		  l.log_id as log_id	      FROM  DBA_SCHEDULER_WINDOW_LOG l ,		 DBA_SCHEDULER_WINGROUP_MEMBERS m	   WHERE  l.window_name = m.window_name 	   AND	m.window_group_name = 'MAINTENANCE_WINDOW_GROUP'	    AND  l.operation in ('OPEN',  'CLOSE')	      AND  CAST(l.log_date AS DATE) &lt;= ( SELECT cast(max(end_interval_time) as date) as etime FROM  WRM$_SNAPSHOT esi  WHERE  esi.dbid = :dbid  AND esi.instance_number = :inst  AND esi.snap_id = :eid					       )	   AND	CAST(l.log_date AS DATE) &gt;= ( SELECT cast(min(end_interval_time) as date) as btime FROM  WRM$_SNAPSHOT bsi  WHERE  bsi.dbid = :dbid	AND bsi.instance_number = :inst  AND bsi.snap_id = :bid 					    )	      UNION ALL 	 SELECT  0  as source,			trunc((sysdate - et.etime) * 86400) as time_secs,		    3  as operation,		      0 as log_id	   FROM (  SELECT cast(max(end_interval_time) as date) as etime FROM  WRM$_SNAPSHOT esi  WHERE	esi.dbid = :dbid  AND esi.instance_number = :inst  AND esi.snap_id = :eid		) et	      UNION ALL 	 SELECT  0  as source,			trunc((sysdate - bt.btime) * 86400) as time_secs,		    2  as operation,		      0 as log_id	   FROM (  SELECT cast(min(end_interval_time) as date) as btime FROM  WRM$_SNAPSHOT bsi  WHERE	bsi.dbid = :dbid  AND bsi.instance_number = :inst  AND bsi.snap_id = :bid		) bt	    )  WHERE time_secs &gt;= 0	ORDER BY source ASC,  time_secs DESC,  log_id ASC </pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6wvzvgvg6qsyb"></a>6wvzvgvg6qsyb</td><td class='awrc'><pre_sqltext class="awr">INSERT INTO wri$_adv_findings (id,  task_id,  type,  parent,  obj_id,  impact_msg_id,  impact_val,  msg_id,  more_info_id,  name_msg_code,  flags,  exec_name) VALUES (:1,  :2,  :3,  :4,	:5,  :6,  :7, :8,  :9,	:10,  :11,  :12) </pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6y55dxn24t86q"></a>6y55dxn24t86q</td><td class='awrnc'><pre_sqltext class="awr">select obj#,  intcol#,  ts#,  file#,  block#,  property from lob$ where lobj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="7j116g127a7n9"></a>7j116g127a7n9</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '92';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7mzdtp0dvu09c"></a>7mzdtp0dvu09c</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '66';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="7vb6ktx6wbjj7"></a>7vb6ktx6wbjj7</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '116';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="804vrfqav27ua"></a>804vrfqav27ua</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '81';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="87gaftwrm2h68"></a>87gaftwrm2h68</td><td class='awrc'><pre_sqltext class="awr">select o.owner#, o.name, o.namespace, o.remoteowner, o.linkname, o.subname from obj$ o where o.obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="8fgdzmkchnn1a"></a>8fgdzmkchnn1a</td><td class='awrnc'><pre_sqltext class="awr">INSERT /*+ APPEND  LEADING(@&quot;SEL$F5BB74E1&quot; &quot;H&quot;@&quot;SEL$2&quot; &quot;A&quot;@&quot;SEL$1&quot;)  USE_NL(@&quot;SEL$F5BB74E1&quot; &quot;A&quot;@&quot;SEL$1&quot;) 	*/ INTO  WRH$_ACTIVE_SESSION_HISTORY  ( snap_id,  dbid,  instance_number ,  sample_id,	sample_time, sample_time_utc,  usecs_per_row ,	session_id,  session_serial#,  session_type ,  flags ,	user_id ,  sql_id,  sql_child_number,  sql_opcode,  force_matching_signature ,	top_level_sql_id,  top_level_sql_opcode ,  sql_plan_hash_value,  sql_full_plan_hash_value ,  sql_adaptive_plan_resolved ,  sql_plan_line_id ,  sql_plan_operation#,  sql_plan_options# ,  sql_exec_id,	sql_exec_start ,  plsql_entry_object_id,  plsql_entry_subprogram_id ,  plsql_object_id,        plsql_subprogram_id ,  qc_instance_id,  qc_session_id,  qc_session_serial#,  px_flags ,	event_id,  seq#,  p1,  p2,  p3 ,  wait_time,  time_waited ,  blocking_session,	blocking_session_serial#,  blocking_inst_id ,  current_obj#,  current_file#,  current_block#,  current_row# ,  top_level_call#,  consumer_group_id,  xid,  remote_instance#,  time_model ,  service_hash,  program,  module,  action,  client_id,  machine,  port,    ecid ,  dbreplay_file_id,  dbreplay_call_counter ,  con_dbid,  per_pdb ,	tm_delta_time,	tm_delta_cpu_time,  tm_delta_db_time,  delta_time,  delta_read_io_requests,  delta_write_io_requests,  delta_read_io_bytes,  delta_write_io_bytes,  delta_interconnect_io_bytes,  pga_allocated,  temp_space_allocated ,  dbop_name,  dbop_exec_id  )  (SELECT /*+ PARAM('_module_action_old_length', 0) */:snap_id,  :dbid,  :instance_number ,  a.sample_id,	a.sample_time, a.sample_time_utc ,  a.usecs_per_row * :disk_filter_ratio ,  a.session_id,  a.session_serial#,  a.session_type ,  decode(a.flags,  0,  to_number(NULL),	a.flags) ,  a.user_id ,  a.sql_id,  a.sql_child_number,  a.sql_opcode,	a.force_matching_signature ,  a.top_level_sql_id,  a.top_level_sql_opcode ,  a.sql_plan_hash_value,  a.sql_full_plan_hash_value ,  a.sql_adaptive_plan_resolved ,  a.sql_plan_line_id ,  a.sql_plan_operation#,  a.sql_plan_options# ,	a.sql_exec_id,	a.sql_exec_start ,  a.plsql_entry_object_id,  a.plsql_entry_subprogram_id ,  a.plsql_object_id,        a.plsql_subprogram_id ,	a.qc_instance_id,  a.qc_session_id,  a.qc_session_serial#,  a.px_flags ,  a.event_id,  a.seq#,	a.p1,  a.p2,  a.p3 ,  a.wait_time,  a.time_waited ,  a.blocking_session,  a.blocking_session_serial#,  a.blocking_inst_id ,  a.current_obj#,  a.current_file#,	a.current_block#,  a.current_row# ,  a.top_level_call#,  a.consumer_group_id,  a.xid,  a.remote_instance# ,  a.time_model ,  a.service_hash ,  substrb(a.program,  1,  64) ,  a.module,  a.action,  a.client_id,  a.machine,  a.port,  a.ecid ,  a.dbreplay_file_id,  a.dbreplay_call_counter ,  a.con_dbid,  a.con_id ,  decode(a.tm_delta_time,  0,  to_number(null),  a.tm_delta_time),  decode(a.tm_delta_time,  0,  to_number(null),  a.tm_delta_cpu_time),  decode(a.tm_delta_time,  0,  to_number(null),  a.tm_delta_db_time),  decode(a.delta_time,  0,  to_number(null),	    a.delta_time),  decode(a.delta_time,  0,  to_number(null),		 decode(a.delta_read_io_requests,  0,  to_number(null), 		 a.delta_read_io_requests)),  decode(a.delta_time,  0,	to_number(null),	   decode(a.delta_write_io_requests,  0,  to_number(null),		    a.delta_write_io_requests)),  decode(a.delta_time,	0,  to_number(null),	       decode(a.delta_read_io_bytes,  0,  to_number(null),		    a.delta_read_io_bytes)),  decode(a.delta_time,  0,	to_number(null),	   decode(a.delta_write_io_bytes,  0,  to_number(null), 		 a.delta_write_io_bytes)),  decode(a.delta_time,  0,  to_number(null),		 decode(a.delta_interconnect_io_bytes,	0,  to_number(null),		      a.delta_interconnect_io_bytes)),	decode(a.pga_allocated,  0,  to_number(null),  a.pga_allocated),  decode(a.pga_allocated,  0,  to_number(null), 	  decode(a.temp_space_allocated,  0,  to_number(null),			a.temp_space_allocated)) ,  a.dbop_name,  a.dbop_exec_id FROM	   x$ash a,	      (SELECT h.sample_addr,  h.sample_id	    FROM   x$kewash h	       WHERE		      ( (h.sample_id &gt;= :begin_flushing) and 		  (h.sample_id &lt;  :latest_sample_id) )	      and (nlssort(h.is_awr_sample, 'nls_sort=BINARY') =		  nlssort('Y',	'nls_sort=BINARY'))	      ) shdr  WHERE (1 = 1)	and shdr.sample_addr	 = a.sample_addr     and shdr.sample_id       = a.sample_id	and nlssort(a.need_awr_sample,	'nls_sort=BINARY') =	     nlssort('Y',  'nls_sort=BINARY')) </pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="8swypbbr0m372"></a>8swypbbr0m372</td><td class='awrc'><pre_sqltext class="awr">select order#, columns, types from access$ where d_obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="8wyaxgug4a648"></a>8wyaxgug4a648</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '175';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="91uw3n02c1mc0"></a>91uw3n02c1mc0</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '166';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9babjv8yq8ru3"></a>9babjv8yq8ru3</td><td class='awrnc'><pre_sqltext class="awr">BEGIN DBMS_OUTPUT.GET_LINES(:LINES,  :NUMLINES); END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9d1h2t7jhjzb0"></a>9d1h2t7jhjzb0</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '18';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
Current Database
END IF;
~~~~~~~~~~~~~~~~
DB Id	       DB Name	      Container Name

-------------- -------------- --------------
 3890827801	P60SDB	       p60sdb


IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9fjf75a1s4y19"></a>9fjf75a1s4y19</td><td class='awrnc'><pre_sqltext class="awr">select procedure#, procedurename, properties, itypeobj#,  properties2 from procedureinfo$ where obj#=:1 order by procedurename desc,  overload# desc</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9tt2m0mpc2qqp"></a>9tt2m0mpc2qqp</td><td class='awrc'><pre_sqltext class="awr">select /*+ index(idl_char$ i_idl_char1) */ piece#, length, piece from idl_char$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9yv5dwv8k0awg"></a>9yv5dwv8k0awg</td><td class='awrnc'><pre_sqltext class="awr">WITH MONITOR_DATA AS (SELECT INST_ID,  KEY,  NVL2(PX_QCSID,  NULL,  STATUS) STATUS,  FIRST_REFRESH_TIME,  LAST_REFRESH_TIME,  REFRESH_COUNT,  PROCESS_NAME,  SID,  SQL_ID,  SQL_EXEC_START,  SQL_EXEC_ID,  DBOP_NAME,  DBOP_EXEC_ID,  SQL_PLAN_HASH_VALUE,  SQL_FULL_PLAN_HASH_VALUE,  SESSION_SERIAL#,	SQL_TEXT,  PX_SERVER#,	PX_SERVER_GROUP,  PX_SERVER_SET,  PX_QCINST_ID,  PX_QCSID,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) ELSE ELAPSED_TIME END ELAPSED_TIME,  QUEUING_TIME,  CPU_TIME,  APPLICATION_WAIT_TIME,  CONCURRENCY_WAIT_TIME,  CLUSTER_WAIT_TIME,  USER_IO_WAIT_TIME,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN 0 ELSE ELAPSED_TIME - (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) END OTHER_WAIT_TIME,  PLSQL_EXEC_TIME,  JAVA_EXEC_TIME,	FETCHES,  BUFFER_GETS,	IO_INTERCONNECT_BYTES IO_INTER_BYTES,  PHYSICAL_READ_REQUESTS READ_REQS,  PHYSICAL_READ_BYTES READ_BYTES,  PHYSICAL_WRITE_REQUESTS WRITE_REQS,	PHYSICAL_WRITE_BYTES WRITE_BYTES,  NVL(PHYSICAL_READ_BYTES,  0) + NVL(PHYSICAL_WRITE_BYTES,  0) IO_BYTES,  NVL(PHYSICAL_READ_REQUESTS,	0) + NVL(PHYSICAL_WRITE_REQUESTS,  0) IO_REQS,	IO_CELL_UNCOMPRESSED_BYTES IO_UNC_BYTES,  IO_CELL_OFFLOAD_ELIGIBLE_BYTES IO_ELIG_BYTES,  IO_CELL_OFFLOAD_RETURNED_BYTES IO_RET_BYTES,  USER# USERID,  USERNAME,  MODULE,  ACTION,  SERVICE_NAME,  CLIENT_IDENTIFIER,  CLIENT_INFO,  PROGRAM,  PLSQL_OBJECT_ID PL_OID,  PLSQL_SUBPROGRAM_ID PL_PROGID,  PLSQL_ENTRY_OBJECT_ID PL_ENTRY_OID,  PLSQL_ENTRY_SUBPROGRAM_ID PL_ENTRY_PROGID,	PX_MAXDOP MAX_DOP,  PX_IS_CROSS_INSTANCE,  PX_MAXDOP_INSTANCES MAX_DOP_INSTANCES,  PX_SERVERS_REQUESTED SERVERS_REQUESTED,  PX_SERVERS_ALLOCATED SERVERS_ALLOCATED,  ERROR_NUMBER,  ERROR_FACILITY,  ERROR_MESSAGE,  NVL2(OTHER_XML,  'Y',  NULL) HAS_OTHER_XML,  NVL2(BINDS_XML,  'Y',  NULL) HAS_BINDS_XML,  NVL2(RM_CONSUMER_GROUP,	NVL2(RM_LAST_ACTION_TIME,  TO_CHAR(RM_LAST_ACTION_TIME,  :B12 ),  '00/00/0000 00:00:01') || XMLELEMENT( &quot;rminfo&quot;,  XMLATTRIBUTES( RM_LAST_ACTION AS &quot;rmlastact&quot;,  RM_LAST_ACTION_REASON AS &quot;rmlastreason&quot;,  TO_CHAR(RM_LAST_ACTION_TIME,	:B12 ) AS &quot;rmlasttime&quot;,  RM_CONSUMER_GROUP AS &quot;rmcg&quot;)).GETSTRINGVAL(),  '00/00/0000 00:00:00') RM_INFO,  CON_NAME,	CON_ID FROM GV$ALL_SQL_MONITOR MO1 WHERE MO1.INST_ID BETWEEN :B11 AND :B10 AND MO1.SQL_ID = NVL(:B9 ,  MO1.SQL_ID) AND MO1.SQL_EXEC_START = NVL(:B8 ,  MO1.SQL_EXEC_START) AND MO1.SQL_EXEC_ID = NVL(:B7 ,  MO1.SQL_EXEC_ID) OR (MO1.DBOP_NAME = NVL(:B6 ,  MO1.DBOP_NAME) AND MO1.DBOP_EXEC_ID = NVL(:B5 ,  MO1.DBOP_EXEC_ID)) AND ((:B4 = 1 AND MO1.PX_QCSID IS NULL) OR (MO1.PX_SERVER_GROUP = NVL(:B3 ,  MO1.PX_SERVER_GROUP) AND MO1.PX_SERVER_SET = NVL(:B2 ,  MO1.PX_SERVER_SET) AND MO1.PX_SERVER# = NVL(:B1 ,	MO1.PX_SERVER#)))),  MONITOR_AGG AS (SELECT MAX_PX_QCSID,  MAX_KEY,  MAX_INST_ID,  MAX_SESSION_ID,  MAX_SESSION_SERIAL,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,	SUM_SERVERS_REQUESTED,	SUM_SERVERS_ALLOCATED,	DIST_INST_COUNT,  DIST_PX_GROUP_COUNT,	DIST_PX_SET_COUNT,  MAX_PLAN_HASH_VALUE,  MAX_FULL_PLAN_HASH_VALUE,  MAX_USERID,  MAX_PROGRAM,	MAX_USERNAME,  MAX_MODULE,  MAX_ACTION,  MAX_SERVICE_NAME,  MAX_CLIENT_ID,  MAX_CLIENT_INFO,  MAX_ERROR_NUMBER,  MAX_ERROR_FACILITY,  MAX_ERROR_MESSAGE,  QC_HAS_OTHER_XML,  QC_HAS_BINDS_XML,	MAX_PL_OID,  MAX_PL_PROGID,  MAX_PL_ENTRY_OID,	MAX_PL_ENTRY_PROGID,  MAX_SQL_ID,  MAX_SQL_EXEC_START,	MAX_SQL_EXEC_ID,  MAX_LAST_REFRESH_TIME,  MAX_DBOP_NAME,  MAX_DBOP_EXEC_ID,  CASE WHEN MAX_PL_OID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',	'.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_OID AND P.SUBPROGRAM_ID = MAX_PL_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_NAME,  CASE WHEN MAX_PL_ENTRY_OID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_ENTRY_OID AND P.SUBPROGRAM_ID = MAX_PL_ENTRY_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_ENTRY_NAME,  MAX_STATUS,  SUM_REFRESH_COUNT,  MIN_FIRST_REFRESH_TIME,  SQLMON_TEXT,  SUM_ELAPSED_TIME,	MAX_ELAPSED_TIME,  MAX_QUEUING_TIME,  SUM_CPU_TIME,  SUM_USER_IO_WAIT_TIME,  SUM_APPLICATION_WAIT_TIME,  SUM_CONCURRENCY_WAIT_TIME,  SUM_CLUSTER_WAIT_TIME,  SUM_PLSQL_EXEC_TIME,  SUM_JAVA_EXEC_TIME,	SUM_OTHER_WAIT_TIME,  SUM_FETCHES,  SUM_BUFFER_GETS,  SUM_READ_REQS,  SUM_READ_BYTES,  SUM_WRITE_REQS,	SUM_WRITE_BYTES,  SUM_IO_BYTES,  SUM_IO_INTER_BYTES,  SUM_IO_UNC_BYTES,  SUM_IO_ELIG_BYTES,  SUM_IO_RET_BYTES,	DECODE(:B14 ,  1,  'db_name',  SYS_CONTEXT('userenv',  'db_unique_name')) DB_UNIQUE_NAME,  DECODE(:B14 ,  1,  'platform_name',	SYS.DBMS_UTILITY.PORT_STRING) PLATFORM_NAME,  DECODE(:B14 ,  1,  'host_name',  SYS_CONTEXT('userenv',  'server_host')) HOST_NAME,  AGG_RM_INFO MAX_RM_INFO,  MAX_CON_NAME,  DECODE(MAX_CON_ID,	0,  NULL,  MAX_CON_ID) MAX_CON_ID FROM (SELECT MAX(PX_QCSID) MAX_PX_QCSID,  MAX(CASE WHEN PX_QCSID IS NULL THEN KEY ELSE NULL END) MAX_KEY,  MAX(CASE WHEN PX_QCSID IS NULL THEN INST_ID ELSE NULL END) MAX_INST_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SID ELSE NULL END) MAX_SESSION_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SESSION_SERIAL# ELSE NULL END) MAX_SESSION_SERIAL,  MAX(MAX_DOP) MAX_PX_DOP,	MAX(MAX_DOP_INSTANCES) MAX_PX_DOP_INSTANCES,  MAX(PX_IS_CROSS_INSTANCE) MAX_PX_IS_CROSS_INSTANCE,  SUM(SERVERS_REQUESTED) SUM_SERVERS_REQUESTED,  SUM(SERVERS_ALLOCATED) SUM_SERVERS_ALLOCATED,  COUNT(DISTINCT INST_ID) DIST_INST_COUNT,  COUNT(DISTINCT PX_SERVER_GROUP) DIST_PX_GROUP_COUNT,  COUNT(DISTINCT PX_SERVER_SET) DIST_PX_SET_COUNT,  MAX(SQL_PLAN_HASH_VALUE) MAX_PLAN_HASH_VALUE,  MAX(SQL_FULL_PLAN_HASH_VALUE) MAX_FULL_PLAN_HASH_VALUE,  MAX(USERID) MAX_USERID,  MAX(PROGRAM) MAX_PROGRAM,  MAX(USERNAME) MAX_USERNAME,  MAX(MODULE) MAX_MODULE,  MAX(ACTION) MAX_ACTION,  MAX(SERVICE_NAME) MAX_SERVICE_NAME,  MAX(CLIENT_IDENTIFIER) MAX_CLIENT_ID,  MAX(CLIENT_INFO) MAX_CLIENT_INFO,  MAX(ERROR_NUMBER) MAX_ERROR_NUMBER,  MAX(ERROR_FACILITY) MAX_ERROR_FACILITY,  MAX(ERROR_MESSAGE) MAX_ERROR_MESSAGE,  MAX(NVL2(PX_QCSID,  HAS_OTHER_XML,  NULL)) QC_HAS_OTHER_XML,	MAX(HAS_BINDS_XML) QC_HAS_BINDS_XML,  MAX(PL_OID) MAX_PL_OID,  MAX(PL_PROGID) MAX_PL_PROGID,  MAX(PL_ENTRY_OID) MAX_PL_ENTRY_OID,  MAX(PL_ENTRY_PROGID) MAX_PL_ENTRY_PROGID,  MAX(SQL_ID) MAX_SQL_ID,  MAX(SQL_EXEC_START) MAX_SQL_EXEC_START,	MAX(SQL_EXEC_ID) MAX_SQL_EXEC_ID,  MAX(LAST_REFRESH_TIME) MAX_LAST_REFRESH_TIME,  MAX(STATUS) MAX_STATUS,  SUM(REFRESH_COUNT) SUM_REFRESH_COUNT,  MIN(FIRST_REFRESH_TIME) MIN_FIRST_REFRESH_TIME,  MAX(DBOP_NAME) MAX_DBOP_NAME,  MAX(DBOP_EXEC_ID) MAX_DBOP_EXEC_ID,  CASE WHEN :B13 = 0 THEN NULL ELSE MAX(SQL_TEXT) END SQLMON_TEXT,  SUM(ELAPSED_TIME) SUM_ELAPSED_TIME,  MAX(ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(QUEUING_TIME) MAX_QUEUING_TIME,	SUM(CPU_TIME) SUM_CPU_TIME,  SUM(USER_IO_WAIT_TIME) SUM_USER_IO_WAIT_TIME,  SUM(APPLICATION_WAIT_TIME) SUM_APPLICATION_WAIT_TIME,  SUM(CONCURRENCY_WAIT_TIME) SUM_CONCURRENCY_WAIT_TIME,  SUM(CLUSTER_WAIT_TIME) SUM_CLUSTER_WAIT_TIME,  SUM(PLSQL_EXEC_TIME) SUM_PLSQL_EXEC_TIME,  SUM(JAVA_EXEC_TIME) SUM_JAVA_EXEC_TIME,  SUM(OTHER_WAIT_TIME) SUM_OTHER_WAIT_TIME,	SUM(FETCHES) SUM_FETCHES,  SUM(BUFFER_GETS) SUM_BUFFER_GETS,  SUM(READ_REQS) SUM_READ_REQS,  SUM(READ_BYTES) SUM_READ_BYTES,  SUM(WRITE_REQS) SUM_WRITE_REQS,  SUM(WRITE_BYTES) SUM_WRITE_BYTES,  NVL(SUM(READ_BYTES),	0) + NVL(SUM(WRITE_BYTES),  0) SUM_IO_BYTES,  SUM(IO_INTER_BYTES) SUM_IO_INTER_BYTES,  SUM(IO_UNC_BYTES)
 SUM_IO_UNC_BYTES,  SUM(IO_ELIG_BYTES) SUM_IO_ELIG_BYTES,  SUM(IO_RET_BYTES) SUM_IO_RET_BYTES,	MAX(RM_INFO) AGG_RM_INFO,  MAX(CON_NAME) MAX_CON_NAME,	MAX(CON_ID) MAX_CON_ID FROM MONITOR_DATA) MD),	ASH_DATA AS (SELECT AD0.INST_ID,  AD0.SESSION_ID,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.ACTIVITY_BUCKET_NUM,	AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.SQL,  AD0.TOP_LEVEL_SQL_ID,	AD0.DBOP_NAME,	AD0.IS_MONITORED_SQL,  AD0.IS_PX_SLAVE,  AD0.BUCKET_ACTIVITY_START,  AD0.ACTIVITY_START,  AD0.BUCKET_ACTIVITY_END,  AD0.ACTIVITY_END,  AD0.ACTIVITY_COUNT,  AD0.ACTIVITY_TYPE,	AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.IMQ_COUNT,  AD0.WAIT_COUNT,	AD0.CPU_COUNT,	AD0.OTHER_SQL_COUNT,  AD0.PX_SERVER_SET,  AD0.PX_DFO_ACTIVITY_COUNT,  AD0.DFO_MOST_ACTIVE_IID,	AD0.DFO_MOST_ACTIVE_SID,  (CASE WHEN AD0.DFO_MOST_ACTIVE_IID = AD0.INST_ID AND AD0.DFO_MOST_ACTIVE_SID = AD0.SESSION_ID AND (((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &gt;= AD0.PX_DOP * 1.05) OR ((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &lt;= AD0.PX_DOP *0.95)) AND (AD0.DFO_DURATION * 100) &gt; :B32 THEN AD0.ACTIVITY_COUNT ELSE NULL END) DFO_MOST_ACTIVE_COUNT,  AD0.BUCKET_DISTINCT_SAMPLES,	AD0.SQL_BUCKET_DISTINCT_SAMPLES,  CASE WHEN AD0.PX_SERVER_GROUP IS NULL AND AD0.IS_PX_SLAVE = 1 THEN 1 ELSE AD0.PX_SERVER_GROUP END PX_SERVER_GROUP,  AD0.PX_STEP_ID,  AD0.PX_DFO_PAIR_TYPE,  AD0.PX_DFO_PAIR_ID,  AD0.PX_STEP_ARG,  AD0.PX_DOP,  CASE WHEN AD0.PX_DOP IS NOT NULL AND AD0.PX_DOP &lt;&gt; AD0.PX_MIN_DOP AND AD0.PX_MIN_DOP != 0 THEN PX_MIN_DOP ELSE NULL END PX_MIN_DOP FROM (SELECT /*+ use_hash(ash) leading(mo) */ ASH.INST_ID,  ASH.IS_PX_SLAVE,  ASH.SESSION_ID,  ASH.PLAN_LINE_ID,  ASH.PLSQL_OBJECT_ID,  ASH.PLSQL_SUBPROGRAM_ID,  ASH.ACTIVITY_BUCKET_NUM,  ASH.PLAN_ACTIVITY_BUCKET_NUM,  ASH.SQL,	ASH.TOP_LEVEL_SQL_ID,  ASH.DBOP_NAME,  ASH.IS_MONITORED_SQL,  ASH.BUCKET_ACTIVITY_START,  ASH.ACTIVITY_START,  ASH.BUCKET_ACTIVITY_END,  ASH.ACTIVITY_END,  ASH.ACTIVITY_COUNT,  ASH.ACTIVITY_TYPE,  ASH.OTHER_SQL_ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  MO.PX_SERVER_SET,  ASH.PX_DFO_ACTIVITY_COUNT,  TRUNC(ASH.MOST_ACTIVE_IN_DFO / 10000000000) DFO_MOST_ACTIVE_COUNT,  MOD(TRUNC(ASH.MOST_ACTIVE_IN_DFO / 1000000),  10000) DFO_MOST_ACTIVE_IID,  MOD(ASH.MOST_ACTIVE_IN_DFO,  1000000) DFO_MOST_ACTIVE_SID,  ASH.DFO_DURATION,	ASH.BUCKET_DISTINCT_SAMPLES,  ASH.SQL_BUCKET_DISTINCT_SAMPLES,	MO.PX_SERVER_GROUP,  ASH.PX_STEP_ID,  ASH.PX_DFO_PAIR_TYPE,  ASH.PX_DFO_PAIR_ID,  ASH.PX_STEP_ARG,  ASH.PX_DOP,  ASH.PX_MIN_DOP FROM (SELECT /*+ no_merge */ MD.INST_ID,  MD.SID,  MD.SESSION_SERIAL#,	MD.PX_SERVER_SET,  MD.PX_SERVER_GROUP FROM MONITOR_DATA MD WHERE MD.SID IS NOT NULL OR :B31 = 1) MO,  (SELECT /*+ no_merge */ GVTF.INST_ID,  GVTF.GLOBAL_SAMPLE_ID,  GVTF.IS_PX_SLAVE,	GVTF.SESSION_ID,  GVTF.PLAN_LINE_ID,  GVTF.PLSQL_OBJECT_ID,  GVTF.PLSQL_SUBPROGRAM_ID,	GVTF.ACTIVITY_BUCKET_NUM,  GVTF.PLAN_ACTIVITY_BUCKET_NUM,  GVTF.SQL,  GVTF.TOP_LEVEL_SQL_ID,  GVTF.DBOP_NAME,  GVTF.IS_MONITORED_SQL,  GVTF.BUCKET_ACTIVITY_START,  GVTF.ACTIVITY_START,  GVTF.BUCKET_ACTIVITY_END,  GVTF.ACTIVITY_END,  GVTF.ACTIVITY_COUNT,  GVTF.ACTIVITY_TYPE,  GVTF.OTHER_SQL_ACTIVITY_TYPE,  GVTF.EVENT_NAME,  GVTF.IMQ_COUNT,  GVTF.WAIT_COUNT,	GVTF.CPU_COUNT,  GVTF.OTHER_SQL_COUNT,	MAX(GVTF.PER_SERVER_DFO_COUNT * 10000000000 + GVTF.INST_ID * 1000000 + GVTF.SESSION_ID) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,  GVTF.PX_DFO_PAIR_ID) MOST_ACTIVE_IN_DFO,  SUM(GVTF.ACTIVITY_COUNT) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,  GVTF.PX_DFO_PAIR_ID) PX_DFO_ACTIVITY_COUNT,  GVTF.DFO_DURATION,	GVTF.PX_STEP_ID,  GVTF.PX_DFO_PAIR_TYPE,  GVTF.PX_DFO_PAIR_ID,	GVTF.PX_STEP_ARG,  GVTF.PX_DOP,  GVTF.PX_MIN_DOP,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.ACTIVITY_BUCKET_NUM) BUCKET_DISTINCT_SAMPLES,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.SQL,  GVTF.ACTIVITY_BUCKET_NUM) SQL_BUCKET_DISTINCT_SAMPLES FROM TABLE(SYS.GV$(CURSOR( (SELECT USERENV('INSTANCE') INST_ID,  ASH2.GLOBAL_SAMPLE_ID,  CASE WHEN :B30 = 1 AND :B27 &gt; 1 THEN BUCKET_NUM ELSE NULL END ACTIVITY_BUCKET_NUM,	CASE WHEN :B29 = 1 AND :B27 &gt; 1 THEN BUCKET_NUM ELSE NULL END PLAN_ACTIVITY_BUCKET_NUM,  ASH2.SQL,  ASH2.TOP_LEVEL_SQL_ID,  ASH2.DBOP_NAME,	ASH2.IS_MONITORED_SQL,	ASH2.PLAN_LINE_ID,  ASH2.PLSQL_OBJECT_ID,  ASH2.PLSQL_SUBPROGRAM_ID,  ASH2.ACTIVITY_TYPE,  ASH2.OTHER_SQL_ACTIVITY_TYPE,  ASH2.EVENT_NAME,  ASH2.IS_PX_SLAVE,  ASH2.SESSION_ID,  ASH2.PX_STEP_ID,  ASH2.PX_DFO_PAIR_TYPE,  ASH2.PX_DFO_PAIR_ID,  ASH2.PX_STEP_ARG,  CASE WHEN ASH2.PX_DFO_PAIR_ID IS NOT NULL THEN DECODE(ASH2.PX_DOP,	0,  :B28 ,  ASH2.PX_DOP) ELSE NULL END PX_DOP,	ASH2.PX_MIN_DOP,  :B20 + NUMTODSINTERVAL(:B26 * (ASH2.BUCKET_NUM-1),  'SECOND') BUCKET_ACTIVITY_START,	:B20 + NUMTODSINTERVAL( :B26 * ASH2.BUCKET_NUM - 1,  'SECOND') BUCKET_ACTIVITY_END,  ASH2.ACTIVITY_START,  ASH2.ACTIVITY_END,  ASH2.ACTIVITY_COUNT,  ASH2.IMQ_COUNT,  ASH2.WAIT_COUNT,	ASH2.CPU_COUNT,  ASH2.OTHER_SQL_COUNT,	SUM(ASH2.ACTIVITY_COUNT) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE,  DECODE(ASH2.PX_DFO_PAIR_ID,  NULL,  NULL,  ASH2.SESSION_ID)) PER_SERVER_DFO_COUNT,  CEIL((MAX(ASH2.MAX_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE) - MIN(ASH2.MIN_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,	ASH2.PX_DFO_PAIR_TYPE)) * 3600 * 24) DFO_DURATION FROM (SELECT ASH1.BUCKET_NUM,  ASH1.GLOBAL_SAMPLE_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.SESSION_ID,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG,  MAX(ASH1.SQL) SQL,	MAX(ASH1.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(ASH1.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  MAX(ASH1.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MIN(SAMPLE_DATE) MIN_SAMPLE_DATE,  MAX(SAMPLE_DATE) MAX_SAMPLE_DATE,  MAX(ASH1.IS_PX_SLAVE) IS_PX_SLAVE,	MAX(ASH1.PX_DOP) PX_DOP,  MIN(ASH1.PX_DOP) PX_MIN_DOP,	MIN(ASH1.SAMPLE_DATE) ACTIVITY_START,  MAX(ASH1.SAMPLE_DATE) ACTIVITY_END,  COUNT(ASH1.SQL) ACTIVITY_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME = 'in memory' THEN 1 ELSE NULL END) IMQ_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE != 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' AND ASH1.ACTIVITY_TYPE != 'Cpu' THEN 1 ELSE NULL END) WAIT_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME IS NULL THEN 1 ELSE NULL END) CPU_COUNT,	COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' THEN 1 ELSE NULL END) OTHER_SQL_COUNT,  MAX(ASH1.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(ASH1.DBOP_NAME) DBOP_NAME FROM ( SELECT (CASE WHEN :B27 &gt; 1 THEN (TRUNC(DELTA_TIME_SECONDS/ :B26 ) + 1) ELSE 1 END) BUCKET_NUM,  ASH00.SQL,  ASH00.SAMPLE_DATE,  NVL2(DUP.C2,  TRUNC(DELTA_TIME_SECONDS/ (:B25 )) + 1,  NULL) GLOBAL_SAMPLE_ID,  NVL2(DUP.C2,  NULL,  ASH00.IS_MONITORED_SQL) IS_MONITORED_SQL,  NVL2(DUP.C2,  NULL,  ASH00.IN_INMEMORY_QUERY) IN_INMEMORY_QUERY,  NVL2(DUP.C2,  NULL,  ASH00.WAIT_CLASS) WAIT_CLASS,  NVL2(DUP.C2,  NULL,	ASH00.ACTIVITY_TYPE) ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,  ASH00.OTHER_SQL_ACTIVITY_TYPE) OTHER_SQL_ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,	ASH00.EVENT_NAME) EVENT_NAME,  NVL2(DUP.C2,  NULL,  ASH00.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  NVL2(DUP.C2,  NULL,  ASH00.DBOP_NAME) DBOP_NAME,  NVL2(DUP.C2,  NULL,  ASH00.IS_PX_SLAVE) IS_PX_SLAVE,  NVL2(DUP.C2,  NULL,  ASH00.SESSION_ID) SESSION_ID,  NVL2(DUP.C2,  NULL,	ASH00.PLSQL_OBJECT_ID) PLSQL_OBJECT_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLSQL_SUBPROGRAM_ID) PLSQL_SUBPROGRAM_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLAN_LINE_ID) PLAN_LINE_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_STEP_ID) PX_STEP_ID,  NVL2(DUP.C2,  NULL,	ASH00.PX_STEP_ARG) PX_STEP_ARG,  NVL2(DUP.C2,  NULL,  ASH00.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  NVL2(DUP.C2,  NULL,  ASH00.PX_DOP) PX_DOP FROM (SELECT 1 C1,  NULL C2 FROM V$DUAL U
NION ALL SELECT 1 C1,  1 C2 FROM V$DUAL) DUP,  (SELECT /*+ no_merge */ 1 C1,  ASH000.SAMPLE_DATE,  ASH000.IS_MONITORED_SQL,  ((EXTRACT(SECOND FROM(DELTA_TIME)) + EXTRACT(MINUTE FROM(DELTA_TIME)) * 60 + EXTRACT(HOUR FROM(DELTA_TIME)) * 3600 + EXTRACT(DAY FROM(DELTA_TIME)) * 86400)) DELTA_TIME_SECONDS,  ASH000.IN_INMEMORY_QUERY,  ASH000.WAIT_CLASS,  DECODE(ASH000.IS_MONITORED_SQL,  1,  NVL(ASH000.WAIT_CLASS,  'Cpu'),  DECODE(SQL_ID,  NULL,  'Non SQL',  'Other SQL Execution')) ACTIVITY_TYPE,  NVL(ASH000.WAIT_CLASS,  'Cpu') OTHER_SQL_ACTIVITY_TYPE,	DECODE(:B24 ,  1,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 THEN NVL(ASH000.EVENT,  DECODE(ASH000.IN_INMEMORY_QUERY,  'Y',  'in memory',  ASH000.EVENT)) WHEN ASH000.SQL_ID IS NOT NULL THEN 'sql_id: ' || ASH000.SQL_ID WHEN ASH000.CALL_NAME IS NOT NULL THEN 'call: ' || ASH000.CALL_NAME ELSE 'anonymous: '|| ASH000.EVENT END,  NULL) EVENT_NAME,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 AND (NVL(ASH000.SQL_ID,  :B9 ) = :B9 OR NVL(ASH000.DBOP_NAME,  :B6 ) = :B6 ) THEN 'this' WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.SQL_ID IS NOT NULL AND ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID THEN ASH000.TOP_LEVEL_SQL_ID WHEN ASH000.SQL_ID IS NOT NULL THEN ASH000.SQL_ID ELSE NVL(CALL_NAME,  'anonymous') END SQL,  CASE WHEN ASH000.IS_PX_SLAVE = 0 AND (ASH000.SQL_ID IS NULL OR ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID) THEN ASH000.TOP_LEVEL_SQL_ID END TOP_LEVEL_SQL_ID,  ASH000.DBOP_NAME,  ASH000.IS_PX_SLAVE,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL != 1 THEN 65536 ELSE ASH000.SESSION_ID END SESSION_ID,	DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_OBJECT_ID,  NULL) PLSQL_OBJECT_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_SUBPROGRAM_ID,	NULL) PLSQL_SUBPROGRAM_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.SQL_PLAN_LINE_ID,  NULL) PLAN_LINE_ID,	DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ID,  NULL) PX_STEP_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL = 1 AND ASH000.PX_STEP_ID IN (1,  2,  3) THEN ASH000.PX_STEP_ARG ELSE NULL END PX_DFO_PAIR_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 0 OR ASH000.IS_MONITORED_SQL != 1 THEN NULL WHEN ASH000.PX_STEP_ID = 1 THEN 1 WHEN ASH000.PX_STEP_ID IN (2,  3) THEN 0 ELSE NULL END PX_DFO_PAIR_TYPE,	DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ARG,  NULL) PX_STEP_ARG,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_DOP,  NULL) PX_DOP FROM (SELECT ASH0.*,  CASE WHEN ASH0.IS_TARGET_SQL = 1 OR (ASH0.IS_PX_SLAVE = 1 AND ((NVL(ASH0.TOP_LEVEL_SQL_ID,  ASH0.SQL_ID) IS NOT NULL AND NVL(ASH0.TOP_LEVEL_SQL_ID,  ASH0.SQL_ID) = :B9 ) OR (SQL_ID IS NULL AND :B23 = 'Y'))) THEN 1 ELSE 0 END IS_MONITORED_SQL FROM (SELECT (CASE WHEN (ASH.SQL_ID = :B9 AND ASH.SQL_EXEC_ID = :B7 AND ASH.SQL_EXEC_START = :B8 ) THEN 1 ELSE 0 END) IS_TARGET_SQL,  ASH.SQL_ID,  ASH.SQL_PLAN_LINE_ID,  ASH.PLSQL_OBJECT_ID,	ASH.PLSQL_SUBPROGRAM_ID,  ASH.TOP_LEVEL_SQL_ID,  DECODE(ASH.SQL_ID,  NULL,  ASH.TOP_LEVEL_CALL_NAME,  NULL) CALL_NAME,	ASH.EVENT,  ASH.IN_INMEMORY_QUERY,  ASH.WAIT_CLASS,  ASH.SQL_EXEC_ID,  ASH.SQL_EXEC_START,  ASH.DBOP_NAME,  ASH.DBOP_EXEC_ID,  ASH.SESSION_ID,	ASH.SESSION_SERIAL#,  CASE WHEN QC_INSTANCE_ID IS NOT NULL AND (ASH.SESSION_ID != ASH.QC_SESSION_ID OR ASH.SESSION_SERIAL# != ASH.QC_SESSION_SERIAL# OR USERENV('instance') != ASH.QC_INSTANCE_ID) THEN 1 ELSE 0 END IS_PX_SLAVE,  SAMPLE_TIME - CAST(:B20 AS TIMESTAMP) DELTA_TIME,  CAST(FROM_TZ(ASH.SAMPLE_TIME,  DBTIMEZONE) AS DATE) SAMPLE_DATE,	TRUNC(MOD(PX_FLAGS/65536,  32)) PX_STEP_ID,  MOD(PX_FLAGS,  65536) PX_STEP_ARG,  TRUNC(PX_FLAGS/2097152) PX_DOP FROM V$ALL_ACTIVE_SESSION_HISTORY ASH WHERE ((ASH.SESSION_ID = :B19 AND ASH.SESSION_SERIAL# = :B18 AND USERENV('INSTANCE') = :B17 ) OR (ASH.QC_SESSION_ID IS NOT NULL AND ASH.QC_SESSION_ID = :B19 AND ASH.QC_SESSION_SERIAL# = :B18 AND ASH.QC_INSTANCE_ID = :B17 )) AND SAMPLE_TIME BETWEEN :B16 AND :B15 ) ASH0 WHERE (ASH0.SAMPLE_DATE BETWEEN :B20 + 1/24/3600 AND :B22 - 1/24/3600 OR (ASH0.SQL_ID = :B9 AND ASH0.SQL_EXEC_START = :B8 AND ASH0.SQL_EXEC_ID = :B7 ) OR (ASH0.DBOP_NAME = :B6 AND ASH0.DBOP_EXEC_ID = :B5 )) AND (:B21 IS NULL OR ASH0.SQL_PLAN_LINE_ID = :B21 ) AND (ASH0.IS_PX_SLAVE = 0 OR ASH0.SQL_ID IS NOT NULL)) ASH000 ) ASH00 WHERE ASH00.C1 = DUP.C1) ASH1 WHERE ASH1.BUCKET_NUM &gt; 0 AND ASH1.BUCKET_NUM &lt;= :B27 GROUP BY USERENV('INSTANCE'),  ASH1.GLOBAL_SAMPLE_ID,  ASH1.BUCKET_NUM,  ASH1.SESSION_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG) ASH2)))) GVTF WHERE GVTF.INST_ID BETWEEN :B11 AND :B10 ) ASH WHERE ASH.GLOBAL_SAMPLE_ID IS NULL AND ASH.SESSION_ID = MO.SID(+) AND ASH.INST_ID = MO.INST_ID(+)) AD0),	RESPONSE_TIME_DATA AS (SELECT ADH.BUCKET_NUM,  ADH.SQL_ROWNUM,	ADH.SQL,  ADH.TOP_LEVEL_SQL_ID,  ADH.DBOP_NAME,  ADH.PX_ID,  DECODE( ADH.PX_STEP_ID,  NULL,  NULL,  0,	NULL,  1,  'PX Server(s) - Executing Parent DFO',  2,  'PX Server(s) - Executing Child DFO',  3,  'PX Server(s) - Sampling Child DFO',	4,  'PX Server(s) - Joining Group',  5,  'QC - Scheduling Child DFO',  6,  'QC - Scheduling Parent DFO',  7,  'QC - Initializing Objects',  8,	'QC - Flushing Objects',  9,  'QC - Allocating Slaves',  10,  'QC - Initializing Granules',  11,  'PX Server(s) - Parsing Cursor',  12,  'PX Server(s) - Executing Cursor',  13,  'PX Server(s) - Preparing Transaction',  14,	'PX Server(s) - Joining Transaction',  15,  'PX Server(s) - Load Commit',  16,	'PX Server(s) - Aborting Transaction',	17,  'QC - Executing Child DFO',  18,  'QC - Executing Parent DFO',  'PX Step - ' || PX_STEP_ID) PX_STEP_ID,  ADH.PX_STEP_ARG,	ADH.PX_DFO_PAIR_ID,  ADH.PX_DOP,  ADH.PX_MIN_DOP,  ADH.DFO_MOST_ACTIVE_IID,  ADH.DFO_MOST_ACTIVE_SID,  ADH.DFO_MOST_ACTIVE_COUNT,  ADH.ACTIVITY_START,	ADH.ACTIVITY_END,  ADH.ACTIVITY_TYPE,  ADH.OTHER_SQL_ACTIVITY_TYPE,  ADH.EVENT_NAME,  ADH.PLAN_LINE_ID,  ADH.PLSQL_OBJECT_ID,  ADH.PLSQL_SUBPROGRAM_ID,  CASE WHEN PLSQL_ROWNUM = 1 AND ADH.PLSQL_OBJECT_ID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = ADH.PLSQL_OBJECT_ID AND P.SUBPROGRAM_ID = ADH.PLSQL_SUBPROGRAM_ID),  'Unavailable') ELSE NULL END PLSQL_NAME,  ADH.ACTIVITY_COUNT,  ADH.BUCKET_ACTIVE_SECONDS,  ADH.BUCKET_IDLE_SECONDS,  (CASE WHEN ADH.IS_MONITORED_SQL = 0 THEN ADH.ACTIVE_SECONDS WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_CPU_HEIGHT &gt;= :B34 THEN DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  (ADH.DFO_PAIR_ACTIVITY_HEIGHT / ADH.DFO_PAIR_CPU_HEIGHT) * ADH.DFO_PAIR_TOTAL_SECONDS,  0) WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  ADH.DFO_PAIR_ACTIVITY_HEIGHT,  (ADH.DFO_PAIR_ACTIVITY_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT))) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_ACTIVITY_HEIGHT) / ADH.PX_DOP ELSE ADH.ACTIVE_SECONDS END) RESP_TIME,  (CASE WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * (ADH.DFO_PAIR_IDLE_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT)) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_IDLE_HEIGHT) / ADH.PX_DOP ELSE 0 END) DFO_PAIR_IDLE_RESP_TIME,  ADH.DFO_PAIR_ACTIVITY_HEIGHT,	ADH.DFO_PAIR_CPU_HEIGHT,  ADH.DFO_PAIR_IDLE_HEIGHT,  ADH.DFO_PAIR_TOTAL_HEIGHT,  ADH.DFO_PAIR_CPU_ACTIVITY,  ADH.DFO_PAIR_TOTAL_SECONDS FROM (SELECT ADH_1.*,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.PLSQL_OBJECT_ID,  ADH_1.PLSQL_SUBPROGRAM_ID ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) PLSQL_ROWNUM,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.SQL ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) SQL_ROWNUM,
 (CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP - ADH_1.DFO_PAIR_TOTAL_HEIGHT ELSE 0 END) DFO_PAIR_IDLE_HEIGHT,  (CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP ELSE ADH_1.DFO_PAIR_TOTAL_HEIGHT END) DFO_PAIR_TOTAL_HEIGHT_ADJ FROM (SELECT ADH_0.*,  (CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_TOTAL_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_TOTAL_HEIGHT,  (CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_CPU_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_CPU_HEIGHT,  (CASE WHEN ADH_0.PX_DFO_PAIR_ID IS NOT NULL AND ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.ACTIVITY_COUNT * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_ACTIVITY_HEIGHT FROM (SELECT AD3.*,  (SUM(DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  0,  AD3.ACTIVE_SECONDS)) OVER(PARTITION BY DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  NULL,  AD3.BUCKET_NUM),  DECODE(AD3.PX_DFO_PAIR_ID,  NULL,	NULL,  AD3.PX_STEP_ARG))) DFO_PAIR_TOTAL_SECONDS FROM (SELECT AD2.*,  CASE WHEN AD2.IS_MONITORED_SQL = 0 THEN SQL_BUCKET_DISTINCT_SAMPLES * :B25 WHEN AD2.PX_ID IS NULL THEN AD2.ACTIVITY_COUNT * :B25 WHEN AD2.BUCKET_PARALLEL_MON_ACTIVITY &gt; 0 THEN (AD2.ACTIVITY_COUNT * AD2.BUCKET_PARALLEL_MON_SECONDS) / AD2.BUCKET_PARALLEL_MON_ACTIVITY ELSE 0 END ACTIVE_SECONDS,  CASE WHEN AD2.BUCKET_INTERVAL &gt; BUCKET_ACTIVE_SECONDS THEN AD2.BUCKET_INTERVAL - BUCKET_ACTIVE_SECONDS ELSE 0 END BUCKET_IDLE_SECONDS FROM (SELECT AD1.*,  (AD1.BUCKET_SERIAL_MON_ACTIVITY * :B25 ) BUCKET_SERIAL_MON_SECONDS,  (AD1.BUCKET_TOTAL_MON_ACTIVITY - AD1.BUCKET_SERIAL_MON_ACTIVITY) BUCKET_PARALLEL_MON_ACTIVITY,  (AD1.BUCKET_ACTIVE_SECONDS - (AD1.BUCKET_OTHER_ACTIVITY + AD1.BUCKET_SERIAL_MON_ACTIVITY) * :B25 ) BUCKET_PARALLEL_MON_SECONDS,  (AD1.BUCKET_OTHER_ACTIVITY * :B25 ) BUCKET_OTHER_SECONDS,  DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,	SUM(AD1.ACTIVITY_COUNT) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_TOTAL_ACTIVITY,  DECODE(AD1.PX_DFO_PAIR_ID,  NULL,	NULL,  SUM(DECODE(AD1.ACTIVITY_TYPE,  'Cpu',  AD1.ACTIVITY_COUNT,  0)) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_CPU_ACTIVITY FROM (SELECT AD01.*,  NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  1,  AD01.ACTIVITY_COUNT,	NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0) BUCKET_TOTAL_MON_ACTIVITY,  (NVL(SUM(CASE WHEN AD01.IS_MONITORED_SQL = 1 AND AD01.PX_ID IS NULL THEN AD01.ACTIVITY_COUNT ELSE NULL END) OVER(PARTITION BY AD01.BUCKET_NUM),  0)) BUCKET_SERIAL_MON_ACTIVITY,  (NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  0,  AD01.SQL_BUCKET_DISTINCT_SAMPLES,  NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0)) BUCKET_OTHER_ACTIVITY,  (NVL(AD01.BUCKET_DISTINCT_SAMPLES,  0) * :B25 ) BUCKET_ACTIVE_SECONDS,  DECODE(AD01.BUCKET_NUM,	:B27 ,	MOD(:B32 ,  :B26 ),  :B26 ) BUCKET_INTERVAL FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.PX_ID,  AD0.ACTIVITY_TYPE,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.PLAN_LINE_ID,	AD0.PX_STEP_ID,  AD0.PX_STEP_ARG,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  MAX(AD0.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(AD0.SQL) SQL,  MAX(AD0.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(AD0.DBOP_NAME) DBOP_NAME,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,  NULL,  NULL,  AD0.DFO_MOST_ACTIVE_IID)) DFO_MOST_ACTIVE_IID,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,  NULL,  NULL,	AD0.DFO_MOST_ACTIVE_SID)) DFO_MOST_ACTIVE_SID,	SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT,  MAX(PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,	MAX(PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MAX(AD0.PX_DOP) PX_DOP,  MIN(AD0.PX_MIN_DOP) PX_MIN_DOP,  MAX(AD0.BUCKET_DISTINCT_SAMPLES) BUCKET_DISTINCT_SAMPLES,  MAX(AD0.SQL_BUCKET_DISTINCT_SAMPLES) SQL_BUCKET_DISTINCT_SAMPLES FROM (SELECT AD00.*,  (CASE WHEN AD00.IS_MONITORED_SQL = 1 AND (AD00.SESSION_ID != :B19 OR AD00.INST_ID != :B17 ) THEN AD00.PX_SERVER_GROUP END) PX_ID FROM ASH_DATA AD00 WHERE :B33 = 1 ) AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.PX_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.PX_STEP_ID,	AD0.PX_STEP_ARG ) AD01) AD1) AD2) AD3) ADH_0) ADH_1) ADH) SELECT /*+ no_monitor no_xml_query_rewrite
		 opt_param('_gby_hash_aggregation_enabled',  'false') */ XMLELEMENT( &quot;sql_monitor_report&quot;,  XMLATTRIBUTES(:B59 AS &quot;version&quot;,  TO_CHAR(:B58 ,  :B12 ) AS &quot;sysdate&quot;),  XMLELEMENT( &quot;report_parameters&quot;,  NULL,  CASE WHEN :B57 IS NOT NULL THEN XMLFOREST( :B57 AS &quot;dbop_name&quot;,  :B56 AS &quot;dbop_exec_id&quot;) ELSE XMLFOREST( :B55 AS &quot;sql_id&quot;,	:B54 AS &quot;sql_exec_id&quot;) END,  XMLFOREST( :B53 AS &quot;session_id&quot;,  :B52 AS &quot;session_serial&quot;,	TO_CHAR(:B51 ,	:B12 ) AS &quot;sql_exec_start&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR(:B50 ,  :B12 ) AS &quot;interval_start&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;interval_end&quot;,  DECODE(:B49 ,  'Y',  :B48 ,  NULL) AS &quot;auto_refresh&quot;,  :B47 AS &quot;base_path&quot;),	CASE WHEN :B23 = 'Y' AND :B46 IS NOT NULL AND NOT (:B4 = 1 AND :B3 IS NULL AND :B2 IS NULL AND :B1 IS NULL) THEN XMLELEMENT( &quot;parallel_filter&quot;,  NULL,  XMLFOREST( DECODE(:B4 ,  1,  'yes',  'no') AS &quot;qc&quot;,  :B3 AS &quot;server_group&quot;,  :B2 AS &quot;server_set&quot;,  :B1 AS &quot;server_number&quot;)) ELSE NULL END),  CASE WHEN :B14 = 1 THEN XMLELEMENT( &quot;derived_parameters_testing&quot;,  NULL,  XMLFOREST(:B11 AS &quot;instance_id_low&quot;,  :B10 AS &quot;instance_id_high&quot;,  :B26 AS &quot;bucket_interval_sec&quot;,  :B32 AS &quot;interval_second&quot;,  :B27 AS &quot;bucket_calc_count&quot;,  :B45 AS &quot;bucket_calc_max_count&quot;,  :B13 AS &quot;sel_sqltext&quot;)) ELSE NULL END,	(SELECT XMLCONCAT( CASE WHEN :B46 IS NULL AND :B67 IS NULL THEN XMLELEMENT( &quot;target&quot;,  XMLATTRIBUTES(:B17 AS &quot;instance_id&quot;,  :B19 AS &quot;session_id&quot;,  :B18 AS &quot;session_serial&quot;,  NVL2(:B6 ,  NULL,  :B9 ) AS &quot;sql_id&quot;,	NVL2(:B6 ,  NULL,  TO_CHAR(:B8 ,  :B12 )) AS &quot;sql_exec_start&quot;,  NVL2(:B6 ,  NULL,  :B7 ) AS &quot;sql_exec_id&quot;,	NVL2(:B6 ,  :B6 ,  NULL) AS &quot;dbop_name&quot;,  NVL2(:B6 ,	:B5 ,  NULL) AS &quot;dbop_exec_id&quot;,  NVL2(:B6 ,  TO_CHAR(:B8 ,  :B12 ),  NULL) AS &quot;dbop_exec_start&quot;,  NVL2(:B6 ,  NULL,  MAX_PLAN_HASH_VALUE) AS &quot;sql_plan_hash&quot;,  NVL2(:B6 ,  NULL,	MAX_FULL_PLAN_HASH_VALUE) AS &quot;sql_full_plan_hash&quot;,  MAGG.DB_UNIQUE_NAME AS &quot;db_unique_name&quot;,  MAGG.PLATFORM_NAME AS &quot;db_platform_name&quot;,  MAGG.HOST_NAME AS &quot;report_host_name&quot;),  NVL2(SUM_SERVERS_REQUESTED,  XMLELEMENT( &quot;servers_requested&quot;,  NULL,  SUM_SERVERS_REQUESTED),  NULL),  NVL2(SUM_SERVERS_ALLOCATED,  XMLELEMENT( &quot;servers_allocated&quot;,  NULL,  SUM_SERVERS_ALLOCATED),  NULL),  NVL2(MAX_USERID,  XMLELEMENT( &quot;user_id&quot;,  NULL,  MAX_USERID),  NULL),  NVL2(MAX_USERNAME,	XMLELEMENT( &quot;user&quot;,  NULL,  MAX_USERNAME),  NULL),  NVL2(MAX_CON_ID,	XMLELEMENT( &quot;con_id&quot;,  NULL,	MAX_CON_ID),  NULL),  NVL2(MAX_CON_NAME,  XMLELEMENT( &quot;con_name&quot;,  NULL,  MAX_CON_NAME),  NULL),  NVL2(MAX_PROGRAM,  XMLELEMENT( &quot;program&quot;,  NULL,	MAX_PROGRAM),  NULL),  NVL2(MAX_MODULE,  XMLELEMENT( &quot;module&quot;,  NULL,  MAX_MODULE),  NULL),  NVL2(MAX_ACTION,  XMLELEMENT( &quot;action&quot;,  NULL,  MAX_ACTION),  NULL),  NVL2(MAX_SERVICE_NAME,  XMLELEMENT( &quot;service&quot;,  NULL,	MAX_SERVICE_NAME),  NULL),  NVL2(MAX_CLIENT_ID,  XMLELEMENT( &quot;client_id&quot;,  NULL,  MAX_CLIENT_ID),  NULL),  NVL2(MAX_CLIENT_INFO,  XMLELEMENT( &quot;client_info&quot;,  NULL,  MAX_CLIENT_INFO),  NULL),  NVL2(MAX_PL_ENTRY_OID,  XMLELEMENT( &quot;plsql_entry_object_id&quot;,  NULL,  MAX_PL_ENTRY_OID),  NULL),  NVL2(MAX_PL_ENTRY_PROGID,  XMLELEMENT( &quot;plsql_entry_subprogram_id&quot;,  NULL,  MAX_PL_ENTRY_PROGID),  NULL),  NVL2(MAX_PL_ENTRY_NAME,  XMLELEMENT( &quot;plsql_entry_name&quot;,	NULL,  MAX_PL_ENTRY_NAME),  NULL),  NVL2(MAX_PL_OID,  XMLELEMENT( &quot;plsql_object_id&quot;,	NULL,  MAX_PL_OID),  NULL),  NVL2(MAX_PL_PROGID,  XMLELEMENT( &quot;plsql_subprogram_id&quot;,	NULL,  MAX_PL_PROGID),	NULL),	NVL2(MAX_PL_NAME,  XMLELEMENT( &quot;plsql_name&quot;,	NULL,  MAX_PL_NAME),  NULL),  CASE WHEN (:B13 = 0 OR :B6 IS NOT NULL) THEN NULL ELSE XMLELEMENT( &quot;sql_fulltext&quot;,  XMLATTRIBUTES( NVL2(:B65 ,	'Y',  :B66 ) AS &quot;is_full&quot;),  NVL2(:B65 ,  :B65 ,  SQLMON_TEXT)) END,	XMLELEMENT( &quot;status&quot;,  NULL,	MAX_STATUS),  XMLELEMENT( &quot;refresh_count&quot;,  NULL,  SUM_REFRESH_COUNT),  XMLELEMENT( &quot;first_refresh_time&quot;,  NULL,  TO_CHAR(MIN_FIRST_REFRESH_TIME,  :B12 )),  XMLELEMENT( &quot;last_refresh_time&quot;,  NULL,  TO_CHAR(:B58 ,  :B12 )),  XMLELEMENT( &quot;duration&quot;,  NULL,	GREATEST(:B64 ,  LEAST(MAX_ELAPSED_TIME/1000000,  1),  CEIL(MAX_QUEUING_TIME/1000000))),  DECODE(MAX_RM_INFO,  '00/00/0000 00:00:00',  NULL,  XMLTYPE(SUBSTR(MAX_RM_INFO,  20))),  CASE WHEN (:B62 = 'Y') THEN XMLELEMENT( &quot;adaptive_plan&quot;,  XMLATTRIBUTES(:B63 AS &quot;is_final&quot;),  :B62 ) ELSE NULL END ) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  DECODE(NVL(SUM_ELAPSED_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  SUM_ELAPSED_TIME)),  DECODE(NVL(MAX_QUEUING_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),	MAX_QUEUING_TIME)),  DECODE(NVL(SUM_CPU_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  SUM_CPU_TIME)),  DECODE(NVL(SUM_USER_IO_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  SUM_USER_IO_WAIT_TIME)),  DECODE(NVL(SUM_APPLICATION_WAIT_TIME,  0),	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  SUM_APPLICATION_WAIT_TIME)),  DECODE(NVL(SUM_CONCURRENCY_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),	SUM_CONCURRENCY_WAIT_TIME)),  DECODE(NVL(SUM_CLUSTER_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  SUM_CLUSTER_WAIT_TIME)),  DECODE(NVL(SUM_PLSQL_EXEC_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  SUM_PLSQL_EXEC_TIME)),  DECODE(NVL(SUM_JAVA_EXEC_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  SUM_JAVA_EXEC_TIME)),  DECODE(NVL(SUM_OTHER_WAIT_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  SUM_OTHER_WAIT_TIME)),  DECODE(NVL(SUM_FETCHES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  SUM_FETCHES)),  DECODE(NVL(SUM_BUFFER_GETS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  SUM_BUFFER_GETS)),	DECODE(NVL(SUM_READ_REQS,  0),	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  SUM_WRITE_REQS)),  DECODE(NVL(SUM_READ_REQS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_READ_BYTES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  SUM_READ_BYTES)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  SUM_WRITE_REQS)),  DECODE(NVL(SUM_WRITE_BYTES,  0),	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  SUM_WRITE_BYTES)),  DECODE(NVL(SUM_IO_UNC_BYTES,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  SUM_IO_UNC_BYTES)),  DECODE(NVL(SUM_IO_ELIG_BYTES,  0),	0,  NULL
,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  SUM_IO_ELIG_BYTES)),  DECODE(NVL(SUM_IO_RET_BYTES,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),	SUM_IO_RET_BYTES)),  CASE WHEN SUM_IO_INTER_BYTES IS NULL OR SUM_IO_BYTES = 0 OR SUM_IO_INTER_BYTES = SUM_IO_BYTES OR NVL(SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(SUM_IO_BYTES / DECODE(SUM_IO_INTER_BYTES,  0,  1,  SUM_IO_INTER_BYTES),  2)) END,  CASE WHEN NVL(SUM_IO_ELIG_BYTES,  0) = 0 OR SUM_IO_BYTES = 0 OR SUM_IO_UNC_BYTES = SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST(SUM_IO_UNC_BYTES,  SUM_IO_ELIG_BYTES) - SUM_IO_RET_BYTES) / SUM_IO_ELIG_BYTES,  2))) END),  CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN SUM(ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,	XMLAGG( XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME)) ELSE NULL END FROM (SELECT AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1) ELSE NULL END,  NVL2(MAX_ERROR_NUMBER,  XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MAX_ERROR_NUMBER AS &quot;number&quot;,  MAX_ERROR_FACILITY AS &quot;facility&quot;),  MAX_ERROR_MESSAGE),  NULL),  CASE WHEN :B61 = 1 AND MAGG.QC_HAS_BINDS_XML = 'Y' THEN (SELECT XMLTYPE(BINDS_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = :B17 AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END,  CASE WHEN :B60 = 1 AND MAGG.QC_HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = MAGG.MAX_INST_ID AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) FROM MONITOR_AGG MAGG),  CASE WHEN :B44 = 1 THEN (SELECT CASE WHEN AT.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( :B41 AS
&quot;ash_missing_seconds&quot;,  TO_CHAR(AT.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,	TO_CHAR(AT.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AT.ACTIVITY_END - AT.ACTIVITY_START) * 3600 * 24) + 1 AS &quot;duration&quot;,  AT.ACTIVITY_COUNT AS &quot;count&quot;,  AT.IMQ_COUNT AS &quot;imq_count&quot;,  AT.WAIT_COUNT AS &quot;wait_count&quot;,  AT.CPU_COUNT AS &quot;cpu_count&quot;,  DECODE(AT.OTHER_SQL_COUNT,  0,  NULL,  AT.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AT.ACTIVITY_TOTAL,	AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,	SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,	SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1) AT,  (SELECT CASE WHEN :B30 = 1 AND :B27 &gt; 1 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22 ,  :B12 ) AS &quot;end_time&quot;,  ROUND(( :B22 - :B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  SUM(ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(IMQ_COUNT) IMQ_COUNT,  SUM(WAIT_COUNT) WAIT_COUNT,  SUM(CPU_COUNT) CPU_COUNT,  SUM(OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),	AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,	MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,	MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,	CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN AH.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22 ,  :B12 ) AS &quot;end_time&quot;,  :B41 AS &quot;ash_missing_seconds&quot;,  TO_CHAR(AH.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(AH.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AH.ACTIVITY_END - AH.ACTIVITY_START) * 3600 * 24) + 1 AS &quot;duration&quot;,  :B25 AS &quot;sample_interval&quot;,  :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,	ROUND((:B22 - :B20 ) *3600*24) + 1 AS &quot;bucket_duration&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B34 AS &quot;total_cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD2.ACTIVITY_START) ACTIVITY_START,	MAX(AD2.ACTIVITY_END) ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET_XML) ORDER BY AD2.BUCKET_NUM) GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  MAX(AD1.BUCKET_IDLE_SECONDS) BUCKET_IDLE_SECONDS,	XMLAGG( XMLCONCAT( CASE WHEN AD1.DFO_PAIR_IDLE_RESP_TIME != 0 AND DFO_PAIR_ROWNUM = 1 THEN XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( 'Parallel Skew' AS &quot;class&quot;,  AD1.PX_STEP_ARG AS &quot;line&quot;,  AD1.PX_ID AS &quot;px&quot;,	ROUND(AD1.DFO_PAIR_IDLE_RESP_TIME,  2) AS &quot;rt&quot;),  0) ELSE NULL END,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( NVL(AD1.OTHER_SQL,  AD1.RPI) AS &quot;sql&quot;,  AD1.NON_SQL AS &quot;non_sql&quot;,	AD1.CLASS AS &quot;class&quot;,  AD1.OTHER_SQL_CLASS AS &quot;other_sql_class&quot;,  AD1.EVENT AS &quot;event&quot;,  AD1.PLAN_LINE_ID AS &quot;line&quot;,  NVL2(AD1.PLSQL_OBJECT_ID,  AD1.PLSQL_OBJECT_ID||'.'|| AD1.PLSQL_SUBPROGRAM_ID,  NULL) AS &quot;plsql_id&quot;,  AD1.PLSQL_NAME AS &quot;plsql_name&quot;,  CASE WHEN AD1.SQL_ROWNUM = 1 THEN AD1.TOP_LEVEL_SQL_ID END AS &quot;top_sql_id&quot;,	CASE WHEN AD1.DBOP_NAME IS NOT NULL THEN AD1.DBOP_NAME END AS &quot;dbop_name&quot;,  CASE WHEN AD1.DFO_MOST_ACTIVE_IID IS NOT NULL AND :B68 = 'Y' THEN AD1.DFO_MOST_ACTIVE_IID END AS &quot;skew_iid&quot;,  DECODE(AD1.DFO_MOST_ACTIVE_COUNT,  NULL, NULL,  AD1.DFO_MOST_ACTIVE_SID) AS &quot;skew_sid&quot;,  AD1.DFO_MOST_ACTIVE_COUNT AS &quot;skew_count&quot;,  DECODE(AD1.PX_DOP,  :B28 ,  NULL,  AD1.PX_DOP) AS &quot;dop&quot;,  DECODE(AD1.PX_DOP,  AD1.PX_MIN_DOP,	NULL,  AD1.PX_MIN_DOP) AS &quot;min_dop&quot;,	AD1.PX_ID AS &quot;px&quot;,  AD1.PX_STEP_ID AS &quot;step&quot;,  AD1.PX_STEP_ARG AS &quot;arg&quot;,	DECODE(AD1.ACTIVITY_COUNT,  AD1.RESP_TIME,  NULL,  ROUND(AD1.RESP_TIME,  2)) AS &quot;rt&quot;),  AD1.ACTIVITY_COUNT)) ORDER BY AD1.PX_STEP_ID,  AD1.PX_STEP_ARG,  AD1.DFO_PAIR_ROWNUM) ACTIVITY_BUCKET_XML FROM (SELECT AD01.*,  CASE WHEN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.ACTIVITY_TYPE END CLASS,	CASE WHEN (AD01.ACTIVITY_TYPE = 'Other SQL Execution' OR AD01.ACTIVITY_TYPE = 'Non SQL') THEN AD01.OTHER_SQL_ACTIVITY_TYPE END OTHER_SQL_CLASS,  CASE WHEN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.EVENT_NAME END EVENT,  CASE WHEN AD01.SQL IN ('this',  'anonymous') THEN NULL ELSE AD01.SQL END RPI,  DECODE(AD01.ACTIVITY_TYPE,  'Other SQL Execution',  SUBSTR(AD01.EVENT_NAME,	9),  NULL) OTHER_SQL,  DECODE(AD01.ACTIVITY_TYPE,  'Non SQL',  AD01.EVENT_NAME,  NULL) NON_SQL,  ROW_NUMBER() OVER(PARTITION BY AD01.BUCKET_NUM,  AD01.PX_DFO_PAIR_ID ORDER BY AD01.ACTIVITY_TYPE,  AD01.EVENT_NAME,  AD01.PLAN_LINE_ID) DFO_PAIR_ROWNUM FROM RESPONSE_TIME_DATA AD01) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,  CASE WHEN :B23 = 'Y' THEN (SELECT XMLELEMENT( &quot;parallel_info&quot;,  XMLATTRIBUTES( :B17 AS &quot;qc_instance_id&quot;,  MAX_PX_QCSID AS &quot;qc_session_id&quot;,  MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MAX_PX_DOP AS &quot;dop&quot;,  MAX_PX_DOP_INSTANCES AS &quot;max_dop_instances&quot;,  DIST_INST_COUNT AS &quot;inst_count&quot;,  DIST_PX_GROUP_COUNT AS &quot;serv
er_group_count&quot;,  DIST_PX_SET_COUNT AS &quot;server_set_count&quot;),  CASE WHEN :B70 = 1 THEN PX_SESSIONS ELSE NULL END,	CASE WHEN :B68 = 'Y' THEN DECODE(:B69 ,  1,  PX_INSTANCES,  NULL) ELSE NULL END) FROM (SELECT MAX_PX_QCSID,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,  SUM_SERVERS_REQUESTED,  SUM_SERVERS_ALLOCATED,  DIST_INST_COUNT,  DIST_PX_GROUP_COUNT,  DIST_PX_SET_COUNT,	(SELECT XMLELEMENT( &quot;sessions&quot;,  XMLATTRIBUTES(MAX(PX_SESSION.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_SESSION.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_SESSION.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_SESSION.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_SESSION.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,  MAX(PX_SESSION.MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_SESSION.MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PX_SESSION.MAX_BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_SESSION.MAX_ELAPSED_TIME) AS &quot;max_elapsed_time&quot;),  XMLAGG(PX_SESSION.PX_SESSION_XML ORDER BY PX_SERVER_GROUP NULLS FIRST,  PX_SERVER_SET,  PX_SERVER#)) FROM (SELECT PX_SERVER_GROUP,  PX_SERVER_SET,  PX_SERVER#,	MAX(PI.MAX_ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(PI.MAX_IO_REQS) MAX_IO_REQS,  MAX(PI.MAX_IO_BYTES) MAX_IO_BYTES,  MAX(PI.MAX_BUFFER_GETS) MAX_BUFFER_GETS,  SUM(PI.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,  SUM(PI.WAIT_COUNT) WAIT_COUNT,  SUM(PI.CPU_COUNT) CPU_COUNT,	SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  XMLELEMENT( &quot;session&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;,  PROCESS_NAME AS &quot;process_name&quot;,  SID AS &quot;session_id&quot;,  SESSION_SERIAL# AS &quot;session_serial&quot;,  PX_SERVER_GROUP AS &quot;server_group&quot;,  PX_SERVER_SET AS &quot;server_set&quot;,  PX_SERVER# AS &quot;server_num&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MAX(ELAPSED_TIME)),	NULL),	NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MAX(APPLICATION_WAIT_TIME)),  NULL),  NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),	MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),  XMLELEMENT(
&quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),  MAX(OTHER_WAIT_TIME)),  NULL),  NVL2(MAX(FETCHES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MAX(WRITE_BYTES)),	NULL),	NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_ELIG_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),	MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),	ROUND(MAX(IO_BYTES) / DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,	ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES), 0),  NVL(MAX(IO_ELIG_BYTES), 0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN SUM(PI.ACTIVITY_COUNT) &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;imq_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.OTHER_SQL_COUNT)AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),	XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,  PI.EVENT_NAME)) ELSE NULL END,  CASE WHEN :B60 = 1 AND PI.HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = PI.INST_ID AND MON.KEY = PI.KEY AND MON.SID = PI.SID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) PX_SESSION_XML FROM (SELECT MO.HAS_OTHER_XML,  MO.KEY,  MO.INST_ID,  DECODE(MO.PROCESS_NAME,  'ora',  'PX Coordinator',	MO.PROCESS_NAME) PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  MAX(MO.IO_REQS) MAX_IO_REQS,  MAX(MO.IO_BYTES) MAX_IO_BYTES,  MAX(MO.BUFFER_GETS) MAX_BUFFER_GETS,  MAX(MO.ELAPSED_TIME) MAX_ELAPSED_TIME,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.ACTIVITY_COUNT)) ACTIVITY_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.IMQ_COUNT)) IMQ_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.WAIT_COUNT)) WAIT_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.CPU_COUNT)) CPU_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.OTHER_SQL_COUNT)) OTHER_SQL_COUNT,	MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END,	MAX(DECODE(MO.ELAPSED_TIME,  0,  NULL,	MO.ELAPSED_TIME)) ELAPSED_TIME,  MAX(DECODE(MO.QUEUING_TIME,  0,  NULL,  MO.QUEUING_TIME)) QUEUING_TIME,  MAX(DECODE(MO.CPU_TIME,  0,  NULL,  CPU_TIME)) CPU_TIME,  MAX(DECODE(MO.FETCHES,  0,	NULL,  FETCHES)) FETCHES,  MAX(DECODE(MO.BUFFER_GETS,  0,  NULL,  MO.BUFFER_GETS)) BUFFER_GETS,  MAX(DECODE(MO.IO_INTER_BYTES,	0,  NULL,  MO.IO_INTER_BYTES)) IO_INTER_BYTES,	MAX(DECODE(MO.READ_REQS,  0,  NULL,  MO.READ_REQS)) READ_REQS,	MAX(DECODE(MO.READ_BYTES,  0,  NULL,  MO.READ_BYTES)) READ_BYTES,  MAX(DECODE(MO.WRITE_REQS,  0,  NULL,  MO.WRITE_REQS)) WRITE_REQS,  MAX(DECODE(MO.WRITE_BYTES,  0,  NULL,  MO.WRITE_BYTES)) WRITE_BYTES,  MAX(DECODE(MO.IO_BYTES,  0,  NULL,	MO.IO_BYTES)) IO_BYTES,  MAX(DECODE(MO.IO_UNC_BYTES,  0,  NULL,  MO.IO_UNC_BYTES)) IO_UNC_BYTES,  MAX(DECODE(MO.IO_ELIG_BYTES,	0,  NULL,  MO.IO_ELIG_BYTES)) IO_ELIG_BYTES,  MAX(DECODE(MO.IO_RET_BYTES,  0,  NULL,  MO.IO_RET_BYTES)) IO_RET_BYTES,  MAX(DECODE(MO.APPLICATION_WAIT_TIME,  0,  NULL,	MO.APPLICATION_WAIT_TIME)) APPLICATION_WAIT_TIME,  MAX(DECODE(MO.CONCURRENCY_WAIT_TIME,  0,  NULL,  MO.CONCURRENCY_WAIT_TIME)) CONCURRENCY_WAIT_TIME,  MAX(DECODE(MO.CLUSTER_WAIT_TIME,  0,  NULL,  MO.CLUSTER_WAIT_TIME)) CLUSTER_WAIT_TIME,  MAX(DECODE(MO.USER_IO_WAIT_TIME,  0,  NULL,  MO.USER_IO_WAIT_TIME)) USER_IO_WAIT_TIME,  MAX(DECODE(PLSQL_EXEC_TIME,  0,	NULL,  PLSQL_EXEC_TIME)) PLSQL_EXEC_TIME,  MAX(DECODE(MO.JAVA_EXEC_TIME,  0,  NULL,  MO.JAVA_EXEC_TIME)) JAVA_EXEC_TIME,  MAX(DECODE(MO.OTHER_WAIT_TIME,  0,  NULL,  MO.OTHER_WAIT_TIME)) OTHER_WAIT_TIME FROM MONITOR_DATA MO,  (SELECT ASH1.INST_ID,	ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  SUM(ASH1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH1.IMQ_COUNT) IMQ_COUNT,  SUM(ASH1.WAIT_COUNT) WAIT_COUNT,  SUM(ASH1.CPU_COUNT) CPU_COUNT,  SUM(ASH1.OTHER_SQL_COUNT)OTHER_SQL_COUNT,	MIN(ASH1.ACTIVITY_START) ACTIVITY_START,  MAX(ASH1.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH1 GROUP BY ASH1.INST_ID,  ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,	ASH1.EVENT_NAME) ASH0 WHERE MO.INST_ID = ASH0.INST_ID(+) AND MO.SID = ASH0.SESSION_ID(+) AND (:B70 = 1 OR :B69 = 1) GROUP BY MO.INST_ID,  MO.KEY,  MO.HAS_OTHER_XML,  MO.PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) PI WHERE (:B70 = 1) GROUP BY PI.INST_ID,  PI.KEY,  PI.HAS_OTHER_XML,  PI.SID,  PI.PROCESS_NAME,  PI.SESSION_SERIAL#,  PI.PX_SERVER_GROUP,  PI.PX_SERVER_SET,  PI.PX_SERVER#) PX_SESSION) PX_SESSIONS,  (SELECT XMLELEMENT( &quot;instances&quot;,  XMLATTRIBUTES( MAX(PX_INSTANCE.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_INSTANCE.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_INSTANCE.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_INSTANCE.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_INSTANCE.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,	MAX(PX_INSTANCE.ELAPSED_TIME) AS &quot;max_elapsed_time&quot;,	MAX(PX_INSTANCE.BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_INSTANCE.IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_INSTANCE.IO_BYTES) AS &quot;max_io_bytes&quot;),  XMLAGG(PX_INSTANCE.PX_INSTANCES_XML ORDER BY INST_ID)) FROM (SELECT PI.INST_ID,  MAX(PI.ELAPSED_TIME) ELAPSED_TIME,  MAX(PI.IO_REQS) IO_REQS,  MAX(PI.IO_BYTES) IO_BYTES,	MAX(PI.BUFFER_GETS) BUFFER_GETS,  SUM(PI
.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,	SUM(PI.WAIT_COUNT) WAIT_COUNT,	SUM(PI.CPU_COUNT) CPU_COUNT,  SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	XMLELEMENT( &quot;instance&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),	MAX(ELAPSED_TIME)),  NULL),  NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name
&quot;),  MAX(APPLICATION_WAIT_TIME)),	NULL),	NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),	MAX(OTHER_WAIT_TIME)),	NULL),	NVL2(MAX(FETCHES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),	MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),	NULL),	NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MAX(READ_REQS)),	NULL),	NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),	MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),	MAX(WRITE_BYTES)),  NULL),  NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_ELIG_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),	0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MAX(IO_BYTES)/ DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),	0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES),  0),  NVL(MAX(IO_ELIG_BYTES),  0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN :B33 = 1 AND SUM(PI.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,	XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;end_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;imq_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,	PI.EVENT_NAME)) ELSE NULL END) PX_INSTANCES_XML FROM (SELECT MO.INST_ID,  ASH.ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.ACTIVITY_COUNT,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  ASH.ACTIVITY_START,	ASH.ACTIVITY_END,  MO.ELAPSED_TIME,  MO.QUEUING_TIME,  MO.CPU_TIME,  MO.APPLICATION_WAIT_TIME,	MO.CONCURRENCY_WAIT_TIME,  MO.CLUSTER_WAIT_TIME,  MO.USER_IO_WAIT_TIME,  MO.PLSQL_EXEC_TIME,  MO.JAVA_EXEC_TIME,  MO.OTHER_WAIT_TIME,  MO.FETCHES,  MO.BUFFER_GETS,  MO.IO_INTER_BYTES,  MO.IO_BYTES,  MO.READ_REQS,  MO.READ_BYTES,  MO.WRITE_REQS,  MO.WRITE_BYTES,  MO.IO_REQS,  MO.IO_UNC_BYTES,  MO.IO_ELIG_BYTES,  MO.IO_RET_BYTES FROM (SELECT MO0.INST_ID,  SUM(MO0.ELAPSED_TIME) ELAPSED_TIME,  SUM(MO0.QUEUING_TIME) QUEUING_TIME,  SUM(MO0.CPU_TIME) CPU_TIME,  SUM(MO0.FETCHES) FETCHES,  SUM(MO0.BUFFER_GETS) BUFFER_GETS,  SUM(MO0.IO_INTER_BYTES) IO_INTER_BYTES,  SUM(MO0.IO_BYTES) IO_BYTES,  SUM(MO0.READ_REQS) READ_REQS,  SUM(MO0.READ_BYTES) READ_BYTES,  SUM(MO0.WRITE_REQS) WRITE_REQS,	SUM(MO0.WRITE_BYTES) WRITE_BYTES,  SUM(MO0.IO_REQS) IO_REQS,  SUM(MO0.IO_UNC_BYTES) IO_UNC_BYTES,  SUM(MO0.IO_ELIG_BYTES) IO_ELIG_BYTES,  SUM(MO0.IO_RET_BYTES) IO_RET_BYTES,  SUM(MO0.APPLICATION_WAIT_TIME) APPLICATION_WAIT_TIME,  SUM(MO0.CONCURRENCY_WAIT_TIME) CONCURRENCY_WAIT_TIME,  SUM(MO0.CLUSTER_WAIT_TIME) CLUSTER_WAIT_TIME,  SUM(MO0.USER_IO_WAIT_TIME) USER_IO_WAIT_TIME,  SUM(MO0.PLSQL_EXEC_TIME) PLSQL_EXEC_TIME,  SUM(MO0.JAVA_EXEC_TIME) JAVA_EXEC_TIME,  SUM(MO0.OTHER_WAIT_TIME) OTHER_WAIT_TIME FROM MONITOR_DATA MO0 GROUP BY MO0.INST_ID) MO,  (SELECT ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  SUM(ASH0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH0.IMQ_COUNT) IMQ_COUNT,  SUM(ASH0.WAIT_COUNT) WAIT_COUNT,  SUM(ASH0.CPU_COUNT) CPU_COUNT,  SUM(ASH0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH0 GROUP BY ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) ASH,  MONITOR_AGG WHERE MO.INST_ID = ASH.INST_ID(+) AND MONITOR_AGG.DIST_INST_COUNT &gt; 0 ) PI GROUP BY PI.INST_ID)PX_INSTANCE) PX_INSTANCES FROM MONITOR_AGG)) ELSE NULL END,  XPLAN_XML,  CASE WHEN :B43 = 1 THEN (SELECT XMLELEMENT( &quot;plan_monitor&quot;,  XMLATTRIBUTES(MAX(PLI.MAX_LINE_ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PLI.OVERALL_MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PLI.OVERALL_MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PLI.MAX_LINE_IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PLI.MAX_LINE_CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PLI.MAX_LINE_WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PLI.MAX_LINE_OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;),  XMLAGG( XMLELEMENT( &quot;operation&quot;,  XMLATTRIBUTES( PLI.PLAN_LINE_ID AS &quot;id&quot;,  PLI.PARENT_ID AS &quot;parent_id&quot;,  PLI.OPERATION AS &quot;name&quot;,  PLI.OPTIONS AS &quot;options&quot;,	PLI.DEPTH AS &quot;depth&quot;,  PLI.POSITION AS &quot;position&quot;,	PLI.INACTIVE AS &quot;skp&quot;,  PLI.PX_TYPE AS &quot;px_type&quot;),	NVL2(PLI.OBJECT_NAME,  XMLELEMENT( &quot;object&quot;,	XMLATTRIBUTES(PLI.OBJECT_TYPE AS &quot;type&quot;),  XMLFOREST(PLI.OBJECT_OWNER AS &quot;owner&quot;),	XMLFOREST(PLI.OBJECT_NAME AS &quot;name&quot;)),  NULL),  XMLFOREST(PLI.PARTITION_START AS &quot;partition_start&quot;,  PLI.PARTITION_STOP AS &quot;partition_stop&quot;),  CASE WHEN PLI.CARDINALITY IS NULL AND PLI.BYTES IS NULL AND PLI.COST IS NULL AND PLI.TEMP_SPACE IS NULL AND PLI.TIME IS NULL THEN NULL ELSE XMLELEMENT( &quot;optimizer&quot;,  NULL,  NVL2(PLI.CARDINALITY,  XMLFOREST(PLI.CARDINALITY AS &quot;cardinality&quot;),  NULL),  NVL2(PLI.BYTES,  XMLFOREST(PLI.BYTES AS &quot;bytes&quot;),	NULL),	NVL2(PLI.COST,	XMLFOREST(PLI.COST AS &quot;cost&quot;),  NULL),  NVL2(PLI.CPU_COST,  XMLFOREST(PLI.CPU_COST AS &quot;cpu_cost&quot;),	NULL),	NVL2(PLI.IO_COST,  XMLFOREST(PLI.IO_COST AS &quot;io_cost&quot;),  NULL),  NVL2(PLI.TEMP_SPACE,  XMLFOREST(PLI.TEMP_SPACE AS &quot;temp&quot;),  NULL),  NVL2(PLI.TIME,  XMLFOREST(PLI.TIME AS &quot;time&quot;),  NULL)) END,	XMLELEMENT( &quot;stats&quot;,	XMLATTRIBUTES('plan_monitor' AS &quot;type&quot;),  NVL2(PLI.FIR
ST_MOVE_TIME,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_active' AS &quot;name&quot;),  TO_CHAR(FIRST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN PLI.FIRST_MOVE_TIME != PLI.FIRST_CHANGE_TIME THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_row' AS &quot;name&quot;),  TO_CHAR(FIRST_CHANGE_TIME,  :B12 )) ELSE NULL END,  NVL2(PLI.LAST_MOVE_TIME,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('last_active' AS &quot;name&quot;),  TO_CHAR(LAST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN (PLI.FIRST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  ROUND((LAST_MOVE_TIME - FIRST_MOVE_TIME) * 3600 * 24)+1) END,	CASE WHEN (PLI.OVERALL_LAST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('from_most_recent' AS &quot;name&quot;),  ROUND((PLI.OVERALL_LAST_MOVE_TIME - PLI.LAST_MOVE_TIME) * 3600 * 24)) END,  NVL2(PLI.LAST_MOVE_TIME,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'from_sql_exec_start' AS &quot;name&quot;),  ROUND( (FIRST_MOVE_TIME - :B8 ) * 3600*24)),  NULL),  NVL2(PLI.PERCENT_COMPLETE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('percent_complete' AS &quot;name&quot;),  PLI.PERCENT_COMPLETE),  NULL),  NVL2(PLI.TIME_REMAINING,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('time_left' AS &quot;name&quot;),  PLI.TIME_REMAINING),  NULL),  CASE WHEN PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('starts' AS &quot;name&quot;),  PLI.STARTS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_starts' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_STARTS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(MAX_STARTS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_STARTS/10000000000)) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('dop' AS
&quot;name&quot;),  PLI.DOP) ELSE NULL END,  CASE WHEN NEED_ROWS IS NOT NULL AND PLI.FIRST_MOVE_TIME IS NOT NULL THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cardinality' AS &quot;name&quot;),	PLI.OUTPUT_ROWS) ELSE NULL END,  CASE WHEN PLI.NEED_ROWS IS NOT NULL AND PLI.DOP &gt; 0 AND PLI.MAX_OUTPUT_ROWS IS NOT NULL AND (PLI.FIRST_MOVE_TIME IS NOT NULL) THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_card' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_OUTPUT_ROWS/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_OUTPUT_ROWS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_OUTPUT_ROWS/10000000000)) ELSE NULL END,  CASE WHEN PLI.MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('memory' AS &quot;name&quot;),  PLI.MEM) ELSE NULL END,  CASE WHEN PLI.MAX_MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_memory' AS &quot;name&quot;),	PLI.MAX_MEM) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MIN_MAX_MEM IS NOT NULL AND PLI.MAX_MEM
&gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'min_max_mem' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MIN_MAX_MEM/1000000),  10000),  NULL) AS &quot;iid&quot;,	MOD(MIN_MAX_MEM,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MIN_MAX_MEM/10000000000)) ELSE NULL END,  CASE WHEN PLI.TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('temp' AS &quot;name&quot;),  PLI.TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_temp' AS &quot;name&quot;),  PLI.MAX_TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('spill_count' AS &quot;name&quot;),  PLI.SPILL_COUNT) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_MAX_TEMP IS NOT NULL AND PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_max_temp' AS &quot;name&quot;,  DECODE(:B68 ,	'Y',  MOD(TRUNC(MAX_MAX_TEMP/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_MAX_TEMP,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_MAX_TEMP/10000000000)) ELSE NULL END,  CASE WHEN PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  PLI.READ_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_REQS IS NOT NULL AND PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_read_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',	MOD(TRUNC(PLI.MAX_READ_REQS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_REQS/10000000000)) ELSE NULL END,	CASE WHEN PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  PLI.READ_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_BYTES IS NOT NULL AND PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_read_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_READ_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_BYTES,	1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  PLI.WRITE_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_REQS IS NOT NULL AND PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_REQS/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_REQS/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  PLI.WRITE_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_BYTES IS NOT NULL AND PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_bytes' AS &quot;name&quot;,	DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_BYTES,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('io_inter_bytes' AS &quot;name&quot;),  PLI.IO_INTER_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_io_inter_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_IO_INTER_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_IO_INTER_BYTES, 1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_IO_INTER_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(PLI.IO_BYTES / DECODE(PLI.IO_INTER_BYTES,  0,  1,  PLI.IO_INTER_BYTES),  2)) ELSE NULL END),	NVL2(STAT_GID,	XMLELEMENT( &quot;rwsstats&quot;,  XMLATTRIBUTES( PLI.STAT_GID AS &quot;group_id&quot;),  DECODE(GID_ROWNUM,  1,  (SELECT XMLELEMENT( &quot;metadata&quot;,  NULL,  XMLAGG( XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( ROWNUM AS &quot;id&quot;,  NAME AS &quot;name&quot;,	DESCRIPTION AS &quot;desc&quot;,  TYPE AS &quot;type&quot;,  DECODE(FLAGS,  0,	NULL,  FLAGS) AS &quot;flags&quot;),  NULL) ORDER BY ID)) FROM V$SQL_MONITOR_STATNAME WHERE GROUP_ID = PLI.STAT_GID),  NULL),  NVL2(STAT1_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(1 AS &quot;id&quot;),  STAT1_VALUE),  NULL),  NVL2(STAT2_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(2 AS &quot;id&quot;),  STAT2_VALUE),  NULL),  NVL2(STAT3_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(3 AS &quot;id&quot;),  STAT3_VALUE),  NULL),  NVL2(STAT4_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(4 AS &quot;id&quot;),	STAT4_VALUE),  NULL),  NVL2(STAT5_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(5 AS &quot;id&quot;),  STAT5_VALUE),  NULL),  NVL2(STAT6_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(6 AS &quot;id&quot;),  STAT6_VALUE),  NULL),  NVL2(STAT7_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(7 AS &quot;id&quot;),  STAT7_VALUE),  NULL),  NVL2(STAT8_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(8 AS &quot;id&quot;),	STAT8_VALUE),  NULL),  NVL2(STAT9_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(9 AS &quot;id&quot;),  STAT9_VALUE),  NULL),  NVL2(STAT10_VALUE,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES(10 AS &quot;id&quot;),  STAT10_VALUE),  NULL)),  NULL),  CASE WHEN PLI.LINE_ACTIVITY_COUNT &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(PLI.LINE_ACTIVITY_START,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR(PLI.LINE_ACTIVITY_END,  :B12 ) AS &quot;end_time&quot;,  ROUND((PLI.LINE_ACTIVITY_END - PLI.LINE_ACTIVITY_START) * 3600*24) + 1 AS &quot;duration&quot;,  PLI.LINE_ACTIVITY_COUNT AS &quot;count&quot;,  PLI.LINE_IMQ_COUNT AS &quot;imq_count&quot;,	PLI.LINE_WAIT_COUNT AS &quot;wait_count&quot;,	PLI.LINE_CPU_COUNT AS &quot;cpu_count&quot;,  PLI.LINE_OTHER_SQL_COUNT AS &quot;other_sql_count&quot;,	:B40 AS &quot;cpu_cores&quot;,	:B39 AS &quot;hyperthread&quot;),  PLI.ACTIVITY_TOTAL,	PLI.PLAN_ACTIVITY_HISTO) ELSE NULL END) ORDER BY PLI.PLAN_LINE_ID) ) FROM (SELECT AT.MAX_LINE_ACTIVITY_COUNT,  PM.OVERALL_MAX_IO_REQS,	PM.OVERALL_MAX_IO_BYTES,  AT.MAX_LINE_IMQ_COUNT,  AT.MAX_LINE_CPU_COUNT,  AT.MAX_LINE_WAIT_COUNT,  AT.LINE_OTHER_SQL_COUNT,  AT.MAX_LINE_OTHER_SQL_COUNT,  PM.PLAN_LINE_ID,  PM.PARENT_ID,  PM.OPERATION,  PM.OPTIONS,	PM.DEPTH,  PM.POSITION,  PM.INACTIVE,  CASE WHEN PM.OPERATION = 'PX COORDINATOR' AND :B23 = 'Y' AND (PM.PX_SERVER_SET IS NOT NULL OR AH.PX_SERVER_SET IS NOT NULL) THEN 'QC' WHEN PM.PX_SERVER_SET IS NOT NULL THEN TO_CHAR(PM.PX_SERVER_SET) WHEN AH.PX_SERVER_SET IS NOT NULL THEN TO_CHAR(AH.PX_SERVER_SET) WHEN (:B23 = 'N' OR (PM.LAST_CHANGE_TIME IS NULL AND AT.LINE_ACTIVITY_END IS NULL)) THEN NULL ELSE 'QC' END PX_TYPE,  PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START,  PM.LAST_CHANGE_TIME,  PM.OVERALL_LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END,	AT.OVERALL_LINE_ACTIVITY_END,  LEAST(NVL(AT.LINE_ACTIVITY_START,  PM.FIRST_CHANGE_TIME),  NVL(PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START)) FIRST_MOVE_TIME,	GREATEST(NVL(AT.LINE_ACTIVITY_END,  PM.LAST_CHANGE_TIME),  NVL(PM.LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END)) LAST_MOVE_TIME,  GREATEST(NVL(AT.OVERALL_LINE_ACTIVITY_END,  PM.OVERALL_LAST_CHANGE_TIME),	NVL(PM.OVERALL_LAST_CHANGE_TIME,  AT.OVERALL_LINE_ACTIVITY_END)) OVERALL_LAST_MOVE_TIME,  CASE WHEN PM.STARTS IS NOT NULL AND PM.STARTS &gt; 0 THEN 1 ELSE 0 END HAS_EXECUTED,	PM.OBJECT_NAME,  PM.OBJECT_TYPE,  PM.OBJECT_OWNER,  PM.PARTITION_START,  PM.PARTITION_STOP,  PM.CARDINAL
ITY,  PM.BYTES,  PM.COST,  PM.TEMP_SPACE,  PM.TIME,  PM.CPU_COST,  PM.IO_COST,	LO.PERCENT_COMPLETE,  LO.TIME_REMAINING,  PM.STARTS,  PM.DOP,  PM.MAX_STARTS,  PM.OUTPUT_ROWS,	PM.NEED_ROWS,  PM.MAX_OUTPUT_ROWS,  PM.MEM,  PM.MAX_MEM,  PM.MIN_MAX_MEM,  PM.TEMP,  PM.MAX_TEMP,  PM.SPILL_COUNT,  PM.MAX_MAX_TEMP,  PM.READ_REQS,  PM.MAX_READ_REQS,	PM.READ_BYTES,	PM.MAX_READ_BYTES,  PM.WRITE_REQS,  PM.MAX_WRITE_REQS,	PM.WRITE_BYTES,  PM.MAX_WRITE_BYTES,  PM.IO_INTER_BYTES,  PM.IO_BYTES,	PM.MAX_IO_INTER_BYTES,	AT.LINE_ACTIVITY_COUNT,  AT.LINE_IMQ_COUNT,  AT.LINE_WAIT_COUNT,  AT.LINE_CPU_COUNT,  AT.ACTIVITY_TOTAL,  AH.PLAN_ACTIVITY_HISTO,  PM.STAT_GID,  PM.GID_ROWNUM,  PM.STAT1_VALUE,  PM.STAT2_VALUE,  PM.STAT3_VALUE,  PM.STAT4_VALUE,  PM.STAT5_VALUE,  PM.STAT6_VALUE,  PM.STAT7_VALUE,	PM.STAT8_VALUE,  PM.STAT9_VALUE,  PM.STAT10_VALUE FROM (SELECT AT0.*,  MAX(LINE_ACTIVITY_END) OVER() OVERALL_LINE_ACTIVITY_END,  MAX(LINE_ACTIVITY_COUNT) OVER() MAX_LINE_ACTIVITY_COUNT,  MAX(LINE_IMQ_COUNT) OVER() MAX_LINE_IMQ_COUNT,  MAX(LINE_CPU_COUNT) OVER() MAX_LINE_CPU_COUNT,  MAX(LINE_WAIT_COUNT) OVER() MAX_LINE_WAIT_COUNT,  MAX(LINE_OTHER_SQL_COUNT) OVER() MAX_LINE_OTHER_SQL_COUNT FROM (SELECT AD1.PLAN_LINE_ID,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) LINE_ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) LINE_IMQ_COUNT,  SUM(AD1.WAIT_COUNT) LINE_WAIT_COUNT,  SUM(AD1.OTHER_SQL_COUNT) LINE_OTHER_SQL_COUNT,  SUM(AD1.CPU_COUNT) LINE_CPU_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MAX(AD0.DFO_MOST_ACTIVE_IID) DFO_MOST_ACTIVE_IID,  MAX(AD0.DFO_MOST_ACTIVE_SID) DFO_MOST_ACTIVE_SID,  SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT FROM ASH_DATA AD0 WHERE AD0.PLAN_LINE_ID IS NOT NULL GROUP BY AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID) AT0) AT,	(SELECT AD2.PLAN_LINE_ID,  MIN(AD2.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD2.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD2.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD2.IMQ_COUNT) IMQ_COUNT,  SUM(AD2.WAIT_COUNT) WAIT_COUNT,  SUM(AD2.CPU_COUNT) CPU_COUNT,  SUM(AD2.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  CASE WHEN :B29 = 1 AND SUM(AD2.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR( :B20 ,	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;end_time&quot;,  ROUND((:B22 -:B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG(XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),	AD2.ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END PLAN_ACTIVITY_HISTO FROM (SELECT AD1.PLAN_LINE_ID,  AD1.BUCKET_NUM,  MIN(AD1.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(NVL2(AD1.ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT),  NULL) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(NVL2(AD0.ACTIVITY_START,  AD0.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID,	AD1.BUCKET_NUM) AD2 GROUP BY AD2.PLAN_LINE_ID) AH,  (SELECT LO.SQL_PLAN_LINE_ID PLAN_LINE_ID,  DECODE(SUM(LO.TOTALWORK),  0,  NULL,  ROUND(SUM(LO.SOFAR)*100/SUM(LO.TOTALWORK))) PERCENT_COMPLETE,  MAX(LO.TIME_REMAINING) TIME_REMAINING FROM GV$SESSION_LONGOPS LO,  MONITOR_DATA MO WHERE (:B49 = 'Y' OR :B71 = 'DONE (ERROR)') AND LO.SQL_ID = :B9 AND LO.SQL_EXEC_START = :B8 AND LO.SQL_EXEC_ID = :B7 AND LO.INST_ID = MO.INST_ID AND LO.SID = MO.SID GROUP BY LO.SQL_PLAN_LINE_ID) LO,  (SELECT PM0.*,  CASE WHEN PM0.STARTS IS NULL OR PM0.STARTS = 0 OR PM0.OUTPUT_ROWS IS NULL THEN NULL ELSE 1 END NEED_ROWS,  ROW_NUMBER() OVER(PARTITION BY PM0.STAT_GID ORDER BY PM0.PLAN_LINE_ID ) GID_ROWNUM,  MAX(LAST_CHANGE_TIME) OVER() OVERALL_LAST_CHANGE_TIME,  MAX(MAX_IO_REQS) OVER() OVERALL_MAX_IO_REQS,  MAX(MAX_IO_BYTES) OVER() OVERALL_MAX_IO_BYTES FROM (SELECT /*+ leading(mo) use_hash(plm) */ PLM.PLAN_LINE_ID PLAN_LINE_ID,  PLM.PLAN_OPERATION OPERATION,	PLM.PLAN_OPTIONS OPTIONS,  MAX(PLM.PLAN_PARENT_ID) PARENT_ID,  MAX(PLM.PLAN_DEPTH) DEPTH,  MAX(PLM.PLAN_POSITION) POSITION,  MAX(PLM.PLAN_OPERATION_INACTIVE) INACTIVE,  MAX(PLM.PLAN_OBJECT_OWNER) OBJECT_OWNER,  MAX(PLM.PLAN_OBJECT_NAME) OBJECT_NAME,  MAX(PLM.PLAN_OBJECT_TYPE) OBJECT_TYPE,  MAX(PLM.PLAN_COST) COST,  MAX(PLM.PLAN_CARDINALITY) CARDINALITY,  MAX(PLM.PLAN_BYTES) BYTES,  MAX(PLM.PLAN_CPU_COST) CPU_COST,  MAX(PLM.PLAN_IO_COST) IO_COST,  MAX(PLM.PLAN_TEMP_SPACE) TEMP_SPACE,  MAX(PLM.PLAN_TIME) TIME,  MAX(PLM.PLAN_PARTITION_START) PARTITION_START,  MAX(PLM.PLAN_PARTITION_STOP) PARTITION_STOP,  MIN(PLM.FIRST_CHANGE_TIME) FIRST_CHANGE_TIME,	MAX(PLM.LAST_CHANGE_TIME) LAST_CHANGE_TIME,  MIN(PLM.LAST_CHANGE_TIME) MIN_LAST_CHANGE_TIME,  MIN(NVL2(PLM.FIRST_CHANGE_TIME,  MO.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  COUNT(CASE WHEN PLM.PAR IS NOT NULL AND PLM.STARTS IS NOT NULL AND PLM.STARTS &gt; 0 AND PLM.PLAN_LINE_ID != 0 AND PLM.PLAN_OPERATION != 'PX COORDINATOR' THEN 1 ELSE NULL END) DOP,  SUM(PLM.STARTS) STARTS,	MAX(NVL2(PAR,  PLM.STARTS * 10000000000 + PLM.ES,  NULL)) MAX_STARTS,  SUM(PLM.OUTPUT_ROWS) OUTPUT_ROWS,  MAX(NVL2(PAR,  PLM.OUTPUT_ROWS * 10000000000 +PLM.ES,  NULL)) MAX_OUTPUT_ROWS,  SUM(PLM.WORKAREA_MEM) MEM,  SUM(PLM.WORKAREA_MAX_MEM) MAX_MEM,  MIN(NVL2(PAR,  PLM.WORKAREA_MAX_MEM * 10000000000 + PLM.ES,  NULL)) MIN_MAX_MEM,  SUM(PLM.WORKAREA_TEMPSEG) TEMP,  SUM(PLM.WORKAREA_MAX_TEMPSEG) MAX_TEMP,  MAX(NVL2(PAR,  PLM.WORKAREA_MAX_TEMPSEG * 10000000000 + PLM.ES,  NULL)) MAX_MAX_TEMP,  COUNT(PLM.WORKAREA_MAX_TEMPSEG) SPILL_COUNT,  SUM(PLM.PHYSICAL_READ_REQUESTS) READ_REQS,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_READ_REQS,  SUM(PLM.PHYSICAL_READ_BYTES) READ_BYTES,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_READ_BYTES,  SUM(PLM.PHYSICAL_WRITE_REQUESTS) WRITE_REQS,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_REQS,  SUM(PLM.PHYSICAL_WRITE_BYTES) WRITE_BYTES,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_BYTES,  NVL(SUM(PLM.PHYSICAL_READ_BYTES),  0) + NVL(SUM(PLM.PHYSICAL_WRITE_BYTES),  0) IO_BYTES,  SUM(NVL(PLM.PHYSICA
L_READ_REQUESTS,  0) + NVL(PLM.PHYSICAL_WRITE_REQUESTS,  0)) MAX_IO_REQS,  SUM(NVL(PLM.PHYSICAL_READ_BYTES,  0) + NVL(PLM.PHYSICAL_WRITE_BYTES,  0)) MAX_IO_BYTES,  SUM(PLM.IO_INTERCONNECT_BYTES) IO_INTER_BYTES,  MAX(NVL2(PAR,  PLM.IO_INTERCONNECT_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_IO_INTER_BYTES,  MAX(OTHERSTAT_GROUP_ID) STAT_GID,  NVL(DECODE(MAX(OTHERSTAT_1_TYPE),	3,  MAX(OTHERSTAT_1_VALUE),  4,  MAX(OTHERSTAT_1_VALUE),  6,  MIN(OTHERSTAT_1_VALUE),  7,  MIN(OTHERSTAT_1_VALUE),  NULL),  SUM(DECODE(OTHERSTAT_1_TYPE,  1,  OTHERSTAT_1_VALUE,  2,  OTHERSTAT_1_VALUE,  NULL))) STAT1_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_2_TYPE),	3,  MAX(OTHERSTAT_2_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),	4,  MAX(RMAX1 + OTHERSTAT_2_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_2_VALUE),  NULL),  6,  MIN(OTHERSTAT_2_VALUE),  NULL)),	10000000000000000),  SUM(DECODE(OTHERSTAT_2_TYPE,  1,  OTHERSTAT_2_VALUE,  2,  OTHERSTAT_2_VALUE,  NULL))) STAT2_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_3_TYPE),  3,  MAX(OTHERSTAT_3_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_3_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_3_VALUE),  NULL),  6,  MIN(OTHERSTAT_3_VALUE),	NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_3_TYPE,  1,	OTHERSTAT_3_VALUE,  2,	OTHERSTAT_3_VALUE,  NULL))) STAT3_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_4_TYPE),  3,  MAX(OTHERSTAT_4_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_4_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_4_VALUE),  NULL),  6,	MIN(OTHERSTAT_4_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_4_TYPE,  1,  OTHERSTAT_4_VALUE,  2,  OTHERSTAT_4_VALUE,  NULL))) STAT4_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_5_TYPE),  3,  MAX(OTHERSTAT_5_VALUE),	5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_5_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_5_VALUE),  NULL),  6,  MIN(OTHERSTAT_5_VALUE),  NULL)),  10000000000000000),	SUM(DECODE(OTHERSTAT_5_TYPE,  1,  OTHERSTAT_5_VALUE,  2,  OTHERSTAT_5_VALUE,  NULL))) STAT5_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_6_TYPE),  3,	MAX(OTHERSTAT_6_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,	MAX(RMAX1 + OTHERSTAT_6_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_6_VALUE),  NULL),  6,  MIN(OTHERSTAT_6_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_6_TYPE,  1,  OTHERSTAT_6_VALUE,  2,  OTHERSTAT_6_VALUE,  NULL))) STAT6_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_7_TYPE),  3,  MAX(OTHERSTAT_7_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_7_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_7_VALUE),  NULL),  6,  MIN(OTHERSTAT_7_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_7_TYPE,	1,  OTHERSTAT_7_VALUE,	2,  OTHERSTAT_7_VALUE,	NULL))) STAT7_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_8_TYPE),  3,  MAX(OTHERSTAT_8_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_8_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_8_VALUE),	NULL),	6,  MIN(OTHERSTAT_8_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_8_TYPE,  1,  OTHERSTAT_8_VALUE,  2,  OTHERSTAT_8_VALUE,  NULL))) STAT8_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_9_TYPE),  3,  MAX(OTHERSTAT_9_VALUE),  5,	DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_9_VALUE),  7,	MIN(RMAX1 + OTHERSTAT_9_VALUE),  NULL),  6,  MIN(OTHERSTAT_9_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_9_TYPE,  1,  OTHERSTAT_9_VALUE,  2,  OTHERSTAT_9_VALUE,  NULL))) STAT9_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_10_TYPE),  3,  MAX(OTHERSTAT_10_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_10_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_10_VALUE),  NULL),  6,  MIN(OTHERSTAT_10_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_10_TYPE,  1,  OTHERSTAT_10_VALUE,  2,  OTHERSTAT_10_VALUE,  NULL))) STAT10_VALUE FROM (SELECT A.*,  OTHERSTAT_1_VALUE * 10000000000000000 RMAX1,  A.INST_ID * 1000000 + A.SID ES,  DECODE(A.PROCESS_NAME,  'ora',  NULL,  1) PAR FROM GV$ALL_SQL_PLAN_MONITOR A) PLM,  MONITOR_DATA MO WHERE PLM.SQL_ID = :B9 AND PLM.SQL_EXEC_START = :B8 AND PLM.SQL_EXEC_ID = :B7 AND PLM.INST_ID = MO.INST_ID AND PLM.INST_ID BETWEEN :B11 AND :B10 AND PLM.KEY = MO.KEY GROUP BY PLM.PLAN_LINE_ID,	PLM.PLAN_OPERATION,  PLM.PLAN_OPTIONS) PM0) PM WHERE AH.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND AT.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND LO.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND (:B21 IS NULL OR PM.PLAN_LINE_ID = :B21 )) PLI) ELSE NULL END,	CASE WHEN :B42 = 1 THEN DBMS_SQLTUNE.BUILD_STASH_XML( SESSION_ID=&gt;:B19 ,  SESSION_SERIAL=&gt;:B18 ,	SESSION_INST_ID=&gt;:B17 ,  PX_MODE=&gt;'yes',	START_TIME=&gt;:B20 ,  END_TIME=&gt;:B22 ,  MISSING_SECONDS=&gt; :B41 ,  INSTANCE_LOW_FILTER=&gt;:B11 ,  INSTANCE_HIGH_FILTER=&gt;:B10 ,  BUCKET_MAX_COUNT=&gt;NULL,  BUCKET_INTERVAL=&gt;:B26 ,  REPORT_LEVEL=&gt;'typical',  CPU_CORES=&gt;:B40 ,  IS_HYPER=&gt;:B39 ) ELSE NULL END),  (CASE WHEN :B38 = 1 THEN (SELECT XMLELEMENT( &quot;skewed_sessions&quot;,  XMLATTRIBUTES( DECODE(MIN(INST_ID),  NULL,  :B17 ,  MIN(INST_ID)) AS &quot;min_iid&quot;,	DECODE(MAX(INST_ID),  NULL,  :B17 ,  MAX(INST_ID)) AS
&quot;max_iid&quot;),  XMLAGG( XMLELEMENT( &quot;s&quot;,  XMLATTRIBUTES( INST_ID AS &quot;i&quot;),  SESSION_ID) ORDER BY INST_ID,  SESSION_ID)) FROM (SELECT SESS.* FROM (SELECT DECODE(AD.DFO_MOST_ACTIVE_IID,  :B17 ,  NULL,  AD.DFO_MOST_ACTIVE_IID) INST_ID,  AD.DFO_MOST_ACTIVE_SID SESSION_ID FROM ASH_DATA AD WHERE AD.DFO_MOST_ACTIVE_COUNT IS NOT NULL GROUP BY AD.DFO_MOST_ACTIVE_IID,  AD.DFO_MOST_ACTIVE_SID ORDER BY MAX(AD.DFO_MOST_ACTIVE_COUNT) DESC) SESS WHERE ROWNUM &lt;= 100)) ELSE NULL END),  (CASE WHEN :B37 = 1 THEN (SELECT XMLELEMENT( &quot;report_repository_summary&quot;,  CASE WHEN MA.MAX_DBOP_NAME IS NOT NULL THEN XMLELEMENT( &quot;dbop&quot;,  XMLATTRIBUTES('F' AS &quot;detail&quot;,  MA.MAX_DBOP_NAME AS &quot;dbop_name&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,  :B12 ) AS &quot;dbop_exec_start&quot;,  MA.MAX_DBOP_EXEC_ID AS &quot;dbop_exec_id&quot;),  XMLFOREST( MA.MAX_STATUS AS &quot;status&quot;,  TO_CHAR(NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME),  :B12 )AS
&quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 )AS &quot;last_refresh_time&quot;,  MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,  MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,	MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,	MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_entry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,  MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,	MA.MAX_PX_DOP AS &quot;dop&quot;,  MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;),  CASE WHEN MA.MAX_ERROR_NUMBER IS NULL THEN NULL ELSE XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MA.MAX_ERROR_NUMBER AS &quot;number&quot;,  MA.MAX_ERROR_FACILITY AS &quot;facility&quot;),  MA.MAX_ERROR_MESSAGE) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME))*86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,  0,  1,  MA.SUM_IO_INTER_BYTES),  2)) END,	CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_BYTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,  2))) END) ) ELSE XMLELEMENT( &quot;sql&quot;,  XMLATTRIBUTES( MA.MAX_SQL_ID AS &quot;sql_id&quot;,  TO_CHAR(MA.MAX_SQL_EXEC_START,  :B12 ) AS &quot;sql_exec_start&quot;,	MA.MAX_SQL_EXEC_ID AS &quot;sql_exec_id&quot;),  XMLFOREST(MA.MAX_STATUS AS &quot;status&quot;,  SUBSTR(MA.SQLMON_TEXT,  1,  100) AS &quot;sql_text&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,	:B12 ) AS &quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 ) AS &quot;last_refresh_time&quot;,	MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,	MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,  MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,  MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PLAN_HASH_VALUE AS &quot;plan_hash&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_entry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,	MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MA.MAX_PX_DOP AS &quot;dop&quot;,	MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;,  MA.SUM_SERVERS_REQUESTED AS &quot;px_servers_requested&quot;,  MA.SUM_SERVERS_ALLOCATED AS &quot;px_servers_allocated&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('duration' AS &quot;name&quot;),	GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- MA.MAX_SQL_EXEC_START) * 86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME
,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  DECODE(MA.SUM_IO_UNC_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MA.SUM_IO_UNC_BYTES)),  DECODE(MA.SUM_IO_ELIG_BYTES,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MA.SUM_IO_ELIG_BYTES)),  DECODE(MA.SUM_IO_RET_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MA.SUM_IO_RET_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,	0,  1,	MA.SUM_IO_INTER_BYTES),  2)) END,  CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,	0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_BYTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,	2))) END) ) END) FROM MONITOR_AGG MA) ELSE NULL END) FROM (SELECT CASE WHEN V1.XPLAN_XML IS NULL OR V1.XPLAN_XML.EXISTSNODE('/error') &gt; 0 THEN NULL ELSE V1.XPLAN_XML END XPLAN_XML FROM (SELECT CASE WHEN :B36 = 1 THEN DBMS_XPLAN.BUILD_PLAN_XML( TABLE_NAME=&gt;'gv$all_sql_plan',  PLAN_TAG=&gt;'plan',	FILTER_PREDS=&gt;:B35 ,  FORMAT=&gt;'-PROJECTION +ALIAS +ADAPTIVE') ELSE NULL END XPLAN_XML FROM DUAL) V1) CONST_VIEW</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9zbjgq87hy6uv"></a>9zbjgq87hy6uv</td><td class='awrc'><pre_sqltext class="awr">select t.ts#, t.file#, t.block#, nvl(t.bobj#, 0), nvl(t.tab#, 0), t.intcols, nvl(t.clucols, 0), t.flags, t.pctfree$, t.pctused$, t.initrans, t.maxtrans, t.rowcnt, t.blkcnt, t.empcnt, t.avgspc, t.chncnt, t.avgrln, t.analyzetime, t.samplesize, t.cols, t.property, nvl(t.degree, 1), nvl(t.instances, 1), t.avgspc_flb, t.flbcnt, t.kernelcols, nvl(t.trigflag,  0), nvl(t.spare1, 0), nvl(t.spare2, 0), t.spare4, t.spare6, ts.cachedblk, ts.cachehit, ts.logicalread, ts.im_imcu_count, ts.im_block_count, ts.im_sys_incarnation, ts.im_stat_update_time, ts.scanrate, nvl(t.acdrflags,  0), nvl(t.acdrtsobj#,  0), t.acdrdefaulttime,  nvl(t.acdrrowtsintcol#,  0) from tab$ t, tab_stats$ ts where t.obj#= :1 and t.obj# = ts.obj# (+)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="a3jpjzh7mtwwp"></a>a3jpjzh7mtwwp</td><td class='awrnc'><pre_sqltext class="awr">select /*+ index(idl_ub2$ i_idl_ub21) */ piece#, length, piece from idl_ub2$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="a52uzk244rp72"></a>a52uzk244rp72</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '200';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="acmvv4fhdc9zh"></a>acmvv4fhdc9zh</td><td class='awrnc'><pre_sqltext class="awr">select obj#, type#, ctime, mtime, stime,  status,  dataobj#,  flags,  oid$,  spare1,  spare2,  spare3,  signature,  spare7,  spare8,  spare9,  nvl(dflcollid,  16382),  creappid,  creverid,  modappid,	modverid,  crepatchid,	modpatchid from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is null</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="akay050h1s6c4"></a>akay050h1s6c4</td><td class='awrc'><pre_sqltext class="awr">** SQL Text Not Available **</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="asvzxj61dc5vs"></a>asvzxj61dc5vs</td><td class='awrnc'><pre_sqltext class="awr">select timestamp,  flags from fixed_obj$ where obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="atwuyuvqkf27w"></a>atwuyuvqkf27w</td><td class='awrc'><pre_sqltext class="awr">SELECT /*+ OPT_PARAM('_fix_control' '16391176:1') */ GROUP_TYPE,  BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END,  SUM(TM_CPU_FIRST_BUCKET_VALUE) TM_CPU_FIRST_BUCKET_VALUE,	SUM(TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE,	SUM(TM_DB_FIRST_BUCKET_VALUE) TM_DB_FIRST_BUCKET_VALUE,  SUM(TM_DB_MIDDLE_BUCKETS_VALUE) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(TM_DB_LAST_BUCKET_VALUE) TM_DB_LAST_BUCKET_VALUE,  SUM(RREQS_FIRST_BUCKET_VALUE) RREQS_FIRST_BUCKET_VALUE,  SUM(RREQS_MIDDLE_BUCKETS_VALUE) RREQS_MIDDLE_BUCKETS_VALUE,  SUM(RREQS_LAST_BUCKET_VALUE) RREQS_LAST_BUCKET_VALUE,  SUM(WREQS_FIRST_BUCKET_VALUE) WREQS_FIRST_BUCKET_VALUE,  SUM(WREQS_MIDDLE_BUCKETS_VALUE) WREQS_MIDDLE_BUCKETS_VALUE,	SUM(WREQS_LAST_BUCKET_VALUE) WREQS_LAST_BUCKET_VALUE,  SUM(RBYTES_FIRST_BUCKET_VALUE) RBYTES_FIRST_BUCKET_VALUE,  SUM(RBYTES_MIDDLE_BUCKETS_VALUE) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(RBYTES_LAST_BUCKET_VALUE) RBYTES_LAST_BUCKET_VALUE,  SUM(WBYTES_FIRST_BUCKET_VALUE) WBYTES_FIRST_BUCKET_VALUE,  SUM(WBYTES_MIDDLE_BUCKETS_VALUE) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(WBYTES_LAST_BUCKET_VALUE) WBYTES_LAST_BUCKET_VALUE,  SUM(IBYTES_FIRST_BUCKET_VALUE) IBYTES_FIRST_BUCKET_VALUE,	SUM(IBYTES_MIDDLE_BUCKETS_VALUE) IBYTES_MIDDLE_BUCKETS_VALUE,  SUM(IBYTES_LAST_BUCKET_VALUE) IBYTES_LAST_BUCKET_VALUE,	SUM(CRBYTES_FIRST_BUCKET_VALUE) CRBYTES_FIRST_BUCKET_VALUE,  SUM(CRBYTES_MIDDLE_BUCKETS_VALUE) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(CRBYTES_LAST_BUCKET_VALUE) CRBYTES_LAST_BUCKET_VALUE,  SUM(PGA_ALLOC_FIRST_BUCKET_VALUE) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(PGA_ALLOC_MIDDLE_BUCKETS_VALUE) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(PGA_ALLOC_LAST_BUCKET_VALUE) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(TMP_ALLOC_FIRST_BUCKET_VALUE) TMP_ALLOC_FIRST_BUCKET_VALUE,  SUM(TMP_ALLOC_MIDDLE_BUCKETS_VALUE) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(TMP_ALLOC_LAST_BUCKET_VALUE) TMP_ALLOC_LAST_BUCKET_VALUE FROM ( SELECT GROUP_TYPE,  BUCKET_START,  TM_BUCKET_START,  TM_BUCKET_END,  BUCKET_END,  TM_GROUP_TYPE,  SUM(GVTF.TM_CPU_FIRST_BUCKET_VALUE) TM_CPU_FIRST_BUCKET_VALUE,  SUM(GVTF.TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE,  SUM(GVTF.TM_DB_FIRST_BUCKET_VALUE) TM_DB_FIRST_BUCKET_VALUE,  SUM(GVTF.TM_DB_MIDDLE_BUCKETS_VALUE) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TM_DB_LAST_BUCKET_VALUE) TM_DB_LAST_BUCKET_VALUE,	SUM(GVTF.RREQS_FIRST_BUCKET_VALUE) RREQS_FIRST_BUCKET_VALUE,  SUM(GVTF.RREQS_MIDDLE_BUCKETS_VALUE) RREQS_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.RREQS_LAST_BUCKET_VALUE) RREQS_LAST_BUCKET_VALUE,  SUM(GVTF.WREQS_FIRST_BUCKET_VALUE) WREQS_FIRST_BUCKET_VALUE,  SUM(GVTF.WREQS_MIDDLE_BUCKETS_VALUE) WREQS_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.WREQS_LAST_BUCKET_VALUE) WREQS_LAST_BUCKET_VALUE,	SUM(GVTF.RBYTES_FIRST_BUCKET_VALUE) RBYTES_FIRST_BUCKET_VALUE,	SUM(GVTF.RBYTES_MIDDLE_BUCKETS_VALUE) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.RBYTES_LAST_BUCKET_VALUE) RBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.WBYTES_FIRST_BUCKET_VALUE) WBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.WBYTES_MIDDLE_BUCKETS_VALUE) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.WBYTES_LAST_BUCKET_VALUE) WBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.IBYTES_FIRST_BUCKET_VALUE) IBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.IBYTES_MIDDLE_BUCKETS_VALUE) IBYTES_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.IBYTES_LAST_BUCKET_VALUE) IBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.CRBYTES_FIRST_BUCKET_VALUE) CRBYTES_FIRST_BUCKET_VALUE,	SUM(GVTF.CRBYTES_MIDDLE_BUCKETS_VALUE) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.CRBYTES_LAST_BUCKET_VALUE) CRBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.PGA_ALLOC_FIRST_BUCKET_VALUE) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(GVTF.PGA_ALLOC_MIDDLE_BUCKETS_VALUE) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.PGA_ALLOC_LAST_BUCKET_VALUE) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(GVTF.TMP_ALLOC_FIRST_BUCKET_VALUE) TMP_ALLOC_FIRST_BUCKET_VALUE,	SUM(GVTF.TMP_ALLOC_MIDDLE_BUCKETS_VALUE) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TMP_ALLOC_LAST_BUCKET_VALUE) TMP_ALLOC_LAST_BUCKET_VALUE FROM TABLE(SYS.GV$(CURSOR( SELECT INST_ID,	GROUP_TYPE,  BUCKET_START,  TM_BUCKET_START,  TM_BUCKET_END,  BUCKET_END,  TM_GROUP_TYPE,  SUM(TM_DELTA_CPU_TIME * TM_FIRST_BUCKET_RATIO) TM_CPU_FIRST_BUCKET_VALUE,  SUM(TM_DELTA_CPU_TIME * TM_MIDDLE_BUCKETS_RATIO) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(TM_DELTA_CPU_TIME * TM_LAST_BUCKET_RATIO) TM_CPU_LAST_BUCKET_VALUE,  SUM(TM_DELTA_DB_TIME * TM_FIRST_BUCKET_RATIO) TM_DB_FIRST_BUCKET_VALUE,  SUM(TM_DELTA_DB_TIME * TM_MIDDLE_BUCKETS_RATIO) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(TM_DELTA_DB_TIME * TM_LAST_BUCKET_RATIO) TM_DB_LAST_BUCKET_VALUE,  SUM(DELTA_READ_REQUESTS * FIRST_BUCKET_RATIO) RREQS_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_REQUESTS * MIDDLE_BUCKETS_RATIO) RREQS_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_REQUESTS * LAST_BUCKET_RATIO) RREQS_LAST_BUCKET_VALUE,	SUM(DELTA_WRITE_REQUESTS * FIRST_BUCKET_RATIO) WREQS_FIRST_BUCKET_VALUE,  SUM(DELTA_WRITE_REQUESTS * MIDDLE_BUCKETS_RATIO) WREQS_MIDDLE_BUCKETS_VALUE,	SUM(DELTA_WRITE_REQUESTS * LAST_BUCKET_RATIO) WREQS_LAST_BUCKET_VALUE,	SUM(DELTA_READ_BYTES * FIRST_BUCKET_RATIO) RBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_BYTES * MIDDLE_BUCKETS_RATIO) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_BYTES * LAST_BUCKET_RATIO) RBYTES_LAST_BUCKET_VALUE,  SUM(DELTA_WRITE_BYTES * FIRST_BUCKET_RATIO) WBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_WRITE_BYTES * MIDDLE_BUCKETS_RATIO) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_WRITE_BYTES * LAST_BUCKET_RATIO) WBYTES_LAST_BUCKET_VALUE,  SUM(DELTA_INTERCONNECT_BYTES * FIRST_BUCKET_RATIO) IBYTES_FIRST_BUCKET_VALUE,	SUM(DELTA_INTERCONNECT_BYTES * MIDDLE_BUCKETS_RATIO) IBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_INTERCONNECT_BYTES * LAST_BUCKET_RATIO) IBYTES_LAST_BUCKET_VALUE,	SUM(DELTA_READ_MEM_BYTES * FIRST_BUCKET_RATIO) CRBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_MEM_BYTES * MIDDLE_BUCKETS_RATIO) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_MEM_BYTES * LAST_BUCKET_RATIO) CRBYTES_LAST_BUCKET_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * FIRST_BUCKET_RATIO) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * MIDDLE_BUCKETS_RATIO) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * LAST_BUCKET_RATIO) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * FIRST_BUCKET_RATIO) TMP_ALLOC_FIRST_BUCKET_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * MIDDLE_BUCKETS_RATIO) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * LAST_BUCKET_RATIO) TMP_ALLOC_LAST_BUCKET_VALUE FROM ( SELECT USERENV('INSTANCE') INST_ID,  ROW_ID,  SID,	SAMPLE_TIME,  CASE WHEN BUCKET_END IS NULL OR BUCKET_START IS NULL THEN NULL WHEN BUCKET_START = TM_BUCKET_START AND BUCKET_START = BUCKET_END THEN 'CO' WHEN BUCKET_START = TM_BUCKET_START THEN 'CM' WHEN BUCKET_START = BUCKET_END THEN 'SO' ELSE 'SM' END GROUP_TYPE,  CASE WHEN TM_BUCKET_START IS NULL OR BUCKET_END IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL WHEN TM_BUCKET_START = BUCKET_END THEN 'O' ELSE 'M' END TM_GROUP_TYPE,  START_SEG,  BUCKET_START,  BUCKET_START_OFFSET,  TM_START_SEG,  CASE WHEN TM_BUCKET_START IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL ELSE TM_BUCKET_START END TM_BUCKET_START,  CASE WHEN TM_BUCKET_START IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL ELSE BUCKET_END END TM_BUCKET_END,	TM_BUCKET_START_OFFSET,  LENGTH_SEG,  TM_LENGTH_SEG,  END_SEG,	BUCKET_END,  BUCKET_END_OFFSET,  CASE WHEN BUCKET_START != BUCKET_END THEN (:B9 - BUCKET_START_OFFSET) / LENGTH_SEG ELSE 1 END FIRST_BUCKET_RATIO,  CASE WHEN BUCKET_END &gt;= BUCKET_START + 2 THEN :B9 / LENGTH_SEG ELSE NULL END MIDDLE_BUCKETS_RATIO,  CASE WHEN BUCKET_START != BUCKET_END THEN BUCKET_END_OFFSET / LENGTH_SEG ELSE NULL END LAST_BUCKET_RATIO,  CASE WHEN TM_BUCKET_START != BUCKET_END THEN (:B9 - TM_BUCKET_START_OFFSET) / TM_LENGTH_SEG ELSE 1 END TM_FIRST_BUCKET_RATIO,  CASE WHEN BUCKET_END &gt;= TM_BUCKE
T_START + 2 THEN :B9 / TM_LENGTH_SEG ELSE NULL END TM_MIDDLE_BUCKETS_RATIO,  CASE WHEN TM_BUCKET_START != BUCKET_END THEN BUCKET_END_OFFSET / TM_LENGTH_SEG ELSE NULL END TM_LAST_BUCKET_RATIO,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,	DELTA_READ_IO_REQUESTS DELTA_READ_REQUESTS,  DELTA_WRITE_IO_REQUESTS DELTA_WRITE_REQUESTS,  DELTA_READ_IO_BYTES DELTA_READ_BYTES,  DELTA_WRITE_IO_BYTES DELTA_WRITE_BYTES,  DELTA_INTERCONNECT_IO_BYTES DELTA_INTERCONNECT_BYTES,  DELTA_READ_MEM_BYTES DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,	SAMPLE_TIME,  START_SEG,  TRUNC(START_SEG / :B9 ) BUCKET_START,  MOD(START_SEG,  :B9 ) BUCKET_START_OFFSET,  TM_START_SEG,  TRUNC(TM_START_SEG/:B9 ) TM_BUCKET_START,  MOD(TM_START_SEG,  :B9 ) TM_BUCKET_START_OFFSET,  TRUNC(END_SEG/:B9 ) BUCKET_END,  MOD(END_SEG,	:B9 ) BUCKET_END_OFFSET,  END_SEG,  LENGTH_SEG,  TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,	DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,	DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,	SID,  SAMPLE_TIME,  TIME_INTERVAL,  CASE WHEN START_SEG &lt; 0 THEN 0 ELSE START_SEG END START_SEG,  CASE WHEN TM_START_SEG &lt; 0 THEN 0 ELSE TM_START_SEG END TM_START_SEG,  CASE WHEN END_SEG &gt; TIME_INTERVAL THEN TIME_INTERVAL ELSE END_SEG END END_SEG,  (LENGTH_SEG - (CASE WHEN START_SEG &lt; 0 THEN -START_SEG ELSE 0 END + CASE WHEN END_SEG &gt; TIME_INTERVAL THEN END_SEG - TIME_INTERVAL ELSE 0 END)) LENGTH_SEG,  (TM_LENGTH_SEG - (CASE WHEN TM_START_SEG &lt; 0 THEN -TM_START_SEG ELSE 0 END + CASE WHEN END_SEG &gt; TIME_INTERVAL THEN END_SEG - TIME_INTERVAL ELSE 0 END)) TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,	TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,	PGA_ALLOCATED,	TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,  SAMPLE_TIME,  TIME_INTERVAL,  LENGTH_SEG,  TM_LENGTH_SEG,  END_SEG - TM_LENGTH_SEG TM_START_SEG,  END_SEG - LENGTH_SEG START_SEG,  END_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,	DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,  SAMPLE_TIME,  EXTRACT(SECOND FROM REL_SAMPLE_TIME_INT) + EXTRACT(MINUTE FROM REL_SAMPLE_TIME_INT)*60 + EXTRACT(HOUR FROM REL_SAMPLE_TIME_INT)*3600 + EXTRACT(DAY FROM REL_SAMPLE_TIME_INT)*3600*24 END_SEG,	TIME_INTERVAL,	DELTA_TIME/1000000 LENGTH_SEG,	TM_DELTA_TIME/1000000 TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,	DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROWNUM ROW_ID,  SESSION_ID SID,  CAST(FROM_TZ(SAMPLE_TIME,	DBTIMEZONE) AS DATE) SAMPLE_DATE,  SAMPLE_TIME,  (SAMPLE_TIME - CAST(:B8 AS TIMESTAMP)) REL_SAMPLE_TIME_INT,  TRUNC((:B7 - :B8 ) * 3600 * 24) TIME_INTERVAL,  :B8 AS BND_START_INTERVAL ,  :B7 AS BND_END_INTERVAL ,  TM_DELTA_TIME,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,	DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ASH0.* FROM V$ACTIVE_SESSION_HISTORY ASH0 WHERE SAMPLE_TIME BETWEEN :B6 AND :B5 AND ( (SESSION_ID = :B2 AND SESSION_SERIAL# = :B1 AND USERENV('INSTANCE') = :B3 ) OR (:B4 = 'yes' AND QC_INSTANCE_ID = :B3 AND QC_SESSION_ID = :B2 AND QC_SESSION_SERIAL# = :B1 ))) ) ASH1 WHERE SAMPLE_DATE &gt;= BND_START_INTERVAL AND SAMPLE_DATE &lt;= BND_END_INTERVAL + 120/3600/24 ) ) WHERE START_SEG &lt;= TIME_INTERVAL ) WHERE (LENGTH_SEG IS NOT NULL AND LENGTH_SEG &gt; 0) OR (TM_LENGTH_SEG IS NOT NULL AND TM_LENGTH_SEG &gt; 0)) ) GROUP BY INST_ID,  GROUP_TYPE,  BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END))) GVTF WHERE INST_ID &gt;= :B11 AND INST_ID &lt;= :B10 GROUP BY GROUP_TYPE,	BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END ) GROUP BY GROUPING SETS ( (GROUP_TYPE,  BUCKET_START,  BUCKET_END),  (TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END) )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="b1wc53ddd6h3p"></a>b1wc53ddd6h3p</td><td class='awrnc'><pre_sqltext class="awr">select audit$, options from procedure$ where obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="b329y81c4wbq1"></a>b329y81c4wbq1</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '189';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;


IF ( v_max_loop_iterations &gt; 0 )  THEN

	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;


			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN

				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="b7t6ccanqd3pt"></a>b7t6ccanqd3pt</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '192';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="babvt2tsbymy9"></a>babvt2tsbymy9</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '69';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bhdvtsvjhgvrh"></a>bhdvtsvjhgvrh</td><td class='awrnc'><pre_sqltext class="awr">SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="br9195pb68r6p"></a>br9195pb68r6p</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '82';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;




IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------



Instances in this Workload Repository schema
	IF  ( v_select_only_workload = TRUE ) THEN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bx7t0n3f5rv2v"></a>bx7t0n3f5rv2v</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '62';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bxpcry2tpc217"></a>bxpcry2tpc217</td><td class='awrc'><pre_sqltext class="awr">select /*+ opt_param('parallel_execution_enabled',
				   'false') EXEC_FROM_DBMS_XPLAN */ * from gv$all_sql_plan where 1=0</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="c2gukkg28mgry"></a>c2gukkg28mgry</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '78';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="c6bsgstj3jm1y"></a>c6bsgstj3jm1y</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '38';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="cmg650ct9w552"></a>cmg650ct9w552</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '187';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="d5jwvg7u8kh94"></a>d5jwvg7u8kh94</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '181';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="d8zwkn2fy9t2s"></a>d8zwkn2fy9t2s</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '179';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="dayqkm9pjdtv5"></a>dayqkm9pjdtv5</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '184';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="ddpwcrwq8vccq"></a>ddpwcrwq8vccq</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '180';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
  DB Id      Inst Num	DB Name      Instance	  Host
v_work_unit PLS_INTEGER := '80' ;
------------ ---------- ---------    ----------   ------
* 3890827801	 1	P60SDB	     p60sdb1	  mcracpoc1.ex
* 3890827801	 2	P60SDB	     p60sdb2	  mcracpoc2.ex
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';

v_do_hotspot   VARCHAR(7) := 'FALSE';
Using 3890827801 for database Id
v_hotspot_mb  NUMBER := '10';
Using instances ALL (default 'ALL')
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;

				v_scan_query_quota := FALSE;

Specify the number of days of snapshots to choose from
			ELSE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
				IF ( v_scan_query_quota = FALSE ) THEN
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT


					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
Enter value for num_days: 						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;

	END IF;
Listing all Completed Snapshots

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="dhz4fxc8z3b1n"></a>dhz4fxc8z3b1n</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '193';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
DB Name      Snap Id	   Snap Started    Snap Level
		-- so reset flags and counters
------------ ---------- ------------------ ----------

P60SDB		     1	17 Feb 2020 17:00    1
		v_scan_query_quota := FALSE;
		     2	17 Feb 2020 18:00    1
		     3	18 Feb 2020 12:19    1
		     4	18 Feb 2020 13:00    1
		     5	18 Feb 2020 14:03    1
		v_scan_queries_cnt := 0;
		     6	18 Feb 2020 16:18    1
		     7	18 Feb 2020 17:00    1
		     8	18 Feb 2020 18:00    1
		     9	18 Feb 2020 19:00    1
		v_random_access_queries_cnt := 0;
		    10	18 Feb 2020 20:00    1
		    11	18 Feb 2020 21:00    1
		    12	18 Feb 2020 22:00    1
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f3ww8rgva3hrs"></a>f3ww8rgva3hrs</td><td class='awrnc'><pre_sqltext class="awr">update /* KSXM:FLUSH COL */ sys.col_usage$ set		       equality_preds	 = equality_preds    + decode(bitand(:flag, 1), 0, 0, 1),    equijoin_preds    = equijoin_preds    + decode(bitand(:flag, 2), 0, 0, 1),    nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag, 4), 0, 0, 1),	 range_preds	   = range_preds       + decode(bitand(:flag, 8), 0, 0, 1),    like_preds	 = like_preds	     + decode(bitand(:flag, 16), 0, 0, 1),    null_preds	= null_preds	    + decode(bitand(:flag, 32), 0, 0, 1),    flags	       = flags + :flag - bitand(flags, :flag),	   timestamp = :time where obj# = :objn and intcol# = :coln</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="f7xnvp44nukp7"></a>f7xnvp44nukp7</td><td class='awrc'><pre_sqltext class="awr">insert into  wrm$_snapshot_details  (snap_id, dbid, instance_number, table_id, begin_time, end_time, step_id)    values (:snap_id, :dbid, :instance_number, :bind1, :bind2, :bind3, :step_id)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f80h0xb1qvbsk"></a>f80h0xb1qvbsk</td><td class='awrnc'><pre_sqltext class="awr">SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fh5ufah919kun"></a>fh5ufah919kun</td><td class='awrc'><pre_sqltext class="awr">select /*+ index(idl_sb4$ i_idl_sb41) */ piece#, length, piece from idl_sb4$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fn5s5p6hr6702"></a>fn5s5p6hr6702</td><td class='awrnc'><pre_sqltext class="awr">INSERT INTO wri$_adv_message_groups (task_id, id, seq, message#, fac, hdr, lm, nl, p1, p2, p3, p4, p5) VALUES (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13)</pre_sqltext></td></tr>
		    13	18 Feb 2020 23:00    1
<tr><td scope="row" class='awrc'><a class="awr" name="fndd8kn6zzc00"></a>fndd8kn6zzc00</td><td class='awrc'><pre_sqltext class="awr">DECLARE
		    14	19 Feb 2020 00:00    1
		    15	19 Feb 2020 01:00    1
		    16	19 Feb 2020 02:00    1
		    17	19 Feb 2020 03:00    1
v_default_schema_number PLS_INTEGER := '172';
		    18	19 Feb 2020 04:00    1
		    19	19 Feb 2020 05:00    1
		    20	19 Feb 2020 06:00    1
		    21	19 Feb 2020 07:00    1
v_update_pct PLS_INTEGER := '0';
		    22	19 Feb 2020 08:00    1
		    23	19 Feb 2020 09:00    1
		    24	19 Feb 2020 10:00    1
		    25	19 Feb 2020 11:00    1
v_max_loop_iterations PLS_INTEGER := '0';
		    26	19 Feb 2020 12:00    1
		    27	19 Feb 2020 13:00    1
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
		    28	20 Feb 2020 07:00    1
		    29	20 Feb 2020 08:00    1
		    30	20 Feb 2020 14:53    1
v_random_workload_only BOOLEAN := FALSE;
		    31	20 Feb 2020 16:00    1
		    32	20 Feb 2020 17:00    1
		    33	20 Feb 2020 20:03    1
		    34	20 Feb 2020 20:09    1

		    35	20 Feb 2020 20:12    1
		    36	20 Feb 2020 20:15    1
		    37	20 Feb 2020 20:22    1

		    38	20 Feb 2020 20:32    1
		    39	20 Feb 2020 20:38    1
		    40	20 Feb 2020 20:41    1
		    41	20 Feb 2020 20:44    1
v_random_block PLS_INTEGER := 1;
		    42	20 Feb 2020 20:49    1
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

		    43	20 Feb 2020 20:52    1
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
		    44	20 Feb 2020 20:59    1
		    45	20 Feb 2020 21:14    1
		    46	20 Feb 2020 21:26    1
		    47	20 Feb 2020 21:32    1
EXECUTE IMMEDIATE v_home_schema_str;
		    48	20 Feb 2020 21:45    1



IF ( v_hot_schema_modulus != 0 ) THEN

Specify the Begin and End Snapshot Ids
	v_do_hot_schema := TRUE;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 47

END IF;
End   Snapshot Id specified: 48


IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;


		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fxh7dn0mbs5cx"></a>fxh7dn0mbs5cx</td><td class='awrnc'><pre_sqltext class="awr"> WITH ash as  (SELECT ash.event_id,   sum(decode(ash.session_type,  1,  1,  0)) as cnt_fg,   count(*) as cnt_total  FROM  WRH$_ACTIVE_SESSION_HISTORY ash  WHERE  ash.dbid = :dbid  AND ash.snap_id &gt; :bid AND ash.snap_id &lt;= :eid  AND  ash.wait_time = 0  GROUP BY ash.event_id	),   evts as  (SELECT event_id,  sum(w_cnt) as w_cnt,  sum(to_cnt) as to_cnt,	sum(w_time) as w_time  , sum(w_cnt_fg) as w_cnt_fg,  sum(to_cnt_fg) as to_cnt_fg,   sum(w_time_fg) as w_time_fg  FROM (SELECT es.event_id as event_id,	 es.total_waits - nvl(bs.total_waits, 0) as w_cnt,   es.TOTAL_TIMEOUTS - nvl(bs.TOTAL_TIMEOUTS, 0) as to_cnt,	es.TIME_WAITED_MICRO - nvl(bs.TIME_WAITED_MICRO, 0)  as w_time	, es.total_waits_fg - nvl(bs.total_waits_fg, 0)  as w_cnt_fg,	es.TOTAL_TIMEOUTS_FG - nvl(bs.TOTAL_TIMEOUTS_FG, 0)  as to_cnt_fg,   es.TIME_WAITED_MICRO_FG - nvl(bs.TIME_WAITED_MICRO_FG, 0)	as w_time_fg  FROM  WRH$_SYSTEM_EVENT es ,  WRH$_SYSTEM_EVENT bs  WHERE  es.dbid = :dbid  AND es.snap_id = :eid  AND bs.dbid(+) = :dbid AND bs.instance_number(+) = es.instance_number AND bs.snap_id(+) = :bid  AND  es.instance_number = bs.instance_number(+)  AND  es.event_id = bs.event_id(+)  UNION ALL	SELECT x.event_hash as event_id,   0 as w_cnt,	0 as to_cnt,  0 as w_time  , 0 as w_cnt_fg,  0 as to_cnt_fg,  0 as w_time_fg  FROM  X$KEHEVTMAP x  )  GROUP BY event_id  ),   awr_names as  (SELECT e.event_id,  max(e.event_name) as event_name,	    max(e.wait_class_id) as wait_class_id,	     max(e.wait_class) as wait_class,		max(e.parameter1) as parameter1,	   max(e.parameter2) as parameter2,	      max(e.parameter3) as parameter3  FROM  WRH$_EVENT_NAME e	WHERE e.dbid = :dbid GROUP BY e.event_id  ),   named_events as	(SELECT names.event_id as event_id,   names.event_name as event_name,	evts.w_cnt as w_cnt,   evts.to_cnt as to_cnt,	evts.w_time as w_time,	 evts.w_cnt_fg as w_cnt_fg,   evts.to_cnt_fg as to_cnt_fg,   evts.w_time_fg as w_time_fg,   names.wait_class_id as wait_class_id,   names.parameter1 as p1,   names.parameter2 as p2,	names.parameter3 as p3	FROM   evts,  awr_names names  WHERE  evts.event_id = names.event_id  AND  names.wait_class_id &lt;&gt; 2723168908  ),	 data as  (SELECT e.event_id as event_id,   e.event_name as event_name,   e.wait_class_id as wait_class_id,   e.p1 as p1,   e.p2 as p2,   e.p3 as p3,	e.w_cnt as total_w_cnt,   e.to_cnt as total_to_cnt,   e.w_time as total_w_time,   e.w_cnt_fg as fg_w_cnt,   e.to_cnt_fg as fg_to_cnt,	e.w_time_fg as fg_w_time,   nvl(a.cnt_total, 0) as total_ash_cnt,   nvl(a.cnt_fg, 0) as fg_ash_cnt  FROM   named_events e,  ash a  WHERE  e.event_id  = a.event_id(+)  ),   final_query as  (SELECT d.event_name,   d.event_id,   d.p1 as p1,	case when (p1 is null OR p1 = '0')  then 0 else 1 end as p1valid,   d.p2 as p2,   case when (p2 is null OR p2 = '0')  then 0 else 1 end as p2valid,   d.p3 as p3,   case when (p3 is null OR p3 = '0')	then 0 else 1 end as p3valid,	nvl(e.keh_id, 0) as keh_evt_id,   c.class# as class_num,   d.wait_class_id as wait_class_id,   c.keh_id as keh_ecl_id,	 round(d.total_ash_cnt, 0) as total_ash_cnt,   round(d.fg_ash_cnt, 0) as fg_ash_cnt,   round(d.fg_w_cnt, 0) as fg_w_cnt,   round(d.fg_to_cnt, 0) as fg_to_cnt,	 round(d.fg_w_time, 0) as fg_w_time,   round(d.total_w_cnt, 0) as total_w_cnt,	 round(d.total_to_cnt, 0) as total_to_cnt,   round(d.total_w_time, 0) as total_w_time  from data d,   X$KEHEVTMAP e ,  X$KEHECLMAP c  where d.event_id = e.event_hash(+)  and d.wait_class_id = c.class_hash  )  SELECT *  FROM   final_query  WHERE  keh_evt_id &gt; 0 OR total_w_time &gt; 0	ORDER BY wait_class_id,  fg_w_time DESC,  event_id </pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fy5wc7anwa0yh"></a>fy5wc7anwa0yh</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '154';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>

Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_rac_47_48.txt.  To use this name,
press <return> to continue, otherwise enter an alternative.

<tr><td scope="row" class='awrnc'><a class="awr" name="g0t052az3rx44"></a>g0t052az3rx44</td><td class='awrnc'><pre_sqltext class="awr">select name, intcol#, segcol#, type#, length, nvl(precision#, 0), decode(type#, 2, nvl(scale, -127/*MAXSB1MINAL*/), 178, scale, 179, scale, 180, scale, 181, scale, 182, scale, 183, scale, 231, scale, 0), null$, fixedstorage, nvl(deflength, 0), default$, rowid, col#, property,  nvl(charsetid, 0), nvl(charsetform, 0), spare1, spare2, nvl(spare3, 0),  nvl(evaledition#, 1), nvl(unusablebefore#, 0), nvl(unusablebeginning#, 0),  case when (type# in (1, 8, 9, 96, 112)) then nvl(collid,  16382) else 0 end case,  nvl(collintcol#, 0),  nvl(acdrrescol#,  0),  nvl(spare7,  0),  nvl(spare9,  0),  nvl(spare10,  0) from col$ where obj#=:1 order by intcol#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="gjaap3w3qbf8c"></a>gjaap3w3qbf8c</td><td class='awrc'><pre_sqltext class="awr">select count(*) from ilmobj$ where rownum = 1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="grwydz59pu6mc"></a>grwydz59pu6mc</td><td class='awrnc'><pre_sqltext class="awr">select text from view$ where rowid=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="gx4mv66pvj3xz"></a>gx4mv66pvj3xz</td><td class='awrc'><pre_sqltext class="awr">select con#, type#, condlength, intcols, robj#, rcon#, match#, refact, nvl(enabled, 0), rowid, cols, nvl(defer, 0), mtime, nvl(spare1, 0), spare2, spare3 from cdef$ where obj#=:1</pre_sqltext></td></tr>
</table>
<p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="23"></a>
<h2 class="awr">
Instance Activity Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1200">Key Instance Activity Stats</a></li>
<li class="awr"><a class="awr" href="#1250">Instance Activity Stats</a></li>
<li class="awr"><a class="awr" href="#1300">Instance Activity Stats - Absolute Values</a></li>
<li class="awr"><a class="awr" href="#1400">Instance Activity Stats - Thread Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1200"></a>
<h3 class="awr">Key Instance Activity Stats</h3>
<ul>
<li class="awr"> Ordered by statistic name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Key Instance activity statistics. For each instance, activity total, activity per second, and activity per transaction are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>db block changes</td><td align="right" class='awrc'>39,971</td><td align="right" class='awrc'>53.04</td><td align="right" class='awrc'>157.37</td></tr>
<tr><td scope="row" class='awrnc'>execute count</td><td align="right" class='awrnc'>15,393,234</td><td align="right" class='awrnc'>20,428.00</td><td align="right" class='awrnc'>60,603.28</td></tr>
<tr><td scope="row" class='awrc'>gc cr block receive time</td><td align="right" class='awrc'>1,674</td><td align="right" class='awrc'>2.22</td><td align="right" class='awrc'>6.59</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks received</td><td align="right" class='awrnc'>339</td><td align="right" class='awrnc'>0.45</td><td align="right" class='awrnc'>1.33</td></tr>
<tr><td scope="row" class='awrc'>gc current block receive time</td><td align="right" class='awrc'>870</td><td align="right" class='awrc'>1.15</td><td align="right" class='awrc'>3.43</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks received</td><td align="right" class='awrnc'>1,289</td><td align="right" class='awrnc'>1.71</td><td align="right" class='awrnc'>5.07</td></tr>
<tr><td scope="row" class='awrc'>logons cumulative</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.17</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors cumulative</td><td align="right" class='awrnc'>15,410,106</td><td align="right" class='awrnc'>20,450.39</td><td align="right" class='awrnc'>60,669.71</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>4,482</td><td align="right" class='awrc'>5.95</td><td align="right" class='awrc'>17.65</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>1,419</td><td align="right" class='awrnc'>1.88</td><td align="right" class='awrnc'>5.59</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>35,572,455</td><td align="right" class='awrc'>47,207.37</td><td align="right" class='awrc'>140,049.04</td></tr>
<tr><td scope="row" class='awrnc'>physical writes</td><td align="right" class='awrnc'>3,234</td><td align="right" class='awrnc'>4.29</td><td align="right" class='awrnc'>12.73</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>9,732,148</td><td align="right" class='awrc'>12,915.31</td><td align="right" class='awrc'>38,315.54</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>15,390,940</td><td align="right" class='awrnc'>20,424.96</td><td align="right" class='awrnc'>60,594.25</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>1,249,870,563</td><td align="right" class='awrc'>1,658,673.99</td><td align="right" class='awrc'>4,920,750.25</td></tr>
<tr><td scope="row" class='awrnc'>user calls</td><td align="right" class='awrnc'>1,654</td><td align="right" class='awrnc'>2.19</td><td align="right" class='awrnc'>6.51</td></tr>
<tr><td scope="row" class='awrc'>user commits</td><td align="right" class='awrc'>254</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>workarea executions - optimal</td><td align="right" class='awrnc'>1,547</td><td align="right" class='awrnc'>2.05</td><td align="right" class='awrnc'>6.09</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1250"></a>
<h3 class="awr">Instance Activity Stats</h3>
<ul>
<li class="awr"> Ordered by statistic name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Instance activity statistics. For each instance, activity total, activity per second, and activity per transaction are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>ASSM bg: segment fix monitor</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM cbk:blocks examined</td><td align="right" class='awrnc'>1,026</td><td align="right" class='awrnc'>1.36</td><td align="right" class='awrnc'>4.04</td></tr>
<tr><td scope="row" class='awrc'>ASSM cbk:blocks marked full</td><td align="right" class='awrc'>244</td><td align="right" class='awrc'>0.32</td><td align="right" class='awrc'>0.96</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L1 bitmaps examined</td><td align="right" class='awrnc'>840</td><td align="right" class='awrnc'>1.11</td><td align="right" class='awrnc'>3.31</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:L2 bitmap full</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.17</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L2 bitmaps examined</td><td align="right" class='awrnc'>341</td><td align="right" class='awrnc'>0.45</td><td align="right" class='awrnc'>1.34</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search all</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.19</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search hint</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.07</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search steal</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:bump HWM</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.08</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free block</td><td align="right" class='awrc'>782</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>3.08</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free data block</td><td align="right" class='awrnc'>602</td><td align="right" class='awrnc'>0.80</td><td align="right" class='awrnc'>2.37</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free index block</td><td align="right" class='awrc'>180</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>0.71</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:good hint</td><td align="right" class='awrnc'>645</td><td align="right" class='awrnc'>0.86</td><td align="right" class='awrnc'>2.54</td></tr>
<tr><td scope="row" class='awrc'>ASSM rsv:fill reserve</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>ASSM wasted db state change</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>Batched IO (bound) vector count</td><td align="right" class='awrc'>579</td><td align="right" class='awrc'>0.77</td><td align="right" class='awrc'>2.28</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO block miss count</td><td align="right" class='awrnc'>34,487,572</td><td align="right" class='awrnc'>45,767.65</td><td align="right" class='awrnc'>135,777.84</td></tr>
<tr><td scope="row" class='awrc'>Batched IO buffer defrag count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO double miss count</td><td align="right" class='awrnc'>661,254</td><td align="right" class='awrnc'>877.53</td><td align="right" class='awrnc'>2,603.36</td></tr>
<tr><td scope="row" class='awrc'>Batched IO same unit count</td><td align="right" class='awrc'>440</td><td align="right" class='awrc'>0.58</td><td align="right" class='awrc'>1.73</td></tr>

<tr><td scope="row" class='awrnc'>Batched IO single block count</td><td align="right" class='awrnc'>3,512</td><td align="right" class='awrnc'>4.66</td><td align="right" class='awrnc'>13.83</td></tr>
Using the report name awr_rac.txt
<tr><td scope="row" class='awrc'>Batched IO slow jump count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO vector block count</td><td align="right" class='awrnc'>34,499,198</td><td align="right" class='awrnc'>45,783.08</td><td align="right" class='awrnc'>135,823.61</td></tr>
<tr><td scope="row" class='awrc'>Batched IO vector read count</td><td align="right" class='awrc'>551,958</td><td align="right" class='awrc'>732.49</td><td align="right" class='awrc'>2,173.06</td></tr>
<tr><td scope="row" class='awrnc'>Block Cleanout Optim referenced</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.08</td></tr>
<tr><td scope="row" class='awrc'>CCursor + sql area evicted</td><td align="right" class='awrc'>207</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>0.81</td></tr>
<tr><td scope="row" class='awrnc'>CPU used by this session</td><td align="right" class='awrnc'>788,976</td><td align="right" class='awrnc'>1,047.03</td><td align="right" class='awrnc'>3,106.20</td></tr>
<tr><td scope="row" class='awrc'>CPU used when call started</td><td align="right" class='awrc'>740,989</td><td align="right" class='awrc'>983.35</td><td align="right" class='awrc'>2,917.28</td></tr>
<tr><td scope="row" class='awrnc'>CR blocks created</td><td align="right" class='awrnc'>453</td><td align="right" class='awrnc'>0.60</td><td align="right" class='awrnc'>1.78</td></tr>
<tr><td scope="row" class='awrc'>Cached Commit SCN referenced</td><td align="right" class='awrc'>1,213,805,450</td><td align="right" class='awrc'>1,610,812.82</td><td align="right" class='awrc'>4,778,761.61</td></tr>
<tr><td scope="row" class='awrnc'>Client Advertised Receive Window</td><td align="right" class='awrnc'>1,694</td><td align="right" class='awrnc'>2.25</td><td align="right" class='awrnc'>6.67</td></tr>
<tr><td scope="row" class='awrc'>Client Advertised Send Window</td><td align="right" class='awrc'>1,694</td><td align="right" class='awrc'>2.25</td><td align="right" class='awrc'>6.67</td></tr>
<tr><td scope="row" class='awrnc'>Client Path Maximum Transmission Unit(MTU)</td><td align="right" class='awrnc'>350,900</td><td align="right" class='awrnc'>465.67</td><td align="right" class='awrnc'>1,381.50</td></tr>
<tr><td scope="row" class='awrc'>Client Send Congestion Window</td><td align="right" class='awrc'>2,161</td><td align="right" class='awrc'>2.87</td><td align="right" class='awrc'>8.51</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Ack Received</td><td align="right" class='awrnc'>259,054</td><td align="right" class='awrnc'>343.78</td><td align="right" class='awrnc'>1,019.90</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Data Received</td><td align="right" class='awrc'>125</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.49</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Data Sent</td><td align="right" class='awrnc'>268,292</td><td align="right" class='awrnc'>356.04</td><td align="right" class='awrnc'>1,056.27</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Round Trip Time</td><td align="right" class='awrc'>1,702,039</td><td align="right" class='awrc'>2,258.74</td><td align="right" class='awrc'>6,700.94</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Round Trip Time Variance</td><td align="right" class='awrnc'>2,783,716</td><td align="right" class='awrnc'>3,694.20</td><td align="right" class='awrnc'>10,959.51</td></tr>
<tr><td scope="row" class='awrc'>Client Total Bytes Acked</td><td align="right" class='awrc'>3,818,288</td><td align="right" class='awrc'>5,067.16</td><td align="right" class='awrc'>15,032.63</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Bytes Received</td><td align="right" class='awrnc'>1,479,605</td><td align="right" class='awrnc'>1,963.55</td><td align="right" class='awrnc'>5,825.22</td></tr>
<tr><td scope="row" class='awrc'>Client Total Number of Retransmitted Packets</td><td align="right" class='awrc'>207</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>0.81</td></tr>
<tr><td scope="row" class='awrnc'>Commit SCN cached</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.24</td></tr>
<tr><td scope="row" class='awrc'>DBWR checkpoint buffers written</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>DBWR checkpoints</td><td align="right" class='awrnc'>56</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.22</td></tr>
<tr><td scope="row" class='awrc'>DBWR fusion writes</td><td align="right" class='awrc'>59</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.23</td></tr>
<tr><td scope="row" class='awrnc'>DBWR object drop buffers written</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.19</td></tr>
<tr><td scope="row" class='awrc'>DBWR thread checkpoint buffers written</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DBWR transaction table writes</td><td align="right" class='awrnc'>69</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.27</td></tr>
<tr><td scope="row" class='awrc'>DBWR undo block writes</td><td align="right" class='awrc'>594</td><td align="right" class='awrc'>0.79</td><td align="right" class='awrc'>2.34</td></tr>
<tr><td scope="row" class='awrnc'>DFO trees parallelized</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>Effective IO time</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>HSC Heap Segment Block Changes</td><td align="right" class='awrnc'>5,135</td><td align="right" class='awrnc'>6.81</td><td align="right" class='awrnc'>20.22</td></tr>
<tr><td scope="row" class='awrc'>Heap Segment Array Inserts</td><td align="right" class='awrc'>230</td><td align="right" class='awrc'>0.31</td><td align="right" class='awrc'>0.91</td></tr>
<tr><td scope="row" class='awrnc'>Heap Segment Array Updates</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>Heatmap Blklevel Flush Task Count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc req</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.11</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc space (block)</td><td align="right" class='awrc'>20,054,016</td><td align="right" class='awrc'>26,613.22</td><td align="right" class='awrc'>78,952.82</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc time (ms)</td><td align="right" class='awrnc'>3,829,367</td><td align="right" class='awrnc'>5,081.86</td><td align="right" class='awrnc'>15,076.25</td></tr>
<tr><td scope="row" class='awrc'>KTFB apply req</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTFB apply time (ms)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTFB commit req</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTFB commit time (ms)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTFB free req</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTFB free space (block)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTFB free time (ms)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>LOB table id lookup cache misses</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX local messages recv'd</td><td align="right" class='awrc'>192</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>0.76</td></tr>
<tr><td scope="row" class='awrnc'>PX local messages sent</td><td align="right" class='awrnc'>192</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>0.76</td></tr>
<tr><td scope="row" class='awrc'>PX remote messages recv'd</td><td align="right" class='awrc'>253</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>PX remote messages sent</td><td align="right" class='awrnc'>793</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>3.12</td></tr>
<tr><td scope="row" class='awrc'>Parallel operations not downgraded</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>Requests to/from client</td><td align="right" class='awrnc'>734</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>2.89</td></tr>
<tr><td scope="row" class='awrc'>SMON posted for instance recovery</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net roundtrips to/from client</td><td align="right" class='awrnc'>493</td><td align="right" class='awrnc'>0.65</td><td align="right" class='awrnc'>1.94</td></tr>
<tr><td scope="row" class='awrc'>TBS Extension: tasks created</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>TBS Extension: tasks executed</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>active txn count during cleanout</td><td align="right" class='awrc'>357</td><td align="right" class='awrc'>0.47</td><td align="right" class='awrc'>1.41</td></tr>
<tr><td scope="row" class='awrnc'>background checkpoints completed</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>background checkpoints started</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>background timeouts</td><td align="right" class='awrnc'>10,175</td><td align="right" class='awrnc'>13.50</td><td align="right" class='awrnc'>40.06</td></tr>
<tr><td scope="row" class='awrc'>blocks cleaned out using minact</td><td align="right" class='awrc'>151</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0.59</td></tr>
<tr><td scope="row" class='awrnc'>buffer is not pinned count</td><td align="right" class='awrnc'>1,314,957,270</td><td align="right" class='awrnc'>1,745,049.04</td><td align="right" class='awrnc'>5,176,997.13</td></tr>
<tr><td scope="row" class='awrc'>buffer is pinned count</td><td align="right" class='awrc'>1,200,086,931</td><td align="right" class='awrc'>1,592,607.30</td><td align="right" class='awrc'>4,724,751.70</td></tr>
<tr><td scope="row" class='awrnc'>bytes received via SQL*Net from client</td><td align="right" class='awrnc'>241,471</td><td align="right" class='awrnc'>320.45</td><td align="right" class='awrnc'>950.67</td></tr>
<tr><td scope="row" class='awrc'>bytes sent via SQL*Net to client</td><td align="right" class='awrc'>130,995</td><td align="right" class='awrc'>173.84</td><td align="right" class='awrc'>515.73</td></tr>
<tr><td scope="row" class='awrnc'>calls to get snapshot scn: kcmgss</td><td align="right" class='awrnc'>15,415,869</td><td align="right" class='awrnc'>20,458.04</td><td align="right" class='awrnc'>60,692.40</td></tr>
<tr><td scope="row" class='awrc'>calls to kcmgas</td><td align="right" class='awrc'>4,723</td><td align="right" class='awrc'>6.27</td><td align="right" class='awrc'>18.59</td></tr>
<tr><td scope="row" class='awrnc'>calls to kcmgcs</td><td align="right" class='awrnc'>12,317</td><td align="right" class='awrnc'>16.35</td><td align="right" class='awrnc'>48.49</td></tr>
<tr><td scope="row" class='awrc'>cell physical IO interconnect bytes</td><td align="right" class='awrc'>291,524,852,736</td><td align="right" class='awrc'>386,875,813.15</td><td align="right" class='awrc'>1,147,735,640.69</td></tr>
<tr><td scope="row" class='awrnc'>change write time</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.11</td></tr>
<tr><td scope="row" class='awrc'>cleanout - number of ktugct calls</td><td align="right" class='awrc'>1,244</td><td align="right" class='awrc'>1.65</td><td align="right" class='awrc'>4.90</td></tr>
<tr><td scope="row" class='awrnc'>cleanouts and rollbacks - consistent read gets</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>cleanouts only - consistent read gets</td><td align="right" class='awrc'>103</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0.41</td></tr>
<tr><td scope="row" class='awrnc'>cluster key scan block gets</td><td align="right" class='awrnc'>1,191</td><td align="right" class='awrnc'>1.58</td><td align="right" class='awrnc'>4.69</td></tr>
<tr><td scope="row" class='awrc'>cluster key scans</td><td align="right" class='awrc'>734</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>2.89</td></tr>
<tr><td scope="row" class='awrnc'>commit batch/immediate performed</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>commit batch/immediate requested</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: block lost</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.10</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: callback failure</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: cannot pin</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>commit cleanouts</td><td align="right" class='awrc'>2,995</td><td align="right" class='awrc'>3.97</td><td align="right" class='awrc'>11.79</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanouts successfully completed</td><td align="right" class='awrnc'>2,948</td><td align="right" class='awrnc'>3.91</td><td align="right" class='awrnc'>11.61</td></tr>
<tr><td scope="row" class='awrc'>commit immediate performed</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>commit immediate requested</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>commit txn count during cleanout</td><td align="right" class='awrc'>298</td><td align="right" class='awrc'>0.40</td><td align="right" class='awrc'>1.17</td></tr>
<tr><td scope="row" class='awrnc'>consistent changes</td><td align="right" class='awrnc'>9,226</td><td align="right" class='awrnc'>12.24</td><td align="right" class='awrnc'>36.32</td></tr>
<tr><td scope="row" class='awrc'>consistent gets</td><td align="right" class='awrc'>1,249,812,368</td><td align="right" class='awrc'>1,658,596.76</td><td align="right" class='awrc'>4,920,521.13</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets examination</td><td align="right" class='awrnc'>15,420,549</td><td align="right" class='awrnc'>20,464.25</td><td align="right" class='awrnc'>60,710.82</td></tr>
<tr><td scope="row" class='awrc'>consistent gets examination (fastpath)</td><td align="right" class='awrc'>15,418,804</td><td align="right" class='awrc'>20,461.93</td><td align="right" class='awrc'>60,703.95</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets from cache</td><td align="right" class='awrnc'>1,249,812,297</td><td align="right" class='awrnc'>1,658,596.67</td><td align="right" class='awrnc'>4,920,520.85</td></tr>
<tr><td scope="row" class='awrc'>consistent gets pin</td><td align="right" class='awrc'>1,234,391,688</td><td align="right" class='awrc'>1,638,132.34</td><td align="right" class='awrc'>4,859,809.80</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets pin (fastpath)</td><td align="right" class='awrnc'>1,232,685,242</td><td align="right" class='awrnc'>1,635,867.75</td><td align="right" class='awrnc'>4,853,091.50</td></tr>
<tr><td scope="row" class='awrc'>cursor authentications</td><td align="right" class='awrc'>176</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>0.69</td></tr>
<tr><td scope="row" class='awrnc'>cursor reload failures</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>data blocks consistent reads - undo records applied</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.19</td></tr>
<tr><td scope="row" class='awrnc'>db block changes</td><td align="right" class='awrnc'>39,971</td><td align="right" class='awrnc'>53.04</td><td align="right" class='awrnc'>157.37</td></tr>
<tr><td scope="row" class='awrc'>db block gets</td><td align="right" class='awrc'>48,154</td><td align="right" class='awrc'>63.90</td><td align="right" class='awrc'>189.58</td></tr>
<tr><td scope="row" class='awrnc'>db block gets direct</td><td align="right" class='awrnc'>896</td><td align="right" class='awrnc'>1.19</td><td align="right" class='awrnc'>3.53</td></tr>
<tr><td scope="row" class='awrc'>db block gets from cache</td><td align="right" class='awrc'>47,258</td><td align="right" class='awrc'>62.71</td><td align="right" class='awrc'>186.06</td></tr>
<tr><td scope="row" class='awrnc'>db block gets from cache (fastpath)</td><td align="right" class='awrnc'>30,327</td><td align="right" class='awrnc'>40.25</td><td align="right" class='awrnc'>119.40</td></tr>
<tr><td scope="row" class='awrc'>deferred (CURRENT) block cleanout applications</td><td align="right" class='awrc'>1,305</td><td align="right" class='awrc'>1.73</td><td align="right" class='awrc'>5.14</td></tr>
<tr><td scope="row" class='awrnc'>dirty buffers inspected</td><td align="right" class='awrnc'>1,694</td><td align="right" class='awrnc'>2.25</td><td align="right" class='awrnc'>6.67</td></tr>
<tr><td scope="row" class='awrc'>enqueue conversions</td><td align="right" class='awrc'>415</td><td align="right" class='awrc'>0.55</td><td align="right" class='awrc'>1.63</td></tr>
<tr><td scope="row" class='awrnc'>enqueue releases</td><td align="right" class='awrnc'>14,938</td><td align="right" class='awrnc'>19.82</td><td align="right" class='awrnc'>58.81</td></tr>
<tr><td scope="row" class='awrc'>enqueue requests</td><td align="right" class='awrc'>14,915</td><td align="right" class='awrc'>19.79</td><td align="right" class='awrc'>58.72</td></tr>
<tr><td scope="row" class='awrnc'>enqueue timeouts</td><td align="right" class='awrnc'>217</td><td align="right" class='awrnc'>0.29</td><td align="right" class='awrnc'>0.85</td></tr>
<tr><td scope="row" class='awrc'>enqueue waits</td><td align="right" class='awrc'>261</td><td align="right" class='awrc'>0.35</td><td align="right" class='awrc'>1.03</td></tr>
<tr><td scope="row" class='awrnc'>exchange deadlocks</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>execute count</td><td align="right" class='awrc'>15,393,234</td><td align="right" class='awrc'>20,428.00</td><td align="right" class='awrc'>60,603.28</td></tr>
<tr><td scope="row" class='awrnc'>fastpath consistent get quota limit</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>file io service time</td><td align="right" class='awrc'>2,287,387,524</td><td align="right" class='awrc'>3,035,538.48</td><td align="right" class='awrc'>9,005,462.69</td></tr>
<tr><td scope="row" class='awrnc'>frame signature mismatch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>free buffer inspected</td><td align="right" class='awrc'>37,839,283</td><td align="right" class='awrc'>50,215.63</td><td align="right" class='awrc'>148,973.56</td></tr>
<tr><td scope="row" class='awrnc'>free buffer requested</td><td align="right" class='awrnc'>35,563,517</td><td align="right" class='awrnc'>47,195.51</td><td align="right" class='awrnc'>140,013.85</td></tr>
<tr><td scope="row" class='awrc'>gc blocks compressed</td><td align="right" class='awrc'>4,509</td><td align="right" class='awrc'>5.98</td><td align="right" class='awrc'>17.75</td></tr>
<tr><td scope="row" class='awrnc'>gc blocks lost</td><td align="right" class='awrnc'>434</td><td align="right" class='awrnc'>0.58</td><td align="right" class='awrnc'>1.71</td></tr>
<tr><td scope="row" class='awrc'>gc cleanout applied</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc cleanout saved</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks created</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks expanded</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks shrunk</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block build time</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gc cr block flush time</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.15</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block receive time</td><td align="right" class='awrnc'>1,674</td><td align="right" class='awrnc'>2.22</td><td align="right" class='awrnc'>6.59</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks built</td><td align="right" class='awrc'>1,083</td><td align="right" class='awrc'>1.44</td><td align="right" class='awrc'>4.26</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks flushed</td><td align="right" class='awrnc'>91</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.36</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks received</td><td align="right" class='awrc'>339</td><td align="right" class='awrc'>0.45</td><td align="right" class='awrc'>1.33</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks served</td><td align="right" class='awrnc'>1,410</td><td align="right" class='awrnc'>1.87</td><td align="right" class='awrnc'>5.55</td></tr>
<tr><td scope="row" class='awrc'>gc cr bypass requests</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.16</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multiblock grant time</td><td align="right" class='awrnc'>40,497,346</td><td align="right" class='awrnc'>53,743.08</td><td align="right" class='awrnc'>159,438.37</td></tr>
<tr><td scope="row" class='awrc'>gc cr multiblock grants received</td><td align="right" class='awrc'>13,121,634</td><td align="right" class='awrc'>17,413.41</td><td align="right" class='awrc'>51,659.98</td></tr>
<tr><td scope="row" class='awrnc'>gc current block flush time</td><td align="right" class='awrnc'>84</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.33</td></tr>
<tr><td scope="row" class='awrc'>gc current block pin time</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>gc current block receive time</td><td align="right" class='awrnc'>870</td><td align="right" class='awrnc'>1.15</td><td align="right" class='awrnc'>3.43</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks flushed</td><td align="right" class='awrc'>154</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0.61</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks pinned</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.07</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks received</td><td align="right" class='awrc'>1,289</td><td align="right" class='awrc'>1.71</td><td align="right" class='awrc'>5.07</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks served</td><td align="right" class='awrnc'>4,041</td><td align="right" class='awrnc'>5.36</td><td align="right" class='awrnc'>15.91</td></tr>
<tr><td scope="row" class='awrc'>gc force cr read cr</td><td align="right" class='awrc'>169</td><td align="right" class='awrc'>0.22</td><td align="right" class='awrc'>0.67</td></tr>
<tr><td scope="row" class='awrnc'>gc force cr read current</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc kbytes saved</td><td align="right" class='awrc'>23,695</td><td align="right" class='awrc'>31.45</td><td align="right" class='awrc'>93.29</td></tr>
<tr><td scope="row" class='awrnc'>gc kbytes sent</td><td align="right" class='awrnc'>19,913</td><td align="right" class='awrnc'>26.43</td><td align="right" class='awrnc'>78.40</td></tr>
<tr><td scope="row" class='awrc'>gc local grants</td><td align="right" class='awrc'>28,645,406</td><td align="right" class='awrc'>38,014.65</td><td align="right" class='awrc'>112,777.19</td></tr>
<tr><td scope="row" class='awrnc'>gc merge pi bg</td><td align="right" class='awrnc'>96</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.38</td></tr>
<tr><td scope="row" class='awrc'>gc merge pi fg</td><td align="right" class='awrc'>243</td><td align="right" class='awrc'>0.32</td><td align="right" class='awrc'>0.96</td></tr>
<tr><td scope="row" class='awrnc'>gc no change made</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>gc read time waited</td><td align="right" class='awrc'>6,664</td><td align="right" class='awrc'>8.84</td><td align="right" class='awrc'>26.24</td></tr>
<tr><td scope="row" class='awrnc'>gc read waits</td><td align="right" class='awrnc'>819</td><td align="right" class='awrnc'>1.09</td><td align="right" class='awrnc'>3.22</td></tr>
<tr><td scope="row" class='awrc'>gc reader bypass grants</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc reader bypass waits</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc remote grants</td><td align="right" class='awrc'>6,879,593</td><td align="right" class='awrc'>9,129.75</td><td align="right" class='awrc'>27,085.01</td></tr>
<tr><td scope="row" class='awrnc'>gc status messages received</td><td align="right" class='awrnc'>3,709</td><td align="right" class='awrnc'>4.92</td><td align="right" class='awrnc'>14.60</td></tr>
<tr><td scope="row" class='awrc'>gc status messages sent</td><td align="right" class='awrc'>1,464</td><td align="right" class='awrc'>1.94</td><td align="right" class='awrc'>5.76</td></tr>
<tr><td scope="row" class='awrnc'>gcs affinity lock failures</td><td align="right" class='awrnc'>93,368</td><td align="right" class='awrnc'>123.91</td><td align="right" class='awrnc'>367.59</td></tr>
<tr><td scope="row" class='awrc'>gcs affinity lock grants</td><td align="right" class='awrc'>18,160,162</td><td align="right" class='awrc'>24,099.93</td><td align="right" class='awrc'>71,496.70</td></tr>
<tr><td scope="row" class='awrnc'>gcs anti-locks created</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs data block access records</td><td align="right" class='awrc'>35,696,349</td><td align="right" class='awrc'>47,371.79</td><td align="right" class='awrc'>140,536.81</td></tr>
<tr><td scope="row" class='awrnc'>gcs messages sent</td><td align="right" class='awrnc'>24,364,481</td><td align="right" class='awrnc'>32,333.53</td><td align="right" class='awrnc'>95,923.15</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly lock failures</td><td align="right" class='awrc'>10,968</td><td align="right" class='awrc'>14.56</td><td align="right" class='awrc'>43.18</td></tr>
<tr><td scope="row" class='awrnc'>gcs read-mostly lock grants</td><td align="right" class='awrnc'>3,636,120</td><td align="right" class='awrnc'>4,825.41</td><td align="right" class='awrnc'>14,315.43</td></tr>
<tr><td scope="row" class='awrc'>gcs stats management (SCM) process posts</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges messages sent</td><td align="right" class='awrnc'>17,455</td><td align="right" class='awrnc'>23.16</td><td align="right" class='awrnc'>68.72</td></tr>
<tr><td scope="row" class='awrc'>global enqueue get time</td><td align="right" class='awrc'>8,849</td><td align="right" class='awrc'>11.74</td><td align="right" class='awrc'>34.84</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue gets async</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global enqueue gets sync</td><td align="right" class='awrc'>46,032</td><td align="right" class='awrc'>61.09</td><td align="right" class='awrc'>181.23</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue releases</td><td align="right" class='awrnc'>49,605</td><td align="right" class='awrnc'>65.83</td><td align="right" class='awrnc'>195.30</td></tr>
<tr><td scope="row" class='awrc'>heap block compress</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.25</td></tr>
<tr><td scope="row" class='awrnc'>hot buffers moved to head of LRU</td><td align="right" class='awrnc'>7,219,260</td><td align="right" class='awrnc'>9,580.51</td><td align="right" class='awrnc'>28,422.28</td></tr>
<tr><td scope="row" class='awrc'>immediate (CR) block cleanout applications</td><td align="right" class='awrc'>113</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0.44</td></tr>
<tr><td scope="row" class='awrnc'>immediate (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>412</td><td align="right" class='awrnc'>0.55</td><td align="right" class='awrnc'>1.62</td></tr>
<tr><td scope="row" class='awrc'>index crx upgrade (positioned)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>index fast full scans (full)</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>index fetch by key</td><td align="right" class='awrc'>7,338</td><td align="right" class='awrc'>9.74</td><td align="right" class='awrc'>28.89</td></tr>
<tr><td scope="row" class='awrnc'>index range scans</td><td align="right" class='awrnc'>15,418,436</td><td align="right" class='awrnc'>20,461.45</td><td align="right" class='awrnc'>60,702.50</td></tr>
<tr><td scope="row" class='awrc'>leaf node 90-10 splits</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.28</td></tr>
<tr><td scope="row" class='awrnc'>leaf node splits</td><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>0.66</td></tr>
<tr><td scope="row" class='awrc'>lob reads</td><td align="right" class='awrc'>398</td><td align="right" class='awrc'>0.53</td><td align="right" class='awrc'>1.57</td></tr>
<tr><td scope="row" class='awrnc'>lob writes</td><td align="right" class='awrnc'>7,311</td><td align="right" class='awrnc'>9.70</td><td align="right" class='awrnc'>28.78</td></tr>
<tr><td scope="row" class='awrc'>lob writes unaligned</td><td align="right" class='awrc'>7,311</td><td align="right" class='awrc'>9.70</td><td align="right" class='awrc'>28.78</td></tr>
<tr><td scope="row" class='awrnc'>logical read bytes from cache</td><td align="right" class='awrnc'>10,238,846,197,760</td><td align="right" class='awrnc'>13,587,733,297.10</td><td align="right" class='awrnc'>40,310,418,101.42</td></tr>
<tr><td scope="row" class='awrc'>logons cumulative</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.17</td></tr>
<tr><td scope="row" class='awrnc'>max cf enq hold time</td><td align="right" class='awrnc'>139</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0.55</td></tr>
<tr><td scope="row" class='awrc'>messages received</td><td align="right" class='awrc'>7,433</td><td align="right" class='awrc'>9.86</td><td align="right" class='awrc'>29.26</td></tr>
<tr><td scope="row" class='awrnc'>messages sent</td><td align="right" class='awrnc'>7,433</td><td align="right" class='awrnc'>9.86</td><td align="right" class='awrnc'>29.26</td></tr>
<tr><td scope="row" class='awrc'>min active SCN optimization applied on CR</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>no buffer to keep pinned count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>no work - consistent read gets</td><td align="right" class='awrc'>1,233,175,292</td><td align="right" class='awrc'>1,636,518.09</td><td align="right" class='awrc'>4,855,020.83</td></tr>
<tr><td scope="row" class='awrnc'>non-idle wait count</td><td align="right" class='awrnc'>3,030,800</td><td align="right" class='awrnc'>4,022.10</td><td align="right" class='awrnc'>11,932.28</td></tr>
<tr><td scope="row" class='awrc'>opened cursors cumulative</td><td align="right" class='awrc'>15,410,106</td><td align="right" class='awrc'>20,450.39</td><td align="right" class='awrc'>60,669.71</td></tr>
<tr><td scope="row" class='awrnc'>parse count (describe)</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>parse count (failures)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parse count (hard)</td><td align="right" class='awrnc'>513</td><td align="right" class='awrnc'>0.68</td><td align="right" class='awrnc'>2.02</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>4,482</td><td align="right" class='awrc'>5.95</td><td align="right" class='awrc'>17.65</td></tr>
<tr><td scope="row" class='awrnc'>parse time cpu</td><td align="right" class='awrnc'>121</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>0.48</td></tr>
<tr><td scope="row" class='awrc'>parse time elapsed</td><td align="right" class='awrc'>1,419</td><td align="right" class='awrc'>1.88</td><td align="right" class='awrc'>5.59</td></tr>
<tr><td scope="row" class='awrnc'>physical read IO requests</td><td align="right" class='awrnc'>35,569,694</td><td align="right" class='awrnc'>47,203.71</td><td align="right" class='awrnc'>140,038.17</td></tr>
<tr><td scope="row" class='awrc'>physical read bytes</td><td align="right" class='awrc'>291,409,543,168</td><td align="right" class='awrc'>386,722,788.52</td><td align="right" class='awrc'>1,147,281,666.02</td></tr>
<tr><td scope="row" class='awrnc'>physical read total IO requests</td><td align="right" class='awrnc'>35,568,619</td><td align="right" class='awrnc'>47,202.28</td><td align="right" class='awrnc'>140,033.93</td></tr>
<tr><td scope="row" class='awrc'>physical read total bytes</td><td align="right" class='awrc'>291,427,581,952</td><td align="right" class='awrc'>386,746,727.37</td><td align="right" class='awrc'>1,147,352,684.85</td></tr>
<tr><td scope="row" class='awrnc'>physical read total multi block requests</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>35,572,455</td><td align="right" class='awrc'>47,207.37</td><td align="right" class='awrc'>140,049.04</td></tr>
<tr><td scope="row" class='awrnc'>physical reads cache</td><td align="right" class='awrnc'>35,572,455</td><td align="right" class='awrnc'>47,207.37</td><td align="right" class='awrnc'>140,049.04</td></tr>
<tr><td scope="row" class='awrc'>physical reads cache prefetch</td><td align="right" class='awrc'>33,832,221</td><td align="right" class='awrc'>44,897.95</td><td align="right" class='awrc'>133,197.72</td></tr>
<tr><td scope="row" class='awrnc'>physical reads direct</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads direct (lob)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical reads direct temporary tablespace</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads prefetch warmup</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical write IO requests</td><td align="right" class='awrnc'>1,382</td><td align="right" class='awrnc'>1.83</td><td align="right" class='awrnc'>5.44</td></tr>
<tr><td scope="row" class='awrc'>physical write bytes</td><td align="right" class='awrc'>26,492,928</td><td align="right" class='awrc'>35,158.15</td><td align="right" class='awrc'>104,302.87</td></tr>
<tr><td scope="row" class='awrnc'>physical write total IO requests</td><td align="right" class='awrnc'>2,994</td><td align="right" class='awrnc'>3.97</td><td align="right" class='awrnc'>11.79</td></tr>
<tr><td scope="row" class='awrc'>physical write total bytes</td><td align="right" class='awrc'>44,707,328</td><td align="right" class='awrc'>59,330.05</td><td align="right" class='awrc'>176,013.10</td></tr>
<tr><td scope="row" class='awrnc'>physical write total multi block requests</td><td align="right" class='awrnc'>68</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.27</td></tr>
<tr><td scope="row" class='awrc'>physical writes</td><td align="right" class='awrc'>3,234</td><td align="right" class='awrc'>4.29</td><td align="right" class='awrc'>12.73</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct</td><td align="right" class='awrnc'>1,160</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>4.57</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct (lob)</td><td align="right" class='awrc'>264</td><td align="right" class='awrc'>0.35</td><td align="right" class='awrc'>1.04</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct temporary tablespace</td><td align="right" class='awrnc'>199</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>0.78</td></tr>
<tr><td scope="row" class='awrc'>physical writes from cache</td><td align="right" class='awrc'>2,074</td><td align="right" class='awrc'>2.75</td><td align="right" class='awrc'>8.17</td></tr>
<tr><td scope="row" class='awrnc'>physical writes non checkpoint</td><td align="right" class='awrnc'>3,011</td><td align="right" class='awrnc'>4.00</td><td align="right" class='awrnc'>11.85</td></tr>
<tr><td scope="row" class='awrc'>pinned buffers inspected</td><td align="right" class='awrc'>29,710</td><td align="right" class='awrc'>39.43</td><td align="right" class='awrc'>116.97</td></tr>
<tr><td scope="row" class='awrnc'>prefetch warmup blocks aged out before use</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>prefetched blocks aged out before use</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>process last non-idle time</td><td align="right" class='awrnc'>747</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>2.94</td></tr>
<tr><td scope="row" class='awrc'>recursive calls</td><td align="right" class='awrc'>15,436,316</td><td align="right" class='awrc'>20,485.17</td><td align="right" class='awrc'>60,772.90</td></tr>
<tr><td scope="row" class='awrnc'>recursive cpu usage</td><td align="right" class='awrnc'>755,287</td><td align="right" class='awrnc'>1,002.32</td><td align="right" class='awrnc'>2,973.57</td></tr>
<tr><td scope="row" class='awrc'>redo KB read</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks checksummed by FG (exclusive)</td><td align="right" class='awrnc'>9,502</td><td align="right" class='awrnc'>12.61</td><td align="right" class='awrnc'>37.41</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written</td><td align="right" class='awrc'>20,234</td><td align="right" class='awrc'>26.85</td><td align="right" class='awrc'>79.66</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written (group 0)</td><td align="right" class='awrnc'>19,220</td><td align="right" class='awrnc'>25.51</td><td align="right" class='awrnc'>75.67</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written (group 1)</td><td align="right" class='awrc'>1,014</td><td align="right" class='awrc'>1.35</td><td align="right" class='awrc'>3.99</td></tr>
<tr><td scope="row" class='awrnc'>redo entries</td><td align="right" class='awrnc'>17,518</td><td align="right" class='awrnc'>23.25</td><td align="right" class='awrnc'>68.97</td></tr>
<tr><td scope="row" class='awrc'>redo ordering marks</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo size</td><td align="right" class='awrnc'>9,732,148</td><td align="right" class='awrnc'>12,915.31</td><td align="right" class='awrnc'>38,315.54</td></tr>
<tr><td scope="row" class='awrc'>redo size for direct writes</td><td align="right" class='awrc'>1,468</td><td align="right" class='awrc'>1.95</td><td align="right" class='awrc'>5.78</td></tr>
<tr><td scope="row" class='awrnc'>redo subscn max counts</td><td align="right" class='awrnc'>633</td><td align="right" class='awrnc'>0.84</td><td align="right" class='awrnc'>2.49</td></tr>
<tr><td scope="row" class='awrc'>redo synch time</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time (usec)</td><td align="right" class='awrnc'>2,790</td><td align="right" class='awrnc'>3.70</td><td align="right" class='awrnc'>10.98</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead (usec)</td><td align="right" class='awrc'>51</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.20</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead count (  2ms)</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo synch writes</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>redo wastage</td><td align="right" class='awrnc'>268,616</td><td align="right" class='awrnc'>356.47</td><td align="right" class='awrnc'>1,057.54</td></tr>
<tr><td scope="row" class='awrc'>redo write active strands</td><td align="right" class='awrc'>1,131</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>4.45</td></tr>
<tr><td scope="row" class='awrnc'>redo write broadcast ack count</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo write broadcast ack time</td><td align="right" class='awrc'>2,341</td><td align="right" class='awrc'>3.11</td><td align="right" class='awrc'>9.22</td></tr>
<tr><td scope="row" class='awrnc'>redo write finish time</td><td align="right" class='awrnc'>5,258,516</td><td align="right" class='awrnc'>6,978.45</td><td align="right" class='awrnc'>20,702.82</td></tr>
<tr><td scope="row" class='awrc'>redo write gather time</td><td align="right" class='awrc'>164,046</td><td align="right" class='awrc'>217.70</td><td align="right" class='awrc'>645.85</td></tr>
<tr><td scope="row" class='awrnc'>redo write info find</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write schedule time</td><td align="right" class='awrc'>173,286</td><td align="right" class='awrc'>229.96</td><td align="right" class='awrc'>682.23</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (   4KB)</td><td align="right" class='awrnc'>964</td><td align="right" class='awrnc'>1.28</td><td align="right" class='awrnc'>3.80</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (   8KB)</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.26</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (  16KB)</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.15</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (  32KB)</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 128KB)</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.09</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 256KB)</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 512KB)</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (1024KB)</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>redo write time</td><td align="right" class='awrnc'>530</td><td align="right" class='awrnc'>0.70</td><td align="right" class='awrnc'>2.09</td></tr>
<tr><td scope="row" class='awrc'>redo write time (usec)</td><td align="right" class='awrc'>5,293,624</td><td align="right" class='awrc'>7,025.04</td><td align="right" class='awrc'>20,841.04</td></tr>
<tr><td scope="row" class='awrnc'>redo write total time</td><td align="right" class='awrnc'>5,362,175</td><td align="right" class='awrnc'>7,116.02</td><td align="right" class='awrnc'>21,110.93</td></tr>
<tr><td scope="row" class='awrc'>redo write worker delay (usec)</td><td align="right" class='awrc'>96,305</td><td align="right" class='awrc'>127.80</td><td align="right" class='awrc'>379.15</td></tr>
<tr><td scope="row" class='awrnc'>redo write worker delay count</td><td align="right" class='awrnc'>1,130</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>4.45</td></tr>
<tr><td scope="row" class='awrc'>redo writes</td><td align="right" class='awrc'>1,130</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>4.45</td></tr>
<tr><td scope="row" class='awrnc'>redo writes (group 0)</td><td align="right" class='awrnc'>895</td><td align="right" class='awrnc'>1.19</td><td align="right" class='awrnc'>3.52</td></tr>
<tr><td scope="row" class='awrc'>redo writes (group 1)</td><td align="right" class='awrc'>235</td><td align="right" class='awrc'>0.31</td><td align="right" class='awrc'>0.93</td></tr>
<tr><td scope="row" class='awrnc'>redo writes adaptive all</td><td align="right" class='awrnc'>1,130</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>4.45</td></tr>
<tr><td scope="row" class='awrc'>redo writes adaptive worker</td><td align="right" class='awrc'>1,130</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>4.45</td></tr>
<tr><td scope="row" class='awrnc'>remote Oradebug requests</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>rollback changes - undo records applied</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>rollbacks only - consistent read gets</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.15</td></tr>
<tr><td scope="row" class='awrc'>rows fetched via callback</td><td align="right" class='awrc'>3,523</td><td align="right" class='awrc'>4.68</td><td align="right" class='awrc'>13.87</td></tr>
<tr><td scope="row" class='awrnc'>saved cleanouts</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>saved cleanouts successfully completed</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>securefile allocation bytes</td><td align="right" class='awrnc'>2,162,688</td><td align="right" class='awrnc'>2,870.05</td><td align="right" class='awrnc'>8,514.52</td></tr>
<tr><td scope="row" class='awrc'>securefile allocation chunks</td><td align="right" class='awrc'>88</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.35</td></tr>
<tr><td scope="row" class='awrnc'>securefile bytes non-transformed</td><td align="right" class='awrnc'>1,836,496</td><td align="right" class='awrnc'>2,437.17</td><td align="right" class='awrnc'>7,230.30</td></tr>
<tr><td scope="row" class='awrc'>securefile direct read bytes</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct read ops</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>securefile direct write bytes</td><td align="right" class='awrc'>2,162,688</td><td align="right" class='awrc'>2,870.05</td><td align="right" class='awrc'>8,514.52</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct write ops</td><td align="right" class='awrnc'>87</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.34</td></tr>
<tr><td scope="row" class='awrc'>securefile number of non-transformed flushes</td><td align="right" class='awrc'>97</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.38</td></tr>
<tr><td scope="row" class='awrnc'>segment cfs allocations</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.13</td></tr>
<tr><td scope="row" class='awrc'>segment chunks allocation from dispenser</td><td align="right" class='awrc'>87</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.34</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser allocations</td><td align="right" class='awrnc'>85</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.33</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser load empty</td><td align="right" class='awrc'>75</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.30</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser load tasks</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.30</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc ops</td><td align="right" class='awrc'>187</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>0.74</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc tasks</td><td align="right" class='awrnc'>184</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>0.72</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc time (ms)</td><td align="right" class='awrc'>5,420</td><td align="right" class='awrc'>7.19</td><td align="right" class='awrc'>21.34</td></tr>
<tr><td scope="row" class='awrnc'>session connect time</td><td align="right" class='awrnc'>804</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>3.17</td></tr>
<tr><td scope="row" class='awrc'>session cursor cache hits</td><td align="right" class='awrc'>15,390,940</td><td align="right" class='awrc'>20,424.96</td><td align="right" class='awrc'>60,594.25</td></tr>
<tr><td scope="row" class='awrnc'>session logical reads</td><td align="right" class='awrnc'>1,249,870,563</td><td align="right" class='awrnc'>1,658,673.99</td><td align="right" class='awrnc'>4,920,750.25</td></tr>
<tr><td scope="row" class='awrc'>shared hash latch upgrades - no wait</td><td align="right" class='awrc'>8,175,109</td><td align="right" class='awrc'>10,849.00</td><td align="right" class='awrc'>32,185.47</td></tr>
<tr><td scope="row" class='awrnc'>shared hash latch upgrades - wait</td><td align="right" class='awrnc'>191</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>0.75</td></tr>
<tr><td scope="row" class='awrc'>shared io pool buffer get success</td><td align="right" class='awrc'>86</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.34</td></tr>
<tr><td scope="row" class='awrnc'>sorts (memory)</td><td align="right" class='awrnc'>1,306</td><td align="right" class='awrnc'>1.73</td><td align="right" class='awrnc'>5.14</td></tr>
<tr><td scope="row" class='awrc'>sorts (rows)</td><td align="right" class='awrc'>154,628</td><td align="right" class='awrc'>205.20</td><td align="right" class='awrc'>608.77</td></tr>
<tr><td scope="row" class='awrnc'>sql area evicted</td><td align="right" class='awrnc'>182</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>0.72</td></tr>
<tr><td scope="row" class='awrc'>sql area purged</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>summed dirty queue length</td><td align="right" class='awrnc'>1,454</td><td align="right" class='awrnc'>1.93</td><td align="right" class='awrnc'>5.72</td></tr>
<tr><td scope="row" class='awrc'>switch current caused by our pin</td><td align="right" class='awrc'>380</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>1.50</td></tr>
<tr><td scope="row" class='awrnc'>switch current to new buffer</td><td align="right" class='awrnc'>403</td><td align="right" class='awrnc'>0.53</td><td align="right" class='awrnc'>1.59</td></tr>
<tr><td scope="row" class='awrc'>table fetch by rowid</td><td align="right" class='awrc'>1,249,893,383</td><td align="right" class='awrc'>1,658,704.27</td><td align="right" class='awrc'>4,920,840.09</td></tr>
<tr><td scope="row" class='awrnc'>table fetch continued row</td><td align="right" class='awrnc'>237</td><td align="right" class='awrnc'>0.31</td><td align="right" class='awrnc'>0.93</td></tr>
<tr><td scope="row" class='awrc'>table scan blocks gotten</td><td align="right" class='awrc'>12,159</td><td align="right" class='awrc'>16.14</td><td align="right" class='awrc'>47.87</td></tr>
<tr><td scope="row" class='awrnc'>table scan disk non-IMC rows gotten</td><td align="right" class='awrnc'>423,970</td><td align="right" class='awrnc'>562.64</td><td align="right" class='awrnc'>1,669.17</td></tr>
<tr><td scope="row" class='awrc'>table scan rows gotten</td><td align="right" class='awrc'>423,970</td><td align="right" class='awrc'>562.64</td><td align="right" class='awrc'>1,669.17</td></tr>
<tr><td scope="row" class='awrnc'>table scans (short tables)</td><td align="right" class='awrnc'>889</td><td align="right" class='awrnc'>1.18</td><td align="right" class='awrnc'>3.50</td></tr>
<tr><td scope="row" class='awrc'>total cf enq hold time</td><td align="right" class='awrc'>3,275</td><td align="right" class='awrc'>4.35</td><td align="right" class='awrc'>12.89</td></tr>
<tr><td scope="row" class='awrnc'>total number of cf enq holders</td><td align="right" class='awrnc'>87</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.34</td></tr>
<tr><td scope="row" class='awrc'>total number of times SMON posted</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction lock background gets</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction lock foreground requests</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction rollbacks</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction tables consistent read rollbacks</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction tables consistent reads - undo records applied</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>undo change vector size</td><td align="right" class='awrc'>3,367,488</td><td align="right" class='awrc'>4,468.91</td><td align="right" class='awrc'>13,257.83</td></tr>
<tr><td scope="row" class='awrnc'>user calls</td><td align="right" class='awrnc'>1,654</td><td align="right" class='awrnc'>2.19</td><td align="right" class='awrnc'>6.51</td></tr>
<tr><td scope="row" class='awrc'>user commits</td><td align="right" class='awrc'>254</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>user logons cumulative</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>user logouts cumulative</td><td align="right" class='awrc'>242</td><td align="right" class='awrc'>0.32</td><td align="right" class='awrc'>0.95</td></tr>
<tr><td scope="row" class='awrnc'>workarea executions - optimal</td><td align="right" class='awrnc'>1,547</td><td align="right" class='awrnc'>2.05</td><td align="right" class='awrnc'>6.09</td></tr>
<tr><td scope="row" class='awrc'>write clones created in foreground</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1300"></a>
<h3 class="awr">Instance Activity Stats - Absolute Values</h3>
<ul>
<li class="awr"> Statistics with absolute values (should not be diffed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays absolute values of instance-related features. For each instance, activity begin value and end value are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Begin Value</th><th class="awrbg" scope="col">End Value</th></tr>
<tr><td scope="row" class='awrc'>logons current</td><td align="right" class='awrc'>409</td><td align="right" class='awrc'>166</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors current</td><td align="right" class='awrnc'>992</td><td align="right" class='awrnc'>83</td></tr>
<tr><td scope="row" class='awrc'>session cursor cache count</td><td align="right" class='awrc'>15,237</td><td align="right" class='awrc'>15,326</td></tr>
<tr><td scope="row" class='awrnc'>session pga memory</td><td align="right" class='awrnc'>2,187,605,520</td><td align="right" class='awrnc'>838,461,704</td></tr>
<tr><td scope="row" class='awrc'>session pga memory max</td><td align="right" class='awrc'>2,459,853,648</td><td align="right" class='awrc'>1,036,513,256</td></tr>
<tr><td scope="row" class='awrnc'>session uga memory</td><td align="right" class='awrnc'>1,025,083,552</td><td align="right" class='awrnc'>400,008,056</td></tr>
<tr><td scope="row" class='awrc'>session uga memory max</td><td align="right" class='awrc'>2,717,099,888</td><td align="right" class='awrc'>3,246,095,000</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1400"></a>
<h3 class="awr">Instance Activity Stats - Thread Activity</h3>
<ul>
<li class="awr"> Statistics identified by '(derived)' come from sources other than SYSSTAT</li>
</ul>
<table border="0" class="tdiff" summary="This table displays thread activity stats in the instance. For each activity , total number of activity and activity per hour are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Hour</th></tr>
<tr><td scope="row" class='awrc'>log switches (derived)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="24"></a>
<h2 class="awr">
IO Stats
</h2>
<ul>
<li class="awr"><a class="awr" href="#8760">IOStat by Function summary</a></li>
<li class="awr"><a class="awr" href="#8770">IOStat by Filetype summary</a></li>
<li class="awr"><a class="awr" href="#8780">IOStat by Function/Filetype summary</a></li>
<li class="awr"><a class="awr" href="#1700">Tablespace IO Stats</a></li>
<li class="awr"><a class="awr" href="#1800">File IO Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8760"></a>
<h3 class="awr">IOStat by Function summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> ordered by (Data Read + Write) desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the IO Statistics for different functions. IO stats includes amount of reads and writes, requests per second, data per second, wait count and average wait time"><tr><th class="awrbg" scope="col">Function Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time </th></tr>
<tr><td scope="row" class='awrc'>Buffer Cache Reads</td><td align="right" class='awrc'>259.7G</td><td align="right" class='awrc'>45167.98</td><td align="right" class='awrc'>352.909M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1.6M</td><td align="right" class='awrc'>19.26ms</td></tr>
<tr><td scope="row" class='awrnc'>Others</td><td align="right" class='awrnc'>50M</td><td align="right" class='awrnc'>4.27</td><td align="right" class='awrnc'>.066M</td><td align="right" class='awrnc'>14M</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>.019M</td><td align="right" class='awrnc'>2394</td><td align="right" class='awrnc'>13.69ms</td></tr>
<tr><td scope="row" class='awrc'>DBWR</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>12M</td><td align="right" class='awrc'>1.23</td><td align="right" class='awrc'>.016M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>10M</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>.013M</td><td align="right" class='awrnc'>1148</td><td align="right" class='awrnc'>4.40ms</td></tr>
<tr><td scope="row" class='awrc'>Direct Writes</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>3M</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>.004M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TOTAL:</td><td align="right" class='awrnc'>259.7G</td><td align="right" class='awrnc'>45172.24</td><td align="right" class='awrnc'>352.976M</td><td align="right" class='awrnc'>39M</td><td align="right" class='awrnc'>3.61</td><td align="right" class='awrnc'>.052M</td><td align="right" class='awrnc'>1.6M</td><td align="right" class='awrnc'>19.24ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8770"></a>
<h3 class="awr">IOStat by Filetype summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> Small Read and Large Read are average service times </li>
<li class="awr"> Ordered by (Data Read + Write) desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays IO Statistics for different file types, such as data files, control files, log files and temp files. IO Statistics include amount of reads and writes, requests per second, data per second, wait count and average wait time"><tr><th class="awrbg" scope="col">Filetype Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Small Read</th><th class="awrbg" scope="col">Large Read</th></tr>
<tr><td scope="row" class='awrc'>Data File</td><td align="right" class='awrc'>259.4G</td><td align="right" class='awrc'>45121.20</td><td align="right" class='awrc'>352.545M</td><td align="right" class='awrc'>17M</td><td align="right" class='awrc'>1.31</td><td align="right" class='awrc'>.023M</td><td align="right" class='awrc'>1.57ms</td><td align="right" class='awrc'>39.19ms</td></tr>
<tr><td scope="row" class='awrnc'>Control File</td><td align="right" class='awrnc'>50M</td><td align="right" class='awrnc'>4.23</td><td align="right" class='awrnc'>.066M</td><td align="right" class='awrnc'>8M</td><td align="right" class='awrnc'>0.62</td><td align="right" class='awrnc'>.011M</td><td align="right" class='awrnc'>6.35ms</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Log File</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>10M</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>.013M</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Temp File</td><td align="right" class='awrnc'>1M</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>.001M</td><td align="right" class='awrnc'>2M</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>.003M</td><td align="right" class='awrnc'>4.38ms</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TOTAL:</td><td align="right" class='awrc'>259.5G</td><td align="right" class='awrc'>45125.64</td><td align="right" class='awrc'>352.612M</td><td align="right" class='awrc'>37M</td><td align="right" class='awrc'>3.61</td><td align="right" class='awrc'>.049M</td><td align="right" class='awrc'>1.57ms</td><td align="right" class='awrc'>39.19ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8780"></a>
<h3 class="awr">IOStat by Function/Filetype summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> Ordered by (Data Read + Write) desc for each function</li>
</ul>
<table border="0" class="tdiff" summary="IOStat by Function/Filetype summary. . 'Data' columns suffixed with M,G,T,P are in multiples of 1024 other columns suffixed with K,M,G,T,P are in multiples of 1000. Ordered by (Data Read + Write) desc for each function"><tr><th class="awrbg" scope="col">Function/File Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs	 per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time	</th></tr>
<tr><td scope="row" class='awrc'>
Buffer Cache Reads
</td><td align="right" class='awrc'>257.7G</td><td align="right" class='awrc'>44815.13</td><td align="right" class='awrc'>350.153M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1.1M</td><td align="right" class='awrc'>14.26ms</td></tr>
<tr><td scope="row" class='awrnc'>
 Buffer Cache Reads (Data File)
</td><td align="right" class='awrnc'>257.7G</td><td align="right" class='awrnc'>44814.92</td><td align="right" class='awrnc'>350.15M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>1.1M</td><td align="right" class='awrnc'>14.26ms</td></tr>
<tr><td scope="row" class='awrc'>
 Buffer Cache Reads (Temp File)
</td><td align="right" class='awrc'>2M</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>.003M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>156</td><td align="right" class='awrc'>4.87ms</td></tr>
<tr><td scope="row" class='awrnc'>
Others
</td><td align="right" class='awrnc'>49M</td><td align="right" class='awrnc'>4.25</td><td align="right" class='awrnc'>.065M</td><td align="right" class='awrnc'>14M</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>.019M</td><td align="right" class='awrnc'>2149</td><td align="right" class='awrnc'>9.90ms</td></tr>
<tr><td scope="row" class='awrc'>
 Others (Control File)
</td><td align="right" class='awrc'>49M</td><td align="right" class='awrc'>4.23</td><td align="right" class='awrc'>.065M</td><td align="right" class='awrc'>8M</td><td align="right" class='awrc'>0.62</td><td align="right" class='awrc'>.011M</td><td align="right" class='awrc'>2141</td><td align="right" class='awrc'>9.92ms</td></tr>
<tr><td scope="row" class='awrnc'>
 Others (Data File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>5M</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>.007M</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>3.17ms</td></tr>
<tr><td scope="row" class='awrc'>
 Others (Temp File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>.001M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
 DBWR (Data File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>12M</td><td align="right" class='awrnc'>1.14</td><td align="right" class='awrnc'>.016M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
DBWR
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>12M</td><td align="right" class='awrc'>1.20</td><td align="right" class='awrc'>.016M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
 DBWR (Temp File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
 LGWR (Log File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>10M</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>.013M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
LGWR
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>10M</td><td align="right" class='awrnc'>1.52</td><td align="right" class='awrnc'>.013M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
 Direct Writes (Data File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>3M</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>.004M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
Direct Writes
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>3M</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>.004M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
TOTAL:
</td><td align="right" class='awrc'>257.7G</td><td align="right" class='awrc'>44819.37</td><td align="right" class='awrc'>350.218M</td><td align="right" class='awrc'>39M</td><td align="right" class='awrc'>3.59</td><td align="right" class='awrc'>.052M</td><td align="right" class='awrc'>1.1M</td><td align="right" class='awrc'>14.25ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1700"></a>
<h3 class="awr">Tablespace IO Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1800"></a>
<h3 class="awr">File IO Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="25"></a>
<h2 class="awr">
Buffer Pool Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1900">Buffer Pool Statistics</a></li>
<li class="awr"><a class="awr" href="#1910">Checkpoint Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1900"></a>
<h3 class="awr">Buffer Pool Statistics</h3>
<ul>
<li class="awr"> Standard block size Pools  D: default,  K: keep,  R: recycle </li>
<li class="awr"> Default Pools for other block sizes: 2k, 4k, 8k, 16k, 32k</li>
</ul>
<table border="0" class="tdiff" summary="This table displays buffer pool statistics for different types of buffers, such as default, keep, and recycle. Statistics include number of buffers, % Pool hit, buffer gets, physical reads, physical writes, free buffer wait, etc."><tr><th class="awrbg" scope="col">P</th><th class="awrbg" scope="col">Number of Buffers</th><th class="awrbg" scope="col">Pool Hit%</th><th class="awrbg" scope="col">Buffer Gets</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">Free Buff Wait</th><th class="awrbg" scope="col">Writ Comp Wait</th><th class="awrbg" scope="col">Buffer Busy Waits</th></tr>
<tr><td scope="row" class='awrc'>D</td><td align="right" class='awrc'>1,301,072</td><td align="right" class='awrc'>97</td><td align="right" class='awrc'>1,257,768,122</td><td align="right" class='awrc'>35,806,879</td><td align="right" class='awrc'>2,235</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4,205</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#25">Back to Buffer Pool Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1910"></a>
<h3 class="awr">Checkpoint Activity</h3>
<ul>
<li class="awr">Total Physical Writes:			      3,234</li>
</ul>
<table border="0" class="tdiff" summary="This table displays checkpoint activity statistics. Statistics include MTTR writes, log size writes, autotune checkpoint writes, etc."><tr><th class="awrbg" scope="col">MTTR Writes</th><th class="awrbg" scope="col">Log Size Writes</th><th class="awrbg" scope="col">Log Ckpt Writes</th><th class="awrbg" scope="col">Other Settings Writes</th><th class="awrbg" scope="col">Autotune Ckpt Writes</th><th class="awrbg" scope="col">Thread Ckpt Writes</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#25">Back to Buffer Pool Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="26"></a>
<h2 class="awr">
Advisory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#2000">Instance Recovery Stats</a></li>
<li class="awr"><a class="awr" href="#2010">MTTR Advisory</a></li>
<li class="awr"><a class="awr" href="#2100">Buffer Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#2400">PGA Aggr Summary</a></li>
<li class="awr"><a class="awr" href="#2600">PGA Aggr Target Stats</a></li>
<li class="awr"><a class="awr" href="#2700">PGA Aggr Target Histogram</a></li>
<li class="awr"><a class="awr" href="#2800">PGA Memory Advisory</a></li>
<li class="awr"><a class="awr" href="#5500">Shared Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#6900">SGA Target Advisory</a></li>
<li class="awr"><a class="awr" href="#7100">Streams Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#5700">Java Pool Advisory</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2000"></a>
<h3 class="awr">Instance Recovery Stats</h3>
<ul>
<li class="awr"> B: Begin Snapshot,  E: End Snapshot</li>
</ul>
<table border="0" class="tdiff" summary="This table displays instance recovery statistics at begin and end snapshot. It displays target MTTR, estimated MTTR, recovery estimated IO per second, redo blocks, target redo blocks, etc."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Targt MTTR  (s) </th><th class="awrbg" scope="col">Estd MTTR (s)</th><th class="awrbg" scope="col">Recovery Estd IOs</th><th class="awrbg" scope="col">Actual  RedoBlks</th><th class="awrbg" scope="col">Target	RedoBlks</th><th class="awrbg" scope="col">Log Sz  RedoBlks</th><th class="awrbg" scope="col">Log Ckpt Timeout RedoBlks</th><th class="awrbg" scope="col">Log Ckpt Interval RedoBlks</th><th class="awrbg" scope="col">Opt Log Sz(M)</th><th class="awrbg" scope="col">Estd RAC Avail Time</th></tr>
<tr><td scope="row" class='awrc'>B</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>198</td><td align="right" class='awrc'>2587</td><td align="right" class='awrc'>84934656</td><td align="right" class='awrc'>84934656</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>E</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>528</td><td align="right" class='awrnc'>5847</td><td align="right" class='awrnc'>20522</td><td align="right" class='awrnc'>84934656</td><td align="right" class='awrnc'>20522</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2010"></a>
<h3 class="awr">MTTR Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2100"></a>
<h3 class="awr">Buffer Pool Advisory</h3>
<ul>
<li class="awr"> Only rows with estimated physical reads &gt;0 are displayed </li>
<li class="awr"> ordered by Block Size, Buffers For Estimate</li>
</ul>
<table border="0" class="tdiff" summary="This table displays MTTR advisory. It displays size for estimate, dirty limit, estimated cache writes, estimated cache write factor, estimated total write, estimated total IO per second, etc."><tr><th class="awrbg" scope="col">P</th><th class="awrbg" scope="col">Size for Est (M)</th><th class="awrbg" scope="col">Size Factor</th><th class="awrbg" scope="col">Buffers (thousands)</th><th class="awrbg" scope="col">Est Phys Read Factor</th><th class="awrbg" scope="col">Estimated Phys Reads (thousands)</th><th class="awrbg" scope="col">Est Phys Read Time</th><th class="awrbg" scope="col">Est %DBtime for Rds</th></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>1,088</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>127</td><td align="right" class='awrc'>14.56</td><td align="right" class='awrc'>951,710</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1684362.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>2,176</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>254</td><td align="right" class='awrnc'>4.49</td><td align="right" class='awrnc'>293,870</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>519220.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>3,264</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>380</td><td align="right" class='awrc'>1.42</td><td align="right" class='awrc'>93,028</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>163495.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>4,352</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>507</td><td align="right" class='awrnc'>1.22</td><td align="right" class='awrnc'>79,777</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>140026.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>5,440</td><td align="right" class='awrc'>0.49</td><td align="right" class='awrc'>634</td><td align="right" class='awrc'>1.17</td><td align="right" class='awrc'>76,746</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>134657.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>6,528</td><td align="right" class='awrnc'>0.58</td><td align="right" class='awrnc'>761</td><td align="right" class='awrnc'>1.14</td><td align="right" class='awrnc'>74,361</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>130433.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>7,616</td><td align="right" class='awrc'>0.68</td><td align="right" class='awrc'>887</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>72,117</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>126458.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>8,704</td><td align="right" class='awrnc'>0.78</td><td align="right" class='awrnc'>1,014</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>70,003</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>122714.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>9,792</td><td align="right" class='awrc'>0.88</td><td align="right" class='awrc'>1,141</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>67,919</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>119022.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>10,880</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>1,268</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>65,908</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>115461.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>11,168</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>1,301</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>65,380</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>114526.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>11,968</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>1,394</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>63,974</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>112035.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>13,056</td><td align="right" class='awrc'>1.17</td><td align="right" class='awrc'>1,521</td><td align="right" class='awrc'>0.95</td><td align="right" class='awrc'>62,130</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>108770.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>14,144</td><td align="right" class='awrnc'>1.27</td><td align="right" class='awrnc'>1,648</td><td align="right" class='awrnc'>0.92</td><td align="right" class='awrnc'>60,369</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>105650.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>15,232</td><td align="right" class='awrc'>1.36</td><td align="right" class='awrc'>1,775</td><td align="right" class='awrc'>0.90</td><td align="right" class='awrc'>58,692</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>102680.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>16,320</td><td align="right" class='awrnc'>1.46</td><td align="right" class='awrnc'>1,901</td><td align="right" class='awrnc'>0.87</td><td align="right" class='awrnc'>57,083</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>99830.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>17,408</td><td align="right" class='awrc'>1.56</td><td align="right" class='awrc'>2,028</td><td align="right" class='awrc'>0.85</td><td align="right" class='awrc'>55,543</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>97103.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>18,496</td><td align="right" class='awrnc'>1.66</td><td align="right" class='awrnc'>2,155</td><td align="right" class='awrnc'>0.83</td><td align="right" class='awrnc'>54,071</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>94495.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>19,584</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>2,282</td><td align="right" class='awrc'>0.81</td><td align="right" class='awrc'>52,663</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>92002.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>20,672</td><td align="right" class='awrnc'>1.85</td><td align="right" class='awrnc'>2,408</td><td align="right" class='awrnc'>0.78</td><td align="right" class='awrnc'>51,307</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>89600.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>21,760</td><td align="right" class='awrc'>1.95</td><td align="right" class='awrc'>2,535</td><td align="right" class='awrc'>0.76</td><td align="right" class='awrc'>49,985</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>87259.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2400"></a>
<h3 class="awr">PGA Aggr Summary</h3>
<ul>
<li class="awr"> PGA cache hit % - percentage of W/A (WorkArea) data processed only in-memory</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate summary. It includes PGA cache hits, total wait time, average time for each class of buffer wait and WorkArea data processed."><tr><th class="awrbg" scope="col">PGA Cache Hit %</th><th class="awrbg" scope="col">W/A MB Processed</th><th class="awrbg" scope="col">Extra W/A MB Read/Written</th></tr>
<tr><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>431</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2600"></a>
<h3 class="awr">PGA Aggr Target Stats</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap (rows dentified with B or E contain data	 which is absolute i.e. not diffed over the interval) </li>
<li class="awr"> Auto PGA Target - actual workarea memory target </li>
<li class="awr"> W/A PGA Used	 - amount of memory used for all Workareas (manual + auto) </li>
<li class="awr"> %PGA W/A Mem	 - percentage of PGA memory allocated to workareas </li>
<li class="awr"> %Auto W/A Mem	 - percentage of workarea memory controlled by Auto Mem Mgmt </li>
<li class="awr"> %Man W/A Mem	 - percentage of workarea memory under manual control</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate target statistics for begin and end snapshot. Statistics include PGA aggregate target, auto PGA target, PGA memory allocation, etc."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">PGA Aggr Target(M)</th><th class="awrbg" scope="col">Auto PGA Target(M)</th><th class="awrbg" scope="col">PGA Mem  Alloc(M) </th><th class="awrbg" scope="col">W/A PGA  Used(M) </th><th class="awrbg" scope="col">%PGA W/A Mem</th><th class="awrbg" scope="col">%Auto W/A Mem</th><th class="awrbg" scope="col">%Man W/A Mem</th><th class="awrbg" scope="col">Global Mem Bound(K)</th></tr>
<tr><td scope="row" class='awrc'>B</td><td align="right" class='awrc'>8,082</td><td align="right" class='awrc'>4,008</td><td align="right" class='awrc'>4,249.73</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>827,590</td></tr>
<tr><td scope="row" class='awrnc'>E</td><td align="right" class='awrnc'>8,082</td><td align="right" class='awrnc'>5,127</td><td align="right" class='awrnc'>2,766.09</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>827,590</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2700"></a>
<h3 class="awr">PGA Aggr Target Histogram</h3>
<ul>
<li class="awr"> Optimal Executions are purely in-memory operations</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate target histograms."><tr><th class="awrbg" scope="col">  Low Optimal</th><th class="awrbg" scope="col">  High Optimal</th><th class="awrbg" scope="col">Total Execs</th><th class="awrbg" scope="col">Optimal Execs</th><th class="awrbg" scope="col">1-Pass Execs</th><th class="awrbg" scope="col">M-Pass Execs</th></tr>
<tr><td class='awrc'>2K</td><td class='awrc'>4K</td><td align="right" class='awrc'>911</td><td align="right" class='awrc'>911</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>64K</td><td class='awrnc'>128K</td><td align="right" class='awrnc'>142</td><td align="right" class='awrnc'>142</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>128K</td><td class='awrc'>256K</td><td align="right" class='awrc'>68</td><td align="right" class='awrc'>68</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>256K</td><td class='awrnc'>512K</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>512K</td><td class='awrc'>1024K</td><td align="right" class='awrc'>177</td><td align="right" class='awrc'>177</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>1M</td><td class='awrnc'>2M</td><td align="right" class='awrnc'>197</td><td align="right" class='awrnc'>197</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>2M</td><td class='awrc'>4M</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2800"></a>
<h3 class="awr">PGA Memory Advisory</h3>
<ul>
<li class="awr"> When using Auto Memory Mgmt, minimally choose a pga_aggregate_target value    where Estd PGA Overalloc Count is 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA memory advisory for different estimated PGA target sizes. It displays size factor, Workarea MB processed, estimated PGA cache hit, estimated extra Workarea MB read written to disk, etc., for each target size."><tr><th class="awrbg" scope="col">PGA Target Est (MB)</th><th class="awrbg" scope="col">Size Factr</th><th class="awrbg" scope="col">W/A MB Processed</th><th class="awrbg" scope="col">Estd Extra	 W/A MB Read/	Written to Disk </th><th class="awrbg" scope="col">Estd PGA Cache Hit %</th><th class="awrbg" scope="col">Estd PGA Overalloc Count</th><th class="awrbg" scope="col">Estd Time</th></tr>
<tr><td align="right" scope="row" class='awrc'>1,010</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>4,559.39</td><td align="right" class='awrc'>474.21</td><td align="right" class='awrc'>91.00</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>24,397,015</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,021</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>4,559.39</td><td align="right" class='awrnc'>470.06</td><td align="right" class='awrnc'>91.00</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>24,376,927</td></tr>
<tr><td align="right" scope="row" class='awrc'>4,041</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>4,559.39</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22,098,611</td></tr>
<tr><td align="right" scope="row" class='awrnc'>6,062</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>4,559.39</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>22,098,611</td></tr>
<tr><td align="right" scope="row" class='awrc'>8,082</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>4,559.39</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22,098,611</td></tr>
<tr><td align="right" scope="row" class='awrnc'>9,698</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>4,559.39</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>22,098,611</td></tr>
<tr><td align="right" scope="row" class='awrc'>11,315</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>4,559.39</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22,098,611</td></tr>
<tr><td align="right" scope="row" class='awrnc'>12,931</td><td align="right" class='awrnc'>1.60</td><td align="right" class='awrnc'>4,559.39</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>22,098,611</td></tr>
<tr><td align="right" scope="row" class='awrc'>14,548</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>4,559.39</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22,098,611</td></tr>
<tr><td align="right" scope="row" class='awrnc'>16,164</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>4,559.39</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>22,098,611</td></tr>
<tr><td align="right" scope="row" class='awrc'>24,246</td><td align="right" class='awrc'>3.00</td><td align="right" class='awrc'>4,559.39</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22,098,611</td></tr>
<tr><td align="right" scope="row" class='awrnc'>32,328</td><td align="right" class='awrnc'>4.00</td><td align="right" class='awrnc'>4,559.39</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>22,098,611</td></tr>
<tr><td align="right" scope="row" class='awrc'>48,492</td><td align="right" class='awrc'>6.00</td><td align="right" class='awrc'>4,559.39</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22,098,611</td></tr>
<tr><td align="right" scope="row" class='awrnc'>64,656</td><td align="right" class='awrnc'>8.00</td><td align="right" class='awrnc'>4,559.39</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>22,098,611</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5500"></a>
<h3 class="awr">Shared Pool Advisory</h3>
<ul>
<li class="awr"> SP: Shared Pool     Est LC: Estimated Library Cache   Factr: Factor </li>
<li class="awr"> Note there is often a 1:Many correlation between a single logical object    in the Library Cache, and the physical number of memory objects associated    with it.  Therefore comparing the number of Lib Cache objects (e.g. in     v$librarycache), with the number of Lib Cache Memory Objects is invalid.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared pool advisory. Size factor, estimated library cache size, estimated library cache memory object and other info is displayed for different shared pool sizes"><tr><th class="awrbg" scope="col">Shared Pool Size(M)</th><th class="awrbg" scope="col">SP Size Factr</th><th class="awrbg" scope="col">Est LC Size (M)</th><th class="awrbg" scope="col">Est LC Mem Obj</th><th class="awrbg" scope="col">Est LC Time Saved (s)</th><th class="awrbg" scope="col">Est LC Time Saved Factr</th><th class="awrbg" scope="col">Est LC Load Time (s)</th><th class="awrbg" scope="col">Est LC Load Time Factr</th><th class="awrbg" scope="col">Est LC Mem Obj Hits (K)</th></tr>
<tr><td align="right" scope="row" class='awrc'>2,720</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>132</td><td align="right" class='awrc'>6,620</td><td align="right" class='awrc'>2,935,335</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>3,796</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>3,463</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,752</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>164</td><td align="right" class='awrnc'>7,620</td><td align="right" class='awrnc'>2,935,345</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>3,786</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>3,464</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,784</td><td align="right" class='awrc'>1.02</td><td align="right" class='awrc'>195</td><td align="right" class='awrc'>8,847</td><td align="right" class='awrc'>2,935,362</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>3,769</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>3,465</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,816</td><td align="right" class='awrnc'>1.04</td><td align="right" class='awrnc'>227</td><td align="right" class='awrnc'>10,147</td><td align="right" class='awrnc'>2,935,383</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>3,748</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>3,465</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,848</td><td align="right" class='awrc'>1.05</td><td align="right" class='awrc'>258</td><td align="right" class='awrc'>12,069</td><td align="right" class='awrc'>2,935,389</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>3,742</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>3,465</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,880</td><td align="right" class='awrnc'>1.06</td><td align="right" class='awrnc'>270</td><td align="right" class='awrnc'>12,652</td><td align="right" class='awrnc'>2,935,389</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>3,742</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>3,465</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,912</td><td align="right" class='awrc'>1.07</td><td align="right" class='awrc'>270</td><td align="right" class='awrc'>12,652</td><td align="right" class='awrc'>2,935,389</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>3,742</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>3,465</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,944</td><td align="right" class='awrnc'>1.08</td><td align="right" class='awrnc'>270</td><td align="right" class='awrnc'>12,652</td><td align="right" class='awrnc'>2,935,389</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>3,742</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>3,465</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,976</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>270</td><td align="right" class='awrc'>12,652</td><td align="right" class='awrc'>2,935,389</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>3,742</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>3,465</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,008</td><td align="right" class='awrnc'>1.11</td><td align="right" class='awrnc'>270</td><td align="right" class='awrnc'>12,652</td><td align="right" class='awrnc'>2,935,389</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>3,742</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>3,465</td></tr>
<tr><td align="right" scope="row" class='awrc'>3,296</td><td align="right" class='awrc'>1.21</td><td align="right" class='awrc'>270</td><td align="right" class='awrc'>12,652</td><td align="right" class='awrc'>2,935,389</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>3,742</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>3,465</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,584</td><td align="right" class='awrnc'>1.32</td><td align="right" class='awrnc'>270</td><td align="right" class='awrnc'>12,652</td><td align="right" class='awrnc'>2,935,389</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>3,742</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>3,465</td></tr>
<tr><td align="right" scope="row" class='awrc'>3,872</td><td align="right" class='awrc'>1.42</td><td align="right" class='awrc'>270</td><td align="right" class='awrc'>12,652</td><td align="right" class='awrc'>2,935,389</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>3,742</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>3,465</td></tr>
<tr><td align="right" scope="row" class='awrnc'>4,160</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>270</td><td align="right" class='awrnc'>12,652</td><td align="right" class='awrnc'>2,935,389</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>3,742</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>3,465</td></tr>
<tr><td align="right" scope="row" class='awrc'>4,448</td><td align="right" class='awrc'>1.64</td><td align="right" class='awrc'>270</td><td align="right" class='awrc'>12,652</td><td align="right" class='awrc'>2,935,389</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>3,742</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>3,465</td></tr>
<tr><td align="right" scope="row" class='awrnc'>4,736</td><td align="right" class='awrnc'>1.74</td><td align="right" class='awrnc'>270</td><td align="right" class='awrnc'>12,652</td><td align="right" class='awrnc'>2,935,389</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>3,742</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>3,465</td></tr>
<tr><td align="right" scope="row" class='awrc'>5,024</td><td align="right" class='awrc'>1.85</td><td align="right" class='awrc'>270</td><td align="right" class='awrc'>12,652</td><td align="right" class='awrc'>2,935,389</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>3,742</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>3,465</td></tr>
<tr><td align="right" scope="row" class='awrnc'>5,312</td><td align="right" class='awrnc'>1.95</td><td align="right" class='awrnc'>270</td><td align="right" class='awrnc'>12,652</td><td align="right" class='awrnc'>2,935,389</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>3,742</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>3,465</td></tr>
<tr><td align="right" scope="row" class='awrc'>5,600</td><td align="right" class='awrc'>2.06</td><td align="right" class='awrc'>270</td><td align="right" class='awrc'>12,652</td><td align="right" class='awrc'>2,935,389</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>3,742</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>3,465</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6900"></a>
<h3 class="awr">SGA Target Advisory</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA target advisory for different SGA target sizes. It displays SGA size factor, estimated DB time and estimated physical reads for different SGA target sizes."><tr><th class="awrbg" scope="col">SGA Target Size (M)</th><th class="awrbg" scope="col">SGA Size Factor</th><th class="awrbg" scope="col">Est DB Time (s)</th><th class="awrbg" scope="col">Est Physical Reads</th></tr>
<tr><td align="right" scope="row" class='awrc'>5,376</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>695,079</td><td align="right" class='awrc'>293,868,244</td></tr>
<tr><td align="right" scope="row" class='awrnc'>7,168</td><td align="right" class='awrnc'>0.50</td><td align="right" class='awrnc'>339,295</td><td align="right" class='awrnc'>93,028,639</td></tr>
<tr><td align="right" scope="row" class='awrc'>8,960</td><td align="right" class='awrc'>0.63</td><td align="right" class='awrc'>310,466</td><td align="right" class='awrc'>76,749,117</td></tr>
<tr><td align="right" scope="row" class='awrnc'>10,752</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>302,250</td><td align="right" class='awrnc'>72,113,703</td></tr>
<tr><td align="right" scope="row" class='awrc'>12,544</td><td align="right" class='awrc'>0.88</td><td align="right" class='awrc'>294,818</td><td align="right" class='awrc'>67,916,333</td></tr>
<tr><td align="right" scope="row" class='awrnc'>14,336</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>290,318</td><td align="right" class='awrnc'>65,379,604</td></tr>
<tr><td align="right" scope="row" class='awrc'>16,128</td><td align="right" class='awrc'>1.13</td><td align="right" class='awrc'>284,570</td><td align="right" class='awrc'>62,130,238</td></tr>
<tr><td align="right" scope="row" class='awrnc'>17,920</td><td align="right" class='awrnc'>1.25</td><td align="right" class='awrnc'>278,473</td><td align="right" class='awrnc'>58,691,271</td></tr>
<tr><td align="right" scope="row" class='awrc'>19,712</td><td align="right" class='awrc'>1.38</td><td align="right" class='awrc'>272,899</td><td align="right" class='awrc'>55,539,974</td></tr>
<tr><td align="right" scope="row" class='awrnc'>21,504</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>270,286</td><td align="right" class='awrnc'>54,068,933</td></tr>
<tr><td align="right" scope="row" class='awrc'>23,296</td><td align="right" class='awrc'>1.63</td><td align="right" class='awrc'>265,380</td><td align="right" class='awrc'>51,303,375</td></tr>
<tr><td align="right" scope="row" class='awrnc'>25,088</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>263,057</td><td align="right" class='awrnc'>49,982,707</td></tr>
<tr><td align="right" scope="row" class='awrc'>26,880</td><td align="right" class='awrc'>1.88</td><td align="right" class='awrc'>263,057</td><td align="right" class='awrc'>49,982,707</td></tr>
<tr><td align="right" scope="row" class='awrnc'>28,672</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>263,057</td><td align="right" class='awrnc'>49,982,707</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7100"></a>
<h3 class="awr">Streams Pool Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5700"></a>
<h3 class="awr">Java Pool Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="27"></a>
<h2 class="awr">
Wait Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#2300">Buffer Wait Statistics</a></li>
<li class="awr"><a class="awr" href="#3000">Enqueue Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2300"></a>
<h3 class="awr">Buffer Wait Statistics</h3>
<ul>
<li class="awr"> ordered by wait time desc, waits desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays buffer wait statistics. Statistics include waits, total wait time and average time for each class of buffer wait."><tr><th class="awrbg" scope="col">Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg Time (ms)</th></tr>
<tr><td scope="row" class='awrc'>data block</td><td align="right" class='awrc'>4,136</td><td align="right" class='awrc'>344</td><td align="right" class='awrc'>83</td></tr>
<tr><td scope="row" class='awrnc'>free list</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>495</td></tr>
<tr><td scope="row" class='awrc'>1st level bmb</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#27">Back to Wait Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3000"></a>
<h3 class="awr">Enqueue Activity</h3>
<ul>
<li class="awr"> only enqueues with requests are shown	</li>
<li class="awr"> Enqueue stats gathered prior to 10g should not be compared with 10g data </li>
<li class="awr"> ordered by Wait Time desc, Waits desc, Requests desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays enqueue activity statistics. Requests, success gets, failed gets, waits, wait time and average wait time are displayed for each enqueue type."><tr><th class="awrbg" scope="col">Enqueue Type (Request Reason)</th><th class="awrbg" scope="col">Requests</th><th class="awrbg" scope="col">Succ Gets</th><th class="awrbg" scope="col">Failed Gets</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Wt Time (s)</th><th class="awrbg" scope="col">Av Wt Time(ms)</th></tr>
<tr><td scope="row" class='awrc'>TX-Transaction (row lock contention)</td>
<td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>66,977.00</td></tr>
<tr><td scope="row" class='awrnc'>TM-DML</td>
<td align="right" class='awrnc'>2,140</td><td align="right" class='awrnc'>2,140</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>35.80</td></tr>
<tr><td scope="row" class='awrc'>CO-KTUCLO Master Slave enq (master slave det)</td>
<td align="right" class='awrc'>12</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>43.75</td></tr>
<tr><td scope="row" class='awrnc'>CF-Controlfile Transaction</td>
<td align="right" class='awrnc'>1,476</td><td align="right" class='awrnc'>1,476</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>43.58</td></tr>
<tr><td scope="row" class='awrc'>HW-Segment High Water Mark</td>
<td align="right" class='awrc'>113</td><td align="right" class='awrc'>113</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>57.67</td></tr>
<tr><td scope="row" class='awrnc'>RO-Multiple Object Reuse (fast object reuse)</td>
<td align="right" class='awrnc'>368</td><td align="right" class='awrnc'>368</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>95</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4.85</td></tr>
<tr><td scope="row" class='awrc'>WF-AWR Flush</td>
<td align="right" class='awrc'>28</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>17.60</td></tr>
<tr><td scope="row" class='awrnc'>PS-PX Process Reservation</td>
<td align="right" class='awrnc'>125</td><td align="right" class='awrnc'>120</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.87</td></tr>
<tr><td scope="row" class='awrc'>WT-AWR CDB-Wide Table Lock</td>
<td align="right" class='awrc'>20</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.40</td></tr>
<tr><td scope="row" class='awrnc'>FB-Format Block</td>
<td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.89</td></tr>
<tr><td scope="row" class='awrc'>TX-Transaction (index contention)</td>
<td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.00</td></tr>
<tr><td scope="row" class='awrnc'>DW-In memory Dispenser</td>
<td align="right" class='awrnc'>187</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>172</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.33</td></tr>
<tr><td scope="row" class='awrc'>TO-Temp Object</td>
<td align="right" class='awrc'>69</td><td align="right" class='awrc'>69</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.50</td></tr>
<tr><td scope="row" class='awrnc'>TA-Instance Undo</td>
<td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.50</td></tr>
<tr><td scope="row" class='awrc'>MW-MWIN Schedule</td>
<td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>TD-KTF map table enqueue (KTF dump entries)</td>
<td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>JG-Job Scheduler1</td>
<td align="right" class='awrc'>3,003</td><td align="right" class='awrc'>3,003</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JG-Job Scheduler1 (queue lock)</td>
<td align="right" class='awrnc'>3,003</td><td align="right" class='awrnc'>3,003</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TX-Transaction</td>
<td align="right" class='awrc'>2,122</td><td align="right" class='awrc'>2,097</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SJ-KTSJ Slave Task Cancel (Slave Task Cancel)</td>
<td align="right" class='awrnc'>717</td><td align="right" class='awrnc'>716</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CU-Cursor</td>
<td align="right" class='awrc'>428</td><td align="right" class='awrc'>428</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JG-Job Scheduler1 (q mem clnup lck)</td>
<td align="right" class='awrnc'>286</td><td align="right" class='awrnc'>286</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DD-ASM Local Disk Group</td>
<td align="right" class='awrc'>239</td><td align="right" class='awrc'>239</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TT-Tablespace</td>
<td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>166</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MR-Media Recovery</td>
<td align="right" class='awrc'>162</td><td align="right" class='awrc'>162</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>BU-Buddy Instance Context (recovery set construct)</td>
<td align="right" class='awrnc'>79</td><td align="right" class='awrnc'>79</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IS-Instance State</td>
<td align="right" class='awrc'>59</td><td align="right" class='awrc'>59</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SE-Session Migration</td>
<td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SH-Active Session History Flushing</td>
<td align="right" class='awrc'>17</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DA-Instance DP Array (Slave Process Array)</td>
<td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PW-Buffer Cache PreWarm (flush prewarm buffers)</td>
<td align="right" class='awrc'>15</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>XR-Quiesce / Force Logging (database force logging)</td>
<td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AF-Advisor Framework (task serialization)</td>
<td align="right" class='awrc'>13</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQ-Sequence Cache</td>
<td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TH-Threshold Chain (metric threshold evaluation)</td>
<td align="right" class='awrc'>12</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PR-Process Startup</td>
<td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AE-Edition Lock (lock)</td>
<td align="right" class='awrc'>5</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IT-In-Mem Temp Table Meta Creation</td>
<td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PV-KSV slave startup (syncstart)</td>
<td align="right" class='awrc'>4</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DR-Distributed Recovery</td>
<td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>FP-File Object (global fob contention)</td>
<td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>RS-Reclaimable Space (read alert level)</td>
<td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XL-ASM Extent Fault Lock (fault extent map)</td>
<td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#27">Back to Wait Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="28"></a>
<h2 class="awr">
Undo Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#3300">Undo Segment Summary</a></li>
<li class="awr"><a class="awr" href="#3400">Undo Segment Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3300"></a>
<h3 class="awr">Undo Segment Summary</h3>
<ul>
<li class="awr"> Min/Max TR (mins) - Min and Max Tuned Retention (minutes) </li>
<li class="awr"> STO - Snapshot Too Old count,	OOS - Out of Space count </li>
<li class="awr"> Undo segment block stats: </li>
<li class="awr"> uS - unexpired Stolen,   uR - unexpired Released,   uU - unexpired reUsed </li>
<li class="awr"> eS - expired	Stolen,   eR - expired	 Released,   eU - expired   reUsed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays undo segment summary. It displays undo tablespace number, number of undo blocks, number of transactions, max query length, etc."><tr><th class="awrbg" scope="col">Undo TS#</th><th class="awrbg" scope="col">Num Undo Blocks (K)</th><th class="awrbg" scope="col">Number of Transactions</th><th class="awrbg" scope="col">Max Qry Len (s)</th><th class="awrbg" scope="col">Max Tx Concurcy</th><th class="awrbg" scope="col">Min/Max TR (mins)</th><th class="awrbg" scope="col">STO/ OOS</th><th class="awrbg" scope="col">	uS/uR/uU/    eS/eR/eU</th></tr>
<tr><td align="right" scope="row" class='awrc'>5</td><td align="right" class='awrc'>0.54</td><td align="right" class='awrc'>520</td><td align="right" class='awrc'>324</td><td align="right" class='awrc'>4</td><td class='awrc'>19.8/19.8</td><td class='awrc'>0/0</td><td class='awrc'>0/0/0/0/0/0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#28">Back to Undo Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3400"></a>
<h3 class="awr">Undo Segment Stats</h3>
<ul>
<li class="awr"> Most recent 35 Undostat rows, ordered by Time desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the 35 most recent Undostat rows."><tr><th class="awrbg" scope="col">End Time</th><th class="awrbg" scope="col">Num Undo Blocks</th><th class="awrbg" scope="col">Number of Transactions</th><th class="awrbg" scope="col">Max Qry Len (s)</th><th class="awrbg" scope="col">Max Tx Concy</th><th class="awrbg" scope="col">Tun Ret (mins)</th><th class="awrbg" scope="col">STO/ OOS</th><th class="awrbg" scope="col">  uS/uR/uU/   eS/eR/eU</th></tr>
<tr><td scope="row" class='awrc'>20-Feb 21:41</td><td align="right" class='awrc'>537</td><td align="right" class='awrc'>520</td><td align="right" class='awrc'>324</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>20</td><td class='awrc'>0/0</td><td class='awrc'>0/0/0/0/0/0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#28">Back to Undo Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="29"></a>
<h2 class="awr">
Latch Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#3500">Latch Activity</a></li>
<li class="awr"><a class="awr" href="#3600">Latch Sleep Breakdown</a></li>
<li class="awr"><a class="awr" href="#3700">Latch Miss Sources</a></li>
<li class="awr"><a class="awr" href="#7500">Mutex Sleep Summary</a></li>
<li class="awr"><a class="awr" href="#3800">Parent Latch Statistics</a></li>
<li class="awr"><a class="awr" href="#3900">Child Latch Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3500"></a>
<h3 class="awr">Latch Activity</h3>
<ul>
<li class="awr"> &quot;Get Requests&quot;, &quot;Pct Get Miss&quot; and &quot;Avg Slps/Miss&quot; are statistics for	 willing-to-wait latch get requests </li>
<li class="awr"> &quot;NoWait Requests&quot;, &quot;Pct NoWait Miss&quot; are for no-wait latch get requests </li>
<li class="awr"> &quot;Pct Misses&quot; for both should be very close to 0.0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch statistics. Get requests, % get miss, wait time, noWait requests are displayed for each latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Get Miss</th><th class="awrbg" scope="col">Avg Slps /Miss</th><th class="awrbg" scope="col">Wait Time (s)</th><th class="awrbg" scope="col">NoWait Requests</th><th class="awrbg" scope="col">Pct NoWait Miss</th></tr>
<tr><td scope="row" class='awrc'>AQ Background: interrupt command latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>AQ Coord jobx_kwsbgsgn latch</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ Message drive state object latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQ Sharded master pool latch</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ deq hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM Keyed state latch</td><td align="right" class='awrnc'>260</td><td align="right" class='awrnc'>0.77</td><td align="right" class='awrnc'>0.50</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM allocation</td><td align="right" class='awrc'>43,013</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM connection state latch</td><td align="right" class='awrnc'>3,253</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM db client latch</td><td align="right" class='awrc'>682</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM map headers</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM map load waiting list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM map operation freelist</td><td align="right" class='awrnc'>18,422</td><td align="right" class='awrnc'>5.12</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM map operation hash table</td><td align="right" class='awrc'>71,907,065</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM network background latch</td><td align="right" class='awrnc'>3,800</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM network state latch</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM remote client latch</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AWR Alerted Metric Element list</td><td align="right" class='awrc'>10,761</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Autotask management</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Change Notification Hash table latch</td><td align="right" class='awrc'>327</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Column stats entry latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Consistent RBA</td><td align="right" class='awrc'>1,133</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DML lock allocation</td><td align="right" class='awrnc'>4,364</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Event Group Locks</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>FIB s.o chain latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>FOB consolidated s.o list latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>File State Object Pool Parent Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCS logfile block</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCS logfile write queue</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Hang Manager wait event statistics</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8,713</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>I/O Staticstics latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ILM Stats Stripe Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ILM Stats main anchor latch</td><td align="right" class='awrnc'>821</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ILM access tracking extent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ILM activity tracking latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM Global dictionary latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM Global dictionary queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM Global dictionary rw latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM area sb latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM area scb latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM emb latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM seg hdr latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMFS defer write list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMXT hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC other latch</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC stats buffer allocation latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>In memory undo latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS Sh mem access</td><td align="right" class='awrc'>148</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS broadcast add buf latch</td><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS broadcast drop buf latch</td><td align="right" class='awrc'>168</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS broadcast load blnc latch</td><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS mem alloc latch</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS queue access latch</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS queue state obj latch</td><td align="right" class='awrc'>6,174</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS slv state obj latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KCNIBR - invalid block range tree</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDCStatHash latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDFI Buffer Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDFI Hash Bucket Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDFI Hash Elem Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDMADO action list latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDMADO bll latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDMADO latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFC FX Hash Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFC Hash Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFCL LE Freelist</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS client latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS cluster latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS endpoint latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS node latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS process latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFK SGA Libload latch</td><td align="right" class='awrnc'>6,910</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFMD SGA</td><td align="right" class='awrc'>425</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KGNFS-NFS:SHM structure</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KGNFS-NFS:SVR LIST</td><td align="right" class='awrc'>248</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJC message pool KGH calls</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJC message pool free list</td><td align="right" class='awrc'>1,958,748</td><td align="right" class='awrc'>0.79</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,163,358</td><td align="right" class='awrc'>1.13</td></tr>
<tr><td scope="row" class='awrnc'>KJC message pool pending avail list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJCT flow control latch</td><td align="right" class='awrc'>8,664,801</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KMG MMAN ready and startup request latch</td><td align="right" class='awrnc'>247</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS OFS ctx level parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS OFS req layer parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS OFS sess layer parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS Receive and Send Queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS id table parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS ksfs_node latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFSD name cache parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSGL LS Segment latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSGL SGA anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSIPC ASPC anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSIPC SGA allocation parent latch</td><td align="right" class='awrc'>1,024</td><td align="right" class='awrc'>0.49</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSIPCGSN Hash Table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSIPCGSN Namespace latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSK PDB IO STAT</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSRMA SGA anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSRMF SGA anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSWL SGA anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSXR hang analysis phase 1 latch</td><td align="right" class='awrnc'>83</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KSXR hang analysis phase 2 latch</td><td align="right" class='awrc'>360</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSXR large replies</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KTF sga latch</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>224</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTILM latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KTU in-memory txn table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KTURMA ODPSCN latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KTURMA SGA allocation parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KWQMN job cache list latch</td><td align="right" class='awrnc'>104</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Latch for NonceHistory</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Locator state objects pool parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Lost write change tracking</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Lsod array latch</td><td align="right" class='awrnc'>328</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MGA asr alloc latch</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MGA heap latch</td><td align="right" class='awrnc'>530</td><td align="right" class='awrnc'>38.68</td><td align="right" class='awrnc'>2.35</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MGA shared context latch</td><td align="right" class='awrc'>4,625</td><td align="right" class='awrc'>6.90</td><td align="right" class='awrc'>1.66</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MGA shared context root latch</td><td align="right" class='awrnc'>530</td><td align="right" class='awrnc'>45.66</td><td align="right" class='awrnc'>6.45</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MQL Tracking Latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Memory Management Latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>247</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Message Subscriber #1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Message Subscriber #2</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Message Subscriber #3</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Message Subscriber #4</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Subscriber</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Message cache latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MinActiveScn Latch</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Mutex</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Mutex Stats</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Nologging Standby SCN Time Map cache</td><td align="right" class='awrc'>220</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OS process</td><td align="right" class='awrnc'>1,786</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>OS process allocation</td><td align="right" class='awrc'>1,759</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OS process: request allocation</td><td align="right" class='awrnc'>259</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PDB Hash Table Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PDB LRU structure</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PL/SQL warning settings</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX hash array latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Parent latch for dependency tracking</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parent latch for query hash table access</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Parent latch for segments scanning</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>QMT</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Real-time descriptor latch</td><td align="right" class='awrc'>35,118</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Report Request stats latch</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Report Request struct latch</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Request holder compeltion list latch</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Retry Ht elm latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Retry bkt latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA Blackbox latch</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA IO buffer pool latch</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SGA Logging Bkt Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA Logging Log Latch</td><td align="right" class='awrnc'>32,869</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA blob parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA bucket locks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA heap locks</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA pool locks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SO private so latch</td><td align="right" class='awrc'>704</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL memory manager latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>246</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SQL memory manager workarea list latch</td><td align="right" class='awrc'>33,734</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SR Stats Stripe Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sched IM Job latch</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sched InMem Job Cache</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Shared B-Tree</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Streams Generic</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Subscriber Ht elm latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Testing</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Token Manager</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Txn Ht elm latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Txn bkt latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>UM object latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>WCR: sync</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write State Object Pool Parent Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>X$KSFQP</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>XDB NFS Security Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XDB unused session pool</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>XDB used session pool</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>active checkpoint queue latch</td><td align="right" class='awrc'>10,230</td><td align="right" class='awrc'>4.59</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>active service list</td><td align="right" class='awrnc'>3,974</td><td align="right" class='awrnc'>0.50</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>777</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>archive destination</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>begin backup scn array</td><td align="right" class='awrnc'>110</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer pool</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>business card</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cache buffer handles</td><td align="right" class='awrc'>102</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cache buffers chains</td><td align="right" class='awrnc'>2,608,602,603</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>70,930,594</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>cache buffers lru chain</td><td align="right" class='awrc'>14,282,824</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>35,992,452</td><td align="right" class='awrc'>0.46</td></tr>
<tr><td scope="row" class='awrnc'>cache table scan latch</td><td align="right" class='awrnc'>243</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>243</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>call allocation</td><td align="right" class='awrc'>2,002</td><td align="right" class='awrc'>4.60</td><td align="right" class='awrc'>1.25</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>change notification client cache latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>channel handle pool latch</td><td align="right" class='awrc'>524</td><td align="right" class='awrc'>0.95</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>channel operations parent latch</td><td align="right" class='awrnc'>2,980</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>checkpoint queue latch</td><td align="right" class='awrc'>389,683</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,787</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>client/application info</td><td align="right" class='awrnc'>297</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>compile environment latch</td><td align="right" class='awrc'>56</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp handoff latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp pool latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp server hash latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp sga latch</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp srv type state latch</td><td align="right" class='awrnc'>742</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp srv type wait latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cr slave free list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cvmap freelist lock</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>deferred cleanup latch</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dispatcher info</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dml lock allocation</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>done queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dtp latch</td><td align="right" class='awrnc'>258</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dummy allocation</td><td align="right" class='awrc'>332</td><td align="right" class='awrc'>0.60</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>eighth spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>eleventh spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enqueue freelist latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>22,162</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enqueue hash chains</td><td align="right" class='awrc'>39,617</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>191</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enqueues</td><td align="right" class='awrnc'>248</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>error message lists</td><td align="right" class='awrc'>68</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fast space usage latch</td><td align="right" class='awrnc'>86</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>fifteenth spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>file cache latch</td><td align="right" class='awrnc'>146</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>first Audit Vault latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>flash file access latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>flashback copy</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fourteenth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>fourth Audit Vault latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc element</td><td align="right" class='awrnc'>53,445,494</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3,408,003</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>gc imc list</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc xid list</td><td align="right" class='awrnc'>170</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcr global ctx</td><td align="right" class='awrc'>103</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs affinity object freelist latch</td><td align="right" class='awrnc'>81</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs commit scn state</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs nodemap pool</td><td align="right" class='awrnc'>1,739</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs opaque info freelist</td><td align="right" class='awrc'>6,563</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs partitioned table hash</td><td align="right" class='awrnc'>51,017,669</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>22,125,068</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs pcm hashed value bucket hash</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remaster request queue</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs remastering latch</td><td align="right" class='awrc'>41,835</td><td align="right" class='awrc'>0.43</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource freelist</td><td align="right" class='awrnc'>18,008,774</td><td align="right" class='awrnc'>0.28</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6,783,458</td><td align="right" class='awrnc'>0.32</td></tr>
<tr><td scope="row" class='awrc'>gcs resource hash</td><td align="right" class='awrc'>78,687,223</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>21,855</td><td align="right" class='awrc'>0.44</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource scan list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs resource timerq list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource validate list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs shadows freelist</td><td align="right" class='awrc'>11,191,670</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges cached resource lists</td><td align="right" class='awrnc'>41,041</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>54,123</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ges deadlock list</td><td align="right" class='awrc'>2,060</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges domain table</td><td align="right" class='awrnc'>97,627</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges enqueue table freelist</td><td align="right" class='awrc'>6,839</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges group table</td><td align="right" class='awrnc'>97,920</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges process hash list</td><td align="right" class='awrc'>22,341</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges process parent latch</td><td align="right" class='awrnc'>198,918</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges process table freelist</td><td align="right" class='awrc'>259</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges remote lock freelist</td><td align="right" class='awrnc'>1,463</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges resource hash list</td><td align="right" class='awrc'>150,037</td><td align="right" class='awrc'>0.66</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7,566</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges resource scan list</td><td align="right" class='awrnc'>51</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges resource table freelist</td><td align="right" class='awrc'>13,685</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges s-lock bitvec freelist</td><td align="right" class='awrnc'>760</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges timeout list</td><td align="right" class='awrc'>2,079</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>204</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges value block free list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>global KZLD latch for auth type mem in SGA</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>global tx hash mapping</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>granule from data transfer cache</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gws:Sharding global descriptor latch</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hash table Sql Plan Finding latch</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>hash table column usage latch</td><td align="right" class='awrnc'>671</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>33,129</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>hash table expression usage tracking latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hash table modification latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hash table sql contorl latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>heartbeat check</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>706</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>heartbeat structure management</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>371</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>imc buf hdl lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc cr clone buf</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc hash lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc sj lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc srchsp lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc-txn-wrk-lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>in-memory area latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>in-memory columnar segment hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>in-memory columnar ts extent map chunk latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>in-memory global pool latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>internal temp table object number allocation latch</td><td align="right" class='awrnc'>133</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>interrupt manipulation</td><td align="right" class='awrc'>162</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>intra txn parallel recovery</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>io pool granule list</td><td align="right" class='awrc'>172</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>io pool granule metadata list</td><td align="right" class='awrnc'>346</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>job workq parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>job_queue_processes parameter latch</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>k2q global data latch</td><td align="right" class='awrc'>494</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>k2q lock allocation</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kKCN Cqn SGA</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kcb DW scan objtemp hash table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kcn buffer chains</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kdlx hb parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kgb parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kgnfs mount latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjbr roi instance map</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjci objects freelist latch</td><td align="right" class='awrnc'>23,835</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjci process context latch</td><td align="right" class='awrc'>20,193</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14,015</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>kjci process list latch</td><td align="right" class='awrnc'>9,445</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjci request sequence latch</td><td align="right" class='awrc'>2,674</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjcipctx state object freelist latch</td><td align="right" class='awrnc'>202</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjoedcso state object freelist latch</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjoeq omni enqueue hash bucket latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjoer owner hash bucket</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjpm my inst data</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsc Request obj freelist latch</td><td align="right" class='awrc'>524</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsc Ring Buffer obj freelist latch</td><td align="right" class='awrnc'>262</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsc protect control request queue</td><td align="right" class='awrc'>262</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7,525</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>kjsc protect warm up context</td><td align="right" class='awrnc'>136</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsca protect pkey hash table bucket</td><td align="right" class='awrc'>3,668</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsca protect service hash table bucket</td><td align="right" class='awrnc'>3,859</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjscpss state object freelist latch</td><td align="right" class='awrc'>262</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kokc descriptor allocation latch</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kpoxft latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>226</td><td align="right" class='awrc'>7.08</td></tr>
<tr><td scope="row" class='awrnc'>krso process</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksevn object root latch</td><td align="right" class='awrc'>247</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksfv messages</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksi resource reuse count</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksim group membership cache</td><td align="right" class='awrnc'>1,411</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksim membership request latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>329</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ksns object latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kss move lock</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksuosstats global area</td><td align="right" class='awrnc'>58</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>281</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ksutcpistat latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksv allocation latch</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksv class latch</td><td align="right" class='awrc'>16,615</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksv instance latch</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksv msg queue latch</td><td align="right" class='awrc'>113</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>112</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ksxp shared latch</td><td align="right" class='awrnc'>259</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksxp so latch</td><td align="right" class='awrc'>259</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksz_so allocation latch</td><td align="right" class='awrnc'>259</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktfbn latch</td><td align="right" class='awrc'>131</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg jrnls</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg lookuptable level 1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg lookuptable level 2</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg space</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg stages</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg worklink</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm global data</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm prv jrnls</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktmpj HT ls</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwqbsn:qsga</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwslbmdl: metadata latch</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwslbql: queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwslbutl: uncommitted txn latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwsptQcachLt: queue cache latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwsptTrncTsksLt: trunc task latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwsptjobAdPtLt: AdPt list latch</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwsslLat: skiplist latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kxfxscanrate_latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lgwr LWN SCN</td><td align="right" class='awrnc'>1,334</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>list of block allocation</td><td align="right" class='awrc'>247</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>loader state object freelist</td><td align="right" class='awrnc'>174</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lob segment dispenser latch</td><td align="right" class='awrc'>212</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lob segment hash table latch</td><td align="right" class='awrnc'>746</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lob segment query latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lock DBA buffer during media recovery</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log write info</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,190</td><td align="right" class='awrc'>0.84</td></tr>
<tr><td scope="row" class='awrnc'>log write worker phase</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>logical standby cache</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>logminer context allocation</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>logminer local</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>logminer work area</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>longop free list parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>managed standby</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>message bitmap latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>message pool operations parent latch</td><td align="right" class='awrnc'>930</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>messages</td><td align="right" class='awrc'>74,217</td><td align="right" class='awrc'>8.62</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>msg queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>multiblock read objects</td><td align="right" class='awrc'>1,117,323</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service memory objects</td><td align="right" class='awrnc'>184</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service namespace bucket</td><td align="right" class='awrc'>4,183</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service pending queue</td><td align="right" class='awrnc'>90</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service request</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service request queue</td><td align="right" class='awrnc'>7,652</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ncodef allocation latch</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ninth spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>object queue header freelist</td><td align="right" class='awrc'>201,076</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>object queue header operation</td><td align="right" class='awrnc'>72,013,869</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>573,059</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>object queue memory</td><td align="right" class='awrc'>149</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>object stats modification</td><td align="right" class='awrnc'>257</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>parallel query alloc buffer</td><td align="right" class='awrc'>353</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,760</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parallel query stats</td><td align="right" class='awrnc'>78</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>parallel txn reco latch</td><td align="right" class='awrc'>136</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parameter table management</td><td align="right" class='awrnc'>690</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pdb enqueue hash chains</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>peshm</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pesom_free_list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pesom_hash_node</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pkey global statistics</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pmon dead latch</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>post/wait queue</td><td align="right" class='awrc'>96,374</td><td align="right" class='awrc'>0.22</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>96,379</td><td align="right" class='awrc'>0.33</td></tr>
<tr><td scope="row" class='awrnc'>process allocation</td><td align="right" class='awrnc'>3,896</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process group creation</td><td align="right" class='awrc'>259</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process memory detail</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process pkey statistics list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process queue</td><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process queue reference</td><td align="right" class='awrc'>6,861</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,339</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>qmn task queue latch</td><td align="right" class='awrnc'>104</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>quarantine object</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>query server freelists</td><td align="right" class='awrnc'>173</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>query server process</td><td align="right" class='awrc'>548</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>queued dump request</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>queuing load statistics</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>read-moslty lock queue under pkey</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>recovery domain hash bucket</td><td align="right" class='awrc'>1,040</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>redo allocation</td><td align="right" class='awrnc'>11,809</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>17,792</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>redo copy</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>17,794</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>redo transport task</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>redo writing</td><td align="right" class='awrc'>13,718</td><td align="right" class='awrc'>1.31</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remote tool request latch</td><td align="right" class='awrnc'>287</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr group change latch</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:active threads</td><td align="right" class='awrnc'>335</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>resmgr:actses change group</td><td align="right" class='awrc'>41</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:actses change state</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:free threads list</td><td align="right" class='awrc'>331</td><td align="right" class='awrc'>1.51</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:plan CPU method</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:plan change alloc latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:plan change latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:resource group CPU method</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:schema config</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>resmgr:session queuing</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>row cache objects</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>rt rmv count latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>371</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>second Audit Vault latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>segmented array pool</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sequence cache</td><td align="right" class='awrnc'>437</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>service drain list</td><td align="right" class='awrc'>741</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session allocation</td><td align="right" class='awrnc'>1,106</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>526</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>session idle bit</td><td align="right" class='awrc'>4,833</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session state list latch</td><td align="right" class='awrc'>339</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session statistics</td><td align="right" class='awrnc'>333</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session switching</td><td align="right" class='awrc'>270</td><td align="right" class='awrc'>4.44</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session timer</td><td align="right" class='awrnc'>247</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>seventh spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sga hash table parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shard latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shardgroup list latch</td><td align="right" class='awrnc'>529</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shared pool</td><td align="right" class='awrc'>96,748</td><td align="right" class='awrc'>1.21</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>98</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>shared pool sim alloc</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shared pool simulator</td><td align="right" class='awrc'>1,552</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shared server configuration</td><td align="right" class='awrnc'>247</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sim partition latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>simulator hash latch</td><td align="right" class='awrnc'>83,512,424</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>simulator lru latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>79,989,245</td><td align="right" class='awrc'>0.20</td></tr>
<tr><td scope="row" class='awrnc'>sixth spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sort extent pool</td><td align="right" class='awrc'>725</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>space background task latch</td><td align="right" class='awrnc'>2,686</td><td align="right" class='awrnc'>50.67</td><td align="right" class='awrnc'>0.94</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>480</td><td align="right" class='awrnc'>9.58</td></tr>
<tr><td scope="row" class='awrc'>state object free list</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>statistics aggregation</td><td align="right" class='awrnc'>145</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>subscriber Ht bkt</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>tablespace key chain</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>temp lob duration state obj allocation</td><td align="right" class='awrc'>112</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>temporary table state object allocation</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>tenth spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test excl. parent l0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test excl. parent2 l0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test excl. parent2 lmid cln</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test mixed exclusive</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test mode exclusive</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test open exclusive</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test pdb exclusive</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test shared parent2 lmid</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>thirteenth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>threshold alerts latch</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>transaction allocation</td><td align="right" class='awrnc'>633</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twelfth spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-fifth spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-first spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-fourth spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-second spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-third spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>undo global data</td><td align="right" class='awrc'>7,576</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>virtual circuit buffers</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>virtual circuit holder</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>virtual circuit queues</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3600"></a>
<h3 class="awr">Latch Sleep Breakdown</h3>
<ul>
<li class="awr"> ordered by misses desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch sleep statistics. Get requests, misses, sleeps, spin gets are displayed for each latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Misses</th><th class="awrbg" scope="col">Sleeps</th><th class="awrbg" scope="col">Spin Gets</th></tr>
<tr><td scope="row" class='awrc'>cache buffers chains</td><td align="right" class='awrc'>2,608,602,603</td><td align="right" class='awrc'>77,221</td><td align="right" class='awrc'>13,494</td><td align="right" class='awrc'>67,590</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource freelist</td><td align="right" class='awrnc'>18,008,774</td><td align="right" class='awrnc'>50,927</td><td align="right" class='awrnc'>1,117</td><td align="right" class='awrnc'>49,910</td></tr>
<tr><td scope="row" class='awrc'>gc element</td><td align="right" class='awrc'>53,445,494</td><td align="right" class='awrc'>31,362</td><td align="right" class='awrc'>2,714</td><td align="right" class='awrc'>28,993</td></tr>
<tr><td scope="row" class='awrnc'>cache buffers lru chain</td><td align="right" class='awrnc'>14,282,824</td><td align="right" class='awrnc'>28,432</td><td align="right" class='awrnc'>697</td><td align="right" class='awrnc'>27,775</td></tr>
<tr><td scope="row" class='awrc'>KJC message pool free list</td><td align="right" class='awrc'>1,958,748</td><td align="right" class='awrc'>15,450</td><td align="right" class='awrc'>1,077</td><td align="right" class='awrc'>14,485</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource hash</td><td align="right" class='awrnc'>78,687,223</td><td align="right" class='awrnc'>12,559</td><td align="right" class='awrnc'>1,000</td><td align="right" class='awrnc'>11,651</td></tr>
<tr><td scope="row" class='awrc'>messages</td><td align="right" class='awrc'>74,217</td><td align="right" class='awrc'>6,398</td><td align="right" class='awrc'>90</td><td align="right" class='awrc'>6,309</td></tr>
<tr><td scope="row" class='awrnc'>ASM map operation hash table</td><td align="right" class='awrnc'>71,907,065</td><td align="right" class='awrnc'>4,986</td><td align="right" class='awrnc'>351</td><td align="right" class='awrnc'>4,678</td></tr>
<tr><td scope="row" class='awrc'>KJCT flow control latch</td><td align="right" class='awrc'>8,664,801</td><td align="right" class='awrc'>3,661</td><td align="right" class='awrc'>114</td><td align="right" class='awrc'>3,558</td></tr>
<tr><td scope="row" class='awrnc'>space background task latch</td><td align="right" class='awrnc'>2,686</td><td align="right" class='awrnc'>1,361</td><td align="right" class='awrnc'>1,286</td><td align="right" class='awrnc'>264</td></tr>
<tr><td scope="row" class='awrc'>multiblock read objects</td><td align="right" class='awrc'>1,117,323</td><td align="right" class='awrc'>1,213</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>1,156</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>96,748</td><td align="right" class='awrnc'>1,170</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>1,144</td></tr>
<tr><td scope="row" class='awrc'>ges resource hash list</td><td align="right" class='awrc'>150,037</td><td align="right" class='awrc'>987</td><td align="right" class='awrc'>266</td><td align="right" class='awrc'>826</td></tr>
<tr><td scope="row" class='awrnc'>ASM map operation freelist</td><td align="right" class='awrnc'>18,422</td><td align="right" class='awrnc'>943</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>933</td></tr>
<tr><td scope="row" class='awrc'>simulator hash latch</td><td align="right" class='awrc'>83,512,424</td><td align="right" class='awrc'>538</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>525</td></tr>
<tr><td scope="row" class='awrnc'>active checkpoint queue latch</td><td align="right" class='awrnc'>10,230</td><td align="right" class='awrnc'>470</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>452</td></tr>
<tr><td scope="row" class='awrc'>MGA shared context latch</td><td align="right" class='awrc'>4,625</td><td align="right" class='awrc'>319</td><td align="right" class='awrc'>530</td><td align="right" class='awrc'>11</td></tr>
<tr><td scope="row" class='awrnc'>object queue header operation</td><td align="right" class='awrnc'>72,013,869</td><td align="right" class='awrnc'>294</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>248</td></tr>
<tr><td scope="row" class='awrc'>MGA shared context root latch</td><td align="right" class='awrc'>530</td><td align="right" class='awrc'>242</td><td align="right" class='awrc'>1,561</td><td align="right" class='awrc'>15</td></tr>
<tr><td scope="row" class='awrnc'>post/wait queue</td><td align="right" class='awrnc'>96,374</td><td align="right" class='awrnc'>214</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>212</td></tr>
<tr><td scope="row" class='awrc'>MGA heap latch</td><td align="right" class='awrc'>530</td><td align="right" class='awrc'>205</td><td align="right" class='awrc'>482</td><td align="right" class='awrc'>86</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering latch</td><td align="right" class='awrnc'>41,835</td><td align="right" class='awrnc'>181</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>142</td></tr>
<tr><td scope="row" class='awrc'>call allocation</td><td align="right" class='awrc'>2,002</td><td align="right" class='awrc'>92</td><td align="right" class='awrc'>115</td><td align="right" class='awrc'>44</td></tr>
<tr><td scope="row" class='awrnc'>kjci process context latch</td><td align="right" class='awrnc'>20,193</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>49</td></tr>
<tr><td scope="row" class='awrc'>enqueue hash chains</td><td align="right" class='awrc'>39,617</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>37</td></tr>
<tr><td scope="row" class='awrnc'>ges cached resource lists</td><td align="right" class='awrnc'>41,041</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>16</td></tr>
<tr><td scope="row" class='awrc'>session switching</td><td align="right" class='awrc'>270</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>10</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:free threads list</td><td align="right" class='awrnc'>331</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>4</td></tr>
<tr><td scope="row" class='awrc'>ksv class latch</td><td align="right" class='awrc'>16,615</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td></tr>
<tr><td scope="row" class='awrnc'>ASM Keyed state latch</td><td align="right" class='awrnc'>260</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td scope="row" class='awrc'>resmgr:active threads</td><td align="right" class='awrc'>335</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3700"></a>
<h3 class="awr">Latch Miss Sources</h3>
<ul>
<li class="awr"> only latches with sleeps are shown </li>
<li class="awr"> ordered by name, sleeps desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch miss sources. Place where latch was requested, no-wait misses, sleeps, waiter sleeps are displayed for each missed latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Where</th><th class="awrbg" scope="col">NoWait Misses</th><th class="awrbg" scope="col">   Sleeps</th><th class="awrbg" scope="col">Waiter Sleeps</th></tr>
<tr><td class='awrc'>ASM Keyed state latch</td><td class='awrc'>kfksoClose</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>ASM map operation freelist</td><td class='awrnc'>kffmsoDelete_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>41</td><td align="right" class='awrnc'>42</td></tr>
<tr><td class='awrc'>ASM map operation freelist</td><td class='awrc'>kffmsoDelete_2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>ASM map operation hash table</td><td class='awrnc'>kffmTranslate</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>213</td><td align="right" class='awrnc'>185</td></tr>
<tr><td class='awrc'>ASM map operation hash table</td><td class='awrc'>kffmDoDone_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>138</td><td align="right" class='awrc'>166</td></tr>
<tr><td class='awrnc'>KJC message pool free list</td><td class='awrnc'>kjcsmpav: allocate a msg buffer</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>540</td><td align="right" class='awrnc'>1,073</td></tr>
<tr><td class='awrc'>KJC message pool free list</td><td class='awrc'>kjcspfmbq: free vector of msg buffers</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>533</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjctcsnd: send normal message</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>75</td><td align="right" class='awrnc'>68</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjcts_sedeqv3: dequeue a vector of msgs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>3</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjctr_updatetkt: update ticket info</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>21</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjcts_sqenq2: queue a message</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>40</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjcts_sqenq: queue a message</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>8</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjctr_releasetkt: change ticket allocation</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>MGA pid alloc latch</td><td class='awrnc'>ksm_mga_sctx_rtrcv_do_whr2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>269</td></tr>
<tr><td class='awrc'>MGA shared context latch</td><td class='awrc'>ksm_mga_detach_whr2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>345</td><td align="right" class='awrc'>151</td></tr>
<tr><td class='awrnc'>MGA shared context latch</td><td class='awrnc'>ksm_mga_sync_whr1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>172</td><td align="right" class='awrnc'>112</td></tr>
<tr><td class='awrc'>MGA shared context root latch</td><td class='awrc'>ksm_mga_detach_whr1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,543</td><td align="right" class='awrc'>1,547</td></tr>
<tr><td class='awrnc'>active checkpoint queue latch</td><td class='awrnc'>kcbbacq: scan active checkpoints</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>12</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzibmlt: multi-block read: nowait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14,775</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbzwb</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,076</td><td align="right" class='awrnc'>2,032</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzgb: scan from tail nowait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,860</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: slow path excl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,108</td><td align="right" class='awrnc'>349</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kclcls_3</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>651</td><td align="right" class='awrc'>103</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: fast path exam</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>419</td><td align="right" class='awrnc'>791</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzibmlt: finish free bufs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>278</td><td align="right" class='awrc'>209</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: convert latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>262</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgtcr: convert latch 4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>129</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: fast path pin</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>101</td><td align="right" class='awrnc'>14,950</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbrls: fast pin release</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>92</td><td align="right" class='awrc'>3,403</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclexpandlock</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>14</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzib: finish processing buffer</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>17</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: retry after read</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>2</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kclwcrs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>5</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclexpand_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgtcr: slow path shr</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbrls: fast pin exclusive</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kclrqchk</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>3</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbchg: aux pin</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbchg: change complete</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbchg: rollback</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgcur: fast path excl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgcur: slow path</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbnlc</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclcsr_2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbzgws</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>431</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbzgb_2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>264</td><td align="right" class='awrnc'>694</td></tr>
<tr><td class='awrc'>call allocation</td><td class='awrc'>ksuxds</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>111</td><td align="right" class='awrc'>104</td></tr>
<tr><td class='awrnc'>call allocation</td><td class='awrnc'>ksudlp: top call</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>11</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclnfndnewm</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,511</td><td align="right" class='awrc'>832</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclulb</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>526</td><td align="right" class='awrnc'>825</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>KCLUNLNK</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>380</td><td align="right" class='awrc'>822</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclnfndx</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>270</td><td align="right" class='awrnc'>413</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclplz</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>142</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclplz_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>61</td><td align="right" class='awrnc'>13</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclhngcbk1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclexpand_2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclchkping</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclnfndnew</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclcqchk</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclnfndnewby</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs remastering latch</td><td class='awrc'>kjfcdrmrfg end step</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs remastering latch</td><td class='awrnc'>kjxpdrmstart set buckets</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs remastering latch</td><td class='awrc'>previous rm finished</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource freelist</td><td class='awrnc'>kjbralc: check freelist nowait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>877</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs resource freelist</td><td class='awrc'>kjbrralc: reserve allocation</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>54</td></tr>
<tr><td class='awrnc'>gcs resource freelist</td><td class='awrnc'>kjbrfr_bg2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>74</td><td align="right" class='awrnc'>289</td></tr>
<tr><td class='awrc'>gcs resource freelist</td><td class='awrc'>kjbralc add resource</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>773</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbcropen</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>534</td><td align="right" class='awrnc'>263</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjblocalobj_nolock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>165</td><td align="right" class='awrc'>341</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbmpclose</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>84</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbmpopen</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>142</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbclose_remaster</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>61</td><td align="right" class='awrnc'>116</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbrrcfwst</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>46</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjblpast</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>49</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbrrcres_99</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbralc: reacquire</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbopen:affinity</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>3</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kclfwrite1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbcancel</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>ges cached resource lists</td><td class='awrnc'>kjruch: cached obj cleanup</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ges cached resource lists</td><td class='awrc'>kjrm2c: move resource to cache</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>3</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjrmas1: lookup master node</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>111</td><td align="right" class='awrnc'>45</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjlrlr: remove lock from resource queue</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>93</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjrref: find matched resource</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>127</td></tr>
<tr><td class='awrc'>kjci process context latch</td><td class='awrc'>kjci_finish_int:2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>7</td></tr>
<tr><td class='awrnc'>ksv class latch</td><td class='awrnc'>ksvclsl: checkpool</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>messages</td><td class='awrc'>ksarcv</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>32</td></tr>
<tr><td class='awrnc'>messages</td><td class='awrnc'>ksaamb: after wakeup</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>36</td></tr>
<tr><td class='awrc'>messages</td><td class='awrc'>ksarcv: after wait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>22</td></tr>
<tr><td class='awrnc'>multiblock read objects</td><td class='awrnc'>kcbzibmlt: normal mbr free</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>27</td></tr>
<tr><td class='awrc'>multiblock read objects</td><td class='awrc'>kcbzibmlt</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>33</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_unlink_q</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>51</td><td align="right" class='awrnc'>25</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_link_q</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>29</td></tr>
<tr><td class='awrnc'>post/wait queue</td><td class='awrnc'>ksliwat:remove</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td></tr>
<tr><td class='awrc'>resmgr:active threads</td><td class='awrc'>kgskmetricupd</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>resmgr:free threads list</td><td class='awrnc'>kskthrsod</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>session switching</td><td class='awrc'>kskexeall</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>3</td></tr>
<tr><td class='awrnc'>simulator hash latch</td><td class='awrnc'>kcbsacc: lookup dba</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>16</td></tr>
<tr><td class='awrc'>simulator hash latch</td><td class='awrc'>kcbsacc: insert dba</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>space background task latch</td><td class='awrnc'>ktsj_grab_task</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>906</td><td align="right" class='awrnc'>1,109</td></tr>
<tr><td class='awrc'>space background task latch</td><td class='awrc'>ktsj_detach_task</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>184</td><td align="right" class='awrc'>177</td></tr>
<tr><td class='awrnc'>space background task latch</td><td class='awrnc'>ktsj_smco_purgeexpired</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>180</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>space background task latch</td><td class='awrc'>ktsjCreateTask</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>space background task latch</td><td class='awrnc'>ktsj_smco_movetasks</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>kghfre</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>515</td><td align="right" class='awrc'>509</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>kghupr1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>12</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>ksqrcl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>4</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>kghfrunp: no latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>ksqcmi: if lk mode not requested</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>kghalo</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>2</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7500"></a>
<h3 class="awr">Mutex Sleep Summary</h3>
<ul>
<li class="awr"> ordered by number of sleeps desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the mutex sleep summary. Location, sleeps and wait time are displayed for each mutex type"><tr><th class="awrbg" scope="col">Mutex Type</th><th class="awrbg" scope="col">Location</th><th class="awrbg" scope="col">Sleeps</th><th class="awrbg" scope="col">Wait    Time (ms)</th></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kglhdgh1  64</td><td align="right" class='awrc'>4,622</td><td align="right" class='awrc'>2,759</td></tr>
<tr><td class='awrnc'>Cursor Pin</td><td class='awrnc'>kksfbc [KKSCHLFSP2]</td><td align="right" class='awrnc'>378</td><td align="right" class='awrnc'>415</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kgllkdl1  85</td><td align="right" class='awrc'>291</td><td align="right" class='awrc'>108</td></tr>
<tr><td class='awrnc'>Cursor Pin</td><td class='awrnc'>kksLockDelete [KKSCHLPIN6]</td><td align="right" class='awrnc'>120</td><td align="right" class='awrnc'>134</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kglpndl1  95</td><td align="right" class='awrc'>110</td><td align="right" class='awrc'>169</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kglhdgh3     161</td><td align="right" class='awrnc'>104</td><td align="right" class='awrnc'>29</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kglpin1   4</td><td align="right" class='awrc'>94</td><td align="right" class='awrc'>111</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kglhdgn2 106</td><td align="right" class='awrnc'>69</td><td align="right" class='awrnc'>30</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kglget2   2</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>176</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kglpnal2  91</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>25</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kgllkc1   57</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>Row Cache</td><td class='awrnc'>[19] kqrpre</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>21</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kglpnal1  90</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>21</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kglhdgn1  62</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>31</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kglnti1   46</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>10</td></tr>
<tr><td class='awrnc'>Row Cache</td><td class='awrnc'>[16] kqrReadFromDB</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>Row Cache</td><td class='awrc'>[06] kqrGetClusterLock</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>Row Cache</td><td class='awrnc'>[10] kqreqd</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kgldtin1  42</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3800"></a>
<h3 class="awr">Parent Latch Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3900"></a>
<h3 class="awr">Child Latch Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="30"></a>
<h2 class="awr">
Segment Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4000">Segments by Logical Reads</a></li>
<li class="awr"><a class="awr" href="#4100">Segments by Physical Reads</a></li>
<li class="awr"><a class="awr" href="#4104">Segments by Physical Read Requests</a></li>
<li class="awr"><a class="awr" href="#4108">Segments by UnOptimized Reads</a></li>
<li class="awr"><a class="awr" href="#4106">Segments by Optimized Reads</a></li>
<li class="awr"><a class="awr" href="#4110">Segments by Direct Physical Reads</a></li>
<li class="awr"><a class="awr" href="#4120">Segments by Physical Writes</a></li>
<li class="awr"><a class="awr" href="#4124">Segments by Physical Write Requests</a></li>
<li class="awr"><a class="awr" href="#4130">Segments by Direct Physical Writes</a></li>
<li class="awr"><a class="awr" href="#4140">Segments by Table Scans</a></li>
<li class="awr"><a class="awr" href="#4150">Segments by DB Blocks Changes</a></li>
<li class="awr"><a class="awr" href="#4200">Segments by Row Lock Waits</a></li>
<li class="awr"><a class="awr" href="#4300">Segments by ITL Waits</a></li>
<li class="awr"><a class="awr" href="#4400">Segments by Buffer Busy Waits</a></li>
<li class="awr"><a class="awr" href="#4450">Segments by Global Cache Buffer Busy</a></li>
<li class="awr"><a class="awr" href="#4500">Segments by CR Blocks Received</a></li>
<li class="awr"><a class="awr" href="#4600">Segments by Current Blocks Received</a></li>
<li class="awr"><a class="awr" href="#4605">Segments by Global Cache Remote Grants</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4000"></a>
<h3 class="awr">Segments by Logical Reads</h3>
<ul>
<li class="awr">Total Logical Reads:   1,249,870,563</li>
<li class="awr">Captured Segments account for	93.5% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by logical reads. Owner, tablespace name, object type, logical read, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Logical Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER189</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80525</td><td align="right" class='awrc'>80548</td><td align="right" class='awrc'>358,679,440</td><td align="right" class='awrc'>28.70</td></tr>
<tr><td class='awrnc'>USER172</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80449</td><td align="right" class='awrnc'>80457</td><td align="right" class='awrnc'>311,152,208</td><td align="right" class='awrnc'>24.89</td></tr>
<tr><td class='awrc'>USER179</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80478</td><td align="right" class='awrc'>80487</td><td align="right" class='awrc'>289,512,528</td><td align="right" class='awrc'>23.16</td></tr>
<tr><td class='awrnc'>USER200</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80594</td><td align="right" class='awrnc'>80615</td><td align="right" class='awrnc'>152,950,896</td><td align="right" class='awrnc'>12.24</td></tr>
<tr><td class='awrc'>USER189</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>I_CF1</td><td class='awrc'>&#160;</td><td class='awrc'>INDEX</td><td align="right" class='awrc'>80574</td><td align="right" class='awrc'>80574</td><td align="right" class='awrc'>9,801,744</td><td align="right" class='awrc'>0.78</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4100"></a>
<h3 class="awr">Segments by Physical Reads</h3>
<ul>
<li class="awr">Total Physical Reads:	   35,572,455</li>
<li class="awr">Captured Segments account for	48.3% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical reads. Owner, tablespace name, object type, physical reads, etc. are displayed for each segment "><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	 Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER193</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80544</td><td align="right" class='awrc'>80563</td><td align="right" class='awrc'>573,205</td><td align="right" class='awrc'>1.61</td></tr>
<tr><td class='awrnc'>USER183</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80499</td><td align="right" class='awrnc'>80515</td><td align="right" class='awrnc'>571,907</td><td align="right" class='awrnc'>1.61</td></tr>
<tr><td class='awrc'>USER35</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>79780</td><td align="right" class='awrc'>79802</td><td align="right" class='awrc'>571,140</td><td align="right" class='awrc'>1.61</td></tr>
<tr><td class='awrnc'>USER1</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>79588</td><td align="right" class='awrnc'>79584</td><td align="right" class='awrnc'>569,492</td><td align="right" class='awrnc'>1.60</td></tr>
<tr><td class='awrc'>USER182</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80496</td><td align="right" class='awrc'>80501</td><td align="right" class='awrc'>569,146</td><td align="right" class='awrc'>1.60</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4104"></a>
<h3 class="awr">Segments by Physical Read Requests</h3>
<ul>
<li class="awr">Total Physical Read Requests:	   35,569,694</li>
<li class="awr">Captured Segments account for	48.2% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical read requests. Owner, tablespace name, object type, physical read requests, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Phys Read Requests</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER193</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80544</td><td align="right" class='awrc'>80563</td><td align="right" class='awrc'>573,205</td><td align="right" class='awrc'>1.61</td></tr>
<tr><td class='awrnc'>USER183</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80499</td><td align="right" class='awrnc'>80515</td><td align="right" class='awrnc'>571,908</td><td align="right" class='awrnc'>1.61</td></tr>
<tr><td class='awrc'>USER35</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>79780</td><td align="right" class='awrc'>79802</td><td align="right" class='awrc'>571,141</td><td align="right" class='awrc'>1.61</td></tr>
<tr><td class='awrnc'>USER1</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>79588</td><td align="right" class='awrnc'>79584</td><td align="right" class='awrnc'>569,493</td><td align="right" class='awrnc'>1.60</td></tr>
<tr><td class='awrc'>USER182</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80496</td><td align="right" class='awrc'>80501</td><td align="right" class='awrc'>569,152</td><td align="right" class='awrc'>1.60</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4108"></a>
<h3 class="awr">Segments by UnOptimized Reads</h3>
<ul>
<li class="awr">Total UnOptimized Read Requests:      35,569,694</li>
<li class="awr">Captured Segments account for	48.2% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by unoptimized reads. Owner, tablespace name, object type, unoptimized reads, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">UnOptimized Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER193</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80544</td><td align="right" class='awrc'>80563</td><td align="right" class='awrc'>573,205</td><td align="right" class='awrc'>1.61</td></tr>
<tr><td class='awrnc'>USER183</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80499</td><td align="right" class='awrnc'>80515</td><td align="right" class='awrnc'>571,908</td><td align="right" class='awrnc'>1.61</td></tr>
<tr><td class='awrc'>USER35</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>79780</td><td align="right" class='awrc'>79802</td><td align="right" class='awrc'>571,141</td><td align="right" class='awrc'>1.61</td></tr>
<tr><td class='awrnc'>USER1</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>79588</td><td align="right" class='awrnc'>79584</td><td align="right" class='awrnc'>569,493</td><td align="right" class='awrnc'>1.60</td></tr>
<tr><td class='awrc'>USER182</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80496</td><td align="right" class='awrc'>80501</td><td align="right" class='awrc'>569,152</td><td align="right" class='awrc'>1.60</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4106"></a>
<h3 class="awr">Segments by Optimized Reads</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4110"></a>
<h3 class="awr">Segments by Direct Physical Reads</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4120"></a>
<h3 class="awr">Segments by Physical Writes</h3>
<ul>
<li class="awr">Total Physical Writes:		 3,234</li>
<li class="awr">Captured Segments account for	39.5% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical writes. Owner, tablespace name, object type, physical writes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>84842</td><td align="right" class='awrc'>84842</td><td align="right" class='awrc'>788</td><td align="right" class='awrc'>24.37</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td>
<td scope="row" class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_PK</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrnc'>INDEX PARTITION</td><td align="right" class='awrnc'>84844</td><td align="right" class='awrnc'>84847</td><td align="right" class='awrnc'>151</td><td align="right" class='awrnc'>4.67</td></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_SQL_PLAN</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>11147</td><td align="right" class='awrc'>11147</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>3.34</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td>
<td scope="row" class='awrnc'>WRH$_SQL_PLAN_PK</td><td class='awrnc'>&#160;</td><td class='awrnc'>INDEX</td><td align="right" class='awrnc'>11150</td><td align="right" class='awrnc'>11150</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>1.70</td></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_SQL_BIND_METADATA_PK</td><td class='awrc'>&#160;</td><td class='awrc'>INDEX</td><td align="right" class='awrc'>11152</td><td align="right" class='awrc'>11152</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.68</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4124"></a>
<h3 class="awr">Segments by Physical Write Requests</h3>
<ul>
<li class="awr">Total Physical Write Requests:		 1,382</li>
<li class="awr">Captured Segments account for	30.4% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical write requests. Owner, tablespace name, object type, physical write requests, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Phys Write Requests</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_PK</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrc'>INDEX PARTITION</td><td align="right" class='awrc'>84844</td><td align="right" class='awrc'>84847</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>7.81</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td>
<td scope="row" class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>84842</td><td align="right" class='awrnc'>84842</td><td align="right" class='awrnc'>107</td><td align="right" class='awrnc'>7.74</td></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_SQL_PLAN</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>11147</td><td align="right" class='awrc'>11147</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>3.18</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td>
<td scope="row" class='awrnc'>WRH$_SQL_PLAN_PK</td><td class='awrnc'>&#160;</td><td class='awrnc'>INDEX</td><td align="right" class='awrnc'>11150</td><td align="right" class='awrnc'>11150</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>3.04</td></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_SQL_BIND_METADATA_PK</td><td class='awrc'>&#160;</td><td class='awrc'>INDEX</td><td align="right" class='awrc'>11152</td><td align="right" class='awrc'>11152</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>1.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4130"></a>
<h3 class="awr">Segments by Direct Physical Writes</h3>
<ul>
<li class="awr">Total Direct Physical Writes:		1,160</li>
<li class="awr">Captured Segments account for	56.7% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by direct physical writes. Owner, tablespace name, object type, direct writes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Direct Writes</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>84842</td><td align="right" class='awrc'>84842</td><td align="right" class='awrc'>647</td><td align="right" class='awrc'>55.78</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td>
<td scope="row" class='awrnc'>SYS_LOB0000007451C00009$$</td><td class='awrnc'>SYS_LOB_P258</td><td class='awrnc'>LOB PARTITION</td><td align="right" class='awrnc'>79022</td><td align="right" class='awrnc'>79022</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.95</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4140"></a>
<h3 class="awr">Segments by Table Scans</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4150"></a>
<h3 class="awr">Segments by DB Blocks Changes</h3>
<ul>
<li class="awr"> % of Capture shows % of DB Block Changes for each top segment compared  </li>
<li class="awr"> with total DB Block Changes for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by DB blocks changes. Owner, tablespace name, object type, db block changes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">DB Block Changes</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_SYSSTAT_PK</td><td class='awrc'>WRH$_SYSSTAT_3890827801_46</td><td class='awrc'>INDEX PARTITION</td><td align="right" class='awrc'>84824</td><td align="right" class='awrc'>84824</td><td align="right" class='awrc'>1,712</td><td align="right" class='awrc'>16.67</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td>
<td scope="row" class='awrnc'>WRH$_SQL_PLAN_PK</td><td class='awrnc'>&#160;</td><td class='awrnc'>INDEX</td><td align="right" class='awrnc'>11150</td><td align="right" class='awrnc'>11150</td><td align="right" class='awrnc'>1,536</td><td align="right" class='awrnc'>14.95</td></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_SQL_PLAN</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>11147</td><td align="right" class='awrc'>11147</td><td align="right" class='awrc'>1,504</td><td align="right" class='awrc'>14.64</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td>
<td scope="row" class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_PK</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrnc'>INDEX PARTITION</td><td align="right" class='awrnc'>84844</td><td align="right" class='awrnc'>84847</td><td align="right" class='awrnc'>784</td><td align="right" class='awrnc'>7.63</td></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_LATCH_PK</td><td class='awrc'>WRH$_LATCH_3890827801_46</td><td class='awrc'>INDEX PARTITION</td><td align="right" class='awrc'>84804</td><td align="right" class='awrc'>84804</td><td align="right" class='awrc'>656</td><td align="right" class='awrc'>6.39</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4200"></a>
<h3 class="awr">Segments by Row Lock Waits</h3>
<ul>
<li class="awr"> % of Capture shows % of row lock waits for each top segment compared  </li>
<li class="awr"> with total row lock waits for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by row lock waits. Owner, tablespace name, object type, row lock waits, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Row Lock Waits</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_SEG_STAT_OBJ_INDEX</td><td class='awrc'>&#160;</td><td class='awrc'>INDEX</td><td align="right" class='awrc'>11341</td><td align="right" class='awrc'>11341</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>66.67</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSTEM</td>
<td scope="row" class='awrnc'>OPTSTAT_HIST_CONTROL$</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>696</td><td align="right" class='awrnc'>696</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>33.33</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4300"></a>
<h3 class="awr">Segments by ITL Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4400"></a>
<h3 class="awr">Segments by Buffer Busy Waits</h3>
<ul>
<li class="awr"> % of Capture shows % of Buffer Busy Waits for each top segment compared  </li>
<li class="awr"> with total Buffer Busy Waits for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by buffer busy waits. Owner, tablespace name, object type, buffer busy waits, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Buffer Busy Waits</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>EXP_OBJ$</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>724</td><td align="right" class='awrc'>724</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>50.00</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSTEM</td>
<td scope="row" class='awrnc'>SEG$</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>50.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4450"></a>
<h3 class="awr">Segments by Global Cache Buffer Busy</h3>
<ul>
<li class="awr"> % of Capture shows % of GC Buffer Busy for each top segment compared  </li>
<li class="awr"> with GC Buffer Busy for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by global cache buffer busy waits. Owner, tablespace name, object type, GC buffer busy waits, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">GC Buffer Busy</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>USER61</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>79885</td><td align="right" class='awrc'>79917</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>11.32</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSTEM</td>
<td scope="row" class='awrnc'>SEG$</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>7.55</td></tr>
<tr><td class='awrc'>USER33</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>79732</td><td align="right" class='awrc'>79766</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>6.60</td></tr>
<tr><td class='awrnc'>USER55</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>79867</td><td align="right" class='awrnc'>79892</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>6.60</td></tr>
<tr><td class='awrc'>USER92</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80038</td><td align="right" class='awrc'>80074</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>5.66</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4500"></a>
<h3 class="awr">Segments by CR Blocks Received</h3>
<ul>
<li class="awr">Total CR Blocks Received:	      339</li>
<li class="awr">Captured Segments account for	28.9% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by CR blocks received. Owner, tablespace name, object type, CR blocks received, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">CR    Blocks  Received</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>EXP_OBJ$</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>724</td><td align="right" class='awrc'>724</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>17.70</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSTEM</td>
<td scope="row" class='awrnc'>SEG$</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>3.24</td></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSTEM</td>
<td scope="row" class='awrc'>OPTSTAT_HIST_CONTROL$</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>696</td><td align="right" class='awrc'>696</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>2.95</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td>
<td scope="row" class='awrnc'>WRI$_INDEX_USAGE</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>9236</td><td align="right" class='awrnc'>9236</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>2.06</td></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>SYS_LOB0000007451C00009$$</td><td class='awrc'>SYS_LOB_P258</td><td class='awrc'>LOB PARTITION</td><td align="right" class='awrc'>79022</td><td align="right" class='awrc'>79022</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1.18</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4600"></a>
<h3 class="awr">Segments by Current Blocks Received</h3>
<ul>
<li class="awr">Total Current Blocks Received:		 1,289</li>
<li class="awr">Captured Segments account for	19.4% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by current blocks received. Owner, tablespace name, object type, Current blocks received, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Current Blocks  Received</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>EXP_OBJ$</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>724</td><td align="right" class='awrc'>724</td><td align="right" class='awrc'>143</td><td align="right" class='awrc'>11.09</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td>
<td scope="row" class='awrnc'>WRM$_SNAPSHOT_DETAILS_INDEX</td><td class='awrnc'>&#160;</td><td class='awrnc'>INDEX</td><td align="right" class='awrnc'>11582</td><td align="right" class='awrnc'>11582</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>3.26</td></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSTEM</td>
<td scope="row" class='awrc'>SEG$</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>1.47</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td>
<td scope="row" class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>84842</td><td align="right" class='awrnc'>84842</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>1.40</td></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRI$_INDEX_USAGE</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>9236</td><td align="right" class='awrc'>9236</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>1.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4605"></a>
<h3 class="awr">Segments by Global Cache Remote Grants</h3>
<ul>
<li class="awr">Total Global Cache Remote Grants:	6,879,593</li>
<li class="awr">Captured Segments account for	37.0% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by gc remote grants. Owner, tablespace name, object type, gc remote grants, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">GC Remote Grants</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER106</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80123</td><td align="right" class='awrc'>80142</td><td align="right" class='awrc'>94,409</td><td align="right" class='awrc'>1.37</td></tr>
<tr><td class='awrnc'>USER3</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>79626</td><td align="right" class='awrnc'>79636</td><td align="right" class='awrnc'>91,038</td><td align="right" class='awrnc'>1.32</td></tr>
<tr><td class='awrc'>USER5</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>79632</td><td align="right" class='awrc'>79643</td><td align="right" class='awrc'>90,416</td><td align="right" class='awrc'>1.31</td></tr>
<tr><td class='awrnc'>USER15</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>79662</td><td align="right" class='awrnc'>79652</td><td align="right" class='awrnc'>89,732</td><td align="right" class='awrnc'>1.30</td></tr>
<tr><td class='awrc'>USER101</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80105</td><td align="right" class='awrc'>80114</td><td align="right" class='awrc'>89,559</td><td align="right" class='awrc'>1.30</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="31"></a>
<h2 class="awr">
Dictionary Cache Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4700">Dictionary Cache Stats</a></li>
<li class="awr"><a class="awr" href="#4800">Dictionary Cache Stats (RAC)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4700"></a>
<h3 class="awr">Dictionary Cache Stats</h3>
<ul>
<li class="awr"> &quot;Pct Misses&quot;  should be very low (&lt; 2% in most cases) </li>
<li class="awr"> &quot;Final Usage&quot; is the number of cache entries being used</li>
</ul>
<table border="0" class="tdiff" summary="This table displays dictionary cache statistics. Get requests, % misses, scan requests, final usage, etc. are displayed for each cache"><tr><th class="awrbg" scope="col">Cache</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Scan Reqs</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Mod Reqs</th><th class="awrbg" scope="col">Final Usage</th></tr>
<tr><td scope="row" class='awrc'>dc_awr_control</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>dc_global_oids</td><td align="right" class='awrnc'>3,851</td><td align="right" class='awrnc'>9.11</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>567</td></tr>
<tr><td scope="row" class='awrc'>dc_histogram_data</td><td align="right" class='awrc'>8,792</td><td align="right" class='awrc'>2.15</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,519</td></tr>
<tr><td scope="row" class='awrnc'>dc_histogram_defs</td><td align="right" class='awrnc'>15,766</td><td align="right" class='awrnc'>9.29</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>73</td><td align="right" class='awrnc'>5,410</td></tr>
<tr><td scope="row" class='awrc'>dc_objects</td><td align="right" class='awrc'>8,119</td><td align="right" class='awrc'>1.69</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>3,787</td></tr>
<tr><td scope="row" class='awrnc'>dc_profiles</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td></tr>
<tr><td scope="row" class='awrc'>dc_props</td><td align="right" class='awrc'>635</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td></tr>
<tr><td scope="row" class='awrnc'>dc_rollback_segments</td><td align="right" class='awrnc'>208</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>70</td></tr>
<tr><td scope="row" class='awrc'>dc_segments</td><td align="right" class='awrc'>743</td><td align="right" class='awrc'>18.30</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>41</td><td align="right" class='awrc'>813</td></tr>
<tr><td scope="row" class='awrnc'>dc_sequences</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>24.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>5</td></tr>
<tr><td scope="row" class='awrc'>dc_tablespaces</td><td align="right" class='awrc'>615</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td></tr>
<tr><td scope="row" class='awrnc'>dc_users</td><td align="right" class='awrnc'>216</td><td align="right" class='awrnc'>0.46</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>481</td></tr>
<tr><td scope="row" class='awrc'>outstanding_alerts</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#31">Back to Dictionary Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4800"></a>
<h3 class="awr">Dictionary Cache Stats (RAC)</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#31">Back to Dictionary Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="32"></a>
<h2 class="awr">
Library Cache Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4900">Library Cache Activity</a></li>
<li class="awr"><a class="awr" href="#5000">Library Cache Activity (RAC)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4900"></a>
<h3 class="awr">Library Cache Activity</h3>
<ul>
<li class="awr"> &quot;Pct Misses&quot;  should be very low  </li>
</ul>
<table border="0" class="tdiff" summary="This table displays library cache statistics. Get requests, % misses, pin request, % miss, reloads, etc. are displayed for each library cache namespace"><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Pin Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Reloads</th><th class="awrbg" scope="col">Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>333</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>1,042</td><td align="right" class='awrc'>0.48</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>INDEX</td><td align="right" class='awrc'>165</td><td align="right" class='awrc'>3.03</td><td align="right" class='awrc'>165</td><td align="right" class='awrc'>6.67</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>OBJECT ID</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SCHEMA</td><td align="right" class='awrc'>387</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA</td><td align="right" class='awrnc'>3,111</td><td align="right" class='awrnc'>25.94</td><td align="right" class='awrnc'>15,547,144</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>265</td><td align="right" class='awrnc'>4</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA BUILD</td><td align="right" class='awrc'>495</td><td align="right" class='awrc'>76.36</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA STATS</td><td align="right" class='awrnc'>429</td><td align="right" class='awrnc'>92.54</td><td align="right" class='awrnc'>429</td><td align="right" class='awrnc'>92.54</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TABLE/PROCEDURE</td><td align="right" class='awrc'>2,194</td><td align="right" class='awrc'>12.44</td><td align="right" class='awrc'>9,038</td><td align="right" class='awrc'>8.35</td><td align="right" class='awrc'>224</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRIGGER</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>42.86</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>42.86</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#32">Back to Library Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5000"></a>
<h3 class="awr">Library Cache Activity (RAC)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays library cache statistics. Ges lock requests, GES pin requests, GES pin releases, etc. are displayed for each library cache namespace"><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">GES Lock Requests</th><th class="awrbg" scope="col">GES Pin Requests</th><th class="awrbg" scope="col">GES Pin Releases</th><th class="awrbg" scope="col">GES Inval Requests</th><th class="awrbg" scope="col">GES Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>993</td><td align="right" class='awrc'>993</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>INDEX</td><td align="right" class='awrc'>165</td><td align="right" class='awrc'>165</td><td align="right" class='awrc'>165</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SCHEMA</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TABLE/PROCEDURE</td><td align="right" class='awrc'>2,863</td><td align="right" class='awrc'>5,933</td><td align="right" class='awrc'>5,933</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRIGGER</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#32">Back to Library Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="33"></a>
<h2 class="awr">
Memory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#8500">Memory Dynamic Components</a></li>
<li class="awr"><a class="awr" href="#8600">Memory Resize Operations Summary</a></li>
<li class="awr"><a class="awr" href="#8650">Memory Resize Ops</a></li>
<li class="awr"><a class="awr" href="#7300">Process Memory Summary</a></li>
<li class="awr"><a class="awr" href="#5900">SGA Memory Summary</a></li>
<li class="awr"><a class="awr" href="#6100">SGA breakdown difference by Pool and Name</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8500"></a>
<h3 class="awr">Memory Dynamic Components</h3>
<ul>
<li class="awr"> Min/Max sizes since instance startup </li>
<li class="awr"> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred </li>
<li class="awr"> ordered by Component </li>
</ul>
<table border="0" class="tdiff" summary="This table displays memory dynamic component statistics. Begin snap size, current size, min size, etc. are displayed for each component"><tr><th class="awrbg" scope="col">Component</th><th class="awrbg" scope="col">Begin Snap Size (Mb)</th><th class="awrbg" scope="col">Current Size (Mb)</th><th class="awrbg" scope="col">Min Size (Mb)</th><th class="awrbg" scope="col">Max Size (Mb)</th><th class="awrbg" scope="col">Oper Count</th><th class="awrbg" scope="col">Last Op Typ/Mod</th></tr>
<tr><td scope="row" class='awrc'>ASM Buffer Cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 16K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT 2K buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 32K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT 4K buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 8K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT buffer cache</td><td align="right" class='awrc'>11,168.00</td><td align="right" class='awrc'>11,168.00</td><td align="right" class='awrc'>11,168.00</td><td align="right" class='awrc'>11,648.00</td><td align="right" class='awrc'>0</td><td class='awrc'>SHR/DEF</td></tr>
<tr><td scope="row" class='awrnc'>Data Transfer Cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>In Memory RO Extension Area</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>In Memory RW Extension Area</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>In-Memory Area</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>KEEP buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>PGA Target</td><td align="right" class='awrc'>8,096.00</td><td align="right" class='awrc'>8,096.00</td><td align="right" class='awrc'>8,096.00</td><td align="right" class='awrc'>8,096.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>RECYCLE buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>SGA Target</td><td align="right" class='awrc'>14,336.00</td><td align="right" class='awrc'>14,336.00</td><td align="right" class='awrc'>14,336.00</td><td align="right" class='awrc'>14,336.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>Shared IO Pool</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>java pool</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>large pool</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>160.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>memoptimize buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>2,720.00</td><td align="right" class='awrnc'>2,720.00</td><td align="right" class='awrnc'>1,504.00</td><td align="right" class='awrnc'>2,720.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>GRO/DEF</td></tr>
<tr><td scope="row" class='awrc'>streams pool</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>unified pga pool</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8600"></a>
<h3 class="awr">Memory Resize Operations Summary</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8650"></a>
<h3 class="awr">Memory Resize Ops</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7300"></a>
<h3 class="awr">Process Memory Summary</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap  </li>
<li class="awr"> All rows below contain absolute values (i.e. not diffed over the interval) </li>
<li class="awr"> Max Alloc is Maximum PGA Allocation size at snapshot time  </li>
<li class="awr"> Hist Max Alloc is the Historical Max Allocation for still-connected processes </li>
<li class="awr"> ordered by Begin/End snapshot, Alloc (MB) desc </li>
<li class="awr"> Top 10 containers by Alloc (MB) at end snapshot time are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays process memory summary. Allocation, used, average allocation, etc. are displayed for different category of process memory."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Category</th><th class="awrbg" scope="col">Alloc (MB)</th><th class="awrbg" scope="col">Used (MB)</th><th class="awrbg" scope="col">Avg Alloc (MB)</th><th class="awrbg" scope="col">Std Dev Alloc (MB)</th><th class="awrbg" scope="col">Max Alloc (MB)</th><th class="awrbg" scope="col">Hist Max Alloc (MB)</th><th class="awrbg" scope="col">Num Proc</th><th class="awrbg" scope="col">Num Alloc</th></tr>
<tr><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>382.56</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.32</td><td align="right" class='awrc'>3.67</td><td align="right" class='awrc'>43</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>289</td><td align="right" class='awrc'>289</td></tr>
<tr><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>2,240.75</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3.34</td><td align="right" class='awrnc'>3.77</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>671</td><td align="right" class='awrnc'>671</td></tr>
<tr><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>118.57</td><td align="right" class='awrc'>116.17</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>413</td><td align="right" class='awrc'>411</td></tr>
<tr><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>228.08</td><td align="right" class='awrnc'>211.33</td><td align="right" class='awrnc'>0.73</td><td align="right" class='awrnc'>0.49</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>313</td><td align="right" class='awrnc'>299</td></tr>
<tr><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>2,969.95</td><td align="right" class='awrc'>327.50</td><td align="right" class='awrc'>5.68</td><td align="right" class='awrc'>8.18</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>69</td><td align="right" class='awrc'>1,686</td><td align="right" class='awrc'>1,670</td></tr>
<tr><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>253.56</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4.78</td><td align="right" class='awrnc'>7.80</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>53</td><td align="right" class='awrnc'>53</td></tr>
<tr><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>1,221.57</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2.87</td><td align="right" class='awrc'>4.80</td><td align="right" class='awrc'>55</td><td align="right" class='awrc'>55</td><td align="right" class='awrc'>426</td><td align="right" class='awrc'>426</td></tr>
<tr><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>7.24</td><td align="right" class='awrnc'>6.55</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>170</td><td align="right" class='awrnc'>166</td></tr>
<tr><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>3.90</td><td align="right" class='awrc'>2.18</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>76</td><td align="right" class='awrc'>48</td></tr>
<tr><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>1,486.27</td><td align="right" class='awrnc'>8.74</td><td align="right" class='awrnc'>7.75</td><td align="right" class='awrnc'>12.94</td><td align="right" class='awrnc'>95</td><td align="right" class='awrnc'>70</td><td align="right" class='awrnc'>725</td><td align="right" class='awrnc'>693</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5900"></a>
<h3 class="awr">SGA Memory Summary</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA memory summary. For each SGA region, begin size and end size is displayed."><tr><th class="awrbg" scope="col">SGA regions</th><th class="awrbg" scope="col">Begin Size (Bytes)</th><th class="awrbg" scope="col">End Size (Bytes) (if different)</th></tr>
<tr><td scope="row" class='awrc'>Database Buffers</td><td align="right" class='awrc'>11,844,714,496</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Fixed Size</td><td align="right" class='awrnc'>16,031,944</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Redo Buffers</td><td align="right" class='awrc'>151,736,320</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Variable Size</td><td align="right" class='awrnc'>30,937,186,304</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6100"></a>
<h3 class="awr">SGA breakdown difference by Pool and Name</h3>
<ul>
<li class="awr"> ordered by Pool, Name	</li>
<li class="awr"> N/A value for Begin MB or End MB indicates the size of that Pool/Name was    insignificant, or zero in that snapshot</li>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA breakdown difference. For each pool name, begin and end size are displayed."><tr><th class="awrbg" scope="col">Pool</th><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Begin MB</th><th class="awrbg" scope="col">End MB</th><th class="awrbg" scope="col">% Diff</th></tr>
<tr><td class='awrc'>large</td><td class='awrc'>PX msg pool</td><td align="right" class='awrc'>128.00</td><td align="right" class='awrc'>128.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>large</td><td class='awrnc'>free memory</td><td align="right" class='awrnc'>31.62</td><td align="right" class='awrnc'>31.62</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ASH buffers</td><td align="right" class='awrc'>254.00</td><td align="right" class='awrc'>254.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>KGLH0</td><td align="right" class='awrnc'>45.72</td><td align="right" class='awrnc'>51.93</td><td align="right" class='awrnc'>13.59</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>KJSC rnb slots</td><td align="right" class='awrc'>144.76</td><td align="right" class='awrc'>38.87</td><td align="right" class='awrc'>-73.15</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>KKSSP</td><td align="right" class='awrnc'>28.44</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>-100.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>SO private sga</td><td align="right" class='awrc'>66.85</td><td align="right" class='awrc'>66.85</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>SQLA</td><td align="right" class='awrnc'>157.75</td><td align="right" class='awrnc'>133.63</td><td align="right" class='awrnc'>-15.29</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>db_block_hash_buckets</td><td align="right" class='awrc'>64.00</td><td align="right" class='awrc'>64.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>dbwriter coalesce buffer</td><td align="right" class='awrnc'>64.06</td><td align="right" class='awrnc'>64.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>free memory</td><td align="right" class='awrc'>130.90</td><td align="right" class='awrc'>278.03</td><td align="right" class='awrc'>112.40</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>gc name table</td><td align="right" class='awrnc'>48.00</td><td align="right" class='awrnc'>48.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>gcs resources</td><td align="right" class='awrc'>419.54</td><td align="right" class='awrc'>419.54</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>gcs resv res hash bucket</td><td align="right" class='awrnc'>144.00</td><td align="right" class='awrnc'>144.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>gcs shadows</td><td align="right" class='awrc'>228.84</td><td align="right" class='awrc'>228.84</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>ges big msg buffers</td><td align="right" class='awrnc'>30.39</td><td align="right" class='awrnc'>30.39</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ges enqueues</td><td align="right" class='awrc'>51.16</td><td align="right" class='awrc'>51.16</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>ges resource permanent</td><td align="right" class='awrnc'>55.88</td><td align="right" class='awrnc'>55.88</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ksunfy_meta 1</td><td align="right" class='awrc'>100.93</td><td align="right" class='awrc'>100.93</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>object queue hash buckets</td><td align="right" class='awrnc'>64.00</td><td align="right" class='awrnc'>64.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>row cache</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>session</td><td align="right" class='awrnc'>38.66</td><td align="right" class='awrnc'>38.66</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>&#160;</td><td class='awrc'>buffer_cache</td><td align="right" class='awrc'>11,168.00</td><td align="right" class='awrc'>11,168.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>&#160;</td><td class='awrnc'>fixed_sga</td><td align="right" class='awrnc'>15.29</td><td align="right" class='awrnc'>15.29</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>&#160;</td><td class='awrc'>log_buffer</td><td align="right" class='awrc'>144.71</td><td align="right" class='awrc'>144.71</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>&#160;</td><td class='awrnc'>shared_io_pool</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>128.00</td><td align="right" class='awrnc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="39"></a>
<h2 class="awr">
Replication Statistics (GoldenGate, XStream)
</h2>
<ul>
<li class="awr"><a class="awr" href="#9000">Replication System Resource Usage</a></li>
<li class="awr"><a class="awr" href="#9010">Replication SGA Usage</a></li>
<li class="awr"><a class="awr" href="#9020">GoldenGate Capture</a></li>
<li class="awr"><a class="awr" href="#9030">GoldenGate Capture Rate</a></li>
<li class="awr"><a class="awr" href="#9040">GoldenGate Apply Reader</a></li>
<li class="awr"><a class="awr" href="#9041">GoldenGate Apply Coordinator</a></li>
<li class="awr"><a class="awr" href="#9042">GoldenGate Apply Server</a></li>
<li class="awr"><a class="awr" href="#9051">GoldenGate Apply Coordinator Rate</a></li>
<li class="awr"><a class="awr" href="#9050">GoldenGate Apply Reader and Server Rate</a></li>
<li class="awr"><a class="awr" href="#9060">XStream Capture</a></li>
<li class="awr"><a class="awr" href="#9070">XStream Capture Rate</a></li>
<li class="awr"><a class="awr" href="#9080">XStream Apply Reader</a></li>
<li class="awr"><a class="awr" href="#9081">XStream Apply Coordinator</a></li>
<li class="awr"><a class="awr" href="#9082">XStream Apply Server</a></li>
<li class="awr"><a class="awr" href="#9091">XStream Apply Coordinator Rate</a></li>
<li class="awr"><a class="awr" href="#9090">XStream Apply Reader and Server Rate</a></li>
<li class="awr"><a class="awr" href="#9100">Table Statistics by DML Operations</a></li>
<li class="awr"><a class="awr" href="#9110">Table Statistics by Conflict Resolutions</a></li>
<li class="awr"><a class="awr" href="#9120">Replication Large Transaction Statistics</a></li>
<li class="awr"><a class="awr" href="#9130">Replication Long Running Transaction Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9000"></a>
<h3 class="awr">Replication System Resource Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9010"></a>
<h3 class="awr">Replication SGA Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9020"></a>
<h3 class="awr">GoldenGate Capture</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9030"></a>
<h3 class="awr">GoldenGate Capture Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9040"></a>
<h3 class="awr">GoldenGate Apply Reader</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9041"></a>
<h3 class="awr">GoldenGate Apply Coordinator</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9042"></a>
<h3 class="awr">GoldenGate Apply Server</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9051"></a>
<h3 class="awr">GoldenGate Apply Coordinator Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9050"></a>
<h3 class="awr">GoldenGate Apply Reader and Server Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9060"></a>
<h3 class="awr">XStream Capture</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9070"></a>
<h3 class="awr">XStream Capture Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9080"></a>
<h3 class="awr">XStream Apply Reader</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9081"></a>
<h3 class="awr">XStream Apply Coordinator</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9082"></a>
<h3 class="awr">XStream Apply Server</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9091"></a>
<h3 class="awr">XStream Apply Coordinator Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9090"></a>
<h3 class="awr">XStream Apply Reader and Server Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9100"></a>
<h3 class="awr">Table Statistics by DML Operations</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9110"></a>
<h3 class="awr">Table Statistics by Conflict Resolutions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9120"></a>
<h3 class="awr">Replication Large Transaction Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9130"></a>
<h3 class="awr">Replication Long Running Transaction Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="34"></a>
<h2 class="awr">
Advanced Queuing
</h2>
<ul>
<li class="awr"><a class="awr" href="#6150">Advanced Queue CPU/IO Usage</a></li>
<li class="awr"><a class="awr" href="#6400">Buffered Queues</a></li>
<li class="awr"><a class="awr" href="#6500">Buffered Queue Subscribers</a></li>
<li class="awr"><a class="awr" href="#6600">Rule Set</a></li>
<li class="awr"><a class="awr" href="#7600">Persistent Queues</a></li>
<li class="awr"><a class="awr" href="#7610">Persistent Queues Rate</a></li>
<li class="awr"><a class="awr" href="#7700">Persistent Queue Subscribers</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6150"></a>
<h3 class="awr">Advanced Queue CPU/IO Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6400"></a>
<h3 class="awr">Buffered Queues</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6500"></a>
<h3 class="awr">Buffered Queue Subscribers</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6600"></a>
<h3 class="awr">Rule Set</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7600"></a>
<h3 class="awr">Persistent Queues</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7610"></a>
<h3 class="awr">Persistent Queues Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7700"></a>
<h3 class="awr">Persistent Queue Subscribers</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="6700"></a>
<h3 class="awr">Resource Limit Stats</h3>
<ul>
<li class="awr"> Only rows with Current or Maximum Utilization &gt; 80% of Limit are shown  </li>
<li class="awr"> For &quot;UNLIMITED&quot; resources, rows whose Current or Maximum Utilization    exceeds 2*Initial Allocation are shown </li>
<li class="awr"> Ordered by Resource Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays resource limit statistics. Current utilization, maximum utilization, initial allocation and limit are displayed for each resource name"><tr><th class="awrbg" scope="col">Resource Name</th><th class="awrbg" scope="col">Current	 Utilization</th><th class="awrbg" scope="col">Maximum	 Utilization</th><th class="awrbg" scope="col">  Initial Allocation</th><th class="awrbg" scope="col">	Limit</th></tr>
<tr><td scope="row" class='awrc'>ges_cache_ress</td><td align="right" class='awrc'>12,692</td><td align="right" class='awrc'>14,826</td><td class='awrc'>0</td><td class='awrc'>UNLIMITED</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="37"></a>
<h2 class="awr">
Shared Server Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#8710">Shared Servers Activity</a></li>
<li class="awr"><a class="awr" href="#8720">Shared Servers Rates</a></li>
<li class="awr"><a class="awr" href="#8730">Shared Servers Utilization</a></li>
<li class="awr"><a class="awr" href="#8740">Shared Servers Common Queue</a></li>
<li class="awr"><a class="awr" href="#8750">Shared Servers Dispatchers</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8710"></a>
<h3 class="awr">Shared Servers Activity</h3>
<ul>
<li class="awr"> Values represent averages for all samples</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers activity statistics. It displays average total connections, average active connections, average total shared servers, etc."><tr><th class="awrbg" scope="col">Avg Total Connections</th><th class="awrbg" scope="col">Avg Active Connections</th><th class="awrbg" scope="col">Avg Total Shared Srvrs</th><th class="awrbg" scope="col">Avg Active Shared Srvrs</th><th class="awrbg" scope="col">Avg Total Dispatchers</th><th class="awrbg" scope="col">Avg Active Dispatchers</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8720"></a>
<h3 class="awr">Shared Servers Rates</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers rate statistics. It displays common queue per second, disp queue per second, server messages per second, common queue total, etc."><tr><th class="awrbg" scope="col">Common Queue Per Sec</th><th class="awrbg" scope="col">Disp Queue Per Sec</th><th class="awrbg" scope="col">Server Msgs/Sec</th><th class="awrbg" scope="col">Server KB/Sec</th><th class="awrbg" scope="col">Common Queue Total</th><th class="awrbg" scope="col">Disp Queue Total</th><th class="awrbg" scope="col">Server Total Msgs</th><th class="awrbg" scope="col">Server Total(KB)</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8730"></a>
<h3 class="awr">Shared Servers Utilization</h3>
<ul>
<li class="awr"> Statistics are combined for all servers </li>
<li class="awr"> Incoming and Outgoing Net % are included in %Busy</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers utilization statistics. It displays total server time second, % busy, % idle, incoming net %, outgoing net %, etc."><tr><th class="awrbg" scope="col">Total Server Time (s)</th><th class="awrbg" scope="col">%Busy</th><th class="awrbg" scope="col">%Idle</th><th class="awrbg" scope="col">Incoming Net %</th><th class="awrbg" scope="col">Outgoing Net %</th></tr>
<tr><td align="right" class='awrc'>726</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8740"></a>
<h3 class="awr">Shared Servers Common Queue</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8750"></a>
<h3 class="awr">Shared Servers Dispatchers</h3>
<ul>
<li class="awr"> Ordered by %Busy, descending </li>
<li class="awr"> Total Queued, Total Queue Wait and Avg Queue Wait are for dispatcher queue </li>
<li class="awr"> Name suffixes:       &quot;(N)&quot; - dispatcher started between begin and end snapshots	&quot;(R)&quot; - dispatcher re-started between begin and end snapshots</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers dispatcher statistics. Average connections, total dispatch time, % busy, % idle, total queued, total queued wait, etc. are displayed for each dispatcher"><tr><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Avg Conns</th><th class="awrbg" scope="col">Total Disp Time (s)</th><th class="awrbg" scope="col">%Busy</th><th class="awrbg" scope="col">%Idle</th><th class="awrbg" scope="col">Total Queued</th><th class="awrbg" scope="col">Total Queue Wait (s)</th><th class="awrbg" scope="col">Avg Queue Wait (ms)</th></tr>
<tr><td scope="row" class='awrc'>D000</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>727</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="36"></a>
<h2 class="awr">
Initialization Parameters
</h2>
<ul>
<li class="awr"><a class="awr" href="#6800">Modified Parameters</a></li>
<li class="awr"><a class="awr" href="#6850">Modified Multi-Valued Parameters</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6800"></a>
<h3 class="awr">Modified Parameters</h3>
<ul>
<li class="awr"> This section shows all the modified initialization parameters that  were in effect during the entire snapshot interval </li>
<li class="awr"> End Value is displayed only if the parameter value was modified within the snapshot interval</li>
</ul>
<table border="0" class="tdiff" summary="This table displays name and value of the modified initialization parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>_ipddb_enable</td><td class='awrc'>TRUE</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>audit_file_dest</td><td class='awrnc'>/u01/app/oracle/admin/p60sdb/adump</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>audit_trail</td><td class='awrc'>DB</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cluster_database</td><td class='awrnc'>TRUE</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>compatible</td><td class='awrc'>19.0.0</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control_files</td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.261.1032623513,	+P60SFRA/P60SDB/CONTROLFILE/current.256.1032623515</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_block_size</td><td class='awrc'>8192</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_create_file_dest</td><td class='awrnc'>+P60S</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_domain</td><td class='awrc'>example.com</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_name</td><td class='awrnc'>p60sdb</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_recovery_file_dest</td><td class='awrc'>+P60SFRA</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_recovery_file_dest_size</td><td class='awrnc'>811597824000</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>diagnostic_dest</td><td class='awrc'>/u01/app/oracle</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dispatchers</td><td class='awrnc'>(PROTOCOL=TCP) (SERVICE=p60sdbXDB)</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>instance_number</td><td class='awrc'>2</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>listener_networks</td><td class='awrnc'>&#160;&#160;</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>local_listener</td><td class='awrc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522))</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>nls_language</td><td class='awrnc'>AMERICAN</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>nls_territory</td><td class='awrc'>AMERICA</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>open_cursors</td><td class='awrnc'>300</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>pga_aggregate_target</td><td class='awrc'>8474591232</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>processes</td><td class='awrnc'>2560</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>remote_listener</td><td class='awrc'>mcracpoc-scan.example.com:1521</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remote_login_passwordfile</td><td class='awrnc'>EXCLUSIVE</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>sga_max_size</td><td class='awrc'>42949672960</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sga_target</td><td class='awrnc'>15032385536</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>thread</td><td class='awrc'>2</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo_tablespace</td><td class='awrnc'>UNDOTBS2</td><td class='awrnc'>&#160;&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#36">Back to Initialization Parameters</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6850"></a>
<h3 class="awr">Modified Multi-Valued Parameters</h3>
<ul>
<li class="awr"> This section only displays parameters that have more than one value </li>
<li class="awr">'(NULL)' indicates a missing parameter value </li>
<li class="awr"> A blank in the 'End Snapshot' indicates the same value as the 'Begin Snapshot'</li>
</ul>
<table border="0" class="tdiff" summary="This table displays name and value of multi-valued parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>control_files</td><td class='awrc'>+P60S/P60SDB/CONTROLFILE/current.261.1032623513</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">control_files</div></td><td class='awrnc'>+P60SFRA/P60SDB/CONTROLFILE/current.256.1032623515</td><td class='awrnc'>&#160;&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#36">Back to Initialization Parameters</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="42"></a>
<h2 class="awr">
Active Session History (ASH) Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#9990">Top SQL with Top Events</a></li>
<li class="awr"><a class="awr" href="#9989">Top SQL with Top Row Sources</a></li>
<li class="awr"><a class="awr" href="#9993">Top Sessions</a></li>
<li class="awr"><a class="awr" href="#9992">Top Blocking Sessions</a></li>
<li class="awr"><a class="awr" href="#9991">Top PL/SQL Procedures</a></li>
<li class="awr"><a class="awr" href="#9988">Top Events</a></li>
<li class="awr"><a class="awr" href="#9994">Top Event P1/P2/P3 Values</a></li>
<li class="awr"><a class="awr" href="#9987">Top DB Objects</a></li>
<li class="awr"><a class="awr" href="#9986">Activity Over Time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9990"></a>
<h3 class="awr">Top SQL with Top Events</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top events by DB Time	 for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event that the SQL is	   waiting on. </li>
<li class="awr"> % Row Source is the percentage of DB Time due to the row source for the     SQL waiting on the event. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top SQL by Top Wait Events"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Top Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>12711</td><td align="right" class='awrc'>98.89</td>
<td class='awrc'>db file parallel read</td><td align="right" class='awrc'>40.06</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>40.06</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">12711</div></td><td align="right" class='awrnc'><div class="hidden">98.88828422607478815206405970613387234704</div></td>
<td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>34.28</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>34.28</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">12711</div></td><td align="right" class='awrc'><div class="hidden">98.88828422607478815206405970613387234704</div></td>
<td class='awrc'>db file sequential read</td><td align="right" class='awrc'>11.50</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>10.37</td>
<td class='awrc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9989"></a>
<h3 class="awr">Top SQL with Top Row Sources</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top row sources by DB Time    for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Row Source is the percentage of DB Time spent on the row source by	   that SQL. </li>
<li class="awr"> % Event is the percentage of DB Time spent on the event by the      SQL executing the row source. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table display the Top SQLs with Top Row Sources"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">Top Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>12711</td><td align="right" class='awrc'>98.89</td>
<td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>94.10</td><td class='awrc'>db file parallel read</td><td align="right" class='awrc'>40.06</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">12711</div></td><td align="right" class='awrnc'><div class="hidden">98.88828422607478815206405970613387234704</div></td>
<td class='awrnc'>INDEX - RANGE SCAN</td><td align="right" class='awrnc'>4.30</td><td class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>2.81</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9993"></a>
<h3 class="awr">Top Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9992"></a>
<h3 class="awr">Top Blocking Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9991"></a>
<h3 class="awr">Top PL/SQL Procedures</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9988"></a>
<h3 class="awr">Top Events</h3>
<ul>
<li class="awr"> Top Events by DB Time </li>
<li class="awr"> % Activity is the percentage of DB Time due to the event</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the top events"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Class</th><th class="awrbg" scope="col">Session Type</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td class='awrc'>User I/O</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>40.06</td><td align="right" class='awrc'>68.43</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block request</td><td class='awrnc'>Cluster</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>34.28</td><td align="right" class='awrnc'>58.57</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td class='awrc'>User I/O</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>11.54</td><td align="right" class='awrc'>19.71</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td class='awrnc'>Cluster</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>9.30</td><td align="right" class='awrnc'>15.88</td></tr>
<tr><td scope="row" class='awrc'>CPU + Wait for CPU</td><td class='awrc'>CPU</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>3.68</td><td align="right" class='awrc'>6.28</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9994"></a>
<h3 class="awr">Top Event P1/P2/P3 Values</h3>
<ul>
<li class="awr"> Top Events by DB Time and the top P1/P2/P3 values for those events. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event	</li>
<li class="awr"> % Activity is the percentage of DB Time due to the event with the given     P1,P2,P3 Values.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top event P1/P2/P3 values"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">P1, P2, P3 Values</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Parameter 1</th><th class="awrbg" scope="col">Parameter 2</th><th class="awrbg" scope="col">Parameter 3</th></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>40.06</td><td align="right" class='awrc'>&quot;1&quot;,&quot;77&quot;,&quot;77&quot;</td><td align="right" class='awrc'>29.69</td>
<td class='awrc'>files</td><td class='awrc'>blocks</td><td class='awrc'>requests</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>34.28</td><td align="right" class='awrnc'>&quot;9&quot;,&quot;23130245&quot;,&quot;1&quot;</td><td align="right" class='awrnc'>0.02</td>
<td class='awrnc'>file#</td><td class='awrnc'>block#</td><td class='awrnc'>class#</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>11.55</td><td align="right" class='awrc'>&quot;1&quot;,&quot;977&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.01</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>blocks</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9987"></a>
<h3 class="awr">Top DB Objects</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9986"></a>
<h3 class="awr">Activity Over Time</h3>
<ul>
<li class="awr"> Analysis period is divided into smaller time slots as indicated    in the 'Slot Time (Duration)'. </li>
<li class="awr"> Top 3 events are reported in each of those slots </li>
<li class="awr"> 'Slot Count' shows the number of ASH samples in that slot </li>
<li class="awr"> 'Event Count' shows the number of ASH samples waiting for    that event in that slot </li>
<li class="awr"> '% Event' is 'Event Count' over all ASH samples in the analysis period</li>
</ul>
<table border="0" class="tdiff" summary="This table show the activity in ASH over time"><tr><th class="awrbg" scope="col">Slot Time (Duration)</th><th class="awrbg" scope="col">Slot Count</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Count</th><th class="awrbg" scope="col">% Event</th></tr>
<tr><td align="right" class='awrc'>21:32:34   (2.4 min)</td><td align="right" class='awrc'>2,673</td><td class='awrc'>db file parallel read</td><td align="right" class='awrc'>996</td><td align="right" class='awrc'>7.74</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">21:32:34   (2.4 min)</div></td><td align="right" class='awrnc'><div class="hidden">2673</div></td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>995</td><td align="right" class='awrnc'>7.74</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">21:32:34   (2.4 min)</div></td><td align="right" class='awrc'><div class="hidden">2673</div></td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>276</td><td align="right" class='awrc'>2.15</td></tr>
<tr><td align="right" class='awrnc'>21:35:00   (5.0 min)</td><td align="right" class='awrnc'>7,263</td><td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>2,900</td><td align="right" class='awrnc'>22.55</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">21:35:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">7263</div></td><td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>2,508</td><td align="right" class='awrc'>19.50</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">21:35:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">7263</div></td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>856</td><td align="right" class='awrnc'>6.65</td></tr>
<tr><td align="right" class='awrc'>21:40:00   (5.0 min)</td><td align="right" class='awrc'>2,927</td><td class='awrc'>db file parallel read</td><td align="right" class='awrc'>1,257</td><td align="right" class='awrc'>9.77</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">21:40:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">2927</div></td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>907</td><td align="right" class='awrnc'>7.05</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">21:40:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">2927</div></td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>354</td><td align="right" class='awrc'>2.75</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="99995"></a>
<h2>ADDM Task ADDM:3890827801_2_48</h2>
<pre>
	  ADDM Report for Task &apos;ADDM:3890827801_2_48&apos;
	  -------------------------------------------

Analysis Period
---------------
AWR snapshot range from 47 to 48.
Time period starts at 20-FEB-20 09.32.34 PM
Time period ends at 20-FEB-20 09.45.08 PM

Analysis Target
---------------
Database &apos;P60SDB&apos; with DB ID 3890827801.
Database version 19.0.0.0.0.
ADDM performed an analysis of instance p60sdb2, numbered 2 and hosted at
mcracpoc2.example.com.

Activity During the Analysis Period
-----------------------------------
Total database time was 132423 seconds.
The average number of active sessions was 175.63.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       175.63 | 100	   1
2  Top SQL Statements	      174.6 | 99.41	   1
3  &quot;User I/O&quot; wait Class	99.04 | 56.39	     0
4  Global Cache Messaging     73.53 | 41.87	   1
5  Undersized SGA	      23.83 | 13.57	   1
6  Buffer Busy - Hot Objects  17.17 | 9.78	   0


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 175.86 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time on this instance.
The instance was consuming 66959 kilo bits per second of interconnect
bandwidth.
0% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 98% for database lock management.
The average latency for 8K interconnect messages was 47609 microseconds.
The instance is using the private interconnect device &quot;fg-priv:1&quot; with IP
address 169.254.26.102 and source &quot;?&quot;.

   Recommendation 1: Host Configuration
   Estimated benefit is 175.63 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle&apos;s recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 73.53 active sessions, 41.87% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 73.54 active sessions, 41.87% of total activity.


Finding 2: Top SQL Statements
Impact is 174.83 active sessions, 99.41% of total activity.
-----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

   Recommendation 1: SQL Tuning
   Estimated benefit is 174.6 active sessions, 99.41% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      &quot;bhdvtsvjhgvrh&quot;.
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND
	 (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 100% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;bhdvtsvjhgvrh&quot; was executed 13530723 times
      and had an average elapsed time of 0.0085 seconds.


Finding 3: &quot;User I/O&quot; wait Class
Impact is 99.18 active sessions, 56.39% of total activity.
----------------------------------------------------------
Wait class &quot;User I/O&quot; was consuming significant database time.
Waits for I/O to temporary tablespaces were not consuming significant database
time.
The throughput of the I/O subsystem was not significantly lower than expected.

   No recommendations are available.


Finding 4: Global Cache Messaging
Impact is 73.62 active sessions, 41.87% of total activity.
----------------------------------------------------------
Inter-instance messaging was consuming significant database time on this
instance.

   Recommendation 1: Application Analysis
   Estimated benefit is 73.53 active sessions, 41.87% of total activity.
   ---------------------------------------------------------------------
   Action
      Look at the &quot;Top SQL Statements&quot; finding for SQL statements consuming
      significant time on Cluster waits. For example, the SELECT statement
      with SQL_ID &quot;bhdvtsvjhgvrh&quot; is responsible for 100% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 73.54 active sessions, 41.87% of total activity.


Finding 5: Undersized SGA
Impact is 23.86 active sessions, 13.57% of total activity.
----------------------------------------------------------
The SGA was inadequately sized, causing additional I/O or hard parses.
The value of parameter &quot;sga_target&quot; was &quot;14336 M&quot; during the analysis period.

   Recommendation 1: Database Configuration
   Estimated benefit is 9.89 active sessions, 5.63% of total activity.
   -------------------------------------------------------------------
   Action
      Increase the size of the SGA by setting the parameter &quot;sga_target&quot; to
      17920 M.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;User I/O&quot; was consuming significant database time.
      Impact is 99.04 active sessions, 56.39% of total activity.


Finding 6: Buffer Busy - Hot Objects
Impact is 17.19 active sessions, 9.78% of total activity.
---------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 17.17 active sessions, 9.78% of total activity.
	 Inter-instance messaging was consuming significant database time on
	 this instance.
	 Impact is 73.53 active sessions, 41.87% of total activity.
	    Wait class &quot;Cluster&quot; was consuming significant database time.
	    Impact is 73.54 active sessions, 41.87% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Warnings
--------
The flushing of snapshots 47 and 48 took 84 seconds which is 11% of the
analysis period time. This may reduce the reliability of the ADDM analysis.

Miscellaneous Information
-------------------------
Wait class &quot;Application&quot; was not consuming significant database time.
Wait class &quot;Commit&quot; was not consuming significant database time.
Wait class &quot;Concurrency&quot; was not consuming significant database time.
Wait class &quot;Configuration&quot; was not consuming significant database time.
CPU was not a bottleneck for the instance.
Wait class &quot;Network&quot; was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.
Hard parsing of SQL statements was not consuming significant database time.

</pre>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="9997"></a>
<a class="awr" name="9997"></a><h3 class="awr">RAC Statistics</h3>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays information about RAC instances">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th><th class="awrnobg" scope="col"></th></tr>
<tr><td scope="row" class='awrnc'>Number of Instances:</td><td align="right" class='awrnc'>    2</td><td align="right" class='awrnc'>	 2</td></tr>
<tr><td scope="row" class='awrc'>Number of LMS's:</td><td align="right" class='awrc'>	 6</td><td align="right" class='awrc'>	  6</td></tr>
<tr><td scope="row" class='awrnc'>Number of realtime LMS's:</td><td align="right" class='awrnc'>    6</td><td align="right" class='awrnc'>    6</td><td class='awrnc'> (0 priority changes)</td></tr>
</table><p />
Global Cache Load Profile
<p />
<table border="0" width="600" class="tdiff" summary="This table displays information about global cache load
		     profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Per Second</th><th class="awrbg" scope="col">Per Transaction</th></tr>
<tr><td scope="row" class='awrnc'>Global Cache blocks received:</td><td align="right" class='awrnc'>		     2.16</td><td align="right" class='awrnc'>		       6.41</td></tr>
<tr><td scope="row" class='awrc'>Global Cache blocks served:</td><td align="right" class='awrc'>		 7.23</td><td align="right" class='awrc'>		 21.46</td></tr>
<tr><td scope="row" class='awrnc'>GCS/GES messages received:</td><td align="right" class='awrnc'>	     37,095.94</td><td align="right" class='awrnc'>	      110,051.69</td></tr>
<tr><td scope="row" class='awrc'>GCS/GES messages sent:</td><td align="right" class='awrc'>	       32,358.64</td><td align="right" class='awrc'>		95,997.64</td></tr>
<tr><td scope="row" class='awrnc'>DBWR Fusion writes:</td><td align="right" class='awrnc'>		   0.08</td><td align="right" class='awrnc'>		     0.23</td></tr>
<tr><td scope="row" class='awrc'>Estd Interconnect traffic (KB)</td><td align="right" class='awrc'>	       13,640.50</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
Global Cache Efficiency Percentages (Target local+remote 100%)
<p />
<table border="0" width="600" class="tdiff" summary="This table displays global cache efficiency percentages">
<tr><td scope="row" class='awrnc'>Buffer access -  local cache %:</td><td align="right" class='awrnc'>	97.15</td></tr>
<tr><td scope="row" class='awrc'>Buffer access - remote cache %:</td><td align="right" class='awrc'>   0.00</td></tr>
<tr><td scope="row" class='awrnc'>Buffer access -	  disk %:</td><td align="right" class='awrnc'>	 2.85</td></tr>
<tr><td scope="row" class='awrc'>Global Cache Locality	      %:</td><td align="right" class='awrc'>  80.63</td></tr>
</table><p />
Global Cache and Enqueue Services - Workload Characteristics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays workload characteristics for global
		    cache and enqueue services">
<tr><td scope="row" class='awrnc'>Avg global cache cr block receive time (us):</td><td align="right" class='awrnc'>	   49,380.5</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache current block receive time (us):</td><td align="right" class='awrc'>	       6,749.4</td></tr>
<tr><td scope="row" class='awrnc'>Avg LMS process busy %:</td><td align="right" class='awrnc'>		  14.1</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache cr block build time (us):</td><td align="right" class='awrc'> 	  101.6</td></tr>
<tr><td scope="row" class='awrnc'>Global cache log flushes for cr blocks served %:</td><td align="right" class='awrnc'> 	    6.5</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache cr block flush time (us):</td><td align="right" class='awrc'> 	4,175.8</td></tr>
<tr><td scope="row" class='awrnc'>Avg global cache current block pin time (us):</td><td align="right" class='awrnc'>	    10,000.0</td></tr>
<tr><td scope="row" class='awrc'>Global cache log flushes for current blocks served %:</td><td align="right" class='awrc'>	       3.9</td></tr>
<tr><td scope="row" class='awrnc'>Avg global cache current block flush time (us):</td><td align="right" class='awrnc'>	       5,316.5</td></tr>
<tr><td scope="row" class='awrc'>Avg global enqueue get time (us):</td><td align="right" class='awrc'>	       1,922.4</td></tr>
</table><p />
Global Cache and Enqueue Services - Messaging Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays messaging statistics for Global Cache
		    and Enqueue Services">
<tr><td scope="row" class='awrnc'>Avg message sent queue time (us):</td><td align="right" class='awrnc'>	   387.5</td></tr>
<tr><td scope="row" class='awrc'>Avg message sent queue time on ksxp (us):</td><td align="right" class='awrc'>	      39,816.8</td></tr>
<tr><td scope="row" class='awrnc'>Avg message received kernel queue time (us):</td><td align="right" class='awrnc'>	       42.5</td></tr>
<tr><td scope="row" class='awrc'>Avg message received queue time (us):</td><td align="right" class='awrc'>	      12.2</td></tr>
<tr><td scope="row" class='awrnc'>Avg GCS message process time (us):</td><td align="right" class='awrnc'>	     11.8</td></tr>
<tr><td scope="row" class='awrc'>Avg GES message process time (us):</td><td align="right" class='awrc'> 	   38.5</td></tr>
<tr><td scope="row" class='awrnc'>% of direct sent messages:</td><td align="right" class='awrnc'>    3.67</td></tr>
<tr><td scope="row" class='awrc'>% of indirect sent messages:</td><td align="right" class='awrc'>   96.20</td></tr>
<tr><td scope="row" class='awrnc'>% of flow controlled messages:</td><td align="right" class='awrnc'>	 0.14</td></tr>
</table><p />
<hr />
<p />Cluster Interconnect<p />
<ul>
<li class="awr"> if Public/Source at End snap is different a '*' is displayed</li>
</ul>
<table border="0" class="tdiff" summary="Cluster Interconnect. . if Public/Source at End snap is different a '*' is displayed"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Begin">Begin</th>
<th class="awrbg" colspan=" 2" id="End">End</th>
</tr><tr>
<th class="awrbg" scope="col">Interface</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Src">Src</th></tr>
<tr><td class='awrc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrclb'>169.254.26.102</td><td headers="Begin Pub" class='awrc'>N</td><td headers="Begin Source" class='awrc'>&#160;</td><td headers="End Pub" class='awrclb'>&#160;</td><td headers="End Src" class='awrcrb'>&#160;</td></tr>
</table><p />
<a class="awr" name="top"></a>
<h2 class="awr">
RAC Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#9997">RAC Report Summary</a></li>
<li class="awr"><a class="awr" href="#5100">Global Messaging Statistics</a></li>
<li class="awr"><a class="awr" href="#5200">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#5300">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#7">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#8">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#8790">Dynamic Remastering Statistics</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5100"></a>
<h3 class="awr">Global Messaging Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays global messaging statistics. Total, per second, per transaction values are displayed for each statistics"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>Cluster reconfiguration count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Domain reconfiguration count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim Broadcasts sent</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.39</td></tr>
<tr><td scope="row" class='awrnc'>Global Enqueue S-optim S-lock gets</td><td align="right" class='awrnc'>38,549</td><td align="right" class='awrnc'>51.16</td><td align="right" class='awrnc'>151.77</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim anti-locks crea</td><td align="right" class='awrc'>90</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.35</td></tr>
<tr><td scope="row" class='awrnc'>KA local message waits</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA local messages received</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA messages received actual</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA messages received logical</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA requests failed</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA requests succeeded</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Pseudo reconfiguration count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Pseudo rm reconfig count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>acks for commit broadcast(actual)</td><td align="right" class='awrnc'>393</td><td align="right" class='awrnc'>0.52</td><td align="right" class='awrnc'>1.55</td></tr>
<tr><td scope="row" class='awrc'>acks for commit broadcast(logical)</td><td align="right" class='awrc'>545</td><td align="right" class='awrc'>0.72</td><td align="right" class='awrc'>2.15</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(actual)</td><td align="right" class='awrnc'>800</td><td align="right" class='awrnc'>1.06</td><td align="right" class='awrnc'>3.15</td></tr>
<tr><td scope="row" class='awrc'>broadcast msgs on commit(logical)</td><td align="right" class='awrc'>1,116</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>4.39</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(wasted)</td><td align="right" class='awrnc'>505</td><td align="right" class='awrnc'>0.67</td><td align="right" class='awrnc'>1.99</td></tr>
<tr><td scope="row" class='awrc'>dynamically allocated gcs resources</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>dynamically allocated gcs shadows</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>flow control messages received</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>flow control messages sent</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gcs assume cvt</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs assume no cvt</td><td align="right" class='awrnc'>2,620</td><td align="right" class='awrnc'>3.48</td><td align="right" class='awrnc'>10.31</td></tr>
<tr><td scope="row" class='awrc'>gcs ast to fg</td><td align="right" class='awrc'>1,239</td><td align="right" class='awrc'>1.64</td><td align="right" class='awrc'>4.88</td></tr>
<tr><td scope="row" class='awrnc'>gcs ast xid</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs bidless ast to lms</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs blocked converts</td><td align="right" class='awrnc'>227</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>0.89</td></tr>
<tr><td scope="row" class='awrc'>gcs blocked cr converts</td><td align="right" class='awrc'>887</td><td align="right" class='awrc'>1.18</td><td align="right" class='awrc'>3.49</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible basts</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible cr basts (global)</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.13</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible cr basts (local)</td><td align="right" class='awrnc'>3,093</td><td align="right" class='awrnc'>4.10</td><td align="right" class='awrnc'>12.18</td></tr>
<tr><td scope="row" class='awrc'>gcs cr basts to PIs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs cr requests to slave</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs cr serve without current lock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs dbwr flush pi msgs</td><td align="right" class='awrnc'>998</td><td align="right" class='awrnc'>1.32</td><td align="right" class='awrnc'>3.93</td></tr>
<tr><td scope="row" class='awrc'>gcs dbwr write request msgs</td><td align="right" class='awrc'>59</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.23</td></tr>
<tr><td scope="row" class='awrnc'>gcs error msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs flash read serve requests to slave</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr block only</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs force cr grant</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr no current</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs forward cr to pinged instance</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs grant ast</td><td align="right" class='awrnc'>1,239</td><td align="right" class='awrnc'>1.64</td><td align="right" class='awrnc'>4.88</td></tr>
<tr><td scope="row" class='awrc'>gcs grant request in partial open</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate (compatible) converts</td><td align="right" class='awrnc'>334</td><td align="right" class='awrnc'>0.44</td><td align="right" class='awrnc'>1.31</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate (null) converts</td><td align="right" class='awrc'>794</td><td align="right" class='awrc'>1.05</td><td align="right" class='awrc'>3.13</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate cr (compatible) converts</td><td align="right" class='awrnc'>391,498</td><td align="right" class='awrnc'>519.55</td><td align="right" class='awrnc'>1,541.33</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate cr (null) converts</td><td align="right" class='awrc'>16,972,035</td><td align="right" class='awrc'>22,523.19</td><td align="right" class='awrc'>66,819.04</td></tr>
<tr><td scope="row" class='awrnc'>gcs lms flush pi msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs lms write request msgs</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gcs msgs process time(ms)</td><td align="right" class='awrnc'>329,886</td><td align="right" class='awrnc'>437.78</td><td align="right" class='awrnc'>1,298.76</td></tr>
<tr><td scope="row" class='awrc'>gcs msgs received</td><td align="right" class='awrc'>27,941,962</td><td align="right" class='awrc'>37,081.12</td><td align="right" class='awrc'>110,007.72</td></tr>
<tr><td scope="row" class='awrnc'>gcs new served by master</td><td align="right" class='awrnc'>156</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0.61</td></tr>
<tr><td scope="row" class='awrc'>gcs out-of-order msgs</td><td align="right" class='awrc'>1,092</td><td align="right" class='awrc'>1.45</td><td align="right" class='awrc'>4.30</td></tr>
<tr><td scope="row" class='awrnc'>gcs pings refused</td><td align="right" class='awrnc'>119</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>0.47</td></tr>
<tr><td scope="row" class='awrc'>gcs pkey conflicts retry</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs queued converts</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly failure unmount db</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass N-&gt;Xw ping local</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass N-&gt;Xw ping remote</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant X on assume</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant ast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant fg ast</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant immediate</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gcs recovery claim msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to fg</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid to lms</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to master</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs regular cr</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs resources for dynamic sga</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs retry convert request</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs shadows for dynamic sga</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs share recovery bast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs side channel msgs actual</td><td align="right" class='awrnc'>478</td><td align="right" class='awrnc'>0.63</td><td align="right" class='awrnc'>1.88</td></tr>
<tr><td scope="row" class='awrc'>gcs side channel msgs logical</td><td align="right" class='awrc'>5,773</td><td align="right" class='awrc'>7.66</td><td align="right" class='awrc'>22.73</td></tr>
<tr><td scope="row" class='awrnc'>gcs stale cr</td><td align="right" class='awrnc'>200</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>0.79</td></tr>
<tr><td scope="row" class='awrc'>gcs undo cr</td><td align="right" class='awrc'>465</td><td align="right" class='awrc'>0.62</td><td align="right" class='awrc'>1.83</td></tr>
<tr><td scope="row" class='awrnc'>gcs write notification msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs writes refused</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges msgs process time(ms)</td><td align="right" class='awrnc'>287</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>1.13</td></tr>
<tr><td scope="row" class='awrc'>ges msgs received</td><td align="right" class='awrc'>7,457</td><td align="right" class='awrc'>9.90</td><td align="right" class='awrc'>29.36</td></tr>
<tr><td scope="row" class='awrnc'>ges remote lock allocation</td><td align="right" class='awrnc'>188</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>0.74</td></tr>
<tr><td scope="row" class='awrc'>global posts dropped</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global posts queue time</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts queued</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global posts requested</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts sent</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>implicit batch messages received</td><td align="right" class='awrnc'>24,237</td><td align="right" class='awrnc'>32.16</td><td align="right" class='awrnc'>95.42</td></tr>
<tr><td scope="row" class='awrc'>implicit batch messages sent</td><td align="right" class='awrc'>23,848</td><td align="right" class='awrc'>31.65</td><td align="right" class='awrc'>93.89</td></tr>
<tr><td scope="row" class='awrnc'>lmd msg send time(ms)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>lms(s) msg send time(ms)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>messages flow controlled</td><td align="right" class='awrnc'>9,891</td><td align="right" class='awrnc'>13.13</td><td align="right" class='awrnc'>38.94</td></tr>
<tr><td scope="row" class='awrc'>messages queue sent actual</td><td align="right" class='awrc'>2,440,059</td><td align="right" class='awrc'>3,238.15</td><td align="right" class='awrc'>9,606.53</td></tr>
<tr><td scope="row" class='awrnc'>messages queue sent logical</td><td align="right" class='awrnc'>394,699</td><td align="right" class='awrnc'>523.80</td><td align="right" class='awrnc'>1,553.93</td></tr>
<tr><td scope="row" class='awrc'>messages received actual</td><td align="right" class='awrc'>4,739,875</td><td align="right" class='awrc'>6,290.18</td><td align="right" class='awrc'>18,660.93</td></tr>
<tr><td scope="row" class='awrnc'>messages received logical</td><td align="right" class='awrnc'>27,949,419</td><td align="right" class='awrnc'>37,091.02</td><td align="right" class='awrnc'>110,037.08</td></tr>
<tr><td scope="row" class='awrc'>messages sent directly</td><td align="right" class='awrc'>265,122</td><td align="right" class='awrc'>351.84</td><td align="right" class='awrc'>1,043.79</td></tr>
<tr><td scope="row" class='awrnc'>messages sent indirectly</td><td align="right" class='awrnc'>6,955,473</td><td align="right" class='awrnc'>9,230.45</td><td align="right" class='awrnc'>27,383.75</td></tr>
<tr><td scope="row" class='awrc'>messages sent not implicit batched</td><td align="right" class='awrc'>20,733</td><td align="right" class='awrc'>27.51</td><td align="right" class='awrc'>81.63</td></tr>
<tr><td scope="row" class='awrnc'>messages sent pbatched</td><td align="right" class='awrnc'>24,073,293</td><td align="right" class='awrnc'>31,947.10</td><td align="right" class='awrnc'>94,776.74</td></tr>
<tr><td scope="row" class='awrc'>msgs causing lmd to send msgs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>msgs causing lms(s) to send msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>msgs received kernel queue time (ns)</td><td align="right" class='awrc'>1,186,914,803,033</td><td align="right" class='awrc'>1,575,126,872.55</td><td align="right" class='awrc'>4,672,892,925.33</td></tr>
<tr><td scope="row" class='awrnc'>msgs received queue time (ms)</td><td align="right" class='awrnc'>340,441</td><td align="right" class='awrnc'>451.79</td><td align="right" class='awrnc'>1,340.32</td></tr>
<tr><td scope="row" class='awrc'>msgs received queued</td><td align="right" class='awrc'>27,949,419</td><td align="right" class='awrc'>37,091.02</td><td align="right" class='awrc'>110,037.08</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queue time (ms)</td><td align="right" class='awrnc'>958,572</td><td align="right" class='awrnc'>1,272.10</td><td align="right" class='awrnc'>3,773.91</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queue time on ksxp (ms)</td><td align="right" class='awrc'>175,927,384</td><td align="right" class='awrc'>233,469.12</td><td align="right" class='awrc'>692,627.50</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queued</td><td align="right" class='awrnc'>2,473,967</td><td align="right" class='awrnc'>3,283.14</td><td align="right" class='awrnc'>9,740.03</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queued on ksxp</td><td align="right" class='awrc'>4,418,426</td><td align="right" class='awrc'>5,863.59</td><td align="right" class='awrc'>17,395.38</td></tr>
<tr><td scope="row" class='awrnc'>number of broadcasted resources</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of directly freed master res</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of ges deadlock detected</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of lock borrowed by LMD</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of received ODPS messages</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of received RBA messages</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of resource borrowed by LMD</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of sent ODPS messages</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of sent RBA messages</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>process batch messages received</td><td align="right" class='awrc'>4,264,810</td><td align="right" class='awrc'>5,659.73</td><td align="right" class='awrc'>16,790.59</td></tr>
<tr><td scope="row" class='awrnc'>process batch messages sent</td><td align="right" class='awrnc'>4,175,053</td><td align="right" class='awrnc'>5,540.62</td><td align="right" class='awrnc'>16,437.22</td></tr>
<tr><td scope="row" class='awrc'>receiver cycle time</td><td align="right" class='awrc'>1,149,849</td><td align="right" class='awrc'>1,525.94</td><td align="right" class='awrc'>4,526.96</td></tr>
<tr><td scope="row" class='awrnc'>receiver loop count</td><td align="right" class='awrnc'>4,900,899</td><td align="right" class='awrnc'>6,503.87</td><td align="right" class='awrnc'>19,294.88</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5200"></a>
<h3 class="awr">Global CR Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays global CR served statistics. For each statistics, total value is shown"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th></tr>
<tr><td scope="row" class='awrc'>CR Block Requests</td><td align="right" class='awrc'>1,075</td></tr>
<tr><td scope="row" class='awrnc'>CURRENT Block Requests</td><td align="right" class='awrnc'>555</td></tr>
<tr><td scope="row" class='awrc'>Data Block Requests</td><td align="right" class='awrc'>1,075</td></tr>
<tr><td scope="row" class='awrnc'>Undo Block Requests</td><td align="right" class='awrnc'>15</td></tr>
<tr><td scope="row" class='awrc'>TX Block Requests</td><td align="right" class='awrc'>441</td></tr>
<tr><td scope="row" class='awrnc'>Current Results</td><td align="right" class='awrnc'>1,328</td></tr>
<tr><td scope="row" class='awrc'>Private results</td><td align="right" class='awrc'>5</td></tr>
<tr><td scope="row" class='awrnc'>Zero Results</td><td align="right" class='awrnc'>34</td></tr>
<tr><td scope="row" class='awrc'>Disk Read Results</td><td align="right" class='awrc'>261</td></tr>
<tr><td scope="row" class='awrnc'>Fail Results</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>Fairness Down Converts</td><td align="right" class='awrc'>827</td></tr>
<tr><td scope="row" class='awrnc'>Light Works</td><td align="right" class='awrnc'>1,721</td></tr>
<tr><td scope="row" class='awrc'>Flushes</td><td align="right" class='awrc'>91</td></tr>
<tr><td scope="row" class='awrnc'>Builds</td><td align="right" class='awrnc'>1,075</td></tr>
<tr><td scope="row" class='awrc'>Errors</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5300"></a>
<h3 class="awr">Global Current Server Statistics</h3>
<ul>
<li class="awr"> Pins	 = CURRENT Block Pin Operations </li>
<li class="awr"> Flushes = Redo Flush before CURRENT Block Served Operations</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global current served statistics"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th></tr>
<tr><td scope="row" class='awrc'>Pins</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>55.56</td><td align="right" class='awrc'>22.22</td><td align="right" class='awrc'>5.56</td><td align="right" class='awrc'>11.11</td><td align="right" class='awrc'>5.56</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Flushes</td><td align="right" class='awrnc'>158</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>24.68</td><td align="right" class='awrnc'>53.16</td><td align="right" class='awrnc'>22.15</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="7"></a>
<h2 class="awr">
Global Cache Transfer Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#5400">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#5450">Global Cache Transfer Times (us)</a></li>
<li class="awr"><a class="awr" href="#5460">Global Cache Transfer (Immediate)</a></li>
<li class="awr"><a class="awr" href="#5470">Global Cache Times (Immediate)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5400"></a>
<h3 class="awr">Global Cache Transfer Statistics</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> Busy	     (Busy) - Block Transfer impacted by Remote Contention </li>
<li class="awr"> Congested (Congst) - Block Transfer impacted by Remote System Load </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer stats. CR, blocks received, % immediate, % busy, % congestion are displayed for each instance and block class"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CR">CR</th>
<th class="awrbg" colspan=" 4" id="Current">Current</th>
</tr><tr>
<th class="awrbg" scope="col">Inst No</th><th class="awrbg" scope="col">Block	Class  </th><th class="awrbg" scope="col" id="Blocks|Received">Blocks Received</th><th class="awrbg" scope="col" id="%|Immed">% Immed</th><th class="awrbg" scope="col" id="%|Busy">% Busy</th><th class="awrbg" scope="col" id="%|Congst">% Congst</th><th class="awrbg" scope="col" id="Blocks|Received">Blocks Received</th><th class="awrbg" scope="col" id="%|Immed">% Immed</th><th class="awrbg" scope="col" id="%|Busy">% Busy</th><th class="awrbg" scope="col" id="%|Congst">% Congst</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>data block</td><td align="right" headers="CR Blocks|Received" class='awrclb'>278</td><td align="right" headers="CR %|Immed" class='awrc'>69.06</td><td align="right" headers="CR %|Busy" class='awrc'>30.94</td><td align="right" headers="CR %|Congst" class='awrc'>0.00</td><td align="right" headers="Current Blocks|Received" class='awrclb'>1,186</td><td align="right" headers="Current %|Immed" class='awrc'>62.82</td><td align="right" headers="Current %|Busy" class='awrc'>36.76</td><td align="right" headers="Current %|Congst" class='awrcrb'>0.42</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>Others</td><td align="right" headers="CR Blocks|Received" class='awrnclb'>33</td><td align="right" headers="CR %|Immed" class='awrnc'>100.00</td><td align="right" headers="CR %|Busy" class='awrnc'>0.00</td><td align="right" headers="CR %|Congst" class='awrnc'>0.00</td><td align="right" headers="Current Blocks|Received" class='awrnclb'>78</td><td align="right" headers="Current %|Immed" class='awrnc'>11.54</td><td align="right" headers="Current %|Busy" class='awrnc'>88.46</td><td align="right" headers="Current %|Congst" class='awrncrb'>0.00</td></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>undo header</td><td align="right" headers="CR Blocks|Received" class='awrclb'>21</td><td align="right" headers="CR %|Immed" class='awrc'>95.24</td><td align="right" headers="CR %|Busy" class='awrc'>4.76</td><td align="right" headers="CR %|Congst" class='awrc'>0.00</td><td align="right" headers="Current Blocks|Received" class='awrclb'>17</td><td align="right" headers="Current %|Immed" class='awrc'>0.00</td><td align="right" headers="Current %|Busy" class='awrc'>100.00</td><td align="right" headers="Current %|Congst" class='awrcrb'>0.00</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo block</td><td align="right" headers="CR Blocks|Received" class='awrnclb'>1</td><td align="right" headers="CR %|Immed" class='awrnc'>100.00</td><td align="right" headers="CR %|Busy" class='awrnc'>0.00</td><td align="right" headers="CR %|Congst" class='awrnc'>0.00</td><td align="right" headers="Current Blocks|Received" class='awrnclb'>&#160;</td><td align="right" headers="Current %|Immed" class='awrnc'>&#160;</td><td align="right" headers="Current %|Busy" class='awrnc'>&#160;</td><td align="right" headers="Current %|Congst" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5450"></a>
<h3 class="awr">Global Cache Transfer Times (us)</h3>
<ul>
<li class="awr"> Avg Time - average time of all blocks (Immed,Busy,Congst) in us </li>
<li class="awr"> Immed, Busy, Congst -	Average times in us </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer time statistics"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 4" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col">Inst No</th><th class="awrbg" scope="col">Block	Class  </th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Congst">Congst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Congst">Congst</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>data block</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>57114</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>80263</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>5434</td><td align="right" headers="CRAvgTime(us) Congst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>6505</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>6176</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>7106</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrcrb'>3180</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>others</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>31409</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>31409</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Congst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>14071</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>998</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>15776</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>undo header</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>743</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>750</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>608</td><td align="right" headers="CRAvgTime(us) Congst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>2897</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>2897</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo block</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>342</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>342</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Congst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5460"></a>
<h3 class="awr">Global Cache Transfer (Immediate)</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> % of Blocks Received requiring 2 or 3 hops </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer (immediate) statistics"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="CR">CR</th>
<th class="awrbg" colspan=" 3" id="Current">Current</th>
</tr><tr>
<th class="awrbg" scope="col">Src Inst#</th><th class="awrbg" scope="col">Block   Class  </th><th class="awrbg" scope="col">Blocks Lost</th><th class="awrbg" scope="col" id="ImmedBlks|Received">Immed Blks Received</th><th class="awrbg" scope="col" id="%|2hop">% 2hop</th><th class="awrbg" scope="col" id="%|3hop">% 3hop</th><th class="awrbg" scope="col" id="ImmedBlks|Received">Immed Blks Received</th><th class="awrbg" scope="col" id="%|2hop">% 2hop</th><th class="awrbg" scope="col" id="%|3hop">% 3hop</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>data block</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrclb'>192</td><td align="right" headers="CR %|2hop" class='awrc'>100.00</td><td align="right" headers="CR %|3hop" class='awrc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrclb'>745</td><td align="right" headers="Current %|2hop" class='awrc'>100.00</td><td align="right" headers="Current %|3hop" class='awrcrb'>0.00</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>others</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrnclb'>33</td><td align="right" headers="CR %|2hop" class='awrnc'>100.00</td><td align="right" headers="CR %|3hop" class='awrnc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrnclb'>9</td><td align="right" headers="Current %|2hop" class='awrnc'>100.00</td><td align="right" headers="Current %|3hop" class='awrncrb'>0.00</td></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>undo header</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrclb'>20</td><td align="right" headers="CR %|2hop" class='awrc'>100.00</td><td align="right" headers="CR %|3hop" class='awrc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrclb'>&#160;</td><td align="right" headers="Current %|2hop" class='awrc'>&#160;</td><td align="right" headers="Current %|3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrnclb'>1</td><td align="right" headers="CR %|2hop" class='awrnc'>100.00</td><td align="right" headers="CR %|3hop" class='awrnc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrnclb'>&#160;</td><td align="right" headers="Current %|2hop" class='awrnc'>&#160;</td><td align="right" headers="Current %|3hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5470"></a>
<h3 class="awr">Global Cache Times (Immediate)</h3>
<ul>
<li class="awr"> Blocks Lost, 2-hop and 3-hop Average times in (us) </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache times (immediate) statistics"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 3" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col">Src Inst#</th><th class="awrbg" scope="col">Block   Class  </th><th class="awrbg" scope="col">Lost Time</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="2hop">2hop</th><th class="awrbg" scope="col" id="3hop">3hop</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="2hop">2hop</th><th class="awrbg" scope="col" id="3hop">3hop</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>data block</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrclb'>80263</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrc'>80263</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrclb'>6176</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrc'>6176</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>others</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnclb'>31409</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrnc'>31409</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnclb'>998</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrnc'>998</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>undo header</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrclb'>750</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrc'>750</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnclb'>342</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrnc'>342</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="8"></a>
<h2 class="awr">
Interconnect Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#7800">Interconnect Latency Stats</a></li>
<li class="awr"><a class="awr" href="#7900">Interconnect Throughput by Client</a></li>
<li class="awr"><a class="awr" href="#8000">Interconnect Device Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7800"></a>
<h3 class="awr">Interconnect Ping Latency Statistics</h3>
<ul>
<li class="awr"> Ping latency of the roundtrip of a message from this instance to </li>
<li class="awr"> target instances.  </li>
<li class="awr"> The target instance is identified by an instance number. </li>
<li class="awr"> Average and standard deviation of ping latency is given in microseconds </li>
<li class="awr"> for message sizes of 500 bytes and 8K. </li>
<li class="awr"> Note that latency of a message from the instance to itself is used as </li>
<li class="awr"> control, since message latency can include wait for CPU</li>
</ul>
<table border="0" class="tdiff" summary="This table displays IC ping latency statistics"><tr><th class="awrbg" scope="col">Target Instance</th><th class="awrbg" scope="col">500B Ping Count</th><th class="awrbg" scope="col">Avg Latency 500B msg</th><th class="awrbg" scope="col">Stddev 500B msg</th><th class="awrbg" scope="col">8K Ping Count</th><th class="awrbg" scope="col">Avg Latency 8K msg</th><th class="awrbg" scope="col">Stddev 8K msg</th></tr>
<tr><td align="right" class='awrc'>1</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>48130</td><td align="right" class='awrc'>373.77</td><td align="right" class='awrc'>73</td><td align="right" class='awrc'>47609</td><td align="right" class='awrc'>358.16</td></tr>
<tr><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>289</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>73</td><td align="right" class='awrnc'>273</td><td align="right" class='awrnc'>0.14</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7900"></a>
<h3 class="awr">Interconnect Throughput by Client</h3>
<ul>
<li class="awr"> Throughput of interconnect usage by major consumers </li>
<li class="awr"> All throughput numbers are megabytes per second</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Interconnect throughput by client statistics"><tr><th class="awrbg" scope="col">Used By</th><th class="awrbg" scope="col">Send Mbytes/sec</th><th class="awrbg" scope="col">Receive Mbytes/sec</th></tr>
<tr><td scope="row" class='awrc'>Global Cache</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Parallel Query</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DB Locks</td><td align="right" class='awrc'>8.04</td><td align="right" class='awrc'>10.05</td></tr>
<tr><td scope="row" class='awrnc'>DB Streams</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8000"></a>
<h3 class="awr">Interconnect Device Statistics</h3>
<ul>
<li class="awr"> Throughput and errors of interconnect devices (at OS level) </li>
<li class="awr"> All throughput numbers are megabytes per second</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Interconnect device statistics. IP address, public, source, etc. are displayed for each device"><tr><th class="awrbg" scope="col">Device Name</th><th class="awrbg" scope="col">IP Address</th><th class="awrbg" scope="col">Public</th><th class="awrbg" scope="col">Source</th><th class="awrbg" scope="col">Send Mbytes/sec</th><th class="awrbg" scope="col">Send Errors</th><th class="awrbg" scope="col">Send Dropped</th><th class="awrbg" scope="col">Send Buffer Overrun</th><th class="awrbg" scope="col">Send Carrier Lost</th><th class="awrbg" scope="col">Receive Mbytes/sec</th><th class="awrbg" scope="col">Receive Errors</th><th class="awrbg" scope="col">Receive Dropped</th><th class="awrbg" scope="col">Receive Buffer Overrun</th><th class="awrbg" scope="col">Receive Frame Errors</th></tr>
<tr><td scope="row" class='awrc'>fg-priv:1</td><td class='awrc'>169.254.26.102</td><td class='awrc'>NO</td><td class='awrc'>&#160;</td>
<td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td>
<td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="8790"></a>
<h3 class="awr">Dynamic Remastering Statistics</h3>
<ul>
<li class="awr"> Times are in seconds </li>
<li class="awr"> Affinity objects - Affinity objects mastered at the begin/end snapshot </li>
<li class="awr"> Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot</li>
</ul>
<table border="0" class="tdiff" summary="Dynamic Remastering Statistics. . Times are in seconds. Affinity objects - Affinity objects mastered at the begin/end snapshot. Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot"><tr><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Remaster Op</th><th class="awrbg" scope="col">Begin Snap</th><th class="awrbg" scope="col">End Snap</th></tr>
<tr><td scope="row" class='awrc'>remaster ops</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remastered objects</td><td align="right" class='awrnc'>81</td><td align="right" class='awrnc'>81.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>replayed locks received</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>replayed locks sent</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resources cleaned</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remaster time (s)</td><td align="right" class='awrnc'>0.3</td><td align="right" class='awrnc'>0.31</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>freeze time (s)</td><td align="right" class='awrc'>0.0</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cleanup time (s)</td><td align="right" class='awrnc'>0.1</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>replay time (s)</td><td align="right" class='awrc'>0.1</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fixwrite time (s)</td><td align="right" class='awrnc'>0.0</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sync time (s)</td><td align="right" class='awrc'>0.1</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>affinity objects</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>52</td></tr>
<tr><td scope="row" class='awrc'>read-mostly objects</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>100</td></tr>
<tr><td scope="row" class='awrnc'>affinity objects (other inst)</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>3</td></tr>
<tr><td scope="row" class='awrc'>read-mostly objects (persistent)</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<p />
End of Report
</body></html>
Report written to awr.html
SQL> Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

WORKLOAD REPOSITORY REPORT (RAC)

Database Summary
~~~~~~~~~~~~~~~~
				   Database					   Snapshot Ids     Number of Instances     Number of Hosts	Report Total (minutes)
-----------------------------------------------------------------------------	-----------------   ------------------	 ------------------   ------------------------
	 Id Name      Unique Name Role		   Edition RAC CDB Block Size	   Begin      End   In Report	 Total	 In Report    Total	  DB time Elapsed time
----------- --------- ----------- ---------------- ------- --- --- ----------	-------- --------   --------- --------	 --------- --------   ----------- ------------
 3890827801 P60SDB    p60sdb	  PRIMARY	   EE	   YES NO	 8192	      47       48	    2	     2		 2	  2	 4,724.52	 12.56
Database Instances Included In Report
-> Listed in order of instance number, I#
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
																      Avg Active
  I# Instance  Host	  Startup	  Begin Snap Time End Snap Time   Release	  Elapsed Time(min) DB time(min) Up Time(hrs)	Sessions Platform
---- --------- ---------- --------------- --------------- --------------- --------------- ----------------- ------------ ------------ ---------- ---------------
   1 p60sdb1   mcracpoc1. 20-Feb-20 21:11 20-Feb-20 21:32 20-Feb-20 21:45 19.0.0.0.0		      12.55	2,517.47	 0.55	  200.60 Linux x86 64-bi
   2 p60sdb2   mcracpoc2. 20-Feb-20 21:11 20-Feb-20 21:32 20-Feb-20 21:45 19.0.0.0.0		      12.55	2,207.06	 0.55	  175.86 Linux x86 64-bi

Top ADDM Findings by Average Active Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Finding Name				 Avg act Percen Task Name		       Begin Snap Time End Snap Time
---------------------------------------- ------- ------ ------------------------------ --------------- ---------------
Interconnect Latency			  376.46 1.E+02 ADDM:3890827801_48	       20-Feb-20 21:32 20-Feb-20 21:45
Top SQL Statements			  376.46  98.26 ADDM:3890827801_48	       20-Feb-20 21:32 20-Feb-20 21:45
Global Cache Messaging			  376.46  58.53 ADDM:3890827801_48	       20-Feb-20 21:32 20-Feb-20 21:45
"User I/O" wait Class			  376.46  36.92 ADDM:3890827801_48	       20-Feb-20 21:32 20-Feb-20 21:45
Buffer Busy - Hot Objects		  376.46  15.44 ADDM:3890827801_48	       20-Feb-20 21:32 20-Feb-20 21:45
Cache Sizes
-> All values are in Megabytes
-> Listed in order of instance number, I#
-> End values displayed only if different from Begin values
~~~~~~~~~~~
	 Memory Target	       Sga Target	    DB Cache	      Shared Pool	   Large Pool	       Java Pool	  Streams Pool	       PGA Target
       -----------------   -----------------   -----------------   -----------------   -----------------   -----------------   -----------------   -----------------
  I#	  Begin      End      Begin	 End	  Begin      End      Begin	 End	  Begin      End      Begin	 End	  Begin      End      Begin	 End   Log Buffer
----   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   ----------
   1			     14,336		 11,392 	      2,496		    160 						      8,096		    140.2
   2			     14,336		 11,168 	      2,720		    160 						      8,096		    140.2
 ~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~
 Avg			     14,336		 11,280 	      2,608		    160 						      8,096		    140.2
 Min			     14,336		 11,168 	      2,496		    160 						      8,096		    140.2
 Max			     14,336		 11,392 	      2,720		    160 						      8,096		    140.2

OS Statistics By Instance		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Listed in order of instance number, I#
-> End values are diplayed only if different from begin values

	      CPU		Load			  % CPU 				  Time (s)			 Memory 	    End Values
       -----------------   -------------   ----------------------------------	--------------------------------------------   ----------   -------------------------
  I#   #CPUs #Core #Sckt    Begin    End   % Busy  % Usr  % Sys  % WIO	% Idl		  Busy		 Idle	       Total	       MB   #CPU #Cor #Sck Memory (M)
----   ----- ----- -----   ------ ------   ------ ------ ------ ------ ------	-------------- -------------- --------------   ----------   ---- ---- ---- ----------
   1	 128	64     4     18.7    5.5     17.4   12.3    4.0    9.4	 82.6	      16,133.9	     76,382.2	    92,516.0   2.0643E+06
   2	 128	64     4    101.3    8.6      9.1    5.3    2.9   22.3	 90.9	       8,341.1	     83,131.3	    91,472.4   2.0643E+06
 ~~~										~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum										      24,475.0	    159,513.4	   183,988.4
			  --------------------------------------------------------------------------------------------------------------------


Time Model				 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

					 SQL Exec		     Hard Parse
  I#	DB time (s)	DB CPU (s)	  Ela (s)  Parse Ela (s)	Ela (s) PL/SQL Ela (s)	 Java Ela (s)	 bg time (s)	 bg CPU (s)
---- -------------- -------------- -------------- -------------- -------------- -------------- -------------- -------------- --------------
   1	  151,048.1	  14,550.6	150,941.9	    87.9	    2.5 	 694.2		  0.0	     1,005.6	    1,220.4
   2	  132,423.4	   6,776.0	132,166.2	    16.1	   15.9 	 220.3		  0.0	       902.4	    1,129.4
 ~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum	  283,471.5	  21,326.6	283,108.1	   104.0	   18.5 	 914.5		  0.0	     1,908.0	    2,349.8
 Avg	  141,735.7	  10,663.3	141,554.0	    52.0	    9.2 	 457.2		  0.0	       954.0	    1,174.9
 Std	   13,169.6	   5,497.4	 13,276.5	    50.7	    9.5 	 335.1		  0.0		73.0	       64.4
			  --------------------------------------------------------------------------------------------------------------------

Time Model - % of DB time		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]

							      % DB time 							      % bg time
		      ----------------------------------------------------------------------------------------- 		   --------------
	    % Total													 % Total
  I#	    DB time	      DB CPU   SQL Exec Ela	 Parse Ela     Hard Parse     PL/SQL Ela       Java Ela 	 bg time	   bg CPU
---- --------------   -------------- -------------- -------------- -------------- -------------- --------------   --------------   --------------
   1	       53.3		 9.6	       99.9	       0.1	      0.0	     0.0	    0.0 	    52.7	    121.4
   2	       46.7		 5.1	       99.8	       0.0	      0.0	     0.0	    0.0 	    47.3	    125.2
 ~~~ ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~
 Avg	       50.0		 7.4	       99.9	       0.0	      0.0	     0.0	    0.0 	    50.0	    123.3
			  --------------------------------------------------------------------------------------------------------------------


Foreground Wait Classes -  % of Total DB timeDB/Inst: P60SDB/p60sdb1  Snaps: 4
-> Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time

	  User I/O	 Sys I/O	 Other	      Applic	    Commit	 Network      Concurcy	      Config	   Cluster	   Admin     Scheduler	      DB CPU
---- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- -------------
	      36.9	     0.0	   0.0		 0.0	       0.0	     0.0	   0.1		 0.0	      58.5	     N/A	   N/A		 7.5
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Classes 		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

  I#   User I/O(s)    Sys I/O(s)      Other(s)	  Applic (s)	Commit (s)   Network (s)  Concurcy (s)	  Config (s)   Cluster (s)     Admin (s) Scheduler (s)	  DB CPU (s)	    DB time
---- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- --------------
   1	  29,989.7	     0.0	  41.4		 0.0	       N/A	     0.0	 259.4		 0.0	 110,492.9	     N/A	   N/A	    14,550.6	  151,048.1
   2	  74,679.9	     3.1	  25.8		 0.0	       0.0	     0.0	   8.6		 1.5	  55,451.1	     N/A	   N/A	     6,776.0	  132,423.4
 ~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum	 104,669.5	     3.2	  67.2		 0.0	       0.0	     0.0	 267.9		 1.5	 165,944.1	     0.0	   0.0	    21,326.6	  283,471.5
 Avg	  52,334.8	     1.6	  33.6		 0.0	       0.0	     0.0	 134.0		 0.8	  82,972.0	     N/A	   N/A	    10,663.3	  141,735.7
 Std	  31,600.7	     2.2	  11.0		 0.0	       N/A	     0.0	 177.4		 1.1	  38,920.4	     N/A	   N/A	     5,497.4	   13,169.6
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Classes -  % of DB time  DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time

										      % DB time
       -----------------------------------------------------------------------------------------------------------------------------------------------------------------------
																						       % Total
  I#	    User I/O	   Sys I/O	   Other	Applic	      Commit	   Network	Concurcy	Config	     Cluster	     Admin     Scheduler	DB CPU	       DB time
----   ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- -------------	 -------------
   1		19.9	       0.0	     0.0	   0.0		 N/A	       0.0	     0.2	   0.0		73.2	       N/A	     N/A	   9.6		  53.3
   2		56.4	       0.0	     0.0	   0.0		 0.0	       0.0	     0.0	   0.0		41.9	       N/A	     N/A	   5.1		  46.7
 ~~~   ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~
 Avg		38.1	       0.0	     0.0	   0.0		 0.0	       0.0	     0.1	   0.0		57.5	       N/A	     N/A	   7.4
			  --------------------------------------------------------------------------------------------------------------------


Top Timed Events			 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time '	       : Per-instance 'Wait Time Avg ' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *   Cluster	  gc cr multi block grant			  803,743	0.0	 121,669.90 151.38ms	42.92	  147.85ms   121.21ms	174.49ms    37.68ms    2
       User I/O   db file parallel read 			  942,595	0.0	  77,758.15  82.49ms	27.43	   77.68ms    52.21ms	103.15ms    36.02ms    2
       Cluster	  gc cr grant busy				  787,098	0.0	  43,347.50  55.07ms	15.29	   53.50ms    48.94ms	 58.06ms     6.45ms    2
       User I/O   db file sequential read			2,514,696	0.0	  26,943.96  10.71ms	 9.50	   10.94ms     7.52ms	 14.36ms     4.84ms    2
		  DB CPU					      N/A	N/A	  21,326.60		 7.52						       2
       Cluster	  gc buffer busy acquire			      921	0.0	     456.32 495.47ms	 0.16	  509.30ms   477.04ms	541.56ms    45.63ms    2
       Cluster	  gc cr grant 2-way				    4,744	0.0	     174.58  36.80ms	 0.06	   40.32ms    33.46ms	 47.17ms     9.70ms    2
       Cluster	  gc cr multi block mixed			      280	0.0	     149.15 532.69ms	 0.05	  524.56ms   508.96ms	540.15ms    22.05ms    2
       Cluster	  gc cr block lost				      236	0.0	     142.34 603.14ms	 0.05	  601.31ms   583.34ms	619.28ms    25.42ms    2
       Concurrenc library cache load lock			      460	0.0	      96.63 210.07ms	 0.03	  210.07ms   210.07ms	210.07ms	       2

   1   Cluster	  gc cr multi block grant			  455,075	0.0	  79,407.97 174.49ms	52.57
       Cluster	  gc cr grant busy				  529,123	0.0	  30,722.80  58.06ms	20.34
       User I/O   db file parallel read 			  382,228	0.0	  19,957.44  52.21ms	13.21
		  DB CPU					      N/A	N/A	  14,550.57		 9.63
       User I/O   db file sequential read			1,340,728	0.0	  10,084.60   7.52ms	 6.68
       Cluster	  gc buffer busy acquire			      263	0.0	     142.43 541.56ms	 0.09
       Cluster	  gc cr multi block mixed			      213	0.0	     115.05 540.15ms	 0.08
       Concurrenc library cache load lock			      460	0.0	      96.63 210.07ms	 0.06
       Cluster	  gc cr block lost				      130	0.0	      80.51 619.28ms	 0.05
       Concurrenc cursor: pin S wait on X			      259	0.0	      76.04 293.58ms	 0.05

   2   User I/O   db file parallel read 			  560,367	0.0	  57,800.71 103.15ms	43.65
       Cluster	  gc cr multi block grant			  348,668	0.0	  42,261.94 121.21ms	31.91
       User I/O   db file sequential read			1,173,968	0.0	  16,859.35  14.36ms	12.73
       Cluster	  gc cr grant busy				  257,975	0.0	  12,624.70  48.94ms	 9.53
		  DB CPU					      N/A	N/A	   6,776.02		 5.12
       Cluster	  gc buffer busy acquire			      658	0.0	     313.89 477.04ms	 0.24
       Cluster	  gc cr grant 2-way				    3,589	0.0	     120.10  33.46ms	 0.09
       Applicatio enq: TX - row lock contention 			1	0.0	      66.98  66.98 s	 0.05
       Cluster	  gc cr block lost				      106	0.0	      61.83 583.34ms	 0.05
       User I/O   read by other session 			    1,157	0.0	      39.61  34.24ms	 0.03
			  --------------------------------------------------------------------------------------------------------------------

Top Timed Foreground Events		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Foreground Activity is captured in release 11g and above
-> For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time'	      : Per-instance 'Wait Time Avg' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *   Cluster	  gc cr multi block grant			  803,626	0.0	 121,665.66 151.40ms	42.92	  147.87ms   121.22ms	174.52ms    37.69ms    2
       User I/O   db file parallel read 			  942,590	0.0	  77,758.12  82.49ms	27.43	   77.68ms    52.21ms	103.15ms    36.02ms    2
       Cluster	  gc cr grant busy				  784,367	0.0	  43,289.15  55.19ms	15.27	   53.61ms    49.02ms	 58.20ms     6.50ms    2
       User I/O   db file sequential read			2,505,137	0.0	  26,862.92  10.72ms	 9.48	   10.95ms     7.52ms	 14.37ms     4.85ms    2
		  DB CPU					      N/A	N/A	  21,326.60		 7.52						       2
       Cluster	  gc buffer busy acquire			      898	0.0	     446.30 496.99ms	 0.16	  508.03ms   481.53ms	534.52ms    37.46ms    2
       Cluster	  gc cr grant 2-way				    4,511	0.0	     174.51  38.69ms	 0.06	   41.56ms    35.70ms	 47.42ms     8.28ms    2
       Cluster	  gc cr multi block mixed			      264	0.0	     146.82 556.12ms	 0.05	  545.09ms   523.69ms	566.49ms    30.26ms    2
       Cluster	  gc cr block lost				      223	0.0	     133.13 596.99ms	 0.05	  596.20ms   582.72ms	609.69ms    19.07ms    2
       Concurrenc library cache load lock			      460	0.0	      96.63 210.07ms	 0.06	  210.07ms   210.07ms	210.07ms	       1

   1   Cluster	  gc cr multi block grant			  454,988	0.0	  79,403.86 174.52ms	52.57
       Cluster	  gc cr grant busy				  527,105	0.0	  30,678.97  58.20ms	20.31
       User I/O   db file parallel read 			  382,224	0.0	  19,957.42  52.21ms	13.21
		  DB CPU					      N/A	N/A	  14,550.57		 9.63
       User I/O   db file sequential read			1,333,852	0.0	  10,027.78   7.52ms	 6.64
       Cluster	  gc buffer busy acquire			      262	0.0	     140.04 534.52ms	 0.09
       Cluster	  gc cr multi block mixed			      200	0.0	     113.30 566.49ms	 0.08
       Concurrenc library cache load lock			      460	0.0	      96.63 210.07ms	 0.06
       Concurrenc cursor: pin S wait on X			      258	0.0	      76.04 294.72ms	 0.05
       Cluster	  gc cr block lost				      118	0.0	      71.94 609.69ms	 0.05

   2   User I/O   db file parallel read 			  560,366	0.0	  57,800.70 103.15ms	43.65
       Cluster	  gc cr multi block grant			  348,638	0.0	  42,261.81 121.22ms	31.91
       User I/O   db file sequential read			1,171,285	0.0	  16,835.14  14.37ms	12.71
       Cluster	  gc cr grant busy				  257,262	0.0	  12,610.18  49.02ms	 9.52
		  DB CPU					      N/A	N/A	   6,776.02		 5.12
       Cluster	  gc buffer busy acquire			      636	0.0	     306.26 481.53ms	 0.23
       Cluster	  gc cr grant 2-way				    3,362	0.0	     120.03  35.70ms	 0.09
       Cluster	  gc cr block lost				      105	0.0	      61.19 582.72ms	 0.05
       User I/O   read by other session 			    1,151	0.0	      39.60  34.40ms	 0.03
       Cluster	  gc cr multi block mixed			       64	0.0	      33.52 523.69ms	 0.03
			  --------------------------------------------------------------------------------------------------------------------

Top Timed Background Events		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> % of bg time: % of background elapsed time
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time'	      : Per-instance 'Wait Time Avg' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *		  background cpu time				      N/A	N/A	   2,349.79	       123.15						       2
       User I/O   db file sequential read			    9,564	0.0	      81.05   8.47ms	 4.25	    8.64ms     8.26ms	  9.02ms   538.91us    2
       Applicatio enq: TX - row lock contention 			2	0.0	      67.41  33.70 s	 3.53	   33.70 s   429.13ms	 66.98 s    47.06 s    2
       Cluster	  gc cr grant busy				    2,731	0.0	      58.34  21.36ms	 3.06	   21.04ms    20.36ms	 21.72ms      .96ms    2
       User I/O   Disk file Mirror Read 			    2,062	0.0	      46.96  22.77ms	 2.46	   22.56ms    17.36ms	 27.76ms     7.36ms    2
       System I/O control file sequential read			    6,203	0.0	      32.23   5.20ms	 1.69	    5.33ms     3.22ms	  7.44ms     2.98ms    2
       Cluster	  gc current grant busy 			      848	0.0	      27.79  32.77ms	 1.46	   34.16ms    30.35ms	 37.97ms     5.39ms    2
       Other	  IMR slave acknowledgement msg 		    4,470	0.0	      24.03   5.38ms	 1.26	    5.38ms     5.04ms	  5.71ms   469.07us    2
       System I/O db file parallel write			    1,969	0.0	      13.52   6.86ms	 0.71	    6.87ms     6.70ms	  7.04ms   238.08us    2
       System I/O control file parallel write			      536	0.0	      13.21  24.64ms	 0.69	   25.94ms    12.00ms	 39.88ms    19.71ms    2

   1		  background cpu time				      N/A	N/A	   1,220.42	       121.36
       User I/O   db file sequential read			    6,881	0.0	      56.84   8.26ms	 5.65
       Cluster	  gc cr grant busy				    2,018	0.0	      43.83  21.72ms	 4.36
       User I/O   Disk file Mirror Read 			    1,073	0.0	      29.79  27.76ms	 2.96
       Cluster	  gc current grant busy 			      579	0.0	      17.58  30.35ms	 1.75
       Other	  IMR slave acknowledgement msg 		    2,244	0.0	      11.32   5.04ms	 1.13
       System I/O control file sequential read			    3,297	0.0	      10.62   3.22ms	 1.06
       Cluster	  gc cr block lost				       12	0.0	       8.56 713.65ms	 0.85
       Cluster	  gc current block busy 			      534	0.0	       7.53  14.10ms	 0.75
       System I/O db file parallel write			      953	0.0	       6.71   7.04ms	 0.67

   2		  background cpu time				      N/A	N/A	   1,129.38	       125.15
       Applicatio enq: TX - row lock contention 			1	0.0	      66.98  66.98 s	 7.42
       User I/O   db file sequential read			    2,683	0.0	      24.21   9.02ms	 2.68
       System I/O control file sequential read			    2,906	0.0	      21.61   7.44ms	 2.39
       User I/O   Disk file Mirror Read 			      989	0.0	      17.17  17.36ms	 1.90
       Cluster	  gc cr grant busy				      713	0.0	      14.52  20.36ms	 1.61
       Other	  IMR slave acknowledgement msg 		    2,226	0.0	      12.71   5.71ms	 1.41
       Concurrenc row cache lock				       46      95.7	      10.62 230.97ms	 1.18
       Cluster	  gc current grant busy 			      269	0.0	      10.22  37.97ms	 1.13
       System I/O control file parallel write			      243	0.0	       9.69  39.88ms	 1.07
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %DB time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Cluster    gc cr multi block grant			   803,626	 0.0	  121,665.66 151.40ms	 42.92	   147.87ms   121.22ms	 174.52ms    37.69ms
User I/O   db file parallel read			   942,590	 0.0	   77,758.12  82.49ms	 27.43	    77.68ms    52.21ms	 103.15ms    36.02ms
Cluster    gc cr grant busy				   784,367	 0.0	   43,289.15  55.19ms	 15.27	    53.61ms    49.02ms	  58.20ms     6.50ms
User I/O   db file sequential read			 2,505,137	 0.0	   26,862.92  10.72ms	  9.48	    10.95ms	7.52ms	  14.37ms     4.85ms
Cluster    gc buffer busy acquire			       898	 0.0	      446.30 496.99ms	  0.16	   508.03ms   481.53ms	 534.52ms    37.46ms
Cluster    gc cr grant 2-way				     4,511	 0.0	      174.51  38.69ms	  0.06	    41.56ms    35.70ms	  47.42ms     8.28ms
Cluster    gc cr multi block mixed			       264	 0.0	      146.82 556.12ms	  0.05	   545.09ms   523.69ms	 566.49ms    30.26ms
Cluster    gc cr block lost				       223	 0.0	      133.13 596.99ms	  0.05	   596.20ms   582.72ms	 609.69ms    19.07ms
Concurrenc library cache load lock			       460	 0.0	       96.63 210.07ms	  0.03	   210.07ms   210.07ms	 210.07ms
Concurrenc cursor: pin S wait on X			       258	 0.0	       76.04 294.72ms	  0.03	   294.72ms   294.72ms	 294.72ms
Concurrenc library cache: mutex X			     2,172	 0.0	       70.03  32.24ms	  0.02	    21.33ms	1.75ms	  40.92ms    27.70ms
User I/O   read by other session			     1,475	 0.0	       44.06  29.87ms	  0.02	    24.09ms    13.78ms	  34.40ms    14.58ms
Other	   gcs drm freeze in enter server mode		       126	 0.0	       43.52 345.36ms	  0.02	   349.91ms   254.51ms	 445.31ms   134.92ms
Cluster    gc current grant busy			       540	 0.0	       26.95  49.90ms	  0.01	    49.90ms    49.90ms	  49.90ms
Cluster    gc current block 2-way			       782	 0.0	       25.31  32.37ms	  0.01	    27.82ms    21.74ms	  33.89ms     8.59ms
Cluster    gc cr block 2-way				       130	 0.0	       12.39  95.31ms	  0.00	    48.69ms   583.00us	  96.79ms    68.03ms
Concurrenc latch: cache buffers chains			    39,743	 0.0	       12.01 302.08us	  0.00	   282.01us   240.11us	 323.91us    59.25us
Cluster    gc remaster						81	 3.7		9.86 121.73ms	  0.00	   224.21ms    92.45ms	 355.97ms   186.34ms
Other	   latch free					     6,531	 0.0		8.40   1.29ms	  0.00	     1.12ms   706.70us	   1.54ms   586.47us
Concurrenc library cache: bucket mutex X		       560	 0.0		7.62  13.60ms	  0.00	    13.59ms    10.61ms	  16.57ms     4.21ms
Cluster    gc cr failure					82	 0.0		5.52  67.38ms	  0.00	   102.29ms    57.56ms	 147.02ms    63.26ms
Other	   latch: gc element				     8,243	 0.0		4.20 509.33us	  0.00	   441.69us   284.12us	 599.25us   222.83us
Other	   KJC: Wait for msg sends to complete			76	 0.0		3.68  48.42ms	  0.00	    38.07ms    21.69ms	  54.46ms    23.17ms
Cluster    gc current block busy			       187	 0.0		3.60  19.25ms	  0.00	   615.57ms    12.80ms	1218.33ms   852.44ms
System I/O control file sequential read 		       409	 0.0		3.16   7.72ms	  0.00	     4.99ms	2.15ms	   7.83ms     4.02ms
User I/O   db file scattered read			       150	 0.0		2.86  19.04ms	  0.00	    19.04ms    19.04ms	  19.04ms
Other	   latch: gcs resource hash			     1,160	 0.0		2.40   2.07ms	  0.00	     2.10ms	1.71ms	   2.49ms   552.23us
Concurrenc cursor: pin S				     1,768	 0.0		2.03   1.15ms	  0.00	     1.14ms	1.12ms	   1.16ms    34.26us
Concurrenc row cache lock				       185	19.5		1.66   8.99ms	  0.00	     8.00ms   631.95us	  15.36ms    10.42ms
Cluster    gc current block lost				 3	 0.0		1.59 531.54ms	  0.00	   531.54ms   531.54ms	 531.54ms
Concurrenc row cache mutex				       253	 0.0		1.56   6.15ms	  0.00	     3.83ms   589.92us	   7.08ms     4.59ms
Configurat enq: HW - contention 				27	 0.0		1.54  57.05ms	  0.00	    30.18ms	1.16ms	  59.20ms    41.04ms
User I/O   Disk file Mirror Read			       102	 0.0		1.47  14.37ms	  0.00	     9.36ms	4.15ms	  14.58ms     7.37ms
Other	   latch: call allocation			       191	 0.0		1.41   7.38ms	  0.00	     5.45ms    92.66us	  10.80ms     7.57ms
Cluster    gc cr block busy					20	 0.0		1.21  60.71ms	  0.00	    38.51ms	6.78ms	  70.23ms    44.86ms
Other	   IPC send completion sync			       114	 0.0		1.05   9.20ms	  0.00	     7.89ms   455.06us	  15.33ms    10.52ms
Other	   PX Deq: Slave Session Stats				70	 0.0		1.03  14.73ms	  0.00	    14.73ms   493.94us	  28.97ms    20.14ms
Cluster    gc cr disk read					 3	 0.0		1.01 335.31ms	  0.00	   335.31ms   335.31ms	 335.31ms
Other	   enq: WT - contention 				 8	 0.0		0.52  64.39ms	  0.00	    64.39ms    64.39ms	  64.39ms
Cluster    gc current grant 2-way				80	 0.0		0.39   4.93ms	  0.00	     4.93ms	4.93ms	   4.93ms
Cluster    gc cr grant congested				37	 0.0		0.32   8.66ms	  0.00	    17.13ms	3.50ms	  30.76ms    19.27ms
Cluster    gc current multi block request			38	 0.0		0.28   7.32ms	  0.00	     7.32ms	7.32ms	   7.32ms
Other	   latch: cache buffers lru chain		     1,562	 0.0		0.27 171.45us	  0.00	   160.35us    87.53us	 233.18us   102.99us
Other	   name-service call wait				12	 0.0		0.18  14.62ms	  0.00	    11.26ms	1.17ms	  21.35ms    14.27ms
Other	   enq: WF - contention 				13	 0.0		0.18  13.47ms	  0.00	    13.47ms    13.47ms	  13.47ms
Concurrenc library cache lock					19	 0.0		0.16   8.62ms	  0.00	    15.03ms	1.50ms	  28.56ms    19.13ms
Concurrenc latch: shared pool				       195	 0.0		0.16 832.60us	  0.00	   500.75us    54.48us	 947.03us   631.13us
Other	   latch: ges resource hash list		       277	 0.0		0.13 468.58us	  0.00	   358.97us   152.43us	 565.52us   292.10us
User I/O   direct path write					16	 0.0		0.09   5.76ms	  0.00	     5.76ms	5.76ms	   5.76ms
Cluster    gc current grant congested				 1	 0.0		0.06  57.87ms	  0.00	    57.87ms    57.87ms	  57.87ms
Other	   PX Deq: reap credit				     2,522     100.0		0.05  20.03us	  0.00	    19.12us    17.64us	  20.61us     2.10us
Other	   PGA memory operation 			     1,603	 0.0		0.05  29.88us	  0.00	    29.67us    28.13us	  31.21us     2.18us
Other	   latch: object queue header operation 	       113	 0.0		0.05 400.91us	  0.00	   372.52us   219.76us	 525.28us   216.04us
Concurrenc library cache pin					17	 0.0		0.02   1.45ms	  0.00	     1.01ms   326.00us	   1.69ms      .96ms
Other	   wait list latch free 				21	 0.0		0.02   1.13ms	  0.00	     1.15ms	1.12ms	   1.17ms    32.37us
Other	   enq: PS - contention 				38	 5.3		0.02 607.74us	  0.00	   633.84us   468.50us	 799.19us   233.83us
Cluster    gc current block congested				 6	 0.0		0.02   3.07ms	  0.00	     3.60ms	2.81ms	   4.39ms     1.12ms
Applicatio SQL*Net break/reset to client		       150	 0.0		0.02 100.37us	  0.00	   100.37us   100.37us	 100.37us
User I/O   Disk file operations I/O				91	 0.0		0.01 164.26us	  0.00	   183.32us   147.93us	 218.71us    50.05us
Other	   enq: FB - contention 				16	 0.0		0.01 885.31us	  0.00	   885.31us   885.31us	 885.31us
Foreground Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %DB time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Other	   DLM cross inst call completion			45	 0.0		0.01 302.91us	  0.00	   438.54us   228.08us	 649.00us   297.63us
Network    SQL*Net message to client			     1,183	 0.0		0.01   8.77us	  0.00	     8.64us	7.83us	   9.44us     1.14us
Other	   cr request retry					 1     100.0		0.01   9.38ms	  0.00	     9.38ms	9.38ms	   9.38ms
Concurrenc enq: TX - index contention				 2	 0.0		0.01   3.21ms	  0.00	     3.21ms	3.21ms	   3.21ms
Other	   ges ipc enter server mode			       703	 0.0		0.01   8.50us	  0.00	     7.51us	5.66us	   9.36us     2.62us
Other	   enq: TO - contention 				 5	 0.0		0.00 732.80us	  0.00	   828.58us   349.67us	   1.31ms   677.29us
Other	   latch: enqueue hash chains				19	 0.0		0.00 154.89us	  0.00	   111.09us    18.60us	 203.57us   130.79us
Network    IPC group service call				93	 0.0		0.00   9.57us	  0.00	     9.37us	8.77us	   9.97us   843.97ns
User I/O   ASM IO for non-blocking poll 			66	 0.0		0.00   9.12us	  0.00	     9.12us	9.12us	   9.12us
Applicatio enq: TM - contention 				 1	 0.0		0.00 503.00us	  0.00	   503.00us   503.00us	 503.00us
Other	   PX qref latch					48     100.0		0.00   7.23us	  0.00	     7.23us	7.23us	   7.23us
Other	   transaction						 1	 0.0		0.00 271.00us	  0.00	   271.00us   271.00us	 271.00us
Other	   lock deadlock retry					 3     100.0		0.00  59.00us	  0.00	    59.00us    59.00us	  59.00us
Other	   latch: active service list				 3	 0.0		0.00  43.67us	  0.00	    43.67us    43.67us	  43.67us
Cluster    gc buffer busy release				 1	 0.0		0.00 102.00us	  0.00	   102.00us   102.00us	 102.00us
Other	   ges resource directory to be unfrozen		 7	 0.0		0.00   4.71us	  0.00	     5.10us	4.20us	   6.00us     1.27us
Other	   asynch descriptor resize				 3     100.0		0.00   9.67us	  0.00	     9.50us	9.00us	  10.00us   707.11ns
Other	   AWR Flush						 4	 0.0		0.00   3.75us	  0.00	     3.75us	3.75us	   3.75us
Idle	   watchdog main loop				     3,976	 0.0	   11,868.04 2984.92m	  4.19	  2984.91ms  2980.36ms	2989.47ms     6.44ms
Idle	   SQL*Net message from client			     1,180	 0.0	      762.65 646.31ms	  0.27	   558.54ms    24.70ms	1092.38ms   754.96ms
Idle	   PX Deq: Execution Msg			       210	 0.0	      102.05 485.95ms	  0.04	   485.95ms   329.31ms	 642.58ms   221.52ms
Idle	   PX Deq Credit: send blkd			       610	 0.0	       34.80  57.05ms	  0.01	    30.45ms	1.06ms	  59.85ms    41.57ms
Idle	   PX Deq: Msg Fragment 			       642	 0.0		0.23 364.51us	  0.00	   364.51us   348.05us	 380.96us    23.27us
Idle	   PX Deq Credit: need buffer			       244	 0.0		0.11 451.22us	  0.00	   451.22us   451.22us	 451.22us
			  --------------------------------------------------------------------------------------------------------------------

Background Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
User I/O   db file sequential read			     9,564	 0.0	       81.05   8.47ms	  0.04	     8.64ms	8.26ms	   9.02ms   538.91us
Applicatio enq: TX - row lock contention			 2	 0.0	       67.41  33.70 s	  0.04	    33.70 s   429.13ms	  66.98 s    47.06 s
Cluster    gc cr grant busy				     2,731	 0.0	       58.34  21.36ms	  0.03	    21.04ms    20.36ms	  21.72ms      .96ms
User I/O   Disk file Mirror Read			     2,062	 0.0	       46.96  22.77ms	  0.02	    22.56ms    17.36ms	  27.76ms     7.36ms
System I/O control file sequential read 		     6,203	 0.0	       32.23   5.20ms	  0.02	     5.33ms	3.22ms	   7.44ms     2.98ms
Cluster    gc current grant busy			       848	 0.0	       27.79  32.77ms	  0.01	    34.16ms    30.35ms	  37.97ms     5.39ms
Other	   IMR slave acknowledgement msg		     4,470	 0.0	       24.03   5.38ms	  0.01	     5.38ms	5.04ms	   5.71ms   469.07us
System I/O db file parallel write			     1,969	 0.0	       13.52   6.86ms	  0.01	     6.87ms	6.70ms	   7.04ms   238.08us
System I/O control file parallel write			       536	 0.0	       13.21  24.64ms	  0.01	    25.94ms    12.00ms	  39.88ms    19.71ms
Concurrenc row cache lock				       112	98.2	       11.06  98.78ms	  0.01	   118.80ms	6.64ms	 230.97ms   158.62ms
Cluster    gc current block busy			       936	 0.0	       10.57  11.29ms	  0.01	    10.83ms	7.56ms	  14.10ms     4.62ms
Cluster    gc buffer busy acquire				23	 0.0	       10.02 435.85ms	  0.01	  1367.64ms   347.10ms	2388.18ms  1443.26ms
Cluster    gc cr block lost					13	 0.0		9.21 708.65ms	  0.00	   681.16ms   648.66ms	 713.65ms    45.95ms
System I/O log file parallel write			     2,066	 0.0		8.72   4.22ms	  0.00	     4.19ms	3.89ms	   4.49ms   426.74us
Cluster    gc cr block 2-way				       695	 0.0		8.41  12.11ms	  0.00	    17.17ms	7.98ms	  26.37ms    13.00ms
Other	   KJC: Wait for msg sends to complete		       439	70.2		8.18  18.64ms	  0.00	    21.27ms	7.06ms	  35.47ms    20.09ms
Other	   PX Deq: reap credit				   387,672     100.0		7.58  19.56us	  0.00	    19.55us    18.82us	  20.28us     1.03us
Cluster    gc current block lost				11	 0.0		6.89 626.49ms	  0.00	   588.72ms   529.36ms	 648.08ms    83.95ms
Cluster    gc cr disk read				       299	 0.0		5.43  18.15ms	  0.00	    11.04ms	 .96ms	  21.12ms    14.25ms
Concurrenc library cache lock				       977	 0.1		4.81   4.92ms	  0.00	     5.00ms   392.28us	   9.61ms     6.52ms
Other	   gcs remastering wait for read latch			99	 0.0		4.72  47.73ms	  0.00	    47.57ms    31.70ms	  63.44ms    22.45ms
Cluster    gc cr multi block grant			       117	 0.0		4.24  36.23ms	  0.00	    25.78ms	4.33ms	  47.23ms    30.34ms
User I/O   db file scattered read			       322	 0.0		3.62  11.26ms	  0.00	    10.75ms	9.55ms	  11.95ms     1.70ms
Concurrenc latch: MGA shared context root latch 	       581	 0.0		3.58   6.16ms	  0.00	     7.01ms	 .97ms	  13.05ms     8.54ms
Applicatio enq: TM - contention 				30	 0.0		3.51 117.16ms	  0.00	   112.21ms    37.97ms	 186.45ms   104.99ms
Other	   reliable message				       109	 0.0		2.98  27.32ms	  0.00	    35.55ms	4.60ms	  66.50ms    43.77ms
Other	   gcs log flush sync				     1,783	 0.0		2.55   1.43ms	  0.00	     1.43ms	1.43ms	   1.44ms     4.99us
Cluster    gc current multi block request			19	 0.0		2.44 128.58ms	  0.00	   128.30ms   126.52ms	 130.09ms     2.52ms
Cluster    gc cr multi block mixed				16	 0.0		2.34 146.05ms	  0.00	   164.77ms   134.81ms	 194.74ms    42.37ms
Other	   DFS lock handle				       170     100.0		1.92  11.32ms	  0.00	    12.74ms	5.61ms	  19.88ms    10.09ms
Other	   DLM cross inst call completion		     3,852	 0.0		1.86 482.66us	  0.00	   458.47us   392.94us	 524.00us    92.67us
Other	   latch free					     3,634	 0.0		1.81 498.12us	  0.00	   490.90us   383.42us	 598.38us   152.00us
Other	   Sync ASM rebalance				       112	 0.0		1.47  13.08ms	  0.00	    13.08ms	8.41ms	  17.76ms     6.61ms
Other	   PX Deq: Signal ACK EXT				70	 0.0		1.01  14.44ms	  0.00	    11.78ms   148.89us	  23.42ms    16.45ms
Cluster    gc current grant 2-way			       133	 0.0		1.00   7.50ms	  0.00	     7.87ms	6.77ms	   8.97ms     1.56ms
User I/O   direct path write					63	 0.0		0.93  14.84ms	  0.00	    14.85ms    14.80ms	  14.90ms    74.17us
Concurrenc latch: MGA shared context latch		       723	 0.0		0.92   1.28ms	  0.00	     1.16ms   376.98us	   1.95ms     1.11ms
Cluster    gc cr block busy				       177	 0.0		0.90   5.09ms	  0.00	     5.10ms	4.81ms	   5.38ms   399.40us
Other	   LGWR any worker group			       249	 0.0		0.88   3.53ms	  0.00	     3.53ms	3.53ms	   3.53ms
Other	   latch: call allocation				67	 0.0		0.79  11.72ms	  0.00	     6.84ms   178.11us	  13.51ms     9.42ms
User I/O   direct path write temp			       157	 0.0		0.78   4.98ms	  0.00	     4.98ms	4.90ms	   5.06ms   113.70us
Other	   KSV master wait				     1,291	89.2		0.76 588.73us	  0.00	   573.70us   300.49us	 846.92us   386.39us
User I/O   Disk file operations I/O			       606	 0.0		0.76   1.25ms	  0.00	     1.21ms   377.57us	   2.04ms     1.17ms
Applicatio enq: RO - fast object reuse			       227	 0.0		0.70   3.09ms	  0.00	     3.33ms	1.87ms	   4.79ms     2.06ms
Cluster    gc buffer busy release			       119	 0.0		0.69   5.83ms	  0.00	     5.83ms	5.69ms	   5.97ms   202.42us
Other	   enq: CF - contention 				39	66.7		0.56  14.26ms	  0.00	    20.81ms	1.15ms	  40.48ms    27.81ms
Other	   enq: CO - master slave det				13     100.0		0.53  40.39ms	  0.00	    40.39ms    40.39ms	  40.39ms
Configurat enq: HW - contention 				14	 0.0		0.52  37.22ms	  0.00	    29.26ms	1.38ms	  57.13ms    39.42ms
Other	   ASM file metadata operation			     3,087	 0.0		0.51 163.68us	  0.00	   163.25us   129.00us	 197.50us    48.44us
Other	   PGA memory operation 			     1,776	 0.0		0.43 242.13us	  0.00	   233.74us   125.78us	 341.69us   152.67us
Other	   latch: gcs resource hash			       845	 0.0		0.34 405.55us	  0.00	   381.52us   195.25us	 567.80us   263.43us
Concurrenc library cache pin				       972	 0.0		0.33 342.37us	  0.00	   342.45us   334.56us	 350.34us    11.16us
Other	   LGWR all worker groups				58	 0.0		0.33   5.64ms	  0.00	     5.64ms	5.64ms	   5.64ms
Concurrenc latch: MGA heap latch			       437	 0.0		0.31 716.13us	  0.00	   923.16us   187.62us	   1.66ms     1.04ms
Other	   ges lms sync during dynamic remastering		15	40.0		0.29  19.64ms	  0.00	    20.64ms    15.62ms	  25.67ms     7.10ms
Other	   AQ: RAC AQ Network				    14,859     100.0		0.27  18.40us	  0.00	    18.40us    18.09us	  18.70us   433.88ns
Other	   CGS wait for IPC msg 			    15,846     100.0		0.27  17.25us	  0.00	    17.24us    16.48us	  18.00us     1.08us
Other	   oracle thread bootstrap				11	 0.0		0.23  21.06ms	  0.00	    21.18ms    19.86ms	  22.49ms     1.86ms
User I/O   read by other session				20	 0.0		0.23  11.43ms	  0.00	     9.10ms	3.29ms	  14.91ms     8.22ms
Other	   oradebug request completion				 2	 0.0		0.19  97.02ms	  0.00	    97.02ms    94.72ms	  99.33ms     3.26ms
Background Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Other	   enq: FB - contention 				16	 0.0		0.18  11.36ms	  0.00	     6.80ms   737.00us	  12.87ms     8.58ms
Network    IPC group service call			     1,845	 0.0		0.14  73.56us	  0.00	    73.81us    62.93us	  84.69us    15.39us
Cluster    gc current grant congested				 2	 0.0		0.11  53.83ms	  0.00	    53.83ms	1.91ms	 105.75ms    73.42ms
Other	   PX Deq: Join ACK					70	 0.0		0.11   1.52ms	  0.00	     1.54ms	1.46ms	   1.62ms   119.70us
Cluster    gc cr grant 2-way				       233	 0.0		0.07 302.51us	  0.00	   629.78us   284.74us	    .97ms   487.97us
Other	   latch: messages				       325	 0.0		0.06 185.57us	  0.00	   222.34us   139.92us	 304.76us   116.56us
Other	   CSS operation: data query				44	 0.0		0.05   1.23ms	  0.00	     1.23ms	1.14ms	   1.32ms   128.18us
Other	   ksxr poll remote instances			     2,297     100.0		0.05  20.59us	  0.00	    20.59us    20.14us	  21.04us   634.33ns
Other	   CSS operation: data update				50	 0.0		0.05 925.18us	  0.00	   925.18us   792.28us	   1.06ms   187.95us
Other	   enq: PS - contention 				65	38.5		0.04 681.08us	  0.00	   683.10us   551.36us	 814.84us   186.31us
Other	   IPC send completion sync			     1,527	97.6		0.04  27.98us	  0.00	    27.96us    25.40us	  30.51us     3.61us
Other	   ges inquiry response 				56	 0.0		0.04 714.45us	  0.00	   745.59us   527.56us	    .96ms   308.34us
Cluster    gc current block 2-way				49	 0.0		0.04 739.49us	  0.00	   719.11us   671.57us	 766.66us    67.24us
Concurrenc libcache interrupt action by LCK		    12,899	 0.0		0.04   2.72us	  0.00	     2.71us	2.60us	   2.82us   155.79ns
Other	   LGWR worker group ordering				 9	 0.0		0.03   3.79ms	  0.00	     3.79ms	3.79ms	   3.79ms
Other	   enq: DR - contention 				 1	 0.0		0.03  30.96ms	  0.00	    30.96ms    30.96ms	  30.96ms
User I/O   db file parallel read				 5	 0.0		0.03   5.57ms	  0.00	     5.86ms	5.38ms	   6.33ms   670.16us
Other	   os thread creation					11	 0.0		0.02   2.00ms	  0.00	     2.01ms	1.92ms	   2.11ms   135.84us
Other	   enq: DW - contention 				 7     100.0		0.02   2.58ms	  0.00	     2.41ms	1.28ms	   3.55ms     1.60ms
Other	   latch: gc element					53	 0.0		0.01 264.45us	  0.00	   274.37us   243.46us	 305.28us    43.71us
Other	   enq: WF - contention 				16	12.5		0.01 803.06us	  0.00	   799.30us   795.00us	 803.60us     6.08us
Cluster    gc index operation					 1	 0.0		0.01  12.00ms	  0.00	    12.00ms    12.00ms	  12.00ms
User I/O   ASM IO for non-blocking poll 		     1,105	 0.0		0.01   9.54us	  0.00	     9.38us	8.09us	  10.68us     1.83us
System I/O db file async I/O submit			     1,587	 0.0		0.01   6.51us	  0.00	     6.39us	4.73us	   8.05us     2.35us
Other	   CSS initialization					 2	 0.0		0.01   5.12ms	  0.00	     5.12ms	5.12ms	   5.12ms
Other	   PX Deq: Slave Session Stats				70	 0.0		0.01 134.23us	  0.00	   133.81us   131.96us	 135.65us     2.61us
Other	   enq: SM -  contention				 3	 0.0		0.01   2.21ms	  0.00	     2.21ms	2.21ms	   2.21ms
Other	   enq: WT - contention 				 3	 0.0		0.01   1.77ms	  0.00	     1.77ms	1.77ms	   1.77ms
Other	   ges2 LMON to wake up LMD - mrcvr			 3	 0.0		0.01   1.75ms	  0.00	     1.55ms   928.00us	   2.16ms   872.92us
Other	   enq: TA - contention 				 5	 0.0		0.00 938.40us	  0.00	   933.58us   909.50us	    .96ms    34.06us
Other	   asynch descriptor resize			       554     100.0		0.00   8.10us	  0.00	     8.06us	6.71us	   9.42us     1.92us
Concurrenc latch: cache buffers chains				20	 0.0		0.00 190.05us	  0.00	   198.10us   182.00us	 214.20us    22.77us
Cluster    gc current block congested				 1	 0.0		0.00   3.70ms	  0.00	     3.70ms	3.70ms	   3.70ms
Network    SQL*Net message to client			       515	 0.0		0.00   7.16us	  0.00	     7.04us	4.78us	   9.31us     3.20us
Cluster    gc cr grant congested				 1	 0.0		0.00   2.98ms	  0.00	     2.98ms	2.98ms	   2.98ms
Other	   enq: TD - KTF dump entries				 3	 0.0		0.00	.97ms	  0.00	   808.75us   324.00us	   1.29ms   685.54us
Commit	   log file sync					 1	 0.0		0.00   2.77ms	  0.00	     2.77ms	2.77ms	   2.77ms
Other	   latch: cache buffers lru chain			 7	 0.0		0.00 373.71us	  0.00	   222.17us    10.00us	 434.33us   300.05us
Other	   CSS operation: action				 4	 0.0		0.00 614.25us	  0.00	   614.25us   614.25us	 614.25us
Other	   enq: TT - contention 				 1     100.0		0.00   2.35ms	  0.00	     2.35ms	2.35ms	   2.35ms
Other	   name-service call wait				 4	 0.0		0.00 585.00us	  0.00	   585.00us   558.50us	 611.50us    37.48us
Other	   enq: MW - contention 				 2	 0.0		0.00 788.00us	  0.00	   788.00us   747.00us	 829.00us    57.98us
Other	   enq: TO - contention 				 2	 0.0		0.00 612.50us	  0.00	   612.50us   612.50us	 612.50us
System I/O log file sequential read				 7	 0.0		0.00 167.00us	  0.00	   100.33us	7.00us	 193.67us   131.99us
Concurrenc cursor: pin S wait on X				 1	 0.0		0.00   1.11ms	  0.00	     1.11ms	1.11ms	   1.11ms
Other	   CSS operation: query 				 6	 0.0		0.00 163.00us	  0.00	   163.00us   163.00us	 163.00us
Other	   LGWR wait for redo copy				10	 0.0		0.00  88.40us	  0.00	    85.08us    68.50us	 101.67us    23.45us
Other	   enq: AF - task serialization 			 1	 0.0		0.00 854.00us	  0.00	   854.00us   854.00us	 854.00us
Other	   GCR CSS group query					44	 0.0		0.00  13.02us	  0.00	    13.02us    12.73us	  13.32us   417.84ns
Other	   GCR CSS group update 				46	 0.0		0.00  10.61us	  0.00	    10.61us	9.57us	  11.65us     1.48us
Concurrenc enq: TX - index contention				 1	 0.0		0.00 404.00us	  0.00	   404.00us   404.00us	 404.00us
Concurrenc latch: shared pool					 5	 0.0		0.00  68.00us	  0.00	    75.50us    63.00us	  88.00us    17.68us
Concurrenc buffer busy waits					 4	 0.0		0.00  80.25us	  0.00	    80.25us    11.00us	 149.50us    97.93us
Cluster    gc current split					 1	 0.0		0.00 244.00us	  0.00	   244.00us   244.00us	 244.00us
Other	   kjctssqmg: quick message send wait			 1     100.0		0.00 240.00us	  0.00	   240.00us   240.00us	 240.00us
Other	   latch: kjci process context latch			 3	 0.0		0.00  50.33us	  0.00	    43.75us    24.00us	  63.50us    27.93us
Other	   ges enter server mode				31	 0.0		0.00   4.55us	  0.00	     4.55us	4.55us	   4.55us
Other	   lock deadlock retry					 9     100.0		0.00  12.11us	  0.00	    12.79us    11.57us	  14.00us     1.72us
Other	   ges resource directory to be unfrozen		13	 0.0		0.00   7.31us	  0.00	     5.80us	3.00us	   8.60us     3.96us
Concurrenc row cache mutex					 5	 0.0		0.00  13.60us	  0.00	    12.67us	8.00us	  17.33us     6.60us
Background Wait Events (Global) 	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Other	   undo_retention publish retry 			 5	 0.0		0.00   5.00us	  0.00	     5.00us	5.00us	   5.00us      .00ns
Other	   buffer deadlock					 2     100.0		0.00  12.00us	  0.00	    12.00us    12.00us	  12.00us
Concurrenc library cache: mutex X				 1	 0.0		0.00  20.00us	  0.00	    20.00us    20.00us	  20.00us
Other	   gcs resource directory to be unfrozen		 4	 0.0		0.00   3.50us	  0.00	     3.50us	3.50us	   3.50us
Cluster    gc quiesce						 1	 0.0		0.00  13.00us	  0.00	    13.00us    13.00us	  13.00us
Other	   AWR Flush						 3	 0.0		0.00   2.67us	  0.00	     2.67us	2.67us	   2.67us
Idle	   PX Idle Wait 					74	 0.0	  383,953.42 5188.56	201.23	  5188.56 s  5167.91 s	5209.21 s    29.21 s
Idle	   Space Manager: slave idle wait		    18,148	 0.0	   76,784.32 4231.01m	 40.24	  4238.96ms  4111.94ms	4365.98ms   179.63ms
Idle	   rdbms ipc message				    62,742	56.1	   59,991.82 956.17ms	 31.44	   956.18ms   954.37ms	 957.98ms     2.55ms
Idle	   class slave wait				    18,364	79.4	   10,371.07 564.75ms	  5.44	   564.90ms   533.37ms	 596.44ms    44.60ms
Idle	   LMS CR slave timer				   893,166	 0.0	    8,907.81   9.97ms	  4.67	     9.97ms	9.97ms	   9.98ms     4.07us
Idle	   gcs yield cpu				   318,509	99.6	    8,862.30  27.82ms	  4.64	    27.90ms    26.49ms	  29.31ms     1.99ms
Idle	   gcs remote message				 9,537,602	 0.0	    7,768.70 814.53us	  4.07	   815.83us   782.83us	 848.84us    46.68us
Idle	   ges remote message				    93,390	 0.0	    5,961.51  63.83ms	  3.12	    63.84ms    63.34ms	  64.33ms   695.63us
Idle	   LGWR worker group idle			     1,070	 0.0	    5,383.21 5031.04m	  2.82	  2507.67ms  2507.67ms	2507.67ms
Idle	   wait for unread message on broadcast cha	     2,285     100.0	    4,473.47 1957.76m	  2.34	  1957.75ms  1956.72ms	1958.79ms     1.46ms
Idle	   pmon timer					     1,000	99.5	    2,988.73 2988.73m	  1.57	  2988.73ms  2977.66ms	2999.80ms    15.66ms
Idle	   GCR sleep					     9,898	 0.0	    2,974.55 300.52ms	  1.56	   300.52ms   300.47ms	 300.57ms    75.75us
Idle	   DIAG idle wait				    25,800	62.6	    2,958.11 114.66ms	  1.55	   114.66ms   113.45ms	 115.88ms     1.72ms
Idle	   Data Guard: Gap Manager				26	 0.0	    1,560.01  60.00 s	  0.82	    60.00 s    60.00 s	  60.00 s    51.78us
Idle	   Streams AQ: qmn coordinator idle wait	       108	 0.0	    1,512.05  14.00 s	  0.79	    14.00 s    14.00 s	  14.00 s     7.84us
Idle	   Streams AQ: qmn slave idle wait			54	 0.0	    1,511.80  28.00 s	  0.79	    28.00 s    27.99 s	  28.00 s     2.44ms
Idle	   shared server idle wait				 0	 N/A	    1,500.28		  0.79
Idle	   smon timer						 5     100.0	    1,500.00 300.00 s	  0.79	   300.00 s   300.00 s	 300.00 s    83.56us
Idle	   OFS idle					       498     100.0	    1,494.01 3000.01m	  0.78	  3000.01ms  2999.99ms	3000.03ms    24.04us
Idle	   ASM cluster membership changes		       852	79.9	    1,491.30 1750.35m	  0.78	  1750.35ms  1750.35ms	1750.35ms   917.78ns
Idle	   REPL Capture/Apply: RAC AQ qmn coordinat		24     100.0	    1,491.15  62.13 s	  0.78	    62.13 s    61.87 s	  62.39 s   365.07ms
Idle	   pman timer					       497     100.0	    1,490.85 2999.71m	  0.78	  2999.71ms  2999.67ms	2999.74ms    49.45us
Idle	   PING 					     1,398	19.8	    1,490.78 1066.37m	  0.78	  1066.52ms  1056.89ms	1076.15ms    13.62ms
Idle	   ASM background timer 			     2,962	 0.0	    1,490.63 503.25ms	  0.78	   503.25ms   502.89ms	 503.62ms   513.72us
Idle	   heartbeat redo informer			     1,490	 0.0	    1,490.17 1000.12m	  0.78	  1000.12ms  1000.12ms	1000.12ms   906.06ns
Idle	   VKRM Idle						 0	 N/A	    1,490.14		  0.78
Idle	   lreg timer					       496     100.0	    1,489.41 3002.85m	  0.78	  3002.85ms  3002.79ms	3002.91ms    88.34us
Idle	   Streams AQ: waiting for time management		 0	 N/A	    1,485.00		  0.78
Idle	   SCM slave idle				    15,056	 0.0	    1,480.21  98.31ms	  0.78	    98.31ms    97.84ms	  98.79ms   670.03us
Idle	   AQPC idle						49     100.0	    1,470.04  30.00 s	  0.77	    30.00 s    30.00 s	  30.00 s    78.14us
Idle	   dispatcher timer					24     100.0	    1,440.14  60.01 s	  0.75	    60.01 s    60.01 s	  60.01 s   778.17us
Idle	   Data Guard: Timer					 2	 0.0	    1,200.00 600.00 s	  0.63	   600.00 s   600.00 s	 600.00 s    52.33us
Idle	   SQL*Net message from client			       516	 0.0	       14.64  28.37ms	  0.01	    29.85ms   407.32us	  59.29ms    41.64ms
Idle	   PX Deq: Parse Reply					70	 0.0		2.59  36.94ms	  0.00	    34.33ms    22.94ms	  45.72ms    16.11ms
Idle	   PX Deq: Execute Reply			     1,225	 0.0		0.83 678.93us	  0.00	     6.65ms   403.41us	  12.90ms     8.84ms
Idle	   PX Deq Credit: send blkd			       339	 0.0		0.24 706.99us	  0.00	   705.22us   695.04us	 715.40us    14.40us
Idle	   RMA: IPC0 completion sync			     2,211	 0.0		0.07  29.88us	  0.00	    29.89us    24.20us	  35.59us     8.05us
Idle	   heartbeat monitor sleep			       128	 0.0		0.00  11.07us	  0.00	     8.53us	3.12us	  13.95us     7.66us
			  --------------------------------------------------------------------------------------------------------------------

Wait Event Histogram (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
AQ: RAC AQ Network	   14.7K				0.0(2)	   32.5     64.2      1.8      1.2	0.2	 0.1   0.0(1)
ASM IO for non-blocking p   1114			  0.1	  67.0	   26.9      3.1      2.0      0.5	0.4		  0.1
ASM file metadata operati   3050			 16.9	  18.7	    8.3     33.1     10.8      6.8	1.4	 3.2	  0.2	0.0(1)	    0.1   0.0(1)   0.0(1)      0.2	0.1   0.0(1)
AWR Flush		       7			 71.4	  28.6
CGS wait for IPC msg	   15.6K				   1.9	   51.7     42.8      2.0      1.2	0.3	 0.1   0.0(4)	0.0(2)	 0.0(2)
CSS initialization	       2					   50.0 										     50.0
CSS operation: action	       4						    25.0					 75.0
CSS operation: data query     44											13.6	 31.8	  40.9	   13.6
CSS operation: data updat     50											 4.0	 78.0	  16.0		     2.0
CSS operation: query	       6		16.7	 50.0	  16.7								 16.7
DFS lock handle 	     170										2.4	54.7	 22.9	  11.8	    5.9 					 0.6		   1.2	    0.6
DLM cross inst call compl   3894					    0.3      2.2      0.1      0.2	0.4	89.8	  6.6	   0.4	    0.1   0.0(1)   0.0(1)					0.0(1)
Disk file Mirror Read	    2139													   0.7	   31.8     24.7     12.0      8.2     11.5	10.2	  0.9
Disk file operations I/O     697				   6.9	   17.9     43.8     17.5      3.3	0.4	 2.3	  2.9	   0.1	    1.7      0.9      1.0      0.3	0.4	 0.6
GCR CSS group query	      44					   95.5      2.3      2.3
GCR CSS group update	      46				  10.9	   87.0 	      2.2
IMR slave acknowledgement   4410				   3.0	   10.9      5.0      4.1     29.6     11.6	 1.6	  0.4	   0.3	   11.5      9.4      4.7      3.2	2.9	 1.8   0.0(1)
IPC group service call	    1912			  0.6	   5.3	    4.7     25.9     22.3     33.7	5.5	 1.2	  0.3	   0.4	    0.1
IPC send completion sync    1619					    5.8     80.7      2.7      1.4	4.2	 3.0	  2.0	   0.1	    0.1 								    0.1
KJC: Wait for msg sends t    502					   43.6      8.2     11.0     12.0	7.0	 5.0	  3.4	   2.2	    0.8      0.4						   6.0	    0.6
KSV master wait 	    1263				  12.2	   34.4     29.6      4.5      7.0	1.7	 0.4	  0.1		    2.9      6.5      0.6      0.1		 0.1
LGWR all worker groups	      55										3.6	 1.8	  9.1	   1.8	   49.1      7.3     27.3
LGWR any worker group	     249								       1.2	4.8	 1.6	  4.8	   8.4	   55.8     16.9      6.4
LGWR wait for redo copy       10							     50.0     20.0     30.0
LGWR worker group orderin      9								      11.1     11.1	11.1			   22.2     33.3     11.1
PGA memory operation	    3381			  4.1	  38.0	   28.5      6.3      2.7      3.0	6.5	 4.5	  2.8	   2.2	    0.9      0.5
PX Deq: Join ACK	      70											 2.9	 45.7	  31.4	   15.7      2.9      1.4
PX Deq: Signal ACK EXT	      70					    5.7     52.9      7.1     12.9	4.3	 4.3	 11.4											    1.4
PX Deq: Slave Session Sta    140				   7.1	   12.1      2.9      1.4     22.9     20.0	20.0	  9.3	   2.9		     0.7							    0.7
PX Deq: reap credit	  385.2K				   0.1	   32.2     64.1      2.2      1.1	0.3	 0.1 0.0(101)  0.0(51)	0.0(29)   0.0(5)
PX qref latch		      48				  87.5	   10.4      2.1
SQL*Net break/reset to cl    148				  32.4	   14.9      1.4      1.4     29.1     14.9	 3.4	  1.4	   1.4
SQL*Net message to client   1698			 10.0	  66.0	   19.7      2.5      1.0      0.7	0.1	 0.1	  0.1
Sync ASM rebalance	     112				  22.3	   16.1      8.9      2.7			 2.7	  8.0	   0.9	    0.9     14.3      8.0      2.7     10.7		  0.9	   0.9
asynch descriptor resize     556			  3.1	  83.1	   10.1      1.6      0.5      1.4			  0.2
buffer busy waits	       4					   50.0 	     25.0	       25.0
buffer deadlock 	       1					  100.0
control file parallel wri    529														   15.5     23.6     28.7      8.9     11.5	10.2	  1.5
control file sequential r   6531				   1.1	   14.3     15.9      0.9      0.4	2.3	 0.5   0.0(2)	   1.1	   36.8     16.6      4.7      1.9	2.1	 1.2	  0.2
cr request retry	       1																    100.0
cursor: pin S		    1732													  97.9	    1.9      0.2
cursor: pin S wait on X      265													   0.4							 0.4	 41.5	  57.7
db file async I/O submit    1474			 36.4	  59.1	    2.4      0.7      0.8      0.3	0.1				    0.1
db file parallel read	  929.4K														    4.6     10.0      9.7      9.4     17.0	26.4	 20.6	   2.4	0.0(18)
db file parallel write	    1806					    0.1      0.2      1.5      0.3	0.7	 1.5	  3.0	   4.0	   12.7     49.9     22.9      2.8	0.2	 0.1
db file scattered read	     472														   35.2     33.1     17.2      5.5	3.0	 5.3	  0.8
db file sequential read     2.3M												      0.0(119)	   31.3     42.8     14.3      4.5	3.7	 2.9	  0.3	0.0(1)
direct path write	      79											 2.5	  1.3	   6.3	   26.6     13.9     17.7     24.1	6.3	 1.3
direct path write temp	     157														   48.4     43.3      8.3
enq: AF - task serializat      1												100.0
enq: CF - contention	      38											15.8	 47.4	  15.8	   15.8      2.6						   2.6
enq: CO - master slave de     12												 50.0	  25.0	    8.3 	      8.3					   8.3
enq: DR - contention	       1																	     100.0
enq: DW - contention	       7													  57.1	   28.6     14.3
enq: FB - contention	      33											39.4	 39.4	  12.1	    6.1 						  3.0
enq: HW - contention	      34											32.4	 32.4	  23.5	    5.9 							   5.9
enq: MW - contention	       2												100.0
enq: PS - contention	     103								       2.9		49.5	 36.9	   8.7	    1.0      1.0
enq: RO - fast object reu    227											66.1	  6.6	   6.6	   15.9      1.8      0.4		0.9	 1.3	  0.4
enq: SM -  contention	       3												 66.7			    33.3
Wait Event Histogram (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
enq: TA - contention	       5											20.0	 40.0	  40.0
enq: TD - KTF dump entrie      3											66.7			   33.3
enq: TM - contention	      31											 3.2	 35.5	  25.8	    9.7     12.9			3.2			   3.2	    3.2      3.2
enq: TO - contention	       7											42.9	 42.9	  14.3
enq: TT - contention	       1														  100.0
enq: TX - index contentio      3											33.3			   66.7
enq: TX - row lock conten      2																						  50.0		    50.0
enq: WF - contention	      29											20.7	 48.3	  20.7	    6.9 						  3.4
enq: WT - contention	      11											18.2	 27.3	  27.3	    9.1 	      9.1					   9.1
gc buffer busy acquire	     919					    0.2      0.7      0.3      0.5	1.3	 1.8	  0.9	   0.5	    2.4     17.4      9.0      0.5	2.0	 5.8	  7.2	   7.3	   35.9      6.2
gc buffer busy release	     120								       0.8	2.5	 3.3	  6.7	   6.7	   15.0     37.5     26.7      0.8
gc cr block 2-way	     813									       11.6	64.8	  8.7	   6.3	    4.4      2.5      0.2						    0.9      0.6
gc cr block busy	     198											 2.0	  7.6	  23.7	   22.2     12.1     24.7      2.5	2.5	 1.0	  1.5
gc cr block lost	     231																						  31.6	   66.7      1.7
gc cr disk read 	     302								       0.3	8.3	31.1	 28.8	  16.6	    9.3      3.3      0.3      0.3	0.3				    1.0      0.3
gc cr failure		      82											34.1	  7.3	   4.9	    8.5      3.7      6.1      2.4	9.8	14.6	  3.7	   1.2	    3.7
gc cr grant 2-way	    4745							   0.0(1)      0.1	4.5	24.1	 27.1	  23.4	   12.7      4.1      0.7      0.1	      0.0(1)			    3.0      0.3
gc cr grant busy	    707K					0.0(10)  0.0(61)  0.0(49) 0.0(134)	0.1	 9.7	 21.8	  21.4	   15.8      7.9      2.6      1.7	3.2	 9.6	  2.2	   0.4	    2.9      0.8
gc cr grant congested	      38													  13.2	   63.2      7.9     10.5			 5.3
gc cr multi block grant     792K					0.0(11)  0.0(19)  0.0(15)  0.0(37) 0.0(178)	 1.7	  7.3	  10.3	   11.4      8.6      5.6      5.4	6.5	21.8	 10.5	   1.9	    5.3      3.6
gc cr multi block mixed      279												  5.0	   2.9	    2.5      3.6      2.2      2.5	3.6	 9.0	 15.1	   5.7	   37.6     10.4
gc current block 2-way	     733										0.5	12.3	 25.8	  35.1	   19.0      3.7      0.5						    3.0      0.1
gc current block busy	    1090								       0.1	4.0	49.5	 11.7	  13.3	    4.5      6.5      8.7      0.6	0.3		  0.1		    0.4      0.3
gc current block congeste      7													  28.6	   42.9     28.6
gc current block lost	       9																						  11.1	   88.9
gc current grant 2-way	     188									       19.1	50.0	 13.8	   8.0	    3.7      1.1      1.1      0.5		 2.1		   0.5
gc current grant busy	    1510										0.5	40.8	 21.1	  15.2	    8.8      4.6      1.3      0.7	1.4	 2.6	  0.7	   0.3	    1.6      0.3
gc current grant congeste      3													  33.3					       33.3	33.3
gc current multi block re     53											35.8	 24.5	  13.2	    9.4 		       1.9		 9.4	  1.9		    3.8
gc current split	       1									      100.0
gc index operation	       1																    100.0
gc quiesce		       1					  100.0
gc remaster		      81				   2.5	   42.0      2.5									      9.9      8.6	1.2	16.0	 13.6			     3.7
gcs drm freeze in enter s    125																			1.6	 1.6	 15.2	  81.6
gcs log flush sync	    1451				   4.8	    8.4      2.0      5.6      5.4     13.4	11.2	 20.3	   6.7	    9.6      5.0      7.6      0.1
gcs remastering wait for      99					    3.0 	      8.1      8.1     15.2	 9.1	  4.0	   4.0	    2.0      5.1      1.0      1.0	1.0	29.3	  9.1
gcs resource directory to      4			 50.0	  50.0
ges enter server mode	      31			 87.1	   9.7			      3.2
ges inquiry response	      56											71.4	 19.6	   5.4	    1.8 	      1.8
ges ipc enter server mode    703			  3.3	  81.4	   13.4      0.7      0.3      0.6	0.3			   0.1
ges lms sync during dynam     15													   6.7	   13.3     40.0	       6.7     33.3
ges resource directory to     20			 40.0	  55.0			      5.0
ges2 LMON to wake up LMD       3												 33.3	  33.3	   33.3
kjctssqmg: quick message       1									      100.0
ksxr poll remote instance   2270					   53.3     40.4      2.8      2.2	0.8	 0.4
latch free		   10.1K				   0.5	   11.5      3.5      3.0     12.9     16.6	24.4	 14.3	   7.0	    3.6      1.6      0.1      0.1	0.6	 0.2
latch: MGA heap latch	     436				   2.5	   14.4     22.5     10.6      7.1	7.8	 7.8	 11.2	  13.5	    1.1      0.2	       1.1
latch: MGA shared context    724				   3.5	   11.5      1.9      0.8      2.9	9.9	17.3	 22.7	  13.7	    8.0      5.0      2.8      0.1
latch: MGA shared context    588				   2.7	    7.0      2.9      3.6      4.3	4.4	 4.4	  7.0	  20.1	    7.0      6.6     19.0      6.6	4.4
latch: active service lis      3					   66.7 		      33.3
latch: cache buffers chai  39.5K				   2.5	   27.8      3.7      3.8     16.7     22.5	12.7	  5.3	   3.0	    1.5      0.4  0.0(18)   0.0(2)  0.0(17)  0.0(12)
latch: cache buffers lru    1544				   0.3	   19.2      6.4      8.3     20.9     24.9	15.5	  3.2	   1.0	    0.4
latch: call allocation	     258				   2.7	    5.8      7.4      8.9      5.4	3.5	 2.7	  3.1	   2.3	    1.2      8.5     17.4     31.0
latch: enqueue hash chain     19					   31.6     15.8     10.5      5.3     10.5	15.8	 10.5
latch: gc element	    8195				   0.3	   14.4      4.8      4.4     16.8     20.2	15.1	 10.3	   8.1	    4.3      1.1      0.2
latch: gcs resource hash    1985				   0.7	   15.6      3.6      3.7     16.7     22.9	16.2	  7.8	   7.2	    3.1      1.0      0.1      0.3	0.6	 0.8
latch: ges resource hash     279				   2.5	   15.8     21.1     12.9      9.7     10.0	 7.5	  4.7	   6.8	    9.0
latch: kjci process conte      3						    33.3     33.3     33.3
latch: messages 	     325				   5.5	   20.9      5.8      5.8     17.5     23.4	13.8	  3.1	   4.0
latch: object queue heade    112				   0.9	   17.9      1.8      6.3     17.9     17.0	15.2	 11.6	   7.1	    4.5
Wait Event Histogram (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
latch: shared pool	     202				   2.5	   17.8     10.4      5.9      9.4	5.4	 3.5	  7.9	  24.3	   12.9
libcache interrupt action  12.9K		 0.7	 92.3	   6.3	    0.3      0.2      0.1   0.0(5)   0.0(2)			0.0(1)
library cache load lock      459					    0.2      0.4      0.2      0.9	0.9	 0.9	  0.2	   1.3	    4.4     10.9      5.0     13.7	2.4	 1.1		  57.5
library cache lock	     996										1.8	91.1	  3.6	   2.0	    0.6 	      0.4				  0.2	   0.1	    0.1      0.1
library cache pin	     989										6.7	89.1	  2.6	   0.8	    0.7      0.1
library cache: bucket mut    557			  0.2	   1.3	    7.2      6.5      4.7      3.2	2.3	 2.5	  1.6	   3.1	    6.6      4.3     16.2     31.2	8.4	 0.7
library cache: mutex X	    2185			  0.5	  15.8	   26.1      7.7      3.4      2.5	1.6	 2.8	  3.0	   3.3	    2.7      1.2      9.9      2.1	2.2	 3.2	 11.9
lock deadlock retry	       8					   62.5     37.5
log file parallel write     2079												 32.4	  13.7	   20.2     17.1     14.7      1.7	0.2
log file sequential read       6				  16.7	   33.3 			       33.3	16.7
log file sync		       1														  100.0
name-service call wait	      16											 6.3	 31.3	  43.8	    6.3 				6.3	 6.3
oracle thread bootstrap       11																	     100.0
oradebug request completi      2																			       100.0
os thread creation	      11													  72.7	   27.3
read by other session	    1445					    0.3      0.1      0.4      0.5	0.9	 2.4	  5.1	   6.0	   23.9     12.5     10.0      7.4     14.1	12.6	  3.5	   0.3
reliable message	     109											 3.7	 29.4	  30.3	   25.7      2.8      2.8      2.8	0.9		  0.9			     0.9
row cache lock		     290					    1.0      1.0	       2.8     11.7	13.4	 15.5	  17.6	   11.7      9.3      5.9      5.5	1.7		  2.1		    0.3      0.3
row cache mutex 	     260				   5.8	   20.0     12.3      4.2      1.2	0.4		  1.2				     47.7      7.3
transaction		       1										       100.0
undo_retention publish re      4				 100.0
wait list latch free	      21													 100.0
			  --------------------------------------------------------------------------------------------------------------------


System Statistics			 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	       Reads	    Reads	Writes	   Size (k)	 Changes	Calls	     Execs	 Parses     Logons	   Txns
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ---------- ------------
   1   3,180,963,459   24,480,158	 3,364	      9,865	  40,993	1,959	38,595,238	  9,648 	40	    252
   2   1,249,870,563   35,572,455	 3,234	      9,504	  39,971	1,654	15,393,234	  4,482 	44	    254
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~~~
 Sum   4,430,834,022   60,052,613	 6,598	     19,369	  80,964	3,613	53,988,472	 14,130 	84	    506
 Avg   2,215,417,011   30,026,307	 3,299	      9,685	  40,482	1,807	26,994,236	  7,065 	42	    253
 Std   1,365,488,882	7,843,438	    92		255	     723	  216	16,406,294	  3,653 	 3	      1
			  --------------------------------------------------------------------------------------------------------------------

System Statistics - Per Second		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	     Reads/s	  Reads/s     Writes/s	 Size (k)/s    Changes/s      Calls/s	   Execs/s     Parses/s   Logons/s	 Txns/s
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ---------- ------------
   1	4,221,808.00	 32,490.3	   4.5	       13.1	    54.4	  2.6	  51,224.0	   12.8       0.05	    0.3
   2	1,658,673.99	 47,207.4	   4.3	       12.6	    53.0	  2.2	  20,428.0	    5.9       0.06	    0.3
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	5,880,481.99	 79,697.7	   8.8	       25.7	   107.5	  4.8	  71,652.0	   18.8       0.11	    0.7
 Avg	2,940,241.00	 39,848.8	   4.4	       12.9	    53.7	  2.4	  35,826.0	    9.4       0.06	    0.3
 Std	1,812,409.44	 10,406.5	   0.1		0.3	     1.0	  0.3	  21,776.1	    4.8       0.00	    0.0
			  --------------------------------------------------------------------------------------------------------------------

System Statistics - Per Transaction	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	    Reads/tx	 Reads/tx    Writes/tx	Size (k)/tx   Changes/tx     Calls/tx	  Execs/tx    Parses/tx  Logons/tx
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ----------
   1   12,622,870.87	 97,143.5	  13.3	       39.1	   162.7	  7.8	 153,155.7	   38.3       0.16
   2	4,920,750.25	140,049.0	  12.7	       37.4	   157.4	  6.5	  60,603.3	   17.6       0.17
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~
 Avg	8,771,810.56	118,596.3	  13.0	       38.3	   160.0	  7.1	 106,879.5	   28.0       0.17
			  --------------------------------------------------------------------------------------------------------------------


SysStat and Global Messaging  - RAC	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

	   Blocks Received	      Blocks Served	       CPU (seconds)						Messages				       GC Blks	   GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   -------	 --------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent   GES Sent   Sent Direct  Sent Indir	  Lost	  Failure
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   -------	 --------
   1	     3,261	 1,271	       1,678	     363	  N/A	       0       24,525,390	  17,520     28,115,231       7,667	 482,014  10,592,684	 1,108		9
   2	     1,289	   339	       4,041	   1,410	  N/A	       0       27,945,671	   7,457     24,365,945      17,455	 265,122   6,955,473	   434	       73
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~	 ~~~~~~~~
 Sum	     4,550	 1,610	       5,719	   1,773	    0	       0       52,471,061	  24,977     52,481,176      25,122	 747,136  17,548,157	 1,542	       82
 Avg	     2,275	   805	       2,860	     887	  N/A	       0       26,235,531	  12,489     26,240,588      12,561	 373,568   8,774,079	   771	       41
 Std	     1,394	   659	       1,671	     740	  N/A	       0	2,418,504	   7,116      2,651,146       6,921	 153,366   2,571,897	   477	       45
			  --------------------------------------------------------------------------------------------------------------------

SysStat and Global Messaging (per Sec)- RACDB/Inst: P60SDB/p60sdb1  Snaps: 47-

     Blocks Received Per Second   Blocks Served per Second   CPU seconds per Second				     Messages Per Second				  GC Blks     GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   -------	 --------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent    GES Sent  Sent Direct  Sent Indir	Lost/s	   Fail/s
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   -------	 --------
   1	      4.33	  1.69		2.23	    0.48	  N/A	    0.00	32,550.35	   23.25      37,314.83       10.18	   639.7   14,058.72	     1		0
   2	      1.71	  0.45		5.36	    1.87	  N/A	    0.00	37,086.05	    9.90      32,335.48       23.16	   351.8    9,230.45	     1		0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~	 ~~~~~~~~
 Sum	      6.04	  2.14		7.59	    2.35	 0.00	    0.00	69,636.40	   33.15      69,650.30       33.34	   991.6   23,289.17	     2		0
 Avg	      3.02	  1.07		3.79	    1.18	  N/A	    0.00	34,818.20	   16.57      34,825.15       16.67	   495.8   11,644.58	     1		0
 Std	      1.85	  0.87		2.22	    0.98	  N/A	    0.00	 3,207.22	    9.44       3,520.93        9.18	   203.6    3,414.11	     1		0
			  --------------------------------------------------------------------------------------------------------------------

SysStat and Global Messaging (per Tx)- RACDB/Inst: P60SDB/p60sdb1  Snaps: 47-4

	Blocks Received per Tx	      Blocks Served	    CPU (seconds) per Tx				Messages per Transaction			       GC Blks	   GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   ------	--------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent   GES Sent   Sent Direct  Sent Indir   Lost/T	 Fail/Tx
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   ------	--------
   1	     12.94	  5.04		6.66	    1.44	  N/A	    0.00	97,322.98	   69.52     111,568.38       30.42	 1,912.8   42,034.46	  4.4	     0.0
   2	      5.07	  1.33	       15.91	    5.55	  N/A	    0.00       110,022.33	   29.36      95,928.92       68.72	 1,043.8   27,383.75	  1.7	     0.3
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~	~~~~~~~~
 Avg	      9.01	  3.19	       11.28	    3.50	  N/A	    0.00       103,672.65	   49.44     103,748.65       49.57	 1,478.3   34,709.11	  3.1	     0.2
			  --------------------------------------------------------------------------------------------------------------------


Global Cache Efficiency Percentages	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

	       Buffer Access
       -----------------------------
  I#	   Local % Remote %   Disk %	Locality %
----   ----------- -------- --------   -----------
   1	     99.23     0.00	0.77	     56.94
   2	     97.15     0.00	2.85	     80.63
			  --------------------------------------------------------------------------------------------------------------------

Global Latency Characteristics		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

				CR Blocks				  CU Blocks
		 ---------------------------------------   ---------------------------------------
	GE Get	   Receive     Build	 Flush Log Flush     Receive	   Pin	   Flush Log Flush
  I# Time (us)	 Time (us) Time (us) Time (us) CR Srvd %   Time (us) Time (us) Time (us) CU Srvd %
---- ---------	 --------- --------- --------- ---------   --------- --------- --------- ---------
   1	   257	     62085	  34	  4943	    24.0       67366	  4444	    5808      10.0
   2	  1922	     49381	 102	  4176	     6.5	6749	 10000	    5316       3.9
			  --------------------------------------------------------------------------------------------------------------------

Global Messaging Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

	     Queue Time (us)	    Process Time (us)	      % Messages Sent
       --------------------------   -----------------	--------------------------
  I#	   Sent  on ksxp Received   GCS msgs GES msgs	  Direct Indirect Flow Ctr
----   -------- -------- --------   -------- --------	-------- -------- --------
   1	    251    35997       23	  15	   15	     4.4     95.6      0.0
   2	    387    39817       12	  12	   38	     3.7     96.2      0.1
			  --------------------------------------------------------------------------------------------------------------------


Global CR Server Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

			   Block Requests					   Results			 Fairness      Light		   Total
       -----------------------------------------------------   ----------------------------------------------	----------   --------	--------------------------
  I#		CR	    CU	      Data     Undo	  TX	   Current Private	 Zero  Dsk Rd	 Fail	 Down Conv	Works	   Flushes     Builds Erro
----   ----------- ----------- ----------- -------- --------   ----------- ------- ---------- ------- -------	----------   --------	---------- ---------- ----
   1	       295	   119	       295	  1	  25	       316	 7	   39	   47	    0		64	    7		87	  292	 0
   2	     1,075	   555	     1,075	 15	 441	     1,328	 5	   34	  261	    0	       827	1,721		91	1,075	 0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~~ ~~~~~~~ ~~~~~~~~~~ ~~~~~~~ ~~~~~~~	~~~~~~~~~~   ~~~~~~~~	~~~~~~~~~~ ~~~~~~~~~~ ~~~~
 Sum	     1,370	   674	     1,370	 16	 466	     1,644	12	   73	  308	    0	       891	1,728	       178	1,367	 0
 Avg	       685	   337	       685	  8	 233	       822	 6	   37	  154	    0	       446	  864		89	  684	 0
 Std	       552	   308	       552	 10	 294	       716	 1	    4	  151	    0	       540	1,212		 3	  554	 0
			  --------------------------------------------------------------------------------------------------------------------

Global Current Server Statistics	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

  I#	    Pins % <100us   % <1ms  % <10ms % <100ms	% <1s	% <10s	   Flushes % <100us   % <1ms  % <10ms % <100ms	  % <1s   % <10s
---- ----------- -------- -------- -------- -------- -------- -------- ----------- -------- -------- -------- -------- -------- --------
   1	       9    22.22    44.44    22.22    11.11	 0.00	  0.00	       167     0.60    33.53	37.13	 28.74	   0.00     0.00
   2	      18    55.56    22.22     5.56    11.11	 5.56	  0.00	       158     0.00    24.68	53.16	 22.15	   0.00     0.00
 ~~~ ~~~~~~~~~~~						       ~~~~~~~~~~~
 Sum	      27							       325
 Avg	      14							       163
 Std	       6								 6
			  --------------------------------------------------------------------------------------------------------------------


Global Cache Transfer Statistics	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> Busy        (Busy) - Block Transfer impacted by Remote Contention
-> Congested  (Cngst) - Block Transfer impacted by Remote System Load
-> All - average time of All blocks (Immed,Busy,Cngst) in us
-> Ordered by instance_number, CR + Current Blocks Received desc

Instance#	Block		       CR Blocks		       Current Blocks		       CR Avg Time (us) 	  Current Avg Time (us)
---------   ------------   --------------------------------   --------------------------------	 ---------------------------   ---------------------------
Dest  Src   Class	      Received %Immed  %Busy %Cngst	 Received %Immed  %Busy %Cngst	    All  Immed	 Busy  Cngst	  All  Immed   Busy  Cngst
---- ----   ------------   ----------- ------ ------ ------   ----------- ------ ------ ------	 ------ ------ ------ ------   ------ ------ ------ ------
   1	2   data block		   928	 26.5	73.5	0.0	    3,166   83.1   16.3    0.6	  80373    569 1.E+05	 N/A	68850  78901  18159  54980
	2   undo header 	   297	 97.6	 2.4	0.0	       18   38.9   61.1    0.0	  14143  14363	 5045	 N/A   1.E+05	1612 2.E+05    N/A
	2   others		    35	100.0	 0.0	0.0	       89    7.9   92.1    0.0	    298    298	  N/A	 N/A	  906	 412	948    N/A
	2   undo block		    15	 60.0	40.0	0.0		0    N/A    N/A    N/A	   1901    326	 4263	 N/A	  N/A	 N/A	N/A    N/A

   2	1   data block		   278	 69.1	30.9	0.0	    1,186   62.8   36.8    0.4	  57114  80263	 5434	 N/A	 6505	6176   7106   3180
	1   others		    33	100.0	 0.0	0.0	       78   11.5   88.5    0.0	  31409  31409	  N/A	 N/A	14071	 998  15776    N/A
	1   undo header 	    21	 95.2	 4.8	0.0	       17    0.0  100.0    0.0	    743    750	  608	 N/A	 2897	 N/A   2897    N/A
	1   undo block		     1	100.0	 0.0	0.0		0    N/A    N/A    N/A	    342    342	  N/A	 N/A	  N/A	 N/A	N/A    N/A
			  --------------------------------------------------------------------------------------------------------------------

Global Cache Transfer (Immediate)	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Ordered by instance_number, CR + Current Blocks Received desc

Instance#	Block	     Lost Blocks	 Immediate CR Blocks	     Immediate Current Blocks	   Immed CR Avg Time (us)   Immed Current Avg Time (us)
---------   ------------   --------------   ----------------------------   ----------------------------   -----------------------   -----------------------
Dest  Src   Class	     Count Time(u      Received  %2-hop   %3-hop      Received	%2-hop	 %3-hop     Total   2-hop   3-hop     Total   2-hop   3-hop
---- ----   ------------   ------- ------   ----------- ------- --------   ----------- ------- --------   ------- ------- -------   ------- ------- -------
   1	2   data block		 0    N/A	    246   100.0      0.0	 2,630	 100.0	    0.0       569     569     N/A     78901   78901	N/A
	2   undo header 	 0    N/A	    290   100.0      0.0	     7	 100.0	    0.0     14363   14363     N/A      1612    1612	N/A
	2   others		 0    N/A	     35   100.0      0.0	     7	 100.0	    0.0       298     298     N/A	412	412	N/A
	2   undo block		 0    N/A	      9   100.0      0.0	     0	   N/A	    N/A       326     326     N/A	N/A	N/A	N/A

   2	1   data block		 0    N/A	    192   100.0      0.0	   745	 100.0	    0.0     80263   80263     N/A      6176    6176	N/A
	1   others		 0    N/A	     33   100.0      0.0	     9	 100.0	    0.0     31409   31409     N/A	998	998	N/A
	1   undo header 	 0    N/A	     20   100.0      0.0	     0	   N/A	    N/A       750     750     N/A	N/A	N/A	N/A
	1   undo block		 0    N/A	      1   100.0      0.0	     0	   N/A	    N/A       342     342     N/A	N/A	N/A	N/A
			  --------------------------------------------------------------------------------------------------------------------


Cluster Interconnect			 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

					 Begin					  End (if different from Begin)
		  --------------------------------------------------   --------------------------------------------------
  I# NAME	  IP Address	  Pub Source			       IP Address      Pub Source
---- ----------   --------------- --- ------------------------------   --------------- --- ------------------------------
   1 fg-priv:1	  169.254.26.166  N
   2 fg-priv:1	  169.254.26.102  N
			  --------------------------------------------------------------------------------------------------------------------

Ping Statistics 			 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Latency of the roundtrip of a message from  Src Instance to the Target instances

 Instance#	       500 bytes		    8 Kbytes
-----------   --------------------------   --------------------------
		    Ping    Avg      Std	 Ping	 Avg	  Std
 Src Target	   Count Time(us)    Dev	Count Time(us)	  Dev
---- ------   ---------- -------- ------   ---------- -------- ------
   1	  1	      68      522    0.7	   74	   468	  0.4
	  2	      68   178116  707.6	   74	204377	754.8

   2	  1	      67    48130  373.8	   73	 47609	358.2
	  2	      67      289    0.1	   73	   273	  0.1
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Client Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

				   Sent (MB)							     Received (MB)
       -----------------------------------------------------------------   -----------------------------------------------------------------
  I#	    Total      Cache	    IPQ        DLM	  PNG	    Misc	Total	   Cache	IPQ	   DLM	      PNG	Misc
----   ---------- ---------- ---------- ---------- ---------- ----------   ---------- ---------- ---------- ---------- ---------- ----------
   1	  7,732.5	 8.7	    3.6    7,656.5	  1.2	    62.4      6,245.5	    17.8       11.9    6,146.5	      1.2	68.1
   2	  6,154.8	20.2	   11.9    6,054.5	  1.2	    66.9      7,644.4	     7.3	3.6    7,571.0	      1.2	61.3
 ~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~
 Sum	 13,887.3	29.0	   15.5   13,711.1	  2.5	   129.3     13,889.9	    25.1       15.5   13,717.5	      2.5      129.4
 Avg	  6,943.6	14.5	    7.8    6,855.5	  1.2	    64.6      6,945.0	    12.6	7.8    6,858.7	      1.2	64.7
 Std	  1,115.6	 8.1	    5.9    1,132.8	  0.0	     3.2	989.1	     7.5	5.9    1,007.3	      0.0	 4.8
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Client Statistics (per Second)DB/Inst: P60SDB/p60sdb1  Snaps: 47-

				  Sent (MB/s)							    Received (MB/s)
       -----------------------------------------------------------------   -----------------------------------------------------------------
  I#	    Total      Cache	    IPQ        DLM	  PNG	    Misc	Total	   Cache	IPQ	   DLM	      PNG	Misc
----   ---------- ---------- ---------- ---------- ---------- ----------   ---------- ---------- ---------- ---------- ---------- ----------
   1	     10.3	 0.0	    0.0       10.2	  0.0	     0.1	  8.3	     0.0	0.0	   8.2	      0.0	 0.1
   2	      8.2	 0.0	    0.0        8.0	  0.0	     0.1	 10.1	     0.0	0.0	  10.0	      0.0	 0.1
 ~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~
 Sum	     18.4	 0.0	    0.0       18.2	  0.0	     0.2	 18.4	     0.0	0.0	  18.2	      0.0	 0.2
 Avg	      9.2	 0.0	    0.0        9.1	  0.0	     0.1	  9.2	     0.0	0.0	   9.1	      0.0	 0.1
 Std	      1.5	 0.0	    0.0        1.5	  0.0	     0.0	  1.3	     0.0	0.0	   1.3	      0.0	 0.0
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Device Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs
-> null means begin value > end value

			Interface					       Sent							  Received
       ------------------------------------------   ----------------------------------------------------------	 ----------------------------------------------------------
										       Packets	Buffer Carrier					    Packets  Buffer   Frame
  I#   NAME	  IP Address	  IP Mask		   MBytes      Packets	Errors Dropped	Ovrrun	  Lost		MBytes	    Packets  Errors Dropped  Ovrrun  Errors
----   ---------- --------------- ---------------   ------------- ------------ ------- ------- ------- -------	 ------------- ------------ ------- ------- ------- -------
   1   eth0	  10.1.5.4	  255.255.255.0 	 11,519.3   14,475,531	     0	     0	     0	     0	      10,033.4	 14,218,951	  0	  0	  0	  0
       fg-priv	  192.168.2.1	  255.255.255.0 	 10,469.7    9,848,077	     0	     0	     0	     0	       9,257.0	 14,075,993	  0	  0	  0	  0
       fg-priv:1  169.254.26.166  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.1	  255.255.255.0 	      3.6	 5,586	     0	     0	     0	     0		   1.1	      5,112	  0	  0	  0	  0
       fg-pub:1   192.168.1.22	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.23	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:4   192.168.1.11	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.1	  255.255.255.0 	      3.4	 3,802	     0	     0	     0	     0		   2.2	      5,006	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		    145.8    2,775,072	     0	     0	     0	     0		 145.8	  2,775,072	  0	  0	  0	  0
   2   eth0	  10.1.5.6	  255.255.255.0 	 10,213.9   14,228,907	     0	     0	     0	     0	      11,336.9	 14,467,946	  0	  0	  0	  0
       fg-priv	  192.168.2.2	  255.255.255.0 	  9,188.7   10,488,508	     0	     0	     0	     0	      10,555.5	 14,322,602	  0	  0	  0	  0
       fg-priv:1  169.254.26.102  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.2	  255.255.255.0 	      1.1	 5,143	     0	     0	     0	     0		   3.7	      6,905	  0	  0	  0	  0
       fg-pub:1   192.168.1.12	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.21	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.2	  255.255.255.0 	      3.3	 3,821	     0	     0	     0	     0		   2.2	      5,049	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		    122.9    1,904,248	     0	     0	     0	     0		 122.9	  1,904,248	  0	  0	  0	  0
 ~~~						    ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~	 ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~
 Sum							 41,671.6   53,738,695	     0	     0	     0	     0	      41,460.6	 61,786,884	  0	  0	  0	  0
 Avg							  2,451.3    3,161,100	     0	     0	     0	     0	       2,438.9	  3,634,523	  0	  0	  0	  0
 Std							  4,534.3    5,364,525	     0	     0	     0	     0	       4,508.5	  6,131,537	  0	  0	  0	  0
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Device Statistics (per Second)DB/Inst: P60SDB/p60sdb1  Snaps: 47-
-> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs
-> Blank  means begin value > end value

			Interface					       Sent							  Received
       ------------------------------------------   ----------------------------------------------------------	 ----------------------------------------------------------
										       Packets	Buffer Carrier					    Packets  Buffer   Frame
  I#   NAME	  IP Address	  IP Mask		   MBytes      Packets	Errors Dropped	Ovrrun	  Lost		MBytes	    Packets  Errors Dropped  Ovrrun  Errors
----   ---------- --------------- ---------------   ------------- ------------ ------- ------- ------- -------	 ------------- ------------ ------- ------- ------- -------
   1   eth0	  10.1.5.4	  255.255.255.0 	     15.3	19,212	     0	     0	     0	     0		  13.3	     18,872	  0	  0	  0	  0
       fg-priv	  192.168.2.1	  255.255.255.0 	     13.9	13,070	     0	     0	     0	     0		  12.3	     18,682	  0	  0	  0	  0
       fg-priv:1  169.254.26.166  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.1	  255.255.255.0 	      0.0	     7	     0	     0	     0	     0		   0.0		  7	  0	  0	  0	  0
       fg-pub:1   192.168.1.22	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.23	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:4   192.168.1.11	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.1	  255.255.255.0 	      0.0	     5	     0	     0	     0	     0		   0.0		  7	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		      0.2	 3,683	     0	     0	     0	     0		   0.2	      3,683	  0	  0	  0	  0
   2   eth0	  10.1.5.6	  255.255.255.0 	     13.6	18,883	     0	     0	     0	     0		  15.0	     19,200	  0	  0	  0	  0
       fg-priv	  192.168.2.2	  255.255.255.0 	     12.2	13,919	     0	     0	     0	     0		  14.0	     19,007	  0	  0	  0	  0
       fg-priv:1  169.254.26.102  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.2	  255.255.255.0 	      0.0	     7	     0	     0	     0	     0		   0.0		  9	  0	  0	  0	  0
       fg-pub:1   192.168.1.12	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.21	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.2	  255.255.255.0 	      0.0	     5	     0	     0	     0	     0		   0.0		  7	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		      0.2	 2,527	     0	     0	     0	     0		   0.2	      2,527	  0	  0	  0	  0
 ~~~						    ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~	 ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~
 Sum							     55.3	71,319	     0	     0	     0	     0		  55.0	     82,000	  0	  0	  0	  0
 Avg							      3.3	 4,195	     0	     0	     0	     0		   3.2	      4,824	  0	  0	  0	  0
 Std							      6.0	 7,119	     0	     0	     0	     0		   6.0	      8,137	  0	  0	  0	  0
			  --------------------------------------------------------------------------------------------------------------------

Dynamic Remastering Statistics		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Affinity Objects - Affinity objects remastered at the begin/end snapshot
-> Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot

				   Counts per Ops					 Time per Ops (seconds) 			 Affinity Objects		  Read Mostly Objects
		---------------------------------------------------   -----------------------------------------------------------   -------------------------	--------------------------------------
     Remaster	  Remastered Replay Locks Replay Locks	  Resources														    Begin
  I#	  Ops	     Objects	 Received	  Sent	    Cleaned    Remaster    Freeze   Cleanup    Replay  Fixwrite      Sync	   Begin	  End	       Begin (persistent)	   End
---- --------	------------ ------------ ------------ ------------   --------- --------- --------- --------- --------- ---------   ------------ ------------	------------ ------------ ------------
   1	    1		81.0	      0.0	   0.0		0.0	   0.46      0.01      0.03	 0.05	   0.04      0.29	       3	    3		  19		2	   100
   2	    1		81.0	      0.0	   0.0		0.0	   0.31      0.01      0.05	 0.05	   0.04      0.13	      52	   52		  19		2	   100
 ~~~ ~~~~~~~~	~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~   ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~   ~~~~~~~~~~~~ ~~~~~~~~~~~~	~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~
 Avg	    1		81.0	      0.0	   0.0		0.0	   0.39      0.01      0.04	 0.05	   0.04      0.21	      28	   28		  19		2	   100
 Max				      0.0	   0.0		0.0	   0.46      0.01      0.05	 0.05	   0.04      0.29	      52	   52		  19		2	   100
			  --------------------------------------------------------------------------------------------------------------------


SQL ordered by Elapsed Time (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Captured SQL account for   90.8% of Total DB Time (s):	  283,471
-> Captured PL/SQL account for	 32.0% of Total DB Time (s):	     283,471

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	  Elapsed (s)	  CPU (s)  IOWait (s)		Gets	    Reads	  Rows Cluster (s)	  Execs     Elapsed (s)     CPU (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	DB time   DB CPU  IO Wait     Gets    Reads  Cluster	Execs
-------------	------------- ----------- ----------- -------------- ------------ ------------ ----------- ------------   ------------- ----------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	   257,141.65	17,067.46   92,963.20  4,128,165,280   55,045,162   50,868,515	150,684.18   50,868,998 	   0.01        0.00	   0.00 	  81.2		1.1	     1.0	0.00	   90.7     80.0      0.9     93.2     91.7	90.7	 94.2
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

1byq3btcxh13y	     1,063.63	    23.81      218.27	     176,979	  167,465	     2	    838.23	      2 	 531.81       11.91	 109.14       88,489.5	   83,732.5	     1.0      419.11	    0.4      0.1      0.0      0.0	0.3	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '114'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

2q574p98jgjxa	     1,062.56	    22.81      212.01	     167,569	  158,298	     2	    843.66	      2 	 531.28       11.40	 106.01       83,784.5	   79,149.0	     1.0      421.83	    0.4      0.1      0.0      0.0	0.3	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '135'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

b45jpawxk7x03	     1,060.71	    25.08      227.73	     200,231	  186,310	     2	    826.39	      2 	 530.35       12.54	 113.86      100,115.5	   93,155.0	     1.0      413.19	    0.4      0.1      0.0      0.0	0.3	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '239'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

5gu1skrjws96k	     1,060.03	    21.61      204.78	     161,014	  151,942	     2	    849.64	      2 	 530.01       10.80	 102.39       80,507.0	   75,971.0	     1.0      424.82	    0.4      0.1      0.0      0.0	0.3	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '224'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

cxbpsarfrjbk0	     1,059.79	    22.76      218.05	     168,923	  158,919	     2	    836.06	      2 	 529.89       11.38	 109.02       84,461.5	   79,459.5	     1.0      418.03	    0.4      0.1      0.0      0.0	0.3	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '169'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

drvvtfj8as01g	     1,059.44	    20.14      191.27	     141,355	  134,807	     2	    863.33	      2 	 529.72       10.07	  95.64       70,677.5	   67,403.5	     1.0      431.67	    0.4      0.1      0.0      0.0	0.2	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '233'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

3y9kpzk6azbmj	     1,059.44	    23.45      219.62	     168,873	  159,796	     2	    833.74	      2 	 529.72       11.72	 109.81       84,436.5	   79,898.0	     1.0      416.87	    0.4      0.1      0.0      0.0	0.3	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '237'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

67r0q0md59ppd	     1,059.35	    23.66      215.50	     171,662	  161,678	     2	    837.81	      2 	 529.67       11.83	 107.75       85,831.0	   80,839.0	     1.0      418.90	    0.4      0.1      0.0      0.0	0.3	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '226'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

3nbpzvhcr3kfm	     1,059.29	    21.24      192.87	     148,839	  141,320	     2	    861.23	      2 	 529.65       10.62	  96.44       74,419.5	   70,660.0	     1.0      430.61	    0.4      0.1      0.0      0.0	0.2	 0.5	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '231'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by CPU Time (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Captured SQL account for   80.5% of Total CPU Time (s):	    21,327
-> Captured PL/SQL account for	 78.0% of Total CPU Time (s):	       21,327

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	    CPU (s)   Elapsed (s)  IOWait (s)		Gets	    Reads	  Rows Cluster (s)	  Execs       CPU (s)	Elapsed (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	 DB CPU  DB time  IO Wait     Gets    Reads  Cluster	Execs
-------------	----------- ------------- ----------- -------------- ------------ ------------ ----------- ------------   ----------- ------------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	  17,067.46    257,141.65   92,963.20  4,128,165,280   55,045,162   50,868,515	150,684.18   50,868,998 	 0.00	       0.01	   0.00 	  81.2		1.1	     1.0	0.00	   80.0     90.7     88.7     93.2     91.7	90.7	 94.2
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

8hd7cuj9t6jbx	   1,055.00	 1,058.30	 1.46	 291,659,086	      129	     2	      0.00	      2        527.50	     529.15	   0.73  145,829,543.0	       64.5	     1.0	0.00	    4.9      0.4      0.0      6.6	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

6sp9qmf2vj08q	   1,054.90	 1,057.32	 1.08	 277,162,241	      127	     2	      0.00	      2        527.45	     528.66	   0.54  138,581,120.5	       63.5	     1.0	0.00	    4.9      0.4      0.0      6.3	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '42'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

c7hvsf8j9c5fx	   1,054.18	 1,056.44	 1.09	 276,009,067	      104	     2	      0.00	      2        527.09	     528.22	   0.54  138,004,533.5	       52.0	     1.0	0.00	    4.9      0.4      0.0      6.2	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

39a45vj8zsf8j	   1,053.90	 1,056.47	 0.94	 284,689,469	       98	     2	      0.00	      2        526.95	     528.24	   0.47  142,344,734.5	       49.0	     1.0	0.00	    4.9      0.4      0.0      6.4	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '94'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

fzsxh00ghcb1k	   1,053.64	 1,056.32	 0.86	 301,844,354	       92	     2	      0.00	      2        526.82	     528.16	   0.43  150,922,177.0	       46.0	     1.0	0.00	    4.9      0.4      0.0      6.8	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '134'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

g8v8v5r71h9cm	   1,053.31	 1,056.33	 1.13	 279,467,768	      101	     2	      0.00	      2        526.65	     528.17	   0.56  139,733,884.0	       50.5	     1.0	0.00	    4.9      0.4      0.0      6.3	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

8qh2pxjk3xp9m	   1,053.14	 1,056.34	 1.36	 301,692,469	      114	     2	      0.00	      2        526.57	     528.17	   0.68  150,846,234.5	       57.0	     1.0	0.00	    4.9      0.4      0.0      6.8	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '245'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

fv8pnssaw1s9q	   1,045.39	 1,057.14	10.91	 294,119,376	   15,441	     2	      0.00	      2        522.70	     528.57	   5.45  147,059,688.0	    7,720.5	     1.0	0.00	    4.9      0.4      0.0      6.6	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '209'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

d8zwkn2fy9t2s	     973.60	   974.60	 0.21	 276,458,522		9	     2	      0.00	      2        486.80	     487.30	   0.11  138,229,261.0		4.5	     1.0	0.00	    4.6      0.3      0.0      6.2	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '179'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by User I/O Time (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Captured SQL account for   88.7% of Total User I/O Wait Time (s):	     104,804
-> Captured PL/SQL account for	 35.6% of Total User I/O Wait Time (s): 	104,804

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	 IOWait (s)   Elapsed (s)     CPU (s)		Gets	    Reads	  Rows Cluster (s)	  Execs    IOWait (s)	Elapsed (s)	CPU (s) 	  Gets	      Reads	    Rows Cluster (s)	IO Wait  DB time   DB CPU     Gets    Reads  Cluster	Execs
-------------	----------- ------------- ----------- -------------- ------------ ------------ ----------- ------------   ----------- ------------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	  92,963.20    257,141.65   17,067.46  4,128,165,280   55,045,162   50,868,515	150,684.18   50,868,998 	 0.00	       0.01	   0.00 	  81.2		1.1	     1.0	0.00	   88.7     90.7     80.0     93.2     91.7	90.7	 94.2
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

fv8pnssaw1s9q	      10.91	 1,057.14    1,045.39	 294,119,376	   15,441	     2	      0.00	      2 	 5.45	     528.57	 522.70  147,059,688.0	    7,720.5	     1.0	0.00	    0.0      0.4      4.9      6.6	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '209'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

8hd7cuj9t6jbx	       1.46	 1,058.30    1,055.00	 291,659,086	      129	     2	      0.00	      2 	 0.73	     529.15	 527.50  145,829,543.0	       64.5	     1.0	0.00	    0.0      0.4      4.9      6.6	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

8qh2pxjk3xp9m	       1.36	 1,056.34    1,053.14	 301,692,469	      114	     2	      0.00	      2 	 0.68	     528.17	 526.57  150,846,234.5	       57.0	     1.0	0.00	    0.0      0.4      4.9      6.8	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '245'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

g8v8v5r71h9cm	       1.13	 1,056.33    1,053.31	 279,467,768	      101	     2	      0.00	      2 	 0.56	     528.17	 526.65  139,733,884.0	       50.5	     1.0	0.00	    0.0      0.4      4.9      6.3	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

c7hvsf8j9c5fx	       1.09	 1,056.44    1,054.18	 276,009,067	      104	     2	      0.00	      2 	 0.54	     528.22	 527.09  138,004,533.5	       52.0	     1.0	0.00	    0.0      0.4      4.9      6.2	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '52'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

6sp9qmf2vj08q	       1.08	 1,057.32    1,054.90	 277,162,241	      127	     2	      0.00	      2 	 0.54	     528.66	 527.45  138,581,120.5	       63.5	     1.0	0.00	    0.0      0.4      4.9      6.3	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '42'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

39a45vj8zsf8j	       0.94	 1,056.47    1,053.90	 284,689,469	       98	     2	      0.00	      2 	 0.47	     528.24	 526.95  142,344,734.5	       49.0	     1.0	0.00	    0.0      0.4      4.9      6.4	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '94'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

fzsxh00ghcb1k	       0.86	 1,056.32    1,053.64	 301,844,354	       92	     2	      0.00	      2 	 0.43	     528.16	 526.82  150,922,177.0	       46.0	     1.0	0.00	    0.0      0.4      4.9      6.8	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '134'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

d8zwkn2fy9t2s	       0.21	   974.60      973.60	 276,458,522		9	     2	      0.00	      2 	 0.11	     487.30	 486.80  138,229,261.0		4.5	     1.0	0.00	    0.0      0.3      4.6      6.2	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '179'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Gets (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Total Buffer Gets:	4,430,834,022
-> Captured SQL account for   94.3% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id		  Gets	      Reads   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)	  Execs 	    Gets	Reads	Elapsed (s)	CPU (s)  IOWait (s)	    Rows Cluster (s)	   Gets    Reads  DB time   DB CPU  IO Wait  Cluster	Execs
-------------	-------------- ------------ ------------- ----------- ----------- ------------ ----------- ------------   -------------- ------------ ------------- ----------- ----------- ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	 4,128,165,280	 55,045,162    257,141.65   17,067.46	92,963.20   50,868,515	150,684.18   50,868,998 	    81.2	  1.1	       0.01	   0.00        0.00	     1.0	0.00	   93.2     91.7     90.7     80.0     88.7	90.7	 94.2
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

b329y81c4wbq1	   341,634,534		  7	   973.67      973.03	     0.04	     2	      0.00	      2    170,817,267.0	  3.5	     486.83	 486.51        0.02	     1.0	0.00	    7.7      0.0      0.3      4.6	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '189'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

fzsxh00ghcb1k	   301,844,354		 92	 1,056.32    1,053.64	     0.86	     2	      0.00	      2    150,922,177.0	 46.0	     528.16	 526.82        0.43	     1.0	0.00	    6.8      0.0      0.4      4.9	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '134'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

8qh2pxjk3xp9m	   301,692,469		114	 1,056.34    1,053.14	     1.36	     2	      0.00	      2    150,846,234.5	 57.0	     528.17	 526.57        0.68	     1.0	0.00	    6.8      0.0      0.4      4.9	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '245'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

fndd8kn6zzc00	   297,209,006		  8	   972.68      971.18	     0.71	     2	      0.00	      2    148,604,503.0	  4.0	     486.34	 485.59        0.36	     1.0	0.00	    6.7      0.0      0.3      4.6	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '172'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

fv8pnssaw1s9q	   294,119,376	     15,441	 1,057.14    1,045.39	    10.91	     2	      0.00	      2    147,059,688.0      7,720.5	     528.57	 522.70        5.45	     1.0	0.00	    6.6      0.0      0.4      4.9	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '209'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

8hd7cuj9t6jbx	   291,659,086		129	 1,058.30    1,055.00	     1.46	     2	      0.00	      2    145,829,543.0	 64.5	     529.15	 527.50        0.73	     1.0	0.00	    6.6      0.0      0.4      4.9	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '16'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

39a45vj8zsf8j	   284,689,469		 98	 1,056.47    1,053.90	     0.94	     2	      0.00	      2    142,344,734.5	 49.0	     528.24	 526.95        0.47	     1.0	0.00	    6.4      0.0      0.4      4.9	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '94'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

g8v8v5r71h9cm	   279,467,768		101	 1,056.33    1,053.31	     1.13	     2	      0.00	      2    139,733,884.0	 50.5	     528.17	 526.65        0.56	     1.0	0.00	    6.3      0.0      0.4      4.9	0.0	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '30'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Reads (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Total Disk Reads:	  60,052,613
-> Captured SQL account for   91.7% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	       Reads	       Gets   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)	  Execs 	 Reads		 Gets	Elapsed (s)	CPU (s)  IOWait (s)	    Rows Cluster (s)	  Reads     Gets  DB time   DB CPU  IO Wait  Cluster	Execs
-------------	------------ -------------- ------------- ----------- ----------- ------------ ----------- ------------   ------------ -------------- ------------- ----------- ----------- ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	  55,045,162  4,128,165,280    257,141.65   17,067.46	92,963.20   50,868,515	150,684.18   50,868,998 	   1.1		 81.2	       0.01	   0.00        0.00	     1.0	0.00	   91.7     93.2     90.7     80.0     88.7	90.7	 94.2
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

a52uzk244rp72	   1,165,136	147,356,341	 1,015.62      556.09	   488.08	     2	      6.00	      2      582,568.0	 73,678,170.5	     507.81	 278.05      244.04	     1.0	3.00	    1.9      3.3      0.4      2.6	0.5	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '200'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

a2q0c1jwp8bph	   1,160,034	  3,296,709	   529.21	70.49	   493.58	     1	      0.16	      1    1,160,034.0	  3,296,709.0	     529.21	  70.49      493.58	     1.0	0.16	    1.9      0.1      0.2      0.3	0.5	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

0yxz3m5s6rbuc	   1,157,308	  3,275,461	   528.24	70.77	   492.05	     1	      0.27	      1    1,157,308.0	  3,275,461.0	     528.24	  70.77      492.05	     1.0	0.27	    1.9      0.1      0.2      0.3	0.5	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '213'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

0hkn1frumxu6m	   1,147,285	  3,535,303	   529.22	71.30	   492.59	     1	      0.26	      1    1,147,285.0	  3,535,303.0	     529.22	  71.30      492.59	     1.0	0.26	    1.9      0.1      0.2      0.3	0.5	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '253'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

dhz4fxc8z3b1n	     530,796	    979,307	   974.45	37.60	   959.67	     2	      0.00	      2      265,398.0	    489,653.5	     487.23	  18.80      479.83	     1.0	0.00	    0.9      0.0      0.3      0.2	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '193'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

6gfqnqrxd0dmy	     529,499	  1,049,342	   974.92	38.25	   959.92	     2	      0.00	      2      264,749.5	    524,671.0	     487.46	  19.13      479.96	     1.0	0.00	    0.9      0.0      0.3      0.2	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

6pcyz05z3k6jd	     528,853	    994,999	   973.58	37.62	   958.74	     2	      0.00	      2      264,426.5	    497,499.5	     486.79	  18.81      479.37	     1.0	0.00	    0.9      0.0      0.3      0.2	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '183'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

3x31q3h9nbczf	     527,934	    968,745	   974.83	37.48	   960.25	     2	      0.00	      2      263,967.0	    484,372.5	     487.41	  18.74      480.13	     1.0	0.00	    0.9      0.0      0.3      0.2	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '182'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by UnOptimized Read Requests (Global)DB/Inst: P60SDB/p60sdb1  Snap
-> Total Physical Read Requests:      60,046,503
-> Captured SQL account for    0.5% of Total
-> Total UnOptimized Read Requests:	 60,046,503
-> Captured SQL account for    0.5% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

								       Total													 Per Execution									    Percentage of Total
		------------------------------------------------------------------------------------------------------------------   -----------------------------------------------------------------------------------------------------   -----------------------------------------------------------------
   SQL Id	 UnOptimized	 Requests	 Reads	 Elapsed (s)	 CPU (s)  IOWait (s)	     Rows Cluster (s)	     Execs    UnOptimized     Requests	      Reads   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)   UnOptimized Requests  Reads DB time DB CPU IO Wait Cluster  Execs
-------------	------------ ------------ ------------ ------------- ----------- ----------- ------------ ----------- ------------   ------------ ------------ ------------ ------------- ----------- ----------- ------------ -----------   ----------- -------- ------ ------- ------ ------- ------- ------
a52uzk244rp72	   1,165,136	1,165,136    1,165,136	    1,015.62	  556.09      488.08		2	 6.00		 2	582,568.0    582,568.0	  582,568.0	   507.81      278.05	   244.04	   1.0	      3.00	     1.9      1.9    1.9     0.4    2.6     0.5     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '200'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

a2q0c1jwp8bph	   1,160,034	1,160,034    1,160,034	      529.21	   70.49      493.58		1	 0.16		 1    1,160,034.0  1,160,034.0	1,160,034.0	   529.21	70.49	   493.58	   1.0	      0.16	     1.9      1.9    1.9     0.2    0.3     0.5     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

0yxz3m5s6rbuc	   1,157,308	1,157,308    1,157,308	      528.24	   70.77      492.05		1	 0.27		 1    1,157,308.0  1,157,308.0	1,157,308.0	   528.24	70.77	   492.05	   1.0	      0.27	     1.9      1.9    1.9     0.2    0.3     0.5     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '213'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

0hkn1frumxu6m	   1,147,285	1,147,285    1,147,285	      529.22	   71.30      492.59		1	 0.26		 1    1,147,285.0  1,147,285.0	1,147,285.0	   529.22	71.30	   492.59	   1.0	      0.26	     1.9      1.9    1.9     0.2    0.3     0.5     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '253'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

dhz4fxc8z3b1n	     530,796	  530,796      530,796	      974.45	   37.60      959.67		2	 0.00		 2	265,398.0    265,398.0	  265,398.0	   487.23	18.80	   479.83	   1.0	      0.00	     0.9      0.9    0.9     0.3    0.2     0.9     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '193'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

6gfqnqrxd0dmy	     529,499	  529,499      529,499	      974.92	   38.25      959.92		2	 0.00		 2	264,749.5    264,749.5	  264,749.5	   487.46	19.13	   479.96	   1.0	      0.00	     0.9      0.9    0.9     0.3    0.2     0.9     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '35'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

6pcyz05z3k6jd	     528,853	  528,853      528,853	      973.58	   37.62      958.74		2	 0.00		 2	264,426.5    264,426.5	  264,426.5	   486.79	18.81	   479.37	   1.0	      0.00	     0.9      0.9    0.9     0.3    0.2     0.9     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '183'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

3x31q3h9nbczf	     527,934	  527,934      527,934	      974.83	   37.48      960.25		2	 0.00		 2	263,967.0    263,967.0	  263,967.0	   487.41	18.74	   480.13	   1.0	      0.00	     0.9      0.9    0.9     0.3    0.2     0.9     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '182'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

3b0dw8qugt8u0	     527,891	  527,891      527,891	      972.73	   36.45      958.82		2	 0.00		 2	263,945.5    263,945.5	  263,945.5	   486.36	18.23	   479.41	   1.0	      0.00	     0.9      0.9    0.9     0.3    0.2     0.9     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '1'; v_update_pct PLS_INTEGER :=
'0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER := '
600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Executions (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Total Executions:	  53,988,472
-> Captured SQL account for   94.3% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	       Execs   Elapsed (s)     CPU (s)	IOWait (s)	     Gets	 Reads	       Rows Cluster (s)     Elapsed (s)     CPU (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	  Execs  DB time   DB CPU  IO Wait     Gets    Reads  Cluster
-------------	------------ ------------- ----------- ----------- -------------- ------------ ------------ -----------   ------------- ----------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	  50,868,998	257,141.65   17,067.46	 92,963.20  4,128,165,280   55,045,162	 50,868,515  150,684.18 	   0.01        0.00	   0.00 	  81.2		1.1	     1.0	0.00	   94.2     90.7     80.0     88.7     93.2	91.7	 90.7
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

24djtk7r8fz33	       3,435	      0.58	  0.20	      0.08	   10,331	    11	      3,334	   0.00 	   0.00        0.00	   0.00 	   3.0		0.0	     1.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
update svcobj_access$ set accesses = :5, inc_no = :6 where name = :1 AND pdb = :
2 AND tsn = :3 AND objid = :4

f3ww8rgva3hrs	       2,398	      5.62	  0.38	      0.89	    8,438	    78	      2,398	   4.43 	   0.00        0.00	   0.00 	   3.5		0.0	     1.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
update /* KSXM:FLUSH COL */ sys.col_usage$ set equality_preds
 = equality_preds + decode(bitand(:flag,1),0,0,1), equijoin_preds = equ
ijoin_preds + decode(bitand(:flag,2),0,0,1), nonequijoin_preds = nonequijoi
n_preds + decode(bitand(:flag,4),0,0,1), range_preds = range_preds

87gaftwrm2h68	       1,645	      1.26	  0.09	      0.92	    3,573	    77		277	   0.16 	   0.00        0.00	   0.00 	   2.2		0.0	     0.2	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$
o where o.obj#=:1

0gx3b09qrx9f5		 751	      2.46	  0.13	      1.07	    1,613	    21		 14	   1.18 	   0.00        0.00	   0.00 	   2.1		0.0	     0.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select obj#,index# from oid$ where user#=:1 and oid$=:2

acmvv4fhdc9zh		 730	      4.78	  0.21	      3.69	    2,704	   298		516	   0.99 	   0.01        0.00	   0.01 	   3.7		0.4	     0.7	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spar
e2, spare3, signature, spare7, spare8, spare9, nvl(dflcollid, 16382), creappid,
creverid, modappid, modverid, crepatchid, modpatchid from obj$ where owner#=:1 a
nd name=:2 and namespace=:3 and remoteowner is null and linkname is null and sub

53saa2zkr6wc3		 641	      0.59	  0.04	      0.54	    2,998	    39		849	   0.01 	   0.00        0.00	   0.00 	   4.7		0.1	     1.3	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select intcol#,nvl(pos#,0),col#,nvl(spare1,0) from ccol$ where con#=:1

9babjv8yq8ru3		 511	    237.76	  6.76	      0.64	    1,212	    82		511	   0.16 	   0.47        0.01	   0.00 	   2.4		0.2	     1.0	0.00	    0.0      0.1      0.0      0.0	0.0	 0.0	  0.0
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;

5cu0x10yu88sw		 405	      5.07	  0.15	      2.52	    2,686	    67		405	   2.43 	   0.01        0.00	   0.01 	   6.6		0.2	     1.0	0.01	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
merge into sys.wri$_index_usage iu us
ing dual on (
iu.obj# = :objn) when mat
ched then update

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Cluster Wait Time (Global)DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Total Cluster Wait Time (s): 	166,093
-> Captured SQL account for   90.8% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	Cluster (s)   Elapsed (s)     CPU (s)  IOWait (s)	    Gets	Reads	      Rows	  Execs   Cluster (s)	Elapsed (s)	CPU (s)  IOWait (s)	      Gets	  Reads 	Rows	Cluster  DB time   DB CPU     Gets  IO Wait    Reads	Execs
-------------	----------- ------------- ----------- ----------- -------------- ------------ ------------ ------------   ----------- ------------- ----------- ----------- -------------- ------------ ------------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	 150,684.18    257,141.65   17,067.46	92,963.20  4,128,165,280   55,045,162	50,868,515   50,868,998 	 0.00	       0.01	   0.00        0.00	      81.2	    1.1 	 1.0	   90.7     90.7     80.0     88.7     93.2	91.7	 94.2
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

2ax9k75b2p0d8	     865.31	 1,058.20	20.39	   187.10	 134,723      128,075		 2	      2        432.65	     529.10	  10.20       93.55	  67,361.5     64,037.5 	 1.0	    0.5      0.4      0.1      0.2	0.0	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '174'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

drvvtfj8as01g	     863.33	 1,059.44	20.14	   191.27	 141,355      134,807		 2	      2        431.67	     529.72	  10.07       95.64	  70,677.5     67,403.5 	 1.0	    0.5      0.4      0.1      0.2	0.0	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '233'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

3nbpzvhcr3kfm	     861.23	 1,059.29	21.24	   192.87	 148,839      141,320		 2	      2        430.61	     529.65	  10.62       96.44	  74,419.5     70,660.0 	 1.0	    0.5      0.4      0.1      0.2	0.0	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '231'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

90vrpau1cn37t	     860.69	 1,058.76	21.23	   193.03	 136,165      128,952		 2	      2        430.35	     529.38	  10.61       96.52	  68,082.5     64,476.0 	 1.0	    0.5      0.4      0.1      0.2	0.0	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '36'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

6wpwn81t8t9zf	     854.58	 1,058.64	21.08	   198.94	 146,574      139,520		 2	      2        427.29	     529.32	  10.54       99.47	  73,287.0     69,760.0 	 1.0	    0.5      0.4      0.1      0.2	0.0	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '236'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

99ksdkuvquzp0	     853.14	 1,059.01	21.99	   202.59	 156,544      148,257		 2	      2        426.57	     529.51	  10.99      101.29	  78,272.0     74,128.5 	 1.0	    0.5      0.4      0.1      0.2	0.0	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '65'; v_update_pct PLS_INTEGER :=
 '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

66r22xx72w6mp	     852.35	 1,058.18	22.52	   199.22	 161,588      151,562		 2	      2        426.18	     529.09	  11.26       99.61	  80,794.0     75,781.0 	 1.0	    0.5      0.4      0.1      0.2	0.0	 0.3	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '243'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

addq9vdq9961y	     851.62	 1,058.50	21.93	   200.33	 155,782      148,418		 2	      2        425.81	     529.25	  10.97      100.17	  77,891.0     74,209.0 	 1.0	    0.5      0.4      0.1      0.2	0.0	 0.2	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '249'; v_update_pct PLS_INTEGER :
= '0'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '600'; v_scale PLS_INTEGER := '65536'; v_work_unit PLS_INTEGER := '80' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

			  --------------------------------------------------------------------------------------------------------------------


System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
ASSM bg: segment fix monitor						      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
ASSM cbk:blocks examined						  2,023 	   2.7		4.0		1.3	      0.0	    1.3 	  1.4
ASSM cbk:blocks marked full						    554 	   0.7		1.1		0.4	      0.1	    0.3 	  0.4
ASSM gsp:L1 bitmaps examined						  1,596 	   2.1		3.2		1.1	      0.1	    1.0 	  1.1
ASSM gsp:L2 bitmap full 						     65 	   0.1		0.1		0.0	      0.0	    0.0 	  0.1
ASSM gsp:L2 bitmaps examined						    716 	   1.0		1.4		0.5	      0.0	    0.5 	  0.5
ASSM gsp:Search all							     81 	   0.1		0.2		0.1	      0.0	    0.0 	  0.1
ASSM gsp:Search hint							     49 	   0.1		0.1		0.0	      0.0	    0.0 	  0.0
ASSM gsp:Search steal							     44 	   0.1		0.1		0.0	      0.0	    0.0 	  0.0
ASSM gsp:bump HWM							     44 	   0.1		0.1		0.0	      0.0	    0.0 	  0.0
ASSM gsp:get free block 						  1,469 	   1.9		2.9		1.0	      0.1	    0.9 	  1.0
ASSM gsp:get free data block						  1,039 	   1.4		2.1		0.7	      0.2	    0.6 	  0.8
ASSM gsp:get free index block						    430 	   0.6		0.8		0.3	      0.1	    0.2 	  0.3
ASSM gsp:good hint							  1,241 	   1.6		2.5		0.8	      0.0	    0.8 	  0.9
ASSM rsv:fill reserve							     35 	   0.0		0.1		0.0	      0.0	    0.0 	  0.0
ASSM wasted db state change						      7 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
Batched IO (bound) vector count 					    729 	   1.0		1.4		0.5	      0.4	    0.2 	  0.8
Batched IO (full) vector count						255,247 	 338.8	      504.4	      338.8	      N/A	  338.8 	338.8
Batched IO block miss count					     57,943,650       76,898.8	  114,513.1	   38,449.4	 10,349.6      31,131.2      45,767.7
Batched IO double miss count					      1,214,585        1,611.9	    2,400.4	      806.0	    101.2	  734.4 	877.5
Batched IO same unit count						    584 	   0.8		1.2		0.4	      0.3	    0.2 	  0.6
Batched IO single block count						263,008 	 349.1	      519.8	      174.5	    240.2	    4.7 	344.4
Batched IO vector block count					     57,953,302       76,911.6	  114,532.2	   38,455.8	 10,362.3      31,128.5      45,783.1
Batched IO vector read count						934,415        1,240.1	    1,846.7	      620.0	    159.0	  507.6 	732.5
Block Cleanout Optim referenced 					     60 	   0.1		0.1		0.0	      0.0	    0.0 	  0.1
CCursor + sql area evicted						    583 	   0.8		1.2		0.4	      0.2	    0.3 	  0.5
CPU used by this session					      2,358,258        3,129.8	    4,660.6	    1,564.9	    732.4	1,047.0       2,082.8
CPU used when call started					      2,258,145        2,996.9	    4,462.7	    1,498.5	    728.5	  983.3       2,013.6
CR blocks created							    536 	   0.7		1.1		0.4	      0.3	    0.1 	  0.6
Cached Commit SCN referenced					  4,260,239,473    5,654,071.9	8,419,445.6	2,827,036.0   1,719,999.3   1,610,812.8   4,043,259.1
Client Advertised Receive Window					  3,591 	   4.8		7.1		2.4	      0.2	    2.2 	  2.5
Client Advertised Send Window						  3,591 	   4.8		7.1		2.4	      0.2	    2.2 	  2.5
Client Path Maximum Transmission Unit(MTU)			     18,110,885       24,036.9	   35,792.3	   12,018.5	 16,338.1	  465.7      23,571.2
Client Send Congestion Window						  4,871 	   6.5		9.6		3.2	      0.5	    2.9 	  3.6
Client Time (usec) Last Ack Received					501,159 	 665.1	      990.4	      332.6	     15.9	  321.3 	343.8
Client Time (usec) Last Data Received					    274 	   0.4		0.5		0.2	      0.0	    0.2 	  0.2
Client Time (usec) Last Data Sent					521,275 	 691.8	    1,030.2	      345.9	     14.3	  335.8 	356.0
Client Time (usec) Round Trip Time				      4,277,430        5,676.8	    8,453.4	    2,838.4	    819.8	2,258.7       3,418.1
Client Time (usec) Round Trip Time Variance			      7,043,227        9,347.5	   13,919.4	    4,673.7	  1,385.3	3,694.2       5,653.3
Client Total Bytes Acked					      8,106,911       10,759.1	   16,021.6	    5,379.5	    441.8	5,067.2       5,691.9
Client Total Bytes Received					      3,137,397        4,163.8	    6,200.4	    2,081.9	    167.4	1,963.5       2,200.2
Client Total Number of Retransmitted Packets				    207 	   0.3		0.4		0.3	      N/A	    0.3 	  0.3
Commit SCN cached							     64 	   0.1		0.1		0.0	      0.1	    0.0 	  0.1
DB time 							     30,850,770       40,943.5	   60,969.9	   20,471.8	  1,699.7      19,269.9      21,673.6
DBWR checkpoint buffers written 					     19 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
DBWR checkpoints							    112 	   0.1		0.2		0.1	      0.0	    0.1 	  0.1
DBWR fusion writes							    129 	   0.2		0.3		0.1	      0.0	    0.1 	  0.1
DBWR object drop buffers written					    102 	   0.1		0.2		0.1	      0.0	    0.1 	  0.1
DBWR transaction table writes						    212 	   0.3		0.4		0.1	      0.1	    0.1 	  0.2
DBWR undo block writes							  1,418 	   1.9		2.8		0.9	      0.2	    0.8 	  1.1
DFO trees parallelized							     36 	   0.0		0.1		0.0	      0.0	    0.0 	  0.0
HSC Heap Segment Block Changes						  7,772 	  10.3	       15.4		5.2	      2.3	    3.5 	  6.8
Heap Segment Array Inserts						    397 	   0.5		0.8		0.3	      0.1	    0.2 	  0.3
Heap Segment Array Updates						     18 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
KTFB alloc req								     55 	   0.1		0.1		0.0	      0.0	    0.0 	  0.0
KTFB alloc space (block)					     26,673,152       35,398.2	   52,713.7	   17,699.1	 12,606.5	8,785.0      26,613.2
KTFB alloc time (ms)						      4,705,547        6,244.7	    9,299.5	    3,122.4	  2,771.1	1,162.9       5,081.9
PX local messages recv'd						  1,031 	   1.4		2.0		0.7	      0.6	    0.3 	  1.1
PX local messages sent							  1,031 	   1.4		2.0		0.7	      0.6	    0.3 	  1.1
PX remote messages recv'd						  1,046 	   1.4		2.1		0.7	      0.5	    0.3 	  1.1

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
PX remote messages sent 						  1,046 	   1.4		2.1		0.7	      0.5	    0.3 	  1.1
Parallel operations not downgraded					     36 	   0.0		0.1		0.0	      0.0	    0.0 	  0.0
Requests to/from client 						  1,695 	   2.2		3.3		1.1	      0.2	    1.0 	  1.3
SQL*Net roundtrips to/from client					  1,183 	   1.6		2.3		0.8	      0.2	    0.7 	  0.9
active txn count during cleanout					    785 	   1.0		1.6		0.5	      0.1	    0.5 	  0.6
application wait time							  7,163 	   9.5	       14.2		4.8	      6.0	    0.5 	  9.0
background checkpoints completed					      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
background timeouts							 20,444 	  27.1	       40.4	       13.6	      0.1	   13.5 	 13.6
blocks cleaned out using minact 					    348 	   0.5		0.7		0.2	      0.0	    0.2 	  0.3
branch node splits							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
buffer is not pinned count					  4,576,631,882    6,073,977.7	9,044,727.0	3,036,988.9   1,827,078.8   1,745,049.0   4,328,928.7
buffer is pinned count						  4,210,961,517    5,588,671.6	8,322,058.3	2,794,335.8   1,699,500.7   1,592,607.3   3,996,064.3
bytes received via SQL*Net from client					974,975        1,294.0	    1,926.8	      647.0	    461.8	  320.5 	973.5
bytes sent via SQL*Net to client					298,550 	 396.2	      590.0	      198.1	     34.3	  173.8 	222.4
calls to get snapshot scn: kcmgss				     54,042,977       71,724.3	  106,804.3	   35,862.2	 21,784.7      20,458.0      51,266.3
calls to kcmgas 							  8,078 	  10.7	       16.0		5.4	      1.3	    4.5 	  6.3
calls to kcmgcs 							 19,535 	  25.9	       38.6	       13.0	      4.8	    9.6 	 16.3
cell physical IO interconnect bytes				492,228,706,816  653,252,069.5 9.727840E+08   3.2662603E+08  85,206,053.8 2.6637626E+08 3.8687581E+08
change write time							     49 	   0.1		0.1		0.0	      0.0	    0.0 	  0.0
cleanout - number of ktugct calls					  1,806 	   2.4		3.6		1.2	      0.6	    0.7 	  1.7
cleanouts and rollbacks - consistent read gets				     50 	   0.1		0.1		0.0	      0.0	    0.0 	  0.1
cleanouts only - consistent read gets					    233 	   0.3		0.5		0.2	      0.0	    0.1 	  0.2
cluster key scan block gets						  5,191 	   6.9	       10.3		3.4	      2.6	    1.6 	  5.3
cluster key scans							  3,415 	   4.5		6.7		2.3	      1.8	    1.0 	  3.6
cluster wait time						     16,365,439       21,719.6	   32,342.8	   10,859.8	  5,071.3	7,273.9      14,445.8
commit batch/immediate performed					     12 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit batch/immediate requested					     12 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanout failures: block lost					     93 	   0.1		0.2		0.1	      0.0	    0.0 	  0.1
commit cleanout failures: buffer being written				      3 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
commit cleanout failures: callback failure				     39 	   0.1		0.1		0.0	      0.0	    0.0 	  0.0
commit cleanout failures: cannot pin					      5 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
commit cleanouts							  5,542 	   7.4	       11.0		3.7	      0.4	    3.4 	  4.0
commit cleanouts successfully completed 				  5,402 	   7.2	       10.7		3.6	      0.5	    3.3 	  3.9
commit immediate performed						     12 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit immediate requested						     12 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit txn count during cleanout					    718 	   1.0		1.4		0.5	      0.1	    0.4 	  0.6
concurrency wait time							 28,702 	  38.1	       56.7	       19.0	     23.3	    2.6 	 35.5
consistent changes							 19,986 	  26.5	       39.5	       13.3	      1.4	   12.2 	 14.3
consistent gets 						  4,430,715,219    5,880,324.3	8,756,354.2	2,940,162.2   1,812,407.2   1,658,596.8   4,221,727.6
consistent gets examination					    100,584,081      133,494.2	  198,782.8	   66,747.1	 65,453.8      20,464.2     113,029.9
consistent gets examination (fastpath)				    100,581,147      133,490.3	  198,777.0	   66,745.1	 65,454.3      20,461.9     113,028.4
consistent gets from cache					  4,430,715,003    5,880,324.0	8,756,353.8	2,940,162.0   1,812,407.1   1,658,596.7   4,221,727.4
consistent gets pin						  4,330,130,762    5,746,829.6	8,557,570.7	2,873,414.8   1,746,953.2   1,638,132.3   4,108,697.3
consistent gets pin (fastpath)					  4,326,841,851    5,742,464.8	8,551,070.9	2,871,232.4   1,747,069.4   1,635,867.8   4,106,597.0
cursor authentications							    410 	   0.5		0.8		0.3	      0.1	    0.2 	  0.3
cursor reload failures							     47 	   0.1		0.1		0.0	      0.0	    0.0 	  0.1
data blocks consistent reads - undo records applied			    155 	   0.2		0.3		0.1	      0.1	    0.1 	  0.1
db block changes							 80,964 	 107.5	      160.0	       53.7	      1.0	   53.0 	 54.4
db block gets								 96,891 	 128.6	      191.5	       64.3	      0.6	   63.9 	 64.7
db block gets direct							  1,926 	   2.6		3.8		1.3	      0.1	    1.2 	  1.4
db block gets from cache						 94,965 	 126.0	      187.7	       63.0	      0.4	   62.7 	 63.3
db block gets from cache (fastpath)					 62,102 	  82.4	      122.7	       41.2	      1.4	   40.2 	 42.2
deferred (CURRENT) block cleanout applications				  2,238 	   3.0		4.4		1.5	      0.3	    1.2 	  1.7
dirty buffers inspected 						  3,707 	   4.9		7.3		2.5	      0.3	    2.2 	  2.7
enqueue conversions							    891 	   1.2		1.8		0.6	      0.1	    0.6 	  0.6
enqueue releases							 29,435 	  39.1	       58.2	       19.5	      0.4	   19.2 	 19.8
enqueue requests							 29,156 	  38.7	       57.6	       19.3	      0.6	   18.9 	 19.8
enqueue timeouts							    230 	   0.3		0.5		0.2	      0.2	    0.0 	  0.3
enqueue waits								    552 	   0.7		1.1		0.4	      0.0	    0.3 	  0.4
exchange deadlocks							      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
execute count							     53,988,472       71,652.0	  106,696.6	   35,826.0	 21,776.1      20,428.0      51,224.0
file io service time						  3,542,611,107    4,701,484.4	7,001,207.7	2,350,742.2	968,448.2   1,665,945.9   3,035,538.5
file io wait time						 99,475,484,000  132,015,387.8 1.965919E+08    66,007,693.9  40,068,796.9  37,674,775.9  94,340,611.9
free buffer inspected						     66,221,366       87,884.6	  130,872.3	   43,942.3	  8,871.8      37,669.0      50,215.6
free buffer requested						     60,052,568       79,697.6	  118,681.0	   39,848.8	 10,389.8      32,502.1      47,195.5
gc blocks compressed							  6,097 	   8.1	       12.0		4.0	      2.7	    2.1 	  6.0
gc blocks lost								  1,542 	   2.0		3.0		1.0	      0.6	    0.6 	  1.5
gc cleanout applied							      4 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gc cleanout saved							     37 	   0.0		0.1		0.0	      0.0	    0.0 	  0.0
gc cr anti locks expanded						     51 	   0.1		0.1		0.0	      0.0	    0.0 	  0.1
gc cr anti locks shrunk 						     53 	   0.1		0.1		0.0	      0.0	    0.0 	  0.1
gc cr block build time							     12 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc cr block flush time							     81 	   0.1		0.2		0.1	      0.0	    0.1 	  0.1
gc cr block receive time						  9,565 	  12.7	       18.9		6.3	      5.8	    2.2 	 10.5
gc cr blocks built							  1,378 	   1.8		2.7		0.9	      0.7	    0.4 	  1.4
gc cr blocks flushed							    178 	   0.2		0.4		0.1	      0.0	    0.1 	  0.1
gc cr blocks received							  1,610 	   2.1		3.2		1.1	      0.9	    0.4 	  1.7
gc cr blocks served							  1,773 	   2.4		3.5		1.2	      1.0	    0.5 	  1.9
gc cr bypass requests							     40 	   0.1		0.1		0.1	      N/A	    0.1 	  0.1
gc cr multiblock grant time					    122,137,580      162,096.9	  241,378.6	   81,048.4	 38,615.6      53,743.1     108,353.8
gc cr multiblock grants received				     30,649,995       40,677.2	   60,573.1	   20,338.6	  4,136.9      17,413.4      23,263.8
gc current block flush time						    181 	   0.2		0.4		0.1	      0.0	    0.1 	  0.1
gc current block pin time						     22 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc current block receive time						 22,838 	  30.3	       45.1	       15.2	     19.8	    1.2 	 29.2
gc current blocks flushed						    317 	   0.4		0.6		0.2	      0.0	    0.2 	  0.2
gc current blocks pinned						     27 	   0.0		0.1		0.0	      0.0	    0.0 	  0.0
gc current blocks received						  4,550 	   6.0		9.0		3.0	      1.9	    1.7 	  4.3
gc current blocks served						  5,719 	   7.6	       11.3		3.8	      2.2	    2.2 	  5.4
gc force cr read cr							    276 	   0.4		0.5		0.2	      0.1	    0.1 	  0.2
gc force cr read current						      3 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gc kbytes saved 							 31,693 	  42.1	       62.6	       21.0	     14.7	   10.6 	 31.4
gc kbytes sent								 28,242 	  37.5	       55.8	       18.7	     10.9	   11.1 	 26.4
gc local grants 						     42,580,850       56,509.9	   84,151.9	   28,255.0	 13,802.3      18,495.3      38,014.6
gc merge pi bg								    180 	   0.2		0.4		0.1	      0.0	    0.1 	  0.1
gc merge pi fg								    521 	   0.7		1.0		0.3	      0.0	    0.3 	  0.4
gc no change made							     23 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc read time waited							  6,664 	   8.8	       13.2		8.8	      N/A	    8.8 	  8.8
gc read wait timeouts							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gc read waits								    819 	   1.1		1.6		1.1	      N/A	    1.1 	  1.1
gc reader bypass grants 						     25 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc reader bypass waits							     13 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc remote grants						     17,417,958       23,116.4	   34,422.8	   11,558.2	  3,434.3	9,129.7      13,986.6
gc status messages received						  5,086 	   6.7	       10.1		3.4	      2.2	    1.8 	  4.9
gc status messages sent 						  5,267 	   7.0	       10.4		3.5	      2.2	    1.9 	  5.0
gcs affinity lock failures						 93,374 	 123.9	      184.5	       62.0	     87.6	    0.0 	123.9
gcs affinity lock grants					     18,161,748       24,102.0	   35,892.8	   12,051.0	 17,039.7	    2.1      24,099.9
gcs data block access record drops					  7,981 	  10.6	       15.8	       10.6	      N/A	   10.6 	 10.6
gcs data block access records					     60,217,895       79,917.0	  119,007.7	   39,958.5	 10,483.9      32,545.3      47,371.8
gcs messages sent						     52,475,909       69,643.3	  103,707.3	   34,821.7	  3,518.7      32,333.5      37,309.8
gcs read-mostly lock failures						 16,230 	  21.5	       32.1	       10.8	      5.4	    7.0 	 14.6
gcs read-mostly lock grants					      9,634,912       12,787.1	   19,041.3	    6,393.5	  2,217.7	4,825.4       7,961.7
gcs stats management (SCM) process posts				      3 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
ges messages sent							 25,122 	  33.3	       49.6	       16.7	      9.2	   10.2 	 23.2
global enqueue get time 						 10,299 	  13.7	       20.4		6.8	      6.9	    1.9 	 11.7
global enqueue gets sync						102,479 	 136.0	      202.5	       68.0	      9.8	   61.1 	 74.9
global enqueue releases 						110,218 	 146.3	      217.8	       73.1	     10.3	   65.8 	 80.4
heap block compress							     94 	   0.1		0.2		0.1	      0.0	    0.0 	  0.1
hot buffers moved to head of LRU				     68,411,345       90,795.3	  135,200.3	   45,397.6	 50,653.1	9,580.5      81,214.8
immediate (CR) block cleanout applications				    283 	   0.4		0.6		0.2	      0.1	    0.1 	  0.2
immediate (CURRENT) block cleanout applications 			  1,119 	   1.5		2.2		0.7	      0.3	    0.5 	  0.9

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
in call idle wait time						     23,448,565       31,119.6	   46,341.0	   15,559.8	    217.2      15,406.2      15,713.4
index crx upgrade (positioned)						     74 	   0.1		0.1		0.1	      N/A	    0.1 	  0.1
index fast full scans (full)						      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
index fetch by key						     45,074,118       59,822.8	   89,079.3	   29,911.4	 42,287.4	    9.7      59,813.1
index range scans						     99,058,415      131,469.3	  195,767.6	   65,734.7	 64,026.0      20,461.4     111,007.9
index reclamation/extension switch					      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
leaf node 90-10 splits							     72 	   0.1		0.1		0.1	      N/A	    0.1 	  0.1
leaf node splits							    394 	   0.5		0.8		0.3	      0.1	    0.2 	  0.3
lob reads								  1,515 	   2.0		3.0		1.0	      0.7	    0.5 	  1.5
lob writes								 15,270 	  20.3	       30.2	       10.1	      0.6	    9.7 	 10.6
lob writes unaligned							 15,270 	  20.3	       30.2	       10.1	      0.6	    9.7 	 10.6
logical read bytes from cache				     3.629718868787E+13 4.81726383E+10 7.173357E+10   2.4086319E+10 1.4847242E+10 1.3587733E+10 3.4584905E+10
logons cumulative							     84 	   0.1		0.2		0.1	      0.0	    0.1 	  0.1
max cf enq hold time							    194 	   0.3		0.4		0.1	      0.1	    0.1 	  0.2
messages received							 14,336 	  19.0	       28.3		9.5	      0.5	    9.2 	  9.9
messages sent								 14,336 	  19.0	       28.3		9.5	      0.5	    9.2 	  9.9
no work - consistent read gets					  4,327,393,086    5,743,196.3	8,552,160.2	2,871,598.2   1,746,667.0   1,636,518.1   4,106,678.2
non-idle wait count						      6,652,920        8,829.4	   13,148.1	    4,414.7	    555.2	4,022.1       4,807.3
non-idle wait time						     26,726,870       35,470.5	   52,819.9	   17,735.2	    980.9      17,041.6      18,428.9
opened cursors cumulative					     54,025,011       71,700.5	  106,768.8	   35,850.2	 21,778.7      20,450.4      51,250.1
parse count (describe)							     26 	   0.0		0.1		0.0	      0.0	    0.0 	  0.0
parse count (hard)							  1,451 	   1.9		2.9		1.0	      0.4	    0.7 	  1.2
parse count (total)							 14,130 	  18.8	       27.9		9.4	      4.8	    5.9 	 12.8
parse time cpu								    686 	   0.9		1.4		0.5	      0.4	    0.2 	  0.7
parse time elapsed							 11,499 	  15.3	       22.7		7.6	      8.1	    1.9 	 13.4
physical read IO requests					     60,046,503       79,689.6	  118,669.0	   39,844.8	 10,407.1      32,485.9      47,203.7
physical read bytes						491,950,956,544  652,883,451.8 9.722351E+08   3.2644173E+08  85,250,296.3 2.6616066E+08 3.8672279E+08
physical read total IO requests 				     60,048,806       79,692.6	  118,673.5	   39,846.3	 10,402.9      32,490.4      47,202.3
physical read total bytes					492,026,379,776  652,983,551.9 9.723841E+08   3.2649178E+08  85,213,369.5 2.6623682E+08 3.8674673E+08
physical read total multi block requests				     39 	   0.1		0.1		0.0	      0.0	    0.0 	  0.0
physical reads							     60,052,613       79,697.7	  118,681.1	   39,848.8	 10,406.5      32,490.3      47,207.4
physical reads cache						     60,052,610       79,697.7	  118,681.0	   39,848.8	 10,406.5      32,490.3      47,207.4
physical reads cache prefetch					     56,727,747       75,285.1	  112,110.2	   37,642.6	 10,260.7      30,387.2      44,897.9
physical write IO requests						  2,761 	   3.7		5.5		1.8	      0.0	    1.8 	  1.8
physical write bytes						     54,050,816       71,733.3	  106,819.8	   35,866.6	  1,002.0      35,158.1      36,575.1
physical write total IO requests					  5,893 	   7.8	       11.6		3.9	      0.1	    3.8 	  4.0
physical write total bytes					     92,500,480      122,761.6	  182,807.3	   61,380.8	  2,900.2      59,330.0      63,431.6
physical write total multi block requests				    146 	   0.2		0.3		0.1	      0.0	    0.1 	  0.1
physical writes 							  6,598 	   8.8	       13.0		4.4	      0.1	    4.3 	  4.5
physical writes direct							  2,340 	   3.1		4.6		1.6	      0.0	    1.5 	  1.6
physical writes direct (lob)						    415 	   0.6		0.8		0.3	      0.1	    0.2 	  0.4
physical writes direct temporary tablespace				    404 	   0.5		0.8		0.3	      0.0	    0.3 	  0.3
physical writes from cache						  4,258 	   5.7		8.4		2.8	      0.1	    2.8 	  2.9
physical writes non checkpoint						  6,217 	   8.3	       12.3		4.1	      0.2	    4.0 	  4.3
pinned buffers inspected						349,498 	 463.9	      690.7	      231.9	    272.2	   39.4 	424.4
process last non-idle time						  1,487 	   2.0		2.9		1.0	      0.0	    1.0 	  1.0
recursive calls 						     54,128,325       71,837.6	  106,973.0	   35,918.8	 21,826.5      20,485.2      51,352.4
recursive cpu usage						      2,179,188        2,892.1	    4,306.7	    1,446.1	    627.6	1,002.3       1,889.8
redo KB read								  2,934 	   3.9		5.8		3.9	      N/A	    3.9 	  3.9
redo blocks checksummed by FG (exclusive)				 20,600 	  27.3	       40.7	       13.7	      1.5	   12.6 	 14.7
redo blocks written							 41,200 	  54.7	       81.4	       27.3	      0.7	   26.9 	 27.8
redo blocks written (group 0)						 19,220 	  25.5	       38.0	       25.5	      N/A	   25.5 	 25.5
redo blocks written (group 1)						  1,014 	   1.3		2.0		1.3	      N/A	    1.3 	  1.3
redo entries								 34,650 	  46.0	       68.5	       23.0	      0.4	   22.7 	 23.2
redo size							     19,834,116       26,322.7	   39,197.9	   13,161.4	    348.0      12,915.3      13,407.4
redo size for direct writes						  2,788 	   3.7		5.5		1.9	      0.1	    1.8 	  1.9
redo subscn max counts							  1,331 	   1.8		2.6		0.9	      0.1	    0.8 	  0.9
redo synch time (usec)							  2,796 	   3.7		5.5		1.9	      2.6	    0.0 	  3.7
redo synch time overhead (usec) 					     51 	   0.1		0.1		0.1	      N/A	    0.1 	  0.1
redo synch time overhead count (  2ms)					      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
redo synch writes							      4 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
redo wastage								512,700 	 680.4	    1,013.2	      340.2	     23.0	  324.0 	356.5
redo write active strands						  2,069 	   2.7		4.1		1.4	      0.2	    1.2 	  1.5
redo write broadcast ack count						      7 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
redo write broadcast ack time						  4,190 	   5.6		8.3		2.8	      0.5	    2.5 	  3.1
redo write finish time						      8,961,960       11,893.7	   17,711.4	    5,946.9	  1,458.9	4,915.2       6,978.5
redo write gather time							217,138 	 288.2	      429.1	      144.1	    104.1	   70.5 	217.7
redo write info find							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
redo write schedule time						235,743 	 312.9	      465.9	      156.4	    104.0	   82.9 	230.0
redo write size count (   4KB)						  1,762 	   2.3		3.5		1.2	      0.2	    1.1 	  1.3
redo write size count (   8KB)						    121 	   0.2		0.2		0.1	      0.0	    0.1 	  0.1
redo write size count (  16KB)						     62 	   0.1		0.1		0.0	      0.0	    0.0 	  0.0
redo write size count (  32KB)						     21 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
redo write size count ( 128KB)						     51 	   0.1		0.1		0.0	      0.0	    0.0 	  0.0
redo write size count ( 256KB)						     34 	   0.0		0.1		0.0	      0.0	    0.0 	  0.0
redo write size count ( 512KB)						     11 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
redo write size count (1024KB)						      5 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
redo write time 							    900 	   1.2		1.8		0.6	      0.2	    0.5 	  0.7
redo write time (usec)						      9,000,316       11,944.6	   17,787.2	    5,972.3	  1,488.8	4,919.6       7,025.0
redo write total time						      9,099,062       12,075.7	   17,982.3	    6,037.8	  1,524.8	4,959.6       7,116.0
redo write worker delay (usec)						 96,305 	 127.8	      190.3	      127.8	      N/A	  127.8 	127.8
redo write worker delay count						  1,130 	   1.5		2.2		1.5	      N/A	    1.5 	  1.5
redo writes								  2,067 	   2.7		4.1		1.4	      0.2	    1.2 	  1.5
redo writes (group 0)							    895 	   1.2		1.8		1.2	      N/A	    1.2 	  1.2
redo writes (group 1)							    235 	   0.3		0.5		0.3	      N/A	    0.3 	  0.3
redo writes adaptive all						  2,067 	   2.7		4.1		1.4	      0.2	    1.2 	  1.5
redo writes adaptive worker						  1,130 	   1.5		2.2		1.5	      N/A	    1.5 	  1.5
remote Oradebug requests						      2 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
rollback changes - undo records applied 				      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
rollbacks only - consistent read gets					     76 	   0.1		0.2		0.1	      0.0	    0.1 	  0.1
root node splits							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
rows fetched via callback					     45,060,759       59,805.1	   89,052.9	   29,902.6	 42,282.0	    4.7      59,800.4
saved cleanouts 							      4 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
saved cleanouts successfully completed					      4 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
securefile allocation bytes					      3,391,488        4,500.9	    6,702.5	    2,250.5	    876.2	1,630.9       2,870.1
securefile allocation chunks						    146 	   0.2		0.3		0.1	      0.0	    0.1 	  0.1
securefile bytes non-transformed				      2,868,839        3,807.3	    5,669.6	    1,903.7	    754.5	1,370.1       2,437.2
securefile direct write bytes					      3,391,488        4,500.9	    6,702.5	    2,250.5	    876.2	1,630.9       2,870.1
securefile direct write ops						    145 	   0.2		0.3		0.1	      0.0	    0.1 	  0.1
securefile number of non-transformed flushes				    159 	   0.2		0.3		0.1	      0.0	    0.1 	  0.1
segment cfs allocations 						     34 	   0.0		0.1		0.0	      N/A	    0.0 	  0.0
segment chunks allocation from dispenser				    145 	   0.2		0.3		0.1	      0.0	    0.1 	  0.1
segment dispenser allocations						    142 	   0.2		0.3		0.1	      0.0	    0.1 	  0.1
segment dispenser load empty						     75 	   0.1		0.1		0.1	      N/A	    0.1 	  0.1
segment dispenser load tasks						     76 	   0.1		0.2		0.1	      N/A	    0.1 	  0.1
segment prealloc ops							    191 	   0.3		0.4		0.1	      0.2	    0.0 	  0.2
segment prealloc tasks							    184 	   0.2		0.4		0.2	      N/A	    0.2 	  0.2
segment prealloc time (ms)						 14,886 	  19.8	       29.4		9.9	      3.8	    7.2 	 12.6
session connect time							    804 	   1.1		1.6		1.1	      N/A	    1.1 	  1.1
session cursor cache hits					     53,983,471       71,645.4	  106,686.7	   35,822.7	 21,775.7      20,425.0      51,220.4
session logical reads						  4,430,834,022    5,880,482.0	8,756,589.0	2,940,241.0   1,812,409.4   1,658,674.0   4,221,808.0
shared hash latch upgrades - no wait				     14,287,757       18,961.8	   28,236.7	    9,480.9	  1,934.8	8,112.8      10,849.0
shared hash latch upgrades - wait					    269 	   0.4		0.5		0.2	      0.1	    0.1 	  0.3
shared io pool buffer get success					    143 	   0.2		0.3		0.1	      0.0	    0.1 	  0.1
sorts (memory)								  4,523 	   6.0		8.9		3.0	      1.8	    1.7 	  4.3
sorts (rows)								330,240 	 438.3	      652.6	      219.1	     19.7	  205.2 	233.1
sql area evicted							    601 	   0.8		1.2		0.4	      0.2	    0.2 	  0.6
sql area purged 							     15 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
summed dirty queue length						  3,177 	   4.2		6.3		2.1	      0.3	    1.9 	  2.3
switch current caused by our pin					    556 	   0.7		1.1		0.4	      0.2	    0.2 	  0.5

System Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
switch current to new buffer						    600 	   0.8		1.2		0.4	      0.2	    0.3 	  0.5
table fetch by rowid						  4,366,465,923    5,795,052.0	8,629,379.3	2,897,526.0   1,751,958.5   1,658,704.3   4,136,347.7
table fetch continued row						    896 	   1.2		1.8		0.6	      0.4	    0.3 	  0.9
table scan blocks gotten						207,960 	 276.0	      411.0	      138.0	    172.3	   16.1 	259.9
table scan disk non-IMC rows gotten				      1,185,944        1,573.9	    2,343.8	      787.0	    317.2	  562.6       1,011.3
table scan rows gotten						      1,185,944        1,573.9	    2,343.8	      787.0	    317.2	  562.6       1,011.3
table scans (short tables)						  2,477 	   3.3		4.9		1.6	      0.7	    1.2 	  2.1
temp space allocated (bytes)					      1,048,576        1,391.7	    2,072.3	    1,391.7	      N/A	1,391.7       1,391.7
total cf enq hold time							  5,027 	   6.7		9.9		3.3	      1.4	    2.3 	  4.3
total number of cf enq holders						    182 	   0.2		0.4		0.1	      0.0	    0.1 	  0.1
transaction tables consistent reads - undo records applied		      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
undo change vector size 					      7,322,692        9,718.3	   14,471.7	    4,859.2	    551.9	4,468.9       5,249.4
user I/O wait time						     10,306,101       13,677.4	   20,367.8	    6,838.7	  4,107.0	3,934.6       9,742.8
user calls								  3,613 	   4.8		7.1		2.4	      0.3	    2.2 	  2.6
user commits								    506 	   0.7		1.0		0.3	      0.0	    0.3 	  0.3
user logons cumulative							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
user logouts cumulative 						    513 	   0.7		1.0		0.3	      0.0	    0.3 	  0.4
workarea executions - optimal						  4,065 	   5.4		8.0		2.7	      0.9	    2.1 	  3.3
write clones created in foreground					      5 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
			  --------------------------------------------------------------------------------------------------------------------


Global Messaging Statistics (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
Global Enqueue S-optim Broadcasts sent					    282 	   0.4		0.6		0.2	      0.1	    0.1 	  0.2
Global Enqueue S-optim S-lock gets					 89,160 	 118.3	      176.2	       59.2	     11.3	   51.2 	 67.2
Global Enqueue S-optim anti-locks crea					    149 	   0.2		0.3		0.1	      0.0	    0.1 	  0.1
acks for commit broadcast(actual)					    763 	   1.0		1.5		0.5	      0.0	    0.5 	  0.5
acks for commit broadcast(logical)					  1,347 	   1.8		2.7		0.9	      0.2	    0.7 	  1.1
broadcast msgs on commit(actual)					  1,350 	   1.8		2.7		0.9	      0.2	    0.7 	  1.1
broadcast msgs on commit(logical)					  2,040 	   2.7		4.0		1.4	      0.2	    1.2 	  1.5
broadcast msgs on commit(wasted)					    657 	   0.9		1.3		0.4	      0.3	    0.2 	  0.7
flow control messages received						      6 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
flow control messages sent						      6 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs assume no cvt							  3,683 	   4.9		7.3		2.4	      1.5	    1.4 	  3.5
gcs ast to fg								  5,003 	   6.6		9.9		3.3	      2.4	    1.6 	  5.0
gcs ast xid								      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs bidless ast to lms							     29 	   0.0		0.1		0.0	      N/A	    0.0 	  0.0
gcs blocked converts							  1,426 	   1.9		2.8		0.9	      0.9	    0.3 	  1.6
gcs blocked cr converts 						  1,439 	   1.9		2.8		1.0	      0.3	    0.7 	  1.2
gcs compatible basts							      5 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs compatible cr basts (global)					     58 	   0.1		0.1		0.0	      0.0	    0.0 	  0.0
gcs compatible cr basts (local) 					  4,750 	   6.3		9.4		3.2	      1.3	    2.2 	  4.1
gcs cr requests to slave						      4 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs dbwr flush pi msgs							  1,533 	   2.0		3.0		1.0	      0.4	    0.7 	  1.3
gcs dbwr write request msgs						    120 	   0.2		0.2		0.1	      0.0	    0.1 	  0.1
gcs force cr block only 						      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs force cr grant							      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs grant ast								  5,032 	   6.7		9.9		3.3	      2.4	    1.6 	  5.0
gcs immediate (compatible) converts					    960 	   1.3		1.9		0.6	      0.3	    0.4 	  0.8
gcs immediate (null) converts						  2,335 	   3.1		4.6		1.5	      0.7	    1.1 	  2.0
gcs immediate cr (compatible) converts					623,259 	 827.1	    1,231.7	      413.6	    149.9	  307.6 	519.5
gcs immediate cr (null) converts				     31,624,007       41,969.4	   62,498.0	   20,984.7	  2,175.7      19,446.3      22,523.2
gcs lms flush pi msgs							      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs lms write request msgs						     82 	   0.1		0.2		0.1	      0.1	    0.0 	  0.1
gcs msgs process time(ms)						690,786 	 916.8	    1,365.2	      458.4	     29.1	  437.8 	479.0
gcs msgs received						     52,465,975       69,629.7	  103,687.7	   34,814.8	  3,205.0      32,548.5      37,081.1
gcs new served by master						    629 	   0.8		1.2		0.4	      0.3	    0.2 	  0.6
gcs out-of-order msgs							  1,992 	   2.6		3.9		1.3	      0.2	    1.2 	  1.4
gcs pings refused							    727 	   1.0		1.4		0.5	      0.5	    0.2 	  0.8
gcs queued converts							      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs reader bypass grant immediate					     25 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs refuse xid								      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs refuse xid to fg							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs side channel msgs actual						  1,236 	   1.6		2.4		0.8	      0.3	    0.6 	  1.0
gcs side channel msgs logical						 12,740 	  16.9	       25.2		8.5	      1.1	    7.7 	  9.2
gcs stale cr								    274 	   0.4		0.5		0.2	      0.1	    0.1 	  0.3
gcs undo cr								    488 	   0.6		1.0		0.3	      0.4	    0.0 	  0.6
gcs writes refused							      3 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
ges msgs process time(ms)						    547 	   0.7		1.1		0.4	      0.0	    0.3 	  0.4
ges msgs received							 24,977 	  33.1	       49.4	       16.6	      9.4	    9.9 	 23.3
ges remote lock allocation						    474 	   0.6		0.9		0.3	      0.1	    0.2 	  0.4
implicit batch messages received					 48,326 	  64.1	       95.5	       32.1	      0.1	   32.0 	 32.2
implicit batch messages sent						 48,262 	  64.1	       95.4	       32.0	      0.5	   31.6 	 32.4
messages flow controlled						 10,030 	  13.3	       19.8		6.7	      9.2	    0.2 	 13.1
messages queue sent actual					      4,446,593        5,901.2	    8,787.7	    2,950.6	    406.6	2,663.1       3,238.1
messages queue sent logical						808,026        1,072.4	    1,596.9	      536.2	     17.5	  523.8 	548.6
messages received actual					      9,210,106       12,223.1	   18,201.8	    6,111.6	    252.6	5,932.9       6,290.2
messages received logical					     52,490,952       69,662.8	  103,737.1	   34,831.4	  3,195.6      32,571.8      37,091.0
messages sent directly							747,136 	 991.6	    1,476.6	      495.8	    203.6	  351.8 	639.7
messages sent indirectly					     17,548,157       23,289.2	   34,680.2	   11,644.6	  3,414.1	9,230.4      14,058.7
messages sent not implicit batched					 58,075 	  77.1	      114.8	       38.5	     15.6	   27.5 	 49.6
messages sent pbatched						     51,668,944       68,572.3	  102,112.5	   34,286.2	  3,307.9      31,947.1      36,625.2
msgs received kernel queue time (ns)			      2,895,608,742,701 3.84292336E+09 5.722547E+09   1.9214617E+09 4.8979138E+08 1.5751269E+09 2.2677965E+09

Global Messaging Statistics (Global)	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
msgs received queue time (ms)						895,976        1,189.1	    1,770.7	      594.6	    201.9	  451.8 	737.3
msgs received queued						     52,490,951       69,662.8	  103,737.1	   34,831.4	  3,195.6      32,571.8      37,091.0
msgs sent queue time (ms)					      1,468,168        1,948.4	    2,901.5	      974.2	    421.3	  676.3       1,272.1
msgs sent queue time on ksxp (ms)				    348,434,161      462,421.9	  688,605.1	  231,211.0	  3,193.5     228,952.8     233,469.1
msgs sent queued						      4,507,035        5,981.5	    8,907.2	    2,990.7	    413.5	2,698.3       3,283.1
msgs sent queued on ksxp					      9,210,722       12,224.0	   18,203.0	    6,112.0	    351.3	5,863.6       6,360.4
process batch messages received 				      8,441,502       11,203.1	   16,682.8	    5,601.5	     82.3	5,543.3       5,659.7
process batch messages sent					      8,509,445       11,293.3	   16,817.1	    5,646.6	    149.9	5,540.6       5,752.7
receiver cycle time						      2,282,166        3,028.8	    4,510.2	    1,514.4	     16.3	1,502.8       1,525.9
receiver loop count						      9,420,239       12,502.0	   18,617.1	    6,251.0	    357.6	5,998.1       6,503.9
			  --------------------------------------------------------------------------------------------------------------------


System Statistics (Absolute Values)	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

	    Sessions		   Open Cursors 	    Session Cached Cursors
       -----------------   ---------------------------	 ---------------------------
  I#	  Begin      End	    Begin	   End		  Begin 	 End
----   -------- --------   -------------- ------------	 -------------- ------------
   1	    435      161	    1,144	   115		 17,879       18,233
   2	    409      166	      992	    83		 15,237       15,326
 ~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~	 ~~~~~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	    844      327	    2,136	   198		 33,116       33,559
 Avg	    422      164	    1,068	    99		 16,558       16,780
 Std	     18        4	      107	    23		  1,868        2,056
			  --------------------------------------------------------------------------------------------------------------------

IO Profile (Global)			 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

Statistic			  Read+Write/s	      Reads/s	    Writes/s
------------------------------ --------------- -------------- --------------
Total Requests			     79,691.05	    79,683.23		7.82
Database Requests		     79,683.84	    79,680.18		3.66
Optimized Requests			  0.00		 0.00		0.00
Redo Requests				  2.74		  N/A		2.74
Total (MB)				622.78	       622.66		0.12
Database (MB)				622.63	       622.56		0.07
Optimized Total (MB)			  0.00		 0.00		0.00
Redo (MB)				  0.03		  N/A		0.03
Database (blocks)		     79,697.04	    79,688.28		8.76
Via Buffer Cache (blocks)	     79,693.93	    79,688.28		5.65
Direct (blocks) 			  3.11		 0.00		3.11
			  --------------------------------------------------------------------------------------------------------------------

IOStat by Function			 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

					   Requests						 MB
		       ------------------------------------------------   ------------------------------------------------
															      Waits:	Avg
  I# Function Name	      Total	  IOs/s     Reads/s    Writes/s 	 Total	   IO MB/s   Read MB/s	Write MB/s     Count	Time
---- ---------------   ------------ ----------- ----------- -----------   ------------ ----------- ----------- -----------   ------- --------
   * Total		 58,359,968   77,442.19   77,434.78	   7.41        456,023	    605.13	605.02	      0.11	3.2M  18.02ms
     Buffer Cache Re	 58,347,896   77,426.17   77,426.17	   0.00        455,836	    604.88	604.88	      0.00	3.1M  18.04ms
     Others		      7,749	  10.28        8.61	   1.68 	   135	      0.18	  0.14	      0.04	4891   9.57ms
     DBWR		      2,096	   2.78        0.00	   2.78 	    27	      0.04	  0.00	      0.04	   0
     LGWR		      2,095	   2.78        0.00	   2.78 	    21	      0.03	  0.00	      0.03	2093   4.11ms
     Direct Writes		132	   0.18        0.00	   0.18 	     4	      0.01	  0.00	      0.01	   0

   1 Total		 24,318,333   32,269.81   32,266.01	   3.80        190,004	    252.13	252.07	      0.06	1.5M  16.68ms
     Buffer Cache Re	 24,312,198   32,261.67   32,261.67	   0.00        189,906	    252.00	252.00	      0.00	1.5M  16.71ms
     Others		      3,969	   5.27        4.34	   0.92 	    71	      0.09	  0.07	      0.02	2497   5.62ms
     DBWR		      1,172	   1.56        0.00	   1.56 	    15	      0.02	  0.00	      0.02	   0
     LGWR			946	   1.26        0.00	   1.26 	    11	      0.01	  0.00	      0.01	 945   3.75ms
     Direct Writes		 48	   0.06        0.00	   0.06 	     1	      0.00	  0.00	      0.00	   0

   2 Total		 34,041,635   45,172.38   45,168.77	   3.61        266,019	    353.00	352.95	      0.05	1.6M  19.24ms
     Buffer Cache Re	 34,035,698   45,164.50   45,164.50	   0.00        265,930	    352.88	352.88	      0.00	1.6M  19.26ms
     Others		      3,780	   5.02        4.26	   0.75 	    64	      0.08	  0.07	      0.02	2394  13.69ms
     DBWR			924	   1.23        0.00	   1.23 	    12	      0.02	  0.00	      0.02	   0
     LGWR		      1,149	   1.52        0.00	   1.52 	    10	      0.01	  0.00	      0.01	1148   4.40ms
     Direct Writes		 84	   0.11        0.00	   0.11 	     3	      0.00	  0.00	      0.00	   0
			  --------------------------------------------------------------------------------------------------------------------

IOStat by File Type			 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

					   Requests						 MB				Service Time
		       ------------------------------------------------   ------------------------------------------------   -----------------
																Small	 Large
  I# Filetype Name	      Total	  IOs/s     Reads/s    Writes/s 	 Total	   IO MB/s   Read MB/s	Write MB/s	 Read	  Read
---- ---------------   ------------ ----------- ----------- -----------   ------------ ----------- ----------- -----------   -------- --------
   * Total		 58,328,006   77,399.77   77,392.37	   7.41        455,788	    604.82	604.71	      0.11     1.26ms  34.31ms
     Data File		 58,317,792   77,386.22   77,383.34	   2.88        455,640	    604.62	604.57	      0.05     1.25ms  38.06ms
     Control File	      7,497	   9.95        8.56	   1.39 	   118	      0.16	  0.13	      0.02     4.60ms
     Log File		      2,100	   2.79        0.01	   2.78 	    23	      0.03	  0.00	      0.03	.00ns	1.50ms
     Temp File			617	   0.82        0.46	   0.36 	     7	      0.01	  0.00	      0.01     3.55ms

   1 Total		 24,321,490   32,274.00   32,270.20	   3.80        190,045	    252.18	252.13	      0.06   815.08us  30.91ms
     Data File		 24,316,360   32,267.19   32,265.62	   1.57        189,968	    252.08	252.05	      0.03   814.78us  37.11ms
     Control File	      3,840	   5.10        4.33	   0.77 	    60	      0.08	  0.07	      0.01     2.89ms
     Log File			951	   1.26        0.01	   1.26 	    13	      0.02	  0.00	      0.01	.00ns	1.50ms
     Temp File			339	   0.45        0.25	   0.20 	     4	      0.01	  0.00	      0.00     2.86ms

   2 Total		 34,006,516   45,125.78   45,122.17	   3.61        265,743	    352.63	352.59	      0.05     1.57ms  39.19ms
     Data File		 34,001,432   45,119.03   45,117.73	   1.31        265,672	    352.54	352.52	      0.02     1.57ms  39.19ms
     Control File	      3,657	   4.85        4.23	   0.62 	    58	      0.08	  0.07	      0.01     6.35ms
     Log File		      1,149	   1.52        0.00	   1.52 	    10	      0.01	  0.00	      0.01
     Temp File			278	   0.37        0.21	   0.16 	     3	      0.00	  0.00	      0.00     4.38ms
			  --------------------------------------------------------------------------------------------------------------------


Segment Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> % Total shows % of statistic for each segment compared to the global cluster-wide total
   (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants)
-> % Capture shows % of statistic for each segment compared to the  total captured
   by AWR for all segments during the snapshot interval
-> Captured Segments account for   97.1% of Total Logical Reads:   4,430,834,022
-> Captured Segments account for   40.4% of Total Physical Reads:      60,052,613
-> Captured Segments account for   40.4% of Total Physical Read Requests:      60,046,503
-> Captured Segments account for   40.4% of Total UnOptimized Read Requests:	  60,046,503
-> Captured Segments account for    0.0% of Total Optimized  Read Requests:		  1
-> Captured Segments account for    0.0% of Total Direct Physical Reads:	       1
-> Captured Segments account for   41.5% of Total Physical Writes:	     6,598
-> Captured Segments account for   32.3% of Total Physical Write Requests:	     2,761
-> Captured Segments account for   63.4% of Total Direct Physical Writes:	    2,340
-> Captured Segments account for    0.0% of Total Table Scans:		     2
-> Captured Segments account for   10.4% of Total CR Blocks Received:		1,610
-> Captured Segments account for   10.1% of Total Current Blocks Received:	     4,550
-> Captured Segments account for    9.4% of Total CR Blocks Served:	      1,773
-> Captured Segments account for    8.0% of Total Current Blocks Served:	   5,719
-> Captured Segments account for   31.6% of Total Global Cache Remote Grants:	   17,417,958
-> When ** MISSING ** occurs, some of the object attributes may not be available

				    Tablespace Object		    Subobject  Obj.
Statistic		 Owner	    Name       Name		    Name       Type	   Obj#   Dataobj#	  Value %Total %Capture
------------------------ ---------- ---------- -------------------- ---------- ----- ---------- ---------- ------------ ------ --------
buffer busy waits	 SYS	    SYSAUX     EXP_OBJ$ 		       TABLE	    724        724	      1    N/A	   50.0
			 SYS	    SYSTEM     SEG$			       TABLE	     14 	 8	      1    N/A	   50.0
db block changes	 SYS	    SYSAUX     WRH$_SYSSTAT_PK	    0827801_46 INDEX	  84824      84824	  3,424    N/A	   32.2
			 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 0827801_46 INDEX	  84844      84847	  2,800    N/A	   26.4
			 SYS	    SYSAUX     WRH$_SQL_PLAN_PK 	       INDEX	  11150      11150	  1,536    N/A	   14.5
			 SYS	    SYSAUX     WRH$_SQL_PLAN		       TABLE	  11147      11147	  1,504    N/A	   14.2
			 SYS	    SYSAUX     WRH$_LATCH_PK	    0827801_46 INDEX	  84804      84804	  1,360    N/A	   12.8
gc buffer busy		 SYS	    SYSTEM     I_OBJ2			       INDEX	     37 	37	     35    N/A	   38.9
			 USER61     IOPS       CF1			       TABLE	  79885      79917	     12    N/A	   13.3
			 USER150    IOPS       CF1			       TABLE	  80338      80353	     10    N/A	   11.1
			 USER178    IOPS       CF1			       TABLE	  80467      80495	      9    N/A	   10.0
			 SYS	    SYSTEM     SEG$			       TABLE	     14 	 8	      8    N/A	    8.9
			 USER204    IOPS       CF1			       TABLE	  80613      80627	      8    N/A	    8.9
			 USER215    IOPS       CF1			       TABLE	  80649      80671	      8    N/A	    8.9
gc cr blocks received	 SYS	    SYSAUX     EXP_OBJ$ 		       TABLE	    724        724	     60    3.7	   51.3
			 SYS	    SYSAUX     WRI$_INDEX_USAGE 	       TABLE	   9236       9236	     12    0.7	   10.3
			 SYS	    SYSTEM     OPTSTAT_HIST_CONTROL	       TABLE	    696        696	     11    0.7	    9.4
			 SYS	    SYSTEM     SEG$			       TABLE	     14 	 8	     11    0.7	    9.4
			 SYS	    SYSAUX     WRH$_SQLTEXT		       TABLE	  11139      11139	      8    0.5	    6.8
			 SYS	    SYSTEM     I_OBJ2			       INDEX	     37 	37	      8    0.5	    6.8
			 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 0827801_46 TABLE	  84842      84842	      7    0.4	    6.0
gc cr blocks served	 SYS	    SYSAUX     EXP_OBJ$ 		       TABLE	    724        724	     60    3.4	   51.3
			 SYS	    SYSAUX     WRI$_INDEX_USAGE 	       TABLE	   9236       9236	     12    0.7	   10.3
			 SYS	    SYSTEM     OPTSTAT_HIST_CONTROL	       TABLE	    696        696	     11    0.6	    9.4
			 SYS	    SYSTEM     SEG$			       TABLE	     14 	 8	     11    0.6	    9.4
			 SYS	    SYSAUX     WRH$_SQLTEXT		       TABLE	  11139      11139	      8    0.5	    6.8
			 SYS	    SYSTEM     I_OBJ2			       INDEX	     37 	37	      8    0.5	    6.8
			 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 0827801_46 TABLE	  84842      84842	      7    0.4	    6.0
gc cu blocks received	 SYS	    SYSAUX     EXP_OBJ$ 		       TABLE	    724        724	    143    3.1	   43.7
			 SYS	    SYSAUX     WRM$_SNAPSHOT_DETAIL	       INDEX	  11582      11582	     95    2.1	   29.1
			 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 0827801_46 TABLE	  84842      84842	     37    0.8	   11.3
			 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 0827801_46 INDEX	  84844      84847	     27    0.6	    8.3
			 SYS	    SYSAUX     WRI$_INDEX_USAGE 	       TABLE	   9236       9236	     25    0.5	    7.6
gc cu blocks served	 SYS	    SYSAUX     EXP_OBJ$ 		       TABLE	    724        724	    143    2.5	   43.7
			 SYS	    SYSAUX     WRM$_SNAPSHOT_DETAIL	       INDEX	  11582      11582	     95    1.7	   29.1
			 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 0827801_46 TABLE	  84842      84842	     37    0.6	   11.3
			 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 0827801_46 INDEX	  84844      84847	     27    0.5	    8.3
			 SYS	    SYSAUX     WRI$_INDEX_USAGE 	       TABLE	   9236       9236	     25    0.4	    7.6
gc remote grants	 USER12     IOPS       CF1			       TABLE	  79648      79678	139,947    0.8	   21.0
			 USER254    IOPS       CF1			       TABLE	  80854      80875	136,097    0.8	   20.4
			 USER14     IOPS       CF1			       TABLE	  79659      79679	130,585    0.7	   19.6
			 USER36     IOPS       CF1			       TABLE	  79791      79805	129,977    0.7	   19.5
			 USER174    IOPS       CF1			       TABLE	  80461      80466	129,389    0.7	   19.4
logical reads		 USER189    IOPS       CF1			       TABLE	  80525      80548  358,679,440    8.1	   22.9
			 USER172    IOPS       CF1			       TABLE	  80449      80457  311,152,208    7.0	   19.8
			 USER245    IOPS       CF1			       TABLE	  80812      80827  304,940,224    6.9	   19.4
			 USER134    IOPS       CF1			       TABLE	  80271      80279  304,515,088    6.9	   19.4
			 USER179    IOPS       CF1			       TABLE	  80478      80487  289,512,528    6.5	   18.5
physical reads		 USER57     IOPS       CF1			       TABLE	  79872      79912    1,182,664    2.0	   29.1
			 USER253    IOPS       CF1			       TABLE	  80851      80873    1,166,159    1.9	   28.7
			 USER193    IOPS       CF1			       TABLE	  80544      80563	573,205    1.0	   14.1
			 USER183    IOPS       CF1			       TABLE	  80499      80515	571,907    1.0	   14.1
			 USER35     IOPS       CF1			       TABLE	  79780      79802	571,140    1.0	   14.0
physical read requests	 USER57     IOPS       CF1			       TABLE	  79872      79912    1,182,664    2.0	   29.1
			 USER253    IOPS       CF1			       TABLE	  80851      80873    1,166,159    1.9	   28.7
			 USER193    IOPS       CF1			       TABLE	  80544      80563	573,205    1.0	   14.1
			 USER183    IOPS       CF1			       TABLE	  80499      80515	571,908    1.0	   14.1
			 USER35     IOPS       CF1			       TABLE	  79780      79802	571,141    1.0	   14.0
physical writes 	 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 0827801_46 TABLE	  84842      84842	  1,675    N/A	   72.7
			 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 0827801_46 INDEX	  84844      84847	    438    N/A	   19.0

Segment Statistics (Global)		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> % Total shows % of statistic for each segment compared to the global cluster-wide total
   (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants)
-> % Capture shows % of statistic for each segment compared to the  total captured
   by AWR for all segments during the snapshot interval
-> Captured Segments account for   97.1% of Total Logical Reads:   4,430,834,022
-> Captured Segments account for   40.4% of Total Physical Reads:      60,052,613
-> Captured Segments account for   40.4% of Total Physical Read Requests:      60,046,503
-> Captured Segments account for   40.4% of Total UnOptimized Read Requests:	  60,046,503
-> Captured Segments account for    0.0% of Total Optimized  Read Requests:		  1
-> Captured Segments account for    0.0% of Total Direct Physical Reads:	       1
-> Captured Segments account for   41.5% of Total Physical Writes:	     6,598
-> Captured Segments account for   32.3% of Total Physical Write Requests:	     2,761
-> Captured Segments account for   63.4% of Total Direct Physical Writes:	    2,340
-> Captured Segments account for    0.0% of Total Table Scans:		     2
-> Captured Segments account for   10.4% of Total CR Blocks Received:		1,610
-> Captured Segments account for   10.1% of Total Current Blocks Received:	     4,550
-> Captured Segments account for    9.4% of Total CR Blocks Served:	      1,773
-> Captured Segments account for    8.0% of Total Current Blocks Served:	   5,719
-> Captured Segments account for   31.6% of Total Global Cache Remote Grants:	   17,417,958
-> When ** MISSING ** occurs, some of the object attributes may not be available

				    Tablespace Object		    Subobject  Obj.
Statistic		 Owner	    Name       Name		    Name       Type	   Obj#   Dataobj#	  Value %Total %Capture
------------------------ ---------- ---------- -------------------- ---------- ----- ---------- ---------- ------------ ------ --------
			 SYS	    SYSAUX     WRH$_SQL_PLAN		       TABLE	  11147      11147	    108    N/A	    4.7
			 SYS	    SYSAUX     WRH$_SQL_PLAN_PK 	       INDEX	  11150      11150	     55    N/A	    2.4
			 SYS	    SYSAUX     WRH$_SYSSTAT_PK	    0827801_46 INDEX	  84824      84824	     29    N/A	    1.3
physical writes direct	 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 0827801_46 TABLE	  84842      84842	  1,472    N/A	   99.3
			 SYS	    SYSAUX     SYS_LOB0000007451C00 S_LOB_P258 LOB P	  79022      79022	     11    N/A	    0.7
physical write requests  SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 0827801_46 INDEX	  84844      84847	    333   12.1	   54.5
			 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 0827801_46 TABLE	  84842      84842	    178    6.4	   29.1
			 SYS	    SYSAUX     WRH$_SQL_PLAN		       TABLE	  11147      11147	     44    1.6	    7.2
			 SYS	    SYSAUX     WRH$_SQL_PLAN_PK 	       INDEX	  11150      11150	     42    1.5	    6.9
			 SYS	    SYSAUX     WRH$_SQL_BIND_METADA	       INDEX	  11152      11152	     14    0.5	    2.3
row lock waits		 SYS	    SYSAUX     WRH$_SEG_STAT_OBJ_IN	       INDEX	  11341      11341	      2    N/A	   40.0
			 SYS	    SYSTEM     OPTSTAT_HIST_CONTROL	       TABLE	    696        696	      2    N/A	   40.0
			 SYS	    SYSAUX     WRM$_SNAPSHOT_DETAIL	       INDEX	  11582      11582	      1    N/A	   20.0
			  --------------------------------------------------------------------------------------------------------------------

Library Cache Activity			 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Summarized for all instances in the report
-> "Pct Misses"  should be very low

			 Get	Pct	       Pin    Pct	      Invali-	  GES Lock	GES Pin      GES Pin   GES Inval GES Invali-
Namespace	    Requests   Miss	  Requests   Miss    Reloads  dations	  Requests     Requests     Releases	Requests     dations
--------------- ------------ ------ -------------- ------ ---------- -------- ------------ ------------ ------------ ----------- -----------
ACCOUNT_STATUS		   4	0.0		 0    N/A	   0	    0		 4	      0 	   0	       0	   0
AUDIT POLICY		   2	0.0		 2    0.0	   0	    0		 2	      2 	   2	       0	   0
BODY			 772	1.0	     2,278   13.2	  20	    0	       201	  2,166        2,166	       0	   0
CLUSTER 		 158	1.3	       158    1.3	   0	    0	       158	    158 	 158	       0	   0
DBLINK			   6   16.7		 0    N/A	   0	    0		 6	      0 	   0	       0	   0
EDITION 		   8   12.5		16   12.5	   0	    0		 8	      8 	   8	       0	   0
HINTSET OBJECT		   6   16.7		 6   16.7	   0	    0		 6	      6 	   6	       0	   0
INDEX			 266	3.4	       266   16.2	  34	    0	       266	    266 	 266	       0	   0
OBJECT ID		  12  100.0		 0    N/A	   0	    0		 0	      0 	   0	       0	   0
QUEUE			  74	0.0		75    1.3	   1	    0		74	     75 	  75	       0	   0
RULESET 		   0	N/A		 1  100.0	   1	    0		 0	      1 	   1	       0	   0
SCHEMA			 985	0.1		 0    N/A	   0	    0		13	      0 	   0	       0	   0
SQL AREA	       7,155   27.7	54,167,930    0.0	 617	   15		 0	      0 	   0	       0	   0
SQL AREA BUILD	       1,238   76.4		 0    N/A	   0	    0		 0	      0 	   0	       0	   0
SQL AREA STATS	       1,028   88.1	     1,028   88.1	   0	    0		 0	      0 	   0	       0	   0
TABLE/PROCEDURE        5,398   14.2	    19,681   12.6	 790	    0	     7,125	 13,065       13,065	       0	   0
TRANSFORMATION		  74	0.0		74    0.0	   0	    0		74	     74 	  74	       0	   0
TRIGGER 		  10   60.0		10   60.0	   0	    0		 0	     10 	  10	       0	   0
			  --------------------------------------------------------------------------------------------------------------------


PGA Aggregate Target Statistics 	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> all stats are reported in MegaBytes

	  PGA Aggr Target	   Auto PGA Target	      PGA Mem Alloc		Auto Workareas		 Manual Workarea	   Global Mem Bound
       ---------------------   -----------------------	 -----------------------   -----------------------   -----------------------   -----------------------
  I#	    Begin	 End	      Begin	   End		Begin	     End	  Begin        End	    Begin	 End	      Begin	   End
----   ---------- ----------   ------------ ----------	 ------------ ----------   ------------ ----------   ------------ ----------   ------------ ----------
   1	  8,082.0    8,082.0	    4,149.7    5,170.6	      4,333.0	 2,767.0	    0.0        0.0	      0.0	 0.0	      808.2	 808.2
   2	  8,082.0    8,082.0	    4,007.5    5,126.5	      4,249.7	 2,766.1	    0.0        0.0	      0.0	 0.0	      808.2	 808.2
			  --------------------------------------------------------------------------------------------------------------------


Process Memory Summary			 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> B: Begin Snap   E: End Snap I#: Instance number
-> Max Alloc is Maximum PGA allocation size at snapshot time
-> Hist Max Alloc is the Historical Max Allocation for still-connected processes
-> ordered by instance, Begin/End snapshot, Alloc (MB)

							     Hist
					Avg Std Dev    Max    Max
		     Alloc     Used   Alloc   Alloc  Alloc  Alloc   Num   Num
  I#   Category       (MB)     (MB)    (MB)    (MB)   (MB)   (MB)  Proc Alloc
---- - ---------- -------- -------- ------- ------- ------ ------ ----- -----
   1 B Freeable      556.4	 .0	1.9	3.7	43    N/A   295   295
       Other	    2333.5	N/A	3.4	2.9	36     36   695   695
       PL/SQL	     130.3    127.8	 .3	 .2	 1	2   439   437
       SQL	      33.0     14.7	 .1	 .1	 1     12   349   340
       Total	    3053.2    142.5	5.6	6.9	80     50  1778  1767
     E Freeable      273.6	 .0	4.6	9.5	44    N/A    59    59
       Other	    1203.4	N/A	2.9	4.2	38     38   421   421
       PL/SQL	       6.3	5.6	 .0	 .2	 2	3   165   163
       SQL	       3.9	1.3	 .1	 .1	 1     18    76    52
       Total	    1487.2	6.9	7.6    14.1	84     59   721   695
   2 B Freeable      382.6	 .0	1.3	3.7	43    N/A   289   289
       Other	    2240.7	N/A	3.3	3.8	54     54   671   671
       PL/SQL	     118.6    116.2	 .3	 .2	 2	2   413   411
       SQL	     228.1    211.3	 .7	 .5	 1     13   313   299
       Total	    2970.0    327.5	5.7	8.2	99     69  1686  1670
     E Freeable      253.6	 .0	4.8	7.8	38    N/A    53    53
       Other	    1221.6	N/A	2.9	4.8	55     55   426   426
       PL/SQL	       7.2	6.6	 .0	 .2	 2	2   170   166
       SQL	       3.9	2.2	 .1	 .1	 1     13    76    48
       Total	    1486.3	8.7	7.7    12.9	95     70   725   693
			  --------------------------------------------------------------------------------------------------------------------


init.ora Parameters			 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> '*' indicates same value across all instances

Parameter Name		      I#  Begin value						End value (if different)
----------------------------- --- ----------------------------------------------------- ------------------------
_ipddb_enable			* TRUE
audit_file_dest 		* /u01/app/oracle/admin/p60sdb/adump
audit_trail			* DB
cluster_database		* TRUE
compatible			* 19.0.0
control_files			* +P60S/P60SDB/CONTROLFILE/current.261.1032623513, +P60
db_block_size			* 8192
db_create_file_dest		* +P60S
db_domain			* example.com
db_name 			* p60sdb
db_recovery_file_dest		* +P60SFRA
db_recovery_file_dest_size	* 811597824000
diagnostic_dest 		* /u01/app/oracle
dispatchers			* (PROTOCOL=TCP) (SERVICE=p60sdbXDB)
instance_number 		1 1
				2 2
listener_networks		*
local_listener			1  (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522
				2  (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522
nls_language			* AMERICAN
nls_territory			* AMERICA
open_cursors			* 300
pga_aggregate_target		* 8474591232
processes			* 2560
remote_listener 		*  mcracpoc-scan.example.com:1521
remote_login_passwordfile	* EXCLUSIVE
sga_max_size			* 42949672960
sga_target			* 15032385536
thread				1 1
				2 2
undo_tablespace 		1 UNDOTBS1
				2 UNDOTBS2
			  --------------------------------------------------------------------------------------------------------------------


init.ora Multi-valued Parameters	 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> This section only displays parameters that have more one value
-> '*' indicates same value across all instances
-> '(NULL)' indicates that the	parameter value was not set
-> A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot

Parameter Name		      I#  Begin value						End value (if different)
----------------------------- --- ----------------------------------------------------- ------------------------
control_files			* +P60S/P60SDB/CONTROLFILE/current.261.1032623513
				* +P60SFRA/P60SDB/CONTROLFILE/current.256.1032623515
			  --------------------------------------------------------------------------------------------------------------------

Top SQL with Top Events 		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Top SQL statements by DB Time along with the top events by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Event is the percentage of DB Time due to the event that the SQL is
   waiting on.
-> % Row Source is the percentage of DB Time due to the row source for the
   SQL waiting on the event.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
									   % Row
Event			       % Event Top Row Source			  Source
------------------------------ ------- --------------------------------- -------
	  bhdvtsvjhgvrh 	  1497866750		    26126	   97.68
gc cr multi block request	 44.53 TABLE ACCESS - BY INDEX ROWID BAT   44.53
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


db file parallel read		 25.61 TABLE ACCESS - BY INDEX ROWID BAT   25.61


gc cr grant busy		 13.00 TABLE ACCESS - BY INDEX ROWID BAT    9.40

	  9babjv8yq8ru3 		 N/A		      269	    1.05
library cache load lock 	  1.00 ** Row Source Not Available **	    1.00
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;

			  --------------------------------------------------------------------------------------------------------------------

Top SQL with Top Row Sources		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Top SQL statements by DB Time along with the top row sources by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Row Source is the percentage of DB Time spent on the row source by
   that SQL.
-> % Event is the percentage of DB Time spent on the event by the
   SQL executing the row source.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
					   % Row
Row Source				  Source Top Event		 % Event
---------------------------------------- ------- ----------------------- -------
	  bhdvtsvjhgvrh 	  1497866750		    26126	   97.68
TABLE ACCESS - BY INDEX ROWID BATCHED	   91.46 gc cr multi block reque   44.53
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


INDEX - RANGE SCAN			    5.36 gc cr grant busy	    3.60

	  9babjv8yq8ru3 		 N/A		      269	    1.05
** Row Source Not Available **		    1.05 library cache load lock    1.00
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;

			  --------------------------------------------------------------------------------------------------------------------

Top Sessions				 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Top Blocking Sessions			 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Blocking session activity percentages are calculated with respect to
      waits on enqueues, latches and "buffer busy" only
-> '% Activity' represents the load on the database caused by
      a particular blocking session
-> '# Samples Active' shows the number of ASH samples in which the
      blocking session was found active.
-> 'XIDs' shows the number of distinct transaction IDs sampled in ASH
      when the blocking session was found active.

 Blocking Sid (Inst) % Activity Event Caused			  % Event
-------------------- ---------- ------------------------------ ----------
User		     Program			      # Samples Active	   XIDs
-------------------- ------------------------------ ------------------ --------
  3134,26428(	  1)	   1.00 library cache load lock 	     1.00
USER228 	     sqlplus@mcracp...m (TNS V1-V3)	  57/75 [ 76%]	      0

			  --------------------------------------------------------------------------------------------------------------------

Top PL/SQL Procedures			 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Top Events				 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Top Events by DB Time
-> % Activity is the percentage of DB Time due to the event

Event				    Event Class     Session Type
----------------------------------- --------------- ---------------
	   Avg Active
% Activity   Sessions
---------- ----------
gc cr multi block request	    Cluster	    FOREGROUND
     44.54     158.34
db file parallel read		    User I/O	    FOREGROUND
     25.61	91.06
gc cr grant busy		    Cluster	    FOREGROUND
     13.01	46.25
db file sequential read 	    User I/O	    FOREGROUND
      8.55	30.41
CPU + Wait for CPU		    CPU 	    FOREGROUND
      6.06	21.53
			  --------------------------------------------------------------------------------------------------------------------

Top Event P1/P2/P3 Values		 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Top Events by DB Time and the top P1/P2/P3 values for those events.
-> % Event is the percentage of DB Time due to the event
-> % Activity is the percentage of DB Time due to the event with the given
   P1,P2,P3 Values.

Event			       % Event		   P1, P2, P3 Values % Activity
------------------------------ ------- ----------------------------- ----------
Parameter 1		   Parameter 2		      Parameter 3
-------------------------- -------------------------- --------------------------
gc cr multi block request	 44.54		  "9","19464174","1"	   0.01
file#			   block#		      class#

db file parallel read		 25.61		       "1","77","77"	  19.97
files			   blocks		      requests

db file sequential read 	  8.58		  "9","31590953","1"	   0.01
file#			   block#		      blocks

library cache load lock 	  1.00 "3435721264","3358630944","64	   0.00
object address		   lock address 	      100*mask+namespace

			  --------------------------------------------------------------------------------------------------------------------

Top DB Objects				 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Activity Over Time			 DB/Inst: P60SDB/p60sdb1  Snaps: 47-48
-> Analysis period is divided into smaller time slots as indicated
   in the 'Slot Time (Duration)'.
-> Top 3 events are reported in each of those slots
-> 'Slot Count' shows the number of ASH samples in that slot
-> 'Event Count' shows the number of ASH samples waiting for
   that event in that slot
-> '% Event' is 'Event Count' over all ASH samples in the analysis period

			 Slot					Event
Slot Time (Duration)	Count Event				Count % Event
-------------------- -------- ------------------------------ -------- -------
21:32:34   (2.4 min)	4,858 gc cr multi block request 	2,115	 7.90
			      db file parallel read		1,355	 5.06
			      gc cr grant busy			  602	 2.25
21:35:00   (5.0 min)   15,433 gc cr multi block request 	7,337	27.41
			      db file parallel read		3,697	13.81
			      gc cr grant busy			1,988	 7.43
21:40:00   (5.0 min)	6,479 gc cr multi block request 	2,471	 9.23
			      db file parallel read		1,805	 6.74
			      gc cr grant busy			  896	 3.35
			  --------------------------------------------------------------------------------------------------------------------



	  ADDM Report for Task 'ADDM:3890827801_48'
	  -----------------------------------------

Analysis Period
---------------
AWR snapshot range from 47 to 48.
Time period starts at 20-FEB-20 09.32.34 PM
Time period ends at 20-FEB-20 09.45.08 PM

Analysis Target
---------------
Database 'P60SDB' with DB ID 3890827801.
Database version 19.0.0.0.0.
ADDM performed an analysis of all instances.

Activity During the Analysis Period
-----------------------------------
Total database time was 283471 seconds.
The average number of active sessions was 375.96.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       375.96 | 100	   1
2  Top SQL Statements	      369.43 | 98.26	   1
3  Global Cache Messaging     220.06 | 58.53	   1
4  "User I/O" wait Class      138.82 | 36.92	   0
5  Buffer Busy - Hot Objects  58.05 | 15.44	   0
6  Undersized SGA	      37.18 | 9.89	   1


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 376.46 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time.
The database was consuming 151081 kilo bits per second of interconnect
bandwidth.
0% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 98% for database lock management.
The average latency for 8K interconnect messages was 75314 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  53.29	     ADDM:3890827801_1_48
    2	    p60sdb2  46.71	     ADDM:3890827801_2_48

   Recommendation 1: Host Configuration
   Estimated benefit is 375.96 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle's recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 220.06 active sessions, 58.53% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 220.08 active sessions, 58.54% of total activity.


Finding 2: Top SQL Statements
Impact is 369.92 active sessions, 98.26% of total activity.
-----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  51.36	     ADDM:3890827801_1_48
    2	    p60sdb2  48.64	     ADDM:3890827801_2_48

   Recommendation 1: SQL Tuning
   Estimated benefit is 369.43 active sessions, 98.26% of total activity.
   ----------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      "bhdvtsvjhgvrh".
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND
	 (CUSTID < :B1 )
   Rationale
      The SQL spent 100% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "bhdvtsvjhgvrh" was executed 50868998 times
      and had an average elapsed time of 0.005 seconds.


Finding 3: Global Cache Messaging
Impact is 220.36 active sessions, 58.53% of total activity.
-----------------------------------------------------------
Inter-instance messaging was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  63.51	     ADDM:3890827801_1_48
    2	    p60sdb2  36.49	     ADDM:3890827801_2_48

   Recommendation 1: Application Analysis
   Estimated benefit is 220.06 active sessions, 58.53% of total activity.
   ----------------------------------------------------------------------
   Action
      Look at the "Top SQL Statements" finding for SQL statements consuming
      significant time on Cluster waits. For example, the SELECT statement
      with SQL_ID "bhdvtsvjhgvrh" is responsible for 99% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
      Impact is 220.08 active sessions, 58.54% of total activity.


Finding 4: "User I/O" wait Class
Impact is 139 active sessions, 36.92% of total activity.
--------------------------------------------------------
Wait class "User I/O" was consuming significant database time.
The throughput of the I/O subsystem was not significantly lower than expected.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  71.35	     ADDM:3890827801_2_48
    1	    p60sdb1  28.65	     ADDM:3890827801_1_48

   No recommendations are available.


Finding 5: Buffer Busy - Hot Objects
Impact is 58.12 active sessions, 15.44% of total activity.
----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  100	     ADDM:3890827801_1_48

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 58.05 active sessions, 15.44% of total activity.
	 Inter-instance messaging was consuming significant database time.
	 Impact is 220.06 active sessions, 58.53% of total activity.
	    Wait class "Cluster" was consuming significant database time.
	    Impact is 220.08 active sessions, 58.54% of total activity.


Finding 6: Undersized SGA
Impact is 37.23 active sessions, 9.89% of total activity.
---------------------------------------------------------
The SGA was inadequately sized in some instances, causing additional I/O or
hard parses.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  64.08	     ADDM:3890827801_2_48
    1	    p60sdb1  35.92	     ADDM:3890827801_1_48

   Recommendation 1: Examine instance ADDM
   Estimated benefit is 37.18 active sessions, 9.89% of total activity.
   --------------------------------------------------------------------
   Action
      Increase the size of the SGA on affected instances. Check the ADDM
      analysis of affected instances for more details.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Instances that were analyzed:
-----------------------------
    Number  Name     Host Name		    Active Sessions  Percent of Activity
    ------  -------  ---------------------  ---------------  -------------------
    1	    p60sdb1  mcracpoc1.example.com  200.6	     53.29
    2	    p60sdb2  mcracpoc2.example.com  175.86	     46.71

Warnings
--------
The flushing of snapshots 47 and 48 took 84 seconds which is 11% of the
analysis period time. This may reduce the reliability of the ADDM analysis.

Miscellaneous Information
-------------------------
Wait class "Application" was not consuming significant database time.
Wait class "Commit" was not consuming significant database time.
Wait class "Concurrency" was not consuming significant database time.
Wait class "Configuration" was not consuming significant database time.
Wait class "Network" was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.

End of Report
Report written to awr_rac.txt
SQL> SQL> SQL> SQL> SQL> SQL> 




Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt.  Default value is 'html'.

'html'		HTML format (default)
'text'		Text format
'active-html'	Includes Performance Hub active report


Type Specified:  html







Current Database
~~~~~~~~~~~~~~~~
DB Id	       DB Name	      Container Name
-------------- -------------- --------------
 3890827801	P60SDB	       p60sdb











Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
* 3890827801	 1	P60SDB	     p60sdb1	  mcracpoc1.ex
* 3890827801	 2	P60SDB	     p60sdb2	  mcracpoc2.ex

Using 3890827801 for database Id
Using instances ALL (default 'ALL')


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.


Enter value for num_days: 
Listing all Completed Snapshots
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------

P60SDB		     1	17 Feb 2020 17:00    1
		     2	17 Feb 2020 18:00    1
		     3	18 Feb 2020 12:19    1
		     4	18 Feb 2020 13:00    1
		     5	18 Feb 2020 14:03    1
		     6	18 Feb 2020 16:18    1
		     7	18 Feb 2020 17:00    1
		     8	18 Feb 2020 18:00    1
		     9	18 Feb 2020 19:00    1
		    10	18 Feb 2020 20:00    1
		    11	18 Feb 2020 21:00    1
		    12	18 Feb 2020 22:00    1
		    13	18 Feb 2020 23:00    1
		    14	19 Feb 2020 00:00    1
		    15	19 Feb 2020 01:00    1
		    16	19 Feb 2020 02:00    1
		    17	19 Feb 2020 03:00    1
		    18	19 Feb 2020 04:00    1
		    19	19 Feb 2020 05:00    1
		    20	19 Feb 2020 06:00    1
		    21	19 Feb 2020 07:00    1
		    22	19 Feb 2020 08:00    1
		    23	19 Feb 2020 09:00    1
		    24	19 Feb 2020 10:00    1
		    25	19 Feb 2020 11:00    1
		    26	19 Feb 2020 12:00    1
		    27	19 Feb 2020 13:00    1
		    28	20 Feb 2020 07:00    1
		    29	20 Feb 2020 08:00    1
		    30	20 Feb 2020 14:53    1
		    31	20 Feb 2020 16:00    1
		    32	20 Feb 2020 17:00    1
		    33	20 Feb 2020 20:03    1
		    34	20 Feb 2020 20:09    1
		    35	20 Feb 2020 20:12    1
		    36	20 Feb 2020 20:15    1
		    37	20 Feb 2020 20:22    1
		    38	20 Feb 2020 20:32    1
		    39	20 Feb 2020 20:38    1
		    40	20 Feb 2020 20:41    1
		    41	20 Feb 2020 20:44    1
		    42	20 Feb 2020 20:49    1
		    43	20 Feb 2020 20:52    1
		    44	20 Feb 2020 20:59    1
		    45	20 Feb 2020 21:14    1
		    46	20 Feb 2020 21:26    1
		    47	20 Feb 2020 21:32    1
		    48	20 Feb 2020 21:45    1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 47

End   Snapshot Id specified: 48



Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_rac_47_48.html.	To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr_rac.html

<html lang="en"><head><title>AWR RAC Report for DB: P60SDB, Snaps: 47-48</title>
<style type="text/css">
body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}
pre.awr  {font:8pt Courier;color:black; background:White;}
pre_sqltext.awr  {white-space: pre-wrap;}
h1.awr	 {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}
h2.awr	 {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
h3.awr {font:bold 16pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}
th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}
th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px}
td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}
td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}
td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}
td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}
td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}
td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}
td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}
td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}
td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}
table.tdiff {  border_collapse: collapse; }
table.tscl {width: 600;}
table.tscl tbody, table.tscl thead { display: block; }
table.tscl thead tr th {height: 12px;line-height: 12px;}
table.tscl tbody { height: 100px;overflow-y: auto; overflow-x: hidden;}
table.tscl tbody td, thead th {width: 200;}
.hidden   {position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;}
.pad   {margin-left:17px;}
.doublepad {margin-left:34px;}
</style></head><body class="awr">
<h1 class="awr">
WORKLOAD REPOSITORY REPORT (RAC)

</h1>
<p />Database Summary<p />
<ul>
</ul>
<table border="0" class="tdiff" summary="Database Summary"><tr>
<th class="awrbg" colspan=" 8" id="Database">Database</th>
<th class="awrbg" colspan=" 2" id="SnapshotIds">Snapshot Ids</th>
<th class="awrbg" colspan=" 2" id="NumberofInstances">Number of Instances</th>
<th class="awrbg" colspan=" 2" id="NumberofHosts">Number of Hosts</th>
<th class="awrbg" colspan=" 2" id="ReportTotal(minutes)">Report Total (minutes)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Id">Id</th><th class="awrbg" scope="col" id="Name">Name</th><th class="awrbg" scope="col" id="UniqueName">Unique Name</th><th class="awrbg" scope="col" id="Role">Role</th><th class="awrbg" scope="col" id="Edition">Edition</th><th class="awrbg" scope="col" id="RAC">RAC</th><th class="awrbg" scope="col" id="CDB">CDB</th><th class="awrbg" scope="col" id="BlockSize">Block Size</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="InReport">In Report</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="InReport">In Report</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="Elapsedtime">Elapsed time</th></tr>
<tr><td align="right" headers="Database Id" class='awrclb'>3890827801</td><td headers="Database Name" class='awrc'>P60SDB</td><td headers="Database UniqueName" class='awrc'>p60sdb</td><td headers="Database Role" class='awrc'>PRIMARY</td><td headers="Database Edition" class='awrc'>EE</td><td headers="Database RAC" class='awrc'>YES</td><td headers="Database CDB" class='awrc'>NO</td><td align="right" headers="Database BlockSize" class='awrc'>8192</td><td align="right" headers="SnapshotIds Begin" class='awrclb'>47</td><td align="right" headers="SnapshotIds End" class='awrc'>48</td><td align="right" headers="NumberofInstances InReport" class='awrclb'>2</td><td align="right" headers="NumberofInstances Total" class='awrc'>2</td><td align="right" headers="NumberofHosts InReport" class='awrclb'>2</td><td align="right" headers="NumberofHosts Total" class='awrc'>2</td><td align="right" headers="ReportTotal(minutes) DBtime" class='awrclb'>4,724.52</td><td align="right" headers="ReportTotal(minutes) Elapsedtime" class='awrcrb'>12.56</td></tr>
</table><p />
<p />Database Instances Included In Report<p />
<ul>
<li class="awr"> Listed in order of instance number, I#</li>
</ul>
<table border="0" class="tdiff" summary="Database Instances Included In Report. . Listed in order of instance number, I#"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Instance</th><th class="awrbg" scope="col">Host</th><th class="awrbg" scope="col">Startup</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th><th class="awrbg" scope="col">Release</th><th class="awrbg" scope="col">Elapsed Time(min)</th><th class="awrbg" scope="col">DB time(min)</th><th class="awrbg" scope="col">Up Time(hrs)</th><th class="awrbg" scope="col">Avg Active Sessions</th><th class="awrbg" scope="col">Platform</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td class='awrc'>p60sdb1</td><td class='awrc'>mcracpoc1.example.com</td><td class='awrc'>20-Feb-20 21:11</td><td class='awrc'>20-Feb-20 21:32</td><td class='awrc'>20-Feb-20 21:45</td><td class='awrc'>19.0.0.0.0</td><td align="right" class='awrc'>12.55</td><td align="right" class='awrc'>2,517.47</td><td align="right" class='awrc'>0.55</td><td align="right" class='awrc'>200.60</td><td class='awrc'>Linux x86 64-bit</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td class='awrnc'>p60sdb2</td><td class='awrnc'>mcracpoc2.example.com</td><td class='awrnc'>20-Feb-20 21:11</td><td class='awrnc'>20-Feb-20 21:32</td><td class='awrnc'>20-Feb-20 21:45</td><td class='awrnc'>19.0.0.0.0</td><td align="right" class='awrnc'>12.55</td><td align="right" class='awrnc'>2,207.06</td><td align="right" class='awrnc'>0.55</td><td align="right" class='awrnc'>175.86</td><td class='awrnc'>Linux x86 64-bit</td></tr>
</table><p />
<h3 class="awr"><a class="awr" name="99999"></a>Report Summary</h3>
<p />Top ADDM Findings by Average Active Sessions<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top ADDM findings by average active sessions"><tr><th class="awrbg" scope="col">Finding Name</th><th class="awrbg" scope="col">Avg active sessions of the task</th><th class="awrbg" scope="col">Percent active sessions of finding</th><th class="awrbg" scope="col">Task Name</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th></tr>
<tr><td class='awrc'>Interconnect Latency</td><td align="right" class='awrc'>376.46</td><td align="right" class='awrc'>1.0E+02</td><td scope="row" class='awrc'>ADDM:3890827801_48</td><td class='awrc'>20-Feb-20 21:32</td><td class='awrc'>20-Feb-20 21:45</td></tr>
<tr><td class='awrnc'>Top SQL Statements</td><td align="right" class='awrnc'>376.46</td><td align="right" class='awrnc'>98.26</td><td scope="row" class='awrnc'>ADDM:3890827801_48</td><td class='awrnc'>20-Feb-20 21:32</td><td class='awrnc'>20-Feb-20 21:45</td></tr>
<tr><td class='awrc'>Global Cache Messaging</td><td align="right" class='awrc'>376.46</td><td align="right" class='awrc'>58.53</td><td scope="row" class='awrc'>ADDM:3890827801_48</td><td class='awrc'>20-Feb-20 21:32</td><td class='awrc'>20-Feb-20 21:45</td></tr>
<tr><td class='awrnc'>&quot;User I/O&quot; wait Class</td><td align="right" class='awrnc'>376.46</td><td align="right" class='awrnc'>36.92</td><td scope="row" class='awrnc'>ADDM:3890827801_48</td><td class='awrnc'>20-Feb-20 21:32</td><td class='awrnc'>20-Feb-20 21:45</td></tr>
<tr><td class='awrc'>Buffer Busy - Hot Objects</td><td align="right" class='awrc'>376.46</td><td align="right" class='awrc'>15.44</td><td scope="row" class='awrc'>ADDM:3890827801_48</td><td class='awrc'>20-Feb-20 21:32</td><td class='awrc'>20-Feb-20 21:45</td></tr>
</table><p />
<p />Cache Sizes<p />
<ul>
<li class="awr"> All values are in Megabytes </li>
<li class="awr"> Listed in order of instance number, I# </li>
<li class="awr"> End values displayed only if different from Begin values</li>
</ul>
<table border="0" class="tdiff" summary="Cache Sizes. . All values are in Megabytes. Listed in order of instance number, I#. End values displayed only if different from Begin values"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="MemoryTarget">Memory Target</th>
<th class="awrbg" colspan=" 2" id="SgaTarget">Sga Target</th>
<th class="awrbg" colspan=" 2" id="DBCache">DB Cache</th>
<th class="awrbg" colspan=" 2" id="SharedPool">Shared Pool</th>
<th class="awrbg" colspan=" 2" id="LargePool">Large Pool</th>
<th class="awrbg" colspan=" 2" id="JavaPool">Java Pool</th>
<th class="awrbg" colspan=" 2" id="StreamsPool">Streams Pool</th>
<th class="awrbg" colspan=" 2" id="PGATarget">PGA Target</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col">Log Buffer</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="MemoryTarget Begin" class='awrclb'>&#160;</td><td align="right" headers="MemoryTarget End" class='awrc'>&#160;</td><td align="right" headers="SgaTarget Begin" class='awrclb'>14,336</td><td align="right" headers="SgaTarget End" class='awrc'>&#160;</td><td align="right" headers="DBCache Begin" class='awrclb'>11,392</td><td align="right" headers="DBCache End" class='awrc'>&#160;</td><td align="right" headers="SharedPool Begin" class='awrclb'>2,496</td><td align="right" headers="SharedPool End" class='awrc'>&#160;</td><td align="right" headers="LargePool Begin" class='awrclb'>160</td><td align="right" headers="LargePool End" class='awrc'>&#160;</td><td align="right" headers="JavaPool Begin" class='awrclb'>&#160;</td><td align="right" headers="JavaPool End" class='awrc'>&#160;</td><td align="right" headers="StreamsPool Begin" class='awrclb'>&#160;</td><td align="right" headers="StreamsPool End" class='awrc'>&#160;</td><td align="right" headers="PGATarget Begin" class='awrclb'>8,096</td><td align="right" headers="PGATarget End" class='awrcrb'>&#160;</td><td align="right" class='awrc'>140.22</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="MemoryTarget Begin" class='awrnclb'>&#160;</td><td align="right" headers="MemoryTarget End" class='awrnc'>&#160;</td><td align="right" headers="SgaTarget Begin" class='awrnclb'>14,336</td><td align="right" headers="SgaTarget End" class='awrnc'>&#160;</td><td align="right" headers="DBCache Begin" class='awrnclb'>11,168</td><td align="right" headers="DBCache End" class='awrnc'>&#160;</td><td align="right" headers="SharedPool Begin" class='awrnclb'>2,720</td><td align="right" headers="SharedPool End" class='awrnc'>&#160;</td><td align="right" headers="LargePool Begin" class='awrnclb'>160</td><td align="right" headers="LargePool End" class='awrnc'>&#160;</td><td align="right" headers="JavaPool Begin" class='awrnclb'>&#160;</td><td align="right" headers="JavaPool End" class='awrnc'>&#160;</td><td align="right" headers="StreamsPool Begin" class='awrnclb'>&#160;</td><td align="right" headers="StreamsPool End" class='awrnc'>&#160;</td><td align="right" headers="PGATarget Begin" class='awrnclb'>8,096</td><td align="right" headers="PGATarget End" class='awrncrb'>&#160;</td><td align="right" class='awrnc'>140.22</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>14,336</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>11,280</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>2,608</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>160</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>8,096</td><td align="right" class='awrcrbt'>&#160;</td><td align="right" class='awrct'>140.22</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Min</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>14,336</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>11,168</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>2,496</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>160</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>8,096</td><td align="right" class='awrncrb'>&#160;</td><td align="right" class='awrnc'>140.22</td></tr>
<tr><td align="right" scope="row" class='awrc'>Max</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>14,336</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>11,392</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>2,720</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>160</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>8,096</td><td align="right" class='awrcrb'>&#160;</td><td align="right" class='awrc'>140.22</td></tr>
</table><p />

<a class="awr" name="top"></a>
<h2 class="awr">
Main Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#99999">Report Summary</a></li>
<li class="awr"><a class="awr" href="#12010">OS Statistics</a></li>
<li class="awr"><a class="awr" href="#629">Time Model Statistics</a></li>
<li class="awr"><a class="awr" href="#621">Wait Events Statistics</a></li>
<li class="awr"><a class="awr" href="#639">Global Activity Load Profile</a></li>
<li class="awr"><a class="awr" href="#605">Global Cache and Enqueue Statistics Summary</a></li>
<li class="awr"><a class="awr" href="#12033">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#12034">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#607">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#608">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#622">SQL Statistics</a></li>
<li class="awr"><a class="awr" href="#623">Global Activity Statistics</a></li>
<li class="awr"><a class="awr" href="#630">I/O Statistics</a></li>
<li class="awr"><a class="awr" href="#12083">Library Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#633">Memory Statistics</a></li>
<li class="awr"><a class="awr" href="#638">Supplemental Information</a></li>
<li class="awr"><a class="awr" href="#43">Active Session History(ASH) Report</a></li>
<li class="awr"><a class="awr" href="#99994">ADDM Reports</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<a class="awr" name="12010"></a>
<h3 class="awr">OS Statistics By Instance</h3>
<ul>
<li class="awr"> Listed in order of instance number, I# </li>
<li class="awr"> End values are diplayed only if different from begin values</li>
</ul>
<table border="0" class="tdiff" summary="OS Statistics By Instance. . Listed in order of instance number, I#. End values are diplayed only if different from begin values"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="CPU">CPU</th>
<th class="awrbg" colspan=" 2" id="Load">Load</th>
<th class="awrbg" colspan=" 5" id="%CPU">% CPU</th>
<th class="awrbg" colspan=" 3" id="Time(s)">Time (s)</th>
<th class="awrbg" colspan=" 1" id="Memory">Memory</th>
<th class="awrbg" colspan=" 4" id="EndValues">End Values</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="#CPUs">#CPUs</th><th class="awrbg" scope="col" id="#Cores">#Cores</th><th class="awrbg" scope="col" id="#Sckts">#Sckts</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="%Busy">% Busy</th><th class="awrbg" scope="col" id="%Usr">% Usr</th><th class="awrbg" scope="col" id="%Sys">% Sys</th><th class="awrbg" scope="col" id="%WIO">% WIO</th><th class="awrbg" scope="col" id="%Idl">% Idl</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Idle">Idle</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="MB">MB</th><th class="awrbg" scope="col" id="#CPUs">#CPUs</th><th class="awrbg" scope="col" id="#Cores">#Cores</th><th class="awrbg" scope="col" id="#Sckts">#Sckts</th><th class="awrbg" scope="col" id="Memory(M)">Memory (M)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="CPU #CPUs" class='awrclb'>128</td><td align="right" headers="CPU #Cores" class='awrc'>64</td><td align="right" headers="CPU #Sckts" class='awrc'>4</td><td align="right" headers="Load Begin" class='awrclb'>18.72</td><td align="right" headers="Load End" class='awrc'>5.46</td><td align="right" headers="%CPU %Busy" class='awrclb'>17.44</td><td align="right" headers="%CPU %Usr" class='awrc'>12.32</td><td align="right" headers="%CPU %Sys" class='awrc'>4.02</td><td align="right" headers="%CPU %WIO" class='awrc'>9.44</td><td align="right" headers="%CPU %Idl" class='awrc'>82.56</td><td align="right" headers="Time(s) Busy" class='awrclb'>16,133.85</td><td align="right" headers="Time(s) Idle" class='awrc'>76,382.15</td><td align="right" headers="Time(s) Total" class='awrc'>92,516.00</td><td align="right" headers="Memory MB" class='awrclb'>2,064,280.85</td><td align="right" headers="EndValues #CPUs" class='awrclb'>&#160;</td><td align="right" headers="EndValues #Cores" class='awrc'>&#160;</td><td align="right" headers="EndValues #Sckts" class='awrc'>&#160;</td><td align="right" headers="EndValues Memory(M)" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="CPU #CPUs" class='awrnclb'>128</td><td align="right" headers="CPU #Cores" class='awrnc'>64</td><td align="right" headers="CPU #Sckts" class='awrnc'>4</td><td align="right" headers="Load Begin" class='awrnclb'>101.35</td><td align="right" headers="Load End" class='awrnc'>8.61</td><td align="right" headers="%CPU %Busy" class='awrnclb'>9.12</td><td align="right" headers="%CPU %Usr" class='awrnc'>5.33</td><td align="right" headers="%CPU %Sys" class='awrnc'>2.90</td><td align="right" headers="%CPU %WIO" class='awrnc'>22.35</td><td align="right" headers="%CPU %Idl" class='awrnc'>90.88</td><td align="right" headers="Time(s) Busy" class='awrnclb'>8,341.10</td><td align="right" headers="Time(s) Idle" class='awrnc'>83,131.26</td><td align="right" headers="Time(s) Total" class='awrnc'>91,472.36</td><td align="right" headers="Memory MB" class='awrnclb'>2,064,280.85</td><td align="right" headers="EndValues #CPUs" class='awrnclb'>&#160;</td><td align="right" headers="EndValues #Cores" class='awrnc'>&#160;</td><td align="right" headers="EndValues #Sckts" class='awrnc'>&#160;</td><td align="right" headers="EndValues Memory(M)" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclbt'>24,474.95</td><td align="right" class='awrct'>159,513.41</td><td align="right" class='awrct'>183,988.36</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="629"></a>
<h2 class="awr">
Time Model Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12014">Time Model</a></li>
<li class="awr"><a class="awr" href="#12015">Time Model - % of DB time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12014"></a>
<h3 class="awr">Time Model</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Time Model"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">DB time (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">SQL Exec Ela (s)</th><th class="awrbg" scope="col">Parse Ela (s)</th><th class="awrbg" scope="col">Hard Parse Ela (s)</th><th class="awrbg" scope="col">PL/SQL Ela (s)</th><th class="awrbg" scope="col">Java Ela (s)</th><th class="awrbg" scope="col">bg time (s)</th><th class="awrbg" scope="col">bg CPU (s)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>151,048.06</td><td align="right" class='awrc'>14,550.57</td><td align="right" class='awrc'>150,941.91</td><td align="right" class='awrc'>87.85</td><td align="right" class='awrc'>2.54</td><td align="right" class='awrc'>694.15</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1,005.62</td><td align="right" class='awrc'>1,220.42</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>132,423.41</td><td align="right" class='awrnc'>6,776.02</td><td align="right" class='awrnc'>132,166.15</td><td align="right" class='awrnc'>16.14</td><td align="right" class='awrnc'>15.92</td><td align="right" class='awrnc'>220.30</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>902.42</td><td align="right" class='awrnc'>1,129.38</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>283,471.47</td><td align="right" class='awrct'>21,326.60</td><td align="right" class='awrct'>283,108.06</td><td align="right" class='awrct'>103.99</td><td align="right" class='awrct'>18.45</td><td align="right" class='awrct'>914.45</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>1,908.03</td><td align="right" class='awrct'>2,349.79</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>141,735.73</td><td align="right" class='awrnc'>10,663.30</td><td align="right" class='awrnc'>141,554.03</td><td align="right" class='awrnc'>52.00</td><td align="right" class='awrnc'>9.23</td><td align="right" class='awrnc'>457.23</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>954.02</td><td align="right" class='awrnc'>1,174.90</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>13,169.62</td><td align="right" class='awrc'>5,497.44</td><td align="right" class='awrc'>13,276.46</td><td align="right" class='awrc'>50.71</td><td align="right" class='awrc'>9.46</td><td align="right" class='awrc'>335.07</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>72.97</td><td align="right" class='awrc'>64.38</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#629">Back to Time Model Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12015"></a>
<h3 class="awr">Time Model - % of DB time</h3>
<ul>
<li class="awr"> % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]</li>
</ul>
<table border="0" class="tdiff" summary="Time Model - % of DB time. . % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 6" id="%DBtime">% DB time</th>
<td>&#160;</td><th class="awrbg" colspan=" 1" id="%bgtime">% bg time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">% Total DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="SQLExecEla">SQL Exec Ela</th><th class="awrbg" scope="col" id="ParseEla">Parse Ela</th><th class="awrbg" scope="col" id="HardParse">Hard Parse</th><th class="awrbg" scope="col" id="PL/SQLEla">PL/SQL Ela</th><th class="awrbg" scope="col" id="JavaEla">Java Ela</th><th class="awrbg" scope="col">% Total bg time</th><th class="awrbg" scope="col" id="bgCPU">bg CPU</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>53.29</td><td align="right" headers="%DBtime DBCPU" class='awrclb'>9.63</td><td align="right" headers="%DBtime SQLExecEla" class='awrc'>99.93</td><td align="right" headers="%DBtime ParseEla" class='awrc'>0.06</td><td align="right" headers="%DBtime HardParse" class='awrc'>0.00</td><td align="right" headers="%DBtime PL/SQLEla" class='awrc'>0.00</td><td align="right" headers="%DBtime JavaEla" class='awrc'>0.00</td><td align="right" class='awrc'>52.70</td><td align="right" headers="%bgtime bgCPU" class='awrcbb'>121.36</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>46.71</td><td align="right" headers="%DBtime DBCPU" class='awrnclb'>5.12</td><td align="right" headers="%DBtime SQLExecEla" class='awrnc'>99.81</td><td align="right" headers="%DBtime ParseEla" class='awrnc'>0.01</td><td align="right" headers="%DBtime HardParse" class='awrnc'>0.01</td><td align="right" headers="%DBtime PL/SQLEla" class='awrnc'>0.00</td><td align="right" headers="%DBtime JavaEla" class='awrnc'>0.00</td><td align="right" class='awrnc'>47.30</td><td align="right" headers="%bgtime bgCPU" class='awrncbb'>125.15</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>50.00</td><td align="right" class='awrclbt'>7.38</td><td align="right" class='awrct'>99.87</td><td align="right" class='awrct'>0.04</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>50.00</td><td align="right" class='awrcbbt'>123.26</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#629">Back to Time Model Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="621"></a>
<h2 class="awr">
Wait Events Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12011">Foreground Wait Classes -	% of Total DB time</a></li>
<li class="awr"><a class="awr" href="#12012">Foreground Wait Classes</a></li>
<li class="awr"><a class="awr" href="#12013">Foreground Wait Classes -	% of DB time </a></li>
<li class="awr"><a class="awr" href="#12050">Top Timed Events</a></li>
<li class="awr"><a class="awr" href="#12051">Top Timed Foreground Events</a></li>
<li class="awr"><a class="awr" href="#12052">Top Timed Background Events</a></li>
<li class="awr"><a class="awr" href="#12053">Foreground Wait Events (Global)</a></li>
<li class="awr"><a class="awr" href="#12054">Background Wait Events (Global)</a></li>
<li class="awr"><a class="awr" href="#12055">Wait Event Histogram (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12011"></a>
<h3 class="awr">Foreground Wait Classes -  % of Total DB time</h3>
<ul>
<li class="awr"> Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time</li>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes -  % of Total DB time. . Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time"><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">User I/O</th><th class="awrbg" scope="col">Sys I/O</th><th class="awrbg" scope="col">Other</th><th class="awrbg" scope="col">Applic</th><th class="awrbg" scope="col">Commit</th><th class="awrbg" scope="col">Network</th><th class="awrbg" scope="col">Concurcy</th><th class="awrbg" scope="col">Config</th><th class="awrbg" scope="col">Cluster</th><th class="awrbg" scope="col">Admin</th><th class="awrbg" scope="col">Scheduler</th><th class="awrbg" scope="col">DB CPU</th></tr>
<tr><td class='awrc'>&#160;</td><td align="right" class='awrc'>36.92</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>58.54</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>7.52</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12012"></a>
<h3 class="awr">Foreground Wait Classes</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">User I/O(s)</th><th class="awrbg" scope="col">Sys I/O(s)</th><th class="awrbg" scope="col">Other(s)</th><th class="awrbg" scope="col">Applic (s)</th><th class="awrbg" scope="col">Commit (s)</th><th class="awrbg" scope="col">Network (s)</th><th class="awrbg" scope="col">Concurcy (s)</th><th class="awrbg" scope="col">Config (s)</th><th class="awrbg" scope="col">Cluster (s)</th><th class="awrbg" scope="col">Admin (s)</th><th class="awrbg" scope="col">Scheduler (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">DB time</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>29,989.67</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>41.38</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>259.38</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>110,492.95</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>14,550.57</td><td align="right" class='awrc'>151,048.06</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>74,679.86</td><td align="right" class='awrnc'>3.14</td><td align="right" class='awrnc'>25.81</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>8.55</td><td align="right" class='awrnc'>1.54</td><td align="right" class='awrnc'>55,451.14</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>6,776.02</td><td align="right" class='awrnc'>132,423.41</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>104,669.53</td><td align="right" class='awrct'>3.16</td><td align="right" class='awrct'>67.19</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>267.93</td><td align="right" class='awrct'>1.54</td><td align="right" class='awrct'>165,944.09</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>21,326.60</td><td align="right" class='awrct'>283,471.47</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>52,334.77</td><td align="right" class='awrnc'>1.58</td><td align="right" class='awrnc'>33.59</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>133.97</td><td align="right" class='awrnc'>0.77</td><td align="right" class='awrnc'>82,972.04</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>10,663.30</td><td align="right" class='awrnc'>141,735.73</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>31,600.74</td><td align="right" class='awrc'>2.21</td><td align="right" class='awrc'>11.01</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>177.36</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>38,920.43</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>5,497.44</td><td align="right" class='awrc'>13,169.62</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12013"></a>
<h3 class="awr">Foreground Wait Classes -  % of DB time </h3>
<ul>
<li class="awr"> % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time</li>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes -  % of DB time . . % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 12" id="%DBtime">% DB time</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="UserI/O">User I/O</th><th class="awrbg" scope="col" id="SysI/O">Sys I/O</th><th class="awrbg" scope="col" id="Other">Other</th><th class="awrbg" scope="col" id="Applic">Applic</th><th class="awrbg" scope="col" id="Commit">Commit</th><th class="awrbg" scope="col" id="Network">Network</th><th class="awrbg" scope="col" id="Concurcy">Concurcy</th><th class="awrbg" scope="col" id="Config">Config</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Admin">Admin</th><th class="awrbg" scope="col" id="Scheduler">Scheduler</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col">% Total DB time</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="%DBtime UserI/O" class='awrclb'>19.85</td><td align="right" headers="%DBtime SysI/O" class='awrc'>0.00</td><td align="right" headers="%DBtime Other" class='awrc'>0.03</td><td align="right" headers="%DBtime Applic" class='awrc'>0.00</td><td align="right" headers="%DBtime Commit" class='awrc'>&#160;</td><td align="right" headers="%DBtime Network" class='awrc'>0.00</td><td align="right" headers="%DBtime Concurcy" class='awrc'>0.17</td><td align="right" headers="%DBtime Config" class='awrc'>0.00</td><td align="right" headers="%DBtime Cluster" class='awrc'>73.15</td><td align="right" headers="%DBtime Admin" class='awrc'>&#160;</td><td align="right" headers="%DBtime Scheduler" class='awrc'>&#160;</td><td align="right" headers="%DBtime DBCPU" class='awrcrb'>9.63</td><td align="right" class='awrc'>53.29</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="%DBtime UserI/O" class='awrnclb'>56.39</td><td align="right" headers="%DBtime SysI/O" class='awrnc'>0.00</td><td align="right" headers="%DBtime Other" class='awrnc'>0.02</td><td align="right" headers="%DBtime Applic" class='awrnc'>0.00</td><td align="right" headers="%DBtime Commit" class='awrnc'>0.00</td><td align="right" headers="%DBtime Network" class='awrnc'>0.00</td><td align="right" headers="%DBtime Concurcy" class='awrnc'>0.01</td><td align="right" headers="%DBtime Config" class='awrnc'>0.00</td><td align="right" headers="%DBtime Cluster" class='awrnc'>41.87</td><td align="right" headers="%DBtime Admin" class='awrnc'>&#160;</td><td align="right" headers="%DBtime Scheduler" class='awrnc'>&#160;</td><td align="right" headers="%DBtime DBCPU" class='awrncrb'>5.12</td><td align="right" class='awrnc'>46.71</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>38.12</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.09</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>57.51</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrcrbt'>7.38</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12050"></a>
<h3 class="awr">Top Timed Events</h3>
<ul>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time ' 	     : Per-instance 'Wait Time Avg ' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Events. . Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time ' : Per-instance 'Wait Time Avg ' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>803,743</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>121,669.90</td><td align="right" headers="WaitTime AvgWait" class='awrc'>151.38ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>42.92</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>147.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>121.21ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>174.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>37.68ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>942,595</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>77,758.15</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>82.49ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>27.43</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>77.68ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>52.21ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>103.15ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>36.02ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>787,098</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>43,347.50</td><td align="right" headers="WaitTime AvgWait" class='awrc'>55.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>15.29</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>53.50ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>48.94ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>58.06ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>6.45ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>2,514,696</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>26,943.96</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.71ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.50</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.94ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.52ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.36ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>4.84ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>21,326.60</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>7.52</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrnclb'>921</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>456.32</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>495.47ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.16</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>509.30ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>477.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>541.56ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>45.63ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>4,744</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>174.58</td><td align="right" headers="WaitTime AvgWait" class='awrc'>36.80ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.06</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>40.32ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>33.46ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>47.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>9.70ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrnclb'>280</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>149.15</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>532.69ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>524.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>508.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>540.15ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>22.05ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>236</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>142.34</td><td align="right" headers="WaitTime AvgWait" class='awrc'>603.14ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>601.31ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>583.34ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>619.28ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>25.42ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache load lock</td><td align="right" headers="Event Waits" class='awrnclb'>460</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>96.63</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>210.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.03</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>210.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>210.07ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>210.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>Cluster</td><td headers="Wait Event" class='awrct'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclbt'>455,075</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>79,407.97</td><td align="right" headers="WaitTime AvgWait" class='awrct'>174.49ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>52.57</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>529,123</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>30,722.80</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>58.06ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>20.34</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>382,228</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>19,957.44</td><td align="right" headers="WaitTime AvgWait" class='awrc'>52.21ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>13.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>14,550.57</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.63</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>1,340,728</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10,084.60</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.52ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>6.68</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrnclb'>263</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>142.43</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>541.56ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.09</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrclb'>213</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>115.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>540.15ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.08</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache load lock</td><td align="right" headers="Event Waits" class='awrnclb'>460</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>96.63</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>210.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.06</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>130</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>80.51</td><td align="right" headers="WaitTime AvgWait" class='awrc'>619.28ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>cursor: pin S wait on X</td><td align="right" headers="Event Waits" class='awrnclb'>259</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>76.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>293.58ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>User I/O</td><td headers="Wait Event" class='awrct'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclbt'>560,367</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>57,800.71</td><td align="right" headers="WaitTime AvgWait" class='awrct'>103.15ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>43.65</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>348,668</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>42,261.94</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>121.21ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>31.91</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>1,173,968</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>16,859.35</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>12.73</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>257,975</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>12,624.70</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>48.94ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.53</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>6,776.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>5.12</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrnclb'>658</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>313.89</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>477.04ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.24</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>3,589</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>120.10</td><td align="right" headers="WaitTime AvgWait" class='awrc'>33.46ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.09</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: TX - row lock contention</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>66.98</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>66.98 s</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>106</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>61.83</td><td align="right" headers="WaitTime AvgWait" class='awrc'>583.34ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>read by other session</td><td align="right" headers="Event Waits" class='awrnclb'>1,157</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>39.61</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>34.24ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.03</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12051"></a>
<h3 class="awr">Top Timed Foreground Events</h3>
<ul>
<li class="awr"> Foreground Activity is captured in release 11g and above </li>
<li class="awr"> For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity </li>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time'		    : Per-instance 'Wait Time Avg' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Foreground Events. . Foreground Activity is captured in release 11g and above. For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity. Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time' : Per-instance 'Wait Time Avg' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>803,626</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>121,665.66</td><td align="right" headers="WaitTime AvgWait" class='awrc'>151.40ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>42.92</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>147.87ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>121.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>174.52ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>37.69ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>942,590</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>77,758.12</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>82.49ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>27.43</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>77.68ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>52.21ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>103.15ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>36.02ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>784,367</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>43,289.15</td><td align="right" headers="WaitTime AvgWait" class='awrc'>55.19ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>15.27</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>53.61ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>49.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>58.20ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>6.50ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>2,505,137</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>26,862.92</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.48</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.95ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.52ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.37ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>4.85ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>21,326.60</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>7.52</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrnclb'>898</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>446.30</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>496.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.16</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>508.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>481.53ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>534.52ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>37.46ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>4,511</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>174.51</td><td align="right" headers="WaitTime AvgWait" class='awrc'>38.69ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.06</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>41.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>35.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>47.42ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>8.28ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrnclb'>264</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>146.82</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>556.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>545.09ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>523.69ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>566.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>30.26ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>223</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>133.13</td><td align="right" headers="WaitTime AvgWait" class='awrc'>596.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>596.20ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>582.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>609.69ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>19.07ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache load lock</td><td align="right" headers="Event Waits" class='awrnclb'>460</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>96.63</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>210.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.06</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>210.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>210.07ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>210.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>1</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>Cluster</td><td headers="Wait Event" class='awrct'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclbt'>454,988</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>79,403.86</td><td align="right" headers="WaitTime AvgWait" class='awrct'>174.52ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>52.57</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>527,105</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>30,678.97</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>58.20ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>20.31</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>382,224</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>19,957.42</td><td align="right" headers="WaitTime AvgWait" class='awrc'>52.21ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>13.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>&#160;</td><td headers="Wait Event" class='awrnc'>DB CPU</td><td align="right" headers="Event Waits" class='awrnclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>14,550.57</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.63</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>1,333,852</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10,027.78</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.52ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>6.64</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrnclb'>262</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>140.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>534.52ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.09</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrclb'>200</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>113.30</td><td align="right" headers="WaitTime AvgWait" class='awrc'>566.49ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.08</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache load lock</td><td align="right" headers="Event Waits" class='awrnclb'>460</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>96.63</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>210.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.06</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>cursor: pin S wait on X</td><td align="right" headers="Event Waits" class='awrclb'>258</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>76.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>294.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrnclb'>118</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>71.94</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>609.69ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>User I/O</td><td headers="Wait Event" class='awrct'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclbt'>560,366</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>57,800.70</td><td align="right" headers="WaitTime AvgWait" class='awrct'>103.15ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>43.65</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>348,638</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>42,261.81</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>121.22ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>31.91</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>1,171,285</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>16,835.14</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>12.71</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>257,262</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>12,610.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>49.02ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.52</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>6,776.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>5.12</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrnclb'>636</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>306.26</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>481.53ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>3,362</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>120.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>35.70ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.09</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrnclb'>105</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>61.19</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>582.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>read by other session</td><td align="right" headers="Event Waits" class='awrclb'>1,151</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>39.60</td><td align="right" headers="WaitTime AvgWait" class='awrc'>34.40ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.03</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrnclb'>64</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>33.52</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>523.69ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.03</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12052"></a>
<h3 class="awr">Top Timed Background Events</h3>
<ul>
<li class="awr"> % of bg time: % of background elapsed time </li>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time'		    : Per-instance 'Wait Time Avg' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Background Events. . % of bg time: % of background elapsed time. Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time' : Per-instance 'Wait Time Avg' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>background cpu time</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,349.79</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>123.15</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>9,564</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>81.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.47ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>4.25</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.64ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.26ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>538.91us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Application</td><td headers="Wait Event" class='awrc'>enq: TX - row lock contention</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>67.41</td><td align="right" headers="WaitTime AvgWait" class='awrc'>33.70 s</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.53</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>33.70 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>429.13ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>66.98 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>47.06 s</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>2,731</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>58.34</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>21.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.06</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>21.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>20.36ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>21.72ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>.96ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>2,062</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>46.96</td><td align="right" headers="WaitTime AvgWait" class='awrc'>22.77ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.46</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>22.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>17.36ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>27.76ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>7.36ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>6,203</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>32.23</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.20ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.69</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.33ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.44ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>2.98ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>848</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>27.79</td><td align="right" headers="WaitTime AvgWait" class='awrc'>32.77ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.46</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>34.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>30.35ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>37.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>5.39ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrnclb'>4,470</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>24.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.38ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.26</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.38ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>469.07us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>1,969</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>13.52</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.86ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.71</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.87ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.04ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>238.08us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>536</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>13.21</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>24.64ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.69</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>25.94ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>12.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>39.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>19.71ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>&#160;</td><td headers="Wait Event" class='awrct'>background cpu time</td><td align="right" headers="Event Waits" class='awrclbt'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrct'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>1,220.42</td><td align="right" headers="WaitTime AvgWait" class='awrct'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrct'>121.36</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>6,881</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>56.84</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.26ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.65</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>2,018</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>43.83</td><td align="right" headers="WaitTime AvgWait" class='awrc'>21.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>4.36</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrnclb'>1,073</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>29.79</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>27.76ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.96</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>579</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>17.58</td><td align="right" headers="WaitTime AvgWait" class='awrc'>30.35ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.75</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrnclb'>2,244</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>11.32</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.04ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>3,297</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10.62</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.22ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.06</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrnclb'>12</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8.56</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>713.65ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.85</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrclb'>534</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7.53</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.10ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.75</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>953</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6.71</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.04ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.67</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>&#160;</td><td headers="Wait Event" class='awrct'>background cpu time</td><td align="right" headers="Event Waits" class='awrclbt'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrct'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>1,129.38</td><td align="right" headers="WaitTime AvgWait" class='awrct'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrct'>125.15</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: TX - row lock contention</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>66.98</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>66.98 s</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>7.42</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>2,683</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>24.21</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.02ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.68</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>2,906</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>21.61</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.44ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.39</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>989</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>17.17</td><td align="right" headers="WaitTime AvgWait" class='awrc'>17.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.90</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>713</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>14.52</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>20.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.61</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrclb'>2,226</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>12.71</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.71ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.41</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>row cache lock</td><td align="right" headers="Event Waits" class='awrnclb'>46</td><td align="right" headers="Event %Timeouts" class='awrnc'>95.65</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>10.62</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>230.97ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.18</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>269</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10.22</td><td align="right" headers="WaitTime AvgWait" class='awrc'>37.97ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>243</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>9.69</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>39.88ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.07</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12053"></a>
<h3 class="awr">Foreground Wait Events (Global)</h3>
<ul>
<li class="awr"> s - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]  </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
</ul>
<table border="0" class="tdiff" summary="This table displays foreground wait event information"><tr>
<th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 4" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>803,626</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>121,665.66</td><td align="right" headers="WaitTime AvgWait" class='awrc'>151.40ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>42.92</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>147.87ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>121.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>174.52ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>37.69ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>942,590</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>77,758.12</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>82.49ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>27.43</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>77.68ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>52.21ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>103.15ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>36.02ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>784,367</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>43,289.15</td><td align="right" headers="WaitTime AvgWait" class='awrc'>55.19ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>15.27</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>53.61ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>49.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>58.20ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.50ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>2,505,137</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>26,862.92</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.48</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.95ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.52ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.37ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.85ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrclb'>898</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>446.30</td><td align="right" headers="WaitTime AvgWait" class='awrc'>496.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.16</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>508.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>481.53ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>534.52ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>37.46ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>4,511</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>174.51</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>38.69ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.06</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>41.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>35.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>47.42ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>8.28ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrclb'>264</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>146.82</td><td align="right" headers="WaitTime AvgWait" class='awrc'>556.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>545.09ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>523.69ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>566.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>30.26ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrnclb'>223</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>133.13</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>596.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>596.20ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>582.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>609.69ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>19.07ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache load lock</td><td align="right" headers="Event Waits" class='awrclb'>460</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>96.63</td><td align="right" headers="WaitTime AvgWait" class='awrc'>210.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.03</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>210.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>210.07ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>210.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>cursor: pin S wait on X</td><td align="right" headers="Event Waits" class='awrnclb'>258</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>76.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>294.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.03</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>294.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>294.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>294.72ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache: mutex X</td><td align="right" headers="Event Waits" class='awrclb'>2,172</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>70.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>32.24ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>21.33ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.75ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>40.92ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>27.70ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>read by other session</td><td align="right" headers="Event Waits" class='awrnclb'>1,475</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>44.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>29.87ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>24.09ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>13.78ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>34.40ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>14.58ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>gcs drm freeze in enter server mode</td><td align="right" headers="Event Waits" class='awrclb'>126</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>43.52</td><td align="right" headers="WaitTime AvgWait" class='awrc'>345.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>349.91ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>254.51ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>445.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>134.92ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>540</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>26.95</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>49.90ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>49.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>49.90ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>49.90ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>782</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>25.31</td><td align="right" headers="WaitTime AvgWait" class='awrc'>32.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>27.82ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>21.74ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>33.89ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.59ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>130</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>12.39</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>95.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>48.69ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>583.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>96.79ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>68.03ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: cache buffers chains</td><td align="right" headers="Event Waits" class='awrclb'>39,743</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>12.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>302.08us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>282.01us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>240.11us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>323.91us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>59.25us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc remaster</td><td align="right" headers="Event Waits" class='awrnclb'>81</td><td align="right" headers="Event %Timeouts" class='awrnc'>3.70</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>9.86</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>121.73ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>224.21ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>92.45ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>355.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>186.34ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch free</td><td align="right" headers="Event Waits" class='awrclb'>6,531</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>8.40</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.29ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.12ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>706.70us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.54ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>586.47us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache: bucket mutex X</td><td align="right" headers="Event Waits" class='awrnclb'>560</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>7.62</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.60ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>13.59ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.61ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>16.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.21ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr failure</td><td align="right" headers="Event Waits" class='awrclb'>82</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5.52</td><td align="right" headers="WaitTime AvgWait" class='awrc'>67.38ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>102.29ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>57.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>147.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>63.26ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: gc element</td><td align="right" headers="Event Waits" class='awrnclb'>8,243</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.20</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>509.33us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>441.69us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>284.12us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>599.25us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>222.83us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrclb'>76</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3.68</td><td align="right" headers="WaitTime AvgWait" class='awrc'>48.42ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>38.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>21.69ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>54.46ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>23.17ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrnclb'>187</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3.60</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>19.25ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>615.57ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>12.80ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1218.33ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>852.44ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>409</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.99ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.83ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.02ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrnclb'>150</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.86</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>19.04ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>19.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>19.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>19.04ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: gcs resource hash</td><td align="right" headers="Event Waits" class='awrclb'>1,160</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.40</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.10ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.71ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>552.23us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>cursor: pin S</td><td align="right" headers="Event Waits" class='awrnclb'>1,768</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.15ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>34.26us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>row cache lock</td><td align="right" headers="Event Waits" class='awrclb'>185</td><td align="right" headers="Event %Timeouts" class='awrc'>19.46</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.66</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.99ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.00ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>631.95us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>15.36ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>10.42ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.59</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>531.54ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>531.54ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>531.54ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>531.54ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>row cache mutex</td><td align="right" headers="Event Waits" class='awrclb'>253</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.56</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.15ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>589.92us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.59ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrnclb'>27</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.54</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>57.05ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>30.18ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.16ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>59.20ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>41.04ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>102</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.47</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.36ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>14.58ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>7.37ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: call allocation</td><td align="right" headers="Event Waits" class='awrnclb'>191</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.41</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.38ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.45ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>92.66us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.80ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7.57ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrclb'>20</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.21</td><td align="right" headers="WaitTime AvgWait" class='awrc'>60.71ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>38.51ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.78ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>70.23ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>44.86ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IPC send completion sync</td><td align="right" headers="Event Waits" class='awrnclb'>114</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.20ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.89ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>455.06us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>15.33ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>10.52ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" headers="Event Waits" class='awrclb'>70</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.73ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>14.73ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>493.94us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>28.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>20.14ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr disk read</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>335.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>335.31ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>335.31ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>335.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: WT - contention</td><td align="right" headers="Event Waits" class='awrclb'>8</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.52</td><td align="right" headers="WaitTime AvgWait" class='awrc'>64.39ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>64.39ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>64.39ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>64.39ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>80</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.39</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.93ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.93ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.93ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.93ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant congested</td><td align="right" headers="Event Waits" class='awrclb'>37</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.32</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>17.13ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.50ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>30.76ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>19.27ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrnclb'>38</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.28</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.32ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.32ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.32ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.32ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: cache buffers lru chain</td><td align="right" headers="Event Waits" class='awrclb'>1,562</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.27</td><td align="right" headers="WaitTime AvgWait" class='awrc'>171.45us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>160.35us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>87.53us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>233.18us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>102.99us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>name-service call wait</td><td align="right" headers="Event Waits" class='awrnclb'>12</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>14.62ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.26ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.17ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>21.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>14.27ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: WF - contention</td><td align="right" headers="Event Waits" class='awrclb'>13</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.18</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.47ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>13.47ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>13.47ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache lock</td><td align="right" headers="Event Waits" class='awrnclb'>19</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.16</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.62ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>15.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.50ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>28.56ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>19.13ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: shared pool</td><td align="right" headers="Event Waits" class='awrclb'>195</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.16</td><td align="right" headers="WaitTime AvgWait" class='awrc'>832.60us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>500.75us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>54.48us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>947.03us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>631.13us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: ges resource hash list</td><td align="right" headers="Event Waits" class='awrnclb'>277</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.13</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>468.58us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>358.97us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>152.43us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>565.52us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>292.10us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path write</td><td align="right" headers="Event Waits" class='awrclb'>16</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.09</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.76ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.76ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.76ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.76ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>57.87ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>57.87ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>57.87ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>57.87ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: reap credit</td><td align="right" headers="Event Waits" class='awrclb'>2,522</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>20.03us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>19.12us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>17.64us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>20.61us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.10us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PGA memory operation</td><td align="right" headers="Event Waits" class='awrnclb'>1,603</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>29.88us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>29.67us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>28.13us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>31.21us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.18us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: object queue header operation</td><td align="right" headers="Event Waits" class='awrclb'>113</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>400.91us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>372.52us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>219.76us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>525.28us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>216.04us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache pin</td><td align="right" headers="Event Waits" class='awrnclb'>17</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.45ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>326.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.69ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>.96ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>wait list latch free</td><td align="right" headers="Event Waits" class='awrclb'>21</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.13ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.15ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.17ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>32.37us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: PS - contention</td><td align="right" headers="Event Waits" class='awrnclb'>38</td><td align="right" headers="Event %Timeouts" class='awrnc'>5.26</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>607.74us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>633.84us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>468.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>799.19us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>233.83us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block congested</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.60ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.81ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.39ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.12ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>SQL*Net break/reset to client</td><td align="right" headers="Event Waits" class='awrnclb'>150</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>100.37us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>100.37us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>100.37us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>100.37us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file operations I/O</td><td align="right" headers="Event Waits" class='awrclb'>91</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>164.26us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>183.32us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>147.93us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>218.71us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>50.05us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: FB - contention</td><td align="right" headers="Event Waits" class='awrnclb'>16</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>885.31us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>885.31us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>885.31us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>885.31us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrclb'>45</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>302.91us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>438.54us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>228.08us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>649.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>297.63us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Network</td><td headers="Wait Event" class='awrnc'>SQL*Net message to client</td><td align="right" headers="Event Waits" class='awrnclb'>1,183</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.77us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.64us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.83us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.44us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.14us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>cr request retry</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.38ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.38ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.38ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.38ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>enq: TX - index contention</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.21ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.21ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.21ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.21ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges ipc enter server mode</td><td align="right" headers="Event Waits" class='awrclb'>703</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.50us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.51us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.66us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.36us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.62us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TO - contention</td><td align="right" headers="Event Waits" class='awrnclb'>5</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>732.80us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>828.58us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>349.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>677.29us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: enqueue hash chains</td><td align="right" headers="Event Waits" class='awrclb'>19</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>154.89us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>111.09us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>18.60us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>203.57us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>130.79us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Network</td><td headers="Wait Event" class='awrnc'>IPC group service call</td><td align="right" headers="Event Waits" class='awrnclb'>93</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.57us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.37us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.77us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.97us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>843.97ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>ASM IO for non-blocking poll</td><td align="right" headers="Event Waits" class='awrclb'>66</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.12us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.12us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.12us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.12us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: TM - contention</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>503.00us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>503.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>503.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>503.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX qref latch</td><td align="right" headers="Event Waits" class='awrclb'>48</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.23us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.23us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.23us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.23us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>transaction</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>271.00us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>271.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>271.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>271.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>lock deadlock retry</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>59.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>59.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>59.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>59.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: active service list</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>43.67us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>43.67us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>43.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>43.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc buffer busy release</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>102.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>102.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>102.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>102.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrnclb'>7</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.71us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.10us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.20us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.27us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>asynch descriptor resize</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.67us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>707.11ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>AWR Flush</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.75us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.75us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.75us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.75us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>watchdog main loop</td><td align="right" headers="Event Waits" class='awrclb'>3,976</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>11,868.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2984.92ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>4.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2984.91ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2980.36ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2989.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.44ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>SQL*Net message from client</td><td align="right" headers="Event Waits" class='awrnclb'>1,180</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>762.65</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>646.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.27</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>558.54ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>24.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1092.38ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>754.96ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Execution Msg</td><td align="right" headers="Event Waits" class='awrclb'>210</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>102.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>485.95ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.04</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>485.95ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>329.31ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>642.58ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>221.52ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" headers="Event Waits" class='awrnclb'>610</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>34.80</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>57.05ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>30.45ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.06ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>59.85ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>41.57ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Msg Fragment</td><td align="right" headers="Event Waits" class='awrclb'>642</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.23</td><td align="right" headers="WaitTime AvgWait" class='awrc'>364.51us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>364.51us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>348.05us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>380.96us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>23.27us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq Credit: need buffer</td><td align="right" headers="Event Waits" class='awrnclb'>244</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>451.22us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>451.22us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>451.22us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>451.22us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12054"></a>
<h3 class="awr">Background Wait Events (Global)</h3>
<ul>
<li class="awr"> s - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]  </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
</ul>
<table border="0" class="tdiff" summary="This table displays background wait event information"><tr>
<th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 4" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%bgtime">%bg time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>9,564</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>81.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.47ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.04</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.64ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>8.26ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>538.91us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: TX - row lock contention</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>67.41</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>33.70 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.04</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>33.70 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>429.13ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>66.98 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>47.06 s</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>2,731</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>58.34</td><td align="right" headers="WaitTime AvgWait" class='awrc'>21.36ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.03</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>21.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>20.36ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>21.72ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>.96ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrnclb'>2,062</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>46.96</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>22.77ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>22.56ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>17.36ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>27.76ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7.36ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>6,203</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>32.23</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.20ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.33ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.44ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.98ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>848</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>27.79</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>32.77ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>34.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>30.35ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>37.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>5.39ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrclb'>4,470</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>24.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.38ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.38ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>469.07us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>1,969</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>13.52</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.86ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.87ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.04ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>238.08us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>536</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>13.21</td><td align="right" headers="WaitTime AvgWait" class='awrc'>24.64ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>25.94ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>12.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>39.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>19.71ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>row cache lock</td><td align="right" headers="Event Waits" class='awrnclb'>112</td><td align="right" headers="Event %Timeouts" class='awrnc'>98.21</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>11.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>98.78ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>118.80ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.64ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>230.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>158.62ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrclb'>936</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10.57</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.29ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.56ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>14.10ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.62ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrnclb'>23</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>10.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>435.85ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1367.64ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>347.10ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2388.18ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1443.26ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>13</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>9.21</td><td align="right" headers="WaitTime AvgWait" class='awrc'>708.65ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>681.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>648.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>713.65ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>45.95ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>2,066</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8.72</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.22ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.89ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>426.74us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>695</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>8.41</td><td align="right" headers="WaitTime AvgWait" class='awrc'>12.11ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>17.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.98ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>26.37ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>13.00ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>439</td><td align="right" headers="Event %Timeouts" class='awrnc'>70.16</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>18.64ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>21.27ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.06ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>35.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>20.09ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: reap credit</td><td align="right" headers="Event Waits" class='awrclb'>387,672</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7.58</td><td align="right" headers="WaitTime AvgWait" class='awrc'>19.56us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>19.55us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>18.82us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>20.28us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.03us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>11</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6.89</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>626.49ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>588.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>529.36ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>648.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>83.95ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr disk read</td><td align="right" headers="Event Waits" class='awrclb'>299</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5.43</td><td align="right" headers="WaitTime AvgWait" class='awrc'>18.15ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>11.04ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>21.12ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>14.25ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache lock</td><td align="right" headers="Event Waits" class='awrnclb'>977</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.10</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.81</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.92ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.00ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>392.28us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.61ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.52ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>gcs remastering wait for read latch</td><td align="right" headers="Event Waits" class='awrclb'>99</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.72</td><td align="right" headers="WaitTime AvgWait" class='awrc'>47.73ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>47.57ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>31.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>63.44ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>22.45ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrnclb'>117</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.24</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>36.23ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>25.78ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.33ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>47.23ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>30.34ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrclb'>322</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3.62</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.26ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.55ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>11.95ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.70ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: MGA shared context root latch</td><td align="right" headers="Event Waits" class='awrnclb'>581</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3.58</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.16ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.05ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>8.54ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Application</td><td headers="Wait Event" class='awrc'>enq: TM - contention</td><td align="right" headers="Event Waits" class='awrclb'>30</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3.51</td><td align="right" headers="WaitTime AvgWait" class='awrc'>117.16ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>112.21ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>37.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>186.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>104.99ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>reliable message</td><td align="right" headers="Event Waits" class='awrnclb'>109</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.98</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>27.32ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>35.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.60ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>66.50ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>43.77ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>gcs log flush sync</td><td align="right" headers="Event Waits" class='awrclb'>1,783</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.55</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.43ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.43ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.43ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.44ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.99us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrnclb'>19</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.44</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>128.58ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>128.30ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>126.52ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>130.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.52ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrclb'>16</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.34</td><td align="right" headers="WaitTime AvgWait" class='awrc'>146.05ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>164.77ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>134.81ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>194.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>42.37ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>DFS lock handle</td><td align="right" headers="Event Waits" class='awrnclb'>170</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.92</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.32ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>12.74ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.61ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>19.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>10.09ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrclb'>3,852</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.86</td><td align="right" headers="WaitTime AvgWait" class='awrc'>482.66us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>458.47us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>392.94us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>524.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>92.67us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch free</td><td align="right" headers="Event Waits" class='awrnclb'>3,634</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.81</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>498.12us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>490.90us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>383.42us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>598.38us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>152.00us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>Sync ASM rebalance</td><td align="right" headers="Event Waits" class='awrclb'>112</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.47</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.08ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>13.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>8.41ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>17.76ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.61ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" headers="Event Waits" class='awrnclb'>70</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>14.44ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.78ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>148.89us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>23.42ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>16.45ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>133</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.50ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.87ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.77ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>8.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.56ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>direct path write</td><td align="right" headers="Event Waits" class='awrnclb'>63</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.93</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>14.84ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>14.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>14.80ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.90ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>74.17us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: MGA shared context latch</td><td align="right" headers="Event Waits" class='awrclb'>723</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.92</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.28ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.16ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>376.98us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.95ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.11ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrnclb'>177</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.90</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.09ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.10ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.81ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.38ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>399.40us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR any worker group</td><td align="right" headers="Event Waits" class='awrclb'>249</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.88</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.53ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.53ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.53ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.53ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: call allocation</td><td align="right" headers="Event Waits" class='awrnclb'>67</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.79</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.72ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.84ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>178.11us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.51ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>9.42ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path write temp</td><td align="right" headers="Event Waits" class='awrclb'>157</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.78</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.98ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.90ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.06ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>113.70us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KSV master wait</td><td align="right" headers="Event Waits" class='awrnclb'>1,291</td><td align="right" headers="Event %Timeouts" class='awrnc'>89.16</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.76</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>588.73us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>573.70us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>300.49us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>846.92us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>386.39us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file operations I/O</td><td align="right" headers="Event Waits" class='awrclb'>606</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.76</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.25ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.21ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>377.57us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.04ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.17ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: RO - fast object reuse</td><td align="right" headers="Event Waits" class='awrnclb'>227</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.70</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.09ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.33ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.87ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.79ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.06ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc buffer busy release</td><td align="right" headers="Event Waits" class='awrclb'>119</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.69</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.83ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.69ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>202.42us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CF - contention</td><td align="right" headers="Event Waits" class='awrnclb'>39</td><td align="right" headers="Event %Timeouts" class='awrnc'>66.67</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.56</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>14.26ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>20.81ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>40.48ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>27.81ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CO - master slave det</td><td align="right" headers="Event Waits" class='awrclb'>13</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.53</td><td align="right" headers="WaitTime AvgWait" class='awrc'>40.39ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>40.39ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>40.39ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>40.39ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrnclb'>14</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.52</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>37.22ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>29.26ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.38ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>57.13ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>39.42ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ASM file metadata operation</td><td align="right" headers="Event Waits" class='awrclb'>3,087</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.51</td><td align="right" headers="WaitTime AvgWait" class='awrc'>163.68us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>163.25us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>129.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>197.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>48.44us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PGA memory operation</td><td align="right" headers="Event Waits" class='awrnclb'>1,776</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.43</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>242.13us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>233.74us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>125.78us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>341.69us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>152.67us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: gcs resource hash</td><td align="right" headers="Event Waits" class='awrclb'>845</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.34</td><td align="right" headers="WaitTime AvgWait" class='awrc'>405.55us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>381.52us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>195.25us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>567.80us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>263.43us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache pin</td><td align="right" headers="Event Waits" class='awrnclb'>972</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.33</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>342.37us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>342.45us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>334.56us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>350.34us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>11.16us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR all worker groups</td><td align="right" headers="Event Waits" class='awrclb'>58</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.33</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.64ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.64ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.64ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.64ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: MGA heap latch</td><td align="right" headers="Event Waits" class='awrnclb'>437</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.31</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>716.13us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>923.16us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>187.62us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.04ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" headers="Event Waits" class='awrclb'>15</td><td align="right" headers="Event %Timeouts" class='awrc'>40.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.29</td><td align="right" headers="WaitTime AvgWait" class='awrc'>19.64ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>20.64ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>15.62ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>25.67ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>7.10ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>AQ: RAC AQ Network</td><td align="right" headers="Event Waits" class='awrnclb'>14,859</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.27</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>18.40us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>18.40us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>18.09us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>18.70us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>433.88ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CGS wait for IPC msg</td><td align="right" headers="Event Waits" class='awrclb'>15,846</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.27</td><td align="right" headers="WaitTime AvgWait" class='awrc'>17.25us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>17.24us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>16.48us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>18.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.08us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>oracle thread bootstrap</td><td align="right" headers="Event Waits" class='awrnclb'>11</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.23</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>21.06ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>21.18ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>19.86ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>22.49ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.86ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>read by other session</td><td align="right" headers="Event Waits" class='awrclb'>20</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.23</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.43ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.10ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.29ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>14.91ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.22ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>oradebug request completion</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.19</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>97.02ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>97.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>94.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>99.33ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.26ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: FB - contention</td><td align="right" headers="Event Waits" class='awrclb'>16</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.18</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.36ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.80ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>737.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>12.87ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.58ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Network</td><td headers="Wait Event" class='awrnc'>IPC group service call</td><td align="right" headers="Event Waits" class='awrnclb'>1,845</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.14</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>73.56us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>73.81us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>62.93us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>84.69us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>15.39us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>53.83ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>53.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.91ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>105.75ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>73.42ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Join ACK</td><td align="right" headers="Event Waits" class='awrnclb'>70</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.52ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.54ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.46ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>119.70us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>233</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>302.51us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>629.78us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>284.74us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>487.97us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: messages</td><td align="right" headers="Event Waits" class='awrnclb'>325</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>185.57us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>222.34us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>139.92us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>304.76us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>116.56us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS operation: data query</td><td align="right" headers="Event Waits" class='awrclb'>44</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.23ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.23ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.14ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.32ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>128.18us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ksxr poll remote instances</td><td align="right" headers="Event Waits" class='awrnclb'>2,297</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>20.59us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>20.59us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>20.14us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>21.04us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>634.33ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS operation: data update</td><td align="right" headers="Event Waits" class='awrclb'>50</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>925.18us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>925.18us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>792.28us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.06ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>187.95us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: PS - contention</td><td align="right" headers="Event Waits" class='awrnclb'>65</td><td align="right" headers="Event %Timeouts" class='awrnc'>38.46</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>681.08us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>683.10us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>551.36us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>814.84us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>186.31us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>IPC send completion sync</td><td align="right" headers="Event Waits" class='awrclb'>1,527</td><td align="right" headers="Event %Timeouts" class='awrc'>97.58</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>27.98us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>27.96us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>25.40us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>30.51us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.61us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges inquiry response</td><td align="right" headers="Event Waits" class='awrnclb'>56</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>714.45us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>745.59us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>527.56us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>308.34us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>49</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>739.49us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>719.11us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>671.57us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>766.66us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>67.24us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>libcache interrupt action by LCK</td><td align="right" headers="Event Waits" class='awrnclb'>12,899</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.72us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.71us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.60us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.82us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>155.79ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR worker group ordering</td><td align="right" headers="Event Waits" class='awrclb'>9</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.79ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.79ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.79ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.79ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: DR - contention</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>30.96ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>30.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>30.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>30.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>5</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.57ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.86ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.38ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.33ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>670.16us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>os thread creation</td><td align="right" headers="Event Waits" class='awrnclb'>11</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.00ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.92ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>135.84us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: DW - contention</td><td align="right" headers="Event Waits" class='awrclb'>7</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.58ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.41ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.28ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.55ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.60ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: gc element</td><td align="right" headers="Event Waits" class='awrnclb'>53</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>264.45us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>274.37us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>243.46us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>305.28us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>43.71us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: WF - contention</td><td align="right" headers="Event Waits" class='awrclb'>16</td><td align="right" headers="Event %Timeouts" class='awrc'>12.50</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>803.06us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>799.30us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>795.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>803.60us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.08us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc index operation</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.00ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>12.00ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>12.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>12.00ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>ASM IO for non-blocking poll</td><td align="right" headers="Event Waits" class='awrclb'>1,105</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.54us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.38us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>8.09us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.68us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.83us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file async I/O submit</td><td align="right" headers="Event Waits" class='awrnclb'>1,587</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.51us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.39us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.73us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>8.05us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.35us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS initialization</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.12ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.12ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.12ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" headers="Event Waits" class='awrnclb'>70</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>134.23us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>133.81us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>131.96us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>135.65us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.61us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: SM -  contention</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.21ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.21ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.21ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.21ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: WT - contention</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.77ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.77ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.77ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.77ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.75ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>928.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>872.92us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TA - contention</td><td align="right" headers="Event Waits" class='awrnclb'>5</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>938.40us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>933.58us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>909.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>34.06us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>asynch descriptor resize</td><td align="right" headers="Event Waits" class='awrclb'>554</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>8.10us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>8.06us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.71us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.42us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.92us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: cache buffers chains</td><td align="right" headers="Event Waits" class='awrnclb'>20</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>190.05us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>198.10us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>182.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>214.20us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>22.77us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block congested</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.70ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.70ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.70ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Network</td><td headers="Wait Event" class='awrnc'>SQL*Net message to client</td><td align="right" headers="Event Waits" class='awrnclb'>515</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.16us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.04us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.78us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.31us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.20us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant congested</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.98ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.98ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TD - KTF dump entries</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>.97ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>808.75us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>324.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.29ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>685.54us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Commit</td><td headers="Wait Event" class='awrc'>log file sync</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.77ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.77ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2.77ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.77ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: cache buffers lru chain</td><td align="right" headers="Event Waits" class='awrnclb'>7</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>373.71us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>222.17us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>434.33us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>300.05us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>CSS operation: action</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>614.25us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>614.25us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>614.25us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>614.25us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TT - contention</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.35ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.35ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.35ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>name-service call wait</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>585.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>585.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>558.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>611.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>37.48us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: MW - contention</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>788.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>788.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>747.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>829.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>57.98us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TO - contention</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>612.50us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>612.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>612.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>612.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>7</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>167.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>100.33us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>193.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>131.99us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>cursor: pin S wait on X</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.11ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.11ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.11ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: query</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>163.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>163.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>163.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>163.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR wait for redo copy</td><td align="right" headers="Event Waits" class='awrclb'>10</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>88.40us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>85.08us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>68.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>101.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>23.45us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: AF - task serialization</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>854.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>854.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>854.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>854.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>GCR CSS group query</td><td align="right" headers="Event Waits" class='awrclb'>44</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.02us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>13.02us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>12.73us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.32us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>417.84ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>GCR CSS group update</td><td align="right" headers="Event Waits" class='awrnclb'>46</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.61us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.61us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9.57us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>11.65us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.48us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>enq: TX - index contention</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>404.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>404.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>404.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>404.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: shared pool</td><td align="right" headers="Event Waits" class='awrnclb'>5</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>68.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>75.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>63.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>88.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>17.68us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>80.25us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>80.25us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>11.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>149.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>97.93us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current split</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>244.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>244.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>244.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>244.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>kjctssqmg: quick message send wait</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>240.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>240.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>240.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>240.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: kjci process context latch</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>50.33us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>43.75us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>24.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>63.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>27.93us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges enter server mode</td><td align="right" headers="Event Waits" class='awrclb'>31</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.55us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.55us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.55us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.55us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>lock deadlock retry</td><td align="right" headers="Event Waits" class='awrnclb'>9</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.11us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>12.79us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>11.57us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.72us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrclb'>13</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.31us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.80us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>8.60us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.96us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>row cache mutex</td><td align="right" headers="Event Waits" class='awrnclb'>5</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>13.60us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>12.67us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>8.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>17.33us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.60us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>undo_retention publish retry</td><td align="right" headers="Event Waits" class='awrclb'>5</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>.00ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>buffer deadlock</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>12.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>12.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>12.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache: mutex X</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>20.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>20.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>20.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>20.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>gcs resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.50us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc quiesce</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>13.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>13.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>AWR Flush</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.67us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.67us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Idle Wait</td><td align="right" headers="Event Waits" class='awrclb'>74</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>383,953.42</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5188.56 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>201.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5188.56 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5167.91 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5209.21 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>29.21 s</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Space Manager: slave idle wait</td><td align="right" headers="Event Waits" class='awrnclb'>18,148</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>76,784.32</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4231.01ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>40.24</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4238.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4111.94ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4365.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>179.63ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>rdbms ipc message</td><td align="right" headers="Event Waits" class='awrclb'>62,742</td><td align="right" headers="Event %Timeouts" class='awrc'>56.07</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>59,991.82</td><td align="right" headers="WaitTime AvgWait" class='awrc'>956.17ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>31.44</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>956.18ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>954.37ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>957.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.55ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>class slave wait</td><td align="right" headers="Event Waits" class='awrnclb'>18,364</td><td align="right" headers="Event %Timeouts" class='awrnc'>79.43</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>10,371.07</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>564.75ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>5.44</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>564.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>533.37ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>596.44ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>44.60ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>LMS CR slave timer</td><td align="right" headers="Event Waits" class='awrclb'>893,166</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>8,907.81</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.97ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>4.67</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.97ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.98ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.07us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>gcs yield cpu</td><td align="right" headers="Event Waits" class='awrnclb'>318,509</td><td align="right" headers="Event %Timeouts" class='awrnc'>99.65</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8,862.30</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>27.82ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>4.64</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>27.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>26.49ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>29.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.99ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>gcs remote message</td><td align="right" headers="Event Waits" class='awrclb'>9,537,602</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7,768.70</td><td align="right" headers="WaitTime AvgWait" class='awrc'>814.53us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>4.07</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>815.83us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>782.83us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>848.84us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>46.68us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>ges remote message</td><td align="right" headers="Event Waits" class='awrnclb'>93,390</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5,961.51</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>63.83ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>3.12</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>63.84ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>63.34ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>64.33ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>695.63us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>LGWR worker group idle</td><td align="right" headers="Event Waits" class='awrclb'>1,070</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5,383.21</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5031.04ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>2.82</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2507.67ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2507.67ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2507.67ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>wait for unread message on broadcast channel</td><td align="right" headers="Event Waits" class='awrnclb'>2,285</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.04</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4,473.47</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1957.76ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>2.34</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1957.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1956.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1958.79ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.46ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>pmon timer</td><td align="right" headers="Event Waits" class='awrclb'>1,000</td><td align="right" headers="Event %Timeouts" class='awrc'>99.50</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,988.73</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2988.73ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>1.57</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2988.73ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2977.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2999.80ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>15.66ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>GCR sleep</td><td align="right" headers="Event Waits" class='awrnclb'>9,898</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,974.55</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>300.52ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>1.56</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>300.52ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>300.47ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>300.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>75.75us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>DIAG idle wait</td><td align="right" headers="Event Waits" class='awrclb'>25,800</td><td align="right" headers="Event %Timeouts" class='awrc'>62.55</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,958.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>114.66ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>1.55</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>114.66ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>113.45ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>115.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.72ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Data Guard: Gap Manager</td><td align="right" headers="Event Waits" class='awrnclb'>26</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,560.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>60.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.82</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>51.78us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Streams AQ: qmn coordinator idle wait</td><td align="right" headers="Event Waits" class='awrclb'>108</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,512.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.79</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>14.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>14.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>14.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>7.84us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Streams AQ: qmn slave idle wait</td><td align="right" headers="Event Waits" class='awrnclb'>54</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,511.80</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>28.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.79</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>28.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>27.99 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>28.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.44ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>shared server idle wait</td><td align="right" headers="Event Waits" class='awrclb'>0</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,500.28</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.79</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>smon timer</td><td align="right" headers="Event Waits" class='awrnclb'>5</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,500.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>300.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.79</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>83.56us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>OFS idle</td><td align="right" headers="Event Waits" class='awrclb'>498</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,494.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3000.01ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3000.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2999.99ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3000.03ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>24.04us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>ASM cluster membership changes</td><td align="right" headers="Event Waits" class='awrnclb'>852</td><td align="right" headers="Event %Timeouts" class='awrnc'>79.93</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,491.30</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1750.35ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1750.35ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1750.35ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1750.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>917.78ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" headers="Event Waits" class='awrclb'>24</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,491.15</td><td align="right" headers="WaitTime AvgWait" class='awrc'>62.13 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>62.13 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>61.87 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>62.39 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>365.07ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>pman timer</td><td align="right" headers="Event Waits" class='awrnclb'>497</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,490.85</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2999.71ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2999.71ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2999.67ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2999.74ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>49.45us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PING</td><td align="right" headers="Event Waits" class='awrclb'>1,398</td><td align="right" headers="Event %Timeouts" class='awrc'>19.81</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,490.78</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1066.37ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1066.52ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1056.89ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1076.15ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>13.62ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>ASM background timer</td><td align="right" headers="Event Waits" class='awrnclb'>2,962</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,490.63</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>503.25ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>503.25ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>502.89ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>503.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>513.72us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>heartbeat redo informer</td><td align="right" headers="Event Waits" class='awrclb'>1,490</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,490.17</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1000.12ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1000.12ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1000.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1000.12ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>906.06ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>VKRM Idle</td><td align="right" headers="Event Waits" class='awrnclb'>0</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,490.14</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>lreg timer</td><td align="right" headers="Event Waits" class='awrclb'>496</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,489.41</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3002.85ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3002.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3002.79ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3002.91ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>88.34us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Streams AQ: waiting for time management or cleanup tasks</td><td align="right" headers="Event Waits" class='awrnclb'>0</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,485.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>SCM slave idle</td><td align="right" headers="Event Waits" class='awrclb'>15,056</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,480.21</td><td align="right" headers="WaitTime AvgWait" class='awrc'>98.31ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>98.31ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>97.84ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>98.79ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>670.03us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>AQPC idle</td><td align="right" headers="Event Waits" class='awrnclb'>49</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,470.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>30.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.77</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>78.14us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>dispatcher timer</td><td align="right" headers="Event Waits" class='awrclb'>24</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,440.14</td><td align="right" headers="WaitTime AvgWait" class='awrc'>60.01 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.75</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>778.17us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Data Guard: Timer</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,200.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>600.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.63</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>600.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>52.33us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>SQL*Net message from client</td><td align="right" headers="Event Waits" class='awrclb'>516</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>14.64</td><td align="right" headers="WaitTime AvgWait" class='awrc'>28.37ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>29.85ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>407.32us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>59.29ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>41.64ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Parse Reply</td><td align="right" headers="Event Waits" class='awrnclb'>70</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.59</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>36.94ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>34.33ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>22.94ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>45.72ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>16.11ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Execute Reply</td><td align="right" headers="Event Waits" class='awrclb'>1,225</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.83</td><td align="right" headers="WaitTime AvgWait" class='awrc'>678.93us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>403.41us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>12.90ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.84ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" headers="Event Waits" class='awrnclb'>339</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.24</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>706.99us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>705.22us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>695.04us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>715.40us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>14.40us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>RMA: IPC0 completion sync</td><td align="right" headers="Event Waits" class='awrclb'>2,211</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>29.88us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>29.89us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>24.20us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>35.59us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.05us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>heartbeat monitor sleep</td><td align="right" headers="Event Waits" class='awrnclb'>128</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.07us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.53us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.12us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>13.95us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7.66us</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12055"></a>
<h3 class="awr">Wait Event Histogram (Global)</h3>
<ul>
<li class="awr"> When % of Total Waits is  0.0 the count is displayed in parenthesis</li>
</ul>
<table border="0" class="tdiff" summary="This table displays wait event histogram information"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 22" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col" id="&lt;1us"> &lt;1us</th><th class="awrbg" scope="col" id="&lt;2us"> &lt;2us</th><th class="awrbg" scope="col" id="&lt;4us"> &lt;4us</th><th class="awrbg" scope="col" id="&lt;8us"> &lt;8us</th><th class="awrbg" scope="col" id="&lt;16us"> &lt;16us</th><th class="awrbg" scope="col" id="&lt;32us"> &lt;32us</th><th class="awrbg" scope="col" id="&lt;64us"> &lt;64us</th><th class="awrbg" scope="col" id="&lt;128us"> &lt;128us</th><th class="awrbg" scope="col" id="&lt;256us"> &lt;256us</th><th class="awrbg" scope="col" id="&lt;512us"> &lt;512us</th><th class="awrbg" scope="col" id="&lt;1ms"> &lt;1ms</th><th class="awrbg" scope="col" id="&lt;2ms"> &lt;2ms</th><th class="awrbg" scope="col" id="&lt;4ms"> &lt;4ms</th><th class="awrbg" scope="col" id="&lt;8ms"> &lt;8ms</th><th class="awrbg" scope="col" id="&lt;16ms"> &lt;16ms</th><th class="awrbg" scope="col" id="&lt;32ms"> &lt;32ms</th><th class="awrbg" scope="col" id="&lt;64ms"> &lt;64ms</th><th class="awrbg" scope="col" id="&lt;128ms"> &lt;128ms</th><th class="awrbg" scope="col" id="&lt;256ms"> &lt;256ms</th><th class="awrbg" scope="col" id="&lt;512ms"> &lt;512ms</th><th class="awrbg" scope="col" id="&lt;1s"> &lt;1s</th><th class="awrbg" scope="col" id="&gt;=1s"> &gt;=1s</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>14.7K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>32.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>64.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>1114</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>67.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>26.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>3050</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>16.9</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>18.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>33.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>71.4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>15.6K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>51.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>42.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.0(4)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS initialization</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: action</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data query</td><td align="right" class='awrnc'>44</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>31.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>40.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data update</td><td align="right" class='awrc'>50</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>78.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: query</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DFS lock handle</td><td align="right" class='awrc'>170</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>54.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>22.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>3894</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>89.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>2139</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>31.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>24.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>697</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>43.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>17.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>44</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>95.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>46</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>87.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>4410</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>29.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>1912</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>25.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>22.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>33.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>1619</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>80.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>502</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>43.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>1263</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>34.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>29.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR all worker groups</td><td align="right" class='awrnc'>55</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>49.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR any worker group</td><td align="right" class='awrc'>249</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>55.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>16.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group ordering</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>3381</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>38.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>28.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>70</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>45.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>31.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>70</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>52.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>140</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>22.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>385.2K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>32.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>64.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.0(101)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.0(51)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.0(29)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.0(5)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX qref latch</td><td align="right" class='awrc'>48</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>87.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net break/reset to client</td><td align="right" class='awrnc'>148</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>32.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>29.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message to client</td><td align="right" class='awrc'>1698</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>66.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>19.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>112</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>22.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>asynch descriptor resize</td><td align="right" class='awrc'>556</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>83.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer deadlock</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>529</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>23.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>28.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>6531</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>36.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>16.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cr request retry</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cursor: pin S</td><td align="right" class='awrc'>1732</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>97.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cursor: pin S wait on X</td><td align="right" class='awrnc'>265</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>41.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>57.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>1474</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>59.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>929.4K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>26.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>20.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.0(18)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>1806</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>49.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>22.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>472</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>35.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>33.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>2.3M</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.0(119)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>31.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>42.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>79</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>26.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>24.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>157</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>48.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>43.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: AF - task serialization</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>38</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>47.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CO - master slave det</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: DR - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: DW - contention</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>57.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>33</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>39.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>39.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>34</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>32.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>32.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>23.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: MW - contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: PS - contention</td><td align="right" class='awrnc'>103</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>49.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>36.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>227</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>66.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: SM -  contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TA - contention</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TD - KTF dump entries</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>31</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>35.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>25.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>3.2</td></tr>
<tr><td scope="row" class='awrnc'>enq: TO - contention</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TT - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TX - index contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TX - row lock contention</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>29</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>48.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: WT - contention</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>919</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>17.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>35.9</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>6.2</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>120</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>26.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>813</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>64.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.6</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>198</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>23.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>24.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>231</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>31.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>1.7</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>302</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>31.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>28.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>16.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.3</td></tr>
<tr><td scope="row" class='awrnc'>gc cr failure</td><td align="right" class='awrnc'>82</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>34.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>4745</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>24.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>27.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>23.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.3</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>707K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.0(10)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.0(61)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.0(49)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(134)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>21.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.8</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>38</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>63.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>792K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.0(11)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.0(19)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.0(15)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(37)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.0(178)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>21.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>3.6</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>279</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>37.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>10.4</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>733</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>25.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>35.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.1</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>1090</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>49.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.3</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>88.9</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>188</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>1510</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>40.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.3</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current multi block request</td><td align="right" class='awrc'>53</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>35.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>24.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current split</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc index operation</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc quiesce</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc remaster</td><td align="right" class='awrc'>81</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>42.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>3.7</td></tr>
<tr><td scope="row" class='awrnc'>gcs drm freeze in enter server mode</td><td align="right" class='awrnc'>125</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>81.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>1451</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>20.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering wait for read latch</td><td align="right" class='awrnc'>99</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>29.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs resource directory to be unfrozen</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges enter server mode</td><td align="right" class='awrnc'>31</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>87.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges inquiry response</td><td align="right" class='awrc'>56</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>71.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges ipc enter server mode</td><td align="right" class='awrnc'>703</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>81.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" class='awrnc'>20</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>55.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjctssqmg: quick message send wait</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>2270</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>53.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>40.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>10.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>16.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>24.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>436</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context latch</td><td align="right" class='awrnc'>724</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>17.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>22.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>13.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>588</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>20.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: active service list</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>39.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>27.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.0(18)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.0(17)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(12)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>1544</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>20.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>24.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: call allocation</td><td align="right" class='awrc'>258</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>17.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>31.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>19</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>31.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>8195</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>16.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>1985</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>22.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>279</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: kjci process context latch</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: messages</td><td align="right" class='awrc'>325</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>20.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>17.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>23.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>112</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>17.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: shared pool</td><td align="right" class='awrc'>202</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>17.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>24.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>libcache interrupt action by LCK</td><td align="right" class='awrnc'>12.9K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>92.3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(5)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache load lock</td><td align="right" class='awrc'>459</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>13.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>57.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache lock</td><td align="right" class='awrnc'>996</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>91.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.1</td></tr>
<tr><td scope="row" class='awrc'>library cache pin</td><td align="right" class='awrc'>989</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>89.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache: bucket mutex X</td><td align="right" class='awrnc'>557</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>31.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>2185</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>26.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>62.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>37.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>2079</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>32.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>13.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>20.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>17.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service call wait</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>31.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>43.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>oradebug request completion</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>os thread creation</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>72.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>read by other session</td><td align="right" class='awrnc'>1445</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>23.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>109</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>29.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>30.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>25.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.9</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>290</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.3</td></tr>
<tr><td scope="row" class='awrc'>row cache mutex</td><td align="right" class='awrc'>260</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>47.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>7.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>transaction</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>undo_retention publish retry</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>wait list latch free</td><td align="right" class='awrnc'>21</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="639"></a>
<h2 class="awr">
Global Activity Load Profile
</h2>
<ul>
<li class="awr"><a class="awr" href="#12016">System Statistics</a></li>
<li class="awr"><a class="awr" href="#12017">System Statistics - Per Second</a></li>
<li class="awr"><a class="awr" href="#12018">System Statistics - Per Transaction</a></li>
<li class="awr"><a class="awr" href="#12030">SysStat and Global Messaging  - RAC</a></li>
<li class="awr"><a class="awr" href="#12031">SysStat and Global Messaging (per Sec)- RAC</a></li>
<li class="awr"><a class="awr" href="#12032">SysStat and Global Messaging (per Tx)- RAC</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12016"></a>
<h3 class="awr">System Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">Redo Size (k)</th><th class="awrbg" scope="col">Block Changes</th><th class="awrbg" scope="col">User Calls</th><th class="awrbg" scope="col">Execs</th><th class="awrbg" scope="col">Parses</th><th class="awrbg" scope="col">Logons</th><th class="awrbg" scope="col">Txns</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>3,180,963,459</td><td align="right" class='awrc'>24,480,158</td><td align="right" class='awrc'>3,364</td><td align="right" class='awrc'>9,865</td><td align="right" class='awrc'>40,993</td><td align="right" class='awrc'>1,959</td><td align="right" class='awrc'>38,595,238</td><td align="right" class='awrc'>9,648</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>252</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>1,249,870,563</td><td align="right" class='awrnc'>35,572,455</td><td align="right" class='awrnc'>3,234</td><td align="right" class='awrnc'>9,504</td><td align="right" class='awrnc'>39,971</td><td align="right" class='awrnc'>1,654</td><td align="right" class='awrnc'>15,393,234</td><td align="right" class='awrnc'>4,482</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>254</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>4,430,834,022</td><td align="right" class='awrct'>60,052,613</td><td align="right" class='awrct'>6,598</td><td align="right" class='awrct'>19,369</td><td align="right" class='awrct'>80,964</td><td align="right" class='awrct'>3,613</td><td align="right" class='awrct'>53,988,472</td><td align="right" class='awrct'>14,130</td><td align="right" class='awrct'>84</td><td align="right" class='awrct'>506</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>2,215,417,011</td><td align="right" class='awrnc'>30,026,307</td><td align="right" class='awrnc'>3,299</td><td align="right" class='awrnc'>9,685</td><td align="right" class='awrnc'>40,482</td><td align="right" class='awrnc'>1,807</td><td align="right" class='awrnc'>26,994,236</td><td align="right" class='awrnc'>7,065</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>253</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>1,365,488,882</td><td align="right" class='awrc'>7,843,438</td><td align="right" class='awrc'>92</td><td align="right" class='awrc'>255</td><td align="right" class='awrc'>723</td><td align="right" class='awrc'>216</td><td align="right" class='awrc'>16,406,294</td><td align="right" class='awrc'>3,653</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>1</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12017"></a>
<h3 class="awr">System Statistics - Per Second</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics - Per Second"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads/s</th><th class="awrbg" scope="col">Physical Reads/s</th><th class="awrbg" scope="col">Physical Writes/s</th><th class="awrbg" scope="col">Redo Size (k)/s</th><th class="awrbg" scope="col">Block Changes/s</th><th class="awrbg" scope="col">User Calls/s</th><th class="awrbg" scope="col">Execs/s</th><th class="awrbg" scope="col">Parses/s</th><th class="awrbg" scope="col">Logons/s</th><th class="awrbg" scope="col">Txns/s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>4,221,808.00</td><td align="right" class='awrc'>32,490.32</td><td align="right" class='awrc'>4.46</td><td align="right" class='awrc'>13.09</td><td align="right" class='awrc'>54.41</td><td align="right" class='awrc'>2.60</td><td align="right" class='awrc'>51,224.00</td><td align="right" class='awrc'>12.80</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.33</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>1,658,673.99</td><td align="right" class='awrnc'>47,207.37</td><td align="right" class='awrnc'>4.29</td><td align="right" class='awrnc'>12.61</td><td align="right" class='awrnc'>53.04</td><td align="right" class='awrnc'>2.19</td><td align="right" class='awrnc'>20,428.00</td><td align="right" class='awrnc'>5.95</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.34</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>5,880,481.99</td><td align="right" class='awrct'>79,697.69</td><td align="right" class='awrct'>8.76</td><td align="right" class='awrct'>25.71</td><td align="right" class='awrct'>107.45</td><td align="right" class='awrct'>4.79</td><td align="right" class='awrct'>71,652.00</td><td align="right" class='awrct'>18.75</td><td align="right" class='awrct'>0.11</td><td align="right" class='awrct'>0.67</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>2,940,241.00</td><td align="right" class='awrnc'>39,848.85</td><td align="right" class='awrnc'>4.38</td><td align="right" class='awrnc'>12.85</td><td align="right" class='awrnc'>53.73</td><td align="right" class='awrnc'>2.40</td><td align="right" class='awrnc'>35,826.00</td><td align="right" class='awrnc'>9.38</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.34</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>1,812,409.44</td><td align="right" class='awrc'>10,406.53</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>21,776.06</td><td align="right" class='awrc'>4.85</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12018"></a>
<h3 class="awr">System Statistics - Per Transaction</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics - Per Transaction"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads/tx</th><th class="awrbg" scope="col">Physical Reads/tx</th><th class="awrbg" scope="col">Physical Writes/tx</th><th class="awrbg" scope="col">Redo Size (k)/tx</th><th class="awrbg" scope="col">Block Changes/tx</th><th class="awrbg" scope="col">User Calls/tx</th><th class="awrbg" scope="col">Execs/tx</th><th class="awrbg" scope="col">Parses/tx</th><th class="awrbg" scope="col">Logons/tx</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>12,622,870.87</td><td align="right" class='awrc'>97,143.48</td><td align="right" class='awrc'>13.35</td><td align="right" class='awrc'>39.15</td><td align="right" class='awrc'>162.67</td><td align="right" class='awrc'>7.77</td><td align="right" class='awrc'>153,155.71</td><td align="right" class='awrc'>38.29</td><td align="right" class='awrc'>0.16</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>4,920,750.25</td><td align="right" class='awrnc'>140,049.04</td><td align="right" class='awrnc'>12.73</td><td align="right" class='awrnc'>37.42</td><td align="right" class='awrnc'>157.37</td><td align="right" class='awrnc'>6.51</td><td align="right" class='awrnc'>60,603.28</td><td align="right" class='awrnc'>17.65</td><td align="right" class='awrnc'>0.17</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>8,771,810.56</td><td align="right" class='awrct'>118,596.26</td><td align="right" class='awrct'>13.04</td><td align="right" class='awrct'>38.28</td><td align="right" class='awrct'>160.02</td><td align="right" class='awrct'>7.14</td><td align="right" class='awrct'>106,879.49</td><td align="right" class='awrct'>27.97</td><td align="right" class='awrct'>0.17</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12030"></a>
<h3 class="awr">SysStat and Global Messaging  - RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging  - RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceived">Blocks Received</th>
<th class="awrbg" colspan=" 2" id="BlocksServed">Blocks Served</th>
<th class="awrbg" colspan=" 2" id="CPU(seconds)">CPU (seconds)</th>
<th class="awrbg" colspan=" 6" id="Messages">Messages</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent </th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost">Lost</th><th class="awrbg" scope="col" id="Failure">Failure</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceived GCCurrent" class='awrclb'>3,261</td><td align="right" headers="BlocksReceived GCCR" class='awrc'>1,271</td><td align="right" headers="BlocksServed GCCurrent" class='awrclb'>1,678</td><td align="right" headers="BlocksServed GCCR" class='awrc'>363</td><td align="right" headers="CPU(seconds) GC" class='awrclb'>&#160;</td><td align="right" headers="CPU(seconds) IPC" class='awrc'>0</td><td align="right" headers="Messages GCSReceived" class='awrclb'>24,525,390</td><td align="right" headers="Messages GESReceived" class='awrc'>17,520</td><td align="right" headers="Messages GCSSent" class='awrc'>28,115,231</td><td align="right" headers="Messages GESSent" class='awrc'>7,667</td><td align="right" headers="Messages SentDirect" class='awrc'>482,014</td><td align="right" headers="Messages SentIndir" class='awrc'>10,592,684</td><td align="right" headers="GCBlks Lost" class='awrclb'>1,108</td><td align="right" headers="GCCR Failure" class='awrcbb'>9</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceived GCCurrent" class='awrnclb'>1,289</td><td align="right" headers="BlocksReceived GCCR" class='awrnc'>339</td><td align="right" headers="BlocksServed GCCurrent" class='awrnclb'>4,041</td><td align="right" headers="BlocksServed GCCR" class='awrnc'>1,410</td><td align="right" headers="CPU(seconds) GC" class='awrnclb'>&#160;</td><td align="right" headers="CPU(seconds) IPC" class='awrnc'>0</td><td align="right" headers="Messages GCSReceived" class='awrnclb'>27,945,671</td><td align="right" headers="Messages GESReceived" class='awrnc'>7,457</td><td align="right" headers="Messages GCSSent" class='awrnc'>24,365,945</td><td align="right" headers="Messages GESSent" class='awrnc'>17,455</td><td align="right" headers="Messages SentDirect" class='awrnc'>265,122</td><td align="right" headers="Messages SentIndir" class='awrnc'>6,955,473</td><td align="right" headers="GCBlks Lost" class='awrnclb'>434</td><td align="right" headers="GCCR Failure" class='awrncbb'>73</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>4,550</td><td align="right" class='awrct'>1,610</td><td align="right" class='awrclbt'>5,719</td><td align="right" class='awrct'>1,773</td><td align="right" class='awrclbt'>0</td><td align="right" class='awrct'>0</td><td align="right" class='awrclbt'>52,471,061</td><td align="right" class='awrct'>24,977</td><td align="right" class='awrct'>52,481,176</td><td align="right" class='awrct'>25,122</td><td align="right" class='awrct'>747,136</td><td align="right" class='awrct'>17,548,157</td><td align="right" class='awrclbt'>1,542</td><td align="right" class='awrcbbt'>82</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>2,275</td><td align="right" class='awrnc'>805</td><td align="right" class='awrnclb'>2,860</td><td align="right" class='awrnc'>887</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>26,235,531</td><td align="right" class='awrnc'>12,489</td><td align="right" class='awrnc'>26,240,588</td><td align="right" class='awrnc'>12,561</td><td align="right" class='awrnc'>373,568</td><td align="right" class='awrnc'>8,774,079</td><td align="right" class='awrnclb'>771</td><td align="right" class='awrncbb'>41</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>1,394</td><td align="right" class='awrc'>659</td><td align="right" class='awrclb'>1,671</td><td align="right" class='awrc'>740</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>2,418,504</td><td align="right" class='awrc'>7,116</td><td align="right" class='awrc'>2,651,146</td><td align="right" class='awrc'>6,921</td><td align="right" class='awrc'>153,366</td><td align="right" class='awrc'>2,571,897</td><td align="right" class='awrclb'>477</td><td align="right" class='awrcbb'>45</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12031"></a>
<h3 class="awr">SysStat and Global Messaging (per Sec)- RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging (per Sec)- RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceivedPerSecond">Blocks Received Per Second</th>
<th class="awrbg" colspan=" 2" id="BlocksServedperSecond">Blocks Served per Second</th>
<th class="awrbg" colspan=" 2" id="CPUsecondsperSecond">CPU seconds per Second</th>
<th class="awrbg" colspan=" 6" id="MessagesPerSecond">Messages Per Second</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent</th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost/s">Lost/s</th><th class="awrbg" scope="col" id="Fail/s">Fail/s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceivedPerSecond GCCurrent" class='awrclb'>4.33</td><td align="right" headers="BlocksReceivedPerSecond GCCR" class='awrc'>1.69</td><td align="right" headers="BlocksServedperSecond GCCurrent" class='awrclb'>2.23</td><td align="right" headers="BlocksServedperSecond GCCR" class='awrc'>0.48</td><td align="right" headers="CPUsecondsperSecond GC" class='awrclb'>&#160;</td><td align="right" headers="CPUsecondsperSecond IPC" class='awrc'>0.00</td><td align="right" headers="MessagesPerSecond GCSReceived" class='awrclb'>32,550.35</td><td align="right" headers="MessagesPerSecond GESReceived" class='awrc'>23.25</td><td align="right" headers="MessagesPerSecond GCSSent" class='awrc'>37,314.83</td><td align="right" headers="MessagesPerSecond GESSent" class='awrc'>10.18</td><td align="right" headers="MessagesPerSecond SentDirect" class='awrc'>639.73</td><td align="right" headers="MessagesPerSecond SentIndir" class='awrc'>14,058.72</td><td align="right" headers="GCBlks Lost/s" class='awrclb'>1</td><td align="right" headers="GCCR Fail/s" class='awrcbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceivedPerSecond GCCurrent" class='awrnclb'>1.71</td><td align="right" headers="BlocksReceivedPerSecond GCCR" class='awrnc'>0.45</td><td align="right" headers="BlocksServedperSecond GCCurrent" class='awrnclb'>5.36</td><td align="right" headers="BlocksServedperSecond GCCR" class='awrnc'>1.87</td><td align="right" headers="CPUsecondsperSecond GC" class='awrnclb'>&#160;</td><td align="right" headers="CPUsecondsperSecond IPC" class='awrnc'>0.00</td><td align="right" headers="MessagesPerSecond GCSReceived" class='awrnclb'>37,086.05</td><td align="right" headers="MessagesPerSecond GESReceived" class='awrnc'>9.90</td><td align="right" headers="MessagesPerSecond GCSSent" class='awrnc'>32,335.48</td><td align="right" headers="MessagesPerSecond GESSent" class='awrnc'>23.16</td><td align="right" headers="MessagesPerSecond SentDirect" class='awrnc'>351.84</td><td align="right" headers="MessagesPerSecond SentIndir" class='awrnc'>9,230.45</td><td align="right" headers="GCBlks Lost/s" class='awrnclb'>1</td><td align="right" headers="GCCR Fail/s" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>6.04</td><td align="right" class='awrct'>2.14</td><td align="right" class='awrclbt'>7.59</td><td align="right" class='awrct'>2.35</td><td align="right" class='awrclbt'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>69,636.40</td><td align="right" class='awrct'>33.15</td><td align="right" class='awrct'>69,650.30</td><td align="right" class='awrct'>33.34</td><td align="right" class='awrct'>991.57</td><td align="right" class='awrct'>23,289.17</td><td align="right" class='awrclbt'>2</td><td align="right" class='awrcbbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>3.02</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnclb'>3.79</td><td align="right" class='awrnc'>1.18</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnclb'>34,818.20</td><td align="right" class='awrnc'>16.57</td><td align="right" class='awrnc'>34,825.15</td><td align="right" class='awrnc'>16.67</td><td align="right" class='awrnc'>495.79</td><td align="right" class='awrnc'>11,644.58</td><td align="right" class='awrnclb'>1</td><td align="right" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>1.85</td><td align="right" class='awrc'>0.87</td><td align="right" class='awrclb'>2.22</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrclb'>3,207.22</td><td align="right" class='awrc'>9.44</td><td align="right" class='awrc'>3,520.93</td><td align="right" class='awrc'>9.18</td><td align="right" class='awrc'>203.57</td><td align="right" class='awrc'>3,414.11</td><td align="right" class='awrclb'>1</td><td align="right" class='awrcbb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12032"></a>
<h3 class="awr">SysStat and Global Messaging (per Tx)- RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging (per Tx)- RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceivedperTx">Blocks Received per Tx</th>
<th class="awrbg" colspan=" 2" id="BlocksServed">Blocks Served</th>
<th class="awrbg" colspan=" 2" id="CPU(seconds)perTx">CPU (seconds) per Tx</th>
<th class="awrbg" colspan=" 6" id="MessagesperTransaction">Messages per Transaction</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent </th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost/Tx">Lost/Tx</th><th class="awrbg" scope="col" id="Fail/Tx">Fail/Tx</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceivedperTx GCCurrent" class='awrclb'>12.94</td><td align="right" headers="BlocksReceivedperTx GCCR" class='awrc'>5.04</td><td align="right" headers="BlocksServed GCCurrent" class='awrclb'>6.66</td><td align="right" headers="BlocksServed GCCR" class='awrc'>1.44</td><td align="right" headers="CPU(seconds)perTx GC" class='awrclb'>&#160;</td><td align="right" headers="CPU(seconds)perTx IPC" class='awrc'>0.00</td><td align="right" headers="MessagesperTransaction GCSReceived" class='awrclb'>97,322.98</td><td align="right" headers="MessagesperTransaction GESReceived" class='awrc'>69.52</td><td align="right" headers="MessagesperTransaction GCSSent" class='awrc'>111,568.38</td><td align="right" headers="MessagesperTransaction GESSent" class='awrc'>30.42</td><td align="right" headers="MessagesperTransaction SentDirect" class='awrc'>1,912.75</td><td align="right" headers="MessagesperTransaction SentIndir" class='awrc'>42,034.46</td><td align="right" headers="GCBlks Lost/Tx" class='awrclb'>4.40</td><td align="right" headers="GCCR Fail/Tx" class='awrcbb'>0.04</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceivedperTx GCCurrent" class='awrnclb'>5.07</td><td align="right" headers="BlocksReceivedperTx GCCR" class='awrnc'>1.33</td><td align="right" headers="BlocksServed GCCurrent" class='awrnclb'>15.91</td><td align="right" headers="BlocksServed GCCR" class='awrnc'>5.55</td><td align="right" headers="CPU(seconds)perTx GC" class='awrnclb'>&#160;</td><td align="right" headers="CPU(seconds)perTx IPC" class='awrnc'>0.00</td><td align="right" headers="MessagesperTransaction GCSReceived" class='awrnclb'>110,022.33</td><td align="right" headers="MessagesperTransaction GESReceived" class='awrnc'>29.36</td><td align="right" headers="MessagesperTransaction GCSSent" class='awrnc'>95,928.92</td><td align="right" headers="MessagesperTransaction GESSent" class='awrnc'>68.72</td><td align="right" headers="MessagesperTransaction SentDirect" class='awrnc'>1,043.79</td><td align="right" headers="MessagesperTransaction SentIndir" class='awrnc'>27,383.75</td><td align="right" headers="GCBlks Lost/Tx" class='awrnclb'>1.71</td><td align="right" headers="GCCR Fail/Tx" class='awrncbb'>0.29</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>9.01</td><td align="right" class='awrct'>3.19</td><td align="right" class='awrclbt'>11.28</td><td align="right" class='awrct'>3.50</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>103,672.65</td><td align="right" class='awrct'>49.44</td><td align="right" class='awrct'>103,748.65</td><td align="right" class='awrct'>49.57</td><td align="right" class='awrct'>1,478.27</td><td align="right" class='awrct'>34,709.11</td><td align="right" class='awrclbt'>3.05</td><td align="right" class='awrcbbt'>0.16</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="605"></a>
<h2 class="awr">
Global Cache and Enqueue Statistics Summary
</h2>
<ul>
<li class="awr"><a class="awr" href="#12019">Global Cache Efficiency Percentages</a></li>
<li class="awr"><a class="awr" href="#12020">Global Latency Characteristics</a></li>
<li class="awr"><a class="awr" href="#12021">Global Messaging Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12019"></a>
<h3 class="awr">Global Cache Efficiency Percentages</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Cache Efficiency Percentages"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="BufferAccess">Buffer Access</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Local%">Local %</th><th class="awrbg" scope="col" id="Remote%">Remote %</th><th class="awrbg" scope="col" id="Disk%">Disk %</th><th class="awrbg" scope="col">Locality %</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BufferAccess Local%" class='awrclb'>99.23</td><td align="right" headers="BufferAccess Remote%" class='awrc'>0.00</td><td align="right" headers="BufferAccess Disk%" class='awrcrb'>0.77</td><td align="right" class='awrc'>56.94</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BufferAccess Local%" class='awrnclb'>97.15</td><td align="right" headers="BufferAccess Remote%" class='awrnc'>0.00</td><td align="right" headers="BufferAccess Disk%" class='awrncrb'>2.85</td><td align="right" class='awrnc'>80.63</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12020"></a>
<h3 class="awr">Global Latency Characteristics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Latency Characteristics"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CRBlocks">CR Blocks</th>
<th class="awrbg" colspan=" 4" id="CUBlocks">CU Blocks</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">GE Get Time (us)</th><th class="awrbg" scope="col" id="Receive|Time(us)">Receive Time (us)</th><th class="awrbg" scope="col" id="Build|Time(us)">Build Time (us)</th><th class="awrbg" scope="col" id="Flush|Time(us)">Flush Time (us)</th><th class="awrbg" scope="col" id="LogFlush|CRSrvd%">Log Flush CR Srvd %</th><th class="awrbg" scope="col" id="Receive|Time(us)">Receive Time (us)</th><th class="awrbg" scope="col" id="Pin|Time(us)">Pin Time (us)</th><th class="awrbg" scope="col" id="Flush|Time(us)">Flush Time (us)</th><th class="awrbg" scope="col" id="LogFlush|CUSrvd%">Log Flush CU Srvd %</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>257</td><td align="right" headers="CRBlocks Receive|Time(us)" class='awrclb'>62085</td><td align="right" headers="CRBlocks Build|Time(us)" class='awrc'>34</td><td align="right" headers="CRBlocks Flush|Time(us)" class='awrc'>4943</td><td align="right" headers="CRBlocks LogFlush|CRSrvd%" class='awrc'>23.97</td><td align="right" headers="CUBlocks Receive|Time(us)" class='awrclb'>67366</td><td align="right" headers="CUBlocks Pin|Time(us)" class='awrc'>4444</td><td align="right" headers="CUBlocks Flush|Time(us)" class='awrc'>5808</td><td align="right" headers="CUBlocks LogFlush|CUSrvd%" class='awrcrb'>9.95</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>1922</td><td align="right" headers="CRBlocks Receive|Time(us)" class='awrnclb'>49381</td><td align="right" headers="CRBlocks Build|Time(us)" class='awrnc'>102</td><td align="right" headers="CRBlocks Flush|Time(us)" class='awrnc'>4176</td><td align="right" headers="CRBlocks LogFlush|CRSrvd%" class='awrnc'>6.45</td><td align="right" headers="CUBlocks Receive|Time(us)" class='awrnclb'>6749</td><td align="right" headers="CUBlocks Pin|Time(us)" class='awrnc'>10000</td><td align="right" headers="CUBlocks Flush|Time(us)" class='awrnc'>5316</td><td align="right" headers="CUBlocks LogFlush|CUSrvd%" class='awrncrb'>3.91</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12021"></a>
<h3 class="awr">Global Messaging Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Messaging Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="QueueTime(us)">Queue Time (us)</th>
<th class="awrbg" colspan=" 2" id="ProcessTime(us)">Process Time (us)</th>
<th class="awrbg" colspan=" 3" id="%MessagesSent">% Messages Sent</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Sent">Sent</th><th class="awrbg" scope="col" id="onksxp">on ksxp</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="GCSmsgs">GCS msgs</th><th class="awrbg" scope="col" id="GESmsgs">GES msgs</th><th class="awrbg" scope="col" id="Direct">Direct</th><th class="awrbg" scope="col" id="Indirect">Indirect</th><th class="awrbg" scope="col" id="FlowCtrl">Flow Ctrl</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="QueueTime(us) Sent" class='awrclb'>251</td><td align="right" headers="QueueTime(us) onksxp" class='awrc'>35997</td><td align="right" headers="QueueTime(us) Received" class='awrc'>23</td><td align="right" headers="ProcessTime(us) GCSmsgs" class='awrclb'>15</td><td align="right" headers="ProcessTime(us) GESmsgs" class='awrc'>15</td><td align="right" headers="%MessagesSent Direct" class='awrclb'>4.35</td><td align="right" headers="%MessagesSent Indirect" class='awrc'>95.65</td><td align="right" headers="%MessagesSent FlowCtrl" class='awrcrb'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="QueueTime(us) Sent" class='awrnclb'>387</td><td align="right" headers="QueueTime(us) onksxp" class='awrnc'>39817</td><td align="right" headers="QueueTime(us) Received" class='awrnc'>12</td><td align="right" headers="ProcessTime(us) GCSmsgs" class='awrnclb'>12</td><td align="right" headers="ProcessTime(us) GESmsgs" class='awrnc'>38</td><td align="right" headers="%MessagesSent Direct" class='awrnclb'>3.67</td><td align="right" headers="%MessagesSent Indirect" class='awrnc'>96.20</td><td align="right" headers="%MessagesSent FlowCtrl" class='awrncrb'>0.14</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12033"></a>
<h3 class="awr">Global CR Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global CR Server Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 5" id="BlockRequests">Block Requests</th>
<th class="awrbg" colspan=" 5" id="Results">Results</th>
<th class="awrbg" colspan=" 1" id="Fairness">Fairness</th>
<th class="awrbg" colspan=" 1" id="Light">Light</th>
<th class="awrbg" colspan=" 3" id="Total">Total</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="CR">CR</th><th class="awrbg" scope="col" id="CU">CU</th><th class="awrbg" scope="col" id="Data">Data</th><th class="awrbg" scope="col" id="Undo">Undo</th><th class="awrbg" scope="col" id="TX">TX</th><th class="awrbg" scope="col" id="Current">Current</th><th class="awrbg" scope="col" id="Private">Private</th><th class="awrbg" scope="col" id="Zero">Zero</th><th class="awrbg" scope="col" id="DskRd">Dsk Rd</th><th class="awrbg" scope="col" id="Fail">Fail</th><th class="awrbg" scope="col" id="DownConv">Down Conv</th><th class="awrbg" scope="col" id="Works">Works</th><th class="awrbg" scope="col" id="Flushes">Flushes</th><th class="awrbg" scope="col" id="Builds">Builds</th><th class="awrbg" scope="col" id="Errors">Errors</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlockRequests CR" class='awrclb'>295</td><td align="right" headers="BlockRequests CU" class='awrc'>119</td><td align="right" headers="BlockRequests Data" class='awrc'>295</td><td align="right" headers="BlockRequests Undo" class='awrc'>1</td><td align="right" headers="BlockRequests TX" class='awrc'>25</td><td align="right" headers="Results Current" class='awrclb'>316</td><td align="right" headers="Results Private" class='awrc'>7</td><td align="right" headers="Results Zero" class='awrc'>39</td><td align="right" headers="Results DskRd" class='awrc'>47</td><td align="right" headers="Results Fail" class='awrc'>0</td><td align="right" headers="Fairness DownConv" class='awrclb'>64</td><td align="right" headers="Light Works" class='awrclb'>7</td><td align="right" headers="Total Flushes" class='awrclb'>87</td><td align="right" headers="Total Builds" class='awrc'>292</td><td align="right" headers="Total Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlockRequests CR" class='awrnclb'>1,075</td><td align="right" headers="BlockRequests CU" class='awrnc'>555</td><td align="right" headers="BlockRequests Data" class='awrnc'>1,075</td><td align="right" headers="BlockRequests Undo" class='awrnc'>15</td><td align="right" headers="BlockRequests TX" class='awrnc'>441</td><td align="right" headers="Results Current" class='awrnclb'>1,328</td><td align="right" headers="Results Private" class='awrnc'>5</td><td align="right" headers="Results Zero" class='awrnc'>34</td><td align="right" headers="Results DskRd" class='awrnc'>261</td><td align="right" headers="Results Fail" class='awrnc'>0</td><td align="right" headers="Fairness DownConv" class='awrnclb'>827</td><td align="right" headers="Light Works" class='awrnclb'>1,721</td><td align="right" headers="Total Flushes" class='awrnclb'>91</td><td align="right" headers="Total Builds" class='awrnc'>1,075</td><td align="right" headers="Total Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>1,370</td><td align="right" class='awrct'>674</td><td align="right" class='awrct'>1,370</td><td align="right" class='awrct'>16</td><td align="right" class='awrct'>466</td><td align="right" class='awrclbt'>1,644</td><td align="right" class='awrct'>12</td><td align="right" class='awrct'>73</td><td align="right" class='awrct'>308</td><td align="right" class='awrct'>0</td><td align="right" class='awrclbt'>891</td><td align="right" class='awrclbt'>1,728</td><td align="right" class='awrclbt'>178</td><td align="right" class='awrct'>1,367</td><td align="right" class='awrcrbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>685</td><td align="right" class='awrnc'>337</td><td align="right" class='awrnc'>685</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>233</td><td align="right" class='awrnclb'>822</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>154</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>446</td><td align="right" class='awrnclb'>864</td><td align="right" class='awrnclb'>89</td><td align="right" class='awrnc'>684</td><td align="right" class='awrncrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>552</td><td align="right" class='awrc'>308</td><td align="right" class='awrc'>552</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>294</td><td align="right" class='awrclb'>716</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>151</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>540</td><td align="right" class='awrclb'>1,212</td><td align="right" class='awrclb'>3</td><td align="right" class='awrc'>554</td><td align="right" class='awrcrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12034"></a>
<h3 class="awr">Global Current Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Current Server Statistics"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Pins</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th><th class="awrbg" scope="col">Flushes</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>22.22</td><td align="right" class='awrc'>44.44</td><td align="right" class='awrc'>22.22</td><td align="right" class='awrc'>11.11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>167</td><td align="right" class='awrc'>0.60</td><td align="right" class='awrc'>33.53</td><td align="right" class='awrc'>37.13</td><td align="right" class='awrc'>28.74</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>55.56</td><td align="right" class='awrnc'>22.22</td><td align="right" class='awrnc'>5.56</td><td align="right" class='awrnc'>11.11</td><td align="right" class='awrnc'>5.56</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>158</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>24.68</td><td align="right" class='awrnc'>53.16</td><td align="right" class='awrnc'>22.15</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>27</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrct'>325</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>163</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="607"></a>
<h2 class="awr">
Global Cache Transfer Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12035">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#12036">Global Cache Transfer (Immediate)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12035"></a>
<h3 class="awr">Global Cache Transfer Statistics</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> Busy	     (Busy) - Block Transfer impacted by Remote Contention </li>
<li class="awr"> Congested  (Cngst) - Block Transfer impacted by Remote System Load </li>
<li class="awr"> All - average time of All blocks (Immed,Busy,Cngst) in us </li>
<li class="awr"> Ordered by instance_number, CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="Global Cache Transfer Statistics. . Immediate (Immed) - Block Transfer NOT impacted by Remote Processing Delays. Busy (Busy) - Block Transfer impacted by Remote Contention. Congested (Cngst) - Block Transfer impacted by Remote System Load. All - average time of All blocks (Immed,Busy,Cngst) in us. Ordered by instance_number, CR + Current Blocks Received desc"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 1" id="Block">Block</th>
<th class="awrbg" colspan=" 4" id="CRBlocks">CR Blocks</th>
<th class="awrbg" colspan=" 4" id="CurrentBlocks">Current Blocks</th>
<th class="awrbg" colspan=" 4" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 4" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Dest">Dest</th><th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%Immed">%Immed</th><th class="awrbg" scope="col" id="%Busy">%Busy</th><th class="awrbg" scope="col" id="%Cngst">%Cngst</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%Immed">%Immed</th><th class="awrbg" scope="col" id="%Busy">%Busy</th><th class="awrbg" scope="col" id="%Cngst">%Cngst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Cngst">Cngst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Cngst">Cngst</th></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'>1</td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>data block</td><td align="right" headers="CRBlocks Received" class='awrclb'>928</td><td align="right" headers="CRBlocks %Immed" class='awrc'>26.51</td><td align="right" headers="CRBlocks %Busy" class='awrc'>73.49</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>3,166</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>83.07</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>16.30</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>0.63</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>80373</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>569</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>109159</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>68850</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>78901</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>18159</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>54980</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="CRBlocks Received" class='awrnclb'>297</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>97.64</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>2.36</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>18</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>38.89</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>61.11</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>14143</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>14363</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>5045</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>113037</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>1612</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>183944</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="CRBlocks Received" class='awrclb'>35</td><td align="right" headers="CRBlocks %Immed" class='awrc'>100.00</td><td align="right" headers="CRBlocks %Busy" class='awrc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>89</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>7.87</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>92.13</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>298</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>298</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>906</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>412</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>948</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="CRBlocks Received" class='awrnclb'>15</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>60.00</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>40.00</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>1901</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>326</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>4263</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclbt'>2</td><td align="right" headers="Instance# Src" class='awrct'>1</td><td headers="Block Class" class='awrclbt'>data block</td><td align="right" headers="CRBlocks Received" class='awrclbt'>278</td><td align="right" headers="CRBlocks %Immed" class='awrct'>69.06</td><td align="right" headers="CRBlocks %Busy" class='awrct'>30.94</td><td align="right" headers="CRBlocks %Cngst" class='awrct'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrclbt'>1,186</td><td align="right" headers="CurrentBlocks %Immed" class='awrct'>62.82</td><td align="right" headers="CurrentBlocks %Busy" class='awrct'>36.76</td><td align="right" headers="CurrentBlocks %Cngst" class='awrct'>0.42</td><td align="right" headers="CRAvgTime(us) All" class='awrclbt'>57114</td><td align="right" headers="CRAvgTime(us) Immed" class='awrct'>80263</td><td align="right" headers="CRAvgTime(us) Busy" class='awrct'>5434</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrct'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclbt'>6505</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrct'>6176</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrct'>7106</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrbt'>3180</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>others</td><td align="right" headers="CRBlocks Received" class='awrnclb'>33</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>100.00</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>78</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>11.54</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>88.46</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>31409</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>31409</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>14071</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>998</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>15776</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrc'>1</td><td headers="Block Class" class='awrclb'>undo header</td><td align="right" headers="CRBlocks Received" class='awrclb'>21</td><td align="right" headers="CRBlocks %Immed" class='awrc'>95.24</td><td align="right" headers="CRBlocks %Busy" class='awrc'>4.76</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>17</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>0.00</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>100.00</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>743</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>750</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>608</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>2897</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>2897</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="CRBlocks Received" class='awrnclb'>1</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>100.00</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>342</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>342</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#607">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12036"></a>
<h3 class="awr">Global Cache Transfer (Immediate)</h3>
<ul>
<li class="awr"> Ordered by instance_number, CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="Global Cache Transfer (Immediate). . Ordered by instance_number, CR + Current Blocks Received desc"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 1" id="Block">Block</th>
<th class="awrbg" colspan=" 2" id="LostBlocks">Lost Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmediateCRBlocks">Immediate CR Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmediateCurrentBlocks">Immediate Current Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmedCRAvgTime(us)">Immed CR Avg Time (us)</th>
<th class="awrbg" colspan=" 3" id="ImmedCurrentAvgTime(us)">Immed Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Dest">Dest</th><th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Count">Count</th><th class="awrbg" scope="col" id="Time(us)">Time(us)</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%2-hop">%2-hop</th><th class="awrbg" scope="col" id="%3-hop">%3-hop</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%2-hop">%2-hop</th><th class="awrbg" scope="col" id="%3-hop">%3-hop</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="2-hop">2-hop</th><th class="awrbg" scope="col" id="3-hop">3-hop</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="2-hop">2-hop</th><th class="awrbg" scope="col" id="3-hop">3-hop</th></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'>1</td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>data block</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>246</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>2,630</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>569</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>569</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>78901</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>78901</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>290</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>7</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>14363</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>14363</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>1612</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>1612</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>35</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>7</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>298</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>298</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>412</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>412</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>9</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>326</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>326</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclbt'>2</td><td align="right" headers="Instance# Src" class='awrct'>1</td><td headers="Block Class" class='awrclbt'>data block</td><td align="right" headers="LostBlocks Count" class='awrclbt'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrct'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclbt'>192</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrct'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrct'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclbt'>745</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrct'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrct'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclbt'>80263</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrct'>80263</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrct'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclbt'>6176</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrct'>6176</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>others</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>33</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>9</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>31409</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>31409</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>998</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>998</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrc'>1</td><td headers="Block Class" class='awrclb'>undo header</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>20</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>750</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>750</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>1</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>342</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>342</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#607">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="608"></a>
<h2 class="awr">
Interconnect Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12040">Cluster Interconnect</a></li>
<li class="awr"><a class="awr" href="#12045">Ping Statistics</a></li>
<li class="awr"><a class="awr" href="#12041">Interconnect Client Statistics</a></li>
<li class="awr"><a class="awr" href="#12042">Interconnect Client Statistics (per Second)</a></li>
<li class="awr"><a class="awr" href="#12043">Interconnect Device Statistics</a></li>
<li class="awr"><a class="awr" href="#12044">Interconnect Device Statistics (per Second)</a></li>
<li class="awr"><a class="awr" href="#12078">Dynamic Remastering Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12040"></a>
<h3 class="awr">Cluster Interconnect</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Cluster Interconnect"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="Begin">Begin</th>
<th class="awrbg" colspan=" 3" id="End(ifdifferentfromBegin)">End (if different from Begin)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td class='awrc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrclb'>169.254.26.166</td><td headers="Begin Pub" class='awrc'>N</td><td headers="Begin Source" class='awrc'>&#160;</td><td headers="End(ifdifferentfromBegin) IPAddress" class='awrclb'>&#160;</td><td headers="End(ifdifferentfromBegin) Pub" class='awrc'>&#160;</td><td headers="End(ifdifferentfromBegin) Source" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td class='awrnc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrnclb'>169.254.26.102</td><td headers="Begin Pub" class='awrnc'>N</td><td headers="Begin Source" class='awrnc'>&#160;</td><td headers="End(ifdifferentfromBegin) IPAddress" class='awrnclb'>&#160;</td><td headers="End(ifdifferentfromBegin) Pub" class='awrnc'>&#160;</td><td headers="End(ifdifferentfromBegin) Source" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12045"></a>
<h3 class="awr">Ping Statistics</h3>
<ul>
<li class="awr"> Latency of the roundtrip of a message from  Src Instance to the Target instances</li>
</ul>
<table border="0" class="tdiff" summary="Ping Statistics. . Latency of the roundtrip of a message from Src Instance to the Target instances"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 3" id="500bytes">500 bytes</th>
<th class="awrbg" colspan=" 3" id="8Kbytes">8 Kbytes</th>
</tr><tr>
<th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Target">Target</th><th class="awrbg" scope="col" id="Ping|Count">Ping Count</th><th class="awrbg" scope="col" id="Avg|Time(us)">Avg   Time(us)</th><th class="awrbg" scope="col" id="Std|Dev">Std Dev</th><th class="awrbg" scope="col" id="Ping|Count">Ping Count</th><th class="awrbg" scope="col" id="Avg|Time(us)">Avg   Time(us)</th><th class="awrbg" scope="col" id="Std|Dev">Std Dev</th></tr>
<tr><td align="right" headers="Instance# Src" class='awrclb'>1</td><td align="right" headers="Instance# Target" class='awrc'>1</td><td align="right" headers="500bytes Ping|Count" class='awrclb'>68</td><td align="right" headers="500bytes Avg|Time(us)" class='awrc'>522</td><td align="right" headers="500bytes Std|Dev" class='awrc'>0.74</td><td align="right" headers="8Kbytes Ping|Count" class='awrclb'>74</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrc'>468</td><td align="right" headers="8Kbytes Std|Dev" class='awrcrb'>0.41</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Target" class='awrnc'>2</td><td align="right" headers="500bytes Ping|Count" class='awrnclb'>68</td><td align="right" headers="500bytes Avg|Time(us)" class='awrnc'>178116</td><td align="right" headers="500bytes Std|Dev" class='awrnc'>707.61</td><td align="right" headers="8Kbytes Ping|Count" class='awrnclb'>74</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrnc'>204377</td><td align="right" headers="8Kbytes Std|Dev" class='awrncrb'>754.84</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrclbt'>2</td><td align="right" headers="Instance# Target" class='awrct'>1</td><td align="right" headers="500bytes Ping|Count" class='awrclbt'>67</td><td align="right" headers="500bytes Avg|Time(us)" class='awrct'>48130</td><td align="right" headers="500bytes Std|Dev" class='awrct'>373.77</td><td align="right" headers="8Kbytes Ping|Count" class='awrclbt'>73</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrct'>47609</td><td align="right" headers="8Kbytes Std|Dev" class='awrcrbt'>358.16</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Target" class='awrnc'>2</td><td align="right" headers="500bytes Ping|Count" class='awrnclb'>67</td><td align="right" headers="500bytes Avg|Time(us)" class='awrnc'>289</td><td align="right" headers="500bytes Std|Dev" class='awrnc'>0.14</td><td align="right" headers="8Kbytes Ping|Count" class='awrnclb'>73</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrnc'>273</td><td align="right" headers="8Kbytes Std|Dev" class='awrncrb'>0.14</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12041"></a>
<h3 class="awr">Interconnect Client Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Interconnect Client Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 6" id="Sent(MB)">Sent (MB)</th>
<th class="awrbg" colspan=" 6" id="Received(MB)">Received (MB)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sent(MB) Total" class='awrclb'>7,732.48</td><td align="right" headers="Sent(MB) Cache" class='awrc'>8.72</td><td align="right" headers="Sent(MB) IPQ" class='awrc'>3.60</td><td align="right" headers="Sent(MB) DLM" class='awrc'>7,656.54</td><td align="right" headers="Sent(MB) PNG" class='awrc'>1.24</td><td align="right" headers="Sent(MB) Misc" class='awrc'>62.37</td><td align="right" headers="Received(MB) Total" class='awrclb'>6,245.55</td><td align="right" headers="Received(MB) Cache" class='awrc'>17.84</td><td align="right" headers="Received(MB) IPQ" class='awrc'>11.91</td><td align="right" headers="Received(MB) DLM" class='awrc'>6,146.45</td><td align="right" headers="Received(MB) PNG" class='awrc'>1.24</td><td align="right" headers="Received(MB) Misc" class='awrcrb'>68.10</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sent(MB) Total" class='awrnclb'>6,154.81</td><td align="right" headers="Sent(MB) Cache" class='awrnc'>20.23</td><td align="right" headers="Sent(MB) IPQ" class='awrnc'>11.91</td><td align="right" headers="Sent(MB) DLM" class='awrnc'>6,054.55</td><td align="right" headers="Sent(MB) PNG" class='awrnc'>1.23</td><td align="right" headers="Sent(MB) Misc" class='awrnc'>66.89</td><td align="right" headers="Received(MB) Total" class='awrnclb'>7,644.39</td><td align="right" headers="Received(MB) Cache" class='awrnc'>7.30</td><td align="right" headers="Received(MB) IPQ" class='awrnc'>3.60</td><td align="right" headers="Received(MB) DLM" class='awrnc'>7,571.00</td><td align="right" headers="Received(MB) PNG" class='awrnc'>1.23</td><td align="right" headers="Received(MB) Misc" class='awrncrb'>61.27</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>13,887.28</td><td align="right" class='awrct'>28.95</td><td align="right" class='awrct'>15.50</td><td align="right" class='awrct'>13,711.09</td><td align="right" class='awrct'>2.47</td><td align="right" class='awrct'>129.27</td><td align="right" class='awrclbt'>13,889.94</td><td align="right" class='awrct'>25.14</td><td align="right" class='awrct'>15.50</td><td align="right" class='awrct'>13,717.46</td><td align="right" class='awrct'>2.47</td><td align="right" class='awrcrbt'>129.37</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>6,943.64</td><td align="right" class='awrnc'>14.48</td><td align="right" class='awrnc'>7.75</td><td align="right" class='awrnc'>6,855.54</td><td align="right" class='awrnc'>1.24</td><td align="right" class='awrnc'>64.63</td><td align="right" class='awrnclb'>6,944.97</td><td align="right" class='awrnc'>12.57</td><td align="right" class='awrnc'>7.75</td><td align="right" class='awrnc'>6,858.73</td><td align="right" class='awrnc'>1.24</td><td align="right" class='awrncrb'>64.68</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>1,115.58</td><td align="right" class='awrc'>8.14</td><td align="right" class='awrc'>5.88</td><td align="right" class='awrc'>1,132.78</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>3.19</td><td align="right" class='awrclb'>989.13</td><td align="right" class='awrc'>7.45</td><td align="right" class='awrc'>5.88</td><td align="right" class='awrc'>1,007.31</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrcrb'>4.84</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12042"></a>
<h3 class="awr">Interconnect Client Statistics (per Second)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Interconnect Client Statistics (per Second)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 6" id="Sent(MB/s)">Sent (MB/s)</th>
<th class="awrbg" colspan=" 6" id="Received(MB/s)">Received (MB/s)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sent(MB/s) Total" class='awrclb'>10.26</td><td align="right" headers="Sent(MB/s) Cache" class='awrc'>0.01</td><td align="right" headers="Sent(MB/s) IPQ" class='awrc'>0.00</td><td align="right" headers="Sent(MB/s) DLM" class='awrc'>10.16</td><td align="right" headers="Sent(MB/s) PNG" class='awrc'>0.00</td><td align="right" headers="Sent(MB/s) Misc" class='awrc'>0.08</td><td align="right" headers="Received(MB/s) Total" class='awrclb'>8.29</td><td align="right" headers="Received(MB/s) Cache" class='awrc'>0.02</td><td align="right" headers="Received(MB/s) IPQ" class='awrc'>0.02</td><td align="right" headers="Received(MB/s) DLM" class='awrc'>8.16</td><td align="right" headers="Received(MB/s) PNG" class='awrc'>0.00</td><td align="right" headers="Received(MB/s) Misc" class='awrcrb'>0.09</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sent(MB/s) Total" class='awrnclb'>8.17</td><td align="right" headers="Sent(MB/s) Cache" class='awrnc'>0.03</td><td align="right" headers="Sent(MB/s) IPQ" class='awrnc'>0.02</td><td align="right" headers="Sent(MB/s) DLM" class='awrnc'>8.03</td><td align="right" headers="Sent(MB/s) PNG" class='awrnc'>0.00</td><td align="right" headers="Sent(MB/s) Misc" class='awrnc'>0.09</td><td align="right" headers="Received(MB/s) Total" class='awrnclb'>10.14</td><td align="right" headers="Received(MB/s) Cache" class='awrnc'>0.01</td><td align="right" headers="Received(MB/s) IPQ" class='awrnc'>0.00</td><td align="right" headers="Received(MB/s) DLM" class='awrnc'>10.05</td><td align="right" headers="Received(MB/s) PNG" class='awrnc'>0.00</td><td align="right" headers="Received(MB/s) Misc" class='awrncrb'>0.08</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>18.43</td><td align="right" class='awrct'>0.04</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>18.20</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.17</td><td align="right" class='awrclbt'>18.43</td><td align="right" class='awrct'>0.03</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>18.20</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrcrbt'>0.17</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>9.22</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>9.10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnclb'>9.22</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>9.10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrncrb'>0.09</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>1.48</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrclb'>1.31</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>1.34</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrcrb'>0.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12043"></a>
<h3 class="awr">Interconnect Device Statistics</h3>
<ul>
<li class="awr"> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs </li>
<li class="awr"> null means begin value &gt; end value</li>
</ul>
<table border="0" class="tdiff" summary="Interconnect Device Statistics. . Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs. null means begin value &gt; end value"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Interface">Interface</th>
<th class="awrbg" colspan=" 6" id="Sent">Sent</th>
<th class="awrbg" colspan=" 6" id="Received">Received</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="NAME">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="IPMask">IP Mask</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Carrier|Lost">Carrier Lost</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Frame|Errors">Frame Errors</th></tr>
<tr><td align="right" class='awrc'>1</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.4</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>11,519.29</td><td align="right" headers="Sent Packets" class='awrc'>14,475,531</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>10,033.39</td><td align="right" headers="Received Packets" class='awrc'>14,218,951</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>10,469.68</td><td align="right" headers="Sent Packets" class='awrnc'>9,848,077</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>9,257.03</td><td align="right" headers="Received Packets" class='awrnc'>14,075,993</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.26.166</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>3.57</td><td align="right" headers="Sent Packets" class='awrnc'>5,586</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>1.05</td><td align="right" headers="Received Packets" class='awrnc'>5,112</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.22</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.23</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:4</td><td headers="Interface IPAddress" class='awrc'>192.168.1.11</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>3.37</td><td align="right" headers="Sent Packets" class='awrnc'>3,802</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>2.18</td><td align="right" headers="Received Packets" class='awrnc'>5,006</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>145.76</td><td align="right" headers="Sent Packets" class='awrc'>2,775,072</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>145.76</td><td align="right" headers="Received Packets" class='awrc'>2,775,072</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>2</td><td headers="Interface NAME" class='awrnclb'>eth0</td><td headers="Interface IPAddress" class='awrnc'>10.1.5.6</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>10,213.93</td><td align="right" headers="Sent Packets" class='awrnc'>14,228,907</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>11,336.87</td><td align="right" headers="Received Packets" class='awrnc'>14,467,946</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-priv</td><td headers="Interface IPAddress" class='awrc'>192.168.2.2</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>9,188.71</td><td align="right" headers="Sent Packets" class='awrc'>10,488,508</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>10,555.54</td><td align="right" headers="Received Packets" class='awrc'>14,322,602</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrnc'>169.254.26.102</td><td headers="Interface IPMask" class='awrnc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub</td><td headers="Interface IPAddress" class='awrc'>192.168.1.2</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>1.09</td><td align="right" headers="Sent Packets" class='awrc'>5,143</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>3.66</td><td align="right" headers="Received Packets" class='awrc'>6,905</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.12</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrc'>192.168.1.21</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>3.33</td><td align="right" headers="Sent Packets" class='awrnc'>3,821</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>2.22</td><td align="right" headers="Received Packets" class='awrnc'>5,049</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>122.93</td><td align="right" headers="Sent Packets" class='awrc'>1,904,248</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>122.93</td><td align="right" headers="Received Packets" class='awrc'>1,904,248</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnct'>Sum</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclbt'>41,671.65</td><td align="right" class='awrnct'>53,738,695</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnclbt'>41,460.63</td><td align="right" class='awrnct'>61,786,884</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrncrbt'>0</td></tr>
<tr><td align="right" class='awrc'>Avg</td><td class='awrclb'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td align="right" class='awrclb'>2,451.27</td><td align="right" class='awrc'>3,161,100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>2,438.86</td><td align="right" class='awrc'>3,634,523</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>Std</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclb'>4,534.26</td><td align="right" class='awrnc'>5,364,525</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>4,508.50</td><td align="right" class='awrnc'>6,131,537</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12044"></a>
<h3 class="awr">Interconnect Device Statistics (per Second)</h3>
<ul>
<li class="awr"> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs </li>
<li class="awr"> Blank	means begin value &gt; end value</li>
</ul>
<table border="0" class="tdiff" summary="Interconnect Device Statistics (per Second). . Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs. Blank means begin value &gt; end value"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Interface">Interface</th>
<th class="awrbg" colspan=" 6" id="Sent">Sent</th>
<th class="awrbg" colspan=" 6" id="Received">Received</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="NAME">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="IPMask">IP Mask</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Carrier|Lost">Carrier Lost</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Frame|Errors">Frame Errors</th></tr>
<tr><td align="right" class='awrc'>1</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.4</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>15.29</td><td align="right" headers="Sent Packets" class='awrc'>19,212</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>13.32</td><td align="right" headers="Received Packets" class='awrc'>18,872</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>13.90</td><td align="right" headers="Sent Packets" class='awrnc'>13,070</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>12.29</td><td align="right" headers="Received Packets" class='awrnc'>18,682</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.26.166</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>7</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>7</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.22</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.23</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:4</td><td headers="Interface IPAddress" class='awrc'>192.168.1.11</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>5</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>7</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.19</td><td align="right" headers="Sent Packets" class='awrc'>3,683</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.19</td><td align="right" headers="Received Packets" class='awrc'>3,683</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>2</td><td headers="Interface NAME" class='awrnclb'>eth0</td><td headers="Interface IPAddress" class='awrnc'>10.1.5.6</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>13.55</td><td align="right" headers="Sent Packets" class='awrnc'>18,883</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>15.04</td><td align="right" headers="Received Packets" class='awrnc'>19,200</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-priv</td><td headers="Interface IPAddress" class='awrc'>192.168.2.2</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>12.19</td><td align="right" headers="Sent Packets" class='awrc'>13,919</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>14.01</td><td align="right" headers="Received Packets" class='awrc'>19,007</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrnc'>169.254.26.102</td><td headers="Interface IPMask" class='awrnc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub</td><td headers="Interface IPAddress" class='awrc'>192.168.1.2</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>7</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>9</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.12</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrc'>192.168.1.21</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>5</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>7</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.16</td><td align="right" headers="Sent Packets" class='awrc'>2,527</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.16</td><td align="right" headers="Received Packets" class='awrc'>2,527</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnct'>Sum</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclbt'>55.30</td><td align="right" class='awrnct'>71,319</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnclbt'>55.02</td><td align="right" class='awrnct'>82,000</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrncrbt'>0</td></tr>
<tr><td align="right" class='awrc'>Avg</td><td class='awrclb'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td align="right" class='awrclb'>3.25</td><td align="right" class='awrc'>4,195</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>3.24</td><td align="right" class='awrc'>4,824</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>Std</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclb'>6.02</td><td align="right" class='awrnc'>7,119</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>5.98</td><td align="right" class='awrnc'>8,137</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12078"></a>
<h3 class="awr">Dynamic Remastering Statistics</h3>
<ul>
<li class="awr"> Affinity Objects - Affinity objects remastered at the begin/end snapshot  </li>
<li class="awr"> Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot</li>
</ul>
<table border="0" class="tdiff" summary="Dynamic Remastering Statistics. . Affinity Objects - Affinity objects remastered at the begin/end snapshot . Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CountsperOps">Counts per Ops</th>
<th class="awrbg" colspan=" 6" id="TimeperOps(seconds)">Time per Ops (seconds)</th>
<th class="awrbg" colspan=" 2" id="AffinityObjects">Affinity Objects</th>
<th class="awrbg" colspan=" 3" id="ReadMostlyObjects">Read Mostly Objects</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Remaster Ops</th><th class="awrbg" scope="col" id="Remastered|Objects">Remastered Objects</th><th class="awrbg" scope="col" id="ReplayLocks|Received">Replay Locks Received</th><th class="awrbg" scope="col" id="ReplayLocks|Sent">Replay Locks Sent</th><th class="awrbg" scope="col" id="Resources|Cleaned">Resources Cleaned</th><th class="awrbg" scope="col" id="Remaster">Remaster</th><th class="awrbg" scope="col" id="Freeze">Freeze</th><th class="awrbg" scope="col" id="Cleanup">Cleanup</th><th class="awrbg" scope="col" id="Replay">Replay</th><th class="awrbg" scope="col" id="Fixwrite">Fixwrite</th><th class="awrbg" scope="col" id="Sync">Sync</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="Begin|(persistent)">Begin (persistent)</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" headers="CountsperOps Remastered|Objects" class='awrclb'>81.00</td><td align="right" headers="CountsperOps ReplayLocks|Received" class='awrc'>0.00</td><td align="right" headers="CountsperOps ReplayLocks|Sent" class='awrc'>0.00</td><td align="right" headers="CountsperOps Resources|Cleaned" class='awrc'>0.00</td><td align="right" headers="TimeperOps(seconds) Remaster" class='awrclb'>0.46</td><td align="right" headers="TimeperOps(seconds) Freeze" class='awrc'>0.01</td><td align="right" headers="TimeperOps(seconds) Cleanup" class='awrc'>0.03</td><td align="right" headers="TimeperOps(seconds) Replay" class='awrc'>0.05</td><td align="right" headers="TimeperOps(seconds) Fixwrite" class='awrc'>0.04</td><td align="right" headers="TimeperOps(seconds) Sync" class='awrc'>0.29</td><td align="right" headers="AffinityObjects Begin" class='awrclb'>3</td><td align="right" headers="AffinityObjects End" class='awrc'>3</td><td align="right" headers="ReadMostlyObjects Begin" class='awrclb'>19</td><td align="right" headers="ReadMostlyObjects Begin|(persistent)" class='awrc'>2</td><td align="right" headers="ReadMostlyObjects End" class='awrcrb'>100</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>1</td><td align="right" headers="CountsperOps Remastered|Objects" class='awrnclb'>81.00</td><td align="right" headers="CountsperOps ReplayLocks|Received" class='awrnc'>0.00</td><td align="right" headers="CountsperOps ReplayLocks|Sent" class='awrnc'>0.00</td><td align="right" headers="CountsperOps Resources|Cleaned" class='awrnc'>0.00</td><td align="right" headers="TimeperOps(seconds) Remaster" class='awrnclb'>0.31</td><td align="right" headers="TimeperOps(seconds) Freeze" class='awrnc'>0.01</td><td align="right" headers="TimeperOps(seconds) Cleanup" class='awrnc'>0.05</td><td align="right" headers="TimeperOps(seconds) Replay" class='awrnc'>0.05</td><td align="right" headers="TimeperOps(seconds) Fixwrite" class='awrnc'>0.04</td><td align="right" headers="TimeperOps(seconds) Sync" class='awrnc'>0.13</td><td align="right" headers="AffinityObjects Begin" class='awrnclb'>52</td><td align="right" headers="AffinityObjects End" class='awrnc'>52</td><td align="right" headers="ReadMostlyObjects Begin" class='awrnclb'>19</td><td align="right" headers="ReadMostlyObjects Begin|(persistent)" class='awrnc'>2</td><td align="right" headers="ReadMostlyObjects End" class='awrncrb'>100</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>1</td><td align="right" class='awrclbt'>81.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>0.39</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>0.04</td><td align="right" class='awrct'>0.05</td><td align="right" class='awrct'>0.04</td><td align="right" class='awrct'>0.21</td><td align="right" class='awrclbt'>28</td><td align="right" class='awrct'>28</td><td align="right" class='awrclbt'>19</td><td align="right" class='awrct'>2</td><td align="right" class='awrcrbt'>100</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Max</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnclb'>0.46</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.29</td><td align="right" class='awrnclb'>52</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnclb'>19</td><td align="right" class='awrnc'>2</td><td align="right" class='awrncrb'>100</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="622"></a>
<h2 class="awr">
SQL Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12060">SQL ordered by Elapsed Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12061">SQL ordered by CPU Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12066">SQL ordered by User I/O Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12062">SQL ordered by Gets (Global)</a></li>
<li class="awr"><a class="awr" href="#12063">SQL ordered by Reads (Global)</a></li>
<li class="awr"><a class="awr" href="#12081">SQL ordered by UnOptimized Read Requests (Global)</a></li>
<li class="awr"><a class="awr" href="#12065">SQL ordered by Executions (Global)</a></li>
<li class="awr"><a class="awr" href="#12064">SQL ordered by Cluster Wait Time (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12060"></a>
<h3 class="awr">SQL ordered by Elapsed Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   90.8% of Total DB Time (s):	       283,471</li>
<li class="awr">Captured PL/SQL account for   32.0% of Total DB Time (s):	  283,471</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Elapsed Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>257,141.65</td><td align="right" headers="Total CPU(s)" class='awrc'>17,067.46</td><td align="right" headers="Total IOWait(s)" class='awrc'>92,963.20</td><td align="right" headers="Total Gets" class='awrc'>4,128,165,280</td><td align="right" headers="Total Reads" class='awrc'>55,045,162</td><td align="right" headers="Total Rows" class='awrc'>50,868,515</td><td align="right" headers="Total Cluster(s)" class='awrc'>150,684.18</td><td align="right" headers="Total Execs" class='awrc'>50,868,998</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>81.15</td><td align="right" headers="PerExecution Reads" class='awrc'>1.08</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>90.71</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>80.03</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.89</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>93.17</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>91.66</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>90.72</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>94.22</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#1byq3btcxh13y">1byq3btcxh13y</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>1,063.63</td><td align="right" headers="Total CPU(s)" class='awrnc'>23.81</td><td align="right" headers="Total IOWait(s)" class='awrnc'>218.27</td><td align="right" headers="Total Gets" class='awrnc'>176,979</td><td align="right" headers="Total Reads" class='awrnc'>167,465</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>838.23</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>531.81</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>11.91</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>109.14</td><td align="right" headers="PerExecution Gets" class='awrnc'>88,489.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>83,732.50</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>419.11</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.28</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.50</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#2q574p98jgjxa">2q574p98jgjxa</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>1,062.56</td><td align="right" headers="Total CPU(s)" class='awrc'>22.81</td><td align="right" headers="Total IOWait(s)" class='awrc'>212.01</td><td align="right" headers="Total Gets" class='awrc'>167,569</td><td align="right" headers="Total Reads" class='awrc'>158,298</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>843.66</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>531.28</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>11.40</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>106.01</td><td align="right" headers="PerExecution Gets" class='awrc'>83,784.50</td><td align="right" headers="PerExecution Reads" class='awrc'>79,149.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>421.83</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.26</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.51</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#b45jpawxk7x03">b45jpawxk7x03</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>1,060.71</td><td align="right" headers="Total CPU(s)" class='awrnc'>25.08</td><td align="right" headers="Total IOWait(s)" class='awrnc'>227.73</td><td align="right" headers="Total Gets" class='awrnc'>200,231</td><td align="right" headers="Total Reads" class='awrnc'>186,310</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>826.39</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>530.35</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>12.54</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>113.86</td><td align="right" headers="PerExecution Gets" class='awrnc'>100,115.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>93,155.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>413.19</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.12</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.31</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.50</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#5gu1skrjws96k">5gu1skrjws96k</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>1,060.03</td><td align="right" headers="Total CPU(s)" class='awrc'>21.61</td><td align="right" headers="Total IOWait(s)" class='awrc'>204.78</td><td align="right" headers="Total Gets" class='awrc'>161,014</td><td align="right" headers="Total Reads" class='awrc'>151,942</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>849.64</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>530.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>10.80</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>102.39</td><td align="right" headers="PerExecution Gets" class='awrc'>80,507.00</td><td align="right" headers="PerExecution Reads" class='awrc'>75,971.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>424.82</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.10</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.25</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.51</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#cxbpsarfrjbk0">cxbpsarfrjbk0</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>1,059.79</td><td align="right" headers="Total CPU(s)" class='awrnc'>22.76</td><td align="right" headers="Total IOWait(s)" class='awrnc'>218.05</td><td align="right" headers="Total Gets" class='awrnc'>168,923</td><td align="right" headers="Total Reads" class='awrnc'>158,919</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>836.06</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>529.89</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>11.38</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>109.02</td><td align="right" headers="PerExecution Gets" class='awrnc'>84,461.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>79,459.50</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>418.03</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.26</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.50</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#drvvtfj8as01g">drvvtfj8as01g</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>1,059.44</td><td align="right" headers="Total CPU(s)" class='awrc'>20.14</td><td align="right" headers="Total IOWait(s)" class='awrc'>191.27</td><td align="right" headers="Total Gets" class='awrc'>141,355</td><td align="right" headers="Total Reads" class='awrc'>134,807</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>863.33</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>529.72</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>10.07</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>95.64</td><td align="right" headers="PerExecution Gets" class='awrc'>70,677.50</td><td align="right" headers="PerExecution Reads" class='awrc'>67,403.50</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>431.67</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.09</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.22</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.52</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3y9kpzk6azbmj">3y9kpzk6azbmj</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>1,059.44</td><td align="right" headers="Total CPU(s)" class='awrnc'>23.45</td><td align="right" headers="Total IOWait(s)" class='awrnc'>219.62</td><td align="right" headers="Total Gets" class='awrnc'>168,873</td><td align="right" headers="Total Reads" class='awrnc'>159,796</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>833.74</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>529.72</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>11.72</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>109.81</td><td align="right" headers="PerExecution Gets" class='awrnc'>84,436.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>79,898.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>416.87</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.27</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.50</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#67r0q0md59ppd">67r0q0md59ppd</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>1,059.35</td><td align="right" headers="Total CPU(s)" class='awrc'>23.66</td><td align="right" headers="Total IOWait(s)" class='awrc'>215.50</td><td align="right" headers="Total Gets" class='awrc'>171,662</td><td align="right" headers="Total Reads" class='awrc'>161,678</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>837.81</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>529.67</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>11.83</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>107.75</td><td align="right" headers="PerExecution Gets" class='awrc'>85,831.00</td><td align="right" headers="PerExecution Reads" class='awrc'>80,839.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>418.90</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.27</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.50</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3nbpzvhcr3kfm">3nbpzvhcr3kfm</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>1,059.29</td><td align="right" headers="Total CPU(s)" class='awrnc'>21.24</td><td align="right" headers="Total IOWait(s)" class='awrnc'>192.87</td><td align="right" headers="Total Gets" class='awrnc'>148,839</td><td align="right" headers="Total Reads" class='awrnc'>141,320</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>861.23</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>529.65</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>10.62</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>96.44</td><td align="right" headers="PerExecution Gets" class='awrnc'>74,419.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>70,660.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>430.61</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.10</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.24</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.52</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12061"></a>
<h3 class="awr">SQL ordered by CPU Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   80.5% of Total CPU Time (s): 	 21,327</li>
<li class="awr">Captured PL/SQL account for   78.0% of Total CPU Time (s):	    21,327</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by CPU Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>17,067.46</td><td align="right" headers="Total Elapsed(s)" class='awrc'>257,141.65</td><td align="right" headers="Total IOWait(s)" class='awrc'>92,963.20</td><td align="right" headers="Total Gets" class='awrc'>4,128,165,280</td><td align="right" headers="Total Reads" class='awrc'>55,045,162</td><td align="right" headers="Total Rows" class='awrc'>50,868,515</td><td align="right" headers="Total Cluster(s)" class='awrc'>150,684.18</td><td align="right" headers="Total Execs" class='awrc'>50,868,998</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>81.15</td><td align="right" headers="PerExecution Reads" class='awrc'>1.08</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>80.03</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>90.71</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>88.70</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>93.17</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>91.66</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>90.72</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>94.22</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#8hd7cuj9t6jbx">8hd7cuj9t6jbx</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>1,055.00</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,058.30</td><td align="right" headers="Total IOWait(s)" class='awrnc'>1.46</td><td align="right" headers="Total Gets" class='awrnc'>291,659,086</td><td align="right" headers="Total Reads" class='awrnc'>129</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>527.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>529.15</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.73</td><td align="right" headers="PerExecution Gets" class='awrnc'>145,829,543.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>64.50</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>4.95</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>6.58</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#6sp9qmf2vj08q">6sp9qmf2vj08q</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>1,054.90</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,057.32</td><td align="right" headers="Total IOWait(s)" class='awrc'>1.08</td><td align="right" headers="Total Gets" class='awrc'>277,162,241</td><td align="right" headers="Total Reads" class='awrc'>127</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>527.45</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>528.66</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.54</td><td align="right" headers="PerExecution Gets" class='awrc'>138,581,120.50</td><td align="right" headers="PerExecution Reads" class='awrc'>63.50</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>4.95</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>6.26</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#c7hvsf8j9c5fx">c7hvsf8j9c5fx</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>1,054.18</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,056.44</td><td align="right" headers="Total IOWait(s)" class='awrnc'>1.09</td><td align="right" headers="Total Gets" class='awrnc'>276,009,067</td><td align="right" headers="Total Reads" class='awrnc'>104</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>527.09</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>528.22</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.54</td><td align="right" headers="PerExecution Gets" class='awrnc'>138,004,533.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>52.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>4.94</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>6.23</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#39a45vj8zsf8j">39a45vj8zsf8j</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>1,053.90</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,056.47</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.94</td><td align="right" headers="Total Gets" class='awrc'>284,689,469</td><td align="right" headers="Total Reads" class='awrc'>98</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>526.95</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>528.24</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.47</td><td align="right" headers="PerExecution Gets" class='awrc'>142,344,734.50</td><td align="right" headers="PerExecution Reads" class='awrc'>49.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>4.94</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>6.43</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fzsxh00ghcb1k">fzsxh00ghcb1k</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>1,053.64</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,056.32</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.86</td><td align="right" headers="Total Gets" class='awrnc'>301,844,354</td><td align="right" headers="Total Reads" class='awrnc'>92</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>526.82</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>528.16</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.43</td><td align="right" headers="PerExecution Gets" class='awrnc'>150,922,177.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>46.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>4.94</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>6.81</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#g8v8v5r71h9cm">g8v8v5r71h9cm</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>1,053.31</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,056.33</td><td align="right" headers="Total IOWait(s)" class='awrc'>1.13</td><td align="right" headers="Total Gets" class='awrc'>279,467,768</td><td align="right" headers="Total Reads" class='awrc'>101</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>526.65</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>528.17</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.56</td><td align="right" headers="PerExecution Gets" class='awrc'>139,733,884.00</td><td align="right" headers="PerExecution Reads" class='awrc'>50.50</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>4.94</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>6.31</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#8qh2pxjk3xp9m">8qh2pxjk3xp9m</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>1,053.14</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,056.34</td><td align="right" headers="Total IOWait(s)" class='awrnc'>1.36</td><td align="right" headers="Total Gets" class='awrnc'>301,692,469</td><td align="right" headers="Total Reads" class='awrnc'>114</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>526.57</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>528.17</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.68</td><td align="right" headers="PerExecution Gets" class='awrnc'>150,846,234.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>57.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>4.94</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>6.81</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#fv8pnssaw1s9q">fv8pnssaw1s9q</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>1,045.39</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,057.14</td><td align="right" headers="Total IOWait(s)" class='awrc'>10.91</td><td align="right" headers="Total Gets" class='awrc'>294,119,376</td><td align="right" headers="Total Reads" class='awrc'>15,441</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>522.70</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>528.57</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>5.45</td><td align="right" headers="PerExecution Gets" class='awrc'>147,059,688.00</td><td align="right" headers="PerExecution Reads" class='awrc'>7,720.50</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>4.90</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>6.64</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.03</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#d8zwkn2fy9t2s">d8zwkn2fy9t2s</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>973.60</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>974.60</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.21</td><td align="right" headers="Total Gets" class='awrnc'>276,458,522</td><td align="right" headers="Total Reads" class='awrnc'>9</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>486.80</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>487.30</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.11</td><td align="right" headers="PerExecution Gets" class='awrnc'>138,229,261.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>4.50</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>4.57</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>6.24</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12066"></a>
<h3 class="awr">SQL ordered by User I/O Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   88.7% of Total User I/O Wait Time (s):	  104,804</li>
<li class="awr">Captured PL/SQL account for   35.6% of Total User I/O Wait Time (s):	     104,804</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by User I/O Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>92,963.20</td><td align="right" headers="Total Elapsed(s)" class='awrc'>257,141.65</td><td align="right" headers="Total CPU(s)" class='awrc'>17,067.46</td><td align="right" headers="Total Gets" class='awrc'>4,128,165,280</td><td align="right" headers="Total Reads" class='awrc'>55,045,162</td><td align="right" headers="Total Rows" class='awrc'>50,868,515</td><td align="right" headers="Total Cluster(s)" class='awrc'>150,684.18</td><td align="right" headers="Total Execs" class='awrc'>50,868,998</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>81.15</td><td align="right" headers="PerExecution Reads" class='awrc'>1.08</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>88.70</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>90.71</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>80.03</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>93.17</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>91.66</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>90.72</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>94.22</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fv8pnssaw1s9q">fv8pnssaw1s9q</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>10.91</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,057.14</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,045.39</td><td align="right" headers="Total Gets" class='awrnc'>294,119,376</td><td align="right" headers="Total Reads" class='awrnc'>15,441</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>5.45</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>528.57</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>522.70</td><td align="right" headers="PerExecution Gets" class='awrnc'>147,059,688.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>7,720.50</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.01</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>4.90</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>6.64</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#8hd7cuj9t6jbx">8hd7cuj9t6jbx</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>1.46</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,058.30</td><td align="right" headers="Total CPU(s)" class='awrc'>1,055.00</td><td align="right" headers="Total Gets" class='awrc'>291,659,086</td><td align="right" headers="Total Reads" class='awrc'>129</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>0.73</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>529.15</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>527.50</td><td align="right" headers="PerExecution Gets" class='awrc'>145,829,543.00</td><td align="right" headers="PerExecution Reads" class='awrc'>64.50</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>4.95</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>6.58</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#8qh2pxjk3xp9m">8qh2pxjk3xp9m</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>1.36</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,056.34</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,053.14</td><td align="right" headers="Total Gets" class='awrnc'>301,692,469</td><td align="right" headers="Total Reads" class='awrnc'>114</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>0.68</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>528.17</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>526.57</td><td align="right" headers="PerExecution Gets" class='awrnc'>150,846,234.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>57.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>4.94</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>6.81</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#g8v8v5r71h9cm">g8v8v5r71h9cm</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>1.13</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,056.33</td><td align="right" headers="Total CPU(s)" class='awrc'>1,053.31</td><td align="right" headers="Total Gets" class='awrc'>279,467,768</td><td align="right" headers="Total Reads" class='awrc'>101</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>0.56</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>528.17</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>526.65</td><td align="right" headers="PerExecution Gets" class='awrc'>139,733,884.00</td><td align="right" headers="PerExecution Reads" class='awrc'>50.50</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>4.94</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>6.31</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#c7hvsf8j9c5fx">c7hvsf8j9c5fx</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>1.09</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,056.44</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,054.18</td><td align="right" headers="Total Gets" class='awrnc'>276,009,067</td><td align="right" headers="Total Reads" class='awrnc'>104</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>0.54</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>528.22</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>527.09</td><td align="right" headers="PerExecution Gets" class='awrnc'>138,004,533.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>52.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>4.94</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>6.23</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#6sp9qmf2vj08q">6sp9qmf2vj08q</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>1.08</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,057.32</td><td align="right" headers="Total CPU(s)" class='awrc'>1,054.90</td><td align="right" headers="Total Gets" class='awrc'>277,162,241</td><td align="right" headers="Total Reads" class='awrc'>127</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>0.54</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>528.66</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>527.45</td><td align="right" headers="PerExecution Gets" class='awrc'>138,581,120.50</td><td align="right" headers="PerExecution Reads" class='awrc'>63.50</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>4.95</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>6.26</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#39a45vj8zsf8j">39a45vj8zsf8j</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>0.94</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,056.47</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,053.90</td><td align="right" headers="Total Gets" class='awrnc'>284,689,469</td><td align="right" headers="Total Reads" class='awrnc'>98</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>0.47</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>528.24</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>526.95</td><td align="right" headers="PerExecution Gets" class='awrnc'>142,344,734.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>49.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>4.94</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>6.43</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#fzsxh00ghcb1k">fzsxh00ghcb1k</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>0.86</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,056.32</td><td align="right" headers="Total CPU(s)" class='awrc'>1,053.64</td><td align="right" headers="Total Gets" class='awrc'>301,844,354</td><td align="right" headers="Total Reads" class='awrc'>92</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>0.43</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>528.16</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>526.82</td><td align="right" headers="PerExecution Gets" class='awrc'>150,922,177.00</td><td align="right" headers="PerExecution Reads" class='awrc'>46.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>4.94</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>6.81</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#d8zwkn2fy9t2s">d8zwkn2fy9t2s</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>0.21</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>974.60</td><td align="right" headers="Total CPU(s)" class='awrnc'>973.60</td><td align="right" headers="Total Gets" class='awrnc'>276,458,522</td><td align="right" headers="Total Reads" class='awrnc'>9</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>0.11</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>487.30</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>486.80</td><td align="right" headers="PerExecution Gets" class='awrnc'>138,229,261.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>4.50</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>4.57</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>6.24</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12062"></a>
<h3 class="awr">SQL ordered by Gets (Global)</h3>
<ul>
<li class="awr">Total Buffer Gets:   4,430,834,022</li>
<li class="awr">Captured SQL account for   94.3% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Gets (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Gets" class='awrclb'>4,128,165,280</td><td align="right" headers="Total Reads" class='awrc'>55,045,162</td><td align="right" headers="Total Elapsed(s)" class='awrc'>257,141.65</td><td align="right" headers="Total CPU(s)" class='awrc'>17,067.46</td><td align="right" headers="Total IOWait(s)" class='awrc'>92,963.20</td><td align="right" headers="Total Rows" class='awrc'>50,868,515</td><td align="right" headers="Total Cluster(s)" class='awrc'>150,684.18</td><td align="right" headers="Total Execs" class='awrc'>50,868,998</td><td align="right" headers="PerExecution Gets" class='awrclb'>81.15</td><td align="right" headers="PerExecution Reads" class='awrc'>1.08</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>93.17</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>91.66</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>90.71</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>80.03</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>88.70</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>90.72</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>94.22</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#b329y81c4wbq1">b329y81c4wbq1</a></td><td align="right" headers="Total Gets" class='awrnclb'>341,634,534</td><td align="right" headers="Total Reads" class='awrnc'>7</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>973.67</td><td align="right" headers="Total CPU(s)" class='awrnc'>973.03</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.04</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution Gets" class='awrnclb'>170,817,267.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>3.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>486.83</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>486.51</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.02</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>7.71</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>4.56</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#fzsxh00ghcb1k">fzsxh00ghcb1k</a></td><td align="right" headers="Total Gets" class='awrclb'>301,844,354</td><td align="right" headers="Total Reads" class='awrc'>92</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,056.32</td><td align="right" headers="Total CPU(s)" class='awrc'>1,053.64</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.86</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution Gets" class='awrclb'>150,922,177.00</td><td align="right" headers="PerExecution Reads" class='awrc'>46.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>528.16</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>526.82</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.43</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>6.81</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>4.94</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#8qh2pxjk3xp9m">8qh2pxjk3xp9m</a></td><td align="right" headers="Total Gets" class='awrnclb'>301,692,469</td><td align="right" headers="Total Reads" class='awrnc'>114</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,056.34</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,053.14</td><td align="right" headers="Total IOWait(s)" class='awrnc'>1.36</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution Gets" class='awrnclb'>150,846,234.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>57.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>528.17</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>526.57</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.68</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>6.81</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>4.94</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#fndd8kn6zzc00">fndd8kn6zzc00</a></td><td align="right" headers="Total Gets" class='awrclb'>297,209,006</td><td align="right" headers="Total Reads" class='awrc'>8</td><td align="right" headers="Total Elapsed(s)" class='awrc'>972.68</td><td align="right" headers="Total CPU(s)" class='awrc'>971.18</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.71</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution Gets" class='awrclb'>148,604,503.00</td><td align="right" headers="PerExecution Reads" class='awrc'>4.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>486.34</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>485.59</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.36</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>6.71</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>4.55</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fv8pnssaw1s9q">fv8pnssaw1s9q</a></td><td align="right" headers="Total Gets" class='awrnclb'>294,119,376</td><td align="right" headers="Total Reads" class='awrnc'>15,441</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,057.14</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,045.39</td><td align="right" headers="Total IOWait(s)" class='awrnc'>10.91</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution Gets" class='awrnclb'>147,059,688.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>7,720.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>528.57</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>522.70</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>5.45</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>6.64</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>4.90</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#8hd7cuj9t6jbx">8hd7cuj9t6jbx</a></td><td align="right" headers="Total Gets" class='awrclb'>291,659,086</td><td align="right" headers="Total Reads" class='awrc'>129</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,058.30</td><td align="right" headers="Total CPU(s)" class='awrc'>1,055.00</td><td align="right" headers="Total IOWait(s)" class='awrc'>1.46</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution Gets" class='awrclb'>145,829,543.00</td><td align="right" headers="PerExecution Reads" class='awrc'>64.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>529.15</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>527.50</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.73</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>6.58</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>4.95</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#39a45vj8zsf8j">39a45vj8zsf8j</a></td><td align="right" headers="Total Gets" class='awrnclb'>284,689,469</td><td align="right" headers="Total Reads" class='awrnc'>98</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,056.47</td><td align="right" headers="Total CPU(s)" class='awrnc'>1,053.90</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.94</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution Gets" class='awrnclb'>142,344,734.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>49.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>528.24</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>526.95</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.47</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>6.43</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>4.94</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#g8v8v5r71h9cm">g8v8v5r71h9cm</a></td><td align="right" headers="Total Gets" class='awrclb'>279,467,768</td><td align="right" headers="Total Reads" class='awrc'>101</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,056.33</td><td align="right" headers="Total CPU(s)" class='awrc'>1,053.31</td><td align="right" headers="Total IOWait(s)" class='awrc'>1.13</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution Gets" class='awrclb'>139,733,884.00</td><td align="right" headers="PerExecution Reads" class='awrc'>50.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>528.17</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>526.65</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.56</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>6.31</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>4.94</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12063"></a>
<h3 class="awr">SQL ordered by Reads (Global)</h3>
<ul>
<li class="awr">Total Disk Reads:      60,052,613</li>
<li class="awr">Captured SQL account for   91.7% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Reads (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Reads" class='awrclb'>55,045,162</td><td align="right" headers="Total Gets" class='awrc'>4,128,165,280</td><td align="right" headers="Total Elapsed(s)" class='awrc'>257,141.65</td><td align="right" headers="Total CPU(s)" class='awrc'>17,067.46</td><td align="right" headers="Total IOWait(s)" class='awrc'>92,963.20</td><td align="right" headers="Total Rows" class='awrc'>50,868,515</td><td align="right" headers="Total Cluster(s)" class='awrc'>150,684.18</td><td align="right" headers="Total Execs" class='awrc'>50,868,998</td><td align="right" headers="PerExecution Reads" class='awrclb'>1.08</td><td align="right" headers="PerExecution Gets" class='awrc'>81.15</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>91.66</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>93.17</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>90.71</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>80.03</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>88.70</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>90.72</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>94.22</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#a52uzk244rp72">a52uzk244rp72</a></td><td align="right" headers="Total Reads" class='awrnclb'>1,165,136</td><td align="right" headers="Total Gets" class='awrnc'>147,356,341</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,015.62</td><td align="right" headers="Total CPU(s)" class='awrnc'>556.09</td><td align="right" headers="Total IOWait(s)" class='awrnc'>488.08</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>6.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution Reads" class='awrnclb'>582,568.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>73,678,170.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>507.81</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>278.05</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>244.04</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>3.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>1.94</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>3.33</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.36</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>2.61</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.47</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#a2q0c1jwp8bph">a2q0c1jwp8bph</a></td><td align="right" headers="Total Reads" class='awrclb'>1,160,034</td><td align="right" headers="Total Gets" class='awrc'>3,296,709</td><td align="right" headers="Total Elapsed(s)" class='awrc'>529.21</td><td align="right" headers="Total CPU(s)" class='awrc'>70.49</td><td align="right" headers="Total IOWait(s)" class='awrc'>493.58</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.16</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>1,160,034.00</td><td align="right" headers="PerExecution Gets" class='awrc'>3,296,709.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>529.21</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>70.49</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>493.58</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.16</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>1.93</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.07</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.33</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.47</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#0yxz3m5s6rbuc">0yxz3m5s6rbuc</a></td><td align="right" headers="Total Reads" class='awrnclb'>1,157,308</td><td align="right" headers="Total Gets" class='awrnc'>3,275,461</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>528.24</td><td align="right" headers="Total CPU(s)" class='awrnc'>70.77</td><td align="right" headers="Total IOWait(s)" class='awrnc'>492.05</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.27</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>1,157,308.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>3,275,461.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>528.24</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>70.77</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>492.05</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.27</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>1.93</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.07</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.33</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.47</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#0hkn1frumxu6m">0hkn1frumxu6m</a></td><td align="right" headers="Total Reads" class='awrclb'>1,147,285</td><td align="right" headers="Total Gets" class='awrc'>3,535,303</td><td align="right" headers="Total Elapsed(s)" class='awrc'>529.22</td><td align="right" headers="Total CPU(s)" class='awrc'>71.30</td><td align="right" headers="Total IOWait(s)" class='awrc'>492.59</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.26</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>1,147,285.00</td><td align="right" headers="PerExecution Gets" class='awrc'>3,535,303.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>529.22</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>71.30</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>492.59</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.26</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>1.91</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.08</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.33</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.47</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#dhz4fxc8z3b1n">dhz4fxc8z3b1n</a></td><td align="right" headers="Total Reads" class='awrnclb'>530,796</td><td align="right" headers="Total Gets" class='awrnc'>979,307</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>974.45</td><td align="right" headers="Total CPU(s)" class='awrnc'>37.60</td><td align="right" headers="Total IOWait(s)" class='awrnc'>959.67</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution Reads" class='awrnclb'>265,398.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>489,653.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>487.23</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>18.80</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>479.83</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>0.88</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.02</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.92</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#6gfqnqrxd0dmy">6gfqnqrxd0dmy</a></td><td align="right" headers="Total Reads" class='awrclb'>529,499</td><td align="right" headers="Total Gets" class='awrc'>1,049,342</td><td align="right" headers="Total Elapsed(s)" class='awrc'>974.92</td><td align="right" headers="Total CPU(s)" class='awrc'>38.25</td><td align="right" headers="Total IOWait(s)" class='awrc'>959.92</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution Reads" class='awrclb'>264,749.50</td><td align="right" headers="PerExecution Gets" class='awrc'>524,671.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>487.46</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>19.13</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>479.96</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>0.88</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.02</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.92</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#6pcyz05z3k6jd">6pcyz05z3k6jd</a></td><td align="right" headers="Total Reads" class='awrnclb'>528,853</td><td align="right" headers="Total Gets" class='awrnc'>994,999</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>973.58</td><td align="right" headers="Total CPU(s)" class='awrnc'>37.62</td><td align="right" headers="Total IOWait(s)" class='awrnc'>958.74</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution Reads" class='awrnclb'>264,426.50</td><td align="right" headers="PerExecution Gets" class='awrnc'>497,499.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>486.79</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>18.81</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>479.37</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>0.88</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.02</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.91</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3x31q3h9nbczf">3x31q3h9nbczf</a></td><td align="right" headers="Total Reads" class='awrclb'>527,934</td><td align="right" headers="Total Gets" class='awrc'>968,745</td><td align="right" headers="Total Elapsed(s)" class='awrc'>974.83</td><td align="right" headers="Total CPU(s)" class='awrc'>37.48</td><td align="right" headers="Total IOWait(s)" class='awrc'>960.25</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution Reads" class='awrclb'>263,967.00</td><td align="right" headers="PerExecution Gets" class='awrc'>484,372.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>487.41</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>18.74</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>480.13</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>0.88</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.02</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.92</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12081"></a>
<h3 class="awr">SQL ordered by UnOptimized Read Requests (Global)</h3>
<ul>
<li class="awr">Total Physical Read Requests:	   60,046,503</li>
<li class="awr">Captured SQL account for    0.5% of Total</li>
<li class="awr">Total UnOptimized Read Requests:      60,046,503</li>
<li class="awr">Captured SQL account for    0.5% of Total</li>
<li class="awr">Total Optimized Read Requests:		     1</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by UnOptimized Read Requests (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 9" id="Total">Total</th>
<th class="awrbg" colspan=" 8" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 8" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#a52uzk244rp72">a52uzk244rp72</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>1,165,136</td><td align="right" headers="Total Requests" class='awrc'>1,165,136</td><td align="right" headers="Total Reads" class='awrc'>1,165,136</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,015.62</td><td align="right" headers="Total CPU(s)" class='awrc'>556.09</td><td align="right" headers="Total IOWait(s)" class='awrc'>488.08</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>6.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>582,568.00</td><td align="right" headers="PerExecution Requests" class='awrc'>582,568.00</td><td align="right" headers="PerExecution Reads" class='awrc'>582,568.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>507.81</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>278.05</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>244.04</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>3.00</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.94</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.94</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.94</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.36</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>2.61</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.47</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#a2q0c1jwp8bph">a2q0c1jwp8bph</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>1,160,034</td><td align="right" headers="Total Requests" class='awrnc'>1,160,034</td><td align="right" headers="Total Reads" class='awrnc'>1,160,034</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>529.21</td><td align="right" headers="Total CPU(s)" class='awrnc'>70.49</td><td align="right" headers="Total IOWait(s)" class='awrnc'>493.58</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.16</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>1,160,034.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>1,160,034.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>1,160,034.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>529.21</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>70.49</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>493.58</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.16</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.93</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.93</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.93</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.33</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.47</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#0yxz3m5s6rbuc">0yxz3m5s6rbuc</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>1,157,308</td><td align="right" headers="Total Requests" class='awrc'>1,157,308</td><td align="right" headers="Total Reads" class='awrc'>1,157,308</td><td align="right" headers="Total Elapsed(s)" class='awrc'>528.24</td><td align="right" headers="Total CPU(s)" class='awrc'>70.77</td><td align="right" headers="Total IOWait(s)" class='awrc'>492.05</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.27</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>1,157,308.00</td><td align="right" headers="PerExecution Requests" class='awrc'>1,157,308.00</td><td align="right" headers="PerExecution Reads" class='awrc'>1,157,308.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>528.24</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>70.77</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>492.05</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.27</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.93</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.93</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.93</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.33</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.47</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#0hkn1frumxu6m">0hkn1frumxu6m</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>1,147,285</td><td align="right" headers="Total Requests" class='awrnc'>1,147,285</td><td align="right" headers="Total Reads" class='awrnc'>1,147,285</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>529.22</td><td align="right" headers="Total CPU(s)" class='awrnc'>71.30</td><td align="right" headers="Total IOWait(s)" class='awrnc'>492.59</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.26</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>1,147,285.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>1,147,285.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>1,147,285.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>529.22</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>71.30</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>492.59</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.26</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.91</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.91</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.91</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.33</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.47</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#dhz4fxc8z3b1n">dhz4fxc8z3b1n</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>530,796</td><td align="right" headers="Total Requests" class='awrc'>530,796</td><td align="right" headers="Total Reads" class='awrc'>530,796</td><td align="right" headers="Total Elapsed(s)" class='awrc'>974.45</td><td align="right" headers="Total CPU(s)" class='awrc'>37.60</td><td align="right" headers="Total IOWait(s)" class='awrc'>959.67</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>265,398.00</td><td align="right" headers="PerExecution Requests" class='awrc'>265,398.00</td><td align="right" headers="PerExecution Reads" class='awrc'>265,398.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>487.23</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>18.80</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>479.83</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>0.88</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>0.88</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.88</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.92</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#6gfqnqrxd0dmy">6gfqnqrxd0dmy</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>529,499</td><td align="right" headers="Total Requests" class='awrnc'>529,499</td><td align="right" headers="Total Reads" class='awrnc'>529,499</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>974.92</td><td align="right" headers="Total CPU(s)" class='awrnc'>38.25</td><td align="right" headers="Total IOWait(s)" class='awrnc'>959.92</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>264,749.50</td><td align="right" headers="PerExecution Requests" class='awrnc'>264,749.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>264,749.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>487.46</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>19.13</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>479.96</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>0.88</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>0.88</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.88</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.92</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#6pcyz05z3k6jd">6pcyz05z3k6jd</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>528,853</td><td align="right" headers="Total Requests" class='awrc'>528,853</td><td align="right" headers="Total Reads" class='awrc'>528,853</td><td align="right" headers="Total Elapsed(s)" class='awrc'>973.58</td><td align="right" headers="Total CPU(s)" class='awrc'>37.62</td><td align="right" headers="Total IOWait(s)" class='awrc'>958.74</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>264,426.50</td><td align="right" headers="PerExecution Requests" class='awrc'>264,426.50</td><td align="right" headers="PerExecution Reads" class='awrc'>264,426.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>486.79</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>18.81</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>479.37</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>0.88</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>0.88</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.88</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.91</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3x31q3h9nbczf">3x31q3h9nbczf</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>527,934</td><td align="right" headers="Total Requests" class='awrnc'>527,934</td><td align="right" headers="Total Reads" class='awrnc'>527,934</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>974.83</td><td align="right" headers="Total CPU(s)" class='awrnc'>37.48</td><td align="right" headers="Total IOWait(s)" class='awrnc'>960.25</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>263,967.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>263,967.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>263,967.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>487.41</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>18.74</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>480.13</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>0.88</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>0.88</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.88</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.92</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#3b0dw8qugt8u0">3b0dw8qugt8u0</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>527,891</td><td align="right" headers="Total Requests" class='awrc'>527,891</td><td align="right" headers="Total Reads" class='awrc'>527,891</td><td align="right" headers="Total Elapsed(s)" class='awrc'>972.73</td><td align="right" headers="Total CPU(s)" class='awrc'>36.45</td><td align="right" headers="Total IOWait(s)" class='awrc'>958.82</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>263,945.50</td><td align="right" headers="PerExecution Requests" class='awrc'>263,945.50</td><td align="right" headers="PerExecution Reads" class='awrc'>263,945.50</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>486.36</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>18.23</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>479.41</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>0.88</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>0.88</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.88</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.17</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.91</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12065"></a>
<h3 class="awr">SQL ordered by Executions (Global)</h3>
<ul>
<li class="awr">Total Executions:      53,988,472</li>
<li class="awr">Captured SQL account for   94.3% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Executions (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Execs" class='awrclb'>50,868,998</td><td align="right" headers="Total Elapsed(s)" class='awrc'>257,141.65</td><td align="right" headers="Total CPU(s)" class='awrc'>17,067.46</td><td align="right" headers="Total IOWait(s)" class='awrc'>92,963.20</td><td align="right" headers="Total Gets" class='awrc'>4,128,165,280</td><td align="right" headers="Total Reads" class='awrc'>55,045,162</td><td align="right" headers="Total Rows" class='awrc'>50,868,515</td><td align="right" headers="Total Cluster(s)" class='awrc'>150,684.18</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>81.15</td><td align="right" headers="PerExecution Reads" class='awrc'>1.08</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>94.22</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>90.71</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>80.03</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>88.70</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>93.17</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>91.66</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>90.72</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#24djtk7r8fz33">24djtk7r8fz33</a></td><td align="right" headers="Total Execs" class='awrnclb'>3,435</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.58</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.20</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.08</td><td align="right" headers="Total Gets" class='awrnc'>10,331</td><td align="right" headers="Total Reads" class='awrnc'>11</td><td align="right" headers="Total Rows" class='awrnc'>3,334</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>3.01</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>0.97</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.01</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>update svcobj_access$ set acce...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#f3ww8rgva3hrs">f3ww8rgva3hrs</a></td><td align="right" headers="Total Execs" class='awrclb'>2,398</td><td align="right" headers="Total Elapsed(s)" class='awrc'>5.62</td><td align="right" headers="Total CPU(s)" class='awrc'>0.38</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.89</td><td align="right" headers="Total Gets" class='awrc'>8,438</td><td align="right" headers="Total Reads" class='awrc'>78</td><td align="right" headers="Total Rows" class='awrc'>2,398</td><td align="right" headers="Total Cluster(s)" class='awrc'>4.43</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>3.52</td><td align="right" headers="PerExecution Reads" class='awrc'>0.03</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>update /* KSXM:FLUSH COL */ sy...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#87gaftwrm2h68">87gaftwrm2h68</a></td><td align="right" headers="Total Execs" class='awrnclb'>1,645</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1.26</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.09</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.92</td><td align="right" headers="Total Gets" class='awrnc'>3,573</td><td align="right" headers="Total Reads" class='awrnc'>77</td><td align="right" headers="Total Rows" class='awrnc'>277</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.16</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>2.17</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.05</td><td align="right" headers="PerExecution Rows" class='awrnc'>0.17</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select o.owner#, o.name, o.nam...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#0gx3b09qrx9f5">0gx3b09qrx9f5</a></td><td align="right" headers="Total Execs" class='awrclb'>751</td><td align="right" headers="Total Elapsed(s)" class='awrc'>2.46</td><td align="right" headers="Total CPU(s)" class='awrc'>0.13</td><td align="right" headers="Total IOWait(s)" class='awrc'>1.07</td><td align="right" headers="Total Gets" class='awrc'>1,613</td><td align="right" headers="Total Reads" class='awrc'>21</td><td align="right" headers="Total Rows" class='awrc'>14</td><td align="right" headers="Total Cluster(s)" class='awrc'>1.18</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>2.15</td><td align="right" headers="PerExecution Reads" class='awrc'>0.03</td><td align="right" headers="PerExecution Rows" class='awrc'>0.02</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>select obj#, index# from oid$ ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#acmvv4fhdc9zh">acmvv4fhdc9zh</a></td><td align="right" headers="Total Execs" class='awrnclb'>730</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>4.78</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.21</td><td align="right" headers="Total IOWait(s)" class='awrnc'>3.69</td><td align="right" headers="Total Gets" class='awrnc'>2,704</td><td align="right" headers="Total Reads" class='awrnc'>298</td><td align="right" headers="Total Rows" class='awrnc'>516</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.99</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.01</td><td align="right" headers="PerExecution Gets" class='awrnc'>3.70</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.41</td><td align="right" headers="PerExecution Rows" class='awrnc'>0.71</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select obj#, type#, ctime, mti...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#53saa2zkr6wc3">53saa2zkr6wc3</a></td><td align="right" headers="Total Execs" class='awrclb'>641</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.59</td><td align="right" headers="Total CPU(s)" class='awrc'>0.04</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.54</td><td align="right" headers="Total Gets" class='awrc'>2,998</td><td align="right" headers="Total Reads" class='awrc'>39</td><td align="right" headers="Total Rows" class='awrc'>849</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>4.68</td><td align="right" headers="PerExecution Reads" class='awrc'>0.06</td><td align="right" headers="PerExecution Rows" class='awrc'>1.32</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>select intcol#, nvl(pos#, 0), ...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td><td align="right" headers="Total Execs" class='awrnclb'>511</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>237.76</td><td align="right" headers="Total CPU(s)" class='awrnc'>6.76</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.64</td><td align="right" headers="Total Gets" class='awrnc'>1,212</td><td align="right" headers="Total Reads" class='awrnc'>82</td><td align="right" headers="Total Rows" class='awrnc'>511</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.16</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.47</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>2.37</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.16</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.08</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#5cu0x10yu88sw">5cu0x10yu88sw</a></td><td align="right" headers="Total Execs" class='awrclb'>405</td><td align="right" headers="Total Elapsed(s)" class='awrc'>5.07</td><td align="right" headers="Total CPU(s)" class='awrc'>0.15</td><td align="right" headers="Total IOWait(s)" class='awrc'>2.52</td><td align="right" headers="Total Gets" class='awrc'>2,686</td><td align="right" headers="Total Reads" class='awrc'>67</td><td align="right" headers="Total Rows" class='awrc'>405</td><td align="right" headers="Total Cluster(s)" class='awrc'>2.43</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution Gets" class='awrc'>6.63</td><td align="right" headers="PerExecution Reads" class='awrc'>0.17</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>merge into sys.wri$_index_usag...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12064"></a>
<h3 class="awr">SQL ordered by Cluster Wait Time (Global)</h3>
<ul>
<li class="awr">Total Cluster Wait Time (s):	     166,093</li>
<li class="awr">Captured SQL account for   90.8% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Cluster Wait Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>150,684.18</td><td align="right" headers="Total Elapsed(s)" class='awrc'>257,141.65</td><td align="right" headers="Total CPU(s)" class='awrc'>17,067.46</td><td align="right" headers="Total IOWait(s)" class='awrc'>92,963.20</td><td align="right" headers="Total Gets" class='awrc'>4,128,165,280</td><td align="right" headers="Total Reads" class='awrc'>55,045,162</td><td align="right" headers="Total Rows" class='awrc'>50,868,515</td><td align="right" headers="Total Execs" class='awrc'>50,868,998</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>81.15</td><td align="right" headers="PerExecution Reads" class='awrc'>1.08</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>90.72</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>90.71</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>80.03</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>88.70</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>93.17</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>91.66</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>94.22</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#2ax9k75b2p0d8">2ax9k75b2p0d8</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>865.31</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,058.20</td><td align="right" headers="Total CPU(s)" class='awrnc'>20.39</td><td align="right" headers="Total IOWait(s)" class='awrnc'>187.10</td><td align="right" headers="Total Gets" class='awrnc'>134,723</td><td align="right" headers="Total Reads" class='awrnc'>128,075</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>432.65</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>529.10</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>10.20</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>93.55</td><td align="right" headers="PerExecution Gets" class='awrnc'>67,361.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>64,037.50</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.52</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.10</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.21</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#drvvtfj8as01g">drvvtfj8as01g</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>863.33</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,059.44</td><td align="right" headers="Total CPU(s)" class='awrc'>20.14</td><td align="right" headers="Total IOWait(s)" class='awrc'>191.27</td><td align="right" headers="Total Gets" class='awrc'>141,355</td><td align="right" headers="Total Reads" class='awrc'>134,807</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>431.67</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>529.72</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>10.07</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>95.64</td><td align="right" headers="PerExecution Gets" class='awrc'>70,677.50</td><td align="right" headers="PerExecution Reads" class='awrc'>67,403.50</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.52</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.09</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.22</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3nbpzvhcr3kfm">3nbpzvhcr3kfm</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>861.23</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,059.29</td><td align="right" headers="Total CPU(s)" class='awrnc'>21.24</td><td align="right" headers="Total IOWait(s)" class='awrnc'>192.87</td><td align="right" headers="Total Gets" class='awrnc'>148,839</td><td align="right" headers="Total Reads" class='awrnc'>141,320</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>430.61</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>529.65</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>10.62</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>96.44</td><td align="right" headers="PerExecution Gets" class='awrnc'>74,419.50</td><td align="right" headers="PerExecution Reads" class='awrnc'>70,660.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.52</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.10</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.24</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#90vrpau1cn37t">90vrpau1cn37t</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>860.69</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,058.76</td><td align="right" headers="Total CPU(s)" class='awrc'>21.23</td><td align="right" headers="Total IOWait(s)" class='awrc'>193.03</td><td align="right" headers="Total Gets" class='awrc'>136,165</td><td align="right" headers="Total Reads" class='awrc'>128,952</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>430.35</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>529.38</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>10.61</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>96.52</td><td align="right" headers="PerExecution Gets" class='awrc'>68,082.50</td><td align="right" headers="PerExecution Reads" class='awrc'>64,476.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.52</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.10</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#6wpwn81t8t9zf">6wpwn81t8t9zf</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>854.58</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,058.64</td><td align="right" headers="Total CPU(s)" class='awrnc'>21.08</td><td align="right" headers="Total IOWait(s)" class='awrnc'>198.94</td><td align="right" headers="Total Gets" class='awrnc'>146,574</td><td align="right" headers="Total Reads" class='awrnc'>139,520</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>427.29</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>529.32</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>10.54</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>99.47</td><td align="right" headers="PerExecution Gets" class='awrnc'>73,287.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>69,760.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.51</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.10</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.23</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#99ksdkuvquzp0">99ksdkuvquzp0</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>853.14</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,059.01</td><td align="right" headers="Total CPU(s)" class='awrc'>21.99</td><td align="right" headers="Total IOWait(s)" class='awrc'>202.59</td><td align="right" headers="Total Gets" class='awrc'>156,544</td><td align="right" headers="Total Reads" class='awrc'>148,257</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>426.57</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>529.51</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>10.99</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>101.29</td><td align="right" headers="PerExecution Gets" class='awrc'>78,272.00</td><td align="right" headers="PerExecution Reads" class='awrc'>74,128.50</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.51</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.10</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.25</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#66r22xx72w6mp">66r22xx72w6mp</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>852.35</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>1,058.18</td><td align="right" headers="Total CPU(s)" class='awrnc'>22.52</td><td align="right" headers="Total IOWait(s)" class='awrnc'>199.22</td><td align="right" headers="Total Gets" class='awrnc'>161,588</td><td align="right" headers="Total Reads" class='awrnc'>151,562</td><td align="right" headers="Total Rows" class='awrnc'>2</td><td align="right" headers="Total Execs" class='awrnc'>2</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>426.18</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>529.09</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>11.26</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>99.61</td><td align="right" headers="PerExecution Gets" class='awrnc'>80,794.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>75,781.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.51</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.11</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.19</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.25</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#addq9vdq9961y">addq9vdq9961y</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>851.62</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1,058.50</td><td align="right" headers="Total CPU(s)" class='awrc'>21.93</td><td align="right" headers="Total IOWait(s)" class='awrc'>200.33</td><td align="right" headers="Total Gets" class='awrc'>155,782</td><td align="right" headers="Total Reads" class='awrc'>148,418</td><td align="right" headers="Total Rows" class='awrc'>2</td><td align="right" headers="Total Execs" class='awrc'>2</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>425.81</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>529.25</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>10.97</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>100.17</td><td align="right" headers="PerExecution Gets" class='awrc'>77,891.00</td><td align="right" headers="PerExecution Reads" class='awrc'>74,209.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.51</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.37</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.10</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.19</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.25</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="623"></a>
<h2 class="awr">
Global Activity Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12071">System Statistics (Global)</a></li>
<li class="awr"><a class="awr" href="#12072">Global Messaging Statistics (Global)</a></li>
<li class="awr"><a class="awr" href="#12073">System Statistics (Absolute Values)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12071"></a>
<h3 class="awr">System Statistics (Global)</h3>
<ul>
<li class="awr"> per Second Average - average of per-instance per Second rates </li>
<li class="awr"> per Second Std Dev - standard deviation of per-instance per Second rates </li>
<li class="awr"> per Second Min     - minimum of per-instance per Second rates </li>
<li class="awr"> per Second Max     - maximum of per-instance per Second rates</li>
</ul>
<table border="0" class="tdiff" summary="System Statistics (Global). . per Second Average - average of per-instance per Second rates. per Second Std Dev - standard deviation of per-instance per Second rates. per Second Min - minimum of per-instance per Second rates. per Second Max - maximum of per-instance per Second rates"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="perSecond">per Second</th>
</tr><tr>
<th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th><th class="awrbg" scope="col" id="Average">Average</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th></tr>
<tr><td scope="row" class='awrc'>ASSM bg: segment fix monitor</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM cbk:blocks examined</td><td align="right" class='awrnc'>2,023</td><td align="right" class='awrnc'>2.68</td><td align="right" class='awrnc'>4.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.34</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>1.32</td><td align="right" headers="perSecond Max" class='awrncrb'>1.36</td></tr>
<tr><td scope="row" class='awrc'>ASSM cbk:blocks marked full</td><td align="right" class='awrc'>554</td><td align="right" class='awrc'>0.74</td><td align="right" class='awrc'>1.09</td><td align="right" headers="perSecond Average" class='awrclb'>0.37</td><td align="right" headers="perSecond StdDev" class='awrc'>0.06</td><td align="right" headers="perSecond Min" class='awrc'>0.32</td><td align="right" headers="perSecond Max" class='awrcrb'>0.41</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L1 bitmaps examined</td><td align="right" class='awrnc'>1,596</td><td align="right" class='awrnc'>2.12</td><td align="right" class='awrnc'>3.15</td><td align="right" headers="perSecond Average" class='awrnclb'>1.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.08</td><td align="right" headers="perSecond Min" class='awrnc'>1.00</td><td align="right" headers="perSecond Max" class='awrncrb'>1.11</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:L2 bitmap full</td><td align="right" class='awrc'>65</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.13</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L2 bitmaps examined</td><td align="right" class='awrnc'>716</td><td align="right" class='awrnc'>0.95</td><td align="right" class='awrnc'>1.42</td><td align="right" headers="perSecond Average" class='awrnclb'>0.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.45</td><td align="right" headers="perSecond Max" class='awrncrb'>0.50</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search all</td><td align="right" class='awrc'>81</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.16</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search hint</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.10</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search steal</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.09</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:bump HWM</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.09</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free block</td><td align="right" class='awrc'>1,469</td><td align="right" class='awrc'>1.95</td><td align="right" class='awrc'>2.90</td><td align="right" headers="perSecond Average" class='awrclb'>0.97</td><td align="right" headers="perSecond StdDev" class='awrc'>0.09</td><td align="right" headers="perSecond Min" class='awrc'>0.91</td><td align="right" headers="perSecond Max" class='awrcrb'>1.04</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free data block</td><td align="right" class='awrnc'>1,039</td><td align="right" class='awrnc'>1.38</td><td align="right" class='awrnc'>2.05</td><td align="right" headers="perSecond Average" class='awrnclb'>0.69</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.15</td><td align="right" headers="perSecond Min" class='awrnc'>0.58</td><td align="right" headers="perSecond Max" class='awrncrb'>0.80</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free index block</td><td align="right" class='awrc'>430</td><td align="right" class='awrc'>0.57</td><td align="right" class='awrc'>0.85</td><td align="right" headers="perSecond Average" class='awrclb'>0.29</td><td align="right" headers="perSecond StdDev" class='awrc'>0.07</td><td align="right" headers="perSecond Min" class='awrc'>0.24</td><td align="right" headers="perSecond Max" class='awrcrb'>0.33</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:good hint</td><td align="right" class='awrnc'>1,241</td><td align="right" class='awrnc'>1.65</td><td align="right" class='awrnc'>2.45</td><td align="right" headers="perSecond Average" class='awrnclb'>0.82</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.05</td><td align="right" headers="perSecond Min" class='awrnc'>0.79</td><td align="right" headers="perSecond Max" class='awrncrb'>0.86</td></tr>
<tr><td scope="row" class='awrc'>ASSM rsv:fill reserve</td><td align="right" class='awrc'>35</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>ASSM wasted db state change</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>Batched IO (bound) vector count</td><td align="right" class='awrc'>729</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>1.44</td><td align="right" headers="perSecond Average" class='awrclb'>0.48</td><td align="right" headers="perSecond StdDev" class='awrc'>0.40</td><td align="right" headers="perSecond Min" class='awrc'>0.20</td><td align="right" headers="perSecond Max" class='awrcrb'>0.77</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO (full) vector count</td><td align="right" class='awrnc'>255,247</td><td align="right" class='awrnc'>338.77</td><td align="right" class='awrnc'>504.44</td><td align="right" headers="perSecond Average" class='awrnclb'>338.77</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>338.77</td><td align="right" headers="perSecond Max" class='awrncrb'>338.77</td></tr>
<tr><td scope="row" class='awrc'>Batched IO block miss count</td><td align="right" class='awrc'>57,943,650</td><td align="right" class='awrc'>76,898.80</td><td align="right" class='awrc'>114,513.14</td><td align="right" headers="perSecond Average" class='awrclb'>38,449.40</td><td align="right" headers="perSecond StdDev" class='awrc'>10,349.57</td><td align="right" headers="perSecond Min" class='awrc'>31,131.15</td><td align="right" headers="perSecond Max" class='awrcrb'>45,767.65</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO double miss count</td><td align="right" class='awrnc'>1,214,585</td><td align="right" class='awrnc'>1,611.92</td><td align="right" class='awrnc'>2,400.37</td><td align="right" headers="perSecond Average" class='awrnclb'>805.96</td><td align="right" headers="perSecond StdDev" class='awrnc'>101.22</td><td align="right" headers="perSecond Min" class='awrnc'>734.39</td><td align="right" headers="perSecond Max" class='awrncrb'>877.53</td></tr>
<tr><td scope="row" class='awrc'>Batched IO same unit count</td><td align="right" class='awrc'>584</td><td align="right" class='awrc'>0.78</td><td align="right" class='awrc'>1.15</td><td align="right" headers="perSecond Average" class='awrclb'>0.39</td><td align="right" headers="perSecond StdDev" class='awrc'>0.28</td><td align="right" headers="perSecond Min" class='awrc'>0.19</td><td align="right" headers="perSecond Max" class='awrcrb'>0.58</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO single block count</td><td align="right" class='awrnc'>263,008</td><td align="right" class='awrnc'>349.07</td><td align="right" class='awrnc'>519.78</td><td align="right" headers="perSecond Average" class='awrnclb'>174.53</td><td align="right" headers="perSecond StdDev" class='awrnc'>240.24</td><td align="right" headers="perSecond Min" class='awrnc'>4.66</td><td align="right" headers="perSecond Max" class='awrncrb'>344.41</td></tr>
<tr><td scope="row" class='awrc'>Batched IO vector block count</td><td align="right" class='awrc'>57,953,302</td><td align="right" class='awrc'>76,911.61</td><td align="right" class='awrc'>114,532.22</td><td align="right" headers="perSecond Average" class='awrclb'>38,455.81</td><td align="right" headers="perSecond StdDev" class='awrc'>10,362.33</td><td align="right" headers="perSecond Min" class='awrc'>31,128.53</td><td align="right" headers="perSecond Max" class='awrcrb'>45,783.08</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO vector read count</td><td align="right" class='awrnc'>934,415</td><td align="right" class='awrnc'>1,240.09</td><td align="right" class='awrnc'>1,846.67</td><td align="right" headers="perSecond Average" class='awrnclb'>620.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>159.02</td><td align="right" headers="perSecond Min" class='awrnc'>507.60</td><td align="right" headers="perSecond Max" class='awrncrb'>732.49</td></tr>
<tr><td scope="row" class='awrc'>Block Cleanout Optim referenced</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.12</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>CCursor + sql area evicted</td><td align="right" class='awrnc'>583</td><td align="right" class='awrnc'>0.77</td><td align="right" class='awrnc'>1.15</td><td align="right" headers="perSecond Average" class='awrnclb'>0.39</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.16</td><td align="right" headers="perSecond Min" class='awrnc'>0.27</td><td align="right" headers="perSecond Max" class='awrncrb'>0.50</td></tr>
<tr><td scope="row" class='awrc'>CPU used by this session</td><td align="right" class='awrc'>2,358,258</td><td align="right" class='awrc'>3,129.80</td><td align="right" class='awrc'>4,660.59</td><td align="right" headers="perSecond Average" class='awrclb'>1,564.90</td><td align="right" headers="perSecond StdDev" class='awrc'>732.38</td><td align="right" headers="perSecond Min" class='awrc'>1,047.03</td><td align="right" headers="perSecond Max" class='awrcrb'>2,082.77</td></tr>
<tr><td scope="row" class='awrnc'>CPU used when call started</td><td align="right" class='awrnc'>2,258,145</td><td align="right" class='awrnc'>2,996.93</td><td align="right" class='awrnc'>4,462.74</td><td align="right" headers="perSecond Average" class='awrnclb'>1,498.47</td><td align="right" headers="perSecond StdDev" class='awrnc'>728.49</td><td align="right" headers="perSecond Min" class='awrnc'>983.35</td><td align="right" headers="perSecond Max" class='awrncrb'>2,013.59</td></tr>
<tr><td scope="row" class='awrc'>CR blocks created</td><td align="right" class='awrc'>536</td><td align="right" class='awrc'>0.71</td><td align="right" class='awrc'>1.06</td><td align="right" headers="perSecond Average" class='awrclb'>0.36</td><td align="right" headers="perSecond StdDev" class='awrc'>0.35</td><td align="right" headers="perSecond Min" class='awrc'>0.11</td><td align="right" headers="perSecond Max" class='awrcrb'>0.60</td></tr>
<tr><td scope="row" class='awrnc'>Cached Commit SCN referenced</td><td align="right" class='awrnc'>4,260,239,473</td><td align="right" class='awrnc'>5,654,071.95</td><td align="right" class='awrnc'>8,419,445.60</td><td align="right" headers="perSecond Average" class='awrnclb'>2,827,035.97</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,719,999.28</td><td align="right" headers="perSecond Min" class='awrnc'>1,610,812.82</td><td align="right" headers="perSecond Max" class='awrncrb'>4,043,259.13</td></tr>
<tr><td scope="row" class='awrc'>Client Advertised Receive Window</td><td align="right" class='awrc'>3,591</td><td align="right" class='awrc'>4.77</td><td align="right" class='awrc'>7.10</td><td align="right" headers="perSecond Average" class='awrclb'>2.38</td><td align="right" headers="perSecond StdDev" class='awrc'>0.19</td><td align="right" headers="perSecond Min" class='awrc'>2.25</td><td align="right" headers="perSecond Max" class='awrcrb'>2.52</td></tr>
<tr><td scope="row" class='awrnc'>Client Advertised Send Window</td><td align="right" class='awrnc'>3,591</td><td align="right" class='awrnc'>4.77</td><td align="right" class='awrnc'>7.10</td><td align="right" headers="perSecond Average" class='awrnclb'>2.38</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.19</td><td align="right" headers="perSecond Min" class='awrnc'>2.25</td><td align="right" headers="perSecond Max" class='awrncrb'>2.52</td></tr>
<tr><td scope="row" class='awrc'>Client Path Maximum Transmission Unit(MTU)</td><td align="right" class='awrc'>18,110,885</td><td align="right" class='awrc'>24,036.91</td><td align="right" class='awrc'>35,792.26</td><td align="right" headers="perSecond Average" class='awrclb'>12,018.45</td><td align="right" headers="perSecond StdDev" class='awrc'>16,338.10</td><td align="right" headers="perSecond Min" class='awrc'>465.67</td><td align="right" headers="perSecond Max" class='awrcrb'>23,571.24</td></tr>
<tr><td scope="row" class='awrnc'>Client Send Congestion Window</td><td align="right" class='awrnc'>4,871</td><td align="right" class='awrnc'>6.46</td><td align="right" class='awrnc'>9.63</td><td align="right" headers="perSecond Average" class='awrnclb'>3.23</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.52</td><td align="right" headers="perSecond Min" class='awrnc'>2.87</td><td align="right" headers="perSecond Max" class='awrncrb'>3.60</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Ack Received</td><td align="right" class='awrc'>501,159</td><td align="right" class='awrc'>665.11</td><td align="right" class='awrc'>990.43</td><td align="right" headers="perSecond Average" class='awrclb'>332.55</td><td align="right" headers="perSecond StdDev" class='awrc'>15.88</td><td align="right" headers="perSecond Min" class='awrc'>321.32</td><td align="right" headers="perSecond Max" class='awrcrb'>343.78</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Data Received</td><td align="right" class='awrnc'>274</td><td align="right" class='awrnc'>0.36</td><td align="right" class='awrnc'>0.54</td><td align="right" headers="perSecond Average" class='awrnclb'>0.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.17</td><td align="right" headers="perSecond Max" class='awrncrb'>0.20</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Data Sent</td><td align="right" class='awrc'>521,275</td><td align="right" class='awrc'>691.81</td><td align="right" class='awrc'>1,030.19</td><td align="right" headers="perSecond Average" class='awrclb'>345.90</td><td align="right" headers="perSecond StdDev" class='awrc'>14.34</td><td align="right" headers="perSecond Min" class='awrc'>335.76</td><td align="right" headers="perSecond Max" class='awrcrb'>356.04</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Round Trip Time</td><td align="right" class='awrnc'>4,277,430</td><td align="right" class='awrnc'>5,676.82</td><td align="right" class='awrnc'>8,453.42</td><td align="right" headers="perSecond Average" class='awrnclb'>2,838.41</td><td align="right" headers="perSecond StdDev" class='awrnc'>819.78</td><td align="right" headers="perSecond Min" class='awrnc'>2,258.74</td><td align="right" headers="perSecond Max" class='awrncrb'>3,418.09</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Round Trip Time Variance</td><td align="right" class='awrc'>7,043,227</td><td align="right" class='awrc'>9,347.47</td><td align="right" class='awrc'>13,919.42</td><td align="right" headers="perSecond Average" class='awrclb'>4,673.74</td><td align="right" headers="perSecond StdDev" class='awrc'>1,385.27</td><td align="right" headers="perSecond Min" class='awrc'>3,694.20</td><td align="right" headers="perSecond Max" class='awrcrb'>5,653.27</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Bytes Acked</td><td align="right" class='awrnc'>8,106,911</td><td align="right" class='awrnc'>10,759.07</td><td align="right" class='awrnc'>16,021.56</td><td align="right" headers="perSecond Average" class='awrnclb'>5,379.53</td><td align="right" headers="perSecond StdDev" class='awrnc'>441.76</td><td align="right" headers="perSecond Min" class='awrnc'>5,067.16</td><td align="right" headers="perSecond Max" class='awrncrb'>5,691.91</td></tr>
<tr><td scope="row" class='awrc'>Client Total Bytes Received</td><td align="right" class='awrc'>3,137,397</td><td align="right" class='awrc'>4,163.79</td><td align="right" class='awrc'>6,200.39</td><td align="right" headers="perSecond Average" class='awrclb'>2,081.89</td><td align="right" headers="perSecond StdDev" class='awrc'>167.36</td><td align="right" headers="perSecond Min" class='awrc'>1,963.55</td><td align="right" headers="perSecond Max" class='awrcrb'>2,200.24</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Number of Retransmitted Packets</td><td align="right" class='awrnc'>207</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>0.41</td><td align="right" headers="perSecond Average" class='awrnclb'>0.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.27</td><td align="right" headers="perSecond Max" class='awrncrb'>0.27</td></tr>
<tr><td scope="row" class='awrc'>Commit SCN cached</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.13</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.06</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>DB time</td><td align="right" class='awrnc'>30,850,770</td><td align="right" class='awrnc'>40,943.52</td><td align="right" class='awrnc'>60,969.90</td><td align="right" headers="perSecond Average" class='awrnclb'>20,471.76</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,699.71</td><td align="right" headers="perSecond Min" class='awrnc'>19,269.88</td><td align="right" headers="perSecond Max" class='awrncrb'>21,673.64</td></tr>
<tr><td scope="row" class='awrc'>DBWR checkpoint buffers written</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.04</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>DBWR checkpoints</td><td align="right" class='awrnc'>112</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>0.22</td><td align="right" headers="perSecond Average" class='awrnclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.07</td><td align="right" headers="perSecond Max" class='awrncrb'>0.07</td></tr>
<tr><td scope="row" class='awrc'>DBWR fusion writes</td><td align="right" class='awrc'>129</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.25</td><td align="right" headers="perSecond Average" class='awrclb'>0.09</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.08</td><td align="right" headers="perSecond Max" class='awrcrb'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>DBWR object drop buffers written</td><td align="right" class='awrnc'>102</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>0.20</td><td align="right" headers="perSecond Average" class='awrnclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.06</td><td align="right" headers="perSecond Max" class='awrncrb'>0.07</td></tr>
<tr><td scope="row" class='awrc'>DBWR transaction table writes</td><td align="right" class='awrc'>212</td><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>0.42</td><td align="right" headers="perSecond Average" class='awrclb'>0.14</td><td align="right" headers="perSecond StdDev" class='awrc'>0.07</td><td align="right" headers="perSecond Min" class='awrc'>0.09</td><td align="right" headers="perSecond Max" class='awrcrb'>0.19</td></tr>
<tr><td scope="row" class='awrnc'>DBWR undo block writes</td><td align="right" class='awrnc'>1,418</td><td align="right" class='awrnc'>1.88</td><td align="right" class='awrnc'>2.80</td><td align="right" headers="perSecond Average" class='awrnclb'>0.94</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.22</td><td align="right" headers="perSecond Min" class='awrnc'>0.79</td><td align="right" headers="perSecond Max" class='awrncrb'>1.09</td></tr>
<tr><td scope="row" class='awrc'>DFO trees parallelized</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>HSC Heap Segment Block Changes</td><td align="right" class='awrnc'>7,772</td><td align="right" class='awrnc'>10.31</td><td align="right" class='awrnc'>15.36</td><td align="right" headers="perSecond Average" class='awrnclb'>5.16</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.34</td><td align="right" headers="perSecond Min" class='awrnc'>3.50</td><td align="right" headers="perSecond Max" class='awrncrb'>6.81</td></tr>
<tr><td scope="row" class='awrc'>Heap Segment Array Inserts</td><td align="right" class='awrc'>397</td><td align="right" class='awrc'>0.53</td><td align="right" class='awrc'>0.78</td><td align="right" headers="perSecond Average" class='awrclb'>0.26</td><td align="right" headers="perSecond StdDev" class='awrc'>0.06</td><td align="right" headers="perSecond Min" class='awrc'>0.22</td><td align="right" headers="perSecond Max" class='awrcrb'>0.31</td></tr>
<tr><td scope="row" class='awrnc'>Heap Segment Array Updates</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.04</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc req</td><td align="right" class='awrc'>55</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.11</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc space (block)</td><td align="right" class='awrnc'>26,673,152</td><td align="right" class='awrnc'>35,398.20</td><td align="right" class='awrnc'>52,713.74</td><td align="right" headers="perSecond Average" class='awrnclb'>17,699.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>12,606.46</td><td align="right" headers="perSecond Min" class='awrnc'>8,784.99</td><td align="right" headers="perSecond Max" class='awrncrb'>26,613.22</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc time (ms)</td><td align="right" class='awrc'>4,705,547</td><td align="right" class='awrc'>6,244.74</td><td align="right" class='awrc'>9,299.50</td><td align="right" headers="perSecond Average" class='awrclb'>3,122.37</td><td align="right" headers="perSecond StdDev" class='awrc'>2,771.14</td><td align="right" headers="perSecond Min" class='awrc'>1,162.88</td><td align="right" headers="perSecond Max" class='awrcrb'>5,081.86</td></tr>
<tr><td scope="row" class='awrnc'>PX local messages recv'd</td><td align="right" class='awrnc'>1,031</td><td align="right" class='awrnc'>1.37</td><td align="right" class='awrnc'>2.04</td><td align="right" headers="perSecond Average" class='awrnclb'>0.68</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.61</td><td align="right" headers="perSecond Min" class='awrnc'>0.25</td><td align="right" headers="perSecond Max" class='awrncrb'>1.11</td></tr>
<tr><td scope="row" class='awrc'>PX local messages sent</td><td align="right" class='awrc'>1,031</td><td align="right" class='awrc'>1.37</td><td align="right" class='awrc'>2.04</td><td align="right" headers="perSecond Average" class='awrclb'>0.68</td><td align="right" headers="perSecond StdDev" class='awrc'>0.61</td><td align="right" headers="perSecond Min" class='awrc'>0.25</td><td align="right" headers="perSecond Max" class='awrcrb'>1.11</td></tr>
<tr><td scope="row" class='awrnc'>PX remote messages recv'd</td><td align="right" class='awrnc'>1,046</td><td align="right" class='awrnc'>1.39</td><td align="right" class='awrnc'>2.07</td><td align="right" headers="perSecond Average" class='awrnclb'>0.69</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.51</td><td align="right" headers="perSecond Min" class='awrnc'>0.34</td><td align="right" headers="perSecond Max" class='awrncrb'>1.05</td></tr>
<tr><td scope="row" class='awrc'>PX remote messages sent</td><td align="right" class='awrc'>1,046</td><td align="right" class='awrc'>1.39</td><td align="right" class='awrc'>2.07</td><td align="right" headers="perSecond Average" class='awrclb'>0.69</td><td align="right" headers="perSecond StdDev" class='awrc'>0.51</td><td align="right" headers="perSecond Min" class='awrc'>0.34</td><td align="right" headers="perSecond Max" class='awrcrb'>1.05</td></tr>
<tr><td scope="row" class='awrnc'>Parallel operations not downgraded</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.07</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>Requests to/from client</td><td align="right" class='awrc'>1,695</td><td align="right" class='awrc'>2.25</td><td align="right" class='awrc'>3.35</td><td align="right" headers="perSecond Average" class='awrclb'>1.12</td><td align="right" headers="perSecond StdDev" class='awrc'>0.21</td><td align="right" headers="perSecond Min" class='awrc'>0.97</td><td align="right" headers="perSecond Max" class='awrcrb'>1.28</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net roundtrips to/from client</td><td align="right" class='awrnc'>1,183</td><td align="right" class='awrnc'>1.57</td><td align="right" class='awrnc'>2.34</td><td align="right" headers="perSecond Average" class='awrnclb'>0.79</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.18</td><td align="right" headers="perSecond Min" class='awrnc'>0.65</td><td align="right" headers="perSecond Max" class='awrncrb'>0.92</td></tr>
<tr><td scope="row" class='awrc'>active txn count during cleanout</td><td align="right" class='awrc'>785</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>1.55</td><td align="right" headers="perSecond Average" class='awrclb'>0.52</td><td align="right" headers="perSecond StdDev" class='awrc'>0.07</td><td align="right" headers="perSecond Min" class='awrc'>0.47</td><td align="right" headers="perSecond Max" class='awrcrb'>0.57</td></tr>
<tr><td scope="row" class='awrnc'>application wait time</td><td align="right" class='awrnc'>7,163</td><td align="right" class='awrnc'>9.51</td><td align="right" class='awrnc'>14.16</td><td align="right" headers="perSecond Average" class='awrnclb'>4.75</td><td align="right" headers="perSecond StdDev" class='awrnc'>6.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.49</td><td align="right" headers="perSecond Max" class='awrncrb'>9.02</td></tr>
<tr><td scope="row" class='awrc'>background checkpoints completed</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>background timeouts</td><td align="right" class='awrnc'>20,444</td><td align="right" class='awrnc'>27.13</td><td align="right" class='awrnc'>40.40</td><td align="right" headers="perSecond Average" class='awrnclb'>13.57</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.09</td><td align="right" headers="perSecond Min" class='awrnc'>13.50</td><td align="right" headers="perSecond Max" class='awrncrb'>13.63</td></tr>
<tr><td scope="row" class='awrc'>blocks cleaned out using minact</td><td align="right" class='awrc'>348</td><td align="right" class='awrc'>0.46</td><td align="right" class='awrc'>0.69</td><td align="right" headers="perSecond Average" class='awrclb'>0.23</td><td align="right" headers="perSecond StdDev" class='awrc'>0.04</td><td align="right" headers="perSecond Min" class='awrc'>0.20</td><td align="right" headers="perSecond Max" class='awrcrb'>0.26</td></tr>
<tr><td scope="row" class='awrnc'>branch node splits</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>buffer is not pinned count</td><td align="right" class='awrc'>4,576,631,882</td><td align="right" class='awrc'>6,073,977.73</td><td align="right" class='awrc'>9,044,727.04</td><td align="right" headers="perSecond Average" class='awrclb'>3,036,988.86</td><td align="right" headers="perSecond StdDev" class='awrc'>1,827,078.83</td><td align="right" headers="perSecond Min" class='awrc'>1,745,049.04</td><td align="right" headers="perSecond Max" class='awrcrb'>4,328,928.69</td></tr>
<tr><td scope="row" class='awrnc'>buffer is pinned count</td><td align="right" class='awrnc'>4,210,961,517</td><td align="right" class='awrnc'>5,588,671.57</td><td align="right" class='awrnc'>8,322,058.33</td><td align="right" headers="perSecond Average" class='awrnclb'>2,794,335.78</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,699,500.73</td><td align="right" headers="perSecond Min" class='awrnc'>1,592,607.30</td><td align="right" headers="perSecond Max" class='awrncrb'>3,996,064.27</td></tr>
<tr><td scope="row" class='awrc'>bytes received via SQL*Net from client</td><td align="right" class='awrc'>974,975</td><td align="right" class='awrc'>1,293.96</td><td align="right" class='awrc'>1,926.83</td><td align="right" headers="perSecond Average" class='awrclb'>646.98</td><td align="right" headers="perSecond StdDev" class='awrc'>461.79</td><td align="right" headers="perSecond Min" class='awrc'>320.45</td><td align="right" headers="perSecond Max" class='awrcrb'>973.51</td></tr>
<tr><td scope="row" class='awrnc'>bytes sent via SQL*Net to client</td><td align="right" class='awrnc'>298,550</td><td align="right" class='awrnc'>396.22</td><td align="right" class='awrnc'>590.02</td><td align="right" headers="perSecond Average" class='awrnclb'>198.11</td><td align="right" headers="perSecond StdDev" class='awrnc'>34.32</td><td align="right" headers="perSecond Min" class='awrnc'>173.84</td><td align="right" headers="perSecond Max" class='awrncrb'>222.38</td></tr>
<tr><td scope="row" class='awrc'>calls to get snapshot scn: kcmgss</td><td align="right" class='awrc'>54,042,977</td><td align="right" class='awrc'>71,724.34</td><td align="right" class='awrc'>106,804.30</td><td align="right" headers="perSecond Average" class='awrclb'>35,862.17</td><td align="right" headers="perSecond StdDev" class='awrc'>21,784.73</td><td align="right" headers="perSecond Min" class='awrc'>20,458.04</td><td align="right" headers="perSecond Max" class='awrcrb'>51,266.30</td></tr>
<tr><td scope="row" class='awrnc'>calls to kcmgas</td><td align="right" class='awrnc'>8,078</td><td align="right" class='awrnc'>10.72</td><td align="right" class='awrnc'>15.96</td><td align="right" headers="perSecond Average" class='awrnclb'>5.36</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.28</td><td align="right" headers="perSecond Min" class='awrnc'>4.45</td><td align="right" headers="perSecond Max" class='awrncrb'>6.27</td></tr>
<tr><td scope="row" class='awrc'>calls to kcmgcs</td><td align="right" class='awrc'>19,535</td><td align="right" class='awrc'>25.93</td><td align="right" class='awrc'>38.61</td><td align="right" headers="perSecond Average" class='awrclb'>12.96</td><td align="right" headers="perSecond StdDev" class='awrc'>4.78</td><td align="right" headers="perSecond Min" class='awrc'>9.58</td><td align="right" headers="perSecond Max" class='awrcrb'>16.35</td></tr>
<tr><td scope="row" class='awrnc'>cell physical IO interconnect bytes</td><td align="right" class='awrnc'>492,228,706,816</td><td align="right" class='awrnc'>653,252,069.46</td><td align="right" class='awrnc'>972,784,005.57</td><td align="right" headers="perSecond Average" class='awrnclb'>326,626,034.73</td><td align="right" headers="perSecond StdDev" class='awrnc'>85,206,053.77</td><td align="right" headers="perSecond Min" class='awrnc'>266,376,256.31</td><td align="right" headers="perSecond Max" class='awrncrb'>386,875,813.15</td></tr>
<tr><td scope="row" class='awrc'>change write time</td><td align="right" class='awrc'>49</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.10</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>cleanout - number of ktugct calls</td><td align="right" class='awrnc'>1,806</td><td align="right" class='awrnc'>2.40</td><td align="right" class='awrnc'>3.57</td><td align="right" headers="perSecond Average" class='awrnclb'>1.20</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.64</td><td align="right" headers="perSecond Min" class='awrnc'>0.75</td><td align="right" headers="perSecond Max" class='awrncrb'>1.65</td></tr>
<tr><td scope="row" class='awrc'>cleanouts and rollbacks - consistent read gets</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.10</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>cleanouts only - consistent read gets</td><td align="right" class='awrnc'>233</td><td align="right" class='awrnc'>0.31</td><td align="right" class='awrnc'>0.46</td><td align="right" headers="perSecond Average" class='awrnclb'>0.15</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.14</td><td align="right" headers="perSecond Max" class='awrncrb'>0.17</td></tr>
<tr><td scope="row" class='awrc'>cluster key scan block gets</td><td align="right" class='awrc'>5,191</td><td align="right" class='awrc'>6.89</td><td align="right" class='awrc'>10.26</td><td align="right" headers="perSecond Average" class='awrclb'>3.44</td><td align="right" headers="perSecond StdDev" class='awrc'>2.64</td><td align="right" headers="perSecond Min" class='awrc'>1.58</td><td align="right" headers="perSecond Max" class='awrcrb'>5.31</td></tr>
<tr><td scope="row" class='awrnc'>cluster key scans</td><td align="right" class='awrnc'>3,415</td><td align="right" class='awrnc'>4.53</td><td align="right" class='awrnc'>6.75</td><td align="right" headers="perSecond Average" class='awrnclb'>2.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.83</td><td align="right" headers="perSecond Min" class='awrnc'>0.97</td><td align="right" headers="perSecond Max" class='awrncrb'>3.56</td></tr>
<tr><td scope="row" class='awrc'>cluster wait time</td><td align="right" class='awrc'>16,365,439</td><td align="right" class='awrc'>21,719.65</td><td align="right" class='awrc'>32,342.76</td><td align="right" headers="perSecond Average" class='awrclb'>10,859.82</td><td align="right" headers="perSecond StdDev" class='awrc'>5,071.32</td><td align="right" headers="perSecond Min" class='awrc'>7,273.86</td><td align="right" headers="perSecond Max" class='awrcrb'>14,445.79</td></tr>
<tr><td scope="row" class='awrnc'>commit batch/immediate performed</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>commit batch/immediate requested</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: block lost</td><td align="right" class='awrnc'>93</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.18</td><td align="right" headers="perSecond Average" class='awrnclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.09</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: buffer being written</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: callback failure</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.08</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: cannot pin</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanouts</td><td align="right" class='awrnc'>5,542</td><td align="right" class='awrnc'>7.35</td><td align="right" class='awrnc'>10.95</td><td align="right" headers="perSecond Average" class='awrnclb'>3.68</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.42</td><td align="right" headers="perSecond Min" class='awrnc'>3.38</td><td align="right" headers="perSecond Max" class='awrncrb'>3.97</td></tr>
<tr><td scope="row" class='awrc'>commit cleanouts successfully completed</td><td align="right" class='awrc'>5,402</td><td align="right" class='awrc'>7.17</td><td align="right" class='awrc'>10.68</td><td align="right" headers="perSecond Average" class='awrclb'>3.58</td><td align="right" headers="perSecond StdDev" class='awrc'>0.46</td><td align="right" headers="perSecond Min" class='awrc'>3.26</td><td align="right" headers="perSecond Max" class='awrcrb'>3.91</td></tr>
<tr><td scope="row" class='awrnc'>commit immediate performed</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>commit immediate requested</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>commit txn count during cleanout</td><td align="right" class='awrnc'>718</td><td align="right" class='awrnc'>0.95</td><td align="right" class='awrnc'>1.42</td><td align="right" headers="perSecond Average" class='awrnclb'>0.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.11</td><td align="right" headers="perSecond Min" class='awrnc'>0.40</td><td align="right" headers="perSecond Max" class='awrncrb'>0.56</td></tr>
<tr><td scope="row" class='awrc'>concurrency wait time</td><td align="right" class='awrc'>28,702</td><td align="right" class='awrc'>38.09</td><td align="right" class='awrc'>56.72</td><td align="right" headers="perSecond Average" class='awrclb'>19.05</td><td align="right" headers="perSecond StdDev" class='awrc'>23.25</td><td align="right" headers="perSecond Min" class='awrc'>2.60</td><td align="right" headers="perSecond Max" class='awrcrb'>35.49</td></tr>
<tr><td scope="row" class='awrnc'>consistent changes</td><td align="right" class='awrnc'>19,986</td><td align="right" class='awrnc'>26.52</td><td align="right" class='awrnc'>39.50</td><td align="right" headers="perSecond Average" class='awrnclb'>13.26</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.44</td><td align="right" headers="perSecond Min" class='awrnc'>12.24</td><td align="right" headers="perSecond Max" class='awrncrb'>14.28</td></tr>
<tr><td scope="row" class='awrc'>consistent gets</td><td align="right" class='awrc'>4,430,715,219</td><td align="right" class='awrc'>5,880,324.32</td><td align="right" class='awrc'>8,756,354.19</td><td align="right" headers="perSecond Average" class='awrclb'>2,940,162.16</td><td align="right" headers="perSecond StdDev" class='awrc'>1,812,407.17</td><td align="right" headers="perSecond Min" class='awrc'>1,658,596.76</td><td align="right" headers="perSecond Max" class='awrcrb'>4,221,727.56</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets examination</td><td align="right" class='awrnc'>100,584,081</td><td align="right" class='awrnc'>133,494.18</td><td align="right" class='awrnc'>198,782.77</td><td align="right" headers="perSecond Average" class='awrnclb'>66,747.09</td><td align="right" headers="perSecond StdDev" class='awrnc'>65,453.82</td><td align="right" headers="perSecond Min" class='awrnc'>20,464.25</td><td align="right" headers="perSecond Max" class='awrncrb'>113,029.93</td></tr>
<tr><td scope="row" class='awrc'>consistent gets examination (fastpath)</td><td align="right" class='awrc'>100,581,147</td><td align="right" class='awrc'>133,490.29</td><td align="right" class='awrc'>198,776.97</td><td align="right" headers="perSecond Average" class='awrclb'>66,745.14</td><td align="right" headers="perSecond StdDev" class='awrc'>65,454.34</td><td align="right" headers="perSecond Min" class='awrc'>20,461.93</td><td align="right" headers="perSecond Max" class='awrcrb'>113,028.35</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets from cache</td><td align="right" class='awrnc'>4,430,715,003</td><td align="right" class='awrnc'>5,880,324.04</td><td align="right" class='awrnc'>8,756,353.76</td><td align="right" headers="perSecond Average" class='awrnclb'>2,940,162.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,812,407.10</td><td align="right" headers="perSecond Min" class='awrnc'>1,658,596.67</td><td align="right" headers="perSecond Max" class='awrncrb'>4,221,727.37</td></tr>
<tr><td scope="row" class='awrc'>consistent gets pin</td><td align="right" class='awrc'>4,330,130,762</td><td align="right" class='awrc'>5,746,829.64</td><td align="right" class='awrc'>8,557,570.68</td><td align="right" headers="perSecond Average" class='awrclb'>2,873,414.82</td><td align="right" headers="perSecond StdDev" class='awrc'>1,746,953.25</td><td align="right" headers="perSecond Min" class='awrc'>1,638,132.34</td><td align="right" headers="perSecond Max" class='awrcrb'>4,108,697.31</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets pin (fastpath)</td><td align="right" class='awrnc'>4,326,841,851</td><td align="right" class='awrnc'>5,742,464.80</td><td align="right" class='awrnc'>8,551,070.85</td><td align="right" headers="perSecond Average" class='awrnclb'>2,871,232.40</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,747,069.44</td><td align="right" headers="perSecond Min" class='awrnc'>1,635,867.75</td><td align="right" headers="perSecond Max" class='awrncrb'>4,106,597.04</td></tr>
<tr><td scope="row" class='awrc'>cursor authentications</td><td align="right" class='awrc'>410</td><td align="right" class='awrc'>0.54</td><td align="right" class='awrc'>0.81</td><td align="right" headers="perSecond Average" class='awrclb'>0.27</td><td align="right" headers="perSecond StdDev" class='awrc'>0.05</td><td align="right" headers="perSecond Min" class='awrc'>0.23</td><td align="right" headers="perSecond Max" class='awrcrb'>0.31</td></tr>
<tr><td scope="row" class='awrnc'>cursor reload failures</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.09</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.05</td></tr>
<tr><td scope="row" class='awrc'>data blocks consistent reads - undo records applied</td><td align="right" class='awrc'>155</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>0.31</td><td align="right" headers="perSecond Average" class='awrclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrc'>0.06</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.14</td></tr>
<tr><td scope="row" class='awrnc'>db block changes</td><td align="right" class='awrnc'>80,964</td><td align="right" class='awrnc'>107.45</td><td align="right" class='awrnc'>160.01</td><td align="right" headers="perSecond Average" class='awrnclb'>53.73</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.96</td><td align="right" headers="perSecond Min" class='awrnc'>53.04</td><td align="right" headers="perSecond Max" class='awrncrb'>54.41</td></tr>
<tr><td scope="row" class='awrc'>db block gets</td><td align="right" class='awrc'>96,891</td><td align="right" class='awrc'>128.59</td><td align="right" class='awrc'>191.48</td><td align="right" headers="perSecond Average" class='awrclb'>64.29</td><td align="right" headers="perSecond StdDev" class='awrc'>0.55</td><td align="right" headers="perSecond Min" class='awrc'>63.90</td><td align="right" headers="perSecond Max" class='awrcrb'>64.68</td></tr>
<tr><td scope="row" class='awrnc'>db block gets direct</td><td align="right" class='awrnc'>1,926</td><td align="right" class='awrnc'>2.56</td><td align="right" class='awrnc'>3.81</td><td align="right" headers="perSecond Average" class='awrnclb'>1.28</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.13</td><td align="right" headers="perSecond Min" class='awrnc'>1.19</td><td align="right" headers="perSecond Max" class='awrncrb'>1.37</td></tr>
<tr><td scope="row" class='awrc'>db block gets from cache</td><td align="right" class='awrc'>94,965</td><td align="right" class='awrc'>126.03</td><td align="right" class='awrc'>187.68</td><td align="right" headers="perSecond Average" class='awrclb'>63.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.43</td><td align="right" headers="perSecond Min" class='awrc'>62.71</td><td align="right" headers="perSecond Max" class='awrcrb'>63.32</td></tr>
<tr><td scope="row" class='awrnc'>db block gets from cache (fastpath)</td><td align="right" class='awrnc'>62,102</td><td align="right" class='awrnc'>82.42</td><td align="right" class='awrnc'>122.73</td><td align="right" headers="perSecond Average" class='awrnclb'>41.21</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.36</td><td align="right" headers="perSecond Min" class='awrnc'>40.25</td><td align="right" headers="perSecond Max" class='awrncrb'>42.17</td></tr>
<tr><td scope="row" class='awrc'>deferred (CURRENT) block cleanout applications</td><td align="right" class='awrc'>2,238</td><td align="right" class='awrc'>2.97</td><td align="right" class='awrc'>4.42</td><td align="right" headers="perSecond Average" class='awrclb'>1.49</td><td align="right" headers="perSecond StdDev" class='awrc'>0.35</td><td align="right" headers="perSecond Min" class='awrc'>1.24</td><td align="right" headers="perSecond Max" class='awrcrb'>1.73</td></tr>
<tr><td scope="row" class='awrnc'>dirty buffers inspected</td><td align="right" class='awrnc'>3,707</td><td align="right" class='awrnc'>4.92</td><td align="right" class='awrnc'>7.33</td><td align="right" headers="perSecond Average" class='awrnclb'>2.46</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.30</td><td align="right" headers="perSecond Min" class='awrnc'>2.25</td><td align="right" headers="perSecond Max" class='awrncrb'>2.67</td></tr>
<tr><td scope="row" class='awrc'>enqueue conversions</td><td align="right" class='awrc'>891</td><td align="right" class='awrc'>1.18</td><td align="right" class='awrc'>1.76</td><td align="right" headers="perSecond Average" class='awrclb'>0.59</td><td align="right" headers="perSecond StdDev" class='awrc'>0.06</td><td align="right" headers="perSecond Min" class='awrc'>0.55</td><td align="right" headers="perSecond Max" class='awrcrb'>0.63</td></tr>
<tr><td scope="row" class='awrnc'>enqueue releases</td><td align="right" class='awrnc'>29,435</td><td align="right" class='awrnc'>39.06</td><td align="right" class='awrnc'>58.17</td><td align="right" headers="perSecond Average" class='awrnclb'>19.53</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.41</td><td align="right" headers="perSecond Min" class='awrnc'>19.24</td><td align="right" headers="perSecond Max" class='awrncrb'>19.82</td></tr>
<tr><td scope="row" class='awrc'>enqueue requests</td><td align="right" class='awrc'>29,156</td><td align="right" class='awrc'>38.69</td><td align="right" class='awrc'>57.62</td><td align="right" headers="perSecond Average" class='awrclb'>19.35</td><td align="right" headers="perSecond StdDev" class='awrc'>0.63</td><td align="right" headers="perSecond Min" class='awrc'>18.90</td><td align="right" headers="perSecond Max" class='awrcrb'>19.79</td></tr>
<tr><td scope="row" class='awrnc'>enqueue timeouts</td><td align="right" class='awrnc'>230</td><td align="right" class='awrnc'>0.31</td><td align="right" class='awrnc'>0.45</td><td align="right" headers="perSecond Average" class='awrnclb'>0.15</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.19</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.29</td></tr>
<tr><td scope="row" class='awrc'>enqueue waits</td><td align="right" class='awrc'>552</td><td align="right" class='awrc'>0.73</td><td align="right" class='awrc'>1.09</td><td align="right" headers="perSecond Average" class='awrclb'>0.37</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.35</td><td align="right" headers="perSecond Max" class='awrcrb'>0.39</td></tr>
<tr><td scope="row" class='awrnc'>exchange deadlocks</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>execute count</td><td align="right" class='awrc'>53,988,472</td><td align="right" class='awrc'>71,652.00</td><td align="right" class='awrc'>106,696.58</td><td align="right" headers="perSecond Average" class='awrclb'>35,826.00</td><td align="right" headers="perSecond StdDev" class='awrc'>21,776.06</td><td align="right" headers="perSecond Min" class='awrc'>20,428.00</td><td align="right" headers="perSecond Max" class='awrcrb'>51,224.00</td></tr>
<tr><td scope="row" class='awrnc'>file io service time</td><td align="right" class='awrnc'>3,542,611,107</td><td align="right" class='awrnc'>4,701,484.36</td><td align="right" class='awrnc'>7,001,207.72</td><td align="right" headers="perSecond Average" class='awrnclb'>2,350,742.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>968,448.21</td><td align="right" headers="perSecond Min" class='awrnc'>1,665,945.88</td><td align="right" headers="perSecond Max" class='awrncrb'>3,035,538.48</td></tr>
<tr><td scope="row" class='awrc'>file io wait time</td><td align="right" class='awrc'>99,475,484,000</td><td align="right" class='awrc'>132,015,387.83</td><td align="right" class='awrc'>196,591,865.61</td><td align="right" headers="perSecond Average" class='awrclb'>66,007,693.91</td><td align="right" headers="perSecond StdDev" class='awrc'>40,068,796.86</td><td align="right" headers="perSecond Min" class='awrc'>37,674,775.94</td><td align="right" headers="perSecond Max" class='awrcrb'>94,340,611.89</td></tr>
<tr><td scope="row" class='awrnc'>free buffer inspected</td><td align="right" class='awrnc'>66,221,366</td><td align="right" class='awrnc'>87,884.63</td><td align="right" class='awrnc'>130,872.26</td><td align="right" headers="perSecond Average" class='awrnclb'>43,942.31</td><td align="right" headers="perSecond StdDev" class='awrnc'>8,871.81</td><td align="right" headers="perSecond Min" class='awrnc'>37,669.00</td><td align="right" headers="perSecond Max" class='awrncrb'>50,215.63</td></tr>
<tr><td scope="row" class='awrc'>free buffer requested</td><td align="right" class='awrc'>60,052,568</td><td align="right" class='awrc'>79,697.64</td><td align="right" class='awrc'>118,680.96</td><td align="right" headers="perSecond Average" class='awrclb'>39,848.82</td><td align="right" headers="perSecond StdDev" class='awrc'>10,389.79</td><td align="right" headers="perSecond Min" class='awrc'>32,502.12</td><td align="right" headers="perSecond Max" class='awrcrb'>47,195.51</td></tr>
<tr><td scope="row" class='awrnc'>gc blocks compressed</td><td align="right" class='awrnc'>6,097</td><td align="right" class='awrnc'>8.09</td><td align="right" class='awrnc'>12.05</td><td align="right" headers="perSecond Average" class='awrnclb'>4.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.74</td><td align="right" headers="perSecond Min" class='awrnc'>2.11</td><td align="right" headers="perSecond Max" class='awrncrb'>5.98</td></tr>
<tr><td scope="row" class='awrc'>gc blocks lost</td><td align="right" class='awrc'>1,542</td><td align="right" class='awrc'>2.05</td><td align="right" class='awrc'>3.05</td><td align="right" headers="perSecond Average" class='awrclb'>1.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.63</td><td align="right" headers="perSecond Min" class='awrc'>0.58</td><td align="right" headers="perSecond Max" class='awrcrb'>1.47</td></tr>
<tr><td scope="row" class='awrnc'>gc cleanout applied</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc cleanout saved</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks expanded</td><td align="right" class='awrnc'>51</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.10</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.05</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks shrunk</td><td align="right" class='awrc'>53</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.10</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block build time</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc cr block flush time</td><td align="right" class='awrc'>81</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.16</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.05</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block receive time</td><td align="right" class='awrnc'>9,565</td><td align="right" class='awrnc'>12.69</td><td align="right" class='awrnc'>18.90</td><td align="right" headers="perSecond Average" class='awrnclb'>6.35</td><td align="right" headers="perSecond StdDev" class='awrnc'>5.83</td><td align="right" headers="perSecond Min" class='awrnc'>2.22</td><td align="right" headers="perSecond Max" class='awrncrb'>10.47</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks built</td><td align="right" class='awrc'>1,378</td><td align="right" class='awrc'>1.83</td><td align="right" class='awrc'>2.72</td><td align="right" headers="perSecond Average" class='awrclb'>0.91</td><td align="right" headers="perSecond StdDev" class='awrc'>0.74</td><td align="right" headers="perSecond Min" class='awrc'>0.39</td><td align="right" headers="perSecond Max" class='awrcrb'>1.44</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks flushed</td><td align="right" class='awrnc'>178</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>0.35</td><td align="right" headers="perSecond Average" class='awrnclb'>0.12</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.12</td><td align="right" headers="perSecond Max" class='awrncrb'>0.12</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks received</td><td align="right" class='awrc'>1,610</td><td align="right" class='awrc'>2.14</td><td align="right" class='awrc'>3.18</td><td align="right" headers="perSecond Average" class='awrclb'>1.07</td><td align="right" headers="perSecond StdDev" class='awrc'>0.87</td><td align="right" headers="perSecond Min" class='awrc'>0.45</td><td align="right" headers="perSecond Max" class='awrcrb'>1.69</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks served</td><td align="right" class='awrnc'>1,773</td><td align="right" class='awrnc'>2.35</td><td align="right" class='awrnc'>3.50</td><td align="right" headers="perSecond Average" class='awrnclb'>1.18</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.98</td><td align="right" headers="perSecond Min" class='awrnc'>0.48</td><td align="right" headers="perSecond Max" class='awrncrb'>1.87</td></tr>
<tr><td scope="row" class='awrc'>gc cr bypass requests</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.08</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.05</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multiblock grant time</td><td align="right" class='awrnc'>122,137,580</td><td align="right" class='awrnc'>162,096.85</td><td align="right" class='awrnc'>241,378.62</td><td align="right" headers="perSecond Average" class='awrnclb'>81,048.43</td><td align="right" headers="perSecond StdDev" class='awrnc'>38,615.59</td><td align="right" headers="perSecond Min" class='awrnc'>53,743.08</td><td align="right" headers="perSecond Max" class='awrncrb'>108,353.77</td></tr>
<tr><td scope="row" class='awrc'>gc cr multiblock grants received</td><td align="right" class='awrc'>30,649,995</td><td align="right" class='awrc'>40,677.24</td><td align="right" class='awrc'>60,573.11</td><td align="right" headers="perSecond Average" class='awrclb'>20,338.62</td><td align="right" headers="perSecond StdDev" class='awrc'>4,136.87</td><td align="right" headers="perSecond Min" class='awrc'>17,413.41</td><td align="right" headers="perSecond Max" class='awrcrb'>23,263.82</td></tr>
<tr><td scope="row" class='awrnc'>gc current block flush time</td><td align="right" class='awrnc'>181</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>0.36</td><td align="right" headers="perSecond Average" class='awrnclb'>0.12</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.11</td><td align="right" headers="perSecond Max" class='awrncrb'>0.13</td></tr>
<tr><td scope="row" class='awrc'>gc current block pin time</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.04</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc current block receive time</td><td align="right" class='awrnc'>22,838</td><td align="right" class='awrnc'>30.31</td><td align="right" class='awrnc'>45.13</td><td align="right" headers="perSecond Average" class='awrnclb'>15.16</td><td align="right" headers="perSecond StdDev" class='awrnc'>19.80</td><td align="right" headers="perSecond Min" class='awrnc'>1.15</td><td align="right" headers="perSecond Max" class='awrncrb'>29.16</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks flushed</td><td align="right" class='awrc'>317</td><td align="right" class='awrc'>0.42</td><td align="right" class='awrc'>0.63</td><td align="right" headers="perSecond Average" class='awrclb'>0.21</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.20</td><td align="right" headers="perSecond Max" class='awrcrb'>0.22</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks pinned</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.05</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks received</td><td align="right" class='awrc'>4,550</td><td align="right" class='awrc'>6.04</td><td align="right" class='awrc'>8.99</td><td align="right" headers="perSecond Average" class='awrclb'>3.02</td><td align="right" headers="perSecond StdDev" class='awrc'>1.85</td><td align="right" headers="perSecond Min" class='awrc'>1.71</td><td align="right" headers="perSecond Max" class='awrcrb'>4.33</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks served</td><td align="right" class='awrnc'>5,719</td><td align="right" class='awrnc'>7.59</td><td align="right" class='awrnc'>11.30</td><td align="right" headers="perSecond Average" class='awrnclb'>3.79</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.22</td><td align="right" headers="perSecond Min" class='awrnc'>2.23</td><td align="right" headers="perSecond Max" class='awrncrb'>5.36</td></tr>
<tr><td scope="row" class='awrc'>gc force cr read cr</td><td align="right" class='awrc'>276</td><td align="right" class='awrc'>0.37</td><td align="right" class='awrc'>0.55</td><td align="right" headers="perSecond Average" class='awrclb'>0.18</td><td align="right" headers="perSecond StdDev" class='awrc'>0.06</td><td align="right" headers="perSecond Min" class='awrc'>0.14</td><td align="right" headers="perSecond Max" class='awrcrb'>0.22</td></tr>
<tr><td scope="row" class='awrnc'>gc force cr read current</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc kbytes saved</td><td align="right" class='awrc'>31,693</td><td align="right" class='awrc'>42.06</td><td align="right" class='awrc'>62.63</td><td align="right" headers="perSecond Average" class='awrclb'>21.03</td><td align="right" headers="perSecond StdDev" class='awrc'>14.73</td><td align="right" headers="perSecond Min" class='awrc'>10.62</td><td align="right" headers="perSecond Max" class='awrcrb'>31.45</td></tr>
<tr><td scope="row" class='awrnc'>gc kbytes sent</td><td align="right" class='awrnc'>28,242</td><td align="right" class='awrnc'>37.48</td><td align="right" class='awrnc'>55.81</td><td align="right" headers="perSecond Average" class='awrnclb'>18.74</td><td align="right" headers="perSecond StdDev" class='awrnc'>10.87</td><td align="right" headers="perSecond Min" class='awrnc'>11.05</td><td align="right" headers="perSecond Max" class='awrncrb'>26.43</td></tr>
<tr><td scope="row" class='awrc'>gc local grants</td><td align="right" class='awrc'>42,580,850</td><td align="right" class='awrc'>56,509.92</td><td align="right" class='awrc'>84,151.88</td><td align="right" headers="perSecond Average" class='awrclb'>28,254.96</td><td align="right" headers="perSecond StdDev" class='awrc'>13,802.29</td><td align="right" headers="perSecond Min" class='awrc'>18,495.27</td><td align="right" headers="perSecond Max" class='awrcrb'>38,014.65</td></tr>
<tr><td scope="row" class='awrnc'>gc merge pi bg</td><td align="right" class='awrnc'>180</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>0.36</td><td align="right" headers="perSecond Average" class='awrnclb'>0.12</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.11</td><td align="right" headers="perSecond Max" class='awrncrb'>0.13</td></tr>
<tr><td scope="row" class='awrc'>gc merge pi fg</td><td align="right" class='awrc'>521</td><td align="right" class='awrc'>0.69</td><td align="right" class='awrc'>1.03</td><td align="right" headers="perSecond Average" class='awrclb'>0.35</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.32</td><td align="right" headers="perSecond Max" class='awrcrb'>0.37</td></tr>
<tr><td scope="row" class='awrnc'>gc no change made</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.05</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc read time waited</td><td align="right" class='awrc'>6,664</td><td align="right" class='awrc'>8.84</td><td align="right" class='awrc'>13.17</td><td align="right" headers="perSecond Average" class='awrclb'>8.84</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>8.84</td><td align="right" headers="perSecond Max" class='awrcrb'>8.84</td></tr>
<tr><td scope="row" class='awrnc'>gc read wait timeouts</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc read waits</td><td align="right" class='awrc'>819</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>1.62</td><td align="right" headers="perSecond Average" class='awrclb'>1.09</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>1.09</td><td align="right" headers="perSecond Max" class='awrcrb'>1.09</td></tr>
<tr><td scope="row" class='awrnc'>gc reader bypass grants</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.05</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gc reader bypass waits</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc remote grants</td><td align="right" class='awrnc'>17,417,958</td><td align="right" class='awrnc'>23,116.38</td><td align="right" class='awrnc'>34,422.84</td><td align="right" headers="perSecond Average" class='awrnclb'>11,558.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,434.33</td><td align="right" headers="perSecond Min" class='awrnc'>9,129.75</td><td align="right" headers="perSecond Max" class='awrncrb'>13,986.63</td></tr>
<tr><td scope="row" class='awrc'>gc status messages received</td><td align="right" class='awrc'>5,086</td><td align="right" class='awrc'>6.75</td><td align="right" class='awrc'>10.05</td><td align="right" headers="perSecond Average" class='awrclb'>3.37</td><td align="right" headers="perSecond StdDev" class='awrc'>2.19</td><td align="right" headers="perSecond Min" class='awrc'>1.83</td><td align="right" headers="perSecond Max" class='awrcrb'>4.92</td></tr>
<tr><td scope="row" class='awrnc'>gc status messages sent</td><td align="right" class='awrnc'>5,267</td><td align="right" class='awrnc'>6.99</td><td align="right" class='awrnc'>10.41</td><td align="right" headers="perSecond Average" class='awrnclb'>3.50</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.20</td><td align="right" headers="perSecond Min" class='awrnc'>1.94</td><td align="right" headers="perSecond Max" class='awrncrb'>5.05</td></tr>
<tr><td scope="row" class='awrc'>gcs affinity lock failures</td><td align="right" class='awrc'>93,374</td><td align="right" class='awrc'>123.91</td><td align="right" class='awrc'>184.53</td><td align="right" headers="perSecond Average" class='awrclb'>61.96</td><td align="right" headers="perSecond StdDev" class='awrc'>87.61</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>123.91</td></tr>
<tr><td scope="row" class='awrnc'>gcs affinity lock grants</td><td align="right" class='awrnc'>18,161,748</td><td align="right" class='awrnc'>24,102.03</td><td align="right" class='awrnc'>35,892.78</td><td align="right" headers="perSecond Average" class='awrnclb'>12,051.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>17,039.73</td><td align="right" headers="perSecond Min" class='awrnc'>2.10</td><td align="right" headers="perSecond Max" class='awrncrb'>24,099.93</td></tr>
<tr><td scope="row" class='awrc'>gcs data block access record drops</td><td align="right" class='awrc'>7,981</td><td align="right" class='awrc'>10.59</td><td align="right" class='awrc'>15.77</td><td align="right" headers="perSecond Average" class='awrclb'>10.59</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>10.59</td><td align="right" headers="perSecond Max" class='awrcrb'>10.59</td></tr>
<tr><td scope="row" class='awrnc'>gcs data block access records</td><td align="right" class='awrnc'>60,217,895</td><td align="right" class='awrnc'>79,917.04</td><td align="right" class='awrnc'>119,007.70</td><td align="right" headers="perSecond Average" class='awrnclb'>39,958.52</td><td align="right" headers="perSecond StdDev" class='awrnc'>10,483.95</td><td align="right" headers="perSecond Min" class='awrnc'>32,545.25</td><td align="right" headers="perSecond Max" class='awrncrb'>47,371.79</td></tr>
<tr><td scope="row" class='awrc'>gcs messages sent</td><td align="right" class='awrc'>52,475,909</td><td align="right" class='awrc'>69,643.31</td><td align="right" class='awrc'>103,707.33</td><td align="right" headers="perSecond Average" class='awrclb'>34,821.66</td><td align="right" headers="perSecond StdDev" class='awrc'>3,518.74</td><td align="right" headers="perSecond Min" class='awrc'>32,333.53</td><td align="right" headers="perSecond Max" class='awrcrb'>37,309.78</td></tr>
<tr><td scope="row" class='awrnc'>gcs read-mostly lock failures</td><td align="right" class='awrnc'>16,230</td><td align="right" class='awrnc'>21.54</td><td align="right" class='awrnc'>32.08</td><td align="right" headers="perSecond Average" class='awrnclb'>10.77</td><td align="right" headers="perSecond StdDev" class='awrnc'>5.35</td><td align="right" headers="perSecond Min" class='awrnc'>6.98</td><td align="right" headers="perSecond Max" class='awrncrb'>14.56</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly lock grants</td><td align="right" class='awrc'>9,634,912</td><td align="right" class='awrc'>12,787.07</td><td align="right" class='awrc'>19,041.33</td><td align="right" headers="perSecond Average" class='awrclb'>6,393.53</td><td align="right" headers="perSecond StdDev" class='awrc'>2,217.66</td><td align="right" headers="perSecond Min" class='awrc'>4,825.41</td><td align="right" headers="perSecond Max" class='awrcrb'>7,961.66</td></tr>
<tr><td scope="row" class='awrnc'>gcs stats management (SCM) process posts</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges messages sent</td><td align="right" class='awrc'>25,122</td><td align="right" class='awrc'>33.34</td><td align="right" class='awrc'>49.65</td><td align="right" headers="perSecond Average" class='awrclb'>16.67</td><td align="right" headers="perSecond StdDev" class='awrc'>9.18</td><td align="right" headers="perSecond Min" class='awrc'>10.18</td><td align="right" headers="perSecond Max" class='awrcrb'>23.16</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue get time</td><td align="right" class='awrnc'>10,299</td><td align="right" class='awrnc'>13.67</td><td align="right" class='awrnc'>20.35</td><td align="right" headers="perSecond Average" class='awrnclb'>6.83</td><td align="right" headers="perSecond StdDev" class='awrnc'>6.94</td><td align="right" headers="perSecond Min" class='awrnc'>1.92</td><td align="right" headers="perSecond Max" class='awrncrb'>11.74</td></tr>
<tr><td scope="row" class='awrc'>global enqueue gets sync</td><td align="right" class='awrc'>102,479</td><td align="right" class='awrc'>136.01</td><td align="right" class='awrc'>202.53</td><td align="right" headers="perSecond Average" class='awrclb'>68.00</td><td align="right" headers="perSecond StdDev" class='awrc'>9.78</td><td align="right" headers="perSecond Min" class='awrc'>61.09</td><td align="right" headers="perSecond Max" class='awrcrb'>74.92</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue releases</td><td align="right" class='awrnc'>110,218</td><td align="right" class='awrnc'>146.28</td><td align="right" class='awrnc'>217.82</td><td align="right" headers="perSecond Average" class='awrnclb'>73.14</td><td align="right" headers="perSecond StdDev" class='awrnc'>10.34</td><td align="right" headers="perSecond Min" class='awrnc'>65.83</td><td align="right" headers="perSecond Max" class='awrncrb'>80.45</td></tr>
<tr><td scope="row" class='awrc'>heap block compress</td><td align="right" class='awrc'>94</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.19</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>hot buffers moved to head of LRU</td><td align="right" class='awrnc'>68,411,345</td><td align="right" class='awrnc'>90,795.29</td><td align="right" class='awrnc'>135,200.29</td><td align="right" headers="perSecond Average" class='awrnclb'>45,397.64</td><td align="right" headers="perSecond StdDev" class='awrnc'>50,653.07</td><td align="right" headers="perSecond Min" class='awrnc'>9,580.51</td><td align="right" headers="perSecond Max" class='awrncrb'>81,214.78</td></tr>
<tr><td scope="row" class='awrc'>immediate (CR) block cleanout applications</td><td align="right" class='awrc'>283</td><td align="right" class='awrc'>0.38</td><td align="right" class='awrc'>0.56</td><td align="right" headers="perSecond Average" class='awrclb'>0.19</td><td align="right" headers="perSecond StdDev" class='awrc'>0.05</td><td align="right" headers="perSecond Min" class='awrc'>0.15</td><td align="right" headers="perSecond Max" class='awrcrb'>0.23</td></tr>
<tr><td scope="row" class='awrnc'>immediate (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>1,119</td><td align="right" class='awrnc'>1.49</td><td align="right" class='awrnc'>2.21</td><td align="right" headers="perSecond Average" class='awrnclb'>0.74</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.28</td><td align="right" headers="perSecond Min" class='awrnc'>0.55</td><td align="right" headers="perSecond Max" class='awrncrb'>0.94</td></tr>
<tr><td scope="row" class='awrc'>in call idle wait time</td><td align="right" class='awrc'>23,448,565</td><td align="right" class='awrc'>31,119.60</td><td align="right" class='awrc'>46,341.04</td><td align="right" headers="perSecond Average" class='awrclb'>15,559.80</td><td align="right" headers="perSecond StdDev" class='awrc'>217.20</td><td align="right" headers="perSecond Min" class='awrc'>15,406.21</td><td align="right" headers="perSecond Max" class='awrcrb'>15,713.38</td></tr>
<tr><td scope="row" class='awrnc'>index crx upgrade (positioned)</td><td align="right" class='awrnc'>74</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.15</td><td align="right" headers="perSecond Average" class='awrnclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.10</td><td align="right" headers="perSecond Max" class='awrncrb'>0.10</td></tr>
<tr><td scope="row" class='awrc'>index fast full scans (full)</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>index fetch by key</td><td align="right" class='awrnc'>45,074,118</td><td align="right" class='awrnc'>59,822.84</td><td align="right" class='awrnc'>89,079.28</td><td align="right" headers="perSecond Average" class='awrnclb'>29,911.42</td><td align="right" headers="perSecond StdDev" class='awrnc'>42,287.36</td><td align="right" headers="perSecond Min" class='awrnc'>9.74</td><td align="right" headers="perSecond Max" class='awrncrb'>59,813.10</td></tr>
<tr><td scope="row" class='awrc'>index range scans</td><td align="right" class='awrc'>99,058,415</td><td align="right" class='awrc'>131,469.30</td><td align="right" class='awrc'>195,767.62</td><td align="right" headers="perSecond Average" class='awrclb'>65,734.65</td><td align="right" headers="perSecond StdDev" class='awrc'>64,025.98</td><td align="right" headers="perSecond Min" class='awrc'>20,461.45</td><td align="right" headers="perSecond Max" class='awrcrb'>111,007.86</td></tr>
<tr><td scope="row" class='awrnc'>index reclamation/extension switch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>leaf node 90-10 splits</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.14</td><td align="right" headers="perSecond Average" class='awrclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.10</td><td align="right" headers="perSecond Max" class='awrcrb'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>leaf node splits</td><td align="right" class='awrnc'>394</td><td align="right" class='awrnc'>0.52</td><td align="right" class='awrnc'>0.78</td><td align="right" headers="perSecond Average" class='awrnclb'>0.26</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.05</td><td align="right" headers="perSecond Min" class='awrnc'>0.22</td><td align="right" headers="perSecond Max" class='awrncrb'>0.30</td></tr>
<tr><td scope="row" class='awrc'>lob reads</td><td align="right" class='awrc'>1,515</td><td align="right" class='awrc'>2.01</td><td align="right" class='awrc'>2.99</td><td align="right" headers="perSecond Average" class='awrclb'>1.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.67</td><td align="right" headers="perSecond Min" class='awrc'>0.53</td><td align="right" headers="perSecond Max" class='awrcrb'>1.48</td></tr>
<tr><td scope="row" class='awrnc'>lob writes</td><td align="right" class='awrnc'>15,270</td><td align="right" class='awrnc'>20.27</td><td align="right" class='awrnc'>30.18</td><td align="right" headers="perSecond Average" class='awrnclb'>10.13</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.61</td><td align="right" headers="perSecond Min" class='awrnc'>9.70</td><td align="right" headers="perSecond Max" class='awrncrb'>10.56</td></tr>
<tr><td scope="row" class='awrc'>lob writes unaligned</td><td align="right" class='awrc'>15,270</td><td align="right" class='awrc'>20.27</td><td align="right" class='awrc'>30.18</td><td align="right" headers="perSecond Average" class='awrclb'>10.13</td><td align="right" headers="perSecond StdDev" class='awrc'>0.61</td><td align="right" headers="perSecond Min" class='awrc'>9.70</td><td align="right" headers="perSecond Max" class='awrcrb'>10.56</td></tr>
<tr><td scope="row" class='awrnc'>logical read bytes from cache</td><td align="right" class='awrnc'>36,297,188,687,872</td><td align="right" class='awrnc'>48,172,638,255.70</td><td align="right" class='awrnc'>71,733,574,481.96</td><td align="right" headers="perSecond Average" class='awrnclb'>24,086,319,127.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>14,847,242,467.59</td><td align="right" headers="perSecond Min" class='awrnc'>13,587,733,297.10</td><td align="right" headers="perSecond Max" class='awrncrb'>34,584,904,958.61</td></tr>
<tr><td scope="row" class='awrc'>logons cumulative</td><td align="right" class='awrc'>84</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.17</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.05</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>max cf enq hold time</td><td align="right" class='awrnc'>194</td><td align="right" class='awrnc'>0.26</td><td align="right" class='awrnc'>0.38</td><td align="right" headers="perSecond Average" class='awrnclb'>0.13</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.08</td><td align="right" headers="perSecond Min" class='awrnc'>0.07</td><td align="right" headers="perSecond Max" class='awrncrb'>0.18</td></tr>
<tr><td scope="row" class='awrc'>messages received</td><td align="right" class='awrc'>14,336</td><td align="right" class='awrc'>19.03</td><td align="right" class='awrc'>28.33</td><td align="right" headers="perSecond Average" class='awrclb'>9.51</td><td align="right" headers="perSecond StdDev" class='awrc'>0.50</td><td align="right" headers="perSecond Min" class='awrc'>9.16</td><td align="right" headers="perSecond Max" class='awrcrb'>9.86</td></tr>
<tr><td scope="row" class='awrnc'>messages sent</td><td align="right" class='awrnc'>14,336</td><td align="right" class='awrnc'>19.03</td><td align="right" class='awrnc'>28.33</td><td align="right" headers="perSecond Average" class='awrnclb'>9.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.50</td><td align="right" headers="perSecond Min" class='awrnc'>9.16</td><td align="right" headers="perSecond Max" class='awrncrb'>9.86</td></tr>
<tr><td scope="row" class='awrc'>no work - consistent read gets</td><td align="right" class='awrc'>4,327,393,086</td><td align="right" class='awrc'>5,743,196.34</td><td align="right" class='awrc'>8,552,160.25</td><td align="right" headers="perSecond Average" class='awrclb'>2,871,598.17</td><td align="right" headers="perSecond StdDev" class='awrc'>1,746,667.00</td><td align="right" headers="perSecond Min" class='awrc'>1,636,518.09</td><td align="right" headers="perSecond Max" class='awrcrb'>4,106,678.25</td></tr>
<tr><td scope="row" class='awrnc'>non-idle wait count</td><td align="right" class='awrnc'>6,652,920</td><td align="right" class='awrnc'>8,829.42</td><td align="right" class='awrnc'>13,148.06</td><td align="right" headers="perSecond Average" class='awrnclb'>4,414.71</td><td align="right" headers="perSecond StdDev" class='awrnc'>555.23</td><td align="right" headers="perSecond Min" class='awrnc'>4,022.10</td><td align="right" headers="perSecond Max" class='awrncrb'>4,807.32</td></tr>
<tr><td scope="row" class='awrc'>non-idle wait time</td><td align="right" class='awrc'>26,726,870</td><td align="right" class='awrc'>35,470.46</td><td align="right" class='awrc'>52,819.90</td><td align="right" headers="perSecond Average" class='awrclb'>17,735.23</td><td align="right" headers="perSecond StdDev" class='awrc'>980.93</td><td align="right" headers="perSecond Min" class='awrc'>17,041.61</td><td align="right" headers="perSecond Max" class='awrcrb'>18,428.85</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors cumulative</td><td align="right" class='awrnc'>54,025,011</td><td align="right" class='awrnc'>71,700.50</td><td align="right" class='awrnc'>106,768.80</td><td align="right" headers="perSecond Average" class='awrnclb'>35,850.25</td><td align="right" headers="perSecond StdDev" class='awrnc'>21,778.69</td><td align="right" headers="perSecond Min" class='awrnc'>20,450.39</td><td align="right" headers="perSecond Max" class='awrncrb'>51,250.11</td></tr>
<tr><td scope="row" class='awrc'>parse count (describe)</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.05</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>parse count (hard)</td><td align="right" class='awrnc'>1,451</td><td align="right" class='awrnc'>1.93</td><td align="right" class='awrnc'>2.87</td><td align="right" headers="perSecond Average" class='awrnclb'>0.96</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.40</td><td align="right" headers="perSecond Min" class='awrnc'>0.68</td><td align="right" headers="perSecond Max" class='awrncrb'>1.24</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>14,130</td><td align="right" class='awrc'>18.75</td><td align="right" class='awrc'>27.92</td><td align="right" headers="perSecond Average" class='awrclb'>9.38</td><td align="right" headers="perSecond StdDev" class='awrc'>4.85</td><td align="right" headers="perSecond Min" class='awrc'>5.95</td><td align="right" headers="perSecond Max" class='awrcrb'>12.80</td></tr>
<tr><td scope="row" class='awrnc'>parse time cpu</td><td align="right" class='awrnc'>686</td><td align="right" class='awrnc'>0.91</td><td align="right" class='awrnc'>1.36</td><td align="right" headers="perSecond Average" class='awrnclb'>0.46</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.42</td><td align="right" headers="perSecond Min" class='awrnc'>0.16</td><td align="right" headers="perSecond Max" class='awrncrb'>0.75</td></tr>
<tr><td scope="row" class='awrc'>parse time elapsed</td><td align="right" class='awrc'>11,499</td><td align="right" class='awrc'>15.26</td><td align="right" class='awrc'>22.73</td><td align="right" headers="perSecond Average" class='awrclb'>7.63</td><td align="right" headers="perSecond StdDev" class='awrc'>8.13</td><td align="right" headers="perSecond Min" class='awrc'>1.88</td><td align="right" headers="perSecond Max" class='awrcrb'>13.38</td></tr>
<tr><td scope="row" class='awrnc'>physical read IO requests</td><td align="right" class='awrnc'>60,046,503</td><td align="right" class='awrnc'>79,689.59</td><td align="right" class='awrnc'>118,668.98</td><td align="right" headers="perSecond Average" class='awrnclb'>39,844.79</td><td align="right" headers="perSecond StdDev" class='awrnc'>10,407.08</td><td align="right" headers="perSecond Min" class='awrnc'>32,485.88</td><td align="right" headers="perSecond Max" class='awrncrb'>47,203.71</td></tr>
<tr><td scope="row" class='awrc'>physical read bytes</td><td align="right" class='awrc'>491,950,956,544</td><td align="right" class='awrc'>652,883,451.83</td><td align="right" class='awrc'>972,235,091.98</td><td align="right" headers="perSecond Average" class='awrclb'>326,441,725.91</td><td align="right" headers="perSecond StdDev" class='awrc'>85,250,296.29</td><td align="right" headers="perSecond Min" class='awrc'>266,160,663.31</td><td align="right" headers="perSecond Max" class='awrcrb'>386,722,788.52</td></tr>
<tr><td scope="row" class='awrnc'>physical read total IO requests</td><td align="right" class='awrnc'>60,048,806</td><td align="right" class='awrnc'>79,692.64</td><td align="right" class='awrnc'>118,673.53</td><td align="right" headers="perSecond Average" class='awrnclb'>39,846.32</td><td align="right" headers="perSecond StdDev" class='awrnc'>10,402.90</td><td align="right" headers="perSecond Min" class='awrnc'>32,490.36</td><td align="right" headers="perSecond Max" class='awrncrb'>47,202.28</td></tr>
<tr><td scope="row" class='awrc'>physical read total bytes</td><td align="right" class='awrc'>492,026,379,776</td><td align="right" class='awrc'>652,983,551.91</td><td align="right" class='awrc'>972,384,149.75</td><td align="right" headers="perSecond Average" class='awrclb'>326,491,775.96</td><td align="right" headers="perSecond StdDev" class='awrc'>85,213,369.48</td><td align="right" headers="perSecond Min" class='awrc'>266,236,824.55</td><td align="right" headers="perSecond Max" class='awrcrb'>386,746,727.37</td></tr>
<tr><td scope="row" class='awrnc'>physical read total multi block requests</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.08</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>60,052,613</td><td align="right" class='awrc'>79,697.69</td><td align="right" class='awrc'>118,681.05</td><td align="right" headers="perSecond Average" class='awrclb'>39,848.85</td><td align="right" headers="perSecond StdDev" class='awrc'>10,406.53</td><td align="right" headers="perSecond Min" class='awrc'>32,490.32</td><td align="right" headers="perSecond Max" class='awrcrb'>47,207.37</td></tr>
<tr><td scope="row" class='awrnc'>physical reads cache</td><td align="right" class='awrnc'>60,052,610</td><td align="right" class='awrnc'>79,697.69</td><td align="right" class='awrnc'>118,681.05</td><td align="right" headers="perSecond Average" class='awrnclb'>39,848.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>10,406.53</td><td align="right" headers="perSecond Min" class='awrnc'>32,490.32</td><td align="right" headers="perSecond Max" class='awrncrb'>47,207.37</td></tr>
<tr><td scope="row" class='awrc'>physical reads cache prefetch</td><td align="right" class='awrc'>56,727,747</td><td align="right" class='awrc'>75,285.13</td><td align="right" class='awrc'>112,110.17</td><td align="right" headers="perSecond Average" class='awrclb'>37,642.57</td><td align="right" headers="perSecond StdDev" class='awrc'>10,260.66</td><td align="right" headers="perSecond Min" class='awrc'>30,387.18</td><td align="right" headers="perSecond Max" class='awrcrb'>44,897.95</td></tr>
<tr><td scope="row" class='awrnc'>physical write IO requests</td><td align="right" class='awrnc'>2,761</td><td align="right" class='awrnc'>3.66</td><td align="right" class='awrnc'>5.46</td><td align="right" headers="perSecond Average" class='awrnclb'>1.83</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>1.83</td><td align="right" headers="perSecond Max" class='awrncrb'>1.83</td></tr>
<tr><td scope="row" class='awrc'>physical write bytes</td><td align="right" class='awrc'>54,050,816</td><td align="right" class='awrc'>71,733.26</td><td align="right" class='awrc'>106,819.79</td><td align="right" headers="perSecond Average" class='awrclb'>35,866.63</td><td align="right" headers="perSecond StdDev" class='awrc'>1,001.95</td><td align="right" headers="perSecond Min" class='awrc'>35,158.15</td><td align="right" headers="perSecond Max" class='awrcrb'>36,575.12</td></tr>
<tr><td scope="row" class='awrnc'>physical write total IO requests</td><td align="right" class='awrnc'>5,893</td><td align="right" class='awrnc'>7.82</td><td align="right" class='awrnc'>11.65</td><td align="right" headers="perSecond Average" class='awrnclb'>3.91</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.09</td><td align="right" headers="perSecond Min" class='awrnc'>3.85</td><td align="right" headers="perSecond Max" class='awrncrb'>3.97</td></tr>
<tr><td scope="row" class='awrc'>physical write total bytes</td><td align="right" class='awrc'>92,500,480</td><td align="right" class='awrc'>122,761.62</td><td align="right" class='awrc'>182,807.27</td><td align="right" headers="perSecond Average" class='awrclb'>61,380.81</td><td align="right" headers="perSecond StdDev" class='awrc'>2,900.21</td><td align="right" headers="perSecond Min" class='awrc'>59,330.05</td><td align="right" headers="perSecond Max" class='awrcrb'>63,431.57</td></tr>
<tr><td scope="row" class='awrnc'>physical write total multi block requests</td><td align="right" class='awrnc'>146</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.29</td><td align="right" headers="perSecond Average" class='awrnclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.09</td><td align="right" headers="perSecond Max" class='awrncrb'>0.10</td></tr>
<tr><td scope="row" class='awrc'>physical writes</td><td align="right" class='awrc'>6,598</td><td align="right" class='awrc'>8.76</td><td align="right" class='awrc'>13.04</td><td align="right" headers="perSecond Average" class='awrclb'>4.38</td><td align="right" headers="perSecond StdDev" class='awrc'>0.12</td><td align="right" headers="perSecond Min" class='awrc'>4.29</td><td align="right" headers="perSecond Max" class='awrcrb'>4.46</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct</td><td align="right" class='awrnc'>2,340</td><td align="right" class='awrnc'>3.11</td><td align="right" class='awrnc'>4.62</td><td align="right" headers="perSecond Average" class='awrnclb'>1.55</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>1.54</td><td align="right" headers="perSecond Max" class='awrncrb'>1.57</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct (lob)</td><td align="right" class='awrc'>415</td><td align="right" class='awrc'>0.55</td><td align="right" class='awrc'>0.82</td><td align="right" headers="perSecond Average" class='awrclb'>0.28</td><td align="right" headers="perSecond StdDev" class='awrc'>0.11</td><td align="right" headers="perSecond Min" class='awrc'>0.20</td><td align="right" headers="perSecond Max" class='awrcrb'>0.35</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct temporary tablespace</td><td align="right" class='awrnc'>404</td><td align="right" class='awrnc'>0.54</td><td align="right" class='awrnc'>0.80</td><td align="right" headers="perSecond Average" class='awrnclb'>0.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.26</td><td align="right" headers="perSecond Max" class='awrncrb'>0.27</td></tr>
<tr><td scope="row" class='awrc'>physical writes from cache</td><td align="right" class='awrc'>4,258</td><td align="right" class='awrc'>5.65</td><td align="right" class='awrc'>8.42</td><td align="right" headers="perSecond Average" class='awrclb'>2.83</td><td align="right" headers="perSecond StdDev" class='awrc'>0.10</td><td align="right" headers="perSecond Min" class='awrc'>2.75</td><td align="right" headers="perSecond Max" class='awrcrb'>2.90</td></tr>
<tr><td scope="row" class='awrnc'>physical writes non checkpoint</td><td align="right" class='awrnc'>6,217</td><td align="right" class='awrnc'>8.25</td><td align="right" class='awrnc'>12.29</td><td align="right" headers="perSecond Average" class='awrnclb'>4.13</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.18</td><td align="right" headers="perSecond Min" class='awrnc'>4.00</td><td align="right" headers="perSecond Max" class='awrncrb'>4.26</td></tr>
<tr><td scope="row" class='awrc'>pinned buffers inspected</td><td align="right" class='awrc'>349,498</td><td align="right" class='awrc'>463.85</td><td align="right" class='awrc'>690.71</td><td align="right" headers="perSecond Average" class='awrclb'>231.93</td><td align="right" headers="perSecond StdDev" class='awrc'>272.24</td><td align="right" headers="perSecond Min" class='awrc'>39.43</td><td align="right" headers="perSecond Max" class='awrcrb'>424.43</td></tr>
<tr><td scope="row" class='awrnc'>process last non-idle time</td><td align="right" class='awrnc'>1,487</td><td align="right" class='awrnc'>1.97</td><td align="right" class='awrnc'>2.94</td><td align="right" headers="perSecond Average" class='awrnclb'>0.99</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.98</td><td align="right" headers="perSecond Max" class='awrncrb'>0.99</td></tr>
<tr><td scope="row" class='awrc'>recursive calls</td><td align="right" class='awrc'>54,128,325</td><td align="right" class='awrc'>71,837.61</td><td align="right" class='awrc'>106,972.97</td><td align="right" headers="perSecond Average" class='awrclb'>35,918.81</td><td align="right" headers="perSecond StdDev" class='awrc'>21,826.45</td><td align="right" headers="perSecond Min" class='awrc'>20,485.17</td><td align="right" headers="perSecond Max" class='awrcrb'>51,352.44</td></tr>
<tr><td scope="row" class='awrnc'>recursive cpu usage</td><td align="right" class='awrnc'>2,179,188</td><td align="right" class='awrnc'>2,892.14</td><td align="right" class='awrnc'>4,306.70</td><td align="right" headers="perSecond Average" class='awrnclb'>1,446.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>627.55</td><td align="right" headers="perSecond Min" class='awrnc'>1,002.32</td><td align="right" headers="perSecond Max" class='awrncrb'>1,889.82</td></tr>
<tr><td scope="row" class='awrc'>redo KB read</td><td align="right" class='awrc'>2,934</td><td align="right" class='awrc'>3.89</td><td align="right" class='awrc'>5.80</td><td align="right" headers="perSecond Average" class='awrclb'>3.89</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>3.89</td><td align="right" headers="perSecond Max" class='awrcrb'>3.89</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks checksummed by FG (exclusive)</td><td align="right" class='awrnc'>20,600</td><td align="right" class='awrnc'>27.34</td><td align="right" class='awrnc'>40.71</td><td align="right" headers="perSecond Average" class='awrnclb'>13.67</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.50</td><td align="right" headers="perSecond Min" class='awrnc'>12.61</td><td align="right" headers="perSecond Max" class='awrncrb'>14.73</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written</td><td align="right" class='awrc'>41,200</td><td align="right" class='awrc'>54.68</td><td align="right" class='awrc'>81.42</td><td align="right" headers="perSecond Average" class='awrclb'>27.34</td><td align="right" headers="perSecond StdDev" class='awrc'>0.69</td><td align="right" headers="perSecond Min" class='awrc'>26.85</td><td align="right" headers="perSecond Max" class='awrcrb'>27.83</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written (group 0)</td><td align="right" class='awrnc'>19,220</td><td align="right" class='awrnc'>25.51</td><td align="right" class='awrnc'>37.98</td><td align="right" headers="perSecond Average" class='awrnclb'>25.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>25.51</td><td align="right" headers="perSecond Max" class='awrncrb'>25.51</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written (group 1)</td><td align="right" class='awrc'>1,014</td><td align="right" class='awrc'>1.35</td><td align="right" class='awrc'>2.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.35</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>1.35</td><td align="right" headers="perSecond Max" class='awrcrb'>1.35</td></tr>
<tr><td scope="row" class='awrnc'>redo entries</td><td align="right" class='awrnc'>34,650</td><td align="right" class='awrnc'>45.99</td><td align="right" class='awrnc'>68.48</td><td align="right" headers="perSecond Average" class='awrnclb'>22.99</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.36</td><td align="right" headers="perSecond Min" class='awrnc'>22.74</td><td align="right" headers="perSecond Max" class='awrncrb'>23.25</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>19,834,116</td><td align="right" class='awrc'>26,322.74</td><td align="right" class='awrc'>39,197.86</td><td align="right" headers="perSecond Average" class='awrclb'>13,161.37</td><td align="right" headers="perSecond StdDev" class='awrc'>347.99</td><td align="right" headers="perSecond Min" class='awrc'>12,915.31</td><td align="right" headers="perSecond Max" class='awrcrb'>13,407.44</td></tr>
<tr><td scope="row" class='awrnc'>redo size for direct writes</td><td align="right" class='awrnc'>2,788</td><td align="right" class='awrnc'>3.70</td><td align="right" class='awrnc'>5.51</td><td align="right" headers="perSecond Average" class='awrnclb'>1.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.14</td><td align="right" headers="perSecond Min" class='awrnc'>1.75</td><td align="right" headers="perSecond Max" class='awrncrb'>1.95</td></tr>
<tr><td scope="row" class='awrc'>redo subscn max counts</td><td align="right" class='awrc'>1,331</td><td align="right" class='awrc'>1.77</td><td align="right" class='awrc'>2.63</td><td align="right" headers="perSecond Average" class='awrclb'>0.88</td><td align="right" headers="perSecond StdDev" class='awrc'>0.06</td><td align="right" headers="perSecond Min" class='awrc'>0.84</td><td align="right" headers="perSecond Max" class='awrcrb'>0.93</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time (usec)</td><td align="right" class='awrnc'>2,796</td><td align="right" class='awrnc'>3.71</td><td align="right" class='awrnc'>5.53</td><td align="right" headers="perSecond Average" class='awrnclb'>1.86</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.61</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>3.70</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead (usec)</td><td align="right" class='awrc'>51</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.10</td><td align="right" headers="perSecond Average" class='awrclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.07</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead count (  2ms)</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo synch writes</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo wastage</td><td align="right" class='awrnc'>512,700</td><td align="right" class='awrnc'>680.42</td><td align="right" class='awrnc'>1,013.24</td><td align="right" headers="perSecond Average" class='awrnclb'>340.21</td><td align="right" headers="perSecond StdDev" class='awrnc'>23.00</td><td align="right" headers="perSecond Min" class='awrnc'>323.95</td><td align="right" headers="perSecond Max" class='awrncrb'>356.47</td></tr>
<tr><td scope="row" class='awrc'>redo write active strands</td><td align="right" class='awrc'>2,069</td><td align="right" class='awrc'>2.75</td><td align="right" class='awrc'>4.09</td><td align="right" headers="perSecond Average" class='awrclb'>1.37</td><td align="right" headers="perSecond StdDev" class='awrc'>0.18</td><td align="right" headers="perSecond Min" class='awrc'>1.24</td><td align="right" headers="perSecond Max" class='awrcrb'>1.50</td></tr>
<tr><td scope="row" class='awrnc'>redo write broadcast ack count</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo write broadcast ack time</td><td align="right" class='awrc'>4,190</td><td align="right" class='awrc'>5.56</td><td align="right" class='awrc'>8.28</td><td align="right" headers="perSecond Average" class='awrclb'>2.78</td><td align="right" headers="perSecond StdDev" class='awrc'>0.46</td><td align="right" headers="perSecond Min" class='awrc'>2.45</td><td align="right" headers="perSecond Max" class='awrcrb'>3.11</td></tr>
<tr><td scope="row" class='awrnc'>redo write finish time</td><td align="right" class='awrnc'>8,961,960</td><td align="right" class='awrnc'>11,893.70</td><td align="right" class='awrnc'>17,711.38</td><td align="right" headers="perSecond Average" class='awrnclb'>5,946.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,458.91</td><td align="right" headers="perSecond Min" class='awrnc'>4,915.25</td><td align="right" headers="perSecond Max" class='awrncrb'>6,978.45</td></tr>
<tr><td scope="row" class='awrc'>redo write gather time</td><td align="right" class='awrc'>217,138</td><td align="right" class='awrc'>288.17</td><td align="right" class='awrc'>429.13</td><td align="right" headers="perSecond Average" class='awrclb'>144.08</td><td align="right" headers="perSecond StdDev" class='awrc'>104.11</td><td align="right" headers="perSecond Min" class='awrc'>70.46</td><td align="right" headers="perSecond Max" class='awrcrb'>217.70</td></tr>
<tr><td scope="row" class='awrnc'>redo write info find</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write schedule time</td><td align="right" class='awrc'>235,743</td><td align="right" class='awrc'>312.86</td><td align="right" class='awrc'>465.90</td><td align="right" headers="perSecond Average" class='awrclb'>156.43</td><td align="right" headers="perSecond StdDev" class='awrc'>103.99</td><td align="right" headers="perSecond Min" class='awrc'>82.89</td><td align="right" headers="perSecond Max" class='awrcrb'>229.96</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (   4KB)</td><td align="right" class='awrnc'>1,762</td><td align="right" class='awrnc'>2.34</td><td align="right" class='awrnc'>3.48</td><td align="right" headers="perSecond Average" class='awrnclb'>1.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.16</td><td align="right" headers="perSecond Min" class='awrnc'>1.06</td><td align="right" headers="perSecond Max" class='awrncrb'>1.28</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (   8KB)</td><td align="right" class='awrc'>121</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.24</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (  16KB)</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.12</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.05</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (  32KB)</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.04</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 128KB)</td><td align="right" class='awrnc'>51</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.10</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 256KB)</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 512KB)</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (1024KB)</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write time</td><td align="right" class='awrnc'>900</td><td align="right" class='awrnc'>1.19</td><td align="right" class='awrnc'>1.78</td><td align="right" headers="perSecond Average" class='awrnclb'>0.60</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.15</td><td align="right" headers="perSecond Min" class='awrnc'>0.49</td><td align="right" headers="perSecond Max" class='awrncrb'>0.70</td></tr>
<tr><td scope="row" class='awrc'>redo write time (usec)</td><td align="right" class='awrc'>9,000,316</td><td align="right" class='awrc'>11,944.61</td><td align="right" class='awrc'>17,787.19</td><td align="right" headers="perSecond Average" class='awrclb'>5,972.30</td><td align="right" headers="perSecond StdDev" class='awrc'>1,488.80</td><td align="right" headers="perSecond Min" class='awrc'>4,919.56</td><td align="right" headers="perSecond Max" class='awrcrb'>7,025.04</td></tr>
<tr><td scope="row" class='awrnc'>redo write total time</td><td align="right" class='awrnc'>9,099,062</td><td align="right" class='awrnc'>12,075.65</td><td align="right" class='awrnc'>17,982.34</td><td align="right" headers="perSecond Average" class='awrnclb'>6,037.83</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,524.79</td><td align="right" headers="perSecond Min" class='awrnc'>4,959.64</td><td align="right" headers="perSecond Max" class='awrncrb'>7,116.02</td></tr>
<tr><td scope="row" class='awrc'>redo write worker delay (usec)</td><td align="right" class='awrc'>96,305</td><td align="right" class='awrc'>127.80</td><td align="right" class='awrc'>190.33</td><td align="right" headers="perSecond Average" class='awrclb'>127.80</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>127.80</td><td align="right" headers="perSecond Max" class='awrcrb'>127.80</td></tr>
<tr><td scope="row" class='awrnc'>redo write worker delay count</td><td align="right" class='awrnc'>1,130</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>2.23</td><td align="right" headers="perSecond Average" class='awrnclb'>1.50</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>1.50</td><td align="right" headers="perSecond Max" class='awrncrb'>1.50</td></tr>
<tr><td scope="row" class='awrc'>redo writes</td><td align="right" class='awrc'>2,067</td><td align="right" class='awrc'>2.74</td><td align="right" class='awrc'>4.08</td><td align="right" headers="perSecond Average" class='awrclb'>1.37</td><td align="right" headers="perSecond StdDev" class='awrc'>0.18</td><td align="right" headers="perSecond Min" class='awrc'>1.24</td><td align="right" headers="perSecond Max" class='awrcrb'>1.50</td></tr>
<tr><td scope="row" class='awrnc'>redo writes (group 0)</td><td align="right" class='awrnc'>895</td><td align="right" class='awrnc'>1.19</td><td align="right" class='awrnc'>1.77</td><td align="right" headers="perSecond Average" class='awrnclb'>1.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>1.19</td><td align="right" headers="perSecond Max" class='awrncrb'>1.19</td></tr>
<tr><td scope="row" class='awrc'>redo writes (group 1)</td><td align="right" class='awrc'>235</td><td align="right" class='awrc'>0.31</td><td align="right" class='awrc'>0.46</td><td align="right" headers="perSecond Average" class='awrclb'>0.31</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.31</td><td align="right" headers="perSecond Max" class='awrcrb'>0.31</td></tr>
<tr><td scope="row" class='awrnc'>redo writes adaptive all</td><td align="right" class='awrnc'>2,067</td><td align="right" class='awrnc'>2.74</td><td align="right" class='awrnc'>4.08</td><td align="right" headers="perSecond Average" class='awrnclb'>1.37</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.18</td><td align="right" headers="perSecond Min" class='awrnc'>1.24</td><td align="right" headers="perSecond Max" class='awrncrb'>1.50</td></tr>
<tr><td scope="row" class='awrc'>redo writes adaptive worker</td><td align="right" class='awrc'>1,130</td><td align="right" class='awrc'>1.50</td><td align="right" class='awrc'>2.23</td><td align="right" headers="perSecond Average" class='awrclb'>1.50</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>1.50</td><td align="right" headers="perSecond Max" class='awrcrb'>1.50</td></tr>
<tr><td scope="row" class='awrnc'>remote Oradebug requests</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>rollback changes - undo records applied</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>rollbacks only - consistent read gets</td><td align="right" class='awrnc'>76</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.15</td><td align="right" headers="perSecond Average" class='awrnclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.05</td><td align="right" headers="perSecond Max" class='awrncrb'>0.05</td></tr>
<tr><td scope="row" class='awrc'>root node splits</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>rows fetched via callback</td><td align="right" class='awrnc'>45,060,759</td><td align="right" class='awrnc'>59,805.11</td><td align="right" class='awrnc'>89,052.88</td><td align="right" headers="perSecond Average" class='awrnclb'>29,902.56</td><td align="right" headers="perSecond StdDev" class='awrnc'>42,281.99</td><td align="right" headers="perSecond Min" class='awrnc'>4.68</td><td align="right" headers="perSecond Max" class='awrncrb'>59,800.44</td></tr>
<tr><td scope="row" class='awrc'>saved cleanouts</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>saved cleanouts successfully completed</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>securefile allocation bytes</td><td align="right" class='awrc'>3,391,488</td><td align="right" class='awrc'>4,500.93</td><td align="right" class='awrc'>6,702.55</td><td align="right" headers="perSecond Average" class='awrclb'>2,250.46</td><td align="right" headers="perSecond StdDev" class='awrc'>876.23</td><td align="right" headers="perSecond Min" class='awrc'>1,630.88</td><td align="right" headers="perSecond Max" class='awrcrb'>2,870.05</td></tr>
<tr><td scope="row" class='awrnc'>securefile allocation chunks</td><td align="right" class='awrnc'>146</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.29</td><td align="right" headers="perSecond Average" class='awrnclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.08</td><td align="right" headers="perSecond Max" class='awrncrb'>0.12</td></tr>
<tr><td scope="row" class='awrc'>securefile bytes non-transformed</td><td align="right" class='awrc'>2,868,839</td><td align="right" class='awrc'>3,807.31</td><td align="right" class='awrc'>5,669.64</td><td align="right" headers="perSecond Average" class='awrclb'>1,903.65</td><td align="right" headers="perSecond StdDev" class='awrc'>754.51</td><td align="right" headers="perSecond Min" class='awrc'>1,370.14</td><td align="right" headers="perSecond Max" class='awrcrb'>2,437.17</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct write bytes</td><td align="right" class='awrnc'>3,391,488</td><td align="right" class='awrnc'>4,500.93</td><td align="right" class='awrnc'>6,702.55</td><td align="right" headers="perSecond Average" class='awrnclb'>2,250.46</td><td align="right" headers="perSecond StdDev" class='awrnc'>876.23</td><td align="right" headers="perSecond Min" class='awrnc'>1,630.88</td><td align="right" headers="perSecond Max" class='awrncrb'>2,870.05</td></tr>
<tr><td scope="row" class='awrc'>securefile direct write ops</td><td align="right" class='awrc'>145</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.29</td><td align="right" headers="perSecond Average" class='awrclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.08</td><td align="right" headers="perSecond Max" class='awrcrb'>0.12</td></tr>
<tr><td scope="row" class='awrnc'>securefile number of non-transformed flushes</td><td align="right" class='awrnc'>159</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>0.31</td><td align="right" headers="perSecond Average" class='awrnclb'>0.11</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.08</td><td align="right" headers="perSecond Max" class='awrncrb'>0.13</td></tr>
<tr><td scope="row" class='awrc'>segment cfs allocations</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.05</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>segment chunks allocation from dispenser</td><td align="right" class='awrnc'>145</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.29</td><td align="right" headers="perSecond Average" class='awrnclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.08</td><td align="right" headers="perSecond Max" class='awrncrb'>0.12</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser allocations</td><td align="right" class='awrc'>142</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.28</td><td align="right" headers="perSecond Average" class='awrclb'>0.09</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.08</td><td align="right" headers="perSecond Max" class='awrcrb'>0.11</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser load empty</td><td align="right" class='awrnc'>75</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.15</td><td align="right" headers="perSecond Average" class='awrnclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.10</td><td align="right" headers="perSecond Max" class='awrncrb'>0.10</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser load tasks</td><td align="right" class='awrc'>76</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.15</td><td align="right" headers="perSecond Average" class='awrclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.10</td><td align="right" headers="perSecond Max" class='awrcrb'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc ops</td><td align="right" class='awrnc'>191</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>0.38</td><td align="right" headers="perSecond Average" class='awrnclb'>0.13</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.17</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.25</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc tasks</td><td align="right" class='awrc'>184</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>0.36</td><td align="right" headers="perSecond Average" class='awrclb'>0.24</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.24</td><td align="right" headers="perSecond Max" class='awrcrb'>0.24</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc time (ms)</td><td align="right" class='awrnc'>14,886</td><td align="right" class='awrnc'>19.76</td><td align="right" class='awrnc'>29.42</td><td align="right" headers="perSecond Average" class='awrnclb'>9.88</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.80</td><td align="right" headers="perSecond Min" class='awrnc'>7.19</td><td align="right" headers="perSecond Max" class='awrncrb'>12.56</td></tr>
<tr><td scope="row" class='awrc'>session connect time</td><td align="right" class='awrc'>804</td><td align="right" class='awrc'>1.07</td><td align="right" class='awrc'>1.59</td><td align="right" headers="perSecond Average" class='awrclb'>1.07</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>1.07</td><td align="right" headers="perSecond Max" class='awrcrb'>1.07</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>53,983,471</td><td align="right" class='awrnc'>71,645.37</td><td align="right" class='awrnc'>106,686.70</td><td align="right" headers="perSecond Average" class='awrnclb'>35,822.68</td><td align="right" headers="perSecond StdDev" class='awrnc'>21,775.67</td><td align="right" headers="perSecond Min" class='awrnc'>20,424.96</td><td align="right" headers="perSecond Max" class='awrncrb'>51,220.41</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>4,430,834,022</td><td align="right" class='awrc'>5,880,481.99</td><td align="right" class='awrc'>8,756,588.98</td><td align="right" headers="perSecond Average" class='awrclb'>2,940,241.00</td><td align="right" headers="perSecond StdDev" class='awrc'>1,812,409.44</td><td align="right" headers="perSecond Min" class='awrc'>1,658,673.99</td><td align="right" headers="perSecond Max" class='awrcrb'>4,221,808.00</td></tr>
<tr><td scope="row" class='awrnc'>shared hash latch upgrades - no wait</td><td align="right" class='awrnc'>14,287,757</td><td align="right" class='awrnc'>18,961.77</td><td align="right" class='awrnc'>28,236.67</td><td align="right" headers="perSecond Average" class='awrnclb'>9,480.88</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,934.80</td><td align="right" headers="perSecond Min" class='awrnc'>8,112.77</td><td align="right" headers="perSecond Max" class='awrncrb'>10,849.00</td></tr>
<tr><td scope="row" class='awrc'>shared hash latch upgrades - wait</td><td align="right" class='awrc'>269</td><td align="right" class='awrc'>0.36</td><td align="right" class='awrc'>0.53</td><td align="right" headers="perSecond Average" class='awrclb'>0.18</td><td align="right" headers="perSecond StdDev" class='awrc'>0.11</td><td align="right" headers="perSecond Min" class='awrc'>0.10</td><td align="right" headers="perSecond Max" class='awrcrb'>0.25</td></tr>
<tr><td scope="row" class='awrnc'>shared io pool buffer get success</td><td align="right" class='awrnc'>143</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.28</td><td align="right" headers="perSecond Average" class='awrnclb'>0.09</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.08</td><td align="right" headers="perSecond Max" class='awrncrb'>0.11</td></tr>
<tr><td scope="row" class='awrc'>sorts (memory)</td><td align="right" class='awrc'>4,523</td><td align="right" class='awrc'>6.00</td><td align="right" class='awrc'>8.94</td><td align="right" headers="perSecond Average" class='awrclb'>3.00</td><td align="right" headers="perSecond StdDev" class='awrc'>1.79</td><td align="right" headers="perSecond Min" class='awrc'>1.73</td><td align="right" headers="perSecond Max" class='awrcrb'>4.27</td></tr>
<tr><td scope="row" class='awrnc'>sorts (rows)</td><td align="right" class='awrnc'>330,240</td><td align="right" class='awrnc'>438.28</td><td align="right" class='awrnc'>652.65</td><td align="right" headers="perSecond Average" class='awrnclb'>219.14</td><td align="right" headers="perSecond StdDev" class='awrnc'>19.71</td><td align="right" headers="perSecond Min" class='awrnc'>205.20</td><td align="right" headers="perSecond Max" class='awrncrb'>233.07</td></tr>
<tr><td scope="row" class='awrc'>sql area evicted</td><td align="right" class='awrc'>601</td><td align="right" class='awrc'>0.80</td><td align="right" class='awrc'>1.19</td><td align="right" headers="perSecond Average" class='awrclb'>0.40</td><td align="right" headers="perSecond StdDev" class='awrc'>0.22</td><td align="right" headers="perSecond Min" class='awrc'>0.24</td><td align="right" headers="perSecond Max" class='awrcrb'>0.56</td></tr>
<tr><td scope="row" class='awrnc'>sql area purged</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>summed dirty queue length</td><td align="right" class='awrc'>3,177</td><td align="right" class='awrc'>4.22</td><td align="right" class='awrc'>6.28</td><td align="right" headers="perSecond Average" class='awrclb'>2.11</td><td align="right" headers="perSecond StdDev" class='awrc'>0.25</td><td align="right" headers="perSecond Min" class='awrc'>1.93</td><td align="right" headers="perSecond Max" class='awrcrb'>2.29</td></tr>
<tr><td scope="row" class='awrnc'>switch current caused by our pin</td><td align="right" class='awrnc'>556</td><td align="right" class='awrnc'>0.74</td><td align="right" class='awrnc'>1.10</td><td align="right" headers="perSecond Average" class='awrnclb'>0.37</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.19</td><td align="right" headers="perSecond Min" class='awrnc'>0.23</td><td align="right" headers="perSecond Max" class='awrncrb'>0.50</td></tr>
<tr><td scope="row" class='awrc'>switch current to new buffer</td><td align="right" class='awrc'>600</td><td align="right" class='awrc'>0.80</td><td align="right" class='awrc'>1.19</td><td align="right" headers="perSecond Average" class='awrclb'>0.40</td><td align="right" headers="perSecond StdDev" class='awrc'>0.19</td><td align="right" headers="perSecond Min" class='awrc'>0.26</td><td align="right" headers="perSecond Max" class='awrcrb'>0.53</td></tr>
<tr><td scope="row" class='awrnc'>table fetch by rowid</td><td align="right" class='awrnc'>4,366,465,923</td><td align="right" class='awrnc'>5,795,051.98</td><td align="right" class='awrnc'>8,629,379.29</td><td align="right" headers="perSecond Average" class='awrnclb'>2,897,525.99</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,751,958.47</td><td align="right" headers="perSecond Min" class='awrnc'>1,658,704.27</td><td align="right" headers="perSecond Max" class='awrncrb'>4,136,347.70</td></tr>
<tr><td scope="row" class='awrc'>table fetch continued row</td><td align="right" class='awrc'>896</td><td align="right" class='awrc'>1.19</td><td align="right" class='awrc'>1.77</td><td align="right" headers="perSecond Average" class='awrclb'>0.59</td><td align="right" headers="perSecond StdDev" class='awrc'>0.40</td><td align="right" headers="perSecond Min" class='awrc'>0.31</td><td align="right" headers="perSecond Max" class='awrcrb'>0.87</td></tr>
<tr><td scope="row" class='awrnc'>table scan blocks gotten</td><td align="right" class='awrnc'>207,960</td><td align="right" class='awrnc'>276.01</td><td align="right" class='awrnc'>410.99</td><td align="right" headers="perSecond Average" class='awrnclb'>138.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>172.35</td><td align="right" headers="perSecond Min" class='awrnc'>16.14</td><td align="right" headers="perSecond Max" class='awrncrb'>259.87</td></tr>
<tr><td scope="row" class='awrc'>table scan disk non-IMC rows gotten</td><td align="right" class='awrc'>1,185,944</td><td align="right" class='awrc'>1,573.94</td><td align="right" class='awrc'>2,343.76</td><td align="right" headers="perSecond Average" class='awrclb'>786.97</td><td align="right" headers="perSecond StdDev" class='awrc'>317.25</td><td align="right" headers="perSecond Min" class='awrc'>562.64</td><td align="right" headers="perSecond Max" class='awrcrb'>1,011.30</td></tr>
<tr><td scope="row" class='awrnc'>table scan rows gotten</td><td align="right" class='awrnc'>1,185,944</td><td align="right" class='awrnc'>1,573.94</td><td align="right" class='awrnc'>2,343.76</td><td align="right" headers="perSecond Average" class='awrnclb'>786.97</td><td align="right" headers="perSecond StdDev" class='awrnc'>317.25</td><td align="right" headers="perSecond Min" class='awrnc'>562.64</td><td align="right" headers="perSecond Max" class='awrncrb'>1,011.30</td></tr>
<tr><td scope="row" class='awrc'>table scans (short tables)</td><td align="right" class='awrc'>2,477</td><td align="right" class='awrc'>3.29</td><td align="right" class='awrc'>4.90</td><td align="right" headers="perSecond Average" class='awrclb'>1.64</td><td align="right" headers="perSecond StdDev" class='awrc'>0.66</td><td align="right" headers="perSecond Min" class='awrc'>1.18</td><td align="right" headers="perSecond Max" class='awrcrb'>2.11</td></tr>
<tr><td scope="row" class='awrnc'>temp space allocated (bytes)</td><td align="right" class='awrnc'>1,048,576</td><td align="right" class='awrnc'>1,391.68</td><td align="right" class='awrnc'>2,072.28</td><td align="right" headers="perSecond Average" class='awrnclb'>1,391.68</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>1,391.68</td><td align="right" headers="perSecond Max" class='awrncrb'>1,391.68</td></tr>
<tr><td scope="row" class='awrc'>total cf enq hold time</td><td align="right" class='awrc'>5,027</td><td align="right" class='awrc'>6.67</td><td align="right" class='awrc'>9.93</td><td align="right" headers="perSecond Average" class='awrclb'>3.34</td><td align="right" headers="perSecond StdDev" class='awrc'>1.43</td><td align="right" headers="perSecond Min" class='awrc'>2.33</td><td align="right" headers="perSecond Max" class='awrcrb'>4.35</td></tr>
<tr><td scope="row" class='awrnc'>total number of cf enq holders</td><td align="right" class='awrnc'>182</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>0.36</td><td align="right" headers="perSecond Average" class='awrnclb'>0.12</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.12</td><td align="right" headers="perSecond Max" class='awrncrb'>0.13</td></tr>
<tr><td scope="row" class='awrc'>transaction tables consistent reads - undo records applied</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>undo change vector size</td><td align="right" class='awrnc'>7,322,692</td><td align="right" class='awrnc'>9,718.30</td><td align="right" class='awrnc'>14,471.72</td><td align="right" headers="perSecond Average" class='awrnclb'>4,859.15</td><td align="right" headers="perSecond StdDev" class='awrnc'>551.88</td><td align="right" headers="perSecond Min" class='awrnc'>4,468.91</td><td align="right" headers="perSecond Max" class='awrncrb'>5,249.39</td></tr>
<tr><td scope="row" class='awrc'>user I/O wait time</td><td align="right" class='awrc'>10,306,101</td><td align="right" class='awrc'>13,677.38</td><td align="right" class='awrc'>20,367.79</td><td align="right" headers="perSecond Average" class='awrclb'>6,838.69</td><td align="right" headers="perSecond StdDev" class='awrc'>4,107.04</td><td align="right" headers="perSecond Min" class='awrc'>3,934.58</td><td align="right" headers="perSecond Max" class='awrcrb'>9,742.81</td></tr>
<tr><td scope="row" class='awrnc'>user calls</td><td align="right" class='awrnc'>3,613</td><td align="right" class='awrnc'>4.79</td><td align="right" class='awrnc'>7.14</td><td align="right" headers="perSecond Average" class='awrnclb'>2.40</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.29</td><td align="right" headers="perSecond Min" class='awrnc'>2.19</td><td align="right" headers="perSecond Max" class='awrncrb'>2.60</td></tr>
<tr><td scope="row" class='awrc'>user commits</td><td align="right" class='awrc'>506</td><td align="right" class='awrc'>0.67</td><td align="right" class='awrc'>1.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.34</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.33</td><td align="right" headers="perSecond Max" class='awrcrb'>0.34</td></tr>
<tr><td scope="row" class='awrnc'>user logons cumulative</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>user logouts cumulative</td><td align="right" class='awrc'>513</td><td align="right" class='awrc'>0.68</td><td align="right" class='awrc'>1.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.34</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.32</td><td align="right" headers="perSecond Max" class='awrcrb'>0.36</td></tr>
<tr><td scope="row" class='awrnc'>workarea executions - optimal</td><td align="right" class='awrnc'>4,065</td><td align="right" class='awrnc'>5.39</td><td align="right" class='awrnc'>8.03</td><td align="right" headers="perSecond Average" class='awrnclb'>2.70</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.91</td><td align="right" headers="perSecond Min" class='awrnc'>2.05</td><td align="right" headers="perSecond Max" class='awrncrb'>3.34</td></tr>
<tr><td scope="row" class='awrc'>write clones created in foreground</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12072"></a>
<h3 class="awr">Global Messaging Statistics (Global)</h3>
<ul>
<li class="awr"> per Second Average - average of per-instance per Second rates </li>
<li class="awr"> per Second Std Dev - standard deviation of per-instance per Second rates </li>
<li class="awr"> per Second Min     - minimum of per-instance per Second rates </li>
<li class="awr"> per Second Max     - maximum of per-instance per Second rates</li>
</ul>
<table border="0" class="tdiff" summary="Global Messaging Statistics (Global). . per Second Average - average of per-instance per Second rates. per Second Std Dev - standard deviation of per-instance per Second rates. per Second Min - minimum of per-instance per Second rates. per Second Max - maximum of per-instance per Second rates"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="perSecond">per Second</th>
</tr><tr>
<th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th><th class="awrbg" scope="col" id="Average">Average</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim Broadcasts sent</td><td align="right" class='awrc'>282</td><td align="right" class='awrc'>0.37</td><td align="right" class='awrc'>0.56</td><td align="right" headers="perSecond Average" class='awrclb'>0.19</td><td align="right" headers="perSecond StdDev" class='awrc'>0.08</td><td align="right" headers="perSecond Min" class='awrc'>0.13</td><td align="right" headers="perSecond Max" class='awrcrb'>0.24</td></tr>
<tr><td scope="row" class='awrnc'>Global Enqueue S-optim S-lock gets</td><td align="right" class='awrnc'>89,160</td><td align="right" class='awrnc'>118.33</td><td align="right" class='awrnc'>176.21</td><td align="right" headers="perSecond Average" class='awrnclb'>59.16</td><td align="right" headers="perSecond StdDev" class='awrnc'>11.32</td><td align="right" headers="perSecond Min" class='awrnc'>51.16</td><td align="right" headers="perSecond Max" class='awrncrb'>67.17</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim anti-locks crea</td><td align="right" class='awrc'>149</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0.29</td><td align="right" headers="perSecond Average" class='awrclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.08</td><td align="right" headers="perSecond Max" class='awrcrb'>0.12</td></tr>
<tr><td scope="row" class='awrnc'>acks for commit broadcast(actual)</td><td align="right" class='awrnc'>763</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>1.51</td><td align="right" headers="perSecond Average" class='awrnclb'>0.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.49</td><td align="right" headers="perSecond Max" class='awrncrb'>0.52</td></tr>
<tr><td scope="row" class='awrc'>acks for commit broadcast(logical)</td><td align="right" class='awrc'>1,347</td><td align="right" class='awrc'>1.79</td><td align="right" class='awrc'>2.66</td><td align="right" headers="perSecond Average" class='awrclb'>0.89</td><td align="right" headers="perSecond StdDev" class='awrc'>0.24</td><td align="right" headers="perSecond Min" class='awrc'>0.72</td><td align="right" headers="perSecond Max" class='awrcrb'>1.06</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(actual)</td><td align="right" class='awrnc'>1,350</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>2.67</td><td align="right" headers="perSecond Average" class='awrnclb'>0.90</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.23</td><td align="right" headers="perSecond Min" class='awrnc'>0.73</td><td align="right" headers="perSecond Max" class='awrncrb'>1.06</td></tr>
<tr><td scope="row" class='awrc'>broadcast msgs on commit(logical)</td><td align="right" class='awrc'>2,040</td><td align="right" class='awrc'>2.71</td><td align="right" class='awrc'>4.03</td><td align="right" headers="perSecond Average" class='awrclb'>1.35</td><td align="right" headers="perSecond StdDev" class='awrc'>0.18</td><td align="right" headers="perSecond Min" class='awrc'>1.23</td><td align="right" headers="perSecond Max" class='awrcrb'>1.48</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(wasted)</td><td align="right" class='awrnc'>657</td><td align="right" class='awrnc'>0.87</td><td align="right" class='awrnc'>1.30</td><td align="right" headers="perSecond Average" class='awrnclb'>0.44</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.33</td><td align="right" headers="perSecond Min" class='awrnc'>0.20</td><td align="right" headers="perSecond Max" class='awrncrb'>0.67</td></tr>
<tr><td scope="row" class='awrc'>flow control messages received</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>flow control messages sent</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs assume no cvt</td><td align="right" class='awrc'>3,683</td><td align="right" class='awrc'>4.89</td><td align="right" class='awrc'>7.28</td><td align="right" headers="perSecond Average" class='awrclb'>2.44</td><td align="right" headers="perSecond StdDev" class='awrc'>1.46</td><td align="right" headers="perSecond Min" class='awrc'>1.41</td><td align="right" headers="perSecond Max" class='awrcrb'>3.48</td></tr>
<tr><td scope="row" class='awrnc'>gcs ast to fg</td><td align="right" class='awrnc'>5,003</td><td align="right" class='awrnc'>6.64</td><td align="right" class='awrnc'>9.89</td><td align="right" headers="perSecond Average" class='awrnclb'>3.32</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.37</td><td align="right" headers="perSecond Min" class='awrnc'>1.64</td><td align="right" headers="perSecond Max" class='awrncrb'>5.00</td></tr>
<tr><td scope="row" class='awrc'>gcs ast xid</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs bidless ast to lms</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.06</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gcs blocked converts</td><td align="right" class='awrc'>1,426</td><td align="right" class='awrc'>1.89</td><td align="right" class='awrc'>2.82</td><td align="right" headers="perSecond Average" class='awrclb'>0.95</td><td align="right" headers="perSecond StdDev" class='awrc'>0.91</td><td align="right" headers="perSecond Min" class='awrc'>0.30</td><td align="right" headers="perSecond Max" class='awrcrb'>1.59</td></tr>
<tr><td scope="row" class='awrnc'>gcs blocked cr converts</td><td align="right" class='awrnc'>1,439</td><td align="right" class='awrnc'>1.91</td><td align="right" class='awrnc'>2.84</td><td align="right" headers="perSecond Average" class='awrnclb'>0.95</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.31</td><td align="right" headers="perSecond Min" class='awrnc'>0.73</td><td align="right" headers="perSecond Max" class='awrncrb'>1.18</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible basts</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible cr basts (global)</td><td align="right" class='awrnc'>58</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.11</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible cr basts (local)</td><td align="right" class='awrc'>4,750</td><td align="right" class='awrc'>6.30</td><td align="right" class='awrc'>9.39</td><td align="right" headers="perSecond Average" class='awrclb'>3.15</td><td align="right" headers="perSecond StdDev" class='awrc'>1.35</td><td align="right" headers="perSecond Min" class='awrc'>2.20</td><td align="right" headers="perSecond Max" class='awrcrb'>4.10</td></tr>
<tr><td scope="row" class='awrnc'>gcs cr requests to slave</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs dbwr flush pi msgs</td><td align="right" class='awrc'>1,533</td><td align="right" class='awrc'>2.03</td><td align="right" class='awrc'>3.03</td><td align="right" headers="perSecond Average" class='awrclb'>1.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.43</td><td align="right" headers="perSecond Min" class='awrc'>0.71</td><td align="right" headers="perSecond Max" class='awrcrb'>1.32</td></tr>
<tr><td scope="row" class='awrnc'>gcs dbwr write request msgs</td><td align="right" class='awrnc'>120</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>0.24</td><td align="right" headers="perSecond Average" class='awrnclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.08</td><td align="right" headers="perSecond Max" class='awrncrb'>0.08</td></tr>
<tr><td scope="row" class='awrc'>gcs force cr block only</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr grant</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs grant ast</td><td align="right" class='awrc'>5,032</td><td align="right" class='awrc'>6.68</td><td align="right" class='awrc'>9.94</td><td align="right" headers="perSecond Average" class='awrclb'>3.34</td><td align="right" headers="perSecond StdDev" class='awrc'>2.40</td><td align="right" headers="perSecond Min" class='awrc'>1.64</td><td align="right" headers="perSecond Max" class='awrcrb'>5.03</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate (compatible) converts</td><td align="right" class='awrnc'>960</td><td align="right" class='awrnc'>1.27</td><td align="right" class='awrnc'>1.90</td><td align="right" headers="perSecond Average" class='awrnclb'>0.64</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.27</td><td align="right" headers="perSecond Min" class='awrnc'>0.44</td><td align="right" headers="perSecond Max" class='awrncrb'>0.83</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate (null) converts</td><td align="right" class='awrc'>2,335</td><td align="right" class='awrc'>3.10</td><td align="right" class='awrc'>4.61</td><td align="right" headers="perSecond Average" class='awrclb'>1.55</td><td align="right" headers="perSecond StdDev" class='awrc'>0.70</td><td align="right" headers="perSecond Min" class='awrc'>1.05</td><td align="right" headers="perSecond Max" class='awrcrb'>2.05</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate cr (compatible) converts</td><td align="right" class='awrnc'>623,259</td><td align="right" class='awrnc'>827.14</td><td align="right" class='awrnc'>1,231.74</td><td align="right" headers="perSecond Average" class='awrnclb'>413.57</td><td align="right" headers="perSecond StdDev" class='awrnc'>149.87</td><td align="right" headers="perSecond Min" class='awrnc'>307.60</td><td align="right" headers="perSecond Max" class='awrncrb'>519.55</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate cr (null) converts</td><td align="right" class='awrc'>31,624,007</td><td align="right" class='awrc'>41,969.44</td><td align="right" class='awrc'>62,498.04</td><td align="right" headers="perSecond Average" class='awrclb'>20,984.72</td><td align="right" headers="perSecond StdDev" class='awrc'>2,175.73</td><td align="right" headers="perSecond Min" class='awrc'>19,446.25</td><td align="right" headers="perSecond Max" class='awrcrb'>22,523.19</td></tr>
<tr><td scope="row" class='awrnc'>gcs lms flush pi msgs</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs lms write request msgs</td><td align="right" class='awrc'>82</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.16</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.06</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>gcs msgs process time(ms)</td><td align="right" class='awrnc'>690,786</td><td align="right" class='awrnc'>916.77</td><td align="right" class='awrnc'>1,365.19</td><td align="right" headers="perSecond Average" class='awrnclb'>458.39</td><td align="right" headers="perSecond StdDev" class='awrnc'>29.14</td><td align="right" headers="perSecond Min" class='awrnc'>437.78</td><td align="right" headers="perSecond Max" class='awrncrb'>478.99</td></tr>
<tr><td scope="row" class='awrc'>gcs msgs received</td><td align="right" class='awrc'>52,465,975</td><td align="right" class='awrc'>69,629.65</td><td align="right" class='awrc'>103,687.70</td><td align="right" headers="perSecond Average" class='awrclb'>34,814.83</td><td align="right" headers="perSecond StdDev" class='awrc'>3,205.03</td><td align="right" headers="perSecond Min" class='awrc'>32,548.53</td><td align="right" headers="perSecond Max" class='awrcrb'>37,081.12</td></tr>
<tr><td scope="row" class='awrnc'>gcs new served by master</td><td align="right" class='awrnc'>629</td><td align="right" class='awrnc'>0.83</td><td align="right" class='awrnc'>1.24</td><td align="right" headers="perSecond Average" class='awrnclb'>0.42</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.30</td><td align="right" headers="perSecond Min" class='awrnc'>0.21</td><td align="right" headers="perSecond Max" class='awrncrb'>0.63</td></tr>
<tr><td scope="row" class='awrc'>gcs out-of-order msgs</td><td align="right" class='awrc'>1,992</td><td align="right" class='awrc'>2.64</td><td align="right" class='awrc'>3.94</td><td align="right" headers="perSecond Average" class='awrclb'>1.32</td><td align="right" headers="perSecond StdDev" class='awrc'>0.18</td><td align="right" headers="perSecond Min" class='awrc'>1.19</td><td align="right" headers="perSecond Max" class='awrcrb'>1.45</td></tr>
<tr><td scope="row" class='awrnc'>gcs pings refused</td><td align="right" class='awrnc'>727</td><td align="right" class='awrnc'>0.96</td><td align="right" class='awrnc'>1.44</td><td align="right" headers="perSecond Average" class='awrnclb'>0.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.46</td><td align="right" headers="perSecond Min" class='awrnc'>0.16</td><td align="right" headers="perSecond Max" class='awrncrb'>0.81</td></tr>
<tr><td scope="row" class='awrc'>gcs queued converts</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant immediate</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.05</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to fg</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs side channel msgs actual</td><td align="right" class='awrc'>1,236</td><td align="right" class='awrc'>1.64</td><td align="right" class='awrc'>2.44</td><td align="right" headers="perSecond Average" class='awrclb'>0.82</td><td align="right" headers="perSecond StdDev" class='awrc'>0.26</td><td align="right" headers="perSecond Min" class='awrc'>0.63</td><td align="right" headers="perSecond Max" class='awrcrb'>1.01</td></tr>
<tr><td scope="row" class='awrnc'>gcs side channel msgs logical</td><td align="right" class='awrnc'>12,740</td><td align="right" class='awrnc'>16.91</td><td align="right" class='awrnc'>25.18</td><td align="right" headers="perSecond Average" class='awrnclb'>8.45</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.12</td><td align="right" headers="perSecond Min" class='awrnc'>7.66</td><td align="right" headers="perSecond Max" class='awrncrb'>9.25</td></tr>
<tr><td scope="row" class='awrc'>gcs stale cr</td><td align="right" class='awrc'>274</td><td align="right" class='awrc'>0.36</td><td align="right" class='awrc'>0.54</td><td align="right" headers="perSecond Average" class='awrclb'>0.18</td><td align="right" headers="perSecond StdDev" class='awrc'>0.12</td><td align="right" headers="perSecond Min" class='awrc'>0.10</td><td align="right" headers="perSecond Max" class='awrcrb'>0.27</td></tr>
<tr><td scope="row" class='awrnc'>gcs undo cr</td><td align="right" class='awrnc'>488</td><td align="right" class='awrnc'>0.65</td><td align="right" class='awrnc'>0.96</td><td align="right" headers="perSecond Average" class='awrnclb'>0.32</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.41</td><td align="right" headers="perSecond Min" class='awrnc'>0.03</td><td align="right" headers="perSecond Max" class='awrncrb'>0.62</td></tr>
<tr><td scope="row" class='awrc'>gcs writes refused</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges msgs process time(ms)</td><td align="right" class='awrnc'>547</td><td align="right" class='awrnc'>0.73</td><td align="right" class='awrnc'>1.08</td><td align="right" headers="perSecond Average" class='awrnclb'>0.36</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.35</td><td align="right" headers="perSecond Max" class='awrncrb'>0.38</td></tr>
<tr><td scope="row" class='awrc'>ges msgs received</td><td align="right" class='awrc'>24,977</td><td align="right" class='awrc'>33.15</td><td align="right" class='awrc'>49.36</td><td align="right" headers="perSecond Average" class='awrclb'>16.57</td><td align="right" headers="perSecond StdDev" class='awrc'>9.44</td><td align="right" headers="perSecond Min" class='awrc'>9.90</td><td align="right" headers="perSecond Max" class='awrcrb'>23.25</td></tr>
<tr><td scope="row" class='awrnc'>ges remote lock allocation</td><td align="right" class='awrnc'>474</td><td align="right" class='awrnc'>0.63</td><td align="right" class='awrnc'>0.94</td><td align="right" headers="perSecond Average" class='awrnclb'>0.31</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.09</td><td align="right" headers="perSecond Min" class='awrnc'>0.25</td><td align="right" headers="perSecond Max" class='awrncrb'>0.38</td></tr>
<tr><td scope="row" class='awrc'>implicit batch messages received</td><td align="right" class='awrc'>48,326</td><td align="right" class='awrc'>64.14</td><td align="right" class='awrc'>95.51</td><td align="right" headers="perSecond Average" class='awrclb'>32.07</td><td align="right" headers="perSecond StdDev" class='awrc'>0.14</td><td align="right" headers="perSecond Min" class='awrc'>31.97</td><td align="right" headers="perSecond Max" class='awrcrb'>32.16</td></tr>
<tr><td scope="row" class='awrnc'>implicit batch messages sent</td><td align="right" class='awrnc'>48,262</td><td align="right" class='awrnc'>64.05</td><td align="right" class='awrnc'>95.38</td><td align="right" headers="perSecond Average" class='awrnclb'>32.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.53</td><td align="right" headers="perSecond Min" class='awrnc'>31.65</td><td align="right" headers="perSecond Max" class='awrncrb'>32.40</td></tr>
<tr><td scope="row" class='awrc'>messages flow controlled</td><td align="right" class='awrc'>10,030</td><td align="right" class='awrc'>13.31</td><td align="right" class='awrc'>19.82</td><td align="right" headers="perSecond Average" class='awrclb'>6.66</td><td align="right" headers="perSecond StdDev" class='awrc'>9.15</td><td align="right" headers="perSecond Min" class='awrc'>0.18</td><td align="right" headers="perSecond Max" class='awrcrb'>13.13</td></tr>
<tr><td scope="row" class='awrnc'>messages queue sent actual</td><td align="right" class='awrnc'>4,446,593</td><td align="right" class='awrnc'>5,901.24</td><td align="right" class='awrnc'>8,787.73</td><td align="right" headers="perSecond Average" class='awrnclb'>2,950.62</td><td align="right" headers="perSecond StdDev" class='awrnc'>406.62</td><td align="right" headers="perSecond Min" class='awrnc'>2,663.09</td><td align="right" headers="perSecond Max" class='awrncrb'>3,238.15</td></tr>
<tr><td scope="row" class='awrc'>messages queue sent logical</td><td align="right" class='awrc'>808,026</td><td align="right" class='awrc'>1,072.37</td><td align="right" class='awrc'>1,596.89</td><td align="right" headers="perSecond Average" class='awrclb'>536.18</td><td align="right" headers="perSecond StdDev" class='awrc'>17.52</td><td align="right" headers="perSecond Min" class='awrc'>523.80</td><td align="right" headers="perSecond Max" class='awrcrb'>548.57</td></tr>
<tr><td scope="row" class='awrnc'>messages received actual</td><td align="right" class='awrnc'>9,210,106</td><td align="right" class='awrnc'>12,223.11</td><td align="right" class='awrnc'>18,201.79</td><td align="right" headers="perSecond Average" class='awrnclb'>6,111.56</td><td align="right" headers="perSecond StdDev" class='awrnc'>252.61</td><td align="right" headers="perSecond Min" class='awrnc'>5,932.94</td><td align="right" headers="perSecond Max" class='awrncrb'>6,290.18</td></tr>
<tr><td scope="row" class='awrc'>messages received logical</td><td align="right" class='awrc'>52,490,952</td><td align="right" class='awrc'>69,662.80</td><td align="right" class='awrc'>103,737.06</td><td align="right" headers="perSecond Average" class='awrclb'>34,831.40</td><td align="right" headers="perSecond StdDev" class='awrc'>3,195.59</td><td align="right" headers="perSecond Min" class='awrc'>32,571.78</td><td align="right" headers="perSecond Max" class='awrcrb'>37,091.02</td></tr>
<tr><td scope="row" class='awrnc'>messages sent directly</td><td align="right" class='awrnc'>747,136</td><td align="right" class='awrnc'>991.57</td><td align="right" class='awrnc'>1,476.55</td><td align="right" headers="perSecond Average" class='awrnclb'>495.79</td><td align="right" headers="perSecond StdDev" class='awrnc'>203.57</td><td align="right" headers="perSecond Min" class='awrnc'>351.84</td><td align="right" headers="perSecond Max" class='awrncrb'>639.73</td></tr>
<tr><td scope="row" class='awrc'>messages sent indirectly</td><td align="right" class='awrc'>17,548,157</td><td align="right" class='awrc'>23,289.17</td><td align="right" class='awrc'>34,680.15</td><td align="right" headers="perSecond Average" class='awrclb'>11,644.58</td><td align="right" headers="perSecond StdDev" class='awrc'>3,414.11</td><td align="right" headers="perSecond Min" class='awrc'>9,230.45</td><td align="right" headers="perSecond Max" class='awrcrb'>14,058.72</td></tr>
<tr><td scope="row" class='awrnc'>messages sent not implicit batched</td><td align="right" class='awrnc'>58,075</td><td align="right" class='awrnc'>77.07</td><td align="right" class='awrnc'>114.77</td><td align="right" headers="perSecond Average" class='awrnclb'>38.54</td><td align="right" headers="perSecond StdDev" class='awrnc'>15.59</td><td align="right" headers="perSecond Min" class='awrnc'>27.51</td><td align="right" headers="perSecond Max" class='awrncrb'>49.56</td></tr>
<tr><td scope="row" class='awrc'>messages sent pbatched</td><td align="right" class='awrc'>51,668,944</td><td align="right" class='awrc'>68,572.34</td><td align="right" class='awrc'>102,112.54</td><td align="right" headers="perSecond Average" class='awrclb'>34,286.17</td><td align="right" headers="perSecond StdDev" class='awrc'>3,307.94</td><td align="right" headers="perSecond Min" class='awrc'>31,947.10</td><td align="right" headers="perSecond Max" class='awrcrb'>36,625.24</td></tr>
<tr><td scope="row" class='awrnc'>msgs received kernel queue time (ns)</td><td align="right" class='awrnc'>2,895,608,742,701</td><td align="right" class='awrnc'>3,842,923,357.65</td><td align="right" class='awrnc'>5,722,546,922.33</td><td align="right" headers="perSecond Average" class='awrnclb'>1,921,461,678.83</td><td align="right" headers="perSecond StdDev" class='awrnc'>489,791,380.16</td><td align="right" headers="perSecond Min" class='awrnc'>1,575,126,872.55</td><td align="right" headers="perSecond Max" class='awrncrb'>2,267,796,485.11</td></tr>
<tr><td scope="row" class='awrc'>msgs received queue time (ms)</td><td align="right" class='awrc'>895,976</td><td align="right" class='awrc'>1,189.10</td><td align="right" class='awrc'>1,770.70</td><td align="right" headers="perSecond Average" class='awrclb'>594.55</td><td align="right" headers="perSecond StdDev" class='awrc'>201.89</td><td align="right" headers="perSecond Min" class='awrc'>451.79</td><td align="right" headers="perSecond Max" class='awrcrb'>737.31</td></tr>
<tr><td scope="row" class='awrnc'>msgs received queued</td><td align="right" class='awrnc'>52,490,951</td><td align="right" class='awrnc'>69,662.80</td><td align="right" class='awrnc'>103,737.06</td><td align="right" headers="perSecond Average" class='awrnclb'>34,831.40</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,195.59</td><td align="right" headers="perSecond Min" class='awrnc'>32,571.78</td><td align="right" headers="perSecond Max" class='awrncrb'>37,091.02</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queue time (ms)</td><td align="right" class='awrc'>1,468,168</td><td align="right" class='awrc'>1,948.44</td><td align="right" class='awrc'>2,901.52</td><td align="right" headers="perSecond Average" class='awrclb'>974.22</td><td align="right" headers="perSecond StdDev" class='awrc'>421.26</td><td align="right" headers="perSecond Min" class='awrc'>676.34</td><td align="right" headers="perSecond Max" class='awrcrb'>1,272.10</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queue time on ksxp (ms)</td><td align="right" class='awrnc'>348,434,161</td><td align="right" class='awrnc'>462,421.92</td><td align="right" class='awrnc'>688,605.06</td><td align="right" headers="perSecond Average" class='awrnclb'>231,210.96</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,193.52</td><td align="right" headers="perSecond Min" class='awrnc'>228,952.80</td><td align="right" headers="perSecond Max" class='awrncrb'>233,469.12</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queued</td><td align="right" class='awrc'>4,507,035</td><td align="right" class='awrc'>5,981.45</td><td align="right" class='awrc'>8,907.18</td><td align="right" headers="perSecond Average" class='awrclb'>2,990.73</td><td align="right" headers="perSecond StdDev" class='awrc'>413.54</td><td align="right" headers="perSecond Min" class='awrc'>2,698.31</td><td align="right" headers="perSecond Max" class='awrcrb'>3,283.14</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queued on ksxp</td><td align="right" class='awrnc'>9,210,722</td><td align="right" class='awrnc'>12,223.98</td><td align="right" class='awrnc'>18,203.01</td><td align="right" headers="perSecond Average" class='awrnclb'>6,111.99</td><td align="right" headers="perSecond StdDev" class='awrnc'>351.29</td><td align="right" headers="perSecond Min" class='awrnc'>5,863.59</td><td align="right" headers="perSecond Max" class='awrncrb'>6,360.39</td></tr>
<tr><td scope="row" class='awrc'>process batch messages received</td><td align="right" class='awrc'>8,441,502</td><td align="right" class='awrc'>11,203.08</td><td align="right" class='awrc'>16,682.81</td><td align="right" headers="perSecond Average" class='awrclb'>5,601.54</td><td align="right" headers="perSecond StdDev" class='awrc'>82.29</td><td align="right" headers="perSecond Min" class='awrc'>5,543.35</td><td align="right" headers="perSecond Max" class='awrcrb'>5,659.73</td></tr>
<tr><td scope="row" class='awrnc'>process batch messages sent</td><td align="right" class='awrnc'>8,509,445</td><td align="right" class='awrnc'>11,293.27</td><td align="right" class='awrnc'>16,817.08</td><td align="right" headers="perSecond Average" class='awrnclb'>5,646.63</td><td align="right" headers="perSecond StdDev" class='awrnc'>149.93</td><td align="right" headers="perSecond Min" class='awrnc'>5,540.62</td><td align="right" headers="perSecond Max" class='awrncrb'>5,752.65</td></tr>
<tr><td scope="row" class='awrc'>receiver cycle time</td><td align="right" class='awrc'>2,282,166</td><td align="right" class='awrc'>3,028.76</td><td align="right" class='awrc'>4,510.21</td><td align="right" headers="perSecond Average" class='awrclb'>1,514.38</td><td align="right" headers="perSecond StdDev" class='awrc'>16.34</td><td align="right" headers="perSecond Min" class='awrc'>1,502.82</td><td align="right" headers="perSecond Max" class='awrcrb'>1,525.94</td></tr>
<tr><td scope="row" class='awrnc'>receiver loop count</td><td align="right" class='awrnc'>9,420,239</td><td align="right" class='awrnc'>12,501.98</td><td align="right" class='awrnc'>18,617.07</td><td align="right" headers="perSecond Average" class='awrnclb'>6,250.99</td><td align="right" headers="perSecond StdDev" class='awrnc'>357.62</td><td align="right" headers="perSecond Min" class='awrnc'>5,998.12</td><td align="right" headers="perSecond Max" class='awrncrb'>6,503.87</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12073"></a>
<h3 class="awr">System Statistics (Absolute Values)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics (Absolute Values)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Sessions">Sessions</th>
<th class="awrbg" colspan=" 2" id="OpenCursors">Open Cursors</th>
<th class="awrbg" colspan=" 2" id="SessionCachedCursors">Session Cached Cursors</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sessions Begin" class='awrclb'>435</td><td align="right" headers="Sessions End" class='awrc'>161</td><td align="right" headers="OpenCursors Begin" class='awrclb'>1,144</td><td align="right" headers="OpenCursors End" class='awrc'>115</td><td align="right" headers="SessionCachedCursors Begin" class='awrclb'>17,879</td><td align="right" headers="SessionCachedCursors End" class='awrcrb'>18,233</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sessions Begin" class='awrnclb'>409</td><td align="right" headers="Sessions End" class='awrnc'>166</td><td align="right" headers="OpenCursors Begin" class='awrnclb'>992</td><td align="right" headers="OpenCursors End" class='awrnc'>83</td><td align="right" headers="SessionCachedCursors Begin" class='awrnclb'>15,237</td><td align="right" headers="SessionCachedCursors End" class='awrncrb'>15,326</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>844</td><td align="right" class='awrct'>327</td><td align="right" class='awrclbt'>2,136</td><td align="right" class='awrct'>198</td><td align="right" class='awrclbt'>33,116</td><td align="right" class='awrcrbt'>33,559</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>422</td><td align="right" class='awrnc'>164</td><td align="right" class='awrnclb'>1,068</td><td align="right" class='awrnc'>99</td><td align="right" class='awrnclb'>16,558</td><td align="right" class='awrncrb'>16,780</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>18</td><td align="right" class='awrc'>4</td><td align="right" class='awrclb'>107</td><td align="right" class='awrc'>23</td><td align="right" class='awrclb'>1,868</td><td align="right" class='awrcrb'>2,056</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="630"></a>
<h2 class="awr">
I/O Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12097">IO Profile (Global)</a></li>
<li class="awr"><a class="awr" href="#12076">IOStat by Function</a></li>
<li class="awr"><a class="awr" href="#12077">IOStat by File Type</a></li>
<li class="awr"><a class="awr" href="#12070">Segment Statistics (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12097"></a>
<h3 class="awr">IO Profile (Global)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IO Profile (Global)"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Read+Write/s</th><th class="awrbg" scope="col">Reads/s</th><th class="awrbg" scope="col">Writes/s</th></tr>
<tr><td class='awrc'>Total Requests</td><td align="right" class='awrc'>79,691.05</td><td align="right" class='awrc'>79,683.23</td><td align="right" class='awrc'>7.82</td></tr>
<tr><td class='awrnc'>Database Requests</td><td align="right" class='awrnc'>79,683.84</td><td align="right" class='awrnc'>79,680.18</td><td align="right" class='awrnc'>3.66</td></tr>
<tr><td class='awrc'>Optimized Requests</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>Redo Requests</td><td align="right" class='awrnc'>2.74</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2.74</td></tr>
<tr><td class='awrc'>Total (MB)</td><td align="right" class='awrc'>622.78</td><td align="right" class='awrc'>622.66</td><td align="right" class='awrc'>0.12</td></tr>
<tr><td class='awrnc'>Database (MB)</td><td align="right" class='awrnc'>622.63</td><td align="right" class='awrnc'>622.56</td><td align="right" class='awrnc'>0.07</td></tr>
<tr><td class='awrc'>Optimized Total (MB)</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>Redo (MB)</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td class='awrc'>Database (blocks)</td><td align="right" class='awrc'>79,697.04</td><td align="right" class='awrc'>79,688.28</td><td align="right" class='awrc'>8.76</td></tr>
<tr><td class='awrnc'>Via Buffer Cache (blocks)</td><td align="right" class='awrnc'>79,693.93</td><td align="right" class='awrnc'>79,688.28</td><td align="right" class='awrnc'>5.65</td></tr>
<tr><td class='awrc'>Direct (blocks)</td><td align="right" class='awrc'>3.11</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>3.11</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12076"></a>
<h3 class="awr">IOStat by Function</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IOStat by Function"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="Requests">Requests</th>
<th class="awrbg" colspan=" 4" id="MB">MB</th>
<td>&#160;</td><td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Function Name</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOs/s">IOs/s</th><th class="awrbg" scope="col" id="Reads/s">Reads/s</th><th class="awrbg" scope="col" id="Writes/s">Writes/s</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOMB/s">IO MB/s</th><th class="awrbg" scope="col" id="ReadMB/s">Read MB/s</th><th class="awrbg" scope="col" id="WriteMB/s">Write MB/s</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time </th></tr>
<tr><td align="right" scope="row" class='awrc'>*</td><td class='awrc'>Total</td><td align="right" headers="Requests Total" class='awrclb'>58,359,968</td><td align="right" headers="Requests IOs/s" class='awrc'>77,442.19</td><td align="right" headers="Requests Reads/s" class='awrc'>77,434.78</td><td align="right" headers="Requests Writes/s" class='awrc'>7.41</td><td align="right" headers="MB Total" class='awrclb'>456,023</td><td align="right" headers="MB IOMB/s" class='awrc'>605.13</td><td align="right" headers="MB ReadMB/s" class='awrc'>605.02</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.11</td><td align="right" class='awrc'>3.2M</td><td align="right" class='awrc'>18.02ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>58,347,896</td><td align="right" headers="Requests IOs/s" class='awrnc'>77,426.17</td><td align="right" headers="Requests Reads/s" class='awrnc'>77,426.17</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>455,836</td><td align="right" headers="MB IOMB/s" class='awrnc'>604.88</td><td align="right" headers="MB ReadMB/s" class='awrnc'>604.88</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>3.1M</td><td align="right" class='awrnc'>18.04ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Others</td><td align="right" headers="Requests Total" class='awrclb'>7,749</td><td align="right" headers="Requests IOs/s" class='awrc'>10.28</td><td align="right" headers="Requests Reads/s" class='awrc'>8.61</td><td align="right" headers="Requests Writes/s" class='awrc'>1.68</td><td align="right" headers="MB Total" class='awrclb'>135</td><td align="right" headers="MB IOMB/s" class='awrc'>0.18</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.14</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.04</td><td align="right" class='awrc'>4891</td><td align="right" class='awrc'>9.57ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>DBWR</td><td align="right" headers="Requests Total" class='awrnclb'>2,096</td><td align="right" headers="Requests IOs/s" class='awrnc'>2.78</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>2.78</td><td align="right" headers="MB Total" class='awrnclb'>27</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.04</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.04</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>LGWR</td><td align="right" headers="Requests Total" class='awrclb'>2,095</td><td align="right" headers="Requests IOs/s" class='awrc'>2.78</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>2.78</td><td align="right" headers="MB Total" class='awrclb'>21</td><td align="right" headers="MB IOMB/s" class='awrc'>0.03</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.03</td><td align="right" class='awrc'>2093</td><td align="right" class='awrc'>4.11ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>132</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.18</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.18</td><td align="right" headers="MB Total" class='awrnclb'>4</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.01</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>1</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>24,318,333</td><td align="right" headers="Requests IOs/s" class='awrct'>32,269.81</td><td align="right" headers="Requests Reads/s" class='awrct'>32,266.01</td><td align="right" headers="Requests Writes/s" class='awrct'>3.80</td><td align="right" headers="MB Total" class='awrclbt'>190,004</td><td align="right" headers="MB IOMB/s" class='awrct'>252.13</td><td align="right" headers="MB ReadMB/s" class='awrct'>252.07</td><td align="right" headers="MB WriteMB/s" class='awrcrbt'>0.06</td><td align="right" class='awrct'>1.5M</td><td align="right" class='awrct'>16.68ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>24,312,198</td><td align="right" headers="Requests IOs/s" class='awrnc'>32,261.67</td><td align="right" headers="Requests Reads/s" class='awrnc'>32,261.67</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>189,906</td><td align="right" headers="MB IOMB/s" class='awrnc'>252.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>252.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>1.5M</td><td align="right" class='awrnc'>16.71ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Others</td><td align="right" headers="Requests Total" class='awrclb'>3,969</td><td align="right" headers="Requests IOs/s" class='awrc'>5.27</td><td align="right" headers="Requests Reads/s" class='awrc'>4.34</td><td align="right" headers="Requests Writes/s" class='awrc'>0.92</td><td align="right" headers="MB Total" class='awrclb'>71</td><td align="right" headers="MB IOMB/s" class='awrc'>0.09</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.07</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.02</td><td align="right" class='awrc'>2497</td><td align="right" class='awrc'>5.62ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>DBWR</td><td align="right" headers="Requests Total" class='awrnclb'>1,172</td><td align="right" headers="Requests IOs/s" class='awrnc'>1.56</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.56</td><td align="right" headers="MB Total" class='awrnclb'>15</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.02</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.02</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>LGWR</td><td align="right" headers="Requests Total" class='awrclb'>946</td><td align="right" headers="Requests IOs/s" class='awrc'>1.26</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>1.26</td><td align="right" headers="MB Total" class='awrclb'>11</td><td align="right" headers="MB IOMB/s" class='awrc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.01</td><td align="right" class='awrc'>945</td><td align="right" class='awrc'>3.75ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>48</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.06</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.06</td><td align="right" headers="MB Total" class='awrnclb'>1</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>2</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>34,041,635</td><td align="right" headers="Requests IOs/s" class='awrct'>45,172.38</td><td align="right" headers="Requests Reads/s" class='awrct'>45,168.77</td><td align="right" headers="Requests Writes/s" class='awrct'>3.61</td><td align="right" headers="MB Total" class='awrclbt'>266,019</td><td align="right" headers="MB IOMB/s" class='awrct'>353.00</td><td align="right" headers="MB ReadMB/s" class='awrct'>352.95</td><td align="right" headers="MB WriteMB/s" class='awrcrbt'>0.05</td><td align="right" class='awrct'>1.6M</td><td align="right" class='awrct'>19.24ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>34,035,698</td><td align="right" headers="Requests IOs/s" class='awrnc'>45,164.50</td><td align="right" headers="Requests Reads/s" class='awrnc'>45,164.50</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>265,930</td><td align="right" headers="MB IOMB/s" class='awrnc'>352.88</td><td align="right" headers="MB ReadMB/s" class='awrnc'>352.88</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>1.6M</td><td align="right" class='awrnc'>19.26ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Others</td><td align="right" headers="Requests Total" class='awrclb'>3,780</td><td align="right" headers="Requests IOs/s" class='awrc'>5.02</td><td align="right" headers="Requests Reads/s" class='awrc'>4.26</td><td align="right" headers="Requests Writes/s" class='awrc'>0.75</td><td align="right" headers="MB Total" class='awrclb'>64</td><td align="right" headers="MB IOMB/s" class='awrc'>0.08</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.07</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.02</td><td align="right" class='awrc'>2394</td><td align="right" class='awrc'>13.69ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>DBWR</td><td align="right" headers="Requests Total" class='awrnclb'>924</td><td align="right" headers="Requests IOs/s" class='awrnc'>1.23</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.23</td><td align="right" headers="MB Total" class='awrnclb'>12</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.02</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.02</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>LGWR</td><td align="right" headers="Requests Total" class='awrclb'>1,149</td><td align="right" headers="Requests IOs/s" class='awrc'>1.52</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>1.52</td><td align="right" headers="MB Total" class='awrclb'>10</td><td align="right" headers="MB IOMB/s" class='awrc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.01</td><td align="right" class='awrc'>1148</td><td align="right" class='awrc'>4.40ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>84</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.11</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.11</td><td align="right" headers="MB Total" class='awrnclb'>3</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12077"></a>
<h3 class="awr">IOStat by File Type</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IOStat by File Type"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="Requests">Requests</th>
<th class="awrbg" colspan=" 4" id="MB">MB</th>
<th class="awrbg" colspan=" 2" id="ServiceTime">Service Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Filetype Name</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOs/s">IOs/s</th><th class="awrbg" scope="col" id="Reads/s">Reads/s</th><th class="awrbg" scope="col" id="Writes/s">Writes/s</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOMB/s">IO MB/s</th><th class="awrbg" scope="col" id="ReadMB/s">Read MB/s</th><th class="awrbg" scope="col" id="WriteMB/s">Write MB/s</th><th class="awrbg" scope="col" id="Small|Read">Small Read</th><th class="awrbg" scope="col" id="Large|Read">Large Read</th></tr>
<tr><td align="right" scope="row" class='awrc'>*</td><td class='awrc'>Total</td><td align="right" headers="Requests Total" class='awrclb'>58,328,006</td><td align="right" headers="Requests IOs/s" class='awrc'>77,399.77</td><td align="right" headers="Requests Reads/s" class='awrc'>77,392.37</td><td align="right" headers="Requests Writes/s" class='awrc'>7.41</td><td align="right" headers="MB Total" class='awrclb'>455,788</td><td align="right" headers="MB IOMB/s" class='awrc'>604.82</td><td align="right" headers="MB ReadMB/s" class='awrc'>604.71</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.11</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>1.26ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>34.31ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>58,317,792</td><td align="right" headers="Requests IOs/s" class='awrnc'>77,386.22</td><td align="right" headers="Requests Reads/s" class='awrnc'>77,383.34</td><td align="right" headers="Requests Writes/s" class='awrnc'>2.88</td><td align="right" headers="MB Total" class='awrnclb'>455,640</td><td align="right" headers="MB IOMB/s" class='awrnc'>604.62</td><td align="right" headers="MB ReadMB/s" class='awrnc'>604.57</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.05</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>1.25ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>38.06ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Control File</td><td align="right" headers="Requests Total" class='awrclb'>7,497</td><td align="right" headers="Requests IOs/s" class='awrc'>9.95</td><td align="right" headers="Requests Reads/s" class='awrc'>8.56</td><td align="right" headers="Requests Writes/s" class='awrc'>1.39</td><td align="right" headers="MB Total" class='awrclb'>118</td><td align="right" headers="MB IOMB/s" class='awrc'>0.16</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.13</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.02</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>4.60ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Log File</td><td align="right" headers="Requests Total" class='awrnclb'>2,100</td><td align="right" headers="Requests IOs/s" class='awrnc'>2.79</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.01</td><td align="right" headers="Requests Writes/s" class='awrnc'>2.78</td><td align="right" headers="MB Total" class='awrnclb'>23</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.03</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.03</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>.00ns</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>1.50ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Temp File</td><td align="right" headers="Requests Total" class='awrclb'>617</td><td align="right" headers="Requests IOs/s" class='awrc'>0.82</td><td align="right" headers="Requests Reads/s" class='awrc'>0.46</td><td align="right" headers="Requests Writes/s" class='awrc'>0.36</td><td align="right" headers="MB Total" class='awrclb'>7</td><td align="right" headers="MB IOMB/s" class='awrc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>3.55ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnct'>1</td><td class='awrnct'>Total</td><td align="right" headers="Requests Total" class='awrnclbt'>24,321,490</td><td align="right" headers="Requests IOs/s" class='awrnct'>32,274.00</td><td align="right" headers="Requests Reads/s" class='awrnct'>32,270.20</td><td align="right" headers="Requests Writes/s" class='awrnct'>3.80</td><td align="right" headers="MB Total" class='awrnclbt'>190,045</td><td align="right" headers="MB IOMB/s" class='awrnct'>252.18</td><td align="right" headers="MB ReadMB/s" class='awrnct'>252.13</td><td align="right" headers="MB WriteMB/s" class='awrnct'>0.06</td><td align="right" headers="ServiceTime Small|Read" class='awrnclbt'>815.08us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrbt'>30.91ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Data File</td><td align="right" headers="Requests Total" class='awrclb'>24,316,360</td><td align="right" headers="Requests IOs/s" class='awrc'>32,267.19</td><td align="right" headers="Requests Reads/s" class='awrc'>32,265.62</td><td align="right" headers="Requests Writes/s" class='awrc'>1.57</td><td align="right" headers="MB Total" class='awrclb'>189,968</td><td align="right" headers="MB IOMB/s" class='awrc'>252.08</td><td align="right" headers="MB ReadMB/s" class='awrc'>252.05</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.03</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>814.78us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>37.11ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>3,840</td><td align="right" headers="Requests IOs/s" class='awrnc'>5.10</td><td align="right" headers="Requests Reads/s" class='awrnc'>4.33</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.77</td><td align="right" headers="MB Total" class='awrnclb'>60</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.08</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.07</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>2.89ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>951</td><td align="right" headers="Requests IOs/s" class='awrc'>1.26</td><td align="right" headers="Requests Reads/s" class='awrc'>0.01</td><td align="right" headers="Requests Writes/s" class='awrc'>1.26</td><td align="right" headers="MB Total" class='awrclb'>13</td><td align="right" headers="MB IOMB/s" class='awrc'>0.02</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>.00ns</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1.50ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Temp File</td><td align="right" headers="Requests Total" class='awrnclb'>339</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.45</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.25</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.20</td><td align="right" headers="MB Total" class='awrnclb'>4</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>2.86ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>2</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>34,006,516</td><td align="right" headers="Requests IOs/s" class='awrct'>45,125.78</td><td align="right" headers="Requests Reads/s" class='awrct'>45,122.17</td><td align="right" headers="Requests Writes/s" class='awrct'>3.61</td><td align="right" headers="MB Total" class='awrclbt'>265,743</td><td align="right" headers="MB IOMB/s" class='awrct'>352.63</td><td align="right" headers="MB ReadMB/s" class='awrct'>352.59</td><td align="right" headers="MB WriteMB/s" class='awrct'>0.05</td><td align="right" headers="ServiceTime Small|Read" class='awrclbt'>1.57ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrbt'>39.19ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>34,001,432</td><td align="right" headers="Requests IOs/s" class='awrnc'>45,119.03</td><td align="right" headers="Requests Reads/s" class='awrnc'>45,117.73</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.31</td><td align="right" headers="MB Total" class='awrnclb'>265,672</td><td align="right" headers="MB IOMB/s" class='awrnc'>352.54</td><td align="right" headers="MB ReadMB/s" class='awrnc'>352.52</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.02</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>1.57ms</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>39.19ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Control File</td><td align="right" headers="Requests Total" class='awrclb'>3,657</td><td align="right" headers="Requests IOs/s" class='awrc'>4.85</td><td align="right" headers="Requests Reads/s" class='awrc'>4.23</td><td align="right" headers="Requests Writes/s" class='awrc'>0.62</td><td align="right" headers="MB Total" class='awrclb'>58</td><td align="right" headers="MB IOMB/s" class='awrc'>0.08</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.07</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>6.35ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Log File</td><td align="right" headers="Requests Total" class='awrnclb'>1,149</td><td align="right" headers="Requests IOs/s" class='awrnc'>1.52</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.52</td><td align="right" headers="MB Total" class='awrnclb'>10</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>&#160;</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Temp File</td><td align="right" headers="Requests Total" class='awrclb'>278</td><td align="right" headers="Requests IOs/s" class='awrc'>0.37</td><td align="right" headers="Requests Reads/s" class='awrc'>0.21</td><td align="right" headers="Requests Writes/s" class='awrc'>0.16</td><td align="right" headers="MB Total" class='awrclb'>3</td><td align="right" headers="MB IOMB/s" class='awrc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.00</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>4.38ms</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12070"></a>
<h3 class="awr">Segment Statistics (Global)</h3>
<ul>
<li class="awr"> % Total shows % of statistic for each segment compared to the global cluster-wide total     (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants) </li>
<li class="awr"> % Capture shows % of statistic for each segment compared to the  total captured     by AWR for all segments during the snapshot interval</li>
<li class="awr">Captured Segments account for	97.1% of Total Logical Reads:	4,430,834,022</li>
<li class="awr">Captured Segments account for	40.4% of Total Physical Reads:	    60,052,613</li>
<li class="awr">Captured Segments account for	40.4% of Total Physical Read Requests:	    60,046,503</li>
<li class="awr">Captured Segments account for	40.4% of Total UnOptimized Read Requests:      60,046,503</li>
<li class="awr">Captured Segments account for	 0.0% of Total Optimized  Read Requests:	       1</li>
<li class="awr">Captured Segments account for	 0.0% of Total Direct Physical Reads:		    1</li>
<li class="awr">Captured Segments account for	41.5% of Total Physical Writes: 	  6,598</li>
<li class="awr">Captured Segments account for	32.3% of Total Physical Write Requests: 	  2,761</li>
<li class="awr">Captured Segments account for	63.4% of Total Direct Physical Writes:		 2,340</li>
<li class="awr">Captured Segments account for	 0.0% of Total Table Scans:		  2</li>
<li class="awr">Captured Segments account for	10.4% of Total CR Blocks Received:	     1,610</li>
<li class="awr">Captured Segments account for	10.1% of Total Current Blocks Received: 	  4,550</li>
<li class="awr">Captured Segments account for	 9.4% of Total CR Blocks Served:	   1,773</li>
<li class="awr">Captured Segments account for	 8.0% of Total Current Blocks Served:		5,719</li>
<li class="awr">Captured Segments account for	31.6% of Total Global Cache Remote Grants:	17,417,958</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="Segment Statistics (Global). . % Total shows % of statistic for each segment compared to the global cluster-wide total (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants). % Capture shows % of statistic for each segment compared to the total captured by AWR for all segments during the snapshot interval"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Value</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">%Capture</th></tr>
<tr><td class='awrc'>buffer busy waits</td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>EXP_OBJ$</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>724</td><td align="right" class='awrc'>724</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>50.00</td></tr>
<tr><td class='awrnc'><div class="hidden">buffer busy waits</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSTEM</td><td class='awrnc'>SEG$</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>50.00</td></tr>
<tr><td class='awrc'>db block changes</td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_SYSSTAT_PK</td><td class='awrc'>WRH$_SYSSTAT_3890827801_46</td><td class='awrc'>INDEX PARTITION</td><td align="right" class='awrc'>84824</td><td align="right" class='awrc'>84824</td><td align="right" class='awrc'>3,424</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>32.23</td></tr>
<tr><td class='awrnc'><div class="hidden">db block changes</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_PK</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrnc'>INDEX PARTITION</td><td align="right" class='awrnc'>84844</td><td align="right" class='awrnc'>84847</td><td align="right" class='awrnc'>2,800</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>26.36</td></tr>
<tr><td class='awrc'><div class="hidden">db block changes</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_SQL_PLAN_PK</td><td class='awrc'>&#160;</td><td class='awrc'>INDEX</td><td align="right" class='awrc'>11150</td><td align="right" class='awrc'>11150</td><td align="right" class='awrc'>1,536</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>14.46</td></tr>
<tr><td class='awrnc'><div class="hidden">db block changes</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_SQL_PLAN</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>11147</td><td align="right" class='awrnc'>11147</td><td align="right" class='awrnc'>1,504</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>14.16</td></tr>
<tr><td class='awrc'><div class="hidden">db block changes</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_LATCH_PK</td><td class='awrc'>WRH$_LATCH_3890827801_46</td><td class='awrc'>INDEX PARTITION</td><td align="right" class='awrc'>84804</td><td align="right" class='awrc'>84804</td><td align="right" class='awrc'>1,360</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>12.80</td></tr>
<tr><td class='awrnc'>gc buffer busy</td><td class='awrnc'>SYS</td><td class='awrnc'>SYSTEM</td><td class='awrnc'>I_OBJ2</td><td class='awrnc'>&#160;</td><td class='awrnc'>INDEX</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>38.89</td></tr>
<tr><td class='awrc'><div class="hidden">gc buffer busy</div></td><td class='awrc'>USER61</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>79885</td><td align="right" class='awrc'>79917</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>13.33</td></tr>
<tr><td class='awrnc'><div class="hidden">gc buffer busy</div></td><td class='awrnc'>USER150</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80338</td><td align="right" class='awrnc'>80353</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>11.11</td></tr>
<tr><td class='awrc'><div class="hidden">gc buffer busy</div></td><td class='awrc'>USER178</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80467</td><td align="right" class='awrc'>80495</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>10.00</td></tr>
<tr><td class='awrnc'><div class="hidden">gc buffer busy</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSTEM</td><td class='awrnc'>SEG$</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>8.89</td></tr>
<tr><td class='awrc'><div class="hidden">gc buffer busy</div></td><td class='awrc'>USER204</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80613</td><td align="right" class='awrc'>80627</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>8.89</td></tr>
<tr><td class='awrnc'><div class="hidden">gc buffer busy</div></td><td class='awrnc'>USER215</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80649</td><td align="right" class='awrnc'>80671</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>8.89</td></tr>
<tr><td class='awrc'>gc cr blocks received</td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>EXP_OBJ$</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>724</td><td align="right" class='awrc'>724</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>3.73</td><td align="right" class='awrc'>51.28</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRI$_INDEX_USAGE</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>9236</td><td align="right" class='awrnc'>9236</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>10.26</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSTEM</td><td class='awrc'>OPTSTAT_HIST_CONTROL$</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>696</td><td align="right" class='awrc'>696</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.68</td><td align="right" class='awrc'>9.40</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSTEM</td><td class='awrnc'>SEG$</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.68</td><td align="right" class='awrnc'>9.40</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_SQLTEXT</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>11139</td><td align="right" class='awrc'>11139</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>6.84</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSTEM</td><td class='awrnc'>I_OBJ2</td><td class='awrnc'>&#160;</td><td class='awrnc'>INDEX</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.50</td><td align="right" class='awrnc'>6.84</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>84842</td><td align="right" class='awrc'>84842</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.43</td><td align="right" class='awrc'>5.98</td></tr>
<tr><td class='awrnc'>gc cr blocks served</td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>EXP_OBJ$</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>724</td><td align="right" class='awrnc'>724</td><td align="right" class='awrnc'>60</td><td align="right" class='awrnc'>3.38</td><td align="right" class='awrnc'>51.28</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRI$_INDEX_USAGE</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>9236</td><td align="right" class='awrc'>9236</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.68</td><td align="right" class='awrc'>10.26</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSTEM</td><td class='awrnc'>OPTSTAT_HIST_CONTROL$</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>696</td><td align="right" class='awrnc'>696</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.62</td><td align="right" class='awrnc'>9.40</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSTEM</td><td class='awrc'>SEG$</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.62</td><td align="right" class='awrc'>9.40</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_SQLTEXT</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>11139</td><td align="right" class='awrnc'>11139</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.45</td><td align="right" class='awrnc'>6.84</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSTEM</td><td class='awrc'>I_OBJ2</td><td class='awrc'>&#160;</td><td class='awrc'>INDEX</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.45</td><td align="right" class='awrc'>6.84</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>84842</td><td align="right" class='awrnc'>84842</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.39</td><td align="right" class='awrnc'>5.98</td></tr>
<tr><td class='awrc'>gc cu blocks received</td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>EXP_OBJ$</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>724</td><td align="right" class='awrc'>724</td><td align="right" class='awrc'>143</td><td align="right" class='awrc'>3.14</td><td align="right" class='awrc'>43.73</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks received</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRM$_SNAPSHOT_DETAILS_INDEX</td><td class='awrnc'>&#160;</td><td class='awrnc'>INDEX</td><td align="right" class='awrnc'>11582</td><td align="right" class='awrnc'>11582</td><td align="right" class='awrnc'>95</td><td align="right" class='awrnc'>2.09</td><td align="right" class='awrnc'>29.05</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks received</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>84842</td><td align="right" class='awrc'>84842</td><td align="right" class='awrc'>37</td><td align="right" class='awrc'>0.81</td><td align="right" class='awrc'>11.31</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks received</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_PK</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrnc'>INDEX PARTITION</td><td align="right" class='awrnc'>84844</td><td align="right" class='awrnc'>84847</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>8.26</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks received</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRI$_INDEX_USAGE</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>9236</td><td align="right" class='awrc'>9236</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>0.55</td><td align="right" class='awrc'>7.65</td></tr>
<tr><td class='awrnc'>gc cu blocks served</td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>EXP_OBJ$</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>724</td><td align="right" class='awrnc'>724</td><td align="right" class='awrnc'>143</td><td align="right" class='awrnc'>2.50</td><td align="right" class='awrnc'>43.73</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks served</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRM$_SNAPSHOT_DETAILS_INDEX</td><td class='awrc'>&#160;</td><td class='awrc'>INDEX</td><td align="right" class='awrc'>11582</td><td align="right" class='awrc'>11582</td><td align="right" class='awrc'>95</td><td align="right" class='awrc'>1.66</td><td align="right" class='awrc'>29.05</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks served</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>84842</td><td align="right" class='awrnc'>84842</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>0.65</td><td align="right" class='awrnc'>11.31</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks served</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_PK</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrc'>INDEX PARTITION</td><td align="right" class='awrc'>84844</td><td align="right" class='awrc'>84847</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0.47</td><td align="right" class='awrc'>8.26</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks served</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRI$_INDEX_USAGE</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>9236</td><td align="right" class='awrnc'>9236</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>0.44</td><td align="right" class='awrnc'>7.65</td></tr>
<tr><td class='awrc'>gc remote grants</td><td class='awrc'>USER12</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>79648</td><td align="right" class='awrc'>79678</td><td align="right" class='awrc'>139,947</td><td align="right" class='awrc'>0.80</td><td align="right" class='awrc'>21.01</td></tr>
<tr><td class='awrnc'><div class="hidden">gc remote grants</div></td><td class='awrnc'>USER254</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80854</td><td align="right" class='awrnc'>80875</td><td align="right" class='awrnc'>136,097</td><td align="right" class='awrnc'>0.78</td><td align="right" class='awrnc'>20.44</td></tr>
<tr><td class='awrc'><div class="hidden">gc remote grants</div></td><td class='awrc'>USER14</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>79659</td><td align="right" class='awrc'>79679</td><td align="right" class='awrc'>130,585</td><td align="right" class='awrc'>0.75</td><td align="right" class='awrc'>19.61</td></tr>
<tr><td class='awrnc'><div class="hidden">gc remote grants</div></td><td class='awrnc'>USER36</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>79791</td><td align="right" class='awrnc'>79805</td><td align="right" class='awrnc'>129,977</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>19.52</td></tr>
<tr><td class='awrc'><div class="hidden">gc remote grants</div></td><td class='awrc'>USER174</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80461</td><td align="right" class='awrc'>80466</td><td align="right" class='awrc'>129,389</td><td align="right" class='awrc'>0.74</td><td align="right" class='awrc'>19.43</td></tr>
<tr><td class='awrnc'>logical reads</td><td class='awrnc'>USER189</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80525</td><td align="right" class='awrnc'>80548</td><td align="right" class='awrnc'>358,679,440</td><td align="right" class='awrnc'>8.10</td><td align="right" class='awrnc'>22.86</td></tr>
<tr><td class='awrc'><div class="hidden">logical reads</div></td><td class='awrc'>USER172</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80449</td><td align="right" class='awrc'>80457</td><td align="right" class='awrc'>311,152,208</td><td align="right" class='awrc'>7.02</td><td align="right" class='awrc'>19.83</td></tr>
<tr><td class='awrnc'><div class="hidden">logical reads</div></td><td class='awrnc'>USER245</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80812</td><td align="right" class='awrnc'>80827</td><td align="right" class='awrnc'>304,940,224</td><td align="right" class='awrnc'>6.88</td><td align="right" class='awrnc'>19.44</td></tr>
<tr><td class='awrc'><div class="hidden">logical reads</div></td><td class='awrc'>USER134</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80271</td><td align="right" class='awrc'>80279</td><td align="right" class='awrc'>304,515,088</td><td align="right" class='awrc'>6.87</td><td align="right" class='awrc'>19.41</td></tr>
<tr><td class='awrnc'><div class="hidden">logical reads</div></td><td class='awrnc'>USER179</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80478</td><td align="right" class='awrnc'>80487</td><td align="right" class='awrnc'>289,512,528</td><td align="right" class='awrnc'>6.53</td><td align="right" class='awrnc'>18.45</td></tr>
<tr><td class='awrc'>physical reads</td><td class='awrc'>USER57</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>79872</td><td align="right" class='awrc'>79912</td><td align="right" class='awrc'>1,182,664</td><td align="right" class='awrc'>1.97</td><td align="right" class='awrc'>29.09</td></tr>
<tr><td class='awrnc'><div class="hidden">physical reads</div></td><td class='awrnc'>USER253</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80851</td><td align="right" class='awrnc'>80873</td><td align="right" class='awrnc'>1,166,159</td><td align="right" class='awrnc'>1.94</td><td align="right" class='awrnc'>28.69</td></tr>
<tr><td class='awrc'><div class="hidden">physical reads</div></td><td class='awrc'>USER193</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80544</td><td align="right" class='awrc'>80563</td><td align="right" class='awrc'>573,205</td><td align="right" class='awrc'>0.95</td><td align="right" class='awrc'>14.10</td></tr>
<tr><td class='awrnc'><div class="hidden">physical reads</div></td><td class='awrnc'>USER183</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80499</td><td align="right" class='awrnc'>80515</td><td align="right" class='awrnc'>571,907</td><td align="right" class='awrnc'>0.95</td><td align="right" class='awrnc'>14.07</td></tr>
<tr><td class='awrc'><div class="hidden">physical reads</div></td><td class='awrc'>USER35</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>79780</td><td align="right" class='awrc'>79802</td><td align="right" class='awrc'>571,140</td><td align="right" class='awrc'>0.95</td><td align="right" class='awrc'>14.05</td></tr>
<tr><td class='awrnc'>physical read requests</td><td class='awrnc'>USER57</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>79872</td><td align="right" class='awrnc'>79912</td><td align="right" class='awrnc'>1,182,664</td><td align="right" class='awrnc'>1.97</td><td align="right" class='awrnc'>29.09</td></tr>
<tr><td class='awrc'><div class="hidden">physical read requests</div></td><td class='awrc'>USER253</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80851</td><td align="right" class='awrc'>80873</td><td align="right" class='awrc'>1,166,159</td><td align="right" class='awrc'>1.94</td><td align="right" class='awrc'>28.69</td></tr>
<tr><td class='awrnc'><div class="hidden">physical read requests</div></td><td class='awrnc'>USER193</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>80544</td><td align="right" class='awrnc'>80563</td><td align="right" class='awrnc'>573,205</td><td align="right" class='awrnc'>0.95</td><td align="right" class='awrnc'>14.10</td></tr>
<tr><td class='awrc'><div class="hidden">physical read requests</div></td><td class='awrc'>USER183</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>80499</td><td align="right" class='awrc'>80515</td><td align="right" class='awrc'>571,908</td><td align="right" class='awrc'>0.95</td><td align="right" class='awrc'>14.07</td></tr>
<tr><td class='awrnc'><div class="hidden">physical read requests</div></td><td class='awrnc'>USER35</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>79780</td><td align="right" class='awrnc'>79802</td><td align="right" class='awrnc'>571,141</td><td align="right" class='awrnc'>0.95</td><td align="right" class='awrnc'>14.05</td></tr>
<tr><td class='awrc'>physical writes</td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>84842</td><td align="right" class='awrc'>84842</td><td align="right" class='awrc'>1,675</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>72.67</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_PK</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrnc'>INDEX PARTITION</td><td align="right" class='awrnc'>84844</td><td align="right" class='awrnc'>84847</td><td align="right" class='awrnc'>438</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>19.00</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_SQL_PLAN</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>11147</td><td align="right" class='awrc'>11147</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4.69</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_SQL_PLAN_PK</td><td class='awrnc'>&#160;</td><td class='awrnc'>INDEX</td><td align="right" class='awrnc'>11150</td><td align="right" class='awrnc'>11150</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2.39</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_SYSSTAT_PK</td><td class='awrc'>WRH$_SYSSTAT_3890827801_46</td><td class='awrc'>INDEX PARTITION</td><td align="right" class='awrc'>84824</td><td align="right" class='awrc'>84824</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1.26</td></tr>
<tr><td class='awrnc'>physical writes direct</td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrnc'>TABLE PARTITION</td><td align="right" class='awrnc'>84842</td><td align="right" class='awrnc'>84842</td><td align="right" class='awrnc'>1,472</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>99.26</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes direct</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>SYS_LOB0000007451C00009$$</td><td class='awrc'>SYS_LOB_P258</td><td class='awrc'>LOB PARTITION</td><td align="right" class='awrc'>79022</td><td align="right" class='awrc'>79022</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0.74</td></tr>
<tr><td class='awrnc'>physical write requests</td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_PK</td><td class='awrnc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrnc'>INDEX PARTITION</td><td align="right" class='awrnc'>84844</td><td align="right" class='awrnc'>84847</td><td align="right" class='awrnc'>333</td><td align="right" class='awrnc'>12.06</td><td align="right" class='awrnc'>54.50</td></tr>
<tr><td class='awrc'><div class="hidden">physical write requests</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_3890827801_46</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>84842</td><td align="right" class='awrc'>84842</td><td align="right" class='awrc'>178</td><td align="right" class='awrc'>6.45</td><td align="right" class='awrc'>29.13</td></tr>
<tr><td class='awrnc'><div class="hidden">physical write requests</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_SQL_PLAN</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>11147</td><td align="right" class='awrnc'>11147</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>1.59</td><td align="right" class='awrnc'>7.20</td></tr>
<tr><td class='awrc'><div class="hidden">physical write requests</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_SQL_PLAN_PK</td><td class='awrc'>&#160;</td><td class='awrc'>INDEX</td><td align="right" class='awrc'>11150</td><td align="right" class='awrc'>11150</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>6.87</td></tr>
<tr><td class='awrnc'><div class="hidden">physical write requests</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRH$_SQL_BIND_METADATA_PK</td><td class='awrnc'>&#160;</td><td class='awrnc'>INDEX</td><td align="right" class='awrnc'>11152</td><td align="right" class='awrnc'>11152</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.51</td><td align="right" class='awrnc'>2.29</td></tr>
<tr><td class='awrc'>row lock waits</td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_SEG_STAT_OBJ_INDEX</td><td class='awrc'>&#160;</td><td class='awrc'>INDEX</td><td align="right" class='awrc'>11341</td><td align="right" class='awrc'>11341</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>40.00</td></tr>
<tr><td class='awrnc'><div class="hidden">row lock waits</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSTEM</td><td class='awrnc'>OPTSTAT_HIST_CONTROL$</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>696</td><td align="right" class='awrnc'>696</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>40.00</td></tr>
<tr><td class='awrc'><div class="hidden">row lock waits</div></td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRM$_SNAPSHOT_DETAILS_INDEX</td><td class='awrc'>&#160;</td><td class='awrc'>INDEX</td><td align="right" class='awrc'>11582</td><td align="right" class='awrc'>11582</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>20.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12083"></a>
<h3 class="awr">Library Cache Activity</h3>
<ul>
<li class="awr"> Summarized for all instances in the report </li>
<li class="awr"> &quot;Pct Misses&quot;  should be very low  </li>
</ul>
<table border="0" class="tdiff" summary="Library Cache Activity. . Summarized for all instances in the report. &quot;Pct Misses&quot; should be very low "><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Pin Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Reloads</th><th class="awrbg" scope="col">Invali- dations</th><th class="awrbg" scope="col">GES Lock Requests</th><th class="awrbg" scope="col">GES Pin Requests</th><th class="awrbg" scope="col">GES Pin Releases</th><th class="awrbg" scope="col">GES Inval Requests</th><th class="awrbg" scope="col">GES Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>772</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>2,278</td><td align="right" class='awrc'>13.17</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>201</td><td align="right" class='awrc'>2,166</td><td align="right" class='awrc'>2,166</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>158</td><td align="right" class='awrnc'>1.27</td><td align="right" class='awrnc'>158</td><td align="right" class='awrnc'>1.27</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>158</td><td align="right" class='awrnc'>158</td><td align="right" class='awrnc'>158</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>16.67</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>12.50</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>12.50</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>HINTSET OBJECT</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>16.67</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>16.67</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>INDEX</td><td align="right" class='awrnc'>266</td><td align="right" class='awrnc'>3.38</td><td align="right" class='awrnc'>266</td><td align="right" class='awrnc'>16.17</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>266</td><td align="right" class='awrnc'>266</td><td align="right" class='awrnc'>266</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>OBJECT ID</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>QUEUE</td><td align="right" class='awrnc'>74</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>75</td><td align="right" class='awrnc'>1.33</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>74</td><td align="right" class='awrnc'>75</td><td align="right" class='awrnc'>75</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>RULESET</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SCHEMA</td><td align="right" class='awrnc'>985</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA</td><td align="right" class='awrc'>7,155</td><td align="right" class='awrc'>27.67</td><td align="right" class='awrc'>54,167,930</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>617</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA BUILD</td><td align="right" class='awrnc'>1,238</td><td align="right" class='awrnc'>76.41</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA STATS</td><td align="right" class='awrc'>1,028</td><td align="right" class='awrc'>88.13</td><td align="right" class='awrc'>1,028</td><td align="right" class='awrc'>88.13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TABLE/PROCEDURE</td><td align="right" class='awrnc'>5,398</td><td align="right" class='awrnc'>14.15</td><td align="right" class='awrnc'>19,681</td><td align="right" class='awrnc'>12.65</td><td align="right" class='awrnc'>790</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7,125</td><td align="right" class='awrnc'>13,065</td><td align="right" class='awrnc'>13,065</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TRANSFORMATION</td><td align="right" class='awrc'>74</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>74</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>74</td><td align="right" class='awrc'>74</td><td align="right" class='awrc'>74</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRIGGER</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>60.00</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>60.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="633"></a>
<h2 class="awr">
Memory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12074">PGA Aggregate Target Statistics</a></li>
<li class="awr"><a class="awr" href="#12075">Process Memory Summary</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12074"></a>
<h3 class="awr">PGA Aggregate Target Statistics</h3>
<ul>
<li class="awr"> all stats are reported in MegaBytes</li>
</ul>
<table border="0" class="tdiff" summary="PGA Aggregate Target Statistics. . all stats are reported in MegaBytes"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="PGAAggrTarget">PGA Aggr Target</th>
<th class="awrbg" colspan=" 2" id="AutoPGATarget">Auto PGA Target</th>
<th class="awrbg" colspan=" 2" id="PGAMemAlloc">PGA Mem Alloc</th>
<th class="awrbg" colspan=" 2" id="AutoWorkareas">Auto Workareas</th>
<th class="awrbg" colspan=" 2" id="ManualWorkarea">Manual Workarea</th>
<th class="awrbg" colspan=" 2" id="GlobalMemBound">Global Mem Bound</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="PGAAggrTarget Begin" class='awrclb'>8,082.00</td><td align="right" headers="PGAAggrTarget End" class='awrc'>8,082.00</td><td align="right" headers="AutoPGATarget Begin" class='awrclb'>4,149.73</td><td align="right" headers="AutoPGATarget End" class='awrc'>5,170.61</td><td align="right" headers="PGAMemAlloc Begin" class='awrclb'>4,332.98</td><td align="right" headers="PGAMemAlloc End" class='awrc'>2,766.99</td><td align="right" headers="AutoWorkareas Begin" class='awrclb'>0.00</td><td align="right" headers="AutoWorkareas End" class='awrc'>0.00</td><td align="right" headers="ManualWorkarea Begin" class='awrclb'>0.00</td><td align="right" headers="ManualWorkarea End" class='awrc'>0.00</td><td align="right" headers="GlobalMemBound Begin" class='awrclb'>808.19</td><td align="right" headers="GlobalMemBound End" class='awrcrb'>808.19</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="PGAAggrTarget Begin" class='awrnclb'>8,082.00</td><td align="right" headers="PGAAggrTarget End" class='awrnc'>8,082.00</td><td align="right" headers="AutoPGATarget Begin" class='awrnclb'>4,007.50</td><td align="right" headers="AutoPGATarget End" class='awrnc'>5,126.53</td><td align="right" headers="PGAMemAlloc Begin" class='awrnclb'>4,249.73</td><td align="right" headers="PGAMemAlloc End" class='awrnc'>2,766.09</td><td align="right" headers="AutoWorkareas Begin" class='awrnclb'>0.00</td><td align="right" headers="AutoWorkareas End" class='awrnc'>0.00</td><td align="right" headers="ManualWorkarea Begin" class='awrnclb'>0.00</td><td align="right" headers="ManualWorkarea End" class='awrnc'>0.00</td><td align="right" headers="GlobalMemBound Begin" class='awrnclb'>808.19</td><td align="right" headers="GlobalMemBound End" class='awrncrb'>808.19</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#633">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12075"></a>
<h3 class="awr">Process Memory Summary</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap I#: Instance number  </li>
<li class="awr"> Max Alloc is Maximum PGA allocation size at snapshot time </li>
<li class="awr"> Hist Max Alloc is the Historical Max Allocation for still-connected processes </li>
<li class="awr"> ordered by instance, Begin/End snapshot, Alloc (MB) </li>
</ul>
<table border="0" class="tdiff" summary="Process Memory Summary. . B: Begin Snap E: End Snap I#: Instance number . Max Alloc is Maximum PGA allocation size at snapshot time. Hist Max Alloc is the Historical Max Allocation for still-connected processes. ordered by instance, Begin/End snapshot, Alloc (MB) "><tr><th class="awrbg" scope="col">I#</th><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Category</th><th class="awrbg" scope="col">Alloc (MB)</th><th class="awrbg" scope="col">Used (MB)</th><th class="awrbg" scope="col">Avg Alloc (MB)</th><th class="awrbg" scope="col">Std Dev Alloc (MB)</th><th class="awrbg" scope="col">Max Alloc (MB)</th><th class="awrbg" scope="col">Hist Max Alloc (MB)</th><th class="awrbg" scope="col">Num Proc</th><th class="awrbg" scope="col">Num Alloc</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>556.38</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.89</td><td align="right" class='awrc'>3.72</td><td align="right" class='awrc'>43</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>295</td><td align="right" class='awrc'>295</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>2333.51</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3.36</td><td align="right" class='awrnc'>2.88</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>695</td><td align="right" class='awrnc'>695</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>130.33</td><td align="right" class='awrc'>127.79</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>0.23</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>439</td><td align="right" class='awrc'>437</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>33.02</td><td align="right" class='awrnc'>14.74</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>349</td><td align="right" class='awrnc'>340</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>3053.23</td><td align="right" class='awrc'>142.52</td><td align="right" class='awrc'>5.64</td><td align="right" class='awrc'>6.90</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>1778</td><td align="right" class='awrc'>1767</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>273.63</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4.64</td><td align="right" class='awrnc'>9.53</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>59</td><td align="right" class='awrnc'>59</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>1203.37</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2.86</td><td align="right" class='awrc'>4.23</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>421</td><td align="right" class='awrc'>421</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>6.27</td><td align="right" class='awrnc'>5.59</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>165</td><td align="right" class='awrnc'>163</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>3.91</td><td align="right" class='awrc'>1.34</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>76</td><td align="right" class='awrc'>52</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>1487.17</td><td align="right" class='awrnc'>6.93</td><td align="right" class='awrnc'>7.59</td><td align="right" class='awrnc'>14.08</td><td align="right" class='awrnc'>84</td><td align="right" class='awrnc'>59</td><td align="right" class='awrnc'>721</td><td align="right" class='awrnc'>695</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>382.56</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.32</td><td align="right" class='awrc'>3.67</td><td align="right" class='awrc'>43</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>289</td><td align="right" class='awrc'>289</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>2240.75</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3.34</td><td align="right" class='awrnc'>3.77</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>671</td><td align="right" class='awrnc'>671</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>118.57</td><td align="right" class='awrc'>116.17</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>413</td><td align="right" class='awrc'>411</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>228.08</td><td align="right" class='awrnc'>211.33</td><td align="right" class='awrnc'>0.73</td><td align="right" class='awrnc'>0.49</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>313</td><td align="right" class='awrnc'>299</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>2969.95</td><td align="right" class='awrc'>327.50</td><td align="right" class='awrc'>5.68</td><td align="right" class='awrc'>8.18</td><td align="right" class='awrc'>99</td><td align="right" class='awrc'>69</td><td align="right" class='awrc'>1686</td><td align="right" class='awrc'>1670</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>253.56</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>4.78</td><td align="right" class='awrnc'>7.80</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>53</td><td align="right" class='awrnc'>53</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>1221.57</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2.87</td><td align="right" class='awrc'>4.80</td><td align="right" class='awrc'>55</td><td align="right" class='awrc'>55</td><td align="right" class='awrc'>426</td><td align="right" class='awrc'>426</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>7.24</td><td align="right" class='awrnc'>6.55</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>170</td><td align="right" class='awrnc'>166</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>3.90</td><td align="right" class='awrc'>2.18</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>76</td><td align="right" class='awrc'>48</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>1486.27</td><td align="right" class='awrnc'>8.74</td><td align="right" class='awrnc'>7.75</td><td align="right" class='awrnc'>12.94</td><td align="right" class='awrnc'>95</td><td align="right" class='awrnc'>70</td><td align="right" class='awrnc'>725</td><td align="right" class='awrnc'>693</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#633">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="638"></a>
<h2 class="awr">
Supplemental Information
</h2>
<ul>
<li class="awr"><a class="awr" href="#12080">init.ora Parameters</a></li>
<li class="awr"><a class="awr" href="#12084">init.ora Multi-valued Parameters</a></li>
<li class="awr"><a class="awr" href="#99997">Complete List of SQL Text</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12080"></a>
<h3 class="awr">init.ora Parameters</h3>
<ul>
<li class="awr"> '*' indicates same value across all instances</li>
</ul>
<table border="0" class="tdiff" summary="This table displays values for init.ora parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>_ipddb_enable</td><td class='awrc'>*</td><td class='awrc'>TRUE</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>audit_file_dest</td><td class='awrnc'>*</td><td class='awrnc'>/u01/app/oracle/admin/p60sdb/adump</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>audit_trail</td><td class='awrc'>*</td><td class='awrc'>DB</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>cluster_database</td><td class='awrnc'>*</td><td class='awrnc'>TRUE</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>compatible</td><td class='awrc'>*</td><td class='awrc'>19.0.0</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>control_files</td><td class='awrnc'>*</td><td class='awrnc'>+P60S/P60SDB/CONTROLFILE/current.261.1032623513,	+P60SFRA/P60SDB/CONTROLFILE/current.256.1032623515</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_block_size</td><td class='awrc'>*</td><td class='awrc'>8192</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_create_file_dest</td><td class='awrnc'>*</td><td class='awrnc'>+P60S</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_domain</td><td class='awrc'>*</td><td class='awrc'>example.com</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_name</td><td class='awrnc'>*</td><td class='awrnc'>p60sdb</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_recovery_file_dest</td><td class='awrc'>*</td><td class='awrc'>+P60SFRA</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_recovery_file_dest_size</td><td class='awrnc'>*</td><td class='awrnc'>811597824000</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>diagnostic_dest</td><td class='awrc'>*</td><td class='awrc'>/u01/app/oracle</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>dispatchers</td><td class='awrnc'>*</td><td class='awrnc'>(PROTOCOL=TCP) (SERVICE=p60sdbXDB)</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>instance_number</td><td class='awrc'>1</td><td class='awrc'>1</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">instance_number</div></td><td class='awrnc'>2</td><td class='awrnc'>2</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>listener_networks</td><td class='awrc'>*</td><td class='awrc'></td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>local_listener</td><td class='awrnc'>1</td><td class='awrnc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522))</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'><div class="hidden">local_listener</div></td><td class='awrc'>2</td><td class='awrc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522))</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>nls_language</td><td class='awrnc'>*</td><td class='awrnc'>AMERICAN</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>nls_territory</td><td class='awrc'>*</td><td class='awrc'>AMERICA</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>open_cursors</td><td class='awrnc'>*</td><td class='awrnc'>300</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>pga_aggregate_target</td><td class='awrc'>*</td><td class='awrc'>8474591232</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>processes</td><td class='awrnc'>*</td><td class='awrnc'>2560</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>remote_listener</td><td class='awrc'>*</td><td class='awrc'>mcracpoc-scan.example.com:1521</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>remote_login_passwordfile</td><td class='awrnc'>*</td><td class='awrnc'>EXCLUSIVE</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>sga_max_size</td><td class='awrc'>*</td><td class='awrc'>42949672960</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>sga_target</td><td class='awrnc'>*</td><td class='awrnc'>15032385536</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>thread</td><td class='awrc'>1</td><td class='awrc'>1</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">thread</div></td><td class='awrnc'>2</td><td class='awrnc'>2</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>undo_tablespace</td><td class='awrc'>1</td><td class='awrc'>UNDOTBS1</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">undo_tablespace</div></td><td class='awrnc'>2</td><td class='awrnc'>UNDOTBS2</td><td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12084"></a>
<h3 class="awr">init.ora Multi-valued Parameters</h3>
<ul>
<li class="awr"> This section only displays parameters that have more one value </li>
<li class="awr"> '*' indicates same value across all instances </li>
<li class="awr"> '(NULL)' indicates that the  parameter value was not set </li>
<li class="awr"> A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot</li>
</ul>
<table border="0" class="tdiff" summary="init.ora Multi-valued Parameters. . This section only displays parameters that have more one value. '*' indicates same value across all instances. '(NULL)' indicates that the parameter value was not set. A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td class='awrc'>control_files</td><td class='awrc'>*</td><td class='awrc'>+P60S/P60SDB/CONTROLFILE/current.261.1032623513</td><td class='awrc'></td></tr>
<tr><td class='awrnc'><div class="hidden">control_files</div></td><td class='awrnc'>*</td><td class='awrnc'>+P60SFRA/P60SDB/CONTROLFILE/current.256.1032623515</td><td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="99997"></a>
<p />
<h3 class="awr">Complete List of SQL Text</h3><p />
<table border="0" class="tdiff" summary="This table displays the text of the SQL statements which have been
      referred to in the report">
<tr><th class="awrbg" scope="col">SQL Id</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0gx3b09qrx9f5"></a>0gx3b09qrx9f5</td><td class='awrc'><pre_sqltext class="awr">select obj#, index# from oid$ where user#=:1 and oid$=:2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="0hkn1frumxu6m"></a>0hkn1frumxu6m</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '253';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0yxz3m5s6rbuc"></a>0yxz3m5s6rbuc</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '213';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="1byq3btcxh13y"></a>1byq3btcxh13y</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '114';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="24djtk7r8fz33"></a>24djtk7r8fz33</td><td class='awrc'><pre_sqltext class="awr">update svcobj_access$ set accesses = :5,  inc_no = :6 where name = :1 AND pdb = :2 AND tsn = :3 AND objid = :4</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="2ax9k75b2p0d8"></a>2ax9k75b2p0d8</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '174';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="2q574p98jgjxa"></a>2q574p98jgjxa</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '135';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="39a45vj8zsf8j"></a>39a45vj8zsf8j</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '94';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3b0dw8qugt8u0"></a>3b0dw8qugt8u0</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '1';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS
_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_sc
hema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS
_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
= user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------------
---------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :=
 TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

 	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rando
m_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. F
inish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is
 a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3nbpzvhcr3kfm"></a>3nbpzvhcr3kfm</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '231';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3x31q3h9nbczf"></a>3x31q3h9nbczf</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '182';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3y9kpzk6azbmj"></a>3y9kpzk6azbmj</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '237';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="53saa2zkr6wc3"></a>53saa2zkr6wc3</td><td class='awrc'><pre_sqltext class="awr">select intcol#, nvl(pos#, 0), col#, nvl(spare1, 0) from ccol$ where con#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5cu0x10yu88sw"></a>5cu0x10yu88sw</td><td class='awrnc'><pre_sqltext class="awr">merge into sys.wri$_index_usage iu					     using dual 								   on (iu.obj# = :objn) 						       when matched then							     update									  set iu.total_access_count = iu.total_access_count + :ns,			    iu.total_rows_returned = iu.total_rows_returned + :rr,			  iu.total_exec_count = iu.total_exec_count + :ne,				iu.bucket_0_access_count = iu.bucket_0_access_count + :nsh0,		      iu.bucket_1_access_count = iu.bucket_1_access_count + :nsh1,		    iu.bucket_2_10_access_count = iu.bucket_2_10_access_count + :nsh2_10,	  iu.buc
ket_2_10_rows_returned = iu.bucket_2_10_rows_returned + 						  :nrh2_10,				     iu.bucket_11_100_access_count = iu.bucket_11_100_access_count +						     :nsh11_100,				iu.bucket_11_100_rows_returned = iu.bucket_11_100_rows_returned +						:nrh11_100,				   iu.bucket_101_1000_access_count = iu.bucket_101_1000_access_count +						   :nsh101_1000,			      iu.bucket_101_1000_rows_returned = iu.bucket_101_1000_rows_returned +					      :nrh101_1000,				 iu.bucket_1000_plus_access_count = iu.bucket_1000_plus_access_count +						 :nsh1000plus,				    iu.bucket_1000_plus_rows_returned = iu.bucket_1000_plus_rows_returned
				    + :nrh1000plus,			       last_used = SYSDATE						       when NOT matched then							     insert (iu.obj#,  iu.total_access_count,						    iu.total_rows_returned,							  iu.total_exec_count,								iu.bucket_0_access_count,						      iu.bucket_1_access_count, 						    iu.bucket_2_10_access_count,						  iu.bucket_2_10_rows_returned, 						iu.bucket_11_100_access_count,						      iu.bucket_11_100_rows_returned,						    iu.bucket_101_1000_access_count,
		  iu.bucket_101_1000_rows_returned,						iu.bucket_1000_plus_access_count,					      iu.bucket_1000_plus_rows_returned,					    iu.last_used)							 values (:objn,  :ns,  :rr,								 :ne,  :nsh0,  :nsh1,  :nsh2_10,  :nrh2_10,  :nsh11_100,  :nrh11_100,		       :nsh101_1000,  :nrh101_1000,  :nsh1000plus,  :nrh1000plus,			SYSDATE)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5gu1skrjws96k"></a>5gu1skrjws96k</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '224';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="66r22xx72w6mp"></a>66r22xx72w6mp</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '243';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="67r0q0md59ppd"></a>67r0q0md59ppd</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '226';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6gfqnqrxd0dmy"></a>6gfqnqrxd0dmy</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '35';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6pcyz05z3k6jd"></a>6pcyz05z3k6jd</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '183';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6sp9qmf2vj08q"></a>6sp9qmf2vj08q</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '42';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6wpwn81t8t9zf"></a>6wpwn81t8t9zf</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '236';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="87gaftwrm2h68"></a>87gaftwrm2h68</td><td class='awrnc'><pre_sqltext class="awr">select o.owner#, o.name, o.namespace, o.remoteowner, o.linkname, o.subname from obj$ o where o.obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="8hd7cuj9t6jbx"></a>8hd7cuj9t6jbx</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '16';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="8qh2pxjk3xp9m"></a>8qh2pxjk3xp9m</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '245';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="90vrpau1cn37t"></a>90vrpau1cn37t</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '36';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="99ksdkuvquzp0"></a>99ksdkuvquzp0</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '65';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9babjv8yq8ru3"></a>9babjv8yq8ru3</td><td class='awrc'><pre_sqltext class="awr">BEGIN DBMS_OUTPUT.GET_LINES(:LINES,  :NUMLINES); END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="a2q0c1jwp8bph"></a>a2q0c1jwp8bph</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '57';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="a52uzk244rp72"></a>a52uzk244rp72</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '200';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="acmvv4fhdc9zh"></a>acmvv4fhdc9zh</td><td class='awrnc'><pre_sqltext class="awr">select obj#, type#, ctime, mtime, stime,  status,  dataobj#,  flags,  oid$,  spare1,  spare2,  spare3,  signature,  spare7,  spare8,  spare9,  nvl(dflcollid,  16382),  creappid,  creverid,  modappid,	modverid,  crepatchid,	modpatchid from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is null</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="addq9vdq9961y"></a>addq9vdq9961y</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '249';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="b329y81c4wbq1"></a>b329y81c4wbq1</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '189';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="b45jpawxk7x03"></a>b45jpawxk7x03</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '239';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bhdvtsvjhgvrh"></a>bhdvtsvjhgvrh</td><td class='awrnc'><pre_sqltext class="awr">SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="c7hvsf8j9c5fx"></a>c7hvsf8j9c5fx</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '52';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="cxbpsarfrjbk0"></a>cxbpsarfrjbk0</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '169';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="d8zwkn2fy9t2s"></a>d8zwkn2fy9t2s</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '179';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="dhz4fxc8z3b1n"></a>dhz4fxc8z3b1n</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '193';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="drvvtfj8as01g"></a>drvvtfj8as01g</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '233';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f3ww8rgva3hrs"></a>f3ww8rgva3hrs</td><td class='awrnc'><pre_sqltext class="awr">update /* KSXM:FLUSH COL */ sys.col_usage$ set		       equality_preds	 = equality_preds    + decode(bitand(:flag, 1), 0, 0, 1),    equijoin_preds    = equijoin_preds    + decode(bitand(:flag, 2), 0, 0, 1),    nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag, 4), 0, 0, 1),	 range_preds	   = range_preds       + decode(bitand(:flag, 8), 0, 0, 1),    like_preds	 = like_preds	     + decode(bitand(:flag, 16), 0, 0, 1),    null_preds	= null_preds	    + decode(bitand(:flag, 32), 0, 0, 1),    flags	       = flags + :flag - bitand(flags, :flag),	   timestamp = :time where obj# = :objn and intcol# = :coln</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fndd8kn6zzc00"></a>fndd8kn6zzc00</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '172';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fv8pnssaw1s9q"></a>fv8pnssaw1s9q</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '209';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fzsxh00ghcb1k"></a>fzsxh00ghcb1k</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '134';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="g8v8v5r71h9cm"></a>g8v8v5r71h9cm</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '30';
v_update_pct PLS_INTEGER := '0';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '600';
v_scale PLS_INTEGER := '65536';
v_work_unit PLS_INTEGER := '80' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
</table>
<p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="43"></a>
<h2 class="awr">
Active Session History(ASH) Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#9981">Top SQL with Top Events</a></li>
<li class="awr"><a class="awr" href="#9980">Top SQL with Top Row Sources</a></li>
<li class="awr"><a class="awr" href="#9984">Top Sessions</a></li>
<li class="awr"><a class="awr" href="#9983">Top Blocking Sessions</a></li>
<li class="awr"><a class="awr" href="#9982">Top PL/SQL Procedures</a></li>
<li class="awr"><a class="awr" href="#9979">Top Events</a></li>
<li class="awr"><a class="awr" href="#9985">Top Event P1/P2/P3 Values</a></li>
<li class="awr"><a class="awr" href="#9978">Top DB Objects</a></li>
<li class="awr"><a class="awr" href="#9977">Activity Over Time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9981"></a>
<h3 class="awr">Top SQL with Top Events</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top events by DB Time	 for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event that the SQL is	   waiting on. </li>
<li class="awr"> % Row Source is the percentage of DB Time due to the row source for the     SQL waiting on the event. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top SQL by Top Wait Events"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Top Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>26126</td><td align="right" class='awrc'>97.68</td>
<td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>44.53</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>44.53</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">26126</div></td><td align="right" class='awrnc'><div class="hidden">97.68023907358983937243182667164736645499</div></td>
<td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>25.61</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>25.61</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">26126</div></td><td align="right" class='awrc'><div class="hidden">97.68023907358983937243182667164736645499</div></td>
<td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>13.00</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>9.40</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>269</td><td align="right" class='awrnc'>1.05</td>
<td class='awrnc'>library cache load lock</td><td align="right" class='awrnc'>1.00</td><td class='awrnc'>** Row Source Not Available **</td><td align="right" class='awrnc'>1.00</td>
<td class='awrnc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9980"></a>
<h3 class="awr">Top SQL with Top Row Sources</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top row sources by DB Time    for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Row Source is the percentage of DB Time spent on the row source by	   that SQL. </li>
<li class="awr"> % Event is the percentage of DB Time spent on the event by the      SQL executing the row source. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table display the Top SQLs with Top Row Sources"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">Top Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>26126</td><td align="right" class='awrc'>97.68</td>
<td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>91.46</td><td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>44.53</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">26126</div></td><td align="right" class='awrnc'><div class="hidden">97.68023907358983937243182667164736645499</div></td>
<td class='awrnc'>INDEX - RANGE SCAN</td><td align="right" class='awrnc'>5.36</td><td class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>3.60</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>269</td><td align="right" class='awrc'>1.05</td>
<td class='awrc'>** Row Source Not Available **</td><td align="right" class='awrc'>1.05</td><td class='awrc'>library cache load lock</td><td align="right" class='awrc'>1.00</td>
<td class='awrc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9984"></a>
<h3 class="awr">Top Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9983"></a>
<h3 class="awr">Top Blocking Sessions</h3>
<ul>
<li class="awr"> Blocking session activity percentages are calculated with respect to	     waits on enqueues, latches and &quot;buffer busy&quot; only  </li>
<li class="awr"> '% Activity' represents the load on the database caused by	   a particular blocking session </li>
<li class="awr"> '# Samples Active' shows the number of ASH samples in which the	blocking session was found active. </li>
<li class="awr"> 'XIDs' shows the number of distinct transaction IDs sampled in ASH	   when the blocking session was found active.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top sessions that are blocking other sessions."><tr><th class="awrbg" scope="col">Blocking Sid (Inst)</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event Caused</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">User</th><th class="awrbg" scope="col">Program</th><th class="awrbg" scope="col"># Samples Active</th><th class="awrbg" scope="col">XIDs</th></tr>
<tr><td align="right" scope="row" class='awrc'>3134,26428(     1)</td><td align="right" class='awrc'>1.00</td><td class='awrc'>library cache load lock</td><td align="right" class='awrc'>1.00</td>
<td class='awrc'>USER228</td><td class='awrc'>sqlplus@mcracp...m (TNS V1-V3)</td><td align="right" class='awrc'>57/75 [ 76%]</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9982"></a>
<h3 class="awr">Top PL/SQL Procedures</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9979"></a>
<h3 class="awr">Top Events</h3>
<ul>
<li class="awr"> Top Events by DB Time </li>
<li class="awr"> % Activity is the percentage of DB Time due to the event</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the top events"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Class</th><th class="awrbg" scope="col">Session Type</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>gc cr multi block request</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>44.54</td><td align="right" class='awrc'>158.34</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td class='awrnc'>User I/O</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>25.61</td><td align="right" class='awrnc'>91.06</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>13.01</td><td align="right" class='awrc'>46.25</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td class='awrnc'>User I/O</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>8.55</td><td align="right" class='awrnc'>30.41</td></tr>
<tr><td scope="row" class='awrc'>CPU + Wait for CPU</td><td class='awrc'>CPU</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>6.06</td><td align="right" class='awrc'>21.53</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9985"></a>
<h3 class="awr">Top Event P1/P2/P3 Values</h3>
<ul>
<li class="awr"> Top Events by DB Time and the top P1/P2/P3 values for those events. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event	</li>
<li class="awr"> % Activity is the percentage of DB Time due to the event with the given     P1,P2,P3 Values.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top event P1/P2/P3 values"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">P1, P2, P3 Values</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Parameter 1</th><th class="awrbg" scope="col">Parameter 2</th><th class="awrbg" scope="col">Parameter 3</th></tr>
<tr><td scope="row" class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>44.54</td><td align="right" class='awrc'>&quot;9&quot;,&quot;19464174&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.01</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>class#</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>25.61</td><td align="right" class='awrnc'>&quot;1&quot;,&quot;77&quot;,&quot;77&quot;</td><td align="right" class='awrnc'>19.97</td>
<td class='awrnc'>files</td><td class='awrnc'>blocks</td><td class='awrnc'>requests</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>8.58</td><td align="right" class='awrc'>&quot;9&quot;,&quot;31590953&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.01</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>blocks</td></tr>
<tr><td scope="row" class='awrnc'>library cache load lock</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>&quot;3435721264&quot;,&quot;3358630944&quot;,&quot;64381559898115&quot;</td><td align="right" class='awrnc'>0.00</td>
<td class='awrnc'>object address</td><td class='awrnc'>lock address</td><td class='awrnc'>100*mask+namespace</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9978"></a>
<h3 class="awr">Top DB Objects</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9977"></a>
<h3 class="awr">Activity Over Time</h3>
<ul>
<li class="awr"> Analysis period is divided into smaller time slots as indicated    in the 'Slot Time (Duration)'. </li>
<li class="awr"> Top 3 events are reported in each of those slots </li>
<li class="awr"> 'Slot Count' shows the number of ASH samples in that slot </li>
<li class="awr"> 'Event Count' shows the number of ASH samples waiting for    that event in that slot </li>
<li class="awr"> '% Event' is 'Event Count' over all ASH samples in the analysis period</li>
</ul>
<table border="0" class="tdiff" summary="This table show the activity in ASH over time"><tr><th class="awrbg" scope="col">Slot Time (Duration)</th><th class="awrbg" scope="col">Slot Count</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Count</th><th class="awrbg" scope="col">% Event</th></tr>
<tr><td align="right" class='awrc'>21:32:34   (2.4 min)</td><td align="right" class='awrc'>4,858</td><td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>2,115</td><td align="right" class='awrc'>7.90</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">21:32:34   (2.4 min)</div></td><td align="right" class='awrnc'><div class="hidden">4858</div></td><td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>1,355</td><td align="right" class='awrnc'>5.06</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">21:32:34   (2.4 min)</div></td><td align="right" class='awrc'><div class="hidden">4858</div></td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>602</td><td align="right" class='awrc'>2.25</td></tr>
<tr><td align="right" class='awrnc'>21:35:00   (5.0 min)</td><td align="right" class='awrnc'>15,433</td><td class='awrnc'>gc cr multi block request</td><td align="right" class='awrnc'>7,337</td><td align="right" class='awrnc'>27.41</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">21:35:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">15433</div></td><td class='awrc'>db file parallel read</td><td align="right" class='awrc'>3,697</td><td align="right" class='awrc'>13.81</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">21:35:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">15433</div></td><td class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>1,988</td><td align="right" class='awrnc'>7.43</td></tr>
<tr><td align="right" class='awrc'>21:40:00   (5.0 min)</td><td align="right" class='awrc'>6,479</td><td class='awrc'>gc cr multi block request</td><td align="right" class='awrc'>2,471</td><td align="right" class='awrc'>9.23</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">21:40:00   (5.0 min)</div></td><td align="right" class='awrnc'><div class="hidden">6479</div></td><td class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>1,805</td><td align="right" class='awrnc'>6.74</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">21:40:00   (5.0 min)</div></td><td align="right" class='awrc'><div class="hidden">6479</div></td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>896</td><td align="right" class='awrc'>3.35</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="99994"></a>
<h2>ADDM Task ADDM:3890827801_48</h2>
<pre>
	  ADDM Report for Task &apos;ADDM:3890827801_48&apos;
	  -----------------------------------------

Analysis Period
---------------
AWR snapshot range from 47 to 48.
Time period starts at 20-FEB-20 09.32.34 PM
Time period ends at 20-FEB-20 09.45.08 PM

Analysis Target
---------------
Database &apos;P60SDB&apos; with DB ID 3890827801.
Database version 19.0.0.0.0.
ADDM performed an analysis of all instances.

Activity During the Analysis Period
-----------------------------------
Total database time was 283471 seconds.
The average number of active sessions was 375.96.

Summary of Findings
-------------------
   Description		      Active Sessions	   Recommendations
			      Percent of Activity
   -------------------------  -------------------  ---------------
1  Interconnect Latency       375.96 | 100	   1
2  Top SQL Statements	      369.43 | 98.26	   1
3  Global Cache Messaging     220.06 | 58.53	   1
4  &quot;User I/O&quot; wait Class	138.82 | 36.92	     0
5  Buffer Busy - Hot Objects  58.05 | 15.44	   0
6  Undersized SGA	      37.18 | 9.89	   1


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 376.46 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time.
The database was consuming 151081 kilo bits per second of interconnect
bandwidth.
0% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 98% for database lock management.
The average latency for 8K interconnect messages was 75314 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  53.29	     ADDM:3890827801_1_48
    2	    p60sdb2  46.71	     ADDM:3890827801_2_48

   Recommendation 1: Host Configuration
   Estimated benefit is 375.96 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle&apos;s recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 220.06 active sessions, 58.53% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 220.08 active sessions, 58.54% of total activity.


Finding 2: Top SQL Statements
Impact is 369.92 active sessions, 98.26% of total activity.
-----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  51.36	     ADDM:3890827801_1_48
    2	    p60sdb2  48.64	     ADDM:3890827801_2_48

   Recommendation 1: SQL Tuning
   Estimated benefit is 369.43 active sessions, 98.26% of total activity.
   ----------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      &quot;bhdvtsvjhgvrh&quot;.
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND
	 (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 100% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;bhdvtsvjhgvrh&quot; was executed 50868998 times
      and had an average elapsed time of 0.005 seconds.


Finding 3: Global Cache Messaging
Impact is 220.36 active sessions, 58.53% of total activity.
-----------------------------------------------------------
Inter-instance messaging was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  63.51	     ADDM:3890827801_1_48
    2	    p60sdb2  36.49	     ADDM:3890827801_2_48

   Recommendation 1: Application Analysis
   Estimated benefit is 220.06 active sessions, 58.53% of total activity.
   ----------------------------------------------------------------------
   Action
      Look at the &quot;Top SQL Statements&quot; finding for SQL statements consuming
      significant time on Cluster waits. For example, the SELECT statement
      with SQL_ID &quot;bhdvtsvjhgvrh&quot; is responsible for 99% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 220.08 active sessions, 58.54% of total activity.


Finding 4: &quot;User I/O&quot; wait Class
Impact is 139 active sessions, 36.92% of total activity.
--------------------------------------------------------
Wait class &quot;User I/O&quot; was consuming significant database time.
The throughput of the I/O subsystem was not significantly lower than expected.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  71.35	     ADDM:3890827801_2_48
    1	    p60sdb1  28.65	     ADDM:3890827801_1_48

   No recommendations are available.


Finding 5: Buffer Busy - Hot Objects
Impact is 58.12 active sessions, 15.44% of total activity.
----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p60sdb1  100	     ADDM:3890827801_1_48

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 58.05 active sessions, 15.44% of total activity.
	 Inter-instance messaging was consuming significant database time.
	 Impact is 220.06 active sessions, 58.53% of total activity.
	    Wait class &quot;Cluster&quot; was consuming significant database time.
	    Impact is 220.08 active sessions, 58.54% of total activity.


Finding 6: Undersized SGA
Impact is 37.23 active sessions, 9.89% of total activity.
---------------------------------------------------------
The SGA was inadequately sized in some instances, causing additional I/O or
hard parses.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p60sdb2  64.08	     ADDM:3890827801_2_48
    1	    p60sdb1  35.92	     ADDM:3890827801_1_48

   Recommendation 1: Examine instance ADDM
   Estimated benefit is 37.18 active sessions, 9.89% of total activity.
   --------------------------------------------------------------------
   Action
      Increase the size of the SGA on affected instances. Check the ADDM
      analysis of affected instances for more details.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Instances that were analyzed:
-----------------------------
    Number  Name     Host Name		    Active Sessions  Percent of Activity
    ------  -------  ---------------------  ---------------  -------------------
    1	    p60sdb1  mcracpoc1.example.com  200.6	     53.29
    2	    p60sdb2  mcracpoc2.example.com  175.86	     46.71

Warnings
--------
The flushing of snapshots 47 and 48 took 84 seconds which is 11% of the
analysis period time. This may reduce the reliability of the ADDM analysis.

Miscellaneous Information
-------------------------
Wait class &quot;Application&quot; was not consuming significant database time.
Wait class &quot;Commit&quot; was not consuming significant database time.
Wait class &quot;Concurrency&quot; was not consuming significant database time.
Wait class &quot;Configuration&quot; was not consuming significant database time.
Wait class &quot;Network&quot; was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.

</pre>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<p />
End of Report
</body></html>
Report written to awr_rac.html
SQL> Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0
NOTIFY  : 2020.02.20-21:45:48 : Compressing file: "awr_rac.html".
NOTIFY  : 2020.02.20-21:45:48 : Compressing file: "awr.html".
