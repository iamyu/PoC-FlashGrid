

































































































































































































































































PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.











PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.





PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.






PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.






PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.






PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.
PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.



PL/SQL procedure successfully completed.PL/SQL procedure successfully completed.




PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


SQL*Plus: Release 19.0.0.0.0 - Production on Mon Feb 17 09:32:14 2020
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.


SQL*Plus: Release 19.0.0.0.0 - Production on Mon Feb 17 09:32:14 2020
Version 19.3.0.0.0

Copyright (c) 1982, 2019, Oracle.  All rights reserved.

Last Successful login time: Mon Feb 17 2020 09:32:10 +08:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2    3    4    5    6  Last Successful login time: Mon Feb 17 2020 09:32:10 +08:00

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL>   2    3    4    5    6  
   DB Id    DB Name	 Inst Num Instance
----------- ------------ -------- ------------
 1451622190 P30SDB		2 p30sdb2

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> 
   DB Id    DB Name	 Inst Num Instance
----------- ------------ -------- ------------
 1451622190 P30SDB		2 p30sdb2

SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> SQL> 
Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt. Default value is 'html'.

   'html'	   HTML format (default)
   'text'	   Text format
   'active-html'   Includes Performance Hub active report


Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt. Default value is 'html'.

   'html'	   HTML format (default)
   'text'	   Text format
   'active-html'   Includes Performance Hub active report






Type Specified: html

Type Specified: text


Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
  1451622190	 1	P30SDB	     p30sdb1	  mcracpoc1.ex
* 1451622190	 2	P30SDB	     p30sdb2	  mcracpoc2.ex

Using 1451622190 for database Id
Using	       2 for instance number
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
  1451622190	 1	P30SDB	     p30sdb1	  mcracpoc1.ex
* 1451622190	 2	P30SDB	     p30sdb2	  mcracpoc2.ex

Using 1451622190 for database Id
Using	       2 for instance number


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.




Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.



Listing the last day's Completed Snapshots

Listing the last day's Completed Snapshots
Instance     DB Name	  Snap Id	Snap Started	Snap Level
------------ ------------ ---------- ------------------ ----------

p30sdb2      P30SDB		 30  17 Feb 2020 07:54	  1
				 31  17 Feb 2020 08:10	  1
				 32  17 Feb 2020 08:16	  1
				 33  17 Feb 2020 08:20	  1
				 34  17 Feb 2020 08:25	  1
				 35  17 Feb 2020 08:27	  1
				 36  17 Feb 2020 08:33	  1
				 37  17 Feb 2020 08:37	  1
				 38  17 Feb 2020 08:43	  1
				 39  17 Feb 2020 08:47	  1
				 40  17 Feb 2020 08:52	  1
				 41  17 Feb 2020 08:55	  1
Instance     DB Name	  Snap Id	Snap Started	Snap Level
------------ ------------ ---------- ------------------ ----------

p30sdb2      P30SDB		 30  17 Feb 2020 07:54	  1
				 31  17 Feb 2020 08:10	  1
				 32  17 Feb 2020 08:16	  1
				 33  17 Feb 2020 08:20	  1
				 34  17 Feb 2020 08:25	  1
				 35  17 Feb 2020 08:27	  1
				 36  17 Feb 2020 08:33	  1
				 37  17 Feb 2020 08:37	  1
				 38  17 Feb 2020 08:43	  1
				 39  17 Feb 2020 08:47	  1
				 40  17 Feb 2020 08:52	  1
				 41  17 Feb 2020 08:55	  1
				 42  17 Feb 2020 09:00	  1
				 43  17 Feb 2020 09:09	  1
				 44  17 Feb 2020 09:14	  1
				 45  17 Feb 2020 09:17	  1
				 46  17 Feb 2020 09:23	  1
				 47  17 Feb 2020 09:26	  1
				 48  17 Feb 2020 09:32	  1
				 42  17 Feb 2020 09:00	  1
				 43  17 Feb 2020 09:09	  1
				 44  17 Feb 2020 09:14	  1
				 45  17 Feb 2020 09:17	  1

				 46  17 Feb 2020 09:23	  1

				 47  17 Feb 2020 09:26	  1
				 48  17 Feb 2020 09:32	  1
Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 47

End   Snapshot Id specified: 48



Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 47

End   Snapshot Id specified: 48



Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_2_47_48.txt.  To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr.txt


Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_2_47_48.html.  To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr.html

<html lang="en"><head><title>AWR Report for DB: P30SDB, Inst: p30sdb2, Snaps: 47-48</title>
<style type="text/css">
body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}
pre.awr  {font:8pt Courier;color:black; background:White;}
pre_sqltext.awr  {white-space: pre-wrap;}
h1.awr	 {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}
h2.awr	 {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
h3.awr {font:bold 16pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}
th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}
th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px}
td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}
td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}
td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}
td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}
td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}
td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}
td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}
td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}
td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}
table.tdiff {  border_collapse: collapse; }
table.tscl {width: 600;}
table.tscl tbody, table.tscl thead { display: block; }
table.tscl thead tr th {height: 12px;line-height: 12px;}
table.tscl tbody { height: 100px;overflow-y: auto; overflow-x: hidden;}
table.tscl tbody td, thead th {width: 200;}
.hidden   {position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;}
.pad   {margin-left:17px;}
.doublepad {margin-left:34px;}
</style></head><body class="awr">
<h1 class="awr">
WORKLOAD REPOSITORY report for

</h1>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays database instance information">
<tr><th class="awrbg" scope="col">DB Name</th><th class="awrbg" scope="col">DB Id</th><th class="awrbg" scope="col">Unique Name</th><th class="awrbg" scope="col">Role</th><th class="awrbg" scope="col">Edition</th><th class="awrbg" scope="col">Release</th><th class="awrbg" scope="col">RAC</th><th class="awrbg" scope="col">CDB</th></tr>
<tr><td scope="row" class='awrnc'>P30SDB</td><td align="right" class='awrnc'>1451622190</td><td class='awrnc'>p30sdb</td><td class='awrnc'>PRIMARY</td><td class='awrnc'>EE</td><td class='awrnc'>19.0.0.0.0</td><td class='awrnc'>YES</td><td class='awrnc'>NO</td></tr>
</table>
<p />
<p />
<table border="0" class="tdiff" summary="This table displays database instance information">
<tr><th class="awrbg" scope="col">Instance</th><th class="awrbg" scope="col">Inst Num</th><th class="awrbg" scope="col">Startup Time</th></tr>
<tr><td scope="row" class='awrnc'>p30sdb2</td><td align="right" class='awrnc'>2</td><td class='awrnc'>17-Feb-20 07:43</td></tr>
</table>
<p />
<p />
<table border="0" width="600" class="tdiff" summary="This table displays host information">
<tr><th class="awrbg" scope="col">Host Name</th><th class="awrbg" scope="col">Platform</th><th class="awrbg" scope="col">CPUs</th><th class="awrbg" scope="col">Cores</th><th class="awrbg" scope="col">Sockets</th><th class="awrbg" scope="col">Memory (GB)</th></tr>
<tr><td scope="row" class='awrnc'>mcracpoc2.example.com</td><td class='awrnc'>Linux x86 64-bit</td><td align="right" class='awrnc'>  64</td><td align="right" class='awrnc'>  32</td><td align="right" class='awrnc'>	2</td><td align="right" class='awrnc'> 1007.90</td></tr>
</table>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays snapshot information">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Snap Id</th><th class="awrbg" scope="col">Snap Time</th><th class="awrbg" scope="col">Sessions</th><th class="awrbg" scope="col">Cursors/Session</th><th class="awrbg" scope="col">Instances</th></tr>
<tr><td scope="row" class='awrnc'>Begin Snap:</td><td align="right" class='awrnc'>47</td><td align="center" class='awrnc'>17-Feb-20 09:26:07</td><td align="right" class='awrnc'>257</td><td align="right" class='awrnc'>      2.8</td><td align="right" class='awrnc'>2</td></tr>
<tr><td scope="row" class='awrc'>End Snap:</td><td align="right" class='awrc'>48</td><td align="center" class='awrc'>17-Feb-20 09:32:10</td><td align="right" class='awrc'>139</td><td align="right" class='awrc'>	 .9</td><td align="right" class='awrc'>2</td></tr>
<tr><td scope="row" class='awrnc'>Elapsed:</td><td class='awrnc'>&#160;</td><td align="center" class='awrnc'>		    6.05 (mins)</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DB Time:</td><td class='awrc'>&#160;</td><td align="center" class='awrc'>	       477.46 (mins)</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
</table>
<p />
<h3 class="awr"><a class="awr" name="99999"></a>Report Summary</h3>
<p />Top ADDM Findings by Average Active Sessions<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top ADDM findings by average active sessions"><tr><th class="awrbg" scope="col">Finding Name</th><th class="awrbg" scope="col">Avg active sessions of the task</th><th class="awrbg" scope="col">Percent active sessions of finding</th><th class="awrbg" scope="col">Task Name</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th></tr>
<tr><td class='awrc'>Interconnect Latency</td><td align="right" class='awrc'>78.92</td><td align="right" class='awrc'>1.0E+02</td><td scope="row" class='awrc'>ADDM:1451622190_2_48</td><td class='awrc'>17-Feb-20 09:26</td><td class='awrc'>17-Feb-20 09:32</td></tr>
<tr><td class='awrnc'>Top SQL Statements</td><td align="right" class='awrnc'>78.92</td><td align="right" class='awrnc'>97.73</td><td scope="row" class='awrnc'>ADDM:1451622190_2_48</td><td class='awrnc'>17-Feb-20 09:26</td><td class='awrnc'>17-Feb-20 09:32</td></tr>
<tr><td class='awrc'>Global Cache Messaging</td><td align="right" class='awrc'>78.92</td><td align="right" class='awrc'>63.17</td><td scope="row" class='awrc'>ADDM:1451622190_2_48</td><td class='awrc'>17-Feb-20 09:26</td><td class='awrc'>17-Feb-20 09:32</td></tr>
<tr><td class='awrnc'>Buffer Busy - Hot Objects</td><td align="right" class='awrnc'>78.92</td><td align="right" class='awrnc'>46.70</td><td scope="row" class='awrnc'>ADDM:1451622190_2_48</td><td class='awrnc'>17-Feb-20 09:26</td><td class='awrnc'>17-Feb-20 09:32</td></tr>
<tr><td class='awrc'>Free Buffer Waits</td><td align="right" class='awrc'>78.92</td><td align="right" class='awrc'>13.63</td><td scope="row" class='awrc'>ADDM:1451622190_2_48</td><td class='awrc'>17-Feb-20 09:26</td><td class='awrc'>17-Feb-20 09:32</td></tr>
</table><p />
<p />Load Profile<p />
<table border="0" width="600" class="tdiff" summary="This table displays load profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Per Second</th><th class="awrbg" scope="col">Per Transaction</th><th class="awrbg" scope="col">Per Exec</th><th class="awrbg" scope="col">Per Call</th></tr>
<tr><td scope="row" class='awrc'>DB Time(s):</td><td align="right" class='awrc'>	      78.9</td><td align="right" class='awrc'>		     0.1</td><td align="right" class='awrc'>	  0.01</td><td align="right" class='awrc'>     22.66</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU(s):</td><td align="right" class='awrnc'>		7.6</td><td align="right" class='awrnc'>	       0.0</td><td align="right" class='awrnc'>      0.00</td><td align="right" class='awrnc'>	    2.17</td></tr>
<tr><td scope="row" class='awrc'>Background CPU(s):</td><td align="right" class='awrc'> 	      1.6</td><td align="right" class='awrc'>		    0.0</td><td align="right" class='awrc'>	 0.00</td><td align="right" class='awrc'>      0.00</td></tr>
<tr><td scope="row" class='awrnc'>Redo size (bytes):</td><td align="right" class='awrnc'>	2,944,975.9</td><td align="right" class='awrnc'>	   2,821.2</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Logical read (blocks):</td><td align="right" class='awrc'>	     55,110.0</td><td align="right" class='awrc'>	       52.8</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Block changes:</td><td align="right" class='awrnc'>		8,504.0</td><td align="right" class='awrnc'>		   8.2</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Physical read (blocks):</td><td align="right" class='awrc'>	      29,798.7</td><td align="right" class='awrc'>		28.6</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Physical write (blocks):</td><td align="right" class='awrnc'> 	  3,302.4</td><td align="right" class='awrnc'>		     3.2</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Read IO requests:</td><td align="right" class='awrc'>		29,792.8</td><td align="right" class='awrc'>		  28.5</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write IO requests:</td><td align="right" class='awrnc'>	    3,118.2</td><td align="right" class='awrnc'>	       3.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Read IO (MB):</td><td align="right" class='awrc'>	       232.8</td><td align="right" class='awrc'>	       0.2</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Write IO (MB):</td><td align="right" class='awrnc'>		   25.8</td><td align="right" class='awrnc'>		   0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM scan rows:</td><td align="right" class='awrc'>		 0.0</td><td align="right" class='awrc'>	       0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Session Logical Read IM:</td><td align="right" class='awrnc'> 	      0.0</td><td align="right" class='awrnc'>		     0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Global Cache blocks received:</td><td align="right" class='awrc'>		12.3</td><td align="right" class='awrc'>	       0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Global Cache blocks served:</td><td align="right" class='awrnc'>		11.9</td><td align="right" class='awrnc'>		0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>User calls:</td><td align="right" class='awrc'>	       3.5</td><td align="right" class='awrc'>		     0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parses (SQL):</td><td align="right" class='awrnc'>		  13.3</td><td align="right" class='awrnc'>		  0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Hard parses (SQL):</td><td align="right" class='awrc'> 	      2.9</td><td align="right" class='awrc'>		    0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL Work Area (MB):</td><td align="right" class='awrnc'>		 1.3</td><td align="right" class='awrnc'>		0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Logons:</td><td align="right" class='awrc'>		   0.3</td><td align="right" class='awrc'>		 0.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>User logons:</td><td align="right" class='awrnc'>		  0.0</td><td align="right" class='awrnc'>		 0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Executes (SQL):</td><td align="right" class='awrc'>	      10,439.6</td><td align="right" class='awrc'>		10.0</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Rollbacks:</td><td align="right" class='awrnc'>		0.0</td><td align="right" class='awrnc'>	       0.0</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Transactions:</td><td align="right" class='awrc'>	     1,043.9</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td></tr>
</table>
<p />
Instance Efficiency Percentages (Target 100%)
<p />
<table border="0" width="600" class="tdiff" summary="This table displays instance efficiency percentages">
<tr><td scope="row" class='awrc'>Buffer Nowait %:</td><td align="right" class='awrc'>		100.00</td><td class='awrc'>Redo NoWait %:</td><td align="right" class='awrc'>		 100.00</td></tr>
<tr><td scope="row" class='awrnc'>Buffer  Hit	%:</td><td align="right" class='awrnc'> 	   45.92</td><td class='awrnc'>In-memory Sort %:</td><td align="right" class='awrnc'>		100.00</td></tr>
<tr><td scope="row" class='awrc'>Library Hit   %:</td><td align="right" class='awrc'>		 99.97</td><td class='awrc'>Soft Parse %:</td><td align="right" class='awrc'>		 78.36</td></tr>
<tr><td scope="row" class='awrnc'>Execute to Parse %:</td><td align="right" class='awrnc'>	      99.87</td><td class='awrnc'>Latch Hit %:</td><td align="right" class='awrnc'>	       99.97</td></tr>
<tr><td scope="row" class='awrc'>Parse CPU to Parse Elapsd %:</td><td align="right" class='awrc'>	     28.64</td><td class='awrc'>% Non-Parse CPU:</td><td align="right" class='awrc'>		99.94</td></tr>
<tr><td scope="row" class='awrnc'>Flash Cache Hit %:</td><td align="right" class='awrnc'>	      0.00</td></tr>
</table>

<p />Top 10 Foreground Events by Total Wait Time<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top 10 wait events by total wait time"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (sec)</th><th class="awrbg" scope="col">Avg Wait</th><th class="awrbg" scope="col">% DB time</th><th class="awrbg" scope="col">Wait Class</th></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>1,174,558</td><td align="right" class='awrc'>12.2K</td><td align="right" class='awrc'>10.37ms</td><td align="right" class='awrc'>42.5</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>10,924,627</td><td align="right" class='awrnc'>3825.7</td><td align="right" class='awrnc'>350.19us</td><td align="right" class='awrnc'>13.4</td><td class='awrnc'>User I/O</td></tr>
<tr><td scope="row" class='awrc'>DB CPU</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2747.9</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>9.6</td><td class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>284,258</td><td align="right" class='awrnc'>2691.5</td><td align="right" class='awrnc'>9.47ms</td><td align="right" class='awrnc'>9.4</td><td class='awrnc'>Configuration</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>111,676</td><td align="right" class='awrc'>1559.9</td><td align="right" class='awrc'>13.97ms</td><td align="right" class='awrc'>5.4</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>262,085</td><td align="right" class='awrnc'>1435.7</td><td align="right" class='awrnc'>5.48ms</td><td align="right" class='awrnc'>5.0</td><td class='awrnc'>Cluster</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>2,298</td><td align="right" class='awrc'>1384.5</td><td align="right" class='awrc'>602.47ms</td><td align="right" class='awrc'>4.8</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>write complete waits</td><td align="right" class='awrnc'>546</td><td align="right" class='awrnc'>1213.6</td><td align="right" class='awrnc'>2222.72ms</td><td align="right" class='awrnc'>4.2</td><td class='awrnc'>Configuration</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>114,655</td><td align="right" class='awrc'>1151.1</td><td align="right" class='awrc'>10.04ms</td><td align="right" class='awrc'>4.0</td><td class='awrc'>Cluster</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" class='awrnc'>133,201</td><td align="right" class='awrnc'>961.6</td><td align="right" class='awrnc'>7.22ms</td><td align="right" class='awrnc'>3.4</td><td class='awrnc'>Cluster</td></tr>
</table><p />
<p />Wait Classes by Total Wait Time<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays wait class statistics ordered by total wait time"><tr><th class="awrbg" scope="col">Wait Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (sec)</th><th class="awrbg" scope="col">Avg Wait Time</th><th class="awrbg" scope="col">% DB time</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>1,809,452</td><td align="right" class='awrc'>19,080</td><td align="right" class='awrc'>10.54ms</td><td align="right" class='awrc'>66.6</td><td align="right" class='awrc'>52.6</td></tr>
<tr><td scope="row" class='awrnc'>Configuration</td><td align="right" class='awrnc'>285,042</td><td align="right" class='awrnc'>4,003</td><td align="right" class='awrnc'>14.04ms</td><td align="right" class='awrnc'>14.0</td><td align="right" class='awrnc'>11.0</td></tr>
<tr><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>10,945,161</td><td align="right" class='awrc'>3,853</td><td align="right" class='awrc'>352.03us</td><td align="right" class='awrc'>13.4</td><td align="right" class='awrc'>10.6</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2,748</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>9.6</td><td align="right" class='awrnc'>7.6</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>132,312</td><td align="right" class='awrc'>915</td><td align="right" class='awrc'>6.92ms</td><td align="right" class='awrc'>3.2</td><td align="right" class='awrc'>2.5</td></tr>
<tr><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>34,408</td><td align="right" class='awrnc'>400</td><td align="right" class='awrnc'>11.61ms</td><td align="right" class='awrnc'>1.4</td><td align="right" class='awrnc'>1.1</td></tr>
<tr><td scope="row" class='awrc'>Application</td><td align="right" class='awrc'>207</td><td align="right" class='awrc'>112</td><td align="right" class='awrc'>538.99ms</td><td align="right" class='awrc'>.4</td><td align="right" class='awrc'>0.3</td></tr>
<tr><td scope="row" class='awrnc'>Concurrency</td><td align="right" class='awrnc'>2,062</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>12.52ms</td><td align="right" class='awrnc'>.1</td><td align="right" class='awrnc'>0.1</td></tr>
<tr><td scope="row" class='awrc'>Commit</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>46.37ms</td><td align="right" class='awrc'>.0</td><td align="right" class='awrc'>0.0</td></tr>
<tr><td scope="row" class='awrnc'>Network</td><td align="right" class='awrnc'>653</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>28.93us</td><td align="right" class='awrnc'>.0</td><td align="right" class='awrnc'>0.0</td></tr>
</table><p />

Host CPU
<p />
<table border="0" width="600" class="tdiff" summary="This table displays system load statistics">
<tr><th class="awrbg" scope="col">CPUs</th><th class="awrbg" scope="col">Cores</th><th class="awrbg" scope="col">Sockets</th><th class="awrbg" scope="col">Load Average Begin</th><th class="awrbg" scope="col">Load Average End</th><th class="awrbg" scope="col">%User</th><th class="awrbg" scope="col">%System</th><th class="awrbg" scope="col">%WIO</th><th class="awrbg" scope="col">%Idle</th></tr>
<tr><td align="right" class='awrc'>   64</td><td align="right" class='awrc'>   32</td><td align="right" class='awrc'>	 2</td><td align="right" class='awrc'>	22.72</td><td align="right" class='awrc'>   7.24</td><td align="right" class='awrc'>   6.0</td><td align="right" class='awrc'>	 7.9</td><td align="right" class='awrc'>  12.8</td><td align="right" class='awrc'>  83.0</td></tr>
</table>
<p />
Instance CPU
<p />
<table border="0" width="600" class="tdiff" summary="This table displays CPU usage and wait statistics">
<tr><th class="awrbg" scope="col">%Total CPU</th><th class="awrbg" scope="col">%Busy CPU</th><th class="awrbg" scope="col">%DB time waiting for CPU (Resource Manager)</th></tr>
<tr><td align="right" class='awrc'>	 16.2</td><td align="right" class='awrc'>      95.4</td><td align="right" class='awrc'>       0.0</td></tr>
</table>
<p />IO Profile<p />
<table border="0" width="600" class="tdiff" summary="This table displays IO profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Read+Write Per Second</th><th class="awrbg" scope="col">Read per Second</th><th class="awrbg" scope="col">Write Per Second</th></tr>
<tr><td scope="row" class='awrc'>Total Requests:</td><td align="right" class='awrc'>	      33,041.5</td><td align="right" class='awrc'>	    29,802.3</td><td align="right" class='awrc'>	   3,239.3</td></tr>
<tr><td scope="row" class='awrnc'>Database Requests:</td><td align="right" class='awrnc'>	   32,911.0</td><td align="right" class='awrnc'>	  29,792.8</td><td align="right" class='awrnc'> 	  3,118.2</td></tr>
<tr><td scope="row" class='awrc'>Optimized Requests:</td><td align="right" class='awrc'>	       0.0</td><td align="right" class='awrc'>		     0.0</td><td align="right" class='awrc'>		   0.0</td></tr>
<tr><td scope="row" class='awrnc'>Redo Requests:</td><td align="right" class='awrnc'>		   57.5</td><td align="right" class='awrnc'>		   2.4</td><td align="right" class='awrnc'>		 55.1</td></tr>
<tr><td scope="row" class='awrc'>Total (MB):</td><td align="right" class='awrc'>	     264.5</td><td align="right" class='awrc'>		   235.2</td><td align="right" class='awrc'>		  29.3</td></tr>
<tr><td scope="row" class='awrnc'>Database (MB):</td><td align="right" class='awrnc'>		  258.6</td><td align="right" class='awrnc'>		 232.8</td><td align="right" class='awrnc'>		 25.8</td></tr>
<tr><td scope="row" class='awrc'>Optimized Total (MB):</td><td align="right" class='awrc'>		 0.0</td><td align="right" class='awrc'>	       0.0</td><td align="right" class='awrc'>		     0.0</td></tr>
<tr><td scope="row" class='awrnc'>Redo (MB):</td><td align="right" class='awrnc'>		5.0</td><td align="right" class='awrnc'>	       2.2</td><td align="right" class='awrnc'> 	      2.8</td></tr>
<tr><td scope="row" class='awrc'>Database (blocks):</td><td align="right" class='awrc'> 	 33,101.0</td><td align="right" class='awrc'>	       29,798.7</td><td align="right" class='awrc'>	      3,302.4</td></tr>
<tr><td scope="row" class='awrnc'>Via Buffer Cache (blocks):</td><td align="right" class='awrnc'>	   33,095.8</td><td align="right" class='awrnc'>	  29,798.6</td><td align="right" class='awrnc'> 	  3,297.2</td></tr>
<tr><td scope="row" class='awrc'>Direct (blocks):</td><td align="right" class='awrc'>		    5.2</td><td align="right" class='awrc'>		  0.0</td><td align="right" class='awrc'>		5.2</td></tr>
</table>
<p />
Memory Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays memory statistics">
<tr><th class="awrbg" scope="col"> </th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th></tr>
<tr><td scope="row" class='awrc'>Host Mem (MB):</td><td align="right" class='awrc'> 1,032,089.4</td><td align="right" class='awrc'> 1,032,089.4</td></tr>
<tr><td scope="row" class='awrnc'>SGA use (MB):</td><td align="right" class='awrnc'>	 3,072.0</td><td align="right" class='awrnc'>	  3,072.0</td></tr>
<tr><td scope="row" class='awrc'>PGA use (MB):</td><td align="right" class='awrc'>     2,939.5</td><td align="right" class='awrc'>     2,147.1</td></tr>
<tr><td scope="row" class='awrc'>% Host Mem used for SGA+PGA:</td><td align="right" class='awrc'>    0.58</td><td align="right" class='awrc'>	 0.51</td></tr>
</table>
<p />
Cache Sizes
<p />
<table border="0" width="600" class="tdiff" summary="This table displays cache sizes and other statistics for
		    different types of cache">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th><th class="awrnobg" scope="col"></th><th class="awrnobg" scope="col"></th></tr>
<tr><td scope="row" class='awrnc'>Buffer Cache:</td><td align="right" class='awrnc'>	 1,040M</td><td align="right" class='awrnc'>	 1,040M</td><td class='awrnc'>Std Block Size:</td><td align="right" class='awrnc'>	   8K</td></tr>
<tr><td scope="row" class='awrc'>Shared Pool Size:</td><td align="right" class='awrc'>	   1,242M</td><td align="right" class='awrc'>	  1,241M</td><td class='awrc'>Log Buffer:</td><td align="right" class='awrc'>	 40,404K</td></tr>
<tr><td scope="row" class='awrnc'>In-Memory Area:</td><td align="right" class='awrnc'>	       0M</td><td align="right" class='awrnc'>	       0M</td></tr>
</table>
<p />
Shared Pool Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays shared pool statistics">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th></tr>
<tr><td scope="row" class='awrc'>Memory Usage %:</td><td align="right" class='awrc'>		78.09</td><td align="right" class='awrc'>	     82.02</td></tr>
<tr><td scope="row" class='awrnc'>% SQL with executions&gt;1:</td><td align="right" class='awrnc'>	      78.67</td><td align="right" class='awrnc'>	    61.04</td></tr>
<tr><td scope="row" class='awrc'>% Memory for SQL w/exec&gt;1:</td><td align="right" class='awrc'>	      80.30</td><td align="right" class='awrc'> 	   65.07</td></tr>
</table>
<p />
<a class="awr" name="top"></a>
<h2 class="awr">
Main Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#99999">Report Summary</a></li>
<li class="awr"><a class="awr" href="#21">Wait Events Statistics</a></li>
<li class="awr"><a class="awr" href="#22">SQL Statistics</a></li>
<li class="awr"><a class="awr" href="#23">Instance Activity Statistics</a></li>
<li class="awr"><a class="awr" href="#24">IO Stats</a></li>
<li class="awr"><a class="awr" href="#25">Buffer Pool Statistics</a></li>
<li class="awr"><a class="awr" href="#26">Advisory Statistics</a></li>
<li class="awr"><a class="awr" href="#27">Wait Statistics</a></li>
<li class="awr"><a class="awr" href="#28">Undo Statistics</a></li>
<li class="awr"><a class="awr" href="#29">Latch Statistics</a></li>
<li class="awr"><a class="awr" href="#30">Segment Statistics</a></li>
<li class="awr"><a class="awr" href="#31">Dictionary Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#32">Library Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#33">Memory Statistics</a></li>
<li class="awr"><a class="awr" href="#39">Replication Statistics (GoldenGate, XStream)</a></li>
<li class="awr"><a class="awr" href="#34">Advanced Queuing</a></li>
<li class="awr"><a class="awr" href="#6700">Resource Limit Statistics</a></li>
<li class="awr"><a class="awr" href="#37">Shared Server Statistics</a></li>
<li class="awr"><a class="awr" href="#36">Initialization Parameters</a></li>
<li class="awr"><a class="awr" href="#42">Active Session History (ASH) Report</a></li>
<li class="awr"><a class="awr" href="#99995">ADDM Reports</a></li>
</ul>
<h2 class="awr">
RAC Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#9997">RAC Report Summary</a></li>
<li class="awr"><a class="awr" href="#5100">Global Messaging Statistics</a></li>
<li class="awr"><a class="awr" href="#5200">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#5300">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#7">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#8">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#8790">Dynamic Remastering Statistics</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<p />
<a class="awr" name="21"></a>
<h2 class="awr">
Wait Events Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1500">Time Model Statistics</a></li>
<li class="awr"><a class="awr" href="#1600">Operating System Statistics</a></li>
<li class="awr"><a class="awr" href="#1610">Operating System Statistics - Detail</a></li>
<li class="awr"><a class="awr" href="#210">Foreground Wait Class</a></li>
<li class="awr"><a class="awr" href="#100">Foreground Wait Events</a></li>
<li class="awr"><a class="awr" href="#300">Background Wait Events</a></li>
<li class="awr"><a class="awr" href="#7400">Wait Event Histogram</a></li>
<li class="awr"><a class="awr" href="#7405">Wait Event Histogram (up to 64 us)</a></li>
<li class="awr"><a class="awr" href="#7410">Wait Event Histogram (up to 32 ms)</a></li>
<li class="awr"><a class="awr" href="#7420">Wait Event Histogram (up to 2 sec)</a></li>
<li class="awr"><a class="awr" href="#7430">Wait Event Histogram (up to 2 min)</a></li>
<li class="awr"><a class="awr" href="#7440">Wait Event Histogram (up to 1 hr)</a></li>
<li class="awr"><a class="awr" href="#5800">Service Statistics</a></li>
<li class="awr"><a class="awr" href="#5820">Service Wait Class Stats</a></li>
<li class="awr"><a class="awr" href="#5840">Top 10 Channel Waits</a></li>
<li class="awr"><a class="awr" href="#2310">Top Process Types by Wait Class</a></li>
<li class="awr"><a class="awr" href="#2320">Top Process Types by CPU Used</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1500"></a>
<h3 class="awr">Time Model Statistics</h3>
<ul>
<li class="awr">DB Time represents total time in user calls</li>
<li class="awr">DB CPU represents CPU time of foreground processes</li>
<li class="awr">Total CPU Time represents foreground and background processes</li>
<li class="awr">Statistics including the word "background" measure background process
   time, therefore do not contribute to the DB time statistic</li>
<li class="awr">Ordered by % of DB time in descending order, followed by Statistic Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays different time model statistics. For each statistic, time and % of DB time are displayed"><tr><th class="awrbg" scope="col">Statistic Name</th><th class="awrbg" scope="col">Time (s)</th><th class="awrbg" scope="col">% of  DB Time</th><th class="awrbg" scope="col">% of Total CPU Time</th></tr>
<tr><td scope="row" class='awrc'>sql execute elapsed time</td><td align="right" class='awrc'>28,636.27</td><td align="right" class='awrc'>99.96</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU</td><td align="right" class='awrnc'>2,747.87</td><td align="right" class='awrnc'>9.59</td><td align="right" class='awrnc'>82.29</td></tr>
<tr><td scope="row" class='awrc'>PL/SQL execution elapsed time</td><td align="right" class='awrc'>102.71</td><td align="right" class='awrc'>0.36</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>11.03</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hard parse elapsed time</td><td align="right" class='awrc'>8.29</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hard parse (sharing criteria) elapsed time</td><td align="right" class='awrnc'>2.06</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hard parse (bind mismatch) elapsed time</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PL/SQL compilation elapsed time</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>connection management call elapsed time</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sequence load elapsed time</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>repeated bind elapsed time</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DB time</td><td align="right" class='awrnc'>28,647.57</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>background elapsed time</td><td align="right" class='awrc'>2,715.72</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>background cpu time</td><td align="right" class='awrnc'>591.52</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>17.71</td></tr>
<tr><td scope="row" class='awrc'>total CPU time</td><td align="right" class='awrc'>3,339.39</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1600"></a>
<h3 class="awr">Operating System Statistics</h3>
<ul>
<li class="awr"> *TIME statistic values are diffed.	 All others display actual values.  End Value is displayed if different </li>
<li class="awr"> ordered by statistic type (CPU Use, Virtual Memory, Hardware Config), Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays operating systems statistics. For each statistic, actual value is displayed. If the end value is different, it is also displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Value</th><th class="awrbg" scope="col">End Value</th></tr>
<tr><td scope="row" class='awrc'>FREE_MEMORY_BYTES</td><td align="right" class='awrc'>543,472,332,800</td><td align="right" class='awrc'>544,528,248,832</td></tr>
<tr><td scope="row" class='awrnc'>INACTIVE_MEMORY_BYTES</td><td align="right" class='awrnc'>1,656,107,008</td><td align="right" class='awrnc'>1,649,537,024</td></tr>
<tr><td scope="row" class='awrc'>BUSY_TIME</td><td align="right" class='awrc'>349,990</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IDLE_TIME</td><td align="right" class='awrnc'>1,710,594</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IOWAIT_TIME</td><td align="right" class='awrc'>263,113</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>NICE_TIME</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SYS_TIME</td><td align="right" class='awrc'>162,338</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>USER_TIME</td><td align="right" class='awrnc'>123,753</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LOAD</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>7</td></tr>
<tr><td scope="row" class='awrnc'>PHYSICAL_MEMORY_BYTES</td><td align="right" class='awrnc'>1,082,224,197,632</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>NUM_CPUS</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>NUM_CPU_CORES</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>NUM_CPU_SOCKETS</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GLOBAL_RECEIVE_SIZE_MAX</td><td align="right" class='awrnc'>4,194,304</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GLOBAL_SEND_SIZE_MAX</td><td align="right" class='awrc'>1,048,576</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_RECEIVE_SIZE_DEFAULT</td><td align="right" class='awrnc'>87,380</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_RECEIVE_SIZE_MAX</td><td align="right" class='awrc'>6,291,456</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_RECEIVE_SIZE_MIN</td><td align="right" class='awrnc'>4,096</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_SEND_SIZE_DEFAULT</td><td align="right" class='awrc'>16,384</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TCP_SEND_SIZE_MAX</td><td align="right" class='awrnc'>4,194,304</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TCP_SEND_SIZE_MIN</td><td align="right" class='awrc'>4,096</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1610"></a>
<h3 class="awr">Operating System Statistics - Detail</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays some detailed operating systems statistics. load, % busy , % user, % sys, % idle, % iowait are displayed for begin and end snap time"><tr><th class="awrbg" scope="col">Snap Time</th><th class="awrbg" scope="col">Load</th><th class="awrbg" scope="col">%busy</th><th class="awrbg" scope="col">%user</th><th class="awrbg" scope="col">%sys</th><th class="awrbg" scope="col">%idle</th><th class="awrbg" scope="col">%iowait</th></tr>
<tr><td scope="row" class='awrc'>17-Feb 09:26:07</td><td align="right" class='awrc'>22.72</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>17-Feb 09:32:10</td><td align="right" class='awrnc'>7.24</td><td align="right" class='awrnc'>16.98</td><td align="right" class='awrnc'>6.01</td><td align="right" class='awrnc'>7.88</td><td align="right" class='awrnc'>83.02</td><td align="right" class='awrnc'>12.77</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="210"></a>
<h3 class="awr">Foreground Wait Class</h3>
<ul>
<li class="awr"> s  - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> ordered by wait time desc, waits desc </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
<li class="awr">Captured Time accounts for	  106.4%  of Total DB time	28,647.57 (s)</li>
<li class="awr">Total FG Wait Time:	       27,719.60 (s)  DB CPU time:	 2,747.87 (s)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays foreground wait class statistics"><tr><th class="awrbg" scope="col">Wait Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">%DB time</th></tr>
<tr><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>1,807,782</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>19,064</td><td align="right" class='awrc'>10.55ms</td><td align="right" class='awrc'>66.55</td></tr>
<tr><td scope="row" class='awrnc'>Configuration</td><td align="right" class='awrnc'>284,859</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3,989</td><td align="right" class='awrnc'>14.00ms</td><td align="right" class='awrnc'>13.92</td></tr>
<tr><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>10,924,947</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3,828</td><td align="right" class='awrc'>350.35us</td><td align="right" class='awrc'>13.36</td></tr>
<tr><td scope="row" class='awrnc'>DB CPU</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2,748</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>9.59</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>8,653</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>828</td><td align="right" class='awrc'>95.63ms</td><td align="right" class='awrc'>2.89</td></tr>
<tr><td scope="row" class='awrnc'>Concurrency</td><td align="right" class='awrnc'>1,290</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>7.38ms</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>Commit</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>46.37ms</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>147</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>172.81us</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Network</td><td align="right" class='awrc'>265</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6.18us</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Application</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="100"></a>
<h3 class="awr">Foreground Wait Events</h3>
<ul>
<li class="awr"> s  - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Only events with Total Wait Time (s) &gt;= .001 are shown </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Foreground Wait Events and their wait statistics"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">Waits /txn</th><th class="awrbg" scope="col">% DB time</th></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>1,174,558</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>12,175</td><td align="right" class='awrc'>10.37ms</td><td align="right" class='awrc'>3.10</td><td align="right" class='awrc'>42.50</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>10,924,627</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>3,826</td><td align="right" class='awrnc'>350.19us</td><td align="right" class='awrnc'>28.83</td><td align="right" class='awrnc'>13.35</td></tr>
<tr><td scope="row" class='awrc'>free buffer waits</td><td align="right" class='awrc'>284,258</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2,691</td><td align="right" class='awrc'>9.47ms</td><td align="right" class='awrc'>0.75</td><td align="right" class='awrc'>9.40</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>111,676</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1,560</td><td align="right" class='awrnc'>13.97ms</td><td align="right" class='awrnc'>0.29</td><td align="right" class='awrnc'>5.45</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>262,085</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1,436</td><td align="right" class='awrc'>5.48ms</td><td align="right" class='awrc'>0.69</td><td align="right" class='awrc'>5.01</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>2,298</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1,384</td><td align="right" class='awrnc'>602.47ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>4.83</td></tr>
<tr><td scope="row" class='awrc'>write complete waits</td><td align="right" class='awrc'>546</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1,214</td><td align="right" class='awrc'>2222.72ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>4.24</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>114,655</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1,151</td><td align="right" class='awrnc'>10.04ms</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>4.02</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>133,201</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>962</td><td align="right" class='awrc'>7.22ms</td><td align="right" class='awrc'>0.35</td><td align="right" class='awrc'>3.36</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>4,385</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>811</td><td align="right" class='awrnc'>184.95ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>2.83</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>397</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>247</td><td align="right" class='awrc'>623.14ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.86</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>84</td><td align="right" class='awrnc'>1520.99ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.29</td></tr>
<tr><td scope="row" class='awrc'>gc current grant congested</td><td align="right" class='awrc'>1,733</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>53</td><td align="right" class='awrc'>30.86ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.19</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>3,405</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>10.37ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.12</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>2,537</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>10.75ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>389</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>22.42ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>223.54ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>698</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>12.22ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>2368.42ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>107</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>64.55ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>323.29ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>614</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>6.15ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>749.91ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc remaster</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1999.61ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>46.37ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>37</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>48.13ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>cursor: pin S wait on X</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>35.88ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>212</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3.68ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>library cache load lock</td><td align="right" class='awrc'>86</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4.65ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>895</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>413.27us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>89</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.97ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.90ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>171</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.12ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>kksfbc child completion</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>49.97ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>271</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>197.79us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>128</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>415.75us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.86ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2.62ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>43</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>696.16us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>147</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>172.81us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: enqueue hash chains</td><td align="right" class='awrc'>85</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>228.11us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>142</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>127.44us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.52ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>866.28us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>718.27us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: shared pool</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>157.67us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>295.36us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>393</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>24.65us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>read by other session</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.07ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>167</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>53.93us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block congested</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4.49ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>498</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>17.36us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges enter server mode</td><td align="right" class='awrc'>1,458</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5.24us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.27ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>120.32us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>34.25us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.31ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: ges resource hash list</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>62.08us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>17</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>132.24us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>247</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5.56us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current retry</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.30ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>wait list latch free</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.14ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>watchdog main loop</td><td align="right" class='awrc'>684</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2,046</td><td align="right" class='awrc'>2991.23ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Execution Msg</td><td align="right" class='awrnc'>321</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>25</td><td align="right" class='awrnc'>77.00ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Msg Fragment</td><td align="right" class='awrc'>387</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>4.67ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" class='awrnc'>179</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>8.38ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message from client</td><td align="right" class='awrc'>247</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.71ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq Credit: need buffer</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>371.94us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="300"></a>
<h3 class="awr">Background Wait Events</h3>
<ul>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
<li class="awr"> Only events with Total Wait Time (s) &gt;= .001 are shown </li>
<li class="awr"> %Timeouts: value of 0 indicates value was &lt; .5%.  Value of null is truly 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays background wait events statistics"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">%Time -outs</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg wait</th><th class="awrbg" scope="col">Waits /txn</th><th class="awrbg" scope="col">% bg time</th></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>12,849</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>241</td><td align="right" class='awrc'>18.79ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>8.89</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>12,462</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>144</td><td align="right" class='awrnc'>11.52ms</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>5.29</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>206</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>112</td><td align="right" class='awrc'>541.31ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>4.11</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>444</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>42.53ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.70</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>587.02ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.67</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>187</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>94.75ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.65</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>1,026</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>14.59ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.55</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>2073.26ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.53</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>152</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>91.60ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.51</td></tr>
<tr><td scope="row" class='awrnc'>write complete waits</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>3240.34ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.48</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>1,068</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>11.25ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.44</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>39,549</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>301.14us</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.44</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>165</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>48.91ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.30</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>17,011</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>194.32us</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.12</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>79</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>33.00ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering wait for read latch</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>74.66ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.08</td></tr>
<tr><td scope="row" class='awrc'>ASM IO for non-blocking poll</td><td align="right" class='awrc'>16,412</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>131.53us</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>IPC send completion sync</td><td align="right" class='awrnc'>442</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>4.71ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.08</td></tr>
<tr><td scope="row" class='awrc'>free buffer waits</td><td align="right" class='awrc'>177</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>9.72ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>75.91ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.06</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>2,769</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>559.85us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>ASM file metadata operation</td><td align="right" class='awrnc'>1,487</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>848.95us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.05</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>406</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2.86ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>559</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.96ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1085.99ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>187</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>5.60ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>73.30ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>187</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>5.47ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>55</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>31.74ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>50,417</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>17.62us</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>117</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>7.11ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>14.22ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8.46ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>1,870</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>184.43us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>latch free</td><td align="right" class='awrc'>627</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>418.52us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>232</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>740.47us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>Disk file operations I/O</td><td align="right" class='awrc'>290</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>557.88us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>249</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>535.51us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.68ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CGS wait for IPC msg</td><td align="right" class='awrnc'>5,330</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>14.46us</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8.97ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DFS lock handle</td><td align="right" class='awrnc'>226</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>295.24us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>3,402</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>18.11us</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>60.12ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>201</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>256.27us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.26ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>842.44us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>333</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>123.55us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.03ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>119</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>323.36us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>37.66ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>6,697</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5.30us</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>542.45us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>119</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>249.74us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>LGWR wait for redo copy</td><td align="right" class='awrc'>272</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>106.00us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context latch</td><td align="right" class='awrnc'>84</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>278.19us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>905.67us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>194</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>107.51us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>576.94us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ksxr poll remote instances</td><td align="right" class='awrnc'>891</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>20.65us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>IPC group service call</td><td align="right" class='awrc'>267</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>62.21us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>323.65us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.27ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.11ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>kjctssqmg: quick message send wait</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>227.28us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4.83ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>314.34us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>.97ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3.83ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7.14ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>cursor: pin S wait on X</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5.57ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enq: CO - master slave det</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>711.83us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>149.00us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>direct path read</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>149.93us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>149.36us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.89ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>latch: shared pool</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>268.14us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>libcache interrupt action by LCK</td><td align="right" class='awrnc'>453</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3.72us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enq: US - contention</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1.68ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>558.50us</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX Idle Wait</td><td align="right" class='awrc'>107</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>44,335</td><td align="right" class='awrc'>414.34 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Space Manager: slave idle wait</td><td align="right" class='awrnc'>3,645</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>15,573</td><td align="right" class='awrnc'>4272.43ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>rdbms ipc message</td><td align="right" class='awrc'>12,270</td><td align="right" class='awrc'>51</td><td align="right" class='awrc'>7,999</td><td align="right" class='awrc'>651.93ms</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>class slave wait</td><td align="right" class='awrnc'>4,130</td><td align="right" class='awrnc'>78</td><td align="right" class='awrnc'>2,175</td><td align="right" class='awrnc'>526.71ms</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LMS CR slave timer</td><td align="right" class='awrc'>136,426</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,362</td><td align="right" class='awrc'>9.99ms</td><td align="right" class='awrc'>0.36</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs yield cpu</td><td align="right" class='awrnc'>48,396</td><td align="right" class='awrnc'>96</td><td align="right" class='awrnc'>1,359</td><td align="right" class='awrnc'>28.08ms</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs remote message</td><td align="right" class='awrc'>2,217,249</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,096</td><td align="right" class='awrc'>494.37us</td><td align="right" class='awrc'>5.85</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>wait for unread message on broadcast channel</td><td align="right" class='awrnc'>523</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>1,025</td><td align="right" class='awrnc'>1960.45ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges remote message</td><td align="right" class='awrc'>15,473</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,024</td><td align="right" class='awrc'>66.16ms</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pmon timer</td><td align="right" class='awrnc'>228</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>684</td><td align="right" class='awrnc'>2999.84ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCR sleep</td><td align="right" class='awrc'>2,269</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>681</td><td align="right" class='awrc'>300.33ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DIAG idle wait</td><td align="right" class='awrnc'>7,369</td><td align="right" class='awrnc'>58</td><td align="right" class='awrnc'>674</td><td align="right" class='awrnc'>91.50ms</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR worker group idle</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>600</td><td align="right" class='awrc'>300.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dispatcher timer</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>360</td><td align="right" class='awrnc'>60.01 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Data Guard: Gap Manager</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>360</td><td align="right" class='awrc'>60.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lreg timer</td><td align="right" class='awrnc'>115</td><td align="right" class='awrnc'>99</td><td align="right" class='awrnc'>342</td><td align="right" class='awrnc'>2976.70ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM background timer</td><td align="right" class='awrc'>1,156</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>342</td><td align="right" class='awrc'>295.87ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OFS idle</td><td align="right" class='awrnc'>114</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>342</td><td align="right" class='awrnc'>2999.99ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pman timer</td><td align="right" class='awrc'>114</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>342</td><td align="right" class='awrc'>2999.73ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>341</td><td align="right" class='awrnc'>68.26 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>heartbeat redo informer</td><td align="right" class='awrc'>341</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>341</td><td align="right" class='awrc'>1000.12ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PING</td><td align="right" class='awrnc'>323</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>340</td><td align="right" class='awrnc'>1053.16ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SCM slave idle</td><td align="right" class='awrc'>3,454</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>340</td><td align="right" class='awrc'>98.43ms</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM cluster membership changes</td><td align="right" class='awrnc'>194</td><td align="right" class='awrnc'>85</td><td align="right" class='awrnc'>340</td><td align="right" class='awrnc'>1750.38ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: qmn coordinator idle wait</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>336</td><td align="right" class='awrc'>14.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: qmn slave idle wait</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>336</td><td align="right" class='awrnc'>28.00 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQPC idle</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>330</td><td align="right" class='awrc'>30.00 s</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>smon timer</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>300</td><td align="right" class='awrnc'>150.10 s</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Parse Reply</td><td align="right" class='awrc'>187</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>29.97ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Execute Reply</td><td align="right" class='awrnc'>897</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>4.37ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq Credit: send blkd</td><td align="right" class='awrc'>247</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>7.22ms</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message from client</td><td align="right" class='awrnc'>122</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.50ms</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>RMA: IPC0 completion sync</td><td align="right" class='awrc'>368</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>13.60us</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7400"></a>
<h3 class="awr">Wait Event Histogram</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (idle events last)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Total Waits</th><th class="awrbg" scope="col" id="&lt;8us">&lt;8us</th><th class="awrbg" scope="col" id="&lt;16us">&lt;16us</th><th class="awrbg" scope="col" id="&lt;32us">&lt;32us</th><th class="awrbg" scope="col" id="&lt;64us">&lt;64us</th><th class="awrbg" scope="col" id="&lt;128us">&lt;128us</th><th class="awrbg" scope="col" id="&lt;256us">&lt;256us</th><th class="awrbg" scope="col" id="&lt;512us">&lt;512us</th><th class="awrbg" scope="col" id="&gt;=512us">&gt;=512us</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>3328</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>35.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>61.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>15.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>22.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>15.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>22.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>2.5</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>1456</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>14.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>22.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>11.4</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>80.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>5271</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>3.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>71.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>90.0</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>81.8</td></tr>
<tr><td scope="row" class='awrc'>DFS lock handle</td><td align="right" class='awrc'>226</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>96.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>1.3</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>81</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>24.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>39.5</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>471</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>99.4</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>385</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>2.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>29.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>13.0</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>18.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>81.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>1002</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>6.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>27.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>28.1</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>283</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>4.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>30.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>13.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>42.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>478</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>39.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>29.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>12.8</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>21.3K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>1.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>42.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>10.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>15.0</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>546</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>4.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>16.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>27.5</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>261</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>48.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>2.3</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>500</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>7.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>41.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>14.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>2.0</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>181</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>99.4</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>181</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>52.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>6.1</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>285</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>37.2</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>49.8K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>58.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>37.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>PX qref latch</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>92.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message to client</td><td align="right" class='awrc'>367</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>95.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sync ASM rebalance</td><td align="right" class='awrnc'>36</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>5.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>asynch descriptor resize</td><td align="right" class='awrc'>125</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>92.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>90.0</td></tr>
<tr><td scope="row" class='awrc'>buffer deadlock</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>150</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>control file sequential read</td><td align="right" class='awrc'>1969</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>50.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>2.6</td></tr>
<tr><td scope="row" class='awrnc'>cursor: pin S wait on X</td><td align="right" class='awrnc'>40</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>6320</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>96.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel read</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>28.6</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>11.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>79.6</td></tr>
<tr><td scope="row" class='awrnc'>db file scattered read</td><td align="right" class='awrnc'>334</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>47.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>43.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>8.7</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>10.6M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>35.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>55.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>7.8</td></tr>
<tr><td scope="row" class='awrnc'>direct path read</td><td align="right" class='awrnc'>14</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>35.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>21.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path read temp</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write</td><td align="right" class='awrnc'>23</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>91.3</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>87</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>28</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>85.7</td></tr>
<tr><td scope="row" class='awrc'>enq: CO - master slave det</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>66.7</td></tr>
<tr><td scope="row" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrnc'>21</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>56</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>130</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>16.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>74.6</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>212</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>26.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>73.1</td></tr>
<tr><td scope="row" class='awrc'>enq: TA - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>enq: US - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>19</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>26.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>73.7</td></tr>
<tr><td scope="row" class='awrc'>free buffer waits</td><td align="right" class='awrc'>277.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>98.9</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>69</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>83.3</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>618</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>15.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>82.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>16</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block congested</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr block lost</td><td align="right" class='awrc'>2297</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr disk read</td><td align="right" class='awrnc'>42</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>38.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>52.4</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>262.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>30.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>66.2</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>1.1M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>93.9</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>2538</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>103</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>89.3</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>92.3</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>388</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>89.2</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>3298</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>89.6</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>38</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>395</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>108.9K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>91.7</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>110.8K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>6.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>93.7</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>1700</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>130.3K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>98.4</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current retry</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc remaster</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>39.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>20.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>17.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>14.7</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering wait for read latch</td><td align="right" class='awrnc'>29</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>93.1</td></tr>
<tr><td scope="row" class='awrc'>ges enter server mode</td><td align="right" class='awrc'>1467</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>96.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>35</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>48.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>51.4</td></tr>
<tr><td scope="row" class='awrc'>ges ipc enter server mode</td><td align="right" class='awrc'>18</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrnc'>39</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>23.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>66.7</td></tr>
<tr><td scope="row" class='awrc'>ges resource directory to be unfrozen</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrnc'>48</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>12.5</td></tr>
<tr><td scope="row" class='awrc'>kjctssqmg: quick message send wait</td><td align="right" class='awrc'>50</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>12.0</td></tr>
<tr><td scope="row" class='awrnc'>kksfbc child completion</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>875</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>53.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>41.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.2</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>1302</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>25.3</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>28.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context latch</td><td align="right" class='awrnc'>84</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>3.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>26.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>31.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>15.5</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>64</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>3.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>37.5</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>986</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>4.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>33.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>25.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>17.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>5.6</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>322</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>7.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>28.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>28.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>2.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>10.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: checkpoint queue latch</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>82</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>6.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>30.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>9.8</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>377</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>1.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>26.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>23.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>10.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>12.2</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>449</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>2.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>21.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>25.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>12.5</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>38</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>7.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>26.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>15.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>28</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>7.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>32.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>3.6</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>44</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>2.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>22.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>4.5</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: shared pool</td><td align="right" class='awrnc'>71</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>8.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>29.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>9.9</td></tr>
<tr><td scope="row" class='awrc'>latch: undo global data</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>libcache interrupt action by LCK</td><td align="right" class='awrnc'>430</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>98.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache load lock</td><td align="right" class='awrc'>86</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>70.9</td></tr>
<tr><td scope="row" class='awrnc'>library cache pin</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>library cache: bucket mutex X</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache: mutex X</td><td align="right" class='awrnc'>174</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>37.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>10.9</td></tr>
<tr><td scope="row" class='awrc'>lock deadlock retry</td><td align="right" class='awrc'>390</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>33.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>59.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>.3</td></tr>
<tr><td scope="row" class='awrnc'>log file parallel write</td><td align="right" class='awrnc'>12.6K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>225</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>29.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>34.2</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>39</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>name-service call wait</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>oracle thread bootstrap</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>os thread creation</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>read by other session</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>55.6</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>164</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>row cache lock</td><td align="right" class='awrnc'>49</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>95.9</td></tr>
<tr><td scope="row" class='awrc'>undo_retention publish retry</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>wait list latch free</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>write complete waits</td><td align="right" class='awrc'>537</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>AQPC idle</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>ASM background timer</td><td align="right" class='awrc'>1123</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>8.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>84.0</td></tr>
<tr><td scope="row" class='awrnc'>ASM cluster membership changes</td><td align="right" class='awrnc'>192</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>DIAG idle wait</td><td align="right" class='awrc'>7307</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>12.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>86.1</td></tr>
<tr><td scope="row" class='awrnc'>Data Guard: Gap Manager</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>GCR sleep</td><td align="right" class='awrc'>2226</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>LMS CR slave timer</td><td align="right" class='awrnc'>133.8K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>OFS idle</td><td align="right" class='awrc'>112</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>PING</td><td align="right" class='awrnc'>311</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>24.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>37.0</td></tr>
<tr><td scope="row" class='awrc'>PX Deq Credit: need buffer</td><td align="right" class='awrc'>36</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>44.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>27.8</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>13.9</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq Credit: send blkd</td><td align="right" class='awrnc'>438</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>29.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>56.6</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Execute Reply</td><td align="right" class='awrc'>895</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>15.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>40.8</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Execution Msg</td><td align="right" class='awrnc'>318</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>87.4</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Msg Fragment</td><td align="right" class='awrc'>399</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>6.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>37.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>38.8</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Parse Reply</td><td align="right" class='awrnc'>185</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>93.0</td></tr>
<tr><td scope="row" class='awrc'>PX Idle Wait</td><td align="right" class='awrc'>106</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>RMA: IPC0 completion sync</td><td align="right" class='awrc'>365</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>6.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>72.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SCM slave idle</td><td align="right" class='awrnc'>3390</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>99.8</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net message from client</td><td align="right" class='awrc'>369</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>86.2</td></tr>
<tr><td scope="row" class='awrnc'>Space Manager: slave idle wait</td><td align="right" class='awrnc'>3589</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>94.4</td></tr>
<tr><td scope="row" class='awrc'>Streams AQ: qmn coordinator idle wait</td><td align="right" class='awrc'>24</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>41.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>Streams AQ: qmn slave idle wait</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>class slave wait</td><td align="right" class='awrc'>4059</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>2.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>89.5</td></tr>
<tr><td scope="row" class='awrnc'>dispatcher timer</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gcs remote message</td><td align="right" class='awrc'>2.2M</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>17.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>21.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>17.2</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>15.5</td></tr>
<tr><td scope="row" class='awrnc'>gcs yield cpu</td><td align="right" class='awrnc'>47.5K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>95.4</td></tr>
<tr><td scope="row" class='awrc'>ges remote message</td><td align="right" class='awrc'>15.2K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>91.6</td></tr>
<tr><td scope="row" class='awrnc'>heartbeat redo informer</td><td align="right" class='awrnc'>335</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>lreg timer</td><td align="right" class='awrc'>112</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>pman timer</td><td align="right" class='awrnc'>112</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>pmon timer</td><td align="right" class='awrc'>224</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>rdbms ipc message</td><td align="right" class='awrnc'>12.2K</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>4.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>78.1</td></tr>
<tr><td scope="row" class='awrc'>smon timer</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>wait for unread message on broadcast channel</td><td align="right" class='awrnc'>514</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>watchdog main loop</td><td align="right" class='awrc'>671</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=512us" class='awrcrb'>100.0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7405"></a>
<h3 class="awr">Wait Event Histogram (up to 64 us)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds  </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 1us  - 64us</th><th class="awrbg" scope="col" id="&lt;1us"> &lt;1us</th><th class="awrbg" scope="col" id="&lt;2us"> &lt;2us</th><th class="awrbg" scope="col" id="&lt;4us"> &lt;4us</th><th class="awrbg" scope="col" id="&lt;8us">&lt;8us</th><th class="awrbg" scope="col" id="&lt;16us">&lt;16us</th><th class="awrbg" scope="col" id="&lt;32us">&lt;32us</th><th class="awrbg" scope="col" id="&lt;64us">&lt;64us</th><th class="awrbg" scope="col" id="&gt;=64us">&gt;=64us</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>3282</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>35.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>61.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>1.4</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>8956</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>22.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>42.2</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>794</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>22.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>45.5</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>5200</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>71.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>1.3</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>DLM cross inst call completion</td><td align="right" class='awrc'>28</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>24.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>65.4</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>221</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>29.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>14.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>42.6</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>81.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>296</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>70.5</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>149</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>30.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>13.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>47.3</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>336</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>39.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>29.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>29.7</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>13.6K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>42.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>16.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>36.2</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>239</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>56.2</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>147</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>23.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>25.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>43.7</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>323</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>41.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>8.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>35.4</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>144</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>52.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>11.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>20.4</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>27</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>90.5</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>49.2K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>58.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>37.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>1.3</td></tr>
<tr><td scope="row" class='awrc'>PX qref latch</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>92.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>366</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>22.3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>73.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>.3</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>18</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>asynch descriptor resize</td><td align="right" class='awrnc'>125</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>91.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer deadlock</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>469</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>76.2</td></tr>
<tr><td scope="row" class='awrc'>db file async I/O submit</td><td align="right" class='awrc'>6296</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>29.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>67.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>.4</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>246</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>97.9</td></tr>
<tr><td scope="row" class='awrc'>direct path read</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>85.7</td></tr>
<tr><td scope="row" class='awrnc'>direct path read temp</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>50.0</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>96.9</td></tr>
<tr><td scope="row" class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>2574</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>99.1</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>83.3</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>200</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>99.9</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>65</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>100.0</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>10.7K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>72.9</td></tr>
<tr><td scope="row" class='awrc'>ges enter server mode</td><td align="right" class='awrc'>1460</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>27.8</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>68.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>.5</td></tr>
<tr><td scope="row" class='awrnc'>ges ipc enter server mode</td><td align="right" class='awrnc'>18</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>27.8</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>72.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>97.4</td></tr>
<tr><td scope="row" class='awrnc'>ges resource directory to be unfrozen</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrc'>18</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>62.5</td></tr>
<tr><td scope="row" class='awrnc'>kjctssqmg: quick message send wait</td><td align="right" class='awrnc'>21</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>58.0</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>855</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>53.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>41.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>2.3</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>218</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>83.3</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>28.6</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context latch</td><td align="right" class='awrnc'>15</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>82.1</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>14.1</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>79.7</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>457</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>33.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>53.7</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>156</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>28.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>8.4</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>51.6</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>70.0</td></tr>
<tr><td scope="row" class='awrc'>latch: checkpoint queue latch</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>22</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>73.2</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>102</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>72.9</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>150</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>21.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>66.6</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>24</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>26.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>21.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>36.8</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>83.3</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>60.7</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>19</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>22.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>56.8</td></tr>
<tr><td scope="row" class='awrc'>latch: shared pool</td><td align="right" class='awrc'>36</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>29.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>49.3</td></tr>
<tr><td scope="row" class='awrnc'>libcache interrupt action by LCK</td><td align="right" class='awrnc'>430</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>62.3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>35.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache load lock</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>94.2</td></tr>
<tr><td scope="row" class='awrnc'>library cache: bucket mutex X</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>134</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>35.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>16.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>23.0</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>377</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>33.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>59.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>3.3</td></tr>
<tr><td scope="row" class='awrc'>log file sequential read</td><td align="right" class='awrc'>67</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>29.8</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>70.2</td></tr>
<tr><td scope="row" class='awrnc'>read by other session</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrncrb'>77.8</td></tr>
<tr><td scope="row" class='awrc'>undo_retention publish retry</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=64us" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7410"></a>
<h3 class="awr">Wait Event Histogram (up to 32 ms)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 us is microseconds,	ms is 1024 microseconds (approximately 1 millisecond) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 1ms  to 32ms</th><th class="awrbg" scope="col" id="&lt;512us"> &lt;512us</th><th class="awrbg" scope="col" id="&lt;1ms"> &lt;1ms</th><th class="awrbg" scope="col" id="&lt;2ms"> &lt;2ms</th><th class="awrbg" scope="col" id="&lt;4ms"> &lt;4ms</th><th class="awrbg" scope="col" id="&lt;8ms">&lt;8ms</th><th class="awrbg" scope="col" id="&lt;16ms">&lt;16ms</th><th class="awrbg" scope="col" id="&lt;32ms">&lt;32ms</th><th class="awrbg" scope="col" id="&gt;=32ms">&gt;=32ms</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>388</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>97.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>164</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>88.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.1</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>10.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>18.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>36.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DFS lock handle</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>98.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>32</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>60.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>21.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>385</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>29.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>17.6</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>50</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>87.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>220</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>71.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>6.2</td></tr>
<tr><td scope="row" class='awrnc'>IPC send completion sync</td><td align="right" class='awrnc'>59</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>87.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.4</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>756</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>85.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>11.5</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>149</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>72.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>9.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.2</td></tr>
<tr><td scope="row" class='awrc'>LGWR wait for redo copy</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>97.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PGA memory operation</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>98.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>166</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>34.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>22.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>7.7</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>10</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>93.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.6</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>100</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>62.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>10.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>14.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.1</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: reap credit</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>18</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>10.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>80.0</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>114</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>22.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>38.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>24.0</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>52</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>97.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cursor: pin S wait on X</td><td align="right" class='awrc'>21</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>35.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>47.5</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>71.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>8553</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>20.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>19.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>6.0</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>29</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>91.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>824.2K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>92.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>21</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>8.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>34.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>30.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write temp</td><td align="right" class='awrnc'>78</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>49.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>10.3</td></tr>
<tr><td scope="row" class='awrc'>enq: CF - contention</td><td align="right" class='awrc'>20</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>14.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>32.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>14.3</td></tr>
<tr><td scope="row" class='awrnc'>enq: CO - master slave det</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>33.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>23.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>23.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>28.6</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>94.6</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>96</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>25.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>28.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>28.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.8</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>108</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>26.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>17.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>22.2</td></tr>
<tr><td scope="row" class='awrc'>enq: US - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: WF - contention</td><td align="right" class='awrnc'>14</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>26.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>36.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>36.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>free buffer waits</td><td align="right" class='awrc'>274.4K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>97.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy acquire</td><td align="right" class='awrnc'>69</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>21.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>63.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>16.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>16.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>50.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>504</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>18.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>35.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>32.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.5</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>75.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block congested</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>20</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>47.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>31.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>4.8</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>172.6K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>33.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>34.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>22.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.4</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>1M</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>6.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>28.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>35.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>18.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.6</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>2522</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>51.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>33.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>.6</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>89</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>10.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>34.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>23.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.9</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block mixed</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>7.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>30.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>30.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block 2-way</td><td align="right" class='awrc'>338</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>10.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>23.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>36.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>21.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.1</td></tr>
<tr><td scope="row" class='awrnc'>gc current block busy</td><td align="right" class='awrnc'>2883</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>10.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>25.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>32.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>19.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>7.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>2.2</td></tr>
<tr><td scope="row" class='awrc'>gc current block congested</td><td align="right" class='awrc'>33</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>34.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>13.2</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>95K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>23.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>30.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>4.4</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>101.1K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>6.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>28.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>35.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.5</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>1468</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>10.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>32.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>34.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>13.6</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>123.3K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>22.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>38.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>21.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>3.8</td></tr>
<tr><td scope="row" class='awrnc'>gc current retry</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs log flush sync</td><td align="right" class='awrc'>5807</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>85.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering wait for read latch</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>6.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>75.9</td></tr>
<tr><td scope="row" class='awrc'>ges inquiry response</td><td align="right" class='awrc'>17</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>48.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>25.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.9</td></tr>
<tr><td scope="row" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrnc'>26</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>33.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>41.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>87.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjctssqmg: quick message send wait</td><td align="right" class='awrnc'>6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>88.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>249</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>74.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>6.2</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context latch</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>84.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context root latch</td><td align="right" class='awrnc'>24</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>62.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>21.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>51</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>94.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>.4</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers lru chain</td><td align="right" class='awrnc'>9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>97.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: enqueue hash chains</td><td align="right" class='awrc'>8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>90.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gc element</td><td align="right" class='awrnc'>46</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>87.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gcs resource hash</td><td align="right" class='awrc'>44</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>87.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>2.7</td></tr>
<tr><td scope="row" class='awrnc'>latch: object queue header operation</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>96.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: redo allocation</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>95.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: shared pool</td><td align="right" class='awrnc'>7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>90.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache load lock</td><td align="right" class='awrc'>61</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>29.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>30.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>19.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache pin</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache: mutex X</td><td align="right" class='awrc'>19</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>89.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lock deadlock retry</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>99.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>11.9K</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>41.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>26.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>5.0</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>77</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>65.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>26.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>31</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>51.3</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>20.5</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>read by other session</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>44.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>155</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>17.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>37.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>5.5</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>45</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>4.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>30.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>4.1</td></tr>
<tr><td scope="row" class='awrnc'>wait list latch free</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>write complete waits</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=32ms" class='awrcrb'>99.8</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7420"></a>
<h3 class="awr">Wait Event Histogram (up to 2 sec)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	 ms is milliseconds    s is 1024 milliseconds (approximately 1 second) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 64ms  to 2s</th><th class="awrbg" scope="col" id="&lt;32ms">&lt;32ms</th><th class="awrbg" scope="col" id="&lt;64ms">&lt;64ms</th><th class="awrbg" scope="col" id="&lt;1/8s">&lt;1/8s</th><th class="awrbg" scope="col" id="&lt;1/4s">&lt;1/4s</th><th class="awrbg" scope="col" id="&lt;1/2s">&lt;1/2s</th><th class="awrbg" scope="col" id="&lt;1s">  &lt;1s</th><th class="awrbg" scope="col" id="&lt;2s">  &lt;2s</th><th class="awrbg" scope="col" id="&gt;=2s">&gt;=2s</th></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Disk file Mirror Read</td><td align="right" class='awrnc'>83</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>82.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.8</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>62</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>93.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC send completion sync</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrc'>2441</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>88.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSV master wait</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>92.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>1.7</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Slave Session Stats</td><td align="right" class='awrc'>5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.4</td></tr>
<tr><td scope="row" class='awrnc'>buffer busy waits</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>20.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>30.0</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>35</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>76.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.7</td></tr>
<tr><td scope="row" class='awrnc'>cursor: pin S wait on X</td><td align="right" class='awrnc'>19</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>52.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>47.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel write</td><td align="right" class='awrc'>691</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>94.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>834</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path write temp</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>89.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>85.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>71.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>14.3</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>36</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>5.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>23.2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>8.9</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>30.4</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>25</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>77.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>10.4</td></tr>
<tr><td scope="row" class='awrc'>enq: TM - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy release</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block 2-way</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block busy</td><td align="right" class='awrc'>12</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>2297</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>24.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>74.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>95.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>1105</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>29.5K</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant congested</td><td align="right" class='awrnc'>16</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>99.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block grant</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>97.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>71</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>86.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>5.3</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>393</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>24.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>72.9</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.5</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>4823</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>95.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.0</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>2758</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>97.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>232</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>86.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.2</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>4908</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>96.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.9</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>.0</td></tr>
<tr><td scope="row" class='awrnc'>gc remaster</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs remastering wait for read latch</td><td align="right" class='awrc'>22</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>24.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>75.9</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>97.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kksfbc child completion</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>81</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>93.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers chains</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>99.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.1</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>97.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>625</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>95.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>.3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log file sync</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>79.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>94.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>.6</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>.6</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrclb'>95.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>write complete waits</td><td align="right" class='awrnc'>270</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnclb'>.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;1/8s" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;1/4s" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;1/2s" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>14.5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnc'>26.6</td><td align="right" headers="%ofTotalWaits &gt;=2s" class='awrncrb'>49.5</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7430"></a>
<h3 class="awr">Wait Event Histogram (up to 2 min)</h3>
<ul>
<li class="awr"> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000 </li>
<li class="awr"> Units for % of Total Waits:	s is 1024 milliseconds (approximately 1 second)    m is 64*1024 milliseconds (approximately 67 seconds or 1.12 minutes) </li>
<li class="awr"> % of Total Waits: total waits for all wait classes, including Idle </li>
<li class="awr"> % of Total Waits: value of .0 indicates value was &lt;.05%;	 value of null is truly 0 </li>
<li class="awr"> Ordered by Event (only non-idle events are displayed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays total number of waits, and information about total wait time, for each wait event"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 8" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits 4s	 to 2m</th><th class="awrbg" scope="col" id="&lt;2s">&lt;2s</th><th class="awrbg" scope="col" id="&lt;4s"> &lt;4s</th><th class="awrbg" scope="col" id="&lt;8s"> &lt;8s</th><th class="awrbg" scope="col" id="&lt;16s">&lt;16s</th><th class="awrbg" scope="col" id="&lt;32s">&lt;32s</th><th class="awrbg" scope="col" id="&lt;1m">&lt; 1m</th><th class="awrbg" scope="col" id="&lt;2m">&lt; 2m</th><th class="awrbg" scope="col" id="&gt;=2m">&gt;=2m</th></tr>
<tr><td scope="row" class='awrc'>PX Deq: Join ACK</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>98.3</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>99.6</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.4</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>70.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control file parallel write</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>99.3</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.7</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>85.7</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>17</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>69.6</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>23.2</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: RO - fast object reuse</td><td align="right" class='awrc'>22</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>89.6</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>7.1</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant 2-way</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>89</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>94.7</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.5</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.5</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>13</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>.0</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>reliable message</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrclb'>99.4</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrc'>.6</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>write complete waits</td><td align="right" class='awrnc'>266</td><td align="right" headers="%ofTotalWaits &lt;2s" class='awrnclb'>50.5</td><td align="right" headers="%ofTotalWaits &lt;4s" class='awrnc'>39.9</td><td align="right" headers="%ofTotalWaits &lt;8s" class='awrnc'>9.7</td><td align="right" headers="%ofTotalWaits &lt;16s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2m" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=2m" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7440"></a>
<h3 class="awr">Wait Event Histogram (up to 1 hr)</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5800"></a>
<h3 class="awr">Service Statistics</h3>
<ul>
<li class="awr"> ordered by DB Time</li>
</ul>
<table border="0" class="tdiff" summary="This table displays service statistics. It displays service names and corresponding DB time, DB CPU, Physical reads, logical reads."><tr><th class="awrbg" scope="col">Service Name</th><th class="awrbg" scope="col">DB Time (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">Physical Reads (K)</th><th class="awrbg" scope="col">Logical Reads (K)</th></tr>
<tr><td scope="row" class='awrc'>p30sdb.example.com</td><td align="right" class='awrc'>27,396</td><td align="right" class='awrc'>2,623</td><td align="right" class='awrc'>10,253</td><td align="right" class='awrc'>18,905</td></tr>
<tr><td scope="row" class='awrnc'>SYS$BACKGROUND</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>85</td></tr>
<tr><td scope="row" class='awrc'>SYS$USERS</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>p30sdbXDB</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5820"></a>
<h3 class="awr">Service Wait Class Stats</h3>
<ul>
<li class="awr"> Wait Class info for services in the Service Statistics section.  </li>
<li class="awr"> Total Waits and Time Waited displayed for the following wait	  classes:  User I/O, Concurrency, Administrative, Network </li>
<li class="awr"> Time Waited (Wt Time) in seconds</li>
</ul>
<table border="0" class="tdiff" summary="This table displays service wait class statistics. It displays user I/O total wait, user I/O wait time, concurrency total wait, concurrency wait time, etc."><tr><th class="awrbg" scope="col">Service Name</th><th class="awrbg" scope="col">User I/O Total Wts</th><th class="awrbg" scope="col">User I/O Wt Time</th><th class="awrbg" scope="col">Concurcy Total Wts</th><th class="awrbg" scope="col">Concurcy Wt Time</th><th class="awrbg" scope="col">Admin Total Wts</th><th class="awrbg" scope="col">Admin Wt Time</th><th class="awrbg" scope="col">Network Total Wts</th><th class="awrbg" scope="col">Network Wt Time</th></tr>
<tr><td scope="row" class='awrc'>p30sdb.example.com</td>
<td align="right" class='awrc'>10251053</td><td align="right" class='awrc'>3600</td><td align="right" class='awrc'>1240</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>258</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SYS$BACKGROUND</td>
<td align="right" class='awrnc'>18243</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>569</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>265</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SYS$USERS</td>
<td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5840"></a>
<h3 class="awr">Top 10 Channel Waits</h3>
<ul>
<li class="awr"> Top 10 Channel Waits by wait time </li>
</ul>
<table border="0" class="tdiff" summary="This table displays top 10 Channel Watis by wait time."><tr><th class="awrbg" scope="col">Channel</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg Wait</th></tr>
<tr><td scope="row" class='awrc'>RBR channel</td>
<td align="right" class='awrc'>3</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>235.15ms</td></tr>
<tr><td scope="row" class='awrnc'>obj broadcast channel</td>
<td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>47.08ms</td></tr>
<tr><td scope="row" class='awrc'>kxfp control signal channel</td>
<td align="right" class='awrc'>88</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>41.00ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#21">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2310"></a>
<h3 class="awr">Top Process Types by Wait Class</h3>
<ul>
<li class="awr"> This table displays top process types ordered by wait class</li>
</ul>
<table border="0" class="tdiff" summary="Top Process Types by Wait Class. . This table displays top process types ordered by wait class"><tr><th class="awrbg" scope="col">Process Type</th><th class="awrbg" scope="col">Description</th><th class="awrbg" scope="col">Wait Class Type</th><th class="awrbg" scope="col">Wait Time (sec)</th></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrc'>Cluster</td><td align="right" class='awrc'>18,103.12</td></tr>
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>Configuration</td><td align="right" class='awrnc'>3,906.59</td></tr>
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>3,642.50</td></tr>

WORKLOAD REPOSITORY report for

DB Name 	DB Id	 Unique Name DB Role	      Edition Release	 RAC CDB
------------ ----------- ----------- ---------------- ------- ---------- --- ---
P30SDB	      1451622190 p30sdb      PRIMARY	      EE      19.0.0.0.0 YES NO

Instance     Inst Num Startup Time
------------ -------- ---------------
p30sdb2 	    2 17-Feb-20 07:43

Host Name	 Platform			  CPUs Cores Sockets Memory(GB)
---------------- -------------------------------- ---- ----- ------- ----------
mcracpoc2.exampl Linux x86 64-bit		    64	  32	   2	1007.90

	      Snap Id	   Snap Time	  Sessions Curs/Sess Instances
	    --------- ------------------- -------- --------- ---------
Begin Snap:	   47 17-Feb-20 09:26:07       257	 2.8	     2
  End Snap:	   48 17-Feb-20 09:32:10       139	  .9	     2
   Elapsed:		   6.05 (mins)
   DB Time:		 477.46 (mins)

Top ADDM Findings by Average Active Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Finding Name				 Avg act Percen Task Name
---------------------------------------- ------- ------ ------------------------
Interconnect Latency			   78.92 1.E+02 ADDM:1451622190_2_48
Top SQL Statements			   78.92  97.73 ADDM:1451622190_2_48
Global Cache Messaging			   78.92  63.17 ADDM:1451622190_2_48
Buffer Busy - Hot Objects		   78.92  46.70 ADDM:1451622190_2_48
Free Buffer Waits			   78.92  13.63 ADDM:1451622190_2_48
Load Profile			Per Second   Per Transaction  Per Exec	Per Call
~~~~~~~~~~~~~~~ 	   ---------------   --------------- --------- ---------
	     DB Time(s):	      78.9		 0.1	  0.01	   22.66
	      DB CPU(s):	       7.6		 0.0	  0.00	    2.17
      Background CPU(s):	       1.6		 0.0	  0.00	    0.00
      Redo size (bytes):       2,944,975.9	     2,821.2
  Logical read (blocks):	  55,110.0		52.8
	  Block changes:	   8,504.0		 8.2
 Physical read (blocks):	  29,798.7		28.6
Physical write (blocks):	   3,302.4		 3.2
       Read IO requests:	  29,792.8		28.5
      Write IO requests:	   3,118.2		 3.0
	   Read IO (MB):	     232.8		 0.2
	  Write IO (MB):	      25.8		 0.0
	   IM scan rows:	       0.0		 0.0
Session Logical Read IM:	       0.0		 0.0
 RAC GC blocks received:	      12.3		 0.0
   RAC GC blocks served:	      11.9		 0.0
	     User calls:	       3.5		 0.0
	   Parses (SQL):	      13.3		 0.0
      Hard parses (SQL):	       2.9		 0.0
     SQL Work Area (MB):	       1.3		 0.0
		 Logons:	       0.3		 0.0
	    User logons:	       0.0		 0.0
	 Executes (SQL):	  10,439.6		10.0
	      Rollbacks:	       0.0		 0.0
	   Transactions:	   1,043.9

Instance Efficiency Percentages (Target 100%)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	    Buffer Nowait %:  100.00	   Redo NoWait %:  100.00
	    Buffer  Hit   %:   45.92	In-memory Sort %:  100.00
	    Library Hit   %:   99.97	    Soft Parse %:   78.36
	 Execute to Parse %:   99.87	     Latch Hit %:   99.97
Parse CPU to Parse Elapsd %:   28.64	 % Non-Parse CPU:   99.94
	  Flash Cache Hit %:	0.00

Top 10 Foreground Events by Total Wait Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					   Total Wait	    Avg   % DB Wait
Event				     Waits Time (sec)	   Wait   time Class
------------------------------ ----------- ---------- --------- ------ --------
gc cr grant busy		 1,174,558	12.2K	10.37ms   42.5 Cluster
db file sequential read 	10,924,627     3825.7  350.19us   13.4 User I/O
DB CPU					       2747.9		   9.6
free buffer waits		   284,258     2691.5	 9.47ms    9.4 Configur
gc current grant 2-way		   111,676     1559.9	13.97ms    5.4 Cluster
gc cr grant 2-way		   262,085     1435.7	 5.48ms    5.0 Cluster
gc cr block lost		     2,298     1384.5  602.47ms    4.8 Cluster
write complete waits		       546     1213.6 2222.72ms    4.2 Configur
gc current grant busy		   114,655     1151.1	10.04ms    4.0 Cluster
gc current grant read-mostly i	   133,201	961.6	 7.22ms    3.4 Cluster

Wait Classes by Total Wait Time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
							  Avg		  Avg
					Total Wait	 Wait	% DB   Active
Wait Class		    Waits	Time (sec)	 Time	time Sessions
---------------- ---------------- ---------------- ---------- ------ --------
Cluster 		1,809,452	    19,080    10.54ms	66.6	 52.6
Configuration		  285,042	     4,003    14.04ms	14.0	 11.0
User I/O	       10,945,161	     3,853   352.03us	13.4	 10.6
DB CPU					     2,748		 9.6	  7.6
Other			  132,312	       915     6.92ms	 3.2	  2.5
System I/O		   34,408	       400    11.61ms	 1.4	  1.1
Application		      207	       112   538.99ms	  .4	  0.3
Concurrency		    2,062		26    12.52ms	  .1	  0.1
Commit			       39		 2    46.37ms	  .0	  0.0
Network 		      653		 0    28.93us	  .0	  0.0

Host CPU
~~~~~~~~		  Load Average
 CPUs Cores Sockets	Begin	    End     %User   %System	 %WIO	  %Idle
----- ----- ------- --------- --------- --------- --------- --------- ---------
   64	 32	  2	22.72	   7.24       6.0	7.9	 12.8	   83.0

Instance CPU
~~~~~~~~~~~~
	      % of total CPU for Instance:	16.2
	      % of busy  CPU for Instance:	95.4
  %DB time waiting for CPU - Resource Mgr:	 0.0

IO Profile		    Read+Write/Second	  Read/Second	 Write/Second
~~~~~~~~~~		    ----------------- --------------- ---------------
	    Total Requests:	     33,041.5	     29,802.3	      3,239.3
	 Database Requests:	     32,911.0	     29,792.8	      3,118.2
	Optimized Requests:		  0.0		  0.0		  0.0
	     Redo Requests:		 57.5		  2.4		 55.1
		Total (MB):		264.5		235.2		 29.3
	     Database (MB):		258.6		232.8		 25.8
      Optimized Total (MB):		  0.0		  0.0		  0.0
		 Redo (MB):		  5.0		  2.2		  2.8
	 Database (blocks):	     33,101.0	     29,798.7	      3,302.4
 Via Buffer Cache (blocks):	     33,095.8	     29,798.6	      3,297.2
	   Direct (blocks):		  5.2		  0.0		  5.2

Memory Statistics
~~~~~~~~~~~~~~~~~			Begin	       End
				 ------------ ------------
		  Host Mem (MB):  1,032,089.4  1,032,089.4
		   SGA use (MB):      3,072.0	   3,072.0
		   PGA use (MB):      2,939.5	   2,147.1
    % Host Mem used for SGA+PGA:	 0.58	      0.51

Cache Sizes			  Begin        End
~~~~~~~~~~~		     ---------- ----------
	       Buffer Cache:	 1,040M     1,040M  Std Block Size:	    8K
	   Shared Pool Size:	 1,242M     1,241M	Log Buffer:    40,404K
	     In-Memory Area:	     0M 	0M

 Shared Pool Statistics        Begin	End
~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ------  ------
	     Memory Usage %:   78.09   82.02
    % SQL with executions>1:   78.67   61.04
  % Memory for SQL w/exec>1:   80.30   65.07


Time Model Statistics			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> DB Time represents total time in user calls
-> DB CPU represents CPU time of foreground processes
-> Total CPU Time represents foreground and background processes
-> Statistics including the word "background" measure background process
   time, therefore do not contribute to the DB time statistic
-> Ordered by % of DB time in descending order, followed by Statistic Name

								% of  % of Total
Statistic Name					     Time (s) DB Time	CPU Time
------------------------------------------ ------------------ ------- ----------
sql execute elapsed time			     28,636.3	100.0
DB CPU						      2,747.9	  9.6	    82.3
PL/SQL execution elapsed time				102.7	   .4
parse time elapsed					 11.0	   .0
hard parse elapsed time 				  8.3	   .0
hard parse (sharing criteria) elapsed time		  2.1	   .0
hard parse (bind mismatch) elapsed time 		  1.4	   .0
PL/SQL compilation elapsed time 			  0.3	   .0
connection management call elapsed time 		  0.1	   .0
sequence load elapsed time				  0.1	   .0
repeated bind elapsed time				  0.0	   .0
DB time 					     28,647.6
background elapsed time 			      2,715.7
background cpu time					591.5		    17.7
total CPU time					      3,339.4
			  ------------------------------------------------------

Operating System Statistics		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> *TIME statistic values are diffed.
   All others display actual values.  End Value is displayed if different
-> ordered by statistic type (CPU Use, Virtual Memory, Hardware Config), Name

Statistic				   Value	End Value
------------------------- ---------------------- ----------------
FREE_MEMORY_BYTES		 543,472,332,800  544,528,248,832
INACTIVE_MEMORY_BYTES		   1,656,107,008    1,649,537,024
BUSY_TIME				 349,990
IDLE_TIME			       1,710,594
IOWAIT_TIME				 263,113
NICE_TIME				       0
SYS_TIME				 162,338
USER_TIME				 123,753
LOAD					      23		7
PHYSICAL_MEMORY_BYTES	       1,082,224,197,632
NUM_CPUS				      64
NUM_CPU_CORES				      32
<tr><td scope="row" class='awrnc'>&#160;</td><td scope="row" class='awrnc'>Others (foregrounds + unclassified backgrounds)</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>773.12</td></tr>
NUM_CPU_SOCKETS 			       2
GLOBAL_RECEIVE_SIZE_MAX 	       4,194,304
GLOBAL_SEND_SIZE_MAX		       1,048,576
TCP_RECEIVE_SIZE_DEFAULT		  87,380
<tr><td scope="row" class='awrc'>LGWR</td><td scope="row" class='awrc'>Redo etc.</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>230.37</td></tr>
TCP_RECEIVE_SIZE_MAX		       6,291,456
TCP_RECEIVE_SIZE_MIN			   4,096
TCP_SEND_SIZE_DEFAULT			  16,384
TCP_SEND_SIZE_MAX		       4,194,304
<tr><td scope="row" class='awrnc'>M</td><td scope="row" class='awrnc'>MMON slave class 1</td><td scope="row" class='awrnc'>Application</td><td align="right" class='awrnc'>110.03</td></tr>
TCP_SEND_SIZE_MIN			   4,096
			  ------------------------------------------------------

Operating System Statistics - Detail	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<tr><td scope="row" class='awrc'>M</td><td scope="row" class='awrc'>MMON slave class 1</td><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>29.29</td></tr>

Snap Time	    Load    %busy    %user     %sys    %idle  %iowait
--------------- -------- -------- -------- -------- -------- --------
17-Feb 09:26:07     22.7      N/A      N/A	N/A	 N/A	  N/A
<tr><td scope="row" class='awrnc'>DBW4</td><td scope="row" class='awrnc'>db writer process 4</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>17.78</td></tr>
17-Feb 09:32:10      7.2     17.0      6.0	7.9	83.0	 12.8
			  ------------------------------------------------------

<tr><td scope="row" class='awrc'>DBW6</td><td scope="row" class='awrc'>db writer process 6</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>17.78</td></tr>
Foreground Wait Class			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
-> ordered by wait time desc, waits desc
<tr><td scope="row" class='awrnc'>DBW5</td><td scope="row" class='awrnc'>db writer process 5</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>17.19</td></tr>
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0
-> Captured Time accounts for	     106.4%  of Total DB time	   28,647.57 (s)
-> Total FG Wait Time:		  27,719.60 (s)  DB CPU time:	    2,747.87 (s)

<tr><td scope="row" class='awrc'>DBW3</td><td scope="row" class='awrc'>db writer process 3</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>16.40</td></tr>
				     %Time	Total Wait
Wait Class		       Waits -outs	  Time (s)   Avg wait  %DB time
-------------------- --------------- ----- --------------- ---------- ---------
Cluster 		   1,807,782	 0	    19,064    10.55ms	   66.5
<tr><td scope="row" class='awrnc'>DBW7</td><td scope="row" class='awrnc'>db writer process 7</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>15.94</td></tr>
Configuration		     284,859	 0	     3,989    14.00ms	   13.9
User I/O		  10,924,947	 0	     3,828   350.35us	   13.4
DB CPU						     2,748		    9.6
Other			       8,653	11	       828    95.63ms	    2.9
<tr><td scope="row" class='awrc'>DBW1</td><td scope="row" class='awrc'>db writer process 1</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>15.87</td></tr>
Concurrency		       1,290	 2		10     7.38ms	    0.0
Commit				  39	 0		 2    46.37ms	    0.0
System I/O			 147	 0		 0   172.81us	    0.0
Network 			 265	 0		 0     6.18us	    0.0
<tr><td scope="row" class='awrnc'>DBW2</td><td scope="row" class='awrnc'>db writer process 2</td><td scope="row" class='awrnc'>System I/O</td><td align="right" class='awrnc'>15.85</td></tr>
Application			   0			 0		    0.0
			  ------------------------------------------------------


<tr><td scope="row" class='awrc'>DBW0</td><td scope="row" class='awrc'>db writer process 0</td><td scope="row" class='awrc'>System I/O</td><td align="right" class='awrc'>15.82</td></tr>
Foreground Wait Events			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Only events with Total Wait Time (s) >= .001 are shown
-> ordered by wait time desc, waits desc (idle events last)
<tr><td scope="row" class='awrnc'>LMON</td><td scope="row" class='awrnc'>global enqueue service monitor</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>14.56</td></tr>
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
				       %Time	 Wait		   Waits   % DB
<tr><td scope="row" class='awrc'>MMON</td><td scope="row" class='awrc'>Manageability Monitor Process</td><td scope="row" class='awrc'>Concurrency</td><td align="right" class='awrc'>14.51</td></tr>
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
gc cr grant busy	     1,174,558	       12,175	10.37ms      3.1   42.5
<tr><td scope="row" class='awrnc'>M</td><td scope="row" class='awrnc'>MMON slave class 1</td><td scope="row" class='awrnc'>Configuration</td><td align="right" class='awrnc'>14.25</td></tr>
db file sequential read     10,924,627		3,826  350.19us     28.8   13.4
free buffer waits	       284,258		2,691	 9.47ms      0.8    9.4
gc current grant 2-way	       111,676		1,560	13.97ms      0.3    5.4
gc cr grant 2-way	       262,085		1,436	 5.48ms      0.7    5.0
<tr><td scope="row" class='awrc'>IMR</td><td scope="row" class='awrc'>CGS IMR Slave</td><td scope="row" class='awrc'>User I/O</td><td align="right" class='awrc'>14.12</td></tr>
gc cr block lost		 2,298		1,384  602.47ms      0.0    4.8
write complete waits		   546		1,214 2222.72ms      0.0    4.2
gc current grant busy	       114,655		1,151	10.04ms      0.3    4.0
gc current grant read-most     133,201		  962	 7.22ms      0.4    3.4
<tr><td scope="row" class='awrnc'>LM</td><td scope="row" class='awrnc'>global cache service process</td><td scope="row" class='awrnc'>Other</td><td align="right" class='awrnc'>14.05</td></tr>
KJC: Wait for msg sends to	 4,385		  811  184.95ms      0.0    2.8
gc current block lost		   397		  247  623.14ms      0.0     .9
enq: HW - contention		    55		   84 1520.99ms      0.0     .3
</table><p />
gc current grant congested	 1,733		   53	30.86ms      0.0     .2
gc current block busy		 3,405		   35	10.37ms      0.0     .1
gc cr grant congested		 2,537		   27	10.75ms      0.0     .1
<hr align="left" width="20%" /><p />
gc current block 2-way		   389		    9	22.42ms      0.0     .0
gc current block congested	    39		    9  223.54ms      0.0     .0
latch free			   698		    9	12.22ms      0.0     .0
<a class="awr" href="#21">Back to Wait Events Statistics</a>
buffer busy waits		     3		    7 2368.42ms      0.0     .0
PX Deq: Slave Session Stat	   107		    7	64.55ms      0.0     .0
gc cr block busy		    19		    6  323.29ms      0.0     .0
<br /><a class="awr" href="#top">Back to Top</a><p />
gc cr block 2-way		   614		    4	 6.15ms      0.0     .0
gc buffer busy release		     4		    3  749.91ms      0.0     .0
<a class="awr" name="2320"></a>
gc remaster			     1	 100	    2 1999.61ms      0.0     .0
log file sync			    39		    2	46.37ms      0.0     .0
Disk file Mirror Read		    37		    2	48.13ms      0.0     .0
<h3 class="awr">Top Process Types by CPU Used</h3>
cursor: pin S wait on X 	    39		    1	35.88ms      0.0     .0
latch: gcs resource hash	   212		    1	 3.68ms      0.0     .0
library cache load lock 	    86		    0	 4.65ms      0.0     .0
<ul>
latch: cache buffers chain	   895		    0  413.27us      0.0     .0
gc cr multi block grant 	    89		    0	 3.97ms      0.0     .0
gc buffer busy acquire		    67		    0	 3.90ms      0.0     .0
<li class="awr"> This table displays top process types ordered by CPU time</li>
library cache: mutex X		   171		    0	 1.12ms      0.0     .0
kksfbc child completion 	     2	 100	    0	49.97ms      0.0     .0
latch: gc element		   271		    0  197.79us      0.0     .0
</ul>
db file scattered read		   128		    0  415.75us      0.0     .0
row cache lock			    26	 100	    0	 1.86ms      0.0     .0
<table border="0" class="tdiff" summary="Top Process Types by CPU Used. . This table displays top process types ordered by CPU time"><tr><th class="awrbg" scope="col">Process Type</th><th class="awrbg" scope="col">Description</th><th class="awrbg" scope="col">CPU Time (sec)</th></tr>
direct path write		    13		    0	 2.62ms      0.0     .0
IPC send completion sync	    43		    0  696.16us      0.0     .0
control file sequential re	   147		    0  172.81us      0.0     .0
<tr><td scope="row" class='awrc'>&#160;</td><td scope="row" class='awrc'>Others (foregrounds + unclassified backgrounds)</td><td align="right" class='awrc'>2,641.47</td></tr>
latch: enqueue hash chains	    85		    0  228.11us      0.0     .0
latch: cache buffers lru c	   142		    0  127.44us      0.0     .0
gc cr multi block mixed 	    11		    0	 1.52ms      0.0     .0
<tr><td scope="row" class='awrnc'>LM</td><td scope="row" class='awrnc'>global cache service process</td><td align="right" class='awrnc'>444.23</td></tr>
enq: WF - contention		    18		    0  866.28us      0.0     .0
enq: PS - contention		    15	   7	    0  718.27us      0.0     .0
latch: shared pool		    67		    0  157.67us      0.0     .0
DLM cross inst call comple	    33		    0  295.36us      0.0     .0
lock deadlock retry		   393	 100	    0	24.65us      0.0     .0
<tr><td scope="row" class='awrc'>VKTM</td><td scope="row" class='awrc'>Virtual Keeper of TiMe process</td><td align="right" class='awrc'>12.59</td></tr>
read by other session		     9		    0	 1.07ms      0.0     .0
PGA memory operation		   167		    0	53.93us      0.0     .0
gc cr block congested		     2		    0	 4.49ms      0.0     .0
PX Deq: reap credit		   498	 100	    0	17.36us      0.0     .0
<tr><td scope="row" class='awrnc'>DBW7</td><td scope="row" class='awrnc'>db writer process 7</td><td align="right" class='awrnc'>10.47</td></tr>
ges enter server mode		 1,458		    0	 5.24us      0.0     .0
db file parallel read		     6		    0	 1.27ms      0.0     .0
latch: redo allocation		    28		    0  120.32us      0.0     .0
Disk file operations I/O	    80		    0	34.25us      0.0     .0
<tr><td scope="row" class='awrc'>DBW0</td><td scope="row" class='awrc'>db writer process 0</td><td align="right" class='awrc'>10.31</td></tr>
enq: FB - contention		     2		    0	 1.31ms      0.0     .0
latch: ges resource hash l	    38		    0	62.08us      0.0     .0
latch: object queue header	    17		    0  132.24us      0.0     .0
<tr><td scope="row" class='awrnc'>DBW2</td><td scope="row" class='awrnc'>db writer process 2</td><td align="right" class='awrnc'>10.24</td></tr>
SQL*Net message to client	   247		    0	 5.56us      0.0     .0

Foreground Wait Events			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> s  - second, ms - millisecond, us - microsecond, ns - nanosecond
<tr><td scope="row" class='awrc'>DBW4</td><td scope="row" class='awrc'>db writer process 4</td><td align="right" class='awrc'>10.24</td></tr>
-> Only events with Total Wait Time (s) >= .001 are shown
-> ordered by wait time desc, waits desc (idle events last)
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

<tr><td scope="row" class='awrnc'>DBW6</td><td scope="row" class='awrnc'>db writer process 6</td><td align="right" class='awrnc'>10.22</td></tr>
						Total
				       %Time	 Wait		   Waits   % DB
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
<tr><td scope="row" class='awrc'>DBW5</td><td scope="row" class='awrc'>db writer process 5</td><td align="right" class='awrc'>10.21</td></tr>
gc current retry		     1		    0	 1.30ms      0.0     .0
wait list latch free		     1		    0	 1.14ms      0.0     .0
watchdog main loop		   684		2,046 2991.23ms      0.0
PX Deq: Execution Msg		   321		   25	77.00ms      0.0
<tr><td scope="row" class='awrnc'>DBW1</td><td scope="row" class='awrnc'>db writer process 1</td><td align="right" class='awrnc'>10.19</td></tr>
PX Deq: Msg Fragment		   387		    2	 4.67ms      0.0
PX Deq Credit: send blkd	   179		    1	 8.38ms      0.0
SQL*Net message from clien	   247		    0	 1.71ms      0.0
<tr><td scope="row" class='awrc'>DBW3</td><td scope="row" class='awrc'>db writer process 3</td><td align="right" class='awrc'>10.18</td></tr>
PX Deq Credit: need buffer	    36		    0  371.94us      0.0
			  ------------------------------------------------------

<tr><td scope="row" class='awrnc'>P</td><td scope="row" class='awrnc'>Parallel query slave</td><td align="right" class='awrnc'>9.27</td></tr>

Background Wait Events			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
<tr><td scope="row" class='awrc'>M</td><td scope="row" class='awrc'>MMON slave class 1</td><td align="right" class='awrc'>8.93</td></tr>
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
				       %Time	 Wait		   Waits   % bg
<tr><td scope="row" class='awrnc'>DIA0</td><td scope="row" class='awrnc'>diagnosibility process 0</td><td align="right" class='awrnc'>8.07</td></tr>
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
log file parallel write 	12,849	   0	  241	18.79ms      0.0    8.9
db file parallel write		12,462	   0	  144	11.52ms      0.0    5.3
<tr><td scope="row" class='awrc'>RS*</td><td scope="row" class='awrc'>GCS RM Slave</td><td align="right" class='awrc'>6.64</td></tr>
enq: RO - fast object reus	   206	   0	  112  541.31ms      0.0    4.1
Disk file Mirror Read		   444	   0	   19	42.53ms      0.0     .7
enq: CR - block range reus	    31	   0	   18  587.02ms      0.0     .7
<tr><td scope="row" class='awrnc'>CR*</td><td scope="row" class='awrnc'>GCS CR Slave</td><td align="right" class='awrnc'>4.93</td></tr>
PX Deq: Join ACK		   187	   0	   18	94.75ms      0.0     .7
IMR slave acknowledgement	 1,026	   0	   15	14.59ms      0.0     .6
buffer busy waits		     7	   0	   15 2073.26ms      0.0     .5
control file parallel writ	   152	   0	   14	91.60ms      0.0     .5
<tr><td scope="row" class='awrc'>LGWR</td><td scope="row" class='awrc'>Redo etc.</td><td align="right" class='awrc'>4.82</td></tr>
write complete waits		     4	   0	   13 3240.34ms      0.0     .5
gc cr grant busy		 1,068	   0	   12	11.25ms      0.0     .4
gcs log flush sync		39,549	   0	   12  301.14us      0.1     .4
reliable message		   165	   0	    8	48.91ms      0.0     .3
<tr><td scope="row" class='awrnc'>LMHB</td><td scope="row" class='awrnc'>lm heartbeat monitor</td><td align="right" class='awrnc'>1.52</td></tr>
KJC: Wait for msg sends to	17,011	 100	    3  194.32us      0.0     .1
direct path write temp		    79	   0	    3	33.00ms      0.0     .1
gcs remastering wait for r	    29	   0	    2	74.66ms      0.0     .1
<tr><td scope="row" class='awrc'>SCM</td><td scope="row" class='awrc'>DLM Statistics Collection and Management Slave</td><td align="right" class='awrc'>1.50</td></tr>
ASM IO for non-blocking po	16,412	   0	    2  131.53us      0.0     .1
IPC send completion sync	   442	  77	    2	 4.71ms      0.0     .1
free buffer waits		   177	   0	    2	 9.72ms      0.0     .1
row cache lock			    22	 100	    2	75.91ms      0.0     .1
<tr><td scope="row" class='awrnc'>GCR</td><td scope="row" class='awrnc'>GCR Slaves (LMHB)</td><td align="right" class='awrnc'>1.50</td></tr>
db file sequential read 	 2,769	   0	    2  559.85us      0.0     .1
ASM file metadata operatio	 1,487	   0	    1  848.95us      0.0     .0
gc cr grant 2-way		   406	   0	    1	 2.86ms      0.0     .0
</table><p />
KSV master wait 		   559	  46	    1	 1.96ms      0.0     .0
gc cr block busy		     1	   0	    1 1085.99ms      0.0     .0
PX Deq: Slave Session Stat	   187	   0	    1	 5.60ms      0.0     .0
<hr align="left" width="20%" /><p />
gc cr multi block grant 	    14	   0	    1	73.30ms      0.0     .0
PX Deq: Signal ACK EXT		   187	   0	    1	 5.47ms      0.0     .0
enq: CF - contention		    29	  55	    1	31.74ms      0.0     .0
PX Deq: reap credit		50,417	 100	    1	17.62us      0.1     .0
<a class="awr" href="#21">Back to Wait Events Statistics</a>
enq: PS - contention		   117	   7	    1	 7.11ms      0.0     .0
ges inquiry response		    38	   0	    1	14.22ms      0.0     .0
gc cr disk read 		    42	   0	    0	 8.46ms      0.0     .0
<br /><a class="awr" href="#top">Back to Top</a><p />
control file sequential re	 1,870	   0	    0  184.43us      0.0     .0
latch free			   627	   0	    0  418.52us      0.0     .0
log file sequential read	   232	   0	    0  740.47us      0.0     .0
<p />
Disk file operations I/O	   290	   0	    0  557.88us      0.0     .0
latch: gcs resource hash	   249	   0	    0  535.51us      0.0     .0
Sync ASM rebalance		    36	   0	    0	 3.68ms      0.0     .0
<a class="awr" name="22"></a>
CGS wait for IPC msg		 5,330	 100	    0	14.46us      0.0     .0
direct path write		     8	   0	    0	 8.97ms      0.0     .0
DFS lock handle 		   226	 100	    0  295.24us      0.0     .0
<h2 class="awr">
AQ: RAC AQ Network		 3,402	 100	    0	18.11us      0.0     .0
enq: TM - contention		     1	   0	    0	60.12ms      0.0     .0
SQL Statistics
db file scattered read		   201	   0	    0  256.27us      0.0     .0
gc current grant busy		    39	   0	    0	 1.26ms      0.0     .0
DLM cross inst call comple	    50	   0	    0  842.44us      0.0     .0
</h2>
PGA memory operation		   333	   0	    0  123.55us      0.0     .0
ges lms sync during dynami	    39	   0	    0	 1.03ms      0.0     .0
latch: gc element		   119	   0	    0  323.36us      0.0     .0
<ul>
oracle thread bootstrap 	     1	   0	    0	37.66ms      0.0     .0
db file async I/O submit	 6,697	   0	    0	 5.30us      0.0     .0
latch: MGA shared context	    64	   0	    0  542.45us      0.0     .0
<li class="awr"><a class="awr" href="#400">SQL ordered by Elapsed Time</a></li>
latch: cache buffers chain	   119	   0	    0  249.74us      0.0     .0
LGWR wait for redo copy 	   272	   0	    0  106.00us      0.0     .0
latch: MGA shared context	    84	   0	    0  278.19us      0.0     .0
gc cr block 2-way		    24	   0	    0  905.67us      0.0     .0
<li class="awr"><a class="awr" href="#500">SQL ordered by CPU Time</a></li>
latch: cache buffers lru c	   194	   0	    0  107.51us      0.0     .0
gc current block busy		    33	   0	    0  576.94us      0.0     .0
ksxr poll remote instances	   891	 100	    0	20.65us      0.0     .0

<li class="awr"><a class="awr" href="#550">SQL ordered by User I/O Wait Time</a></li>
Background Wait Events			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> ordered by wait time desc, waits desc (idle events last)
-> Only events with Total Wait Time (s) >= .001 are shown
<li class="awr"><a class="awr" href="#600">SQL ordered by Gets</a></li>
-> %Timeouts: value of 0 indicates value was < .5%.  Value of null is truly 0

						Total
				       %Time	 Wait		   Waits   % bg
<li class="awr"><a class="awr" href="#700">SQL ordered by Reads</a></li>
Event				 Waits -outs Time (s)  Avg wait     /txn   time
-------------------------- ----------- ----- -------- --------- -------- ------
IPC group service call		   267	   0	    0	62.21us      0.0     .0
ges2 LMON to wake up LMD -	    48	   0	    0  323.65us      0.0     .0
<li class="awr"><a class="awr" href="#740">SQL ordered by Physical Reads (UnOptimized)</a></li>
CSS operation: data query	    11	   0	    0	 1.27ms      0.0     .0
CSS operation: data update	    12	   0	    0	 1.11ms      0.0     .0
kjctssqmg: quick message s	    50	 100	    0  227.28us      0.0     .0
<li class="awr"><a class="awr" href="#800">SQL ordered by Executions</a></li>
gc buffer busy acquire		     2	   0	    0	 4.83ms      0.0     .0
gc current grant 2-way		    29	   0	    0  314.34us      0.0     .0
gc current block 2-way		     9	   0	    0	  .97ms      0.0     .0
gc cr multi block mixed 	     2	   0	    0	 3.83ms      0.0     .0
<li class="awr"><a class="awr" href="#900">SQL ordered by Parse Calls</a></li>
gc cr grant congested		     1	   0	    0	 7.14ms      0.0     .0
cursor: pin S wait on X 	     1	   0	    0	 5.57ms      0.0     .0
enq: CO - master slave det	     6	 100	    0  711.83us      0.0     .0
<li class="awr"><a class="awr" href="#1000">SQL ordered by Sharable Memory</a></li>
latch: redo allocation		    16	   0	    0  149.00us      0.0     .0
direct path read		    14	   0	    0  149.93us      0.0     .0
latch: object queue header	    14	   0	    0  149.36us      0.0     .0
os thread creation		     1	   0	    0	 1.89ms      0.0     .0
<li class="awr"><a class="awr" href="#1100">SQL ordered by Version Count</a></li>
latch: shared pool		     7	   0	    0  268.14us      0.0     .0
libcache interrupt action	   453	   0	    0	 3.72us      0.0     .0
enq: US - contention		     1	   0	    0	 1.68ms      0.0     .0
CSS operation: action		     2	   0	    0  558.50us      0.0     .0
<li class="awr"><a class="awr" href="#1150">SQL ordered by Cluster Wait Time</a></li>
PX Idle Wait			   107	   0   44,335  414.34 s      0.0
Space Manager: slave idle	 3,645	   0   15,573 4272.43ms      0.0
rdbms ipc message		12,270	  51	7,999  651.93ms      0.0
<li class="awr"><a class="awr" href="#99997">Complete List of SQL Text</a></li>
class slave wait		 4,130	  78	2,175  526.71ms      0.0
LMS CR slave timer	       136,426	   0	1,362	 9.99ms      0.4
gcs yield cpu			48,396	  96	1,359	28.08ms      0.1
</ul>
gcs remote message	     2,217,249	   0	1,096  494.37us      5.9
wait for unread message on	   523	 100	1,025 1960.45ms      0.0
ges remote message		15,473	   0	1,024	66.16ms      0.0
<a class="awr" href="#top">Back to Top</a><p />
pmon timer			   228	 100	  684 2999.84ms      0.0
GCR sleep			 2,269	   0	  681  300.33ms      0.0
DIAG idle wait			 7,369	  58	  674	91.50ms      0.0
<a class="awr" name="400"></a>
LGWR worker group idle		     2	   0	  600  300.00 s      0.0
dispatcher timer		     6	 100	  360	60.01 s      0.0
Data Guard: Gap Manager 	     6	   0	  360	60.00 s      0.0
lreg timer			   115	  99	  342 2976.70ms      0.0
<h3 class="awr">SQL ordered by Elapsed Time</h3>
ASM background timer		 1,156	   0	  342  295.87ms      0.0
OFS idle			   114	 100	  342 2999.99ms      0.0
pman timer			   114	 100	  342 2999.73ms      0.0
<ul>
REPL Capture/Apply: RAC AQ	     5	 100	  341	68.26 s      0.0
heartbeat redo informer 	   341	   0	  341 1000.12ms      0.0
PING				   323	  20	  340 1053.16ms      0.0
SCM slave idle			 3,454	   0	  340	98.43ms      0.0
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
ASM cluster membership cha	   194	  85	  340 1750.38ms      0.0
Streams AQ: qmn coordinato	    24	   0	  336	14.00 s      0.0
Streams AQ: qmn slave idle	    12	   0	  336	28.00 s      0.0
AQPC idle			    11	 100	  330	30.00 s      0.0
smon timer			     2	  50	  300  150.10 s      0.0
PX Deq: Parse Reply		   187	   0	    6	29.97ms      0.0
<li class="awr"> % Total DB Time is the Elapsed Time of the SQL statement divided     into the Total Database Time multiplied by 100 </li>
PX Deq: Execute Reply		   897	   0	    4	 4.37ms      0.0
PX Deq Credit: send blkd	   247	   0	    2	 7.22ms      0.0
SQL*Net message from clien	   122	   0	    0	 1.50ms      0.0
RMA: IPC0 completion sync	   368	   0	    0	13.60us      0.0
<li class="awr"> %Total - Elapsed Time	as a percentage of Total DB time </li>
			  ------------------------------------------------------


Wait Event Histogram			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
-> % of Total Waits: value of .0 indicates value was <.05%;
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
   value of null is truly 0
-> Ordered by Event (idle events last)

						 % of Total Waits
				 -----------------------------------------------
<li class="awr">Captured SQL account for   88.0% of Total DB Time (s):		28,648</li>
			   Total
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
AQ: RAC AQ Network	    3328	35.3  61.0   2.3   1.2	  .1	.1    .0
<li class="awr">Captured PL/SQL account for   42.5% of Total DB Time (s):	   28,648</li>
ASM IO for non-blocking p  15.5K  22.7	28.6   4.2   2.2   1.5	15.7  22.6   2.5
ASM file metadata operati   1456  14.8	 6.0  11.4  22.3  11.7	11.6  10.7  11.4
AWR Flush		       5  80.0	20.0
</ul>
CGS wait for IPC msg	    5271   3.8	71.9  20.7   2.2   1.2	  .1	.1
CSS operation: action	       2	50.0				    50.0
<table border="0" class="tdiff" summary="This table displays top SQL by elapsed time"><tr><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">Elapsed Time per Exec (s) </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">	SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>18,926.42</td><td align="right" class='awrc'>3,062,456</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>66.07</td><td align="right" class='awrc'>9.58</td><td align="right" class='awrc'>16.12</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>6,170.18</td><td align="right" class='awrnc'>340,333</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>21.54</td><td align="right" class='awrnc'>4.69</td><td align="right" class='awrnc'>5.60</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>222.70</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>222.70</td><td align="right" class='awrc'>0.78</td><td align="right" class='awrc'>4.24</td><td align="right" class='awrc'>5.73</td><td scope="row" class='awrc'><a class="awr" href="#6arntugpqz094">6arntugpqz094</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>222.63</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>222.63</td><td align="right" class='awrnc'>0.78</td><td align="right" class='awrnc'>4.28</td><td align="right" class='awrnc'>5.35</td><td scope="row" class='awrnc'><a class="awr" href="#g4s4tnmn3d6ss">g4s4tnmn3d6ss</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>222.45</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>222.45</td><td align="right" class='awrc'>0.78</td><td align="right" class='awrc'>4.13</td><td align="right" class='awrc'>3.93</td><td scope="row" class='awrc'><a class="awr" href="#5zuc26whzgn7r">5zuc26whzgn7r</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>222.43</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>222.43</td><td align="right" class='awrnc'>0.78</td><td align="right" class='awrnc'>4.17</td><td align="right" class='awrnc'>3.68</td><td scope="row" class='awrnc'><a class="awr" href="#6pqjm0dp8bnky">6pqjm0dp8bnky</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>222.30</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>222.30</td><td align="right" class='awrc'>0.78</td><td align="right" class='awrc'>4.23</td><td align="right" class='awrc'>3.59</td><td scope="row" class='awrc'><a class="awr" href="#a017akb6vk41k">a017akb6vk41k</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>222.27</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>222.27</td><td align="right" class='awrnc'>0.78</td><td align="right" class='awrnc'>4.41</td><td align="right" class='awrnc'>4.06</td><td scope="row" class='awrnc'><a class="awr" href="#50rt989k98t99">50rt989k98t99</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>222.25</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>222.25</td><td align="right" class='awrc'>0.78</td><td align="right" class='awrc'>4.53</td><td align="right" class='awrc'>4.06</td><td scope="row" class='awrc'><a class="awr" href="#cwjq8stjymah0">cwjq8stjymah0</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>222.19</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>222.19</td><td align="right" class='awrnc'>0.78</td><td align="right" class='awrnc'>4.10</td><td align="right" class='awrnc'>3.78</td><td scope="row" class='awrnc'><a class="awr" href="#gmtzgmxa3z2gp">gmtzgmxa3z2gp</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="500"></a>
<h3 class="awr">SQL ordered by CPU Time</h3>
<ul>
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
<li class="awr"> %Total - CPU Time	as a percentage of Total DB CPU </li>
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
<li class="awr">Captured SQL account for   76.9% of Total CPU Time (s): 	  2,748</li>
<li class="awr">Captured PL/SQL account for   62.7% of Total CPU Time (s):	     2,748</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by CPU time"><tr><th class="awrbg" scope="col">CPU    Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">CPU per  Exec (s)</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>1,813.65</td><td align="right" class='awrc'>3,062,456</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>66.00</td><td align="right" class='awrc'>18,926.42</td><td align="right" class='awrc'>9.58</td><td align="right" class='awrc'>16.12</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
CSS operation: data query     10				      10.0  90.0
CSS operation: data updat     11				      18.2  81.8
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
DFS lock handle 	     226				 2.7  96.0   1.3
DLM cross inst call compl     81	 7.4  24.7   2.5   9.9	 6.2   9.9  39.5
Disk file Mirror Read	     471					.6  99.4
Disk file operations I/O     385   2.3	10.6  29.9  14.5  14.0	12.2   3.4  13.0
<tr><td align="right" class='awrnc'>289.68</td><td align="right" class='awrnc'>340,333</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>10.54</td><td align="right" class='awrnc'>6,170.18</td><td align="right" class='awrnc'>4.69</td><td align="right" class='awrnc'>5.60</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
GCR CSS group query	      11       100.0
GCR CSS group update	      11  18.2	81.8
IMR slave acknowledgement   1002   6.8	12.7   6.3   3.8  27.4	 9.5   5.4  28.1
<td class='awrnc'>
IPC group service call	     283   4.9	 3.9  30.7  13.1  42.0	 5.3
IPC send completion sync     478	39.3  29.3   1.7    .4	 8.2   8.4  12.8
SQL*Plus
KJC: Wait for msg sends t  21.3K   1.4	42.3   3.9  16.1  10.1	 5.9   5.2  15.0
KSV master wait 	     546   4.6	16.7  18.5   4.0   9.2	16.8   2.7  27.5
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
LGWR wait for redo copy      261  48.7	  .8   1.5   5.4  18.8	19.2   3.4   2.3
PGA memory operation	     500   7.4	41.0   8.0   8.2   6.8	14.0  12.6   2.0
PX Deq: Join ACK	     181					.6  99.4
PX Deq: Signal ACK EXT	     181	16.0  52.5  11.0   5.5	 4.4   4.4   6.1
<tr><td align="right" class='awrc'>78.69</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>78.69</td><td align="right" class='awrc'>2.86</td><td align="right" class='awrc'>220.00</td><td align="right" class='awrc'>35.77</td><td align="right" class='awrc'>47.90</td><td scope="row" class='awrc'><a class="awr" href="#7kcm0mhxqy5q8">7kcm0mhxqy5q8</a></td>
PX Deq: Slave Session Sta    285   2.5	 2.1   4.6    .4  20.7	19.3  13.3  37.2
PX Deq: reap credit	   49.8K    .2	58.2  37.9   2.4   1.0	  .2	.1    .0
<td class='awrc'>
PX qref latch		      13	92.3   7.7
SQL*Net message to client    367  95.9	 2.7	.8    .3	  .3
SQL*Plus
Sync ASM rebalance	      36   5.6	22.2  16.7   5.6		    50.0
asynch descriptor resize     125  92.0	 4.8   1.6   1.6
buffer busy waits	      10				      10.0  90.0
</td>
buffer deadlock 	       3	33.3  66.7
control file parallel wri    150					   100.0
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
control file sequential r   1969    .3	18.1   4.9    .5   9.6	50.7  13.3   2.6
cursor: pin S wait on X       40					   100.0
db file async I/O submit    6320  96.7	 1.8	.4    .8    .2	  .1	      .0
db file parallel read	       7				42.9  28.6  28.6
db file parallel write	   11.6K	  .1	.5   1.5   2.2	 3.7  12.4  79.6
<tr><td align="right" class='awrnc'>76.58</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>76.58</td><td align="right" class='awrnc'>2.79</td><td align="right" class='awrnc'>221.01</td><td align="right" class='awrnc'>34.65</td><td align="right" class='awrnc'>48.02</td><td scope="row" class='awrnc'><a class="awr" href="#9v83s8vqfv1d6">9v83s8vqfv1d6</a></td>
db file scattered read	     334				47.9  43.4   8.7
db file sequential read    10.6M			   1.3	35.4  55.5   7.8
<td class='awrnc'>
direct path read	      14	14.3		  28.6	35.7  21.4
direct path read temp	       2		    50.0	50.0
direct path write	      23				       8.7  91.3
SQL*Plus
direct path write temp	      87					   100.0
enq: CF - contention	      28				      14.3  85.7
</td>
enq: CO - master slave de      6				      33.3  66.7
enq: CR - block range reu     21					   100.0
enq: FB - contention	       4				     100.0
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
enq: HW - contention	      56					   100.0
enq: PS - contention	     130	 1.5	.8    .8    .8	 4.6  16.9  74.6
enq: RO - fast object reu    212				      26.9  73.1
enq: TA - contention	       1				     100.0
<tr><td align="right" class='awrc'>75.32</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>75.32</td><td align="right" class='awrc'>2.74</td><td align="right" class='awrc'>220.97</td><td align="right" class='awrc'>34.09</td><td align="right" class='awrc'>47.77</td><td scope="row" class='awrc'><a class="awr" href="#ddk08qkf81zw2">ddk08qkf81zw2</a></td>
enq: TM - contention	       1					   100.0
enq: US - contention	       1					   100.0
enq: WF - contention	      19				      26.3  73.7
<td class='awrc'>
free buffer waits	  277.5K    .0	  .6	.2    .1    .1	  .1	.1  98.9
gc buffer busy acquire	      69					   100.0
SQL*Plus
gc buffer busy release	       6	16.7				    83.3
gc cr block 2-way	     618				 2.1  15.9  82.0
gc cr block busy	      16					   100.0
</td>
gc cr block congested	       2					   100.0

Wait Event Histogram			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
-> % of Total Waits: value of .0 indicates value was <.05%;
<tr><td align="right" class='awrnc'>74.30</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>74.30</td><td align="right" class='awrnc'>2.70</td><td align="right" class='awrnc'>219.93</td><td align="right" class='awrnc'>33.79</td><td align="right" class='awrnc'>47.94</td><td scope="row" class='awrnc'><a class="awr" href="#fcfyvfu5jmtsj">fcfyvfu5jmtsj</a></td>
   value of null is truly 0
-> Ordered by Event (idle events last)

<td class='awrnc'>
						 % of Total Waits
				 -----------------------------------------------
SQL*Plus
			   Total
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
</td>
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
gc cr block lost	    2297					   100.0
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
gc cr disk read 	      42				38.1   9.5  52.4
gc cr grant 2-way	  262.5K		.0    .1    .1	 3.0  30.7  66.2
<tr><td align="right" class='awrc'>73.89</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>73.89</td><td align="right" class='awrc'>2.69</td><td align="right" class='awrc'>220.93</td><td align="right" class='awrc'>33.45</td><td align="right" class='awrc'>46.76</td><td scope="row" class='awrc'><a class="awr" href="#1b74aw70y48yn">1b74aw70y48yn</a></td>
gc cr grant busy	    1.1M	  .0	.0    .0    .0	  .0   6.0  93.9
gc cr grant congested	    2538					   100.0
gc cr multi block grant      103				 1.0   9.7  89.3
<td class='awrc'>
gc cr multi block mixed       13				       7.7  92.3
gc current block 2-way	     388				  .5  10.3  89.2
SQL*Plus
gc current block busy	    3298		      .0    .0	  .5   9.8  89.6
gc current block congeste     38					   100.0
gc current block lost	     395					   100.0
</td>
gc current grant 2-way	  108.9K		      .0    .0	  .8   7.5  91.7
gc current grant busy	  110.8K	  .0	.0    .0    .0	  .0   6.2  93.7
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
gc current grant congeste   1700					   100.0
gc current grant read-mos 130.3K		      .0	  .0   1.6  98.4
gc current multi block re      1				     100.0
gc current retry	       1					   100.0
<tr><td align="right" class='awrnc'>72.19</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>72.19</td><td align="right" class='awrnc'>2.63</td><td align="right" class='awrnc'>220.93</td><td align="right" class='awrnc'>32.68</td><td align="right" class='awrnc'>46.95</td><td scope="row" class='awrnc'><a class="awr" href="#7w4ajz9mh4684">7w4ajz9mh4684</a></td>
gc remaster		       1					   100.0
gcs log flush sync	   39.6K    .0	 4.5   4.4  18.2  20.4	20.4  17.4  14.7
gcs remastering wait for      29				 3.4   3.4  93.1
<td class='awrnc'>
ges enter server mode	    1467  96.7	 1.0	.6   1.2    .4	  .1
ges inquiry response	      35				      48.6  51.4
SQL*Plus
ges ipc enter server mode     18 100.0
ges lms sync during dynam     39	       2.6		 7.7  23.1  66.7
ges resource directory to      2 100.0
</td>
ges2 LMON to wake up LMD      48	25.0   4.2   8.3  25.0	12.5  12.5  12.5
kjctssqmg: quick message      50	24.0  10.0   8.0  12.0	16.0  18.0  12.0
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
kksfbc child completion        2					   100.0
ksxr poll remote instance    875	53.5  41.5   2.7   1.6	  .1	.3    .2
latch free		    1302   1.0	10.5   1.7   3.5  15.2	14.1  28.6  25.3
latch: MGA heap latch	      14  28.6	14.3  14.3  14.3  28.6
<tr><td align="right" class='awrc'>72.05</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>72.05</td><td align="right" class='awrc'>2.62</td><td align="right" class='awrc'>219.98</td><td align="right" class='awrc'>32.76</td><td align="right" class='awrc'>46.89</td><td scope="row" class='awrc'><a class="awr" href="#38r80y2wpq2ma">38r80y2wpq2ma</a></td>
latch: MGA shared context     84   3.6	11.9	     2.4  26.2	31.0   9.5  15.5
latch: MGA shared context     64   3.1	 3.1	    14.1  12.5	10.9  18.8  37.5
<td class='awrc'>
latch: cache buffers chai    986   4.0	33.8   3.2   5.4  25.4	17.3   5.4   5.6
latch: cache buffers lru     322   7.5	28.0   4.7   8.4  28.0	17.7   3.1   2.8
latch: call allocation	      10  10.0	10.0	    10.0  20.0	40.0  10.0
SQL*Plus
latch: checkpoint queue l      2	50.0	    50.0
latch: enqueue hash chain     82   6.1	13.4   2.4   4.9  30.5	25.6   7.3   9.8
</td>
latch: gc element	     377   1.9	15.1   3.2   6.9  26.5	23.3  10.9  12.2
latch: gcs resource hash     449   2.4	21.6   2.9   6.5  25.6	19.6   8.9  12.5
latch: ges resource hash      38   7.9	26.3  21.1   7.9  15.8	18.4   2.6
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
latch: messages 	       6	16.7		  33.3	33.3  16.7
latch: object queue heade     28   7.1	25.0   3.6   3.6  17.9	32.1   7.1   3.6
latch: redo allocation	      44   2.3	22.7  11.4   6.8  27.3	20.5   4.5   4.5
<tr><td align="right" class='awrnc'>70.17</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>70.17</td><td align="right" class='awrnc'>2.55</td><td align="right" class='awrnc'>219.93</td><td align="right" class='awrnc'>31.91</td><td align="right" class='awrnc'>44.65</td><td scope="row" class='awrnc'><a class="awr" href="#71f07h4b84yt2">71f07h4b84yt2</a></td>
latch: redo writing	       1			 100.0
latch: shared pool	      71   8.5	29.6   5.6   7.0   2.8	19.7  16.9   9.9
latch: undo global data        4			  25.0	25.0  50.0
<td class='awrnc'>
libcache interrupt action    430  98.1	  .9	.5    .5
library cache load lock       86	 2.3   1.2   2.3   3.5	10.5   9.3  70.9
SQL*Plus
library cache pin	       1					   100.0
library cache: bucket mut      3  33.3	66.7
library cache: mutex X	     174  37.9	18.4  16.1   4.6   2.9	 5.2   4.0  10.9
</td>
lock deadlock retry	     390	33.6  59.5   3.6   1.8	  .8	.5    .3
log file parallel write    12.6K					   100.0
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
log file sequential read     225		    29.8   3.1	19.6  13.3  34.2
log file sync		      39					   100.0
name-service call wait	       2				     100.0
<tr><td align="right" class='awrc'>70.11</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>70.11</td><td align="right" class='awrc'>2.55</td><td align="right" class='awrc'>220.96</td><td align="right" class='awrc'>31.73</td><td align="right" class='awrc'>45.04</td><td scope="row" class='awrc'><a class="awr" href="#ds7scgmy0unq5">ds7scgmy0unq5</a></td>
oracle thread bootstrap        1					   100.0
os thread creation	       1					   100.0
read by other session	       9	11.1  11.1		11.1  11.1  55.6
<td class='awrc'>

Wait Event Histogram			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
SQL*Plus
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
</td>
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (idle events last)
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>

						 % of Total Waits
				 -----------------------------------------------
			   Total
Event			   Waits  <8us <16us <32us <64us <128u <256u <512u >=512
<tr><td align="right" class='awrnc'>70.04</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>70.04</td><td align="right" class='awrnc'>2.55</td><td align="right" class='awrnc'>220.93</td><td align="right" class='awrnc'>31.70</td><td align="right" class='awrnc'>45.37</td><td scope="row" class='awrnc'><a class="awr" href="#czhh6tvvf96yz">czhh6tvvf96yz</a></td>
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
reliable message	     164					   100.0
row cache lock		      49				       4.1  95.9
<td class='awrnc'>
undo_retention publish re      1 100.0
wait list latch free	       1					   100.0
write complete waits	     537					   100.0
SQL*Plus
AQPC idle		      11					   100.0
ASM background timer	    1123			   1.3	 8.4   6.3  84.0
ASM cluster membership ch    192					   100.0
</td>
DIAG idle wait		    7307		.0    .1    .8	  .9  12.0  86.1
Data Guard: Gap Manager        6					   100.0
GCR sleep		    2226					   100.0
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
LMS CR slave timer	  133.8K			    .0	  .0	   100.0
OFS idle		     112					   100.0
PING			     311	       2.3  24.4  16.4	11.6   8.4  37.0
PX Deq Credit: need buffe     36	 2.8		  11.1	44.4  27.8  13.9
<tr><td align="right" class='awrc'>68.44</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>68.44</td><td align="right" class='awrc'>2.49</td><td align="right" class='awrc'>219.95</td><td align="right" class='awrc'>31.11</td><td align="right" class='awrc'>44.86</td><td scope="row" class='awrc'><a class="awr" href="#2sff4nbj564pf">2sff4nbj564pf</a></td>
PX Deq Credit: send blkd     438    .5	  .2	.2	    .9	11.9  29.7  56.6
PX Deq: Execute Reply	     895  15.9	14.3   1.1   9.8   5.6	 5.6   6.9  40.8
PX Deq: Execution Msg	     318		.3		      12.3  87.4
<td class='awrc'>
PX Deq: Msg Fragment	     399   6.8	 2.3	.5   7.0   2.8	 4.5  37.3  38.8
PX Deq: Parse Reply	     185				 3.8   3.2  93.0
SQL*Plus
PX Idle Wait		     106					   100.0
REPL Capture/Apply: RAC A      5					   100.0
RMA: IPC0 completion sync    365   6.3	72.3  18.9   1.9    .3	  .3
</td>
SCM slave idle		    3390    .0	  .0			  .1	.1  99.8
SQL*Net message from clie    369				  .5  13.3  86.2
Space Manager: slave idle   3589    .2	  .7	.0    .9   2.8	  .9	.2  94.4
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
Streams AQ: qmn coordinat     24				41.7   8.3  50.0
Streams AQ: qmn slave idl     12					   100.0
class slave wait	    4059   2.8	 1.2	.6   3.0   1.9	  .8	.3  89.5
dispatcher timer	       6					   100.0
<tr><td align="right" class='awrnc'>61.52</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>61.52</td><td align="right" class='awrnc'>2.24</td><td align="right" class='awrnc'>221.03</td><td align="right" class='awrnc'>27.83</td><td align="right" class='awrnc'>40.97</td><td scope="row" class='awrnc'><a class="awr" href="#6uuqkb35jw13t">6uuqkb35jw13t</a></td>
gcs remote message	    2.2M    .0	 4.4   5.0  17.6  19.3	21.0  17.2  15.5
gcs yield cpu		   47.5K    .8	 2.0	.3    .3    .1	  .4	.7  95.4
ges remote message	   15.2K    .1	 2.2	.5    .3    .8	 2.5   2.0  91.6
<td class='awrnc'>
heartbeat redo informer      335					   100.0
lreg timer		     112					   100.0
pman timer		     112					   100.0
SQL*Plus
pmon timer		     224					   100.0
rdbms ipc message	   12.2K   4.7	 3.6   2.1   3.6   2.4	 3.1   2.4  78.1
</td>
smon timer		       2					   100.0
wait for unread message o    514					   100.0
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
watchdog main loop	     671					   100.0
			  ------------------------------------------------------


Wait Event Histogram (up to 64 us)	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<tr><td align="right" class='awrc'>60.26</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>60.26</td><td align="right" class='awrc'>2.19</td><td align="right" class='awrc'>220.95</td><td align="right" class='awrc'>27.27</td><td align="right" class='awrc'>40.19</td><td scope="row" class='awrc'><a class="awr" href="#7gx6d596s0fak">7gx6d596s0fak</a></td>
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
<td class='awrc'>
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
SQL*Plus
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
</td>
				 -----------------------------------------------
			   Waits
			    1us
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
Event			  - 64us  <1us	<2us  <4us  <8us <16us <32us <64us >=64u
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
AQ: RAC AQ Network	    3282			  35.3	61.0   2.3   1.4
ASM IO for non-blocking p   8956		.0  22.7  28.6	 4.2   2.2  42.2
<tr><td align="right" class='awrnc'>59.42</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>59.42</td><td align="right" class='awrnc'>2.16</td><td align="right" class='awrnc'>220.93</td><td align="right" class='awrnc'>26.89</td><td align="right" class='awrnc'>40.47</td><td scope="row" class='awrnc'><a class="awr" href="#16p07bywtb14q">16p07bywtb14q</a></td>
ASM file metadata operati    794	       6.5   8.2   6.0	11.4  22.3  45.5
AWR Flush		       5	      40.0  40.0  20.0
CGS wait for IPC msg	    5200		     3.8  71.9	20.7   2.2   1.3
<td class='awrnc'>
CSS operation: action	       1			  50.0		    50.0
DLM cross inst call compl     28			   7.4	24.7   2.5  65.4
Disk file operations I/O     221		.3   2.1  10.6	29.9  14.5  42.6
SQL*Plus
GCR CSS group query	      11			 100.0
GCR CSS group update	      11		    18.2  81.8
IMR slave acknowledgement    296		     6.8  12.7	 6.3   3.8  70.5
</td>
IPC group service call	     149		     4.9   3.9	30.7  13.1  47.3
IPC send completion sync     336			  39.3	29.3   1.7  29.7
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
KJC: Wait for msg sends t  13.6K		     1.4  42.3	 3.9  16.1  36.2
KSV master wait 	     239		     4.6  16.7	18.5   4.0  56.2
LGWR wait for redo copy      147	      23.0  25.7    .8	 1.5   5.4  43.7
PGA memory operation	     323		.2   7.2  41.0	 8.0   8.2  35.4
<tr><td align="right" class='awrc'>55.33</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>55.33</td><td align="right" class='awrc'>2.01</td><td align="right" class='awrc'>219.96</td><td align="right" class='awrc'>25.16</td><td align="right" class='awrc'>38.32</td><td scope="row" class='awrc'><a class="awr" href="#bkvq4kcy2sz66">bkvq4kcy2sz66</a></td>
PX Deq: Signal ACK EXT	     144			  16.0	52.5  11.0  20.4
PX Deq: Slave Session Sta     27		     2.5   2.1	 4.6	.4  90.5
PX Deq: reap credit	   49.2K		      .2  58.2	37.9   2.4   1.3
<td class='awrc'>
PX qref latch		      13			  92.3	 7.7
SQL*Net message to client    366	      22.3  73.6   2.7	  .8	.3    .3
Sync ASM rebalance	      18		     5.6  22.2	16.7   5.6  50.0
SQL*Plus
asynch descriptor resize     125		.8  91.2   4.8	 1.6   1.6
buffer deadlock 	       3			  33.3	66.7
</td>
control file sequential r    469		      .3  18.1	 4.9	.5  76.2
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
db file async I/O submit    6296	      29.1  67.5   1.8	  .4	.8    .4
db file parallel write	     246			    .1	  .5   1.5  97.9
direct path read	       2			  14.3		    85.7
direct path read temp	       1				      50.0  50.0
<tr><td align="right" class='awrnc'>55.10</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>55.10</td><td align="right" class='awrnc'>2.01</td><td align="right" class='awrnc'>219.93</td><td align="right" class='awrnc'>25.05</td><td align="right" class='awrnc'>37.88</td><td scope="row" class='awrnc'><a class="awr" href="#7rgx2dkmdsfn6">7rgx2dkmdsfn6</a></td>
enq: PS - contention	       4			   1.5	  .8	.8  96.9
free buffer waits	    2574		      .0    .6	  .2	.1  99.1
gc buffer busy release	       1			  16.7		    83.3
<td class='awrnc'>
gc cr grant 2-way	     200				  .0	.1  99.9
gc cr grant busy	      65			    .0	  .0	.0 100.0
gc current block busy	       1					.0 100.0
SQL*Plus
gc current grant 2-way	      15					.0 100.0
gc current grant busy	       9			    .0	  .0	.0 100.0
gc current grant read-mos      2					.0 100.0
</td>
gcs log flush sync	   10.7K		      .0   4.5	 4.4  18.2  72.9
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
ges enter server mode	    1460	      27.8  68.9   1.0	  .6   1.2    .5
ges ipc enter server mode     18	      27.8  72.2
ges lms sync during dynam      1				 2.6	    97.4
ges resource directory to      2		   100.0
ges2 LMON to wake up LMD      18			  25.0	 4.2   8.3  62.5
<tr><td align="right" class='awrc'>50.99</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>50.99</td><td align="right" class='awrc'>1.86</td><td align="right" class='awrc'>219.94</td><td align="right" class='awrc'>23.18</td><td align="right" class='awrc'>36.38</td><td scope="row" class='awrc'><a class="awr" href="#9xs2fh4766zzj">9xs2fh4766zzj</a></td>
kjctssqmg: quick message      21			  24.0	10.0   8.0  58.0
ksxr poll remote instance    855			  53.5	41.5   2.7   2.3
latch free		     218		     1.0  10.5	 1.7   3.5  83.3
<td class='awrc'>
latch: MGA heap latch	      10		    28.6  14.3	14.3  14.3  28.6
latch: MGA shared context     15		     3.6  11.9	       2.4  82.1
SQL*Plus
latch: MGA shared context     13		     3.1   3.1	      14.1  79.7
latch: cache buffers chai    457		     4.0  33.8	 3.2   5.4  53.7
</td>
latch: cache buffers lru     156		     7.5  28.0	 4.7   8.4  51.6
latch: call allocation	       3		    10.0  10.0	      10.0  70.0
latch: checkpoint queue l      2			  50.0	      50.0
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
latch: enqueue hash chain     22		     6.1  13.4	 2.4   4.9  73.2
latch: gc element	     102		     1.9  15.1	 3.2   6.9  72.9
latch: gcs resource hash     150		     2.4  21.6	 2.9   6.5  66.6
latch: ges resource hash      24		     7.9  26.3	21.1   7.9  36.8
<tr><td align="right" class='awrnc'>41.28</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>41.28</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>220.04</td><td align="right" class='awrnc'>18.76</td><td align="right" class='awrnc'>30.47</td><td scope="row" class='awrnc'><a class="awr" href="#av2x55hf6b4kn">av2x55hf6b4kn</a></td>
latch: messages 	       1			  16.7		    83.3

Wait Event Histogram (up to 64 us)	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<td class='awrnc'>
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds
SQL*Plus
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
</td>
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
				 -----------------------------------------------
			   Waits
			    1us
Event			  - 64us  <1us	<2us  <4us  <8us <16us <32us <64us >=64u
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
latch: object queue heade     11		     7.1  25.0	 3.6   3.6  60.7
<tr><td align="right" class='awrc'>35.77</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>35.77</td><td align="right" class='awrc'>1.30</td><td align="right" class='awrc'>220.93</td><td align="right" class='awrc'>16.19</td><td align="right" class='awrc'>26.53</td><td scope="row" class='awrc'><a class="awr" href="#gqbp4bdj9hjjb">gqbp4bdj9hjjb</a></td>
latch: redo allocation	      19		     2.3  22.7	11.4   6.8  56.8
latch: shared pool	      36		     8.5  29.6	 5.6   7.0  49.3
libcache interrupt action    430	      62.3  35.8    .9	  .5	.5
<td class='awrc'>
library cache load lock        5			   2.3	 1.2   2.3  94.2
library cache: bucket mut      3		    33.3  66.7
library cache: mutex X	     134	       2.9  35.1  18.4	16.1   4.6  23.0
SQL*Plus
lock deadlock retry	     377			  33.6	59.5   3.6   3.3
log file sequential read      67				      29.8  70.2
read by other session	       2			  11.1	11.1	    77.8
</td>
undo_retention publish re      1		   100.0
			  ------------------------------------------------------


<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
Wait Event Histogram (up to 32 ms)	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds,
   ms is 1024 microseconds (approximately 1 millisecond)
<tr><td align="right" class='awrnc'>31.41</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>31.41</td><td align="right" class='awrnc'>1.14</td><td align="right" class='awrnc'>221.04</td><td align="right" class='awrnc'>14.21</td><td align="right" class='awrnc'>23.58</td><td scope="row" class='awrnc'><a class="awr" href="#5vdaktvdvngax">5vdaktvdvngax</a></td>
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
<td class='awrnc'>
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
SQL*Plus
				 -----------------------------------------------
			   Waits
			    1ms
</td>
Event			  to 32m  <512	<1ms  <2ms  <4ms  <8ms <16ms <32ms >=32m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
AQ: RAC AQ Network	       1 100.0	  .0
ASM IO for non-blocking p    388  97.5	 2.2	.2    .1    .0
ASM file metadata operati    164  88.6	 1.0   1.9   2.4   2.2	 3.3	.5    .1
CSS operation: action	       1  50.0	      50.0
CSS operation: data query      9  10.0	40.0  40.0  10.0
<tr><td align="right" class='awrc'>31.22</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>31.22</td><td align="right" class='awrc'>1.14</td><td align="right" class='awrc'>219.99</td><td align="right" class='awrc'>14.19</td><td align="right" class='awrc'>23.37</td><td scope="row" class='awrc'><a class="awr" href="#857mw2dsngfyz">857mw2dsngfyz</a></td>
CSS operation: data updat      9  18.2	36.4  27.3  18.2
DFS lock handle 	       3  98.7	 1.3
DLM cross inst call compl     32  60.5	21.0  12.3   3.7   2.5
<td class='awrc'>
Disk file Mirror Read	     385    .6	29.9  14.9  15.3   5.9	 9.1   6.6  17.6
Disk file operations I/O      50  87.0	 2.1   2.1   7.8   1.0
IMR slave acknowledgement    220  71.9	 7.8   3.7   4.1   1.7	 2.8   1.9   6.2
SQL*Plus
IPC send completion sync      59  87.2	 6.9   3.3   1.7    .4		      .4
KJC: Wait for msg sends t    756  85.0	 2.3	.9    .3    .1	  .0	    11.5
</td>
KSV master wait 	     149  72.5	  .4   4.4   6.6   5.9	 9.2	.9    .2
LGWR wait for redo copy        6  97.7	  .8   1.1    .4
PGA memory operation	      10  98.0	 1.8	.2
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
PX Deq: Join ACK	     166    .6	34.8  22.7  15.5   9.9	 7.2   1.7   7.7
PX Deq: Signal ACK EXT	      10  93.9	 5.0	      .6		      .6
PX Deq: Slave Session Sta    100  62.8	10.2  14.7   6.7   3.2	  .4	     2.1
</table><p />
PX Deq: reap credit	      16 100.0	  .0	.0
Sync ASM rebalance	      18  50.0	16.7	     2.8  11.1	16.7   2.8
buffer busy waits	       1  10.0				10.0	    80.0
<hr align="left" width="20%" /><p />
control file parallel wri    114		    22.7  38.7	10.7   4.0  24.0
control file sequential r     52  97.4	 1.6	.6    .4    .1
cursor: pin S wait on X       21	       2.5	  10.0	 5.0  35.0  47.5
<a class="awr" href="#22">Back to SQL Statistics</a>
db file async I/O submit       3 100.0	  .0
db file parallel read	       2  71.4	      14.3	  14.3
db file parallel write	    8553  20.4	19.8  13.8  20.5  12.7	 5.6   1.3   6.0
<br /><a class="awr" href="#top">Back to Top</a><p />
db file scattered read	      29  91.3	 7.2	.6    .9
db file sequential read   824.2K  92.2	 5.6   1.2    .7    .1	  .0	.0    .0
direct path write	      21   8.7	 4.3  34.8  30.4   8.7	 4.3   8.7
<a class="awr" name="550"></a>
direct path write temp	      78		    49.4  33.3	 3.4   3.4  10.3
enq: CF - contention	      20  14.3	32.1  25.0  14.3		    14.3
enq: CO - master slave de      4  33.3	33.3  33.3
<h3 class="awr">SQL ordered by User I/O Wait Time</h3>
enq: CR - block range reu     15	23.8  19.0  23.8   4.8		    28.6
enq: HW - contention	       3	 1.8	     1.8	       1.8  94.6
enq: PS - contention	      96  25.4	28.5  28.5  13.8   3.1		      .8
<ul>
enq: RO - fast object reu    108  26.9	 9.0  17.5  19.3   4.7	  .5	    22.2
enq: US - contention	       1	     100.0
enq: WF - contention	      14  26.3	36.8  36.8
free buffer waits	  274.4K   1.1	  .1	.2    .4    .8	97.2	.0    .0
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>
gc buffer busy acquire	      69	 1.4  11.6  21.7  63.8	 1.4
gc buffer busy release	       2  16.7		    16.7  16.7		    50.0
gc cr block 2-way	     504  18.0	35.8  32.4  11.7   1.8		      .5
<li class="awr"> %Total - User I/O Time as a percentage of Total User I/O Wait time </li>
gc cr block busy	       4				 6.3  18.8  75.0
gc cr block congested	       2		    50.0  50.0
gc cr disk read 	      20  47.6	 4.8  31.0   9.5   2.4		     4.8
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
gc cr grant 2-way	  172.6K  33.8	34.5  22.1   7.6   1.4	  .2	.0    .4
gc cr grant busy	      1M   6.1	28.2  35.5  18.5   6.6	 2.0	.6   2.6
gc cr grant congested	    2522	       6.9  51.8  33.9	 6.3	.5    .6
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
gc cr multi block grant       89  10.7	34.0  23.3  21.4   6.8	       1.0   2.9
gc cr multi block mixed       12   7.7	23.1  30.8  30.8   7.7
gc current block 2-way	     338  10.8	23.2  36.6  21.9   4.4	  .8	.3   2.1
<li class="awr">Captured SQL account for   88.2% of Total User I/O Wait Time (s):	    3,853</li>
gc current block busy	    2883  10.4	25.3  32.1  19.6   7.8	 2.0	.6   2.2
gc current block congeste     33		    50.0  34.2	 2.6	    13.2
<li class="awr">Captured PL/SQL account for   64.2% of Total User I/O Wait Time (s):	       3,853</li>
gc current grant 2-way	     95K   8.3	10.9  23.6  30.3  15.6	 5.3   1.6   4.4
</ul>
gc current grant busy	  101.1K   6.3	28.5  35.3  18.2   6.7	 1.9	.6   2.5
gc current grant congeste   1468		.4  10.8  32.3	34.4   8.5  13.6
gc current grant read-mos 123.3K   1.6	22.0  38.7  21.5   8.5	 2.9   1.1   3.8
gc current retry	       1	     100.0

Wait Event Histogram (up to 32 ms)	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<table border="0" class="tdiff" summary="This table displays top SQL by user I/O time"><tr><th class="awrbg" scope="col">User I/O Time (s)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">UIO per  Exec (s)</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   us is microseconds,
   ms is 1024 microseconds (approximately 1 millisecond)
-> % of Total Waits: total waits for all wait classes, including Idle
<tr><td align="right" class='awrc'>3,050.82</td><td align="right" class='awrc'>3,062,456</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>79.18</td><td align="right" class='awrc'>18,926.42</td><td align="right" class='awrc'>9.58</td><td align="right" class='awrc'>16.12</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

<td class='awrc'>
						 % of Total Waits
				 -----------------------------------------------
			   Waits
SQL*Plus
			    1ms
Event			  to 32m  <512	<1ms  <2ms  <4ms  <8ms <16ms <32ms >=32m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
</td>
gcs log flush sync	    5807  85.3	 9.5   3.8   1.0    .2	  .1	.0
gcs remastering wait for       5   6.9	 3.4   3.4   6.9   3.4		    75.9
ges inquiry response	      17  48.6	11.4  25.7  11.4		     2.9
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
ges lms sync during dynam     26  33.3	20.5  41.0   5.1
ges2 LMON to wake up LMD       6  87.5	 6.3	     6.3
kjctssqmg: quick message       6  88.0	 8.0   4.0
ksxr poll remote instance      2  99.8	  .1	.1
latch free		     249  74.7	10.0   4.1   2.7   2.2	  .1	.1   6.2
<tr><td align="right" class='awrnc'>345.83</td><td align="right" class='awrnc'>340,333</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>8.98</td><td align="right" class='awrnc'>6,170.18</td><td align="right" class='awrnc'>4.69</td><td align="right" class='awrnc'>5.60</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
latch: MGA shared context     13  84.5	 4.8  10.7
latch: MGA shared context     24  62.5	21.9   9.4   6.3
latch: cache buffers chai     51  94.4	 2.4   2.1    .3    .2		.1    .4
<td class='awrnc'>
latch: cache buffers lru       9  97.2	 2.2	.3	    .3
latch: enqueue hash chain      8  90.2	 2.4   6.1   1.2
latch: gc element	      46  87.8	 8.2   2.9   1.1
SQL*Plus
latch: gcs resource hash      44  87.5	 5.3   2.7   1.3    .2		.2   2.7
latch: object queue heade      1  96.4	 3.6
latch: redo allocation	       2  95.5	 2.3   2.3
</td>
latch: shared pool	       7  90.1	 9.9
library cache load lock       61  29.1	 1.2   8.1  11.6  30.2	19.8
library cache pin	       1       100.0
library cache: mutex X	      19  89.1	 1.1			 8.0   1.7
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
lock deadlock retry	       1  99.7		.3
log file parallel write    11.9K		    22.5  41.6	26.5   4.4   5.0
log file sequential read      77  65.8	  .4  26.2   7.1    .4
log file sync		      31		    10.3  10.3	 7.7  51.3  20.5
<tr><td align="right" class='awrc'>106.14</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>106.14</td><td align="right" class='awrc'>2.75</td><td align="right" class='awrc'>221.01</td><td align="right" class='awrc'>34.65</td><td align="right" class='awrc'>48.02</td><td scope="row" class='awrc'><a class="awr" href="#9v83s8vqfv1d6">9v83s8vqfv1d6</a></td>
os thread creation	       1	     100.0
read by other session	       5  44.4	11.1  22.2  22.2
reliable message	     155	17.1  25.0  37.2  10.4	 4.3	.6   5.5
<td class='awrc'>
row cache lock		      45   4.1	42.9  30.6  14.3   4.1		     4.1
wait list latch free	       1	     100.0
write complete waits	       1					.2  99.8
SQL*Plus
			  ------------------------------------------------------


Wait Event Histogram (up to 2 sec)	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
</td>
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   ms is milliseconds
   s is 1024 milliseconds (approximately 1 second)
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------
			   Waits
<tr><td align="right" class='awrnc'>105.55</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>105.55</td><td align="right" class='awrnc'>2.74</td><td align="right" class='awrnc'>220.97</td><td align="right" class='awrnc'>34.09</td><td align="right" class='awrnc'>47.77</td><td scope="row" class='awrnc'><a class="awr" href="#ddk08qkf81zw2">ddk08qkf81zw2</a></td>
			   64ms
Event			   to 2s <32ms <64ms <1/8s <1/4s <1/2s	 <1s   <2s  >=2s
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
<td class='awrnc'>
ASM file metadata operati      2  99.9	  .1
Disk file Mirror Read	      83  82.4	 3.4   3.2   5.9   4.2	  .8
SQL*Plus
IMR slave acknowledgement     62  93.8	 1.0   1.5   1.8   1.6	  .3
IPC send completion sync       2  99.6				  .4
KJC: Wait for msg sends t   2441  88.5			  11.1	  .4
</td>
KSV master wait 	       1  99.8	  .2
PX Deq: Join ACK	      11  92.3		     2.8   2.2	 1.1	     1.7
PX Deq: Signal ACK EXT	       1  99.4				  .6
PX Deq: Slave Session Sta      5  97.9				 1.8	      .4
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
buffer busy waits	       5  20.0	      10.0  10.0	10.0  20.0  30.0
control file parallel wri     35  76.0	 3.3   2.0  11.3   3.3	 2.0   1.3    .7
cursor: pin S wait on X       19  52.5	47.5
<tr><td align="right" class='awrc'>105.43</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>105.43</td><td align="right" class='awrc'>2.74</td><td align="right" class='awrc'>219.93</td><td align="right" class='awrc'>33.79</td><td align="right" class='awrc'>47.94</td><td scope="row" class='awrc'><a class="awr" href="#fcfyvfu5jmtsj">fcfyvfu5jmtsj</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>105.37</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>105.37</td><td align="right" class='awrnc'>2.73</td><td align="right" class='awrnc'>220.00</td><td align="right" class='awrnc'>35.77</td><td align="right" class='awrnc'>47.90</td><td scope="row" class='awrnc'><a class="awr" href="#7kcm0mhxqy5q8">7kcm0mhxqy5q8</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>103.73</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>103.73</td><td align="right" class='awrc'>2.69</td><td align="right" class='awrc'>220.93</td><td align="right" class='awrc'>32.68</td><td align="right" class='awrc'>46.95</td><td scope="row" class='awrc'><a class="awr" href="#7w4ajz9mh4684">7w4ajz9mh4684</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>103.30</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>103.30</td><td align="right" class='awrnc'>2.68</td><td align="right" class='awrnc'>220.93</td><td align="right" class='awrnc'>33.45</td><td align="right" class='awrnc'>46.76</td><td scope="row" class='awrnc'><a class="awr" href="#1b74aw70y48yn">1b74aw70y48yn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>103.16</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>103.16</td><td align="right" class='awrc'>2.68</td><td align="right" class='awrc'>219.98</td><td align="right" class='awrc'>32.76</td><td align="right" class='awrc'>46.89</td><td scope="row" class='awrc'><a class="awr" href="#38r80y2wpq2ma">38r80y2wpq2ma</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>100.24</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>100.24</td><td align="right" class='awrnc'>2.60</td><td align="right" class='awrnc'>220.93</td><td align="right" class='awrnc'>31.70</td><td align="right" class='awrnc'>45.37</td><td scope="row" class='awrnc'><a class="awr" href="#czhh6tvvf96yz">czhh6tvvf96yz</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>99.51</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>99.51</td><td align="right" class='awrc'>2.58</td><td align="right" class='awrc'>220.96</td><td align="right" class='awrc'>31.73</td><td align="right" class='awrc'>45.04</td><td scope="row" class='awrc'><a class="awr" href="#ds7scgmy0unq5">ds7scgmy0unq5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
db file parallel write	     691  94.0	  .6   1.3   4.0    .1	  .0
db file sequential read      834 100.0	  .0	.0    .0
direct path write temp	       9  89.7	 3.4   2.3   2.3	 2.3
enq: CF - contention	       4  85.7	       7.1   3.6   3.6
enq: CR - block range reu      3  71.4			   4.8	 9.5	    14.3
enq: HW - contention	      36   5.4	 3.6   5.4  10.7  12.5	23.2   8.9  30.4
enq: PS - contention	       1  99.2		      .8
enq: RO - fast object reu     25  77.8	  .5		    .9	 2.8   7.5  10.4
enq: TM - contention	       1       100.0
free buffer waits	       1 100.0		      .0
gc buffer busy release	       3  50.0				50.0
gc cr block 2-way	       3  99.5				  .5
gc cr block busy	      12  25.0	 6.3   6.3  12.5  25.0	18.8   6.3
gc cr block lost	    2297			  24.9	74.1   1.1
gc cr disk read 	       2  95.2		     4.8
gc cr grant 2-way	    1105  99.6	  .0	.0    .0    .0	  .4	.0    .0
gc cr grant busy	   29.5K  97.4	  .2   1.7    .1    .0	  .5	.1    .0
gc cr grant congested	      16  99.4				  .6
gc cr multi block grant        3  97.1	       1.9		 1.0
gc current block 2-way	       8  97.9				 2.1
gc current block busy	      71  97.8	  .3   1.3    .0    .0	  .5	.1
gc current block congeste      3  86.8		     2.6	       5.3   5.3
gc current block lost	     393			  24.6	72.9   2.0    .5
gc current grant 2-way	    4823  95.6	  .9   2.5    .4    .0	  .5	.1    .0
gc current grant busy	    2758  97.5	  .2   1.6    .1    .0	  .5	.0    .0
gc current grant congeste    232  86.4	 3.6   7.2   1.8    .2	  .6	.2
gc current grant read-mos   4908  96.2	  .9   2.5    .2    .1	  .1	.0    .0
gc remaster		       1				     100.0
gcs remastering wait for      22  24.1	      75.9
ges inquiry response	       1  97.1			   2.9
kksfbc child completion        2       100.0
latch free		      81  93.8	  .1   6.1
latch: cache buffers chai      4  99.6	  .3	.1
latch: gcs resource hash      12  97.3	 1.1   1.6
log file parallel write      625  95.0	 1.1	.5   2.2    .8	  .3	.0
log file sync		       8  79.5	 7.7	    12.8
oracle thread bootstrap        1       100.0
reliable message	       8  94.5		     1.8    .6	 1.8	.6    .6
row cache lock		       2  95.9				 4.1
write complete waits	     270    .2	  .4   1.5   1.3   6.0	14.5  26.6  49.5
			  ------------------------------------------------------


Wait Event Histogram (up to 2 min)	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Units for Total Waits column: K is 1000, M is 1000000, G is 1000000000
-> Units for % of Total Waits:
   s is 1024 milliseconds (approximately 1 second)
   m is 64*1024 milliseconds (approximately 67 seconds or 1.12 minutes)
-> % of Total Waits: total waits for all wait classes, including Idle
-> % of Total Waits: value of .0 indicates value was <.05%;
   value of null is truly 0
-> Ordered by Event (only non-idle events are displayed)

						 % of Total Waits
				 -----------------------------------------------
			   Waits
			    4s
Event			   to 2m   <2s	 <4s   <8s  <16s  <32s	< 1m  < 2m  >=2m
------------------------- ------ ----- ----- ----- ----- ----- ----- ----- -----
PX Deq: Join ACK	       3  98.3	 1.1	.6
PX Deq: Slave Session Sta      1  99.6	  .4
buffer busy waits	       3  70.0	      30.0
control file parallel wri      1  99.3	  .7
enq: CR - block range reu      3  85.7	14.3
enq: HW - contention	      17  69.6	23.2   7.1
enq: RO - fast object reu     22  89.6	 7.1   3.3
gc cr grant 2-way	       5 100.0		.0
gc cr grant busy	      89 100.0	  .0	.0
gc current block congeste      2  94.7	 5.3
gc current block lost	       2  99.5	  .5
gc current grant 2-way	      13 100.0	  .0
gc current grant busy	      13 100.0	  .0
gc current grant read-mos     12 100.0	  .0	.0
reliable message	       1  99.4	  .6
write complete waits	     266  50.5	39.9   9.7
			  ------------------------------------------------------


Wait Event Histogram (up to 1 hr)	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			  ------------------------------------------------------


Service Statistics			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> ordered by DB Time

							   Physical	 Logical
Service Name		      DB Time (s)   DB CPU (s)	  Reads (K)    Reads (K)
---------------------------- ------------ ------------ ------------ ------------
p30sdb.example.com		   27,396	 2,623	     10,253	  18,905
SYS$BACKGROUND			       13	     5		  4	      85
SYS$USERS				0	     0		  0	       0
p30sdbXDB				0	     0		  0	       0
			  ------------------------------------------------------

Service Wait Class Stats		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Wait Class info for services in the Service Statistics section.
-> Total Waits and Time Waited displayed for the following wait
   classes:  User I/O, Concurrency, Administrative, Network
-> Time Waited (Wt Time) in seconds

Service Name
----------------------------------------------------------------
 User I/O  User I/O  Concurcy  Concurcy     Admin     Admin   Network	Network
Total Wts   Wt Time Total Wts	Wt Time Total Wts   Wt Time Total Wts	Wt Time
--------- --------- --------- --------- --------- --------- --------- ---------
p30sdb.example.com
 10251053      3600	 1240	      5 	0	  0	  258	      0
SYS$BACKGROUND
    18243	 24	  569	     16 	0	  0	  265	      0
SYS$USERS
	0	  0	    0	      0 	0	  0	    0	      0
			  ------------------------------------------------------

Top 10 Channel Waits			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Top 10 Channel Waits by wait time

Channel
----------------------------------------------------------------
	       Total
		Wait
      Waits Time (s)  Avg Wait
----------- -------- ---------
RBR channel
	  3	   1  235.15ms
obj broadcast channel
	 65	   3   47.08ms
kxfp control signal channel
	 88	   4   41.00ms
			  ------------------------------------------------------


Top Process Types by Wait Class 	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> This table displays top process types ordered by wait class

Proce Description		     Wait Class Type  Wait Time (sec
----- ------------------------------ ---------------- --------------
      Others (foregrounds + unclassi Cluster		    18,103.1
      Others (foregrounds + unclassi Configuration	     3,906.6
      Others (foregrounds + unclassi User I/O		     3,642.5
      Others (foregrounds + unclassi Other		       773.1
LGWR  Redo etc. 		     System I/O 	       230.4
M     MMON slave class 1	     Application	       110.0
M     MMON slave class 1	     Other			29.3
DBW4  db writer process 4	     System I/O 		17.8
DBW6  db writer process 6	     System I/O 		17.8
DBW5  db writer process 5	     System I/O 		17.2
DBW3  db writer process 3	     System I/O 		16.4
DBW7  db writer process 7	     System I/O 		15.9
DBW1  db writer process 1	     System I/O 		15.9
DBW2  db writer process 2	     System I/O 		15.9
DBW0  db writer process 0	     System I/O 		15.8
LMON  global enqueue service monitor Other			14.6
MMON  Manageability Monitor Process  Concurrency		14.5
M     MMON slave class 1	     Configuration		14.2
IMR   CGS IMR Slave		     User I/O			14.1
LM    global cache service process   Other			14.1
			  ------------------------------------------------------

<tr><td align="right" class='awrnc'>98.66</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>98.66</td><td align="right" class='awrnc'>2.56</td><td align="right" class='awrnc'>219.95</td><td align="right" class='awrnc'>31.11</td><td align="right" class='awrnc'>44.86</td><td scope="row" class='awrnc'><a class="awr" href="#2sff4nbj564pf">2sff4nbj564pf</a></td>

Top Process Types by CPU Used		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> This table displays top process types ordered by CPU time
<td class='awrnc'>

Proces Description		      CPU Time (sec)
------ ------------------------------ --------------
SQL*Plus
       Others (foregrounds + unclassi	     2,641.5
LM     global cache service process	       444.2
VKTM   Virtual Keeper of TiMe process		12.6
</td>
DBW7   db writer process 7			10.5
DBW0   db writer process 0			10.3
DBW2   db writer process 2			10.2
DBW4   db writer process 4			10.2
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
DBW6   db writer process 6			10.2
DBW5   db writer process 5			10.2
DBW1   db writer process 1			10.2
DBW3   db writer process 3			10.2
P      Parallel query slave			 9.3
<tr><td align="right" class='awrc'>98.20</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>98.20</td><td align="right" class='awrc'>2.55</td><td align="right" class='awrc'>219.93</td><td align="right" class='awrc'>31.91</td><td align="right" class='awrc'>44.65</td><td scope="row" class='awrc'><a class="awr" href="#71f07h4b84yt2">71f07h4b84yt2</a></td>
M      MMON slave class 1			 8.9
DIA0   diagnosibility process 0 		 8.1
RS*    GCS RM Slave				 6.6
<td class='awrc'>
CR*    GCS CR Slave				 4.9
LGWR   Redo etc.				 4.8
LMHB   lm heartbeat monitor			 1.5
SQL*Plus
SCM    DLM Statistics Collection and		 1.5
GCR    GCR Slaves (LMHB)			 1.5
			  ------------------------------------------------------
</td>


SQL ordered by Elapsed Time		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
<tr><td align="right" class='awrnc'>90.56</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>90.56</td><td align="right" class='awrnc'>2.35</td><td align="right" class='awrnc'>221.03</td><td align="right" class='awrnc'>27.83</td><td align="right" class='awrnc'>40.97</td><td scope="row" class='awrnc'><a class="awr" href="#6uuqkb35jw13t">6uuqkb35jw13t</a></td>
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   88.0% of Total DB Time (s):	   28,648
<td class='awrnc'>
-> Captured PL/SQL account for	 42.5% of Total DB Time (s):	      28,648

	Elapsed 		 Elapsed Time
SQL*Plus
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
	18,926.4      3,062,456 	 0.01	66.1	9.6   16.1 bhdvtsvjhgvrh
</td>
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
	 6,170.2	340,333 	 0.02	21.5	4.7    5.6 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

<tr><td align="right" class='awrc'>89.42</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>89.42</td><td align="right" class='awrc'>2.32</td><td align="right" class='awrc'>220.93</td><td align="right" class='awrc'>26.89</td><td align="right" class='awrc'>40.47</td><td scope="row" class='awrc'><a class="awr" href="#16p07bywtb14q">16p07bywtb14q</a></td>
	   222.7	      1        222.70	  .8	4.2    5.7 6arntugpqz094
Module: SQL*Plus
<td class='awrc'>
DECLARE v_default_schema_number PLS_INTEGER := '132'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
SQL*Plus
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	   222.6	      1        222.63	  .8	4.3    5.3 g4s4tnmn3d6ss
</td>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '185'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	   222.4	      1        222.45	  .8	4.1    3.9 5zuc26whzgn7r
Module: SQL*Plus
<tr><td align="right" class='awrnc'>88.81</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>88.81</td><td align="right" class='awrnc'>2.30</td><td align="right" class='awrnc'>220.95</td><td align="right" class='awrnc'>27.27</td><td align="right" class='awrnc'>40.19</td><td scope="row" class='awrnc'><a class="awr" href="#7gx6d596s0fak">7gx6d596s0fak</a></td>
DECLARE v_default_schema_number PLS_INTEGER := '150'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<td class='awrnc'>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	   222.4	      1        222.43	  .8	4.2    3.7 6pqjm0dp8bnky
SQL*Plus
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '149'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
</td>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
	   222.3	      1        222.30	  .8	4.2    3.6 a017akb6vk41k
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '164'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<tr><td align="right" class='awrc'>84.29</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>84.29</td><td align="right" class='awrc'>2.19</td><td align="right" class='awrc'>219.96</td><td align="right" class='awrc'>25.16</td><td align="right" class='awrc'>38.32</td><td scope="row" class='awrc'><a class="awr" href="#bkvq4kcy2sz66">bkvq4kcy2sz66</a></td>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	   222.3	      1        222.27	  .8	4.4    4.1 50rt989k98t99
<td class='awrc'>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '182'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
SQL*Plus
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
</td>

	   222.2	      1        222.25	  .8	4.5    4.1 cwjq8stjymah0
Module: SQL*Plus
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
DECLARE v_default_schema_number PLS_INTEGER := '162'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

<tr><td align="right" class='awrnc'>83.31</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>83.31</td><td align="right" class='awrnc'>2.16</td><td align="right" class='awrnc'>219.93</td><td align="right" class='awrnc'>25.05</td><td align="right" class='awrnc'>37.88</td><td scope="row" class='awrnc'><a class="awr" href="#7rgx2dkmdsfn6">7rgx2dkmdsfn6</a></td>
	   222.2	      1        222.19	  .8	4.1    3.8 gmtzgmxa3z2gp
Module: SQL*Plus
<td class='awrnc'>

SQL ordered by Elapsed Time		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
SQL*Plus
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> % Total DB Time is the Elapsed Time of the SQL statement divided
</td>
   into the Total Database Time multiplied by 100
-> %Total - Elapsed Time  as a percentage of Total DB time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   88.0% of Total DB Time (s):	   28,648
-> Captured PL/SQL account for	 42.5% of Total DB Time (s):	      28,648

	Elapsed 		 Elapsed Time
<tr><td align="right" class='awrc'>80.02</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>80.02</td><td align="right" class='awrc'>2.08</td><td align="right" class='awrc'>219.94</td><td align="right" class='awrc'>23.18</td><td align="right" class='awrc'>36.38</td><td scope="row" class='awrc'><a class="awr" href="#9xs2fh4766zzj">9xs2fh4766zzj</a></td>
	Time (s)    Executions	per Exec (s)  %Total   %CPU    %IO    SQL Id
---------------- -------------- ------------- ------ ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '20'; v_update_pct PLS_INTEGER :=
<td class='awrc'>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
SQL*Plus

</td>
			  ------------------------------------------------------


SQL ordered by CPU Time 		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
<tr><td align="right" class='awrnc'>67.06</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>67.06</td><td align="right" class='awrnc'>1.74</td><td align="right" class='awrnc'>220.04</td><td align="right" class='awrnc'>18.76</td><td align="right" class='awrnc'>30.47</td><td scope="row" class='awrnc'><a class="awr" href="#av2x55hf6b4kn">av2x55hf6b4kn</a></td>
-> Captured SQL account for   76.9% of Total CPU Time (s):	     2,748
-> Captured PL/SQL account for	 62.7% of Total CPU Time (s):		2,748

<td class='awrnc'>
    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
SQL*Plus
   1,813.6    3,062,456       0.00   66.0   18,926.4	9.6   16.1 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )
</td>

     289.7	340,333       0.00   10.5    6,170.2	4.7    5.6 35dumc2tpr9dv
Module: SQL*Plus
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

      78.7	      1      78.69    2.9      220.0   35.8   47.9 7kcm0mhxqy5q8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<tr><td align="right" class='awrc'>58.62</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>58.62</td><td align="right" class='awrc'>1.52</td><td align="right" class='awrc'>220.93</td><td align="right" class='awrc'>16.19</td><td align="right" class='awrc'>26.53</td><td scope="row" class='awrc'><a class="awr" href="#gqbp4bdj9hjjb">gqbp4bdj9hjjb</a></td>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

<td class='awrc'>
      76.6	      1      76.58    2.8      221.0   34.7   48.0 9v83s8vqfv1d6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
SQL*Plus
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
</td>

      75.3	      1      75.32    2.7      221.0   34.1   47.8 ddk08qkf81zw2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

      74.3	      1      74.30    2.7      219.9   33.8   47.9 fcfyvfu5jmtsj
<tr><td align="right" class='awrnc'>52.13</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>52.13</td><td align="right" class='awrnc'>1.35</td><td align="right" class='awrnc'>221.04</td><td align="right" class='awrnc'>14.21</td><td align="right" class='awrnc'>23.58</td><td scope="row" class='awrnc'><a class="awr" href="#5vdaktvdvngax">5vdaktvdvngax</a></td>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
<td class='awrnc'>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

SQL*Plus
      73.9	      1      73.89    2.7      220.9   33.4   46.8 1b74aw70y48yn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
</td>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
      72.2	      1      72.19    2.6      220.9   32.7   47.0 7w4ajz9mh4684
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<tr><td align="right" class='awrc'>51.41</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>51.41</td><td align="right" class='awrc'>1.33</td><td align="right" class='awrc'>219.99</td><td align="right" class='awrc'>14.19</td><td align="right" class='awrc'>23.37</td><td scope="row" class='awrc'><a class="awr" href="#857mw2dsngfyz">857mw2dsngfyz</a></td>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

      72.1	      1      72.05    2.6      220.0   32.8   46.9 38r80y2wpq2ma
<td class='awrc'>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
SQL*Plus
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
</td>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

      70.2	      1      70.17    2.6      219.9   31.9   44.7 71f07h4b84yt2
Module: SQL*Plus
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>

SQL ordered by CPU Time 		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
<tr><td align="right" class='awrnc'>43.61</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>43.61</td><td align="right" class='awrnc'>1.13</td><td align="right" class='awrnc'>220.20</td><td align="right" class='awrnc'>11.96</td><td align="right" class='awrnc'>19.81</td><td scope="row" class='awrnc'><a class="awr" href="#aqrcx9hdk5uuf">aqrcx9hdk5uuf</a></td>
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   76.9% of Total CPU Time (s):	     2,748
<td class='awrnc'>
-> Captured PL/SQL account for	 62.7% of Total CPU Time (s):		2,748

    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
SQL*Plus
---------- ------------ ---------- ------ ---------- ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
</td>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

      70.1	      1      70.11    2.6      221.0   31.7   45.0 ds7scgmy0unq5
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '171'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
<tr><td align="right" class='awrc'>41.61</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>41.61</td><td align="right" class='awrc'>1.08</td><td align="right" class='awrc'>221.78</td><td align="right" class='awrc'>11.16</td><td align="right" class='awrc'>18.76</td><td scope="row" class='awrc'><a class="awr" href="#dzjgnuh2rvhcp">dzjgnuh2rvhcp</a></td>

      70.0	      1      70.04    2.5      220.9   31.7   45.4 czhh6tvvf96yz
Module: SQL*Plus
<td class='awrc'>
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
SQL*Plus
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

      68.4	      1      68.44    2.5      220.0   31.1   44.9 2sff4nbj564pf
Module: SQL*Plus
</td>
DECLARE v_default_schema_number PLS_INTEGER := '177'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

      61.5	      1      61.52    2.2      221.0   27.8   41.0 6uuqkb35jw13t
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '3'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<tr><td align="right" class='awrnc'>41.36</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>41.36</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>220.92</td><td align="right" class='awrnc'>11.47</td><td align="right" class='awrnc'>18.72</td><td scope="row" class='awrnc'><a class="awr" href="#4638b2uwsqsp1">4638b2uwsqsp1</a></td>
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

<td class='awrnc'>
      60.3	      1      60.26    2.2      221.0   27.3   40.2 7gx6d596s0fak
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
SQL*Plus
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

</td>
      59.4	      1      59.42    2.2      220.9   26.9   40.5 16p07bywtb14q
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

      55.3	      1      55.33    2.0      220.0   25.2   38.3 bkvq4kcy2sz66
Module: SQL*Plus
<tr><td align="right" class='awrc'>41.12</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>41.12</td><td align="right" class='awrc'>1.07</td><td align="right" class='awrc'>221.00</td><td align="right" class='awrc'>11.47</td><td align="right" class='awrc'>18.61</td><td scope="row" class='awrc'><a class="awr" href="#gb9s6mvbwrkpf">gb9s6mvbwrkpf</a></td>
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<td class='awrc'>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

SQL*Plus
      55.1	      1      55.10    2.0      219.9   25.1   37.9 7rgx2dkmdsfn6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '8'; v_update_pct PLS_INTEGER :=
</td>
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
SQL ordered by CPU Time 		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - CPU Time	  as a percentage of Total DB CPU
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
<tr><td align="right" class='awrnc'>40.10</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>40.10</td><td align="right" class='awrnc'>1.04</td><td align="right" class='awrnc'>219.97</td><td align="right" class='awrnc'>11.26</td><td align="right" class='awrnc'>18.23</td><td scope="row" class='awrnc'><a class="awr" href="#gw31j4b8zwtab">gw31j4b8zwtab</a></td>
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   76.9% of Total CPU Time (s):	     2,748
-> Captured PL/SQL account for	 62.7% of Total CPU Time (s):		2,748

<td class='awrnc'>
    CPU 		  CPU per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
SQL*Plus

      51.0	      1      50.99    1.9      219.9   23.2   36.4 9xs2fh4766zzj
Module: SQL*Plus
</td>
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

      41.3	      1      41.28    1.5      220.0   18.8   30.5 av2x55hf6b4kn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '172'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
<tr><td align="right" class='awrc'>39.68</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>39.68</td><td align="right" class='awrc'>1.03</td><td align="right" class='awrc'>219.91</td><td align="right" class='awrc'>11.16</td><td align="right" class='awrc'>18.04</td><td scope="row" class='awrc'><a class="awr" href="#3bgsbnp64xsbg">3bgsbnp64xsbg</a></td>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

      35.8	      1      35.77    1.3      220.9   16.2   26.5 gqbp4bdj9hjjb
<td class='awrc'>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '58'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
SQL*Plus
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

      31.4	      1      31.41    1.1      221.0   14.2   23.6 5vdaktvdvngax
</td>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '173'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

      31.2	      1      31.22    1.1      220.0   14.2   23.4 857mw2dsngfyz
Module: SQL*Plus
</table><p />
DECLARE v_default_schema_number PLS_INTEGER := '70'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<hr align="left" width="20%" /><p />
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

			  ------------------------------------------------------


<a class="awr" href="#22">Back to SQL Statistics</a>
SQL ordered by User I/O Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
<br /><a class="awr" href="#top">Back to Top</a><p />
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   88.2% of Total User I/O Wait Time (s):	       3
<a class="awr" name="600"></a>
-> Captured PL/SQL account for	 64.2% of Total User I/O Wait Time (s):

  User I/O		  UIO per	    Elapsed
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
<h3 class="awr">SQL ordered by Gets</h3>
---------- ------------ ---------- ------ ---------- ------ ------ -------------
   3,050.8    3,062,456       0.00   79.2   18,926.4	9.6   16.1 bhdvtsvjhgvrh
<ul>
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

     345.8	340,333       0.00    9.0    6,170.2	4.7    5.6 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )
<li class="awr"> Resources reported for PL/SQL code includes the resources used by all SQL     statements called by the code. </li>

     106.1	      1     106.14    2.8      221.0   34.7   48.0 9v83s8vqfv1d6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
<li class="awr"> %Total - Buffer Gets	as a percentage of Total Buffer Gets </li>
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

     105.6	      1     105.55    2.7      221.0   34.1   47.8 ddk08qkf81zw2
Module: SQL*Plus
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>

     105.4	      1     105.43    2.7      219.9   33.8   47.9 fcfyvfu5jmtsj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
<li class="awr">Total Buffer Gets:	20,006,950</li>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

<li class="awr">Captured SQL account for   87.8% of Total</li>
     105.4	      1     105.37    2.7      220.0   35.8   47.9 7kcm0mhxqy5q8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
</ul>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

     103.7	      1     103.73    2.7      220.9   32.7   47.0 7w4ajz9mh4684
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<table border="0" class="tdiff" summary="This table displays top SQL by buffer gets"><tr><th class="awrbg" scope="col">Buffer Gets </th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">Gets     per Exec  </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col"> %CPU</th><th class="awrbg" scope="col">	%IO</th><th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

     103.3	      1     103.30    2.7      220.9   33.4   46.8 1b74aw70y48yn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
<tr><td align="right" class='awrc'>15,337,053</td><td align="right" class='awrc'>3,062,456</td><td align="right" class='awrc'>5.01</td><td align="right" class='awrc'>76.66</td><td align="right" class='awrc'>18,926.42</td><td class='awrc'>9.6</td><td class='awrc'>16.1</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

<td class='awrc'>
     103.2	      1     103.16    2.7      220.0   32.8   46.9 38r80y2wpq2ma
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
SQL*Plus
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>2,148,157</td><td align="right" class='awrnc'>340,333</td><td align="right" class='awrnc'>6.31</td><td align="right" class='awrnc'>10.74</td><td align="right" class='awrnc'>6,170.18</td><td class='awrnc'>4.7</td><td class='awrnc'>5.6</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>800,126</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>800,126.00</td><td align="right" class='awrc'>4.00</td><td align="right" class='awrc'>220.00</td><td class='awrc'>35.8</td><td class='awrc'>47.9</td><td scope="row" class='awrc'><a class="awr" href="#7kcm0mhxqy5q8">7kcm0mhxqy5q8</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>736,208</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>736,208.00</td><td align="right" class='awrnc'>3.68</td><td align="right" class='awrnc'>221.01</td><td class='awrnc'>34.7</td><td class='awrnc'>48</td><td scope="row" class='awrnc'><a class="awr" href="#9v83s8vqfv1d6">9v83s8vqfv1d6</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>709,473</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>709,473.00</td><td align="right" class='awrc'>3.55</td><td align="right" class='awrc'>220.97</td><td class='awrc'>34.1</td><td class='awrc'>47.8</td><td scope="row" class='awrc'><a class="awr" href="#ddk08qkf81zw2">ddk08qkf81zw2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>699,935</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>699,935.00</td><td align="right" class='awrnc'>3.50</td><td align="right" class='awrnc'>220.93</td><td class='awrnc'>33.4</td><td class='awrnc'>46.8</td><td scope="row" class='awrnc'><a class="awr" href="#1b74aw70y48yn">1b74aw70y48yn</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>696,304</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>696,304.00</td><td align="right" class='awrc'>3.48</td><td align="right" class='awrc'>219.93</td><td class='awrc'>31.9</td><td class='awrc'>44.7</td><td scope="row" class='awrc'><a class="awr" href="#71f07h4b84yt2">71f07h4b84yt2</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>689,514</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>689,514.00</td><td align="right" class='awrnc'>3.45</td><td align="right" class='awrnc'>219.93</td><td class='awrnc'>33.8</td><td class='awrnc'>47.9</td><td scope="row" class='awrnc'><a class="awr" href="#fcfyvfu5jmtsj">fcfyvfu5jmtsj</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>657,589</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>657,589.00</td><td align="right" class='awrc'>3.29</td><td align="right" class='awrc'>220.96</td><td class='awrc'>31.7</td><td class='awrc'>45</td><td scope="row" class='awrc'><a class="awr" href="#ds7scgmy0unq5">ds7scgmy0unq5</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>655,710</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>655,710.00</td><td align="right" class='awrnc'>3.28</td><td align="right" class='awrnc'>220.93</td><td class='awrnc'>32.7</td><td class='awrnc'>47</td><td scope="row" class='awrnc'><a class="awr" href="#7w4ajz9mh4684">7w4ajz9mh4684</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>654,914</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>654,914.00</td><td align="right" class='awrc'>3.27</td><td align="right" class='awrc'>219.98</td><td class='awrc'>32.8</td><td class='awrc'>46.9</td><td scope="row" class='awrc'><a class="awr" href="#38r80y2wpq2ma">38r80y2wpq2ma</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>636,335</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>636,335.00</td><td align="right" class='awrnc'>3.18</td><td align="right" class='awrnc'>220.93</td><td class='awrnc'>31.7</td><td class='awrnc'>45.4</td><td scope="row" class='awrnc'><a class="awr" href="#czhh6tvvf96yz">czhh6tvvf96yz</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>633,940</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>633,940.00</td><td align="right" class='awrc'>3.17</td><td align="right" class='awrc'>219.95</td><td class='awrc'>31.1</td><td class='awrc'>44.9</td><td scope="row" class='awrc'><a class="awr" href="#2sff4nbj564pf">2sff4nbj564pf</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>575,407</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>575,407.00</td><td align="right" class='awrnc'>2.88</td><td align="right" class='awrnc'>221.03</td><td class='awrnc'>27.8</td><td class='awrnc'>41</td><td scope="row" class='awrnc'><a class="awr" href="#6uuqkb35jw13t">6uuqkb35jw13t</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>557,368</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>557,368.00</td><td align="right" class='awrc'>2.79</td><td align="right" class='awrc'>220.95</td><td class='awrc'>27.3</td><td class='awrc'>40.2</td><td scope="row" class='awrc'><a class="awr" href="#7gx6d596s0fak">7gx6d596s0fak</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
     100.2	      1     100.24    2.6      220.9   31.7   45.4 czhh6tvvf96yz
<tr><td align="right" class='awrnc'>541,193</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>541,193.00</td><td align="right" class='awrnc'>2.71</td><td align="right" class='awrnc'>220.93</td><td class='awrnc'>26.9</td><td class='awrnc'>40.5</td><td scope="row" class='awrnc'><a class="awr" href="#16p07bywtb14q">16p07bywtb14q</a></td>
Module: SQL*Plus

SQL ordered by User I/O Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<td class='awrnc'>
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
SQL*Plus
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
</td>
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   88.2% of Total User I/O Wait Time (s):	       3
-> Captured PL/SQL account for	 64.2% of Total User I/O Wait Time (s):
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>

  User I/O		  UIO per	    Elapsed
<tr><td align="right" class='awrc'>505,727</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>505,727.00</td><td align="right" class='awrc'>2.53</td><td align="right" class='awrc'>219.96</td><td class='awrc'>25.2</td><td class='awrc'>38.3</td><td scope="row" class='awrc'><a class="awr" href="#bkvq4kcy2sz66">bkvq4kcy2sz66</a></td>
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
<td class='awrc'>
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
SQL*Plus
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

</td>
      99.5	      1      99.51    2.6      221.0   31.7   45.0 ds7scgmy0unq5
Module: SQL*Plus
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
DECLARE v_default_schema_number PLS_INTEGER := '171'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<tr><td align="right" class='awrnc'>504,273</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>504,273.00</td><td align="right" class='awrnc'>2.52</td><td align="right" class='awrnc'>219.93</td><td class='awrnc'>25.1</td><td class='awrnc'>37.9</td><td scope="row" class='awrnc'><a class="awr" href="#7rgx2dkmdsfn6">7rgx2dkmdsfn6</a></td>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

      98.7	      1      98.66    2.6      220.0   31.1   44.9 2sff4nbj564pf
<td class='awrnc'>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '177'; v_update_pct PLS_INTEGER :
SQL*Plus
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
</td>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

      98.2	      1      98.20    2.5      219.9   31.9   44.7 71f07h4b84yt2
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<tr><td align="right" class='awrc'>452,296</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>452,296.00</td><td align="right" class='awrc'>2.26</td><td align="right" class='awrc'>219.94</td><td class='awrc'>23.2</td><td class='awrc'>36.4</td><td scope="row" class='awrc'><a class="awr" href="#9xs2fh4766zzj">9xs2fh4766zzj</a></td>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

<td class='awrc'>
      90.6	      1      90.56    2.4      221.0   27.8   41.0 6uuqkb35jw13t
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '3'; v_update_pct PLS_INTEGER :=
SQL*Plus
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
</td>
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

      89.4	      1      89.42    2.3      220.9   26.9   40.5 16p07bywtb14q
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<tr><td align="right" class='awrnc'>349,446</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>349,446.00</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>220.04</td><td class='awrnc'>18.8</td><td class='awrnc'>30.5</td><td scope="row" class='awrnc'><a class="awr" href="#av2x55hf6b4kn">av2x55hf6b4kn</a></td>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

<td class='awrnc'>
      88.8	      1      88.81    2.3      221.0   27.3   40.2 7gx6d596s0fak
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
SQL*Plus
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
</td>
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

      84.3	      1      84.29    2.2      220.0   25.2   38.3 bkvq4kcy2sz66
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<tr><td align="right" class='awrc'>298,482</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>298,482.00</td><td align="right" class='awrc'>1.49</td><td align="right" class='awrc'>220.93</td><td class='awrc'>16.2</td><td class='awrc'>26.5</td><td scope="row" class='awrc'><a class="awr" href="#gqbp4bdj9hjjb">gqbp4bdj9hjjb</a></td>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

      83.3	      1      83.31    2.2      219.9   25.1   37.9 7rgx2dkmdsfn6
<td class='awrc'>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '8'; v_update_pct PLS_INTEGER :=
SQL*Plus
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
</td>
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

SQL ordered by User I/O Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
<tr><td align="right" class='awrnc'>252,508</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>252,508.00</td><td align="right" class='awrnc'>1.26</td><td align="right" class='awrnc'>221.04</td><td class='awrnc'>14.2</td><td class='awrnc'>23.6</td><td scope="row" class='awrnc'><a class="awr" href="#5vdaktvdvngax">5vdaktvdvngax</a></td>
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   88.2% of Total User I/O Wait Time (s):	       3
<td class='awrnc'>
-> Captured PL/SQL account for	 64.2% of Total User I/O Wait Time (s):

  User I/O		  UIO per	    Elapsed
SQL*Plus
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
</td>

      80.0	      1      80.02    2.1      219.9   23.2   36.4 9xs2fh4766zzj
Module: SQL*Plus
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
<tr><td align="right" class='awrc'>248,490</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>248,490.00</td><td align="right" class='awrc'>1.24</td><td align="right" class='awrc'>219.99</td><td class='awrc'>14.2</td><td class='awrc'>23.4</td><td scope="row" class='awrc'><a class="awr" href="#857mw2dsngfyz">857mw2dsngfyz</a></td>

      67.1	      1      67.06    1.7      220.0   18.8   30.5 av2x55hf6b4kn
Module: SQL*Plus
<td class='awrc'>
DECLARE v_default_schema_number PLS_INTEGER := '172'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
SQL*Plus
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

</td>
      58.6	      1      58.62    1.5      220.9   16.2   26.5 gqbp4bdj9hjjb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '58'; v_update_pct PLS_INTEGER :=
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

<tr><td align="right" class='awrnc'>206,300</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>206,300.00</td><td align="right" class='awrnc'>1.03</td><td align="right" class='awrnc'>220.20</td><td class='awrnc'>12</td><td class='awrnc'>19.8</td><td scope="row" class='awrnc'><a class="awr" href="#aqrcx9hdk5uuf">aqrcx9hdk5uuf</a></td>
      52.1	      1      52.13    1.4      221.0   14.2   23.6 5vdaktvdvngax
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '173'; v_update_pct PLS_INTEGER :
<td class='awrnc'>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
SQL*Plus
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

      51.4	      1      51.41    1.3      220.0   14.2   23.4 857mw2dsngfyz
</td>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '70'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
</table><p />

      43.6	      1      43.61    1.1      220.2   12.0   19.8 aqrcx9hdk5uuf
Module: SQL*Plus
<hr align="left" width="20%" /><p />
DECLARE v_default_schema_number PLS_INTEGER := '180'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
<a class="awr" href="#22">Back to SQL Statistics</a>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

      41.6	      1      41.61    1.1      221.8   11.2   18.8 dzjgnuh2rvhcp
<br /><a class="awr" href="#top">Back to Top</a><p />
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '181'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
<a class="awr" name="700"></a>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
<h3 class="awr">SQL ordered by Reads</h3>

      41.4	      1      41.36    1.1      220.9   11.5   18.7 4638b2uwsqsp1
Module: SQL*Plus
<ul>
DECLARE v_default_schema_number PLS_INTEGER := '26'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<li class="awr"> %Total - Physical Reads as a percentage of Total Disk Reads </li>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

      41.1	      1      41.12    1.1      221.0   11.5   18.6 gb9s6mvbwrkpf
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=

<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
SQL ordered by User I/O Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<li class="awr">Total Disk Reads:      10,818,025</li>
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - User I/O Time as a percentage of Total User I/O Wait time
<li class="awr">Captured SQL account for   89.5% of Total</li>
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Captured SQL account for   88.2% of Total User I/O Wait Time (s):	       3
</ul>
-> Captured PL/SQL account for	 64.2% of Total User I/O Wait Time (s):

  User I/O		  UIO per	    Elapsed
<table border="0" class="tdiff" summary="This table displays top SQL by physical reads"><tr><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">Reads	  per Exec  </th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed  Time (s)</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
  Time (s)  Executions	  Exec (s) %Total   Time (s)   %CPU    %IO    SQL Id
---------- ------------ ---------- ------ ---------- ------ ------ -------------
<tr><td align="right" class='awrc'>8,718,740</td><td align="right" class='awrc'>3,062,456</td><td align="right" class='awrc'>2.85</td><td align="right" class='awrc'>80.59</td><td align="right" class='awrc'>18,926.42</td><td align="right" class='awrc'>9.58</td><td align="right" class='awrc'>16.12</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<td class='awrc'>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

      40.1	      1      40.10    1.0      220.0   11.3   18.2 gw31j4b8zwtab
SQL*Plus
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '23'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
</td>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
      39.7	      1      39.68    1.0      219.9   11.2   18.0 3bgsbnp64xsbg
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '10'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<tr><td align="right" class='awrnc'>962,854</td><td align="right" class='awrnc'>340,333</td><td align="right" class='awrnc'>2.83</td><td align="right" class='awrnc'>8.90</td><td align="right" class='awrnc'>6,170.18</td><td align="right" class='awrnc'>4.69</td><td align="right" class='awrnc'>5.60</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

<td class='awrnc'>
			  ------------------------------------------------------


SQL*Plus
SQL ordered by Gets			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
</td>
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
-> Total Buffer Gets:	   20,006,950
-> Captured SQL account for   87.8% of Total

     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
<tr><td align="right" class='awrc'>359,510</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>359,510.00</td><td align="right" class='awrc'>3.32</td><td align="right" class='awrc'>220.00</td><td align="right" class='awrc'>35.77</td><td align="right" class='awrc'>47.90</td><td scope="row" class='awrc'><a class="awr" href="#7kcm0mhxqy5q8">7kcm0mhxqy5q8</a></td>
----------- ----------- ------------ ------ ---------- ----- ----- -------------
 15,337,053   3,062,456 	 5.0   76.7   18,926.4	 9.6  16.1 bhdvtsvjhgvrh
<td class='awrc'>
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

SQL*Plus
  2,148,157	340,333 	 6.3   10.7    6,170.2	 4.7   5.6 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
</td>
< :B1 )

    800,126	      1    800,126.0	4.0	 220.0	35.8  47.9 7kcm0mhxqy5q8
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<tr><td align="right" class='awrnc'>356,686</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>356,686.00</td><td align="right" class='awrnc'>3.30</td><td align="right" class='awrnc'>221.01</td><td align="right" class='awrnc'>34.65</td><td align="right" class='awrnc'>48.02</td><td scope="row" class='awrnc'><a class="awr" href="#9v83s8vqfv1d6">9v83s8vqfv1d6</a></td>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

<td class='awrnc'>
    736,208	      1    736,208.0	3.7	 221.0	34.7	48 9v83s8vqfv1d6
SQL*Plus
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
</td>
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

<tr><td align="right" class='awrc'>355,268</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>355,268.00</td><td align="right" class='awrc'>3.28</td><td align="right" class='awrc'>220.97</td><td align="right" class='awrc'>34.09</td><td align="right" class='awrc'>47.77</td><td scope="row" class='awrc'><a class="awr" href="#ddk08qkf81zw2">ddk08qkf81zw2</a></td>
    709,473	      1    709,473.0	3.5	 221.0	34.1  47.8 ddk08qkf81zw2
Module: SQL*Plus
<td class='awrc'>
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
SQL*Plus
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

</td>
    699,935	      1    699,935.0	3.5	 220.9	33.4  46.8 1b74aw70y48yn
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<tr><td align="right" class='awrnc'>348,698</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>348,698.00</td><td align="right" class='awrnc'>3.22</td><td align="right" class='awrnc'>219.93</td><td align="right" class='awrnc'>33.79</td><td align="right" class='awrnc'>47.94</td><td scope="row" class='awrnc'><a class="awr" href="#fcfyvfu5jmtsj">fcfyvfu5jmtsj</a></td>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    696,304	      1    696,304.0	3.5	 219.9	31.9  44.7 71f07h4b84yt2
<td class='awrnc'>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
SQL*Plus
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
</td>

    689,514	      1    689,514.0	3.4	 219.9	33.8  47.9 fcfyvfu5jmtsj
Module: SQL*Plus
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

    657,589	      1    657,589.0	3.3	 221.0	31.7	45 ds7scgmy0unq5
<tr><td align="right" class='awrc'>342,604</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>342,604.00</td><td align="right" class='awrc'>3.17</td><td align="right" class='awrc'>220.93</td><td align="right" class='awrc'>33.45</td><td align="right" class='awrc'>46.76</td><td scope="row" class='awrc'><a class="awr" href="#1b74aw70y48yn">1b74aw70y48yn</a></td>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '171'; v_update_pct PLS_INTEGER :
<td class='awrc'>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
SQL*Plus
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

    655,710	      1    655,710.0	3.3	 220.9	32.7	47 7w4ajz9mh4684
</td>
Module: SQL*Plus

SQL ordered by Gets			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
<tr><td align="right" class='awrnc'>340,739</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>340,739.00</td><td align="right" class='awrnc'>3.15</td><td align="right" class='awrnc'>220.93</td><td align="right" class='awrnc'>32.68</td><td align="right" class='awrnc'>46.95</td><td scope="row" class='awrnc'><a class="awr" href="#7w4ajz9mh4684">7w4ajz9mh4684</a></td>
-> Total Buffer Gets:	   20,006,950
-> Captured SQL account for   87.8% of Total

<td class='awrnc'>
     Buffer		    Gets	      Elapsed
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
SQL*Plus
----------- ----------- ------------ ------ ---------- ----- ----- -------------
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
</td>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

<tr><td align="right" class='awrc'>338,924</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>338,924.00</td><td align="right" class='awrc'>3.13</td><td align="right" class='awrc'>219.98</td><td align="right" class='awrc'>32.76</td><td align="right" class='awrc'>46.89</td><td scope="row" class='awrc'><a class="awr" href="#38r80y2wpq2ma">38r80y2wpq2ma</a></td>
    654,914	      1    654,914.0	3.3	 220.0	32.8  46.9 38r80y2wpq2ma
Module: SQL*Plus
<td class='awrc'>
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
SQL*Plus
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
</td>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
    636,335	      1    636,335.0	3.2	 220.9	31.7  45.4 czhh6tvvf96yz
Module: SQL*Plus
<tr><td align="right" class='awrnc'>329,515</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>329,515.00</td><td align="right" class='awrnc'>3.05</td><td align="right" class='awrnc'>220.96</td><td align="right" class='awrnc'>31.73</td><td align="right" class='awrnc'>45.04</td><td scope="row" class='awrnc'><a class="awr" href="#ds7scgmy0unq5">ds7scgmy0unq5</a></td>
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<td class='awrnc'>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
SQL*Plus
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

</td>
    633,940	      1    633,940.0	3.2	 220.0	31.1  44.9 2sff4nbj564pf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '177'; v_update_pct PLS_INTEGER :
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

<tr><td align="right" class='awrc'>327,622</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>327,622.00</td><td align="right" class='awrc'>3.03</td><td align="right" class='awrc'>220.93</td><td align="right" class='awrc'>31.70</td><td align="right" class='awrc'>45.37</td><td scope="row" class='awrc'><a class="awr" href="#czhh6tvvf96yz">czhh6tvvf96yz</a></td>
    575,407	      1    575,407.0	2.9	 221.0	27.8	41 6uuqkb35jw13t
Module: SQL*Plus
<td class='awrc'>
DECLARE v_default_schema_number PLS_INTEGER := '3'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
SQL*Plus
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

</td>
    557,368	      1    557,368.0	2.8	 221.0	27.3  40.2 7gx6d596s0fak
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    541,193	      1    541,193.0	2.7	 220.9	26.9  40.5 16p07bywtb14q
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>

    505,727	      1    505,727.0	2.5	 220.0	25.2  38.3 bkvq4kcy2sz66
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<tr><td align="right" class='awrnc'>323,453</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>323,453.00</td><td align="right" class='awrnc'>2.99</td><td align="right" class='awrnc'>219.95</td><td align="right" class='awrnc'>31.11</td><td align="right" class='awrnc'>44.86</td><td scope="row" class='awrnc'><a class="awr" href="#2sff4nbj564pf">2sff4nbj564pf</a></td>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    504,273	      1    504,273.0	2.5	 219.9	25.1  37.9 7rgx2dkmdsfn6
<td class='awrnc'>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '8'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
SQL*Plus
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

</td>
SQL ordered by Gets			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Resources reported for PL/SQL code includes the resources used by all SQL
   statements called by the code.
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
-> %Total - Buffer Gets   as a percentage of Total Buffer Gets
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Buffer Gets:	   20,006,950
<tr><td align="right" class='awrc'>321,693</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>321,693.00</td><td align="right" class='awrc'>2.97</td><td align="right" class='awrc'>219.93</td><td align="right" class='awrc'>31.91</td><td align="right" class='awrc'>44.65</td><td scope="row" class='awrc'><a class="awr" href="#71f07h4b84yt2">71f07h4b84yt2</a></td>
-> Captured SQL account for   87.8% of Total

     Buffer		    Gets	      Elapsed
<td class='awrc'>
      Gets   Executions   per Exec   %Total   Time (s)	%CPU   %IO    SQL Id
----------- ----------- ------------ ------ ---------- ----- ----- -------------

SQL*Plus
    452,296	      1    452,296.0	2.3	 219.9	23.2  36.4 9xs2fh4766zzj
Module: SQL*Plus
</td>
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
<tr><td align="right" class='awrnc'>288,594</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>288,594.00</td><td align="right" class='awrnc'>2.67</td><td align="right" class='awrnc'>221.03</td><td align="right" class='awrnc'>27.83</td><td align="right" class='awrnc'>40.97</td><td scope="row" class='awrnc'><a class="awr" href="#6uuqkb35jw13t">6uuqkb35jw13t</a></td>

    349,446	      1    349,446.0	1.7	 220.0	18.8  30.5 av2x55hf6b4kn
Module: SQL*Plus
<td class='awrnc'>
DECLARE v_default_schema_number PLS_INTEGER := '172'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
SQL*Plus
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

</td>
    298,482	      1    298,482.0	1.5	 220.9	16.2  26.5 gqbp4bdj9hjjb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '58'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    252,508	      1    252,508.0	1.3	 221.0	14.2  23.6 5vdaktvdvngax
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '173'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

    248,490	      1    248,490.0	1.2	 220.0	14.2  23.4 857mw2dsngfyz
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '70'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    206,300	      1    206,300.0	1.0	 220.2	  12  19.8 aqrcx9hdk5uuf
Module: SQL*Plus
<tr><td align="right" class='awrc'>282,470</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>282,470.00</td><td align="right" class='awrc'>2.61</td><td align="right" class='awrc'>220.95</td><td align="right" class='awrc'>27.27</td><td align="right" class='awrc'>40.19</td><td scope="row" class='awrc'><a class="awr" href="#7gx6d596s0fak">7gx6d596s0fak</a></td>
DECLARE v_default_schema_number PLS_INTEGER := '180'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

<td class='awrc'>
			  ------------------------------------------------------


SQL ordered by Reads			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
SQL*Plus
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
</td>
-> Total Disk Reads:	  10,818,025
-> Captured SQL account for   89.5% of Total

   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
----------- ----------- ---------- ------ ---------- ------ ------ -------------
  8,718,740   3,062,456        2.8   80.6   18,926.4	9.6   16.1 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )
<tr><td align="right" class='awrnc'>279,708</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>279,708.00</td><td align="right" class='awrnc'>2.59</td><td align="right" class='awrnc'>220.93</td><td align="right" class='awrnc'>26.89</td><td align="right" class='awrnc'>40.47</td><td scope="row" class='awrnc'><a class="awr" href="#16p07bywtb14q">16p07bywtb14q</a></td>

    962,854	340,333        2.8    8.9    6,170.2	4.7    5.6 35dumc2tpr9dv
Module: SQL*Plus
<td class='awrnc'>
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

SQL*Plus
    359,510	      1  359,510.0    3.3      220.0   35.8   47.9 7kcm0mhxqy5q8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
</td>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>

    356,686	      1  356,686.0    3.3      221.0   34.7   48.0 9v83s8vqfv1d6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<tr><td align="right" class='awrc'>260,754</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>260,754.00</td><td align="right" class='awrc'>2.41</td><td align="right" class='awrc'>219.96</td><td align="right" class='awrc'>25.16</td><td align="right" class='awrc'>38.32</td><td scope="row" class='awrc'><a class="awr" href="#bkvq4kcy2sz66">bkvq4kcy2sz66</a></td>
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

<td class='awrc'>
    355,268	      1  355,268.0    3.3      221.0   34.1   47.8 ddk08qkf81zw2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
SQL*Plus
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
</td>

    348,698	      1  348,698.0    3.2      219.9   33.8   47.9 fcfyvfu5jmtsj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

    342,604	      1  342,604.0    3.2      220.9   33.4   46.8 1b74aw70y48yn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    340,739	      1  340,739.0    3.1      220.9   32.7   47.0 7w4ajz9mh4684
<tr><td align="right" class='awrnc'>257,761</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>257,761.00</td><td align="right" class='awrnc'>2.38</td><td align="right" class='awrnc'>219.93</td><td align="right" class='awrnc'>25.05</td><td align="right" class='awrnc'>37.88</td><td scope="row" class='awrnc'><a class="awr" href="#7rgx2dkmdsfn6">7rgx2dkmdsfn6</a></td>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<td class='awrnc'>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
SQL*Plus

    338,924	      1  338,924.0    3.1      220.0   32.8   46.9 38r80y2wpq2ma
Module: SQL*Plus
</td>
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    329,515	      1  329,515.0    3.0      221.0   31.7   45.0 ds7scgmy0unq5
Module: SQL*Plus

<tr><td align="right" class='awrc'>241,162</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>241,162.00</td><td align="right" class='awrc'>2.23</td><td align="right" class='awrc'>219.94</td><td align="right" class='awrc'>23.18</td><td align="right" class='awrc'>36.38</td><td scope="row" class='awrc'><a class="awr" href="#9xs2fh4766zzj">9xs2fh4766zzj</a></td>
SQL ordered by Reads			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
<td class='awrc'>
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Disk Reads:	  10,818,025
-> Captured SQL account for   89.5% of Total
SQL*Plus

   Physical		 Reads		    Elapsed
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '171'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

    327,622	      1  327,622.0    3.0      220.9   31.7   45.4 czhh6tvvf96yz
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
</td>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    323,453	      1  323,453.0    3.0      220.0   31.1   44.9 2sff4nbj564pf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '177'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

    321,693	      1  321,693.0    3.0      219.9   31.9   44.7 71f07h4b84yt2
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    288,594	      1  288,594.0    2.7      221.0   27.8   41.0 6uuqkb35jw13t
Module: SQL*Plus
<tr><td align="right" class='awrnc'>193,628</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>193,628.00</td><td align="right" class='awrnc'>1.79</td><td align="right" class='awrnc'>220.04</td><td align="right" class='awrnc'>18.76</td><td align="right" class='awrnc'>30.47</td><td scope="row" class='awrnc'><a class="awr" href="#av2x55hf6b4kn">av2x55hf6b4kn</a></td>
DECLARE v_default_schema_number PLS_INTEGER := '3'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
<td class='awrnc'>
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    282,470	      1  282,470.0    2.6      221.0   27.3   40.2 7gx6d596s0fak
SQL*Plus
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
</td>
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
    279,708	      1  279,708.0    2.6      220.9   26.9   40.5 16p07bywtb14q
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<tr><td align="right" class='awrc'>166,691</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>166,691.00</td><td align="right" class='awrc'>1.54</td><td align="right" class='awrc'>220.93</td><td align="right" class='awrc'>16.19</td><td align="right" class='awrc'>26.53</td><td scope="row" class='awrc'><a class="awr" href="#gqbp4bdj9hjjb">gqbp4bdj9hjjb</a></td>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

<td class='awrc'>
    260,754	      1  260,754.0    2.4      220.0   25.2   38.3 bkvq4kcy2sz66
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
SQL*Plus
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
</td>

    257,761	      1  257,761.0    2.4      219.9   25.1   37.9 7rgx2dkmdsfn6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '8'; v_update_pct PLS_INTEGER :=
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

SQL ordered by Reads			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<tr><td align="right" class='awrnc'>145,445</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>145,445.00</td><td align="right" class='awrnc'>1.34</td><td align="right" class='awrnc'>221.04</td><td align="right" class='awrnc'>14.21</td><td align="right" class='awrnc'>23.58</td><td scope="row" class='awrnc'><a class="awr" href="#5vdaktvdvngax">5vdaktvdvngax</a></td>
-> %Total - Physical Reads as a percentage of Total Disk Reads
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
<td class='awrnc'>
-> Total Disk Reads:	  10,818,025
-> Captured SQL account for   89.5% of Total

   Physical		 Reads		    Elapsed
SQL*Plus
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
----------- ----------- ---------- ------ ---------- ------ ------ -------------

</td>
    241,162	      1  241,162.0    2.2      219.9   23.2   36.4 9xs2fh4766zzj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    193,628	      1  193,628.0    1.8      220.0   18.8   30.5 av2x55hf6b4kn
Module: SQL*Plus
<tr><td align="right" class='awrc'>142,585</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>142,585.00</td><td align="right" class='awrc'>1.32</td><td align="right" class='awrc'>219.99</td><td align="right" class='awrc'>14.19</td><td align="right" class='awrc'>23.37</td><td scope="row" class='awrc'><a class="awr" href="#857mw2dsngfyz">857mw2dsngfyz</a></td>
DECLARE v_default_schema_number PLS_INTEGER := '172'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
<td class='awrc'>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

SQL*Plus
    166,691	      1  166,691.0    1.5      220.9   16.2   26.5 gqbp4bdj9hjjb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '58'; v_update_pct PLS_INTEGER :=
</td>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
    145,445	      1  145,445.0    1.3      221.0   14.2   23.6 5vdaktvdvngax
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '173'; v_update_pct PLS_INTEGER :
<tr><td align="right" class='awrnc'>120,396</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>120,396.00</td><td align="right" class='awrnc'>1.11</td><td align="right" class='awrnc'>220.20</td><td align="right" class='awrnc'>11.96</td><td align="right" class='awrnc'>19.81</td><td scope="row" class='awrnc'><a class="awr" href="#aqrcx9hdk5uuf">aqrcx9hdk5uuf</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>112,991</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>112,991.00</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>221.78</td><td align="right" class='awrc'>11.16</td><td align="right" class='awrc'>18.76</td><td scope="row" class='awrc'><a class="awr" href="#dzjgnuh2rvhcp">dzjgnuh2rvhcp</a></td>
<td class='awrc'>
SQL*Plus
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
</td>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

<tr><td align="right" class='awrnc'>109,675</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>109,675.00</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>221.00</td><td align="right" class='awrnc'>11.47</td><td align="right" class='awrnc'>18.61</td><td scope="row" class='awrnc'><a class="awr" href="#gb9s6mvbwrkpf">gb9s6mvbwrkpf</a></td>
    142,585	      1  142,585.0    1.3      220.0   14.2   23.4 857mw2dsngfyz
Module: SQL*Plus
<td class='awrnc'>
DECLARE v_default_schema_number PLS_INTEGER := '70'; v_update_pct PLS_INTEGER :=
SQL*Plus
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
</td>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>

    120,396	      1  120,396.0    1.1      220.2   12.0   19.8 aqrcx9hdk5uuf
Module: SQL*Plus
<tr><td align="right" class='awrc'>109,167</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>109,167.00</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>220.92</td><td align="right" class='awrc'>11.47</td><td align="right" class='awrc'>18.72</td><td scope="row" class='awrc'><a class="awr" href="#4638b2uwsqsp1">4638b2uwsqsp1</a></td>
<td class='awrc'>
DECLARE v_default_schema_number PLS_INTEGER := '180'; v_update_pct PLS_INTEGER :
SQL*Plus
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
</td>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

</table><p />
    112,991	      1  112,991.0    1.0      221.8   11.2   18.8 dzjgnuh2rvhcp
Module: SQL*Plus
<hr align="left" width="20%" /><p />
DECLARE v_default_schema_number PLS_INTEGER := '181'; v_update_pct PLS_INTEGER :
<a class="awr" href="#22">Back to SQL Statistics</a>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
<br /><a class="awr" href="#top">Back to Top</a><p />
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
<a class="awr" name="740"></a>

    109,675	      1  109,675.0    1.0      221.0   11.5   18.6 gb9s6mvbwrkpf
<h3 class="awr">SQL ordered by Physical Reads (UnOptimized)</h3>
Module: SQL*Plus
<ul>
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<li class="awr"> UnOptimized Read Reqs = Physical Read Reqs -	    (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile) </li>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<li class="awr"> %Opt	- Optimized Reads as percentage of SQL Read Requests </li>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

<li class="awr"> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs</li>
    109,167	      1  109,167.0    1.0      220.9   11.5   18.7 4638b2uwsqsp1
Module: SQL*Plus
<li class="awr">Total Physical Read Requests:	   10,815,881</li>
DECLARE v_default_schema_number PLS_INTEGER := '26'; v_update_pct PLS_INTEGER :=

<li class="awr">Captured SQL account for    0.2% of Total</li>
SQL ordered by Reads			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> %Total - Physical Reads as a percentage of Total Disk Reads
<li class="awr">Total UnOptimized Read Requests:      10,815,881</li>
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
<li class="awr">Captured SQL account for    0.2% of Total</li>
-> Total Disk Reads:	  10,818,025
-> Captured SQL account for   89.5% of Total
<li class="awr">Total Optimized Read Requests:		     1</li>

   Physical		 Reads		    Elapsed
<li class="awr">Captured SQL account for    0.0% of Total</li>
      Reads  Executions per Exec   %Total   Time (s)   %CPU    %IO    SQL Id
</ul>
----------- ----------- ---------- ------ ---------- ------ ------ -------------
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<table border="0" class="tdiff" summary="This table displays top SQL by unoptimized read requests"><tr><th class="awrbg" scope="col">UnOptimized Read Reqs</th><th class="awrbg" scope="col">Physical  Read Reqs</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">UnOptimized Reqs per Exec</th><th class="awrbg" scope="col">%Opt</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

			  ------------------------------------------------------
<tr><td align="right" class='awrc'>359,510</td><td align="right" class='awrc'>359,510</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>359,510.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>3.32</td><td scope="row" class='awrc'><a class="awr" href="#7kcm0mhxqy5q8">7kcm0mhxqy5q8</a></td>


<td class='awrc'>
SQL ordered by Physical Reads (UnOptimized)DB/Inst: P30SDB/p30sdb2  Snaps: 47-
-> UnOptimized Read Reqs = Physical Read Reqs -
SQL*Plus
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
</td>
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
-> Total Physical Read Requests:      10,815,881
-> Captured SQL account for    0.2% of Total
-> Total UnOptimized Read Requests:	 10,815,881
<tr><td align="right" class='awrnc'>356,686</td><td align="right" class='awrnc'>356,686</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>356,686.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3.30</td><td scope="row" class='awrnc'><a class="awr" href="#9v83s8vqfv1d6">9v83s8vqfv1d6</a></td>
-> Captured SQL account for    0.2% of Total
<td class='awrnc'>
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total
SQL*Plus

UnOptimized   Physical		    UnOptimized
</td>
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
----------- ----------- ---------- ------------ ------ ------ -------------
    359,510	359,510 	 1    359,510.0    0.0	  3.3 7kcm0mhxqy5q8
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
<tr><td align="right" class='awrc'>355,268</td><td align="right" class='awrc'>355,268</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>355,268.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>3.28</td><td scope="row" class='awrc'><a class="awr" href="#ddk08qkf81zw2">ddk08qkf81zw2</a></td>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<td class='awrc'>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

SQL*Plus
    356,686	356,686 	 1    356,686.0    0.0	  3.3 9v83s8vqfv1d6
Module: SQL*Plus
</td>
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
<tr><td align="right" class='awrnc'>348,698</td><td align="right" class='awrnc'>348,698</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>348,698.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3.22</td><td scope="row" class='awrnc'><a class="awr" href="#fcfyvfu5jmtsj">fcfyvfu5jmtsj</a></td>

    355,268	355,268 	 1    355,268.0    0.0	  3.3 ddk08qkf81zw2
<td class='awrnc'>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
SQL*Plus
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
</td>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

<tr><td align="right" class='awrc'>342,604</td><td align="right" class='awrc'>342,604</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>342,604.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>3.17</td><td scope="row" class='awrc'><a class="awr" href="#1b74aw70y48yn">1b74aw70y48yn</a></td>
    348,698	348,698 	 1    348,698.0    0.0	  3.2 fcfyvfu5jmtsj
Module: SQL*Plus
<td class='awrc'>
DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
SQL*Plus
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
</td>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>

    342,604	342,604 	 1    342,604.0    0.0	  3.2 1b74aw70y48yn
Module: SQL*Plus
<tr><td align="right" class='awrnc'>340,739</td><td align="right" class='awrnc'>340,739</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>340,739.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3.15</td><td scope="row" class='awrnc'><a class="awr" href="#7w4ajz9mh4684">7w4ajz9mh4684</a></td>
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<td class='awrnc'>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
SQL*Plus
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
</td>

    340,739	340,739 	 1    340,739.0    0.0	  3.2 7w4ajz9mh4684
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
<tr><td align="right" class='awrc'>338,924</td><td align="right" class='awrc'>338,924</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>338,924.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>3.13</td><td scope="row" class='awrc'><a class="awr" href="#38r80y2wpq2ma">38r80y2wpq2ma</a></td>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<td class='awrc'>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
SQL*Plus

    338,924	338,924 	 1    338,924.0    0.0	  3.1 38r80y2wpq2ma
</td>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<tr><td align="right" class='awrnc'>329,515</td><td align="right" class='awrnc'>329,515</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>329,515.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3.05</td><td scope="row" class='awrnc'><a class="awr" href="#ds7scgmy0unq5">ds7scgmy0unq5</a></td>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
<td class='awrnc'>

    329,515	329,515 	 1    329,515.0    0.0	  3.0 ds7scgmy0unq5
SQL*Plus
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '171'; v_update_pct PLS_INTEGER :
</td>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

<tr><td align="right" class='awrc'>327,622</td><td align="right" class='awrc'>327,622</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>327,622.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>3.03</td><td scope="row" class='awrc'><a class="awr" href="#czhh6tvvf96yz">czhh6tvvf96yz</a></td>
    327,622	327,622 	 1    327,622.0    0.0	  3.0 czhh6tvvf96yz
Module: SQL*Plus
<td class='awrc'>
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
SQL*Plus
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

</td>
SQL ordered by Physical Reads (UnOptimized)DB/Inst: P30SDB/p30sdb2  Snaps: 47-
-> UnOptimized Read Reqs = Physical Read Reqs -
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
<tr><td align="right" class='awrnc'>323,453</td><td align="right" class='awrnc'>323,453</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>323,453.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2.99</td><td scope="row" class='awrnc'><a class="awr" href="#2sff4nbj564pf">2sff4nbj564pf</a></td>
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
-> Total Physical Read Requests:      10,815,881
<td class='awrnc'>
-> Captured SQL account for    0.2% of Total
SQL*Plus
-> Total UnOptimized Read Requests:	 10,815,881
</td>
-> Captured SQL account for    0.2% of Total
-> Total Optimized Read Requests:		1
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
-> Captured SQL account for    0.0% of Total

UnOptimized   Physical		    UnOptimized
<tr><td align="right" class='awrc'>321,693</td><td align="right" class='awrc'>321,693</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>321,693.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.97</td><td scope="row" class='awrc'><a class="awr" href="#71f07h4b84yt2">71f07h4b84yt2</a></td>
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
<td class='awrc'>
----------- ----------- ---------- ------------ ------ ------ -------------
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
SQL*Plus
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
</td>

    323,453	323,453 	 1    323,453.0    0.0	  3.0 2sff4nbj564pf
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '177'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
<tr><td align="right" class='awrnc'>288,594</td><td align="right" class='awrnc'>288,594</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>288,594.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2.67</td><td scope="row" class='awrnc'><a class="awr" href="#6uuqkb35jw13t">6uuqkb35jw13t</a></td>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<td class='awrnc'>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

SQL*Plus
    321,693	321,693 	 1    321,693.0    0.0	  3.0 71f07h4b84yt2
Module: SQL*Plus
</td>
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<tr><td align="right" class='awrc'>282,470</td><td align="right" class='awrc'>282,470</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>282,470.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.61</td><td scope="row" class='awrc'><a class="awr" href="#7gx6d596s0fak">7gx6d596s0fak</a></td>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<td class='awrc'>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

SQL*Plus
    288,594	288,594 	 1    288,594.0    0.0	  2.7 6uuqkb35jw13t
Module: SQL*Plus
</td>
DECLARE v_default_schema_number PLS_INTEGER := '3'; v_update_pct PLS_INTEGER :=
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
<tr><td align="right" class='awrnc'>279,708</td><td align="right" class='awrnc'>279,708</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>279,708.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2.59</td><td scope="row" class='awrnc'><a class="awr" href="#16p07bywtb14q">16p07bywtb14q</a></td>

    282,470	282,470 	 1    282,470.0    0.0	  2.6 7gx6d596s0fak
<td class='awrnc'>
Module: SQL*Plus
SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
</td>
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

    279,708	279,708 	 1    279,708.0    0.0	  2.6 16p07bywtb14q
<tr><td align="right" class='awrc'>260,754</td><td align="right" class='awrc'>260,754</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>260,754.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.41</td><td scope="row" class='awrc'><a class="awr" href="#bkvq4kcy2sz66">bkvq4kcy2sz66</a></td>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
<td class='awrc'>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
SQL*Plus
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
</td>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
    260,754	260,754 	 1    260,754.0    0.0	  2.4 bkvq4kcy2sz66
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
<tr><td align="right" class='awrnc'>257,761</td><td align="right" class='awrnc'>257,761</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>257,761.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2.38</td><td scope="row" class='awrnc'><a class="awr" href="#7rgx2dkmdsfn6">7rgx2dkmdsfn6</a></td>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<td class='awrnc'>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

SQL*Plus
    257,761	257,761 	 1    257,761.0    0.0	  2.4 7rgx2dkmdsfn6
Module: SQL*Plus
</td>
DECLARE v_default_schema_number PLS_INTEGER := '8'; v_update_pct PLS_INTEGER :=
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot
<tr><td align="right" class='awrc'>241,162</td><td align="right" class='awrc'>241,162</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>241,162.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.23</td><td scope="row" class='awrc'><a class="awr" href="#9xs2fh4766zzj">9xs2fh4766zzj</a></td>

    241,162	241,162 	 1    241,162.0    0.0	  2.2 9xs2fh4766zzj
<td class='awrc'>
Module: SQL*Plus
SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
</td>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    193,628	193,628 	 1    193,628.0    0.0	  1.8 av2x55hf6b4kn

<tr><td align="right" class='awrnc'>193,628</td><td align="right" class='awrnc'>193,628</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>193,628.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.79</td><td scope="row" class='awrnc'><a class="awr" href="#av2x55hf6b4kn">av2x55hf6b4kn</a></td>
SQL ordered by Physical Reads (UnOptimized)DB/Inst: P30SDB/p30sdb2  Snaps: 47-
<td class='awrnc'>
-> UnOptimized Read Reqs = Physical Read Reqs -
     (Optimized Read Reqs - Cell Flash Cache Read Hits for Controlfile)
SQL*Plus
-> %Opt   - Optimized Reads as percentage of SQL Read Requests
-> %Total - UnOptimized Read Reqs as a percentage of Total UnOptimized Read Reqs
</td>
-> Total Physical Read Requests:      10,815,881
-> Captured SQL account for    0.2% of Total
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
-> Total UnOptimized Read Requests:	 10,815,881
-> Captured SQL account for    0.2% of Total
-> Total Optimized Read Requests:		1
<tr><td align="right" class='awrc'>166,691</td><td align="right" class='awrc'>166,691</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>166,691.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.54</td><td scope="row" class='awrc'><a class="awr" href="#gqbp4bdj9hjjb">gqbp4bdj9hjjb</a></td>
-> Captured SQL account for    0.0% of Total

<td class='awrc'>
UnOptimized   Physical		    UnOptimized
  Read Reqs   Read Reqs Executions Reqs per Exe   %Opt %Total	 SQL Id
SQL*Plus
----------- ----------- ---------- ------------ ------ ------ -------------
</td>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '172'; v_update_pct PLS_INTEGER :
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<tr><td align="right" class='awrnc'>145,445</td><td align="right" class='awrnc'>145,445</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>145,445.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.34</td><td scope="row" class='awrnc'><a class="awr" href="#5vdaktvdvngax">5vdaktvdvngax</a></td>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

<td class='awrnc'>
    166,691	166,691 	 1    166,691.0    0.0	  1.5 gqbp4bdj9hjjb
Module: SQL*Plus
SQL*Plus
</td>
DECLARE v_default_schema_number PLS_INTEGER := '58'; v_update_pct PLS_INTEGER :=
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

<tr><td align="right" class='awrc'>142,585</td><td align="right" class='awrc'>142,585</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>142,585.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.32</td><td scope="row" class='awrc'><a class="awr" href="#857mw2dsngfyz">857mw2dsngfyz</a></td>
    145,445	145,445 	 1    145,445.0    0.0	  1.3 5vdaktvdvngax
Module: SQL*Plus
<td class='awrc'>
DECLARE v_default_schema_number PLS_INTEGER := '173'; v_update_pct PLS_INTEGER :
SQL*Plus
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
</td>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
    142,585	142,585 	 1    142,585.0    0.0	  1.3 857mw2dsngfyz
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '70'; v_update_pct PLS_INTEGER :=
<tr><td align="right" class='awrnc'>120,396</td><td align="right" class='awrnc'>120,396</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>120,396.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.11</td><td scope="row" class='awrnc'><a class="awr" href="#aqrcx9hdk5uuf">aqrcx9hdk5uuf</a></td>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<td class='awrnc'>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
SQL*Plus

    120,396	120,396 	 1    120,396.0    0.0	  1.1 aqrcx9hdk5uuf
</td>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '180'; v_update_pct PLS_INTEGER :
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<tr><td align="right" class='awrc'>112,991</td><td align="right" class='awrc'>112,991</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>112,991.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.04</td><td scope="row" class='awrc'><a class="awr" href="#dzjgnuh2rvhcp">dzjgnuh2rvhcp</a></td>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

    112,991	112,991 	 1    112,991.0    0.0	  1.0 dzjgnuh2rvhcp
<td class='awrc'>
Module: SQL*Plus
SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '181'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
</td>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>

    109,675	109,675 	 1    109,675.0    0.0	  1.0 gb9s6mvbwrkpf
Module: SQL*Plus
<tr><td align="right" class='awrnc'>109,675</td><td align="right" class='awrnc'>109,675</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>109,675.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.01</td><td scope="row" class='awrnc'><a class="awr" href="#gb9s6mvbwrkpf">gb9s6mvbwrkpf</a></td>
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<td class='awrnc'>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

    109,167	109,167 	 1    109,167.0    0.0	  1.0 4638b2uwsqsp1
SQL*Plus
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '26'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
</td>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
			  ------------------------------------------------------


SQL ordered by Executions		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
<tr><td align="right" class='awrc'>109,167</td><td align="right" class='awrc'>109,167</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>109,167.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.01</td><td scope="row" class='awrc'><a class="awr" href="#4638b2uwsqsp1">4638b2uwsqsp1</a></td>
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Total Executions:	   3,789,973
-> Captured SQL account for   89.9% of Total

<td class='awrc'>
					      Elapsed
 Executions   Rows Processed  Rows per Exec   Time (s)	%CPU   %IO    SQL Id
------------ --------------- -------------- ---------- ----- ----- -------------
SQL*Plus
   3,062,456	   3,062,533		1.0   18,926.4	 9.6  16.1 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )
</td>

     340,333	   1,020,999		3.0    6,170.2	 4.7   5.6 35dumc2tpr9dv
Module: SQL*Plus
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

       1,605		 152		0.1	   0.2	38.6  11.6 87gaftwrm2h68
</table><p />
select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$
o where o.obj#=:1

<hr align="left" width="20%" /><p />
	 503		 322		0.6	   0.4	  23  19.7 acmvv4fhdc9zh
select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spar
<a class="awr" href="#22">Back to SQL Statistics</a>
e2, spare3, signature, spare7, spare8, spare9, nvl(dflcollid, 16382), creappid,
creverid, modappid, modverid, crepatchid, modpatchid from obj$ where owner#=:1 a
<br /><a class="awr" href="#top">Back to Top</a><p />
nd name=:2 and namespace=:3 and remoteowner is null and linkname is null and sub

	 250		  14		0.1	   0.0	48.1  30.6 0gx3b09qrx9f5
<a class="awr" name="800"></a>
select obj#,index# from oid$ where user#=:1 and oid$=:2

	 198		   0		0.0	   0.0	85.2	 0 04kug40zbu4dm
<h3 class="awr">SQL ordered by Executions</h3>
select policy#, action# from aud_object_opt$ where object# = :1 and type = 2

	 197		 197		1.0	   0.4	 9.9   1.3 fn5s5p6hr6702
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)
<ul>

	 168		 168		1.0	   0.1	46.5	.7 f80h0xb1qvbsk
SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual

<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
	 154		 154		1.0	   0.0	94.3	38 grwydz59pu6mc
select text from view$ where rowid=:1

	 118		 118		1.0	   2.6	10.8   2.3 9babjv8yq8ru3
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time</li>
Module: SQL*Plus
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;

<li class="awr">Total Executions:	3,789,973</li>
			  ------------------------------------------------------


SQL ordered by Parse Calls		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<li class="awr">Captured SQL account for   89.9% of Total</li>
-> Total Parse Calls:		4,844
-> Captured SQL account for   40.6% of Total

			    % Total
</ul>
 Parse Calls  Executions     Parses    SQL Id
------------ ------------ --------- -------------
	 197	      197      4.07 fn5s5p6hr6702
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)

<table border="0" class="tdiff" summary="This table displays top SQL by number of executions"><tr><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">Rows Processed</th><th class="awrbg" scope="col">Rows per Exec</th><th class="awrbg" scope="col">Elapsed	Time (s)</th><th class="awrbg" scope="col"> %CPU</th><th class="awrbg" scope="col">  %IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
	 168	      168      3.47 f80h0xb1qvbsk
SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual

	 154	      154      3.18 grwydz59pu6mc
select text from view$ where rowid=:1
<tr><td align="right" class='awrc'>3,062,456</td><td align="right" class='awrc'>3,062,533</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>18,926.42</td><td class='awrc'>9.6</td><td class='awrc'>16.1</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>

	 118	      118      2.44 9babjv8yq8ru3
Module: SQL*Plus
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;
<td class='awrc'>

	 111	      111      2.29 5u7g54s63p4ts
select toid from type$ where package_obj#=:1 and typ_name=:2
SQL*Plus

	 104	      104      2.15 3un99a0zwp4vd
select owner#,name,namespace,remoteowner,linkname,p_timestamp,p_obj#, nvl(proper
</td>
ty,0),subname,type#,flags,d_attrs from dependency$ d, obj$ o where d_obj#=:1 and
 p_obj#=obj#(+) order by order#

	 104	      104      2.15 8swypbbr0m372
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
select order#,columns,types from access$ where d_obj#=:1

	  92	       92      1.90 f7xnvp44nukp7
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin
_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
<tr><td align="right" class='awrnc'>340,333</td><td align="right" class='awrnc'>1,020,999</td><td align="right" class='awrnc'>3.00</td><td align="right" class='awrnc'>6,170.18</td><td class='awrnc'>4.7</td><td class='awrnc'>5.6</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
,:bind3,:step_id)
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>

	  74	      100      1.53 50vxqdkj4zu1w
select user#,password,datats#,tempts#,type#,defrole,resource$,ptime,decode(defsc
hclass,NULL,'DEFAULT_CONSUMER_GROUP',defschclass),spare1,spare4,ext_username,spa
re2,nvl(spare3,16382),spare9,spare10 from user$ where name=:1
<tr><td align="right" class='awrc'>1,605</td><td align="right" class='awrc'>152</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.16</td><td class='awrc'>38.6</td><td class='awrc'>11.6</td><td scope="row" class='awrc'><a class="awr" href="#87gaftwrm2h68">87gaftwrm2h68</a></td>

	  66	       66      1.36 asvzxj61dc5vs
select timestamp, flags from fixed_obj$ where obj#=:1

<td class='awrc'>&#160;
	  57	       57      1.18 03guhbfpak0w7
select /*+ index(idl_ub1$ i_idl_ub11) */ piece#,length,piece from idl_ub1$ where
 obj#=:1 and part=:2 and version=:3 order by piece#
</td>

	  57	       57      1.18 9tt2m0mpc2qqp
select /*+ index(idl_char$ i_idl_char1) */ piece#,length,piece from idl_char$ wh
<td class='awrc'>select o.owner#, o.name, o.nam...</td></tr>
ere obj#=:1 and part=:2 and version=:3 order by piece#

	  57	       57      1.18 a3jpjzh7mtwwp
select /*+ index(idl_ub2$ i_idl_ub21) */ piece#,length,piece from idl_ub2$ where
 obj#=:1 and part=:2 and version=:3 order by piece#
<tr><td align="right" class='awrnc'>503</td><td align="right" class='awrnc'>322</td><td align="right" class='awrnc'>0.64</td><td align="right" class='awrnc'>0.37</td><td class='awrnc'>23</td><td class='awrnc'>19.7</td><td scope="row" class='awrnc'><a class="awr" href="#acmvv4fhdc9zh">acmvv4fhdc9zh</a></td>

	  57	       57      1.18 fh5ufah919kun
select /*+ index(idl_sb4$ i_idl_sb41) */ piece#,length,piece from idl_sb4$ where
<td class='awrnc'>&#160;
 obj#=:1 and part=:2 and version=:3 order by piece#

			  ------------------------------------------------------

</td>

SQL ordered by Sharable Memory		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Only Statements with Sharable Memory greater than 1048576 are displayed
<td class='awrnc'>select obj#, type#, ctime, mti...</td></tr>

Sharable Mem (b)  Executions   % Total	  SQL Id
---------------- ------------ -------- -------------
<tr><td align="right" class='awrc'>250</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.03</td><td class='awrc'>48.1</td><td class='awrc'>30.6</td><td scope="row" class='awrc'><a class="awr" href="#0gx3b09qrx9f5">0gx3b09qrx9f5</a></td>
      13,249,129	   10	  1.02 9yv5dwv8k0awg
WITH MONITOR_DATA AS (SELECT INST_ID, KEY, NVL2(PX_QCSID, NULL, STATUS) STATUS,
FIRST_REFRESH_TIME, LAST_REFRESH_TIME, REFRESH_COUNT, PROCESS_NAME, SID, SQL_ID,
<td class='awrc'>&#160;
 SQL_EXEC_START, SQL_EXEC_ID, DBOP_NAME, DBOP_EXEC_ID, SQL_PLAN_HASH_VALUE, SQL_
FULL_PLAN_HASH_VALUE, SESSION_SERIAL#, SQL_TEXT, PX_SERVER#, PX_SERVER_GROUP, PX

</td>
       3,929,056      340,333	  0.30 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )
<td class='awrc'>select obj#, index# from oid$ ...</td></tr>

       3,450,359    3,062,456	  0.27 bhdvtsvjhgvrh
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

<tr><td align="right" class='awrnc'>198</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.02</td><td class='awrnc'>85.2</td><td class='awrnc'>0</td><td scope="row" class='awrnc'><a class="awr" href="#04kug40zbu4dm">04kug40zbu4dm</a></td>
       2,785,220	    1	  0.21 2xfg27zhudyay
WITH binds as (select :dbid as dbid ,
:inst_id_low as instIdLow , :inst_id_high as i
nstIdHigh , :begin_snap as beginSnap ,
<td class='awrnc'>&#160;
:end_snap as endSnap , :begin_time as beg

       2,096,620	   10	  0.16 atwuyuvqkf27w
</td>
SELECT /*+ OPT_PARAM('_fix_control' '16391176:1') */ GROUP_TYPE, BUCKET_START, B
UCKET_END, TM_GROUP_TYPE, TM_BUCKET_START, TM_BUCKET_END, SUM(TM_CPU_FIRST_BUCKE
T_VALUE) TM_CPU_FIRST_BUCKET_VALUE, SUM(TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDD
<td class='awrnc'>select policy#, action# from a...</td></tr>
LE_BUCKETS_VALUE, SUM(TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE, SUM(TM

       1,970,736	    1	  0.15 9sq9djzzhr19y
WITH binds as (select :dbid as dbid ,
:inst_id_low as instIdLow , :inst_id_high as i
<tr><td align="right" class='awrc'>197</td><td align="right" class='awrc'>197</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.38</td><td class='awrc'>9.9</td><td class='awrc'>1.3</td><td scope="row" class='awrc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td>
nstIdHigh , :begin_snap as beginSnap ,
:end_snap as endSnap , :begin_time as beg

       1,470,513	    1	  0.11 c845wy077y4vn
<td class='awrc'>&#160;
WITH ash as (SELECT round((cast(sample_time as date) - :1) * 24 * 60 * 60,0) a
s t, inst_id || '_' || session_id || '_' || session_serial# as sid,
 decode(session_type, 'FOREGROUND', 1, 0) as session_type, nvl(
</td>
sql_id,'null') as sql_id, nvl(sql_opcode,0) as sql_opcode, n

       1,192,636	    1	  0.09 fg11facbfjwvx
 SELECT /*+ no_monitor leading(mo_px) use_hash(mo_px) */ xm
<td class='awrc'>INSERT INTO wri$_adv_message_g...</td></tr>
lelement( "sql_monitor_list_report", xmlattributes(
 :report_version as "version",
 :total_count as "total_count", to

			  ------------------------------------------------------

<tr><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0.08</td><td class='awrnc'>46.5</td><td class='awrnc'>.7</td><td scope="row" class='awrnc'><a class="awr" href="#f80h0xb1qvbsk">f80h0xb1qvbsk</a></td>

SQL ordered by Version Count		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Only Statements with Version Count greater than 20 are displayed
<td class='awrnc'>&#160;

 Version
</td>
  Count   Executions	 SQL Id
<td class='awrnc'>SELECT sys.wri$_adv_seq_msggro...</td></tr>
-------- ------------ -------------
     118      340,333 35dumc2tpr9dv
Module: SQL*Plus
<tr><td align="right" class='awrc'>154</td><td align="right" class='awrc'>154</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.03</td><td class='awrc'>94.3</td><td class='awrc'>38</td><td scope="row" class='awrc'><a class="awr" href="#grwydz59pu6mc">grwydz59pu6mc</a></td>
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )
<td class='awrc'>&#160;

     118    3,062,456 bhdvtsvjhgvrh
Module: SQL*Plus
</td>
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

			  ------------------------------------------------------

<td class='awrc'>select text from view$ where r...</td></tr>

SQL ordered by Cluster Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
<tr><td align="right" class='awrnc'>118</td><td align="right" class='awrnc'>118</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2.64</td><td class='awrnc'>10.8</td><td class='awrnc'>2.3</td><td scope="row" class='awrnc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td>
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
<td class='awrnc'>
-> Total Cluster Wait Time (s): 	 19,080
-> Captured SQL account for   88.4% of Total

       Cluster			      Elapsed
SQL*Plus
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
      13,124.3	  3,062,456   68.8   18,926.4	69.3	9.6   16.1 bhdvtsvjhgvrh
</td>
Module: SQL*Plus
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

<td class='awrnc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
       3,734.5	    340,333   19.6    6,170.2	60.5	4.7    5.6 35dumc2tpr9dv
Module: SQL*Plus
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )
</table><p />

	 191.4		  1    1.0	221.9	86.3	4.0    3.4 37j3jp5dz0b0t
Module: SQL*Plus
<hr align="left" width="20%" /><p />
DECLARE v_default_schema_number PLS_INTEGER := '145'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
<a class="awr" href="#22">Back to SQL Statistics</a>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<br /><a class="awr" href="#top">Back to Top</a><p />
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 191.2		  1    1.0	221.9	86.2	4.5    3.9 4zttz5yb0wfmw
Module: SQL*Plus
<a class="awr" name="900"></a>
DECLARE v_default_schema_number PLS_INTEGER := '170'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
<h3 class="awr">SQL ordered by Parse Calls</h3>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 190.7		  1    1.0	222.4	85.7	4.2    3.7 6pqjm0dp8bnky
<ul>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '149'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
<li class="awr">Total Parse Calls:	     4,844</li>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 189.8		  1    1.0	222.4	85.3	4.1    3.9 5zuc26whzgn7r
<li class="awr">Captured SQL account for   40.6% of Total</li>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '150'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
</ul>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 189.3		  1    1.0	221.9	85.3	3.9    5.0 6rgx9nqyyyp4u
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '131'; v_update_pct PLS_INTEGER :
<table border="0" class="tdiff" summary="This table displays top SQL by number of parse calls"><tr><th class="awrbg" scope="col">Parse Calls</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">% Total Parses</th><th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

<tr><td align="right" class='awrc'>197</td><td align="right" class='awrc'>197</td><td align="right" class='awrc'>4.07</td><td scope="row" class='awrc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td>
	 186.9		  1    1.0	222.2	84.1	4.1    3.8 gmtzgmxa3z2gp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '20'; v_update_pct PLS_INTEGER :=
<td class='awrc'>&#160;
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
</td>

	 186.9		  1    1.0	222.2	84.1	4.5    4.1 cwjq8stjymah0
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '162'; v_update_pct PLS_INTEGER :
<td class='awrc'>INSERT INTO wri$_adv_message_g...</td></tr>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 186.1		  1    1.0	221.9	83.9	4.2    4.4 8pk2bdg5njcb0
Module: SQL*Plus

<tr><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>3.47</td><td scope="row" class='awrnc'><a class="awr" href="#f80h0xb1qvbsk">f80h0xb1qvbsk</a></td>
SQL ordered by Cluster Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
<td class='awrnc'>&#160;
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
</td>
-> Total Cluster Wait Time (s): 	 19,080
-> Captured SQL account for   88.4% of Total

       Cluster			      Elapsed
<td class='awrnc'>SELECT sys.wri$_adv_seq_msggro...</td></tr>
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
DECLARE v_default_schema_number PLS_INTEGER := '184'; v_update_pct PLS_INTEGER :
<tr><td align="right" class='awrc'>154</td><td align="right" class='awrc'>154</td><td align="right" class='awrc'>3.18</td><td scope="row" class='awrc'><a class="awr" href="#grwydz59pu6mc">grwydz59pu6mc</a></td>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

<td class='awrc'>&#160;
	 186.1		  1    1.0	222.3	83.7	4.2    3.6 a017akb6vk41k
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '164'; v_update_pct PLS_INTEGER :
</td>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<td class='awrc'>select text from view$ where r...</td></tr>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 186.0		  1    1.0	221.6	83.9	4.6    3.9 f0vn9wx7zt80z
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '156'; v_update_pct PLS_INTEGER :
<tr><td align="right" class='awrnc'>118</td><td align="right" class='awrnc'>118</td><td align="right" class='awrnc'>2.44</td><td scope="row" class='awrnc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

<td class='awrnc'>
	 185.6		  1    1.0	222.1	83.6	4.2    3.9 cnjgta3s8p2g9
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '154'; v_update_pct PLS_INTEGER :
SQL*Plus
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

</td>
	 185.3		  1    1.0	221.9	83.5	4.3    4.0 360cbxs8zpbwv
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '151'; v_update_pct PLS_INTEGER :
<td class='awrnc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 185.3		  1    1.0	221.9	83.5	4.3    4.0 8zfgu19tss7yh
<tr><td align="right" class='awrc'>111</td><td align="right" class='awrc'>111</td><td align="right" class='awrc'>2.29</td><td scope="row" class='awrc'><a class="awr" href="#5u7g54s63p4ts">5u7g54s63p4ts</a></td>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '126'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
<td class='awrc'>&#160;
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 185.2		  1    1.0	221.9	83.5	4.0    3.8 31vnknytrunbv
</td>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '128'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
<td class='awrc'>select toid from type$ where p...</td></tr>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 184.8		  1    1.0	222.3	83.2	4.4    4.1 50rt989k98t99
Module: SQL*Plus
<tr><td align="right" class='awrnc'>104</td><td align="right" class='awrnc'>104</td><td align="right" class='awrnc'>2.15</td><td scope="row" class='awrnc'><a class="awr" href="#3un99a0zwp4vd">3un99a0zwp4vd</a></td>
DECLARE v_default_schema_number PLS_INTEGER := '182'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<td class='awrnc'>&#160;
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 184.3		  1    1.0	221.8	83.1	4.4    4.0 ahrc3p276uqf2
Module: SQL*Plus
</td>
DECLARE v_default_schema_number PLS_INTEGER := '175'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<td class='awrnc'>select owner#, name, namespace...</td></tr>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

SQL ordered by Cluster Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<tr><td align="right" class='awrc'>104</td><td align="right" class='awrc'>104</td><td align="right" class='awrc'>2.15</td><td scope="row" class='awrc'><a class="awr" href="#8swypbbr0m372">8swypbbr0m372</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select order#, columns, types ...</td></tr>
<tr><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>1.90</td><td scope="row" class='awrnc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>insert into wrm$_snapshot_deta...</td></tr>
<tr><td align="right" class='awrc'>74</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>1.53</td><td scope="row" class='awrc'><a class="awr" href="#50vxqdkj4zu1w">50vxqdkj4zu1w</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select user#, password, datats...</td></tr>
<tr><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>66</td><td align="right" class='awrnc'>1.36</td><td scope="row" class='awrnc'><a class="awr" href="#asvzxj61dc5vs">asvzxj61dc5vs</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select timestamp, flags from f...</td></tr>
<tr><td align="right" class='awrc'>57</td><td align="right" class='awrc'>57</td><td align="right" class='awrc'>1.18</td><td scope="row" class='awrc'><a class="awr" href="#03guhbfpak0w7">03guhbfpak0w7</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select /*+ index(idl_ub1$ i_id...</td></tr>
<tr><td align="right" class='awrnc'>57</td><td align="right" class='awrnc'>57</td><td align="right" class='awrnc'>1.18</td><td scope="row" class='awrnc'><a class="awr" href="#9tt2m0mpc2qqp">9tt2m0mpc2qqp</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /*+ index(idl_char$ i_i...</td></tr>
<tr><td align="right" class='awrc'>57</td><td align="right" class='awrc'>57</td><td align="right" class='awrc'>1.18</td><td scope="row" class='awrc'><a class="awr" href="#a3jpjzh7mtwwp">a3jpjzh7mtwwp</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>select /*+ index(idl_ub2$ i_id...</td></tr>
<tr><td align="right" class='awrnc'>57</td><td align="right" class='awrnc'>57</td><td align="right" class='awrnc'>1.18</td><td scope="row" class='awrnc'><a class="awr" href="#fh5ufah919kun">fh5ufah919kun</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>select /*+ index(idl_sb4$ i_id...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1000"></a>
<h3 class="awr">SQL ordered by Sharable Memory</h3>
<ul>
<li class="awr">Only Statements with Sharable Memory greater than 1048576 are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top SQL by amount of shared memory used"><tr><th class="awrbg" scope="col">Sharable Mem (b)</th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">% Total</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'>13,249,129</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>1.02</td><td scope="row" class='awrc'><a class="awr" href="#9yv5dwv8k0awg">9yv5dwv8k0awg</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>WITH MONITOR_DATA AS (SELECT I...</td></tr>
<tr><td align="right" class='awrnc'>3,929,056</td><td align="right" class='awrnc'>340,333</td><td align="right" class='awrnc'>0.30</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'>3,450,359</td><td align="right" class='awrc'>3,062,456</td><td align="right" class='awrc'>0.27</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'>2,785,220</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.21</td><td scope="row" class='awrnc'><a class="awr" href="#2xfg27zhudyay">2xfg27zhudyay</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>WITH binds as (select :dbid as...</td></tr>
<tr><td align="right" class='awrc'>2,096,620</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.16</td><td scope="row" class='awrc'><a class="awr" href="#atwuyuvqkf27w">atwuyuvqkf27w</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>SELECT /*+ OPT_PARAM('_fix_con...</td></tr>
<tr><td align="right" class='awrnc'>1,970,736</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.15</td><td scope="row" class='awrnc'><a class="awr" href="#9sq9djzzhr19y">9sq9djzzhr19y</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'>WITH binds as (select :dbid as...</td></tr>
<tr><td align="right" class='awrc'>1,470,513</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.11</td><td scope="row" class='awrc'><a class="awr" href="#c845wy077y4vn">c845wy077y4vn</a></td>
<td class='awrc'>&#160;
</td>
<td class='awrc'>WITH ash as (SELECT round((cas...</td></tr>
<tr><td align="right" class='awrnc'>1,192,636</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.09</td><td scope="row" class='awrnc'><a class="awr" href="#fg11facbfjwvx">fg11facbfjwvx</a></td>
<td class='awrnc'>&#160;
</td>
<td class='awrnc'> SELECT /*+ no_monitor leading...</td></tr>
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
</table><p />
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
<hr align="left" width="20%" /><p />
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
<a class="awr" href="#22">Back to SQL Statistics</a>
-> Total Cluster Wait Time (s): 	 19,080
-> Captured SQL account for   88.4% of Total

<br /><a class="awr" href="#top">Back to Top</a><p />
       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
<a class="awr" name="1100"></a>
-------------- ------------ ------ ---------- ------ ------ ------ -------------

	 184.2		  1    1.0	221.8	83.1	3.9    4.0 6tq14ybssmtfh
<h3 class="awr">SQL ordered by Version Count</h3>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '29'; v_update_pct PLS_INTEGER :=
<ul>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
<li class="awr">Only Statements with Version Count greater than 20 are displayed</li>
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
</ul>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	 183.6		  1    1.0	222.7	82.4	4.2    5.7 6arntugpqz094
Module: SQL*Plus
<table border="0" class="tdiff" summary="This table displays top SQL by version counts"><tr><th class="awrbg" scope="col">Version Count </th><th class="awrbg" scope="col">Executions </th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>
DECLARE v_default_schema_number PLS_INTEGER := '132'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
<tr><td align="right" class='awrc'>118</td><td align="right" class='awrc'>340,333</td><td scope="row" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

<td class='awrc'>
	 183.2		  1    1.0	222.1	82.5	4.3    3.9 7ab4587x3wp6p
Module: SQL*Plus
SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '166'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
</td>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
	 181.8		  1    1.0	222.0	81.9	4.0    5.3 g91ncg7p7wdzy
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '183'; v_update_pct PLS_INTEGER :
<tr><td align="right" class='awrnc'>118</td><td align="right" class='awrnc'>3,062,456</td><td scope="row" class='awrnc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<td class='awrnc'>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 181.4		  1    1.0	222.0	81.7	4.0    6.1 030bnr8n71b4f
SQL*Plus
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '129'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
</td>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

<td class='awrnc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
	 179.6		  1    0.9	221.9	80.9	4.2    3.9 5r2yzfvxw0427
Module: SQL*Plus
</table><p />
DECLARE v_default_schema_number PLS_INTEGER := '138'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<hr align="left" width="20%" /><p />
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

<a class="awr" href="#22">Back to SQL Statistics</a>
	 179.4		  1    0.9	222.6	80.6	4.3    5.3 g4s4tnmn3d6ss
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '185'; v_update_pct PLS_INTEGER :
<br /><a class="awr" href="#top">Back to Top</a><p />
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<a class="awr" name="1150"></a>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 178.8		  1    0.9	221.7	80.7	3.9    6.4 87x16ru0715ju
<h3 class="awr">SQL ordered by Cluster Wait Time</h3>
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '130'; v_update_pct PLS_INTEGER :
<ul>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
<li class="awr"> %Total - Cluster Time	as a percentage of Total Cluster Wait Time </li>

	 171.2		  1    0.9	221.9	77.2	3.1   13.3 642a1bn9n8g0t
Module: SQL*Plus
<li class="awr"> %Clu	- Cluster Time	as a percentage of Elapsed Time </li>
DECLARE v_default_schema_number PLS_INTEGER := '243'; v_update_pct PLS_INTEGER :

SQL ordered by Cluster Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<li class="awr"> %CPU	- CPU Time	as a percentage of Elapsed Time </li>
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
<li class="awr"> %IO	- User I/O Time as a percentage of Elapsed Time </li>
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
<li class="awr"> Only SQL with Cluster Wait Time &gt; .005 seconds is reported</li>
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	 19,080
-> Captured SQL account for   88.4% of Total
<li class="awr">Total Cluster Wait Time (s):	      19,080</li>

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
<li class="awr">Captured SQL account for   88.4% of Total</li>
-------------- ------------ ------ ---------- ------ ------ ------ -------------
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
</ul>
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h
<table border="0" class="tdiff" summary="This table displays top SQL by cluster wait time"><tr><th class="awrbg" scope="col">Cluster Wait Time (s)</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">Elapsed Time(s)</th><th class="awrbg" scope="col">%Clu</th><th class="awrbg" scope="col">%CPU</th><th class="awrbg" scope="col">%IO</th><th class="awrbg" scope="col">   SQL Id</th><th class="awrbg" scope="col">SQL Module</th><th class="awrbg" scope="col">SQL Text</th></tr>

	 144.5		  1    0.8	221.7	65.2	6.6   10.2 82udwbrd160v6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '61'; v_update_pct PLS_INTEGER :=
<tr><td align="right" class='awrc'>13,124.27</td><td align="right" class='awrc'>3,062,456</td><td align="right" class='awrc'>68.78</td><td align="right" class='awrc'>18,926.42</td><td align="right" class='awrc'>69.34</td><td align="right" class='awrc'>9.58</td><td align="right" class='awrc'>16.12</td><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<td class='awrc'>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	 113.9		  1    0.6	221.7	51.4	8.0   12.8 6ssht0mhh4kvj
SQL*Plus
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '55'; v_update_pct PLS_INTEGER :=
</td>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>

	 112.5		  1    0.6	220.2	51.1   12.0   19.8 aqrcx9hdk5uuf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '180'; v_update_pct PLS_INTEGER :
<tr><td align="right" class='awrnc'>3,734.45</td><td align="right" class='awrnc'>340,333</td><td align="right" class='awrnc'>19.57</td><td align="right" class='awrnc'>6,170.18</td><td align="right" class='awrnc'>60.52</td><td align="right" class='awrnc'>4.69</td><td align="right" class='awrnc'>5.60</td><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td>
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
<td class='awrnc'>
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	 112.3		  1    0.6	220.0	51.0   11.3   18.2 gw31j4b8zwtab
SQL*Plus
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '23'; v_update_pct PLS_INTEGER :=
</td>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>

	 112.2		  1    0.6	220.9	50.8   11.5   18.7 4638b2uwsqsp1
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '26'; v_update_pct PLS_INTEGER :=
<tr><td align="right" class='awrc'>191.43</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>221.91</td><td align="right" class='awrc'>86.26</td><td align="right" class='awrc'>3.96</td><td align="right" class='awrc'>3.43</td><td scope="row" class='awrc'><a class="awr" href="#37j3jp5dz0b0t">37j3jp5dz0b0t</a></td>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<td class='awrc'>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	 111.1		  1    0.6	219.9	50.5   10.7   17.4 c73qcqy18vbud
SQL*Plus
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '17'; v_update_pct PLS_INTEGER :=
</td>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>

	 109.9		  1    0.6	221.0	49.8   11.5   18.6 gb9s6mvbwrkpf
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '76'; v_update_pct PLS_INTEGER :=
<tr><td align="right" class='awrnc'>191.20</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>221.90</td><td align="right" class='awrnc'>86.17</td><td align="right" class='awrnc'>4.48</td><td align="right" class='awrnc'>3.88</td><td scope="row" class='awrnc'><a class="awr" href="#4zttz5yb0wfmw">4zttz5yb0wfmw</a></td>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
<td class='awrnc'>
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	 108.7		  1    0.6	219.9	49.4   11.2   18.0 3bgsbnp64xsbg
SQL*Plus
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '10'; v_update_pct PLS_INTEGER :=
</td>
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>


SQL ordered by Cluster Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
<tr><td align="right" class='awrc'>190.68</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>222.43</td><td align="right" class='awrc'>85.73</td><td align="right" class='awrc'>4.17</td><td align="right" class='awrc'>3.68</td><td scope="row" class='awrc'><a class="awr" href="#6pqjm0dp8bnky">6pqjm0dp8bnky</a></td>
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
<td class='awrc'>
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	 19,080
SQL*Plus
-> Captured SQL account for   88.4% of Total

       Cluster			      Elapsed
</td>
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
-------------- ------------ ------ ---------- ------ ------ ------ -------------
	 105.3		  1    0.6	220.0	47.9   14.2   23.4 857mw2dsngfyz
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '70'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	 102.0		  1    0.5	221.8	46.0   11.2   18.8 dzjgnuh2rvhcp
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '181'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	  96.7		  1    0.5	221.0	43.7   14.2   23.6 5vdaktvdvngax
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '173'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	  83.1		  1    0.4	220.9	37.6   16.2   26.5 gqbp4bdj9hjjb
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '58'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	  72.4		  1    0.4	220.0	32.9   18.8   30.5 av2x55hf6b4kn
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '172'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	  46.1		  1    0.2	219.9	20.9   23.2   36.4 9xs2fh4766zzj
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '84'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	  37.4		  1    0.2	219.9	17.0   25.1   37.9 7rgx2dkmdsfn6
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '8'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

	  36.3		  1    0.2	220.0	16.5   25.2   38.3 bkvq4kcy2sz66
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '13'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	  32.6		  1    0.2	221.0	14.8   27.8   41.0 6uuqkb35jw13t
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '3'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=

SQL ordered by Cluster Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	 19,080
-> Captured SQL account for   88.4% of Total

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

	  29.5		  1    0.2	221.0	13.3   27.3   40.2 7gx6d596s0fak
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '4'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

	  27.1		  1    0.1	220.9	12.3   26.9   40.5 16p07bywtb14q
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '64'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	  10.4		  1    0.1	220.0	 4.7   32.8   46.9 38r80y2wpq2ma
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	   8.2		  1    0.0	220.9	 3.7   32.7   47.0 7w4ajz9mh4684
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	   5.1		  1    0.0	219.9	 2.3   31.9   44.7 71f07h4b84yt2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	   3.7		  1    0.0	220.9	 1.7   31.7   45.4 czhh6tvvf96yz
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	   3.7		 57    0.0	  4.0	93.9	3.4    4.3 03guhbfpak0w7
select /*+ index(idl_ub1$ i_idl_ub11) */ piece#,length,piece from idl_ub1$ where
 obj#=:1 and part=:2 and version=:3 order by piece#

	   1.0		 38    0.0	  1.1	99.1	1.0	.4 b1wc53ddd6h3p
select audit$,options from procedure$ where obj#=:1

	   1.0		  1    0.0	220.0	 0.5   35.8   47.9 7kcm0mhxqy5q8
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

	   1.0		 26    0.0	  1.0	99.0	1.1	.2 ahpwg02s0cb1z

SQL ordered by Cluster Wait Time	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> %Total - Cluster Time  as a percentage of Total Cluster Wait Time
-> %Clu   - Cluster Time  as a percentage of Elapsed Time
-> %CPU   - CPU Time	  as a percentage of Elapsed Time
-> %IO	  - User I/O Time as a percentage of Elapsed Time
-> Only SQL with Cluster Wait Time > .005 seconds is reported
-> Total Cluster Wait Time (s): 	 19,080
-> Captured SQL account for   88.4% of Total

       Cluster			      Elapsed
 Wait Time (s)	 Executions %Total    Time(s)	%Clu   %CPU    %IO    SQL Id
-------------- ------------ ------ ---------- ------ ------ ------ -------------
INSERT INTO wri$_adv_rec_actions (task_id, rec_id, act_id) VALUES (:1,:2,:3)

	    .8		 21    0.0	  1.0	72.0	1.2	.5 1myuz4d7pbg2j
INSERT INTO wri$_adv_recommendations (id, task_id, finding_id, rank, benefit_msg
_id, benefit_val, type,flags, rec_type_id, exec_name) VALUES (:1,:2,:3,:4,:5,:6,
:7,:8,:9,:10)

	    .5		104    0.0	  0.6	80.4   10.5   13.0 3un99a0zwp4vd
select owner#,name,namespace,remoteowner,linkname,p_timestamp,p_obj#, nvl(proper
ty,0),subname,type#,flags,d_attrs from dependency$ d, obj$ o where d_obj#=:1 and
 p_obj#=obj#(+) order by order#

	    .3		118    0.0	  2.6	11.5   10.8    2.3 9babjv8yq8ru3
Module: SQL*Plus
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;

	    .3		100    0.0	  0.4	78.4	8.7    9.4 50vxqdkj4zu1w
select user#,password,datats#,tempts#,type#,defrole,resource$,ptime,decode(defsc
hclass,NULL,'DEFAULT_CONSUMER_GROUP',defschclass),spare1,spare4,ext_username,spa
re2,nvl(spare3,16382),spare9,spare10 from user$ where name=:1

	    .3		  1    0.0	 36.4	 0.8	3.6    2.4 2xfg27zhudyay
WITH binds as (select :dbid as dbid ,
:inst_id_low as instIdLow , :inst_id_high as i
nstIdHigh , :begin_snap as beginSnap ,
:end_snap as endSnap , :begin_time as beg

	    .2		503    0.0	  0.4	61.2   23.0   19.7 acmvv4fhdc9zh
select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spar
e2, spare3, signature, spare7, spare8, spare9, nvl(dflcollid, 16382), creappid,
creverid, modappid, modverid, crepatchid, modpatchid from obj$ where owner#=:1 a
nd name=:2 and namespace=:3 and remoteowner is null and linkname is null and sub

	    .2		  1    0.0	  0.3	66.3   30.4    9.3 6s1ku6bs9a8xb
 WITH ash as (SELECT ash.event_id, sum(decode(ash.session_type, 1, 1, 0)) as c
nt_fg, count(*) as cnt_total FROM WRH$_ACTIVE_SESSION_HISTORY ash WHERE ash
.dbid = :dbid AND ash.instance_number = :inst AND ash.snap_id > :bid AND ash.s
nap_id <= :eid AND ash.wait_time = 0 GROUP BY ash.event_id ), evts as (SEL

	    .2		104    0.0	  0.2	74.9   15.9   16.4 8swypbbr0m372
select order#,columns,types from access$ where d_obj#=:1

	    .2		  1    0.0	221.0	 0.1   34.1   47.8 ddk08qkf81zw2
Module: SQL*Plus
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

	    .2		 92    0.0	  0.2	85.9   12.2    5.1 f7xnvp44nukp7
insert into wrm$_snapshot_details (snap_id,dbid,instance_number,table_id,begin
_time,end_time,step_id) values (:snap_id,:dbid,:instance_number,:bind1,:bind2
,:bind3,:step_id)

			  ------------------------------------------------------


Key Instance Activity Stats		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
db block changes			  3,087,250	   8,504.0	     8.2
execute count				  3,789,973	  10,439.6	    10.0
gc cr block receive time		      1,000	       2.8	     0.0
gc cr blocks received				666	       1.8	     0.0
gc current block receive time		      4,957	      13.7	     0.0
gc current blocks received		      3,782	      10.4	     0.0
logons cumulative				110	       0.3	     0.0
opened cursors cumulative		  4,185,174	  11,528.2	    11.0
parse count (total)			      4,844	      13.3	     0.0
parse time elapsed				646	       1.8	     0.0
physical reads				 10,818,025	  29,798.7	    28.6
physical writes 			  1,198,874	   3,302.4	     3.2
redo size			      1,069,135,204    2,944,975.9	 2,821.2
session cursor cache hits		  4,165,344	  11,473.6	    11.0
session logical reads			 20,006,950	  55,110.0	    52.8
user calls				      1,264	       3.5	     0.0
user commits				    378,968	   1,043.9	     1.0
workarea executions - optimal		      2,360	       6.5	     0.0
			  ------------------------------------------------------


Instance Activity Stats 		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
-------------------------------- ------------------ -------------- -------------
ASSM bg: segment fix monitor			  0	       0.0	     0.0
ASSM cbk:blocks examined			928	       2.6	     0.0
ASSM cbk:blocks marked full			162	       0.5	     0.0
ASSM gsp:L1 bitmaps examined			785	       2.2	     0.0
ASSM gsp:L2 bitmap full 			 11	       0.0	     0.0
ASSM gsp:L2 bitmaps examined			127	       0.4	     0.0
ASSM gsp:Search all				 10	       0.0	     0.0
ASSM gsp:Search hint				  5	       0.0	     0.0
ASSM gsp:Search steal				  3	       0.0	     0.0
ASSM gsp:bump HWM				  3	       0.0	     0.0
ASSM gsp:get free block 			767	       2.1	     0.0
ASSM gsp:get free data block			667	       1.8	     0.0
ASSM gsp:get free index block			100	       0.3	     0.0
ASSM gsp:good hint				655	       1.8	     0.0
<tr><td align="right" class='awrnc'>189.81</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>222.45</td><td align="right" class='awrnc'>85.33</td><td align="right" class='awrnc'>4.13</td><td align="right" class='awrnc'>3.93</td><td scope="row" class='awrnc'><a class="awr" href="#5zuc26whzgn7r">5zuc26whzgn7r</a></td>
ASSM rsv:fill reserve				  1	       0.0	     0.0
ASSM wasted db state change			  0	       0.0	     0.0
Batched IO (bound) vector count 		609	       1.7	     0.0
Batched IO block miss count		  2,972,292	   8,187.3	     7.8
<td class='awrnc'>
Batched IO buffer defrag count			  0	       0.0	     0.0
Batched IO double miss count		  2,972,085	   8,186.7	     7.8
Batched IO same unit count			136	       0.4	     0.0
SQL*Plus
Batched IO single block count		  2,972,698	   8,188.4	     7.8
Batched IO vector block count			  4	       0.0	     0.0
Batched IO vector read count			  2	       0.0	     0.0
</td>
Block Cleanout Optim referenced 		 23	       0.1	     0.0
CCursor + sql area evicted			 34	       0.1	     0.0
CPU used by this session		    328,707	     905.4	     0.9
CPU used when call started		    346,732	     955.1	     0.9
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
CR blocks created				 43	       0.1	     0.0
Cached Commit SCN referenced		  2,337,043	   6,437.5	     6.2
Client Advertised Receive Window		833	       2.3	     0.0
Client Advertised Send Window			833	       2.3	     0.0
Client Path Maximum Transmission	    172,550	     475.3	     0.5
<tr><td align="right" class='awrc'>189.30</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>221.94</td><td align="right" class='awrc'>85.30</td><td align="right" class='awrc'>3.89</td><td align="right" class='awrc'>4.99</td><td scope="row" class='awrc'><a class="awr" href="#6rgx9nqyyyp4u">6rgx9nqyyyp4u</a></td>
Client Send Congestion Window		      1,142	       3.2	     0.0
Client Time (usec) Last Ack Rece	      1,031	       2.8	     0.0
Client Time (usec) Last Data Rec		 63	       0.2	     0.0
<td class='awrc'>
Client Time (usec) Last Data Sen	      3,014	       8.3	     0.0
Client Time (usec) Round Trip Ti	    430,301	   1,185.3	     1.1
Client Time (usec) Round Trip Ti	    613,976	   1,691.2	     1.6
SQL*Plus
Client Total Bytes Acked		  1,871,821	   5,156.0	     4.9
Client Total Bytes Received		    726,850	   2,002.1	     1.9
Client Total Number of Retransmi		 24	       0.1	     0.0
</td>
Commit SCN cached				  2	       0.0	     0.0
DBWR checkpoint buffers written 		677	       1.9	     0.0
DBWR checkpoints				108	       0.3	     0.0
DBWR fusion writes				 42	       0.1	     0.0
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
DBWR object drop buffers written		 46	       0.1	     0.0
DBWR thread checkpoint buffers w		  0	       0.0	     0.0
DBWR transaction table writes		      2,236	       6.2	     0.0
DBWR undo block writes			     87,617	     241.3	     0.2
DFO trees parallelized				 67	       0.2	     0.0
<tr><td align="right" class='awrnc'>186.93</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>222.19</td><td align="right" class='awrnc'>84.13</td><td align="right" class='awrnc'>4.10</td><td align="right" class='awrnc'>3.78</td><td scope="row" class='awrnc'><a class="awr" href="#gmtzgmxa3z2gp">gmtzgmxa3z2gp</a></td>
Effective IO time			      4,331	      11.9	     0.0
HSC Heap Segment Block Changes		  1,133,731	   3,122.9	     3.0
Heap Segment Array Inserts			192	       0.5	     0.0
Heap Segment Array Updates			  5	       0.0	     0.0
<td class='awrnc'>
Heatmap Blklevel Flush Task Coun		  0	       0.0	     0.0
KTFB alloc req					130	       0.4	     0.0
KTFB alloc space (block)		142,671,872	 392,995.4	   376.5
SQL*Plus
KTFB alloc time (ms)			  7,123,875	  19,623.0	    18.8
KTFB apply req					132	       0.4	     0.0

</td>
Instance Activity Stats 		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
-------------------------------- ------------------ -------------- -------------
KTFB apply time (ms)			      3,613	      10.0	     0.0
KTFB free req					  6	       0.0	     0.0
KTFB free space (block) 			168	       0.5	     0.0
KTFB free time (ms)				309	       0.9	     0.0
LOB table id lookup cache misses		  0	       0.0	     0.0
<tr><td align="right" class='awrc'>186.92</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>222.25</td><td align="right" class='awrc'>84.10</td><td align="right" class='awrc'>4.53</td><td align="right" class='awrc'>4.06</td><td scope="row" class='awrc'><a class="awr" href="#cwjq8stjymah0">cwjq8stjymah0</a></td>
Number of read IOs issued			  2	       0.0	     0.0
PX local messages recv'd			952	       2.6	     0.0
PX local messages sent				952	       2.6	     0.0
<td class='awrc'>
PX remote messages recv'd			745	       2.1	     0.0
PX remote messages sent 			475	       1.3	     0.0
Parallel operations not downgrad		 94	       0.3	     0.0
Requests to/from client 			365	       1.0	     0.0
SQL*Plus
SMON posted for undo segment shr		  1	       0.0	     0.0
SQL*Net roundtrips to/from clien		247	       0.7	     0.0
active txn count during cleanout		244	       0.7	     0.0
</td>
background checkpoints completed		  1	       0.0	     0.0
background checkpoints started			  0	       0.0	     0.0
background timeouts			      3,460	       9.5	     0.0
blocks cleaned out using minact 	    803,723	   2,213.9	     2.1
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
branch node splits				  0	       0.0	     0.0
buffer is not pinned count		 23,367,663	  64,367.2	    61.7
buffer is pinned count			  7,995,580	  22,024.2	    21.1
bytes received via SQL*Net from 	    119,948	     330.4	     0.3
<tr><td align="right" class='awrnc'>186.14</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>221.91</td><td align="right" class='awrnc'>83.88</td><td align="right" class='awrnc'>4.25</td><td align="right" class='awrnc'>4.35</td><td scope="row" class='awrnc'><a class="awr" href="#8pk2bdg5njcb0">8pk2bdg5njcb0</a></td>
bytes sent via SQL*Net to client	     66,478	     183.1	     0.2
calls to get snapshot scn: kcmgs	  4,193,997	  11,552.5	    11.1
calls to kcmgas 			    477,319	   1,314.8	     1.3
calls to kcmgcs 			      4,347	      12.0	     0.0
<td class='awrnc'>
cell physical IO interconnect by    111,813,127,680  307,993,751.8     295,046.4
change write time			      2,338	       6.4	     0.0
cleanout - number of ktugct call		911	       2.5	     0.0
SQL*Plus
cleanouts and rollbacks - consis		  0	       0.0	     0.0
cleanouts only - consistent read		537	       1.5	     0.0
cluster key scan block gets		      2,876	       7.9	     0.0
cluster key scans			      1,862	       5.1	     0.0
</td>
commit batch/immediate performed		  2	       0.0	     0.0
commit batch/immediate requested		  2	       0.0	     0.0
commit cleanout failures: block 		150	       0.4	     0.0
commit cleanout failures: buffer		712	       2.0	     0.0
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
commit cleanout failures: callba		 10	       0.0	     0.0
commit cleanout failures: cannot		  0	       0.0	     0.0
commit cleanouts			  1,133,625	   3,122.6	     3.0
commit cleanouts successfully co	  1,132,753	   3,120.2	     3.0
commit immediate performed			  2	       0.0	     0.0
commit immediate requested			  2	       0.0	     0.0
<tr><td align="right" class='awrc'>186.07</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>222.30</td><td align="right" class='awrc'>83.70</td><td align="right" class='awrc'>4.23</td><td align="right" class='awrc'>3.59</td><td scope="row" class='awrc'><a class="awr" href="#a017akb6vk41k">a017akb6vk41k</a></td>
commit txn count during cleanout		771	       2.1	     0.0
consistent changes			     11,214	      30.9	     0.0
consistent gets 			 17,949,115	  49,441.6	    47.4
<td class='awrc'>
consistent gets direct				  2	       0.0	     0.0
consistent gets examination		  3,823,128	  10,531.0	    10.1
consistent gets examination (fas	  3,821,794	  10,527.3	    10.1
SQL*Plus
consistent gets from cache		 17,949,110	  49,441.5	    47.4
consistent gets pin			 14,125,983	  38,910.6	    37.3
consistent gets pin (fastpath)		  4,339,819	  11,954.2	    11.5
cursor authentications				309	       0.9	     0.0
</td>
cursor reload failures				  9	       0.0	     0.0
data blocks consistent reads - u		 21	       0.1	     0.0
db block changes			  3,087,250	   8,504.0	     8.2
db block gets				  2,056,836	   5,665.6	     5.4
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
db block gets direct			      1,683	       4.6	     0.0
db block gets from cache		  2,055,148	   5,661.0	     5.4

Instance Activity Stats 		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Ordered by statistic name

<tr><td align="right" class='awrnc'>186.00</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>221.60</td><td align="right" class='awrnc'>83.94</td><td align="right" class='awrnc'>4.63</td><td align="right" class='awrnc'>3.88</td><td scope="row" class='awrnc'><a class="awr" href="#f0vn9wx7zt80z">f0vn9wx7zt80z</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>185.59</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>222.05</td><td align="right" class='awrc'>83.58</td><td align="right" class='awrc'>4.19</td><td align="right" class='awrc'>3.93</td><td scope="row" class='awrc'><a class="awr" href="#cnjgta3s8p2g9">cnjgta3s8p2g9</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>185.28</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>221.91</td><td align="right" class='awrnc'>83.49</td><td align="right" class='awrnc'>4.27</td><td align="right" class='awrnc'>3.98</td><td scope="row" class='awrnc'><a class="awr" href="#360cbxs8zpbwv">360cbxs8zpbwv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>185.25</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>221.89</td><td align="right" class='awrc'>83.49</td><td align="right" class='awrc'>4.34</td><td align="right" class='awrc'>3.97</td><td scope="row" class='awrc'><a class="awr" href="#8zfgu19tss7yh">8zfgu19tss7yh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>185.21</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>221.92</td><td align="right" class='awrnc'>83.46</td><td align="right" class='awrnc'>4.03</td><td align="right" class='awrnc'>3.76</td><td scope="row" class='awrnc'><a class="awr" href="#31vnknytrunbv">31vnknytrunbv</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>184.84</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>222.27</td><td align="right" class='awrc'>83.16</td><td align="right" class='awrc'>4.41</td><td align="right" class='awrc'>4.06</td><td scope="row" class='awrc'><a class="awr" href="#50rt989k98t99">50rt989k98t99</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>184.27</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>221.81</td><td align="right" class='awrnc'>83.08</td><td align="right" class='awrnc'>4.41</td><td align="right" class='awrnc'>4.04</td><td scope="row" class='awrnc'><a class="awr" href="#ahrc3p276uqf2">ahrc3p276uqf2</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>184.24</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>221.84</td><td align="right" class='awrc'>83.05</td><td align="right" class='awrc'>3.85</td><td align="right" class='awrc'>4.00</td><td scope="row" class='awrc'><a class="awr" href="#6tq14ybssmtfh">6tq14ybssmtfh</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>183.58</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.96</td><td align="right" class='awrnc'>222.70</td><td align="right" class='awrnc'>82.43</td><td align="right" class='awrnc'>4.24</td><td align="right" class='awrnc'>5.73</td><td scope="row" class='awrnc'><a class="awr" href="#6arntugpqz094">6arntugpqz094</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>183.22</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>222.10</td><td align="right" class='awrc'>82.49</td><td align="right" class='awrc'>4.29</td><td align="right" class='awrc'>3.93</td><td scope="row" class='awrc'><a class="awr" href="#7ab4587x3wp6p">7ab4587x3wp6p</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>181.76</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.95</td><td align="right" class='awrnc'>222.01</td><td align="right" class='awrnc'>81.87</td><td align="right" class='awrnc'>4.00</td><td align="right" class='awrnc'>5.30</td><td scope="row" class='awrnc'><a class="awr" href="#g91ncg7p7wdzy">g91ncg7p7wdzy</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>181.43</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.95</td><td align="right" class='awrc'>222.03</td><td align="right" class='awrc'>81.71</td><td align="right" class='awrc'>4.00</td><td align="right" class='awrc'>6.06</td><td scope="row" class='awrc'><a class="awr" href="#030bnr8n71b4f">030bnr8n71b4f</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>179.57</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.94</td><td align="right" class='awrnc'>221.86</td><td align="right" class='awrnc'>80.94</td><td align="right" class='awrnc'>4.20</td><td align="right" class='awrnc'>3.93</td><td scope="row" class='awrnc'><a class="awr" href="#5r2yzfvxw0427">5r2yzfvxw0427</a></td>
<td class='awrnc'>
SQL*Plus
</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrc'>179.41</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.94</td><td align="right" class='awrc'>222.63</td><td align="right" class='awrc'>80.59</td><td align="right" class='awrc'>4.28</td><td align="right" class='awrc'>5.35</td><td scope="row" class='awrc'><a class="awr" href="#g4s4tnmn3d6ss">g4s4tnmn3d6ss</a></td>
<td class='awrc'>
SQL*Plus
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td align="right" class='awrnc'>178.81</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.94</td><td align="right" class='awrnc'>221.70</td><td align="right" class='awrnc'>80.65</td><td align="right" class='awrnc'>3.92</td><td align="right" class='awrnc'>6.43</td><td scope="row" class='awrnc'><a class="awr" href="#87x16ru0715ju">87x16ru0715ju</a></td>
<td class='awrnc'>
SQL*Plus
Statistic				      Total	per Second     per Trans
</td>
-------------------------------- ------------------ -------------- -------------
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
db block gets from cache (fastpa	    870,375	   2,397.5	     2.3
deferred (CURRENT) block cleanou	  1,060,065	   2,920.0	     2.8
dirty buffers inspected 		  1,130,570	   3,114.2	     3.0
<tr><td align="right" class='awrc'>171.24</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.90</td><td align="right" class='awrc'>221.92</td><td align="right" class='awrc'>77.16</td><td align="right" class='awrc'>3.11</td><td align="right" class='awrc'>13.29</td><td scope="row" class='awrc'><a class="awr" href="#642a1bn9n8g0t">642a1bn9n8g0t</a></td>
enqueue conversions				952	       2.6	     0.0
enqueue releases			    766,529	   2,111.4	     2.0
<td class='awrc'>
enqueue requests			    766,362	   2,111.0	     2.0
SQL*Plus
enqueue timeouts				 10	       0.0	     0.0
enqueue waits					484	       1.3	     0.0
</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
exchange deadlocks				  7	       0.0	     0.0
execute count				  3,789,973	  10,439.6	    10.0
fastpath consistent get quota li		  0	       0.0	     0.0
<tr><td align="right" class='awrnc'>144.48</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.76</td><td align="right" class='awrnc'>221.65</td><td align="right" class='awrnc'>65.18</td><td align="right" class='awrnc'>6.60</td><td align="right" class='awrnc'>10.17</td><td scope="row" class='awrnc'><a class="awr" href="#82udwbrd160v6">82udwbrd160v6</a></td>
file io service time			761,742,185    2,098,249.5	 2,010.0
free buffer inspected			 19,269,897	  53,079.7	    50.9
<td class='awrnc'>
free buffer requested			 11,165,179	  30,754.9	    29.5
gc blocks compressed			      3,817	      10.5	     0.0
SQL*Plus
gc blocks lost				      2,695	       7.4	     0.0
</td>
gc cleanout applied				  0	       0.0	     0.0
gc cleanout saved				  0	       0.0	     0.0
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
gc cr anti locks created		    228,800	     630.2	     0.6
gc cr anti locks expanded			178	       0.5	     0.0
<tr><td align="right" class='awrc'>113.91</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.60</td><td align="right" class='awrc'>221.75</td><td align="right" class='awrc'>51.37</td><td align="right" class='awrc'>7.97</td><td align="right" class='awrc'>12.79</td><td scope="row" class='awrc'><a class="awr" href="#6ssht0mhh4kvj">6ssht0mhh4kvj</a></td>
gc cr anti locks shrunk 		      8,405	      23.2	     0.0
gc cr block build time				  2	       0.0	     0.0
<td class='awrc'>
gc cr block flush time			      1,695	       4.7	     0.0
gc cr block receive time		      1,000	       2.8	     0.0
SQL*Plus
gc cr blocks built				521	       1.4	     0.0
gc cr blocks flushed				134	       0.4	     0.0
</td>
gc cr blocks received				666	       1.8	     0.0
gc cr blocks served			      1,943	       5.4	     0.0
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
gc cr bypass requests				  0	       0.0	     0.0
gc cr multiblock grant time			453	       1.3	     0.0
gc cr multiblock grants received		492	       1.4	     0.0
<tr><td align="right" class='awrnc'>112.48</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>220.20</td><td align="right" class='awrnc'>51.08</td><td align="right" class='awrnc'>11.96</td><td align="right" class='awrnc'>19.81</td><td scope="row" class='awrnc'><a class="awr" href="#aqrcx9hdk5uuf">aqrcx9hdk5uuf</a></td>
gc current block flush time			  2	       0.0	     0.0
<td class='awrnc'>
gc current block pin time			  0	       0.0	     0.0
gc current block receive time		      4,957	      13.7	     0.0
SQL*Plus
gc current blocks flushed			  2	       0.0	     0.0
gc current blocks pinned			  0	       0.0	     0.0
</td>
gc current blocks received		      3,782	      10.4	     0.0
gc current blocks served		      2,358	       6.5	     0.0
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
gc force cr read cr				 44	       0.1	     0.0
gc force cr read current			  0	       0.0	     0.0
<tr><td align="right" class='awrc'>112.29</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.59</td><td align="right" class='awrc'>219.97</td><td align="right" class='awrc'>51.05</td><td align="right" class='awrc'>11.26</td><td align="right" class='awrc'>18.23</td><td scope="row" class='awrc'><a class="awr" href="#gw31j4b8zwtab">gw31j4b8zwtab</a></td>
gc kbytes saved 			     21,122	      58.2	     0.1
gc kbytes sent				     13,286	      36.6	     0.0
<td class='awrc'>
gc local grants 			  9,089,246	  25,036.7	    24.0
gc merge pi bg					  0	       0.0	     0.0
SQL*Plus
gc merge pi fg					 15	       0.0	     0.0
gc no change made				  0	       0.0	     0.0
</td>
gc read time waited				  0	       0.0	     0.0
gc read wait timeouts				  0	       0.0	     0.0
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
gc read waits					  0	       0.0	     0.0
gc reader bypass grants 			 70	       0.2	     0.0
gc reader bypass waits				 46	       0.1	     0.0
gc remote grants			  1,770,064	   4,875.7	     4.7
<tr><td align="right" class='awrnc'>112.18</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.59</td><td align="right" class='awrnc'>220.92</td><td align="right" class='awrnc'>50.78</td><td align="right" class='awrnc'>11.47</td><td align="right" class='awrnc'>18.72</td><td scope="row" class='awrnc'><a class="awr" href="#4638b2uwsqsp1">4638b2uwsqsp1</a></td>
gc status messages received		    313,645	     864.0	     0.8
gc status messages sent 		      1,610	       4.4	     0.0
<td class='awrnc'>
gcs affinity lock failures		     14,077	      38.8	     0.0
gcs affinity lock grants		  6,887,164	  18,971.0	    18.2
SQL*Plus
gcs anti-locks created			    228,680	     629.9	     0.6
</td>
gcs data block access records		 10,809,613	  29,775.5	    28.5
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
gcs messages sent			  5,252,554	  14,468.4	    13.9
gcs read-mostly lock failures		    222,161	     612.0	     0.6

<tr><td align="right" class='awrc'>111.12</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.58</td><td align="right" class='awrc'>219.90</td><td align="right" class='awrc'>50.53</td><td align="right" class='awrc'>10.72</td><td align="right" class='awrc'>17.41</td><td scope="row" class='awrc'><a class="awr" href="#c73qcqy18vbud">c73qcqy18vbud</a></td>
Instance Activity Stats 		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Ordered by statistic name
<td class='awrc'>

Statistic				      Total	per Second     per Trans
SQL*Plus
-------------------------------- ------------------ -------------- -------------
</td>
gcs read-mostly lock grants		  1,922,600	   5,295.9	     5.1
ges messages sent			      4,655	      12.8	     0.0
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
global enqueue get time 		     50,463	     139.0	     0.1
global enqueue gets async			  0	       0.0	     0.0
global enqueue gets sync		    467,341	   1,287.3	     1.2
<tr><td align="right" class='awrnc'>109.95</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.58</td><td align="right" class='awrnc'>221.00</td><td align="right" class='awrnc'>49.75</td><td align="right" class='awrnc'>11.47</td><td align="right" class='awrnc'>18.61</td><td scope="row" class='awrnc'><a class="awr" href="#gb9s6mvbwrkpf">gb9s6mvbwrkpf</a></td>
global enqueue releases 		    468,407	   1,290.3	     1.2
heap block compress				  0	       0.0	     0.0
<td class='awrnc'>
hot buffers moved to head of LRU	    147,064	     405.1	     0.4
immediate (CR) block cleanout ap		537	       1.5	     0.0
SQL*Plus
immediate (CURRENT) block cleano		263	       0.7	     0.0
index crx state invalidation			  0	       0.0	     0.0
</td>
index crx upgrade (positioned)			  0	       0.0	     0.0
index fast full scans (full)			  2	       0.0	     0.0
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
index fetch by key			      8,820	      24.3	     0.0
index range scans			  3,791,450	  10,443.7	    10.0
<tr><td align="right" class='awrc'>108.70</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.57</td><td align="right" class='awrc'>219.91</td><td align="right" class='awrc'>49.43</td><td align="right" class='awrc'>11.16</td><td align="right" class='awrc'>18.04</td><td scope="row" class='awrc'><a class="awr" href="#3bgsbnp64xsbg">3bgsbnp64xsbg</a></td>
leaf node 90-10 splits				 22	       0.1	     0.0
leaf node splits				 98	       0.3	     0.0
<td class='awrc'>
lob reads					935	       2.6	     0.0
lob writes				      7,220	      19.9	     0.0
SQL*Plus
lob writes unaligned			      7,219	      19.9	     0.0
</td>
logical read bytes from cache	    163,874,553,856  451,399,041.6     432,423.2
logons cumulative				110	       0.3	     0.0
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
max cf enq hold time				  0	       0.0	     0.0
messages received			     33,137	      91.3	     0.1
messages sent				     33,129	      91.3	     0.1
<tr><td align="right" class='awrnc'>105.31</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.55</td><td align="right" class='awrnc'>219.99</td><td align="right" class='awrnc'>47.87</td><td align="right" class='awrnc'>14.19</td><td align="right" class='awrnc'>23.37</td><td scope="row" class='awrnc'><a class="awr" href="#857mw2dsngfyz">857mw2dsngfyz</a></td>
min active SCN optimization appl		  0	       0.0	     0.0
no buffer to keep pinned count			  0	       0.0	     0.0
<td class='awrnc'>
no work - consistent read gets		 14,060,700	  38,730.8	    37.1
non-idle wait count			 15,228,177	  41,946.6	    40.2
SQL*Plus
opened cursors cumulative		  4,185,174	  11,528.2	    11.0
parse count (describe)				 72	       0.2	     0.0
</td>
parse count (failures)				  0	       0.0	     0.0
parse count (hard)			      1,048	       2.9	     0.0
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
parse count (total)			      4,844	      13.3	     0.0
parse time cpu					185	       0.5	     0.0
parse time elapsed				646	       1.8	     0.0
<tr><td align="right" class='awrc'>102.00</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.53</td><td align="right" class='awrc'>221.78</td><td align="right" class='awrc'>45.99</td><td align="right" class='awrc'>11.16</td><td align="right" class='awrc'>18.76</td><td scope="row" class='awrc'><a class="awr" href="#dzjgnuh2rvhcp">dzjgnuh2rvhcp</a></td>
physical read IO requests		 10,815,881	  29,792.8	    28.5
physical read bytes		     88,621,211,648  244,110,687.5     233,848.8
<td class='awrc'>
physical read total IO requests 	 10,819,319	  29,802.3	    28.6
SQL*Plus
physical read total bytes	     89,538,762,240  246,638,117.4     236,270.0
physical read total multi block 		869	       2.4	     0.0
</td>
physical reads				 10,818,025	  29,798.7	    28.6
physical reads cache			 10,818,007	  29,798.6	    28.6
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
physical reads cache prefetch		      2,150	       5.9	     0.0
physical reads direct				 16	       0.0	     0.0
<tr><td align="right" class='awrnc'>96.68</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.51</td><td align="right" class='awrnc'>221.04</td><td align="right" class='awrnc'>43.74</td><td align="right" class='awrnc'>14.21</td><td align="right" class='awrnc'>23.58</td><td scope="row" class='awrnc'><a class="awr" href="#5vdaktvdvngax">5vdaktvdvngax</a></td>
physical reads direct (lob)			 14	       0.0	     0.0
physical reads direct temporary 		  2	       0.0	     0.0
<td class='awrnc'>
physical reads prefetch warmup			  0	       0.0	     0.0
physical write IO requests		  1,132,021	   3,118.2	     3.0
SQL*Plus
physical write bytes		      9,821,175,808   27,052,823.3	25,915.6
</td>
physical write total IO requests	  1,175,977	   3,239.3	     3.1
physical write total bytes	     11,134,884,864   30,671,487.7	29,382.1
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
physical write total multi block	      1,248	       3.4	     0.0
physical writes 			  1,198,874	   3,302.4	     3.2
<tr><td align="right" class='awrc'>83.09</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.44</td><td align="right" class='awrc'>220.93</td><td align="right" class='awrc'>37.61</td><td align="right" class='awrc'>16.19</td><td align="right" class='awrc'>26.53</td><td scope="row" class='awrc'><a class="awr" href="#gqbp4bdj9hjjb">gqbp4bdj9hjjb</a></td>
physical writes direct			      1,868	       5.2	     0.0
physical writes direct (lob)			184	       0.5	     0.0
<td class='awrc'>
physical writes direct temporary	      1,501	       4.1	     0.0
physical writes from cache		  1,197,006	   3,297.2	     3.2
SQL*Plus
physical writes non checkpoint		  1,129,052	   3,110.0	     3.0
pinned buffers inspected		     29,100	      80.2	     0.1
</td>

Instance Activity Stats 		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
-> Ordered by statistic name

Statistic				      Total	per Second     per Trans
<tr><td align="right" class='awrnc'>72.37</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>220.04</td><td align="right" class='awrnc'>32.89</td><td align="right" class='awrnc'>18.76</td><td align="right" class='awrnc'>30.47</td><td scope="row" class='awrnc'><a class="awr" href="#av2x55hf6b4kn">av2x55hf6b4kn</a></td>
-------------------------------- ------------------ -------------- -------------
prefetch warmup blocks aged out 		  0	       0.0	     0.0
<td class='awrnc'>
prefetched blocks aged out befor		  0	       0.0	     0.0
process last non-idle time			363	       1.0	     0.0
SQL*Plus
recursive calls 			  4,604,907	  12,684.4	    12.2
recursive cpu usage			    296,229	     816.0	     0.8
</td>
redo KB read				    552,960	   1,523.2	     1.5
redo blocks checksummed by FG (e	    921,268	   2,537.7	     2.4
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
redo blocks written			  2,168,517	   5,973.3	     5.7
redo blocks written (group 0)			  0	       0.0	     0.0
redo blocks written (group 1)			  0	       0.0	     0.0
redo buffer allocation retries			  0	       0.0	     0.0
<tr><td align="right" class='awrc'>46.07</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>219.94</td><td align="right" class='awrc'>20.95</td><td align="right" class='awrc'>23.18</td><td align="right" class='awrc'>36.38</td><td scope="row" class='awrc'><a class="awr" href="#9xs2fh4766zzj">9xs2fh4766zzj</a></td>
redo entries				  1,537,157	   4,234.2	     4.1
redo log space requests 			  0	       0.0	     0.0
<td class='awrc'>
redo size			      1,069,135,204    2,944,975.9	 2,821.2
redo size for direct writes			120	       0.3	     0.0
SQL*Plus
redo subscn max counts				725	       2.0	     0.0
redo synch time 				194	       0.5	     0.0
</td>
redo synch time (usec)			  1,809,218	   4,983.6	     4.8
redo synch time overhead (usec) 	      4,857	      13.4	     0.0
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
redo synch time overhead count (		 39	       0.1	     0.0
redo synch writes				120	       0.3	     0.0
redo wastage				  5,000,780	  13,774.9	    13.2
<tr><td align="right" class='awrnc'>37.36</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>219.93</td><td align="right" class='awrnc'>16.99</td><td align="right" class='awrnc'>25.05</td><td align="right" class='awrnc'>37.88</td><td scope="row" class='awrnc'><a class="awr" href="#7rgx2dkmdsfn6">7rgx2dkmdsfn6</a></td>
redo write active strands		     20,743	      57.1	     0.1
redo write broadcast ack count			 28	       0.1	     0.0
<td class='awrnc'>
redo write broadcast ack time		     52,564	     144.8	     0.1
SQL*Plus
redo write finish time			237,401,842	 653,932.9	   626.4
redo write gather time			    756,463	   2,083.7	     2.0
</td>
redo write info find				 39	       0.1	     0.0
redo write schedule time		    857,174	   2,361.1	     2.3
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
redo write size count (   4KB)		      1,024	       2.8	     0.0
<tr><td align="right" class='awrc'>36.26</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>219.96</td><td align="right" class='awrc'>16.48</td><td align="right" class='awrc'>25.16</td><td align="right" class='awrc'>38.32</td><td scope="row" class='awrc'><a class="awr" href="#bkvq4kcy2sz66">bkvq4kcy2sz66</a></td>
redo write size count (   8KB)		      1,547	       4.3	     0.0
redo write size count (  16KB)		      1,767	       4.9	     0.0
<td class='awrc'>
redo write size count (  32KB)		      2,284	       6.3	     0.0
SQL*Plus
redo write size count ( 128KB)		      5,132	      14.1	     0.0
</td>
redo write size count ( 256KB)			394	       1.1	     0.0
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
redo write size count ( 512KB)			118	       0.3	     0.0
redo write size count (1024KB)			121	       0.3	     0.0
redo write size count (inf)			256	       0.7	     0.0
<tr><td align="right" class='awrnc'>32.64</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>221.03</td><td align="right" class='awrnc'>14.77</td><td align="right" class='awrnc'>27.83</td><td align="right" class='awrnc'>40.97</td><td scope="row" class='awrnc'><a class="awr" href="#6uuqkb35jw13t">6uuqkb35jw13t</a></td>
redo write time 			     23,745	      65.4	     0.1
redo write time (usec)			237,454,050	 654,076.7	   626.6
<td class='awrnc'>
redo write total time			237,770,083	 654,947.3	   627.4
redo write worker delay (usec)			  0	       0.0	     0.0
SQL*Plus
redo write worker delay count			  0	       0.0	     0.0
</td>
redo writes				     12,643	      34.8	     0.0
redo writes (group 0)				  0	       0.0	     0.0
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
redo writes (group 1)				  0	       0.0	     0.0
redo writes adaptive all		     12,642	      34.8	     0.0
redo writes adaptive worker			  0	       0.0	     0.0
<tr><td align="right" class='awrc'>29.45</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>220.95</td><td align="right" class='awrc'>13.33</td><td align="right" class='awrc'>27.27</td><td align="right" class='awrc'>40.19</td><td scope="row" class='awrc'><a class="awr" href="#7gx6d596s0fak">7gx6d596s0fak</a></td>
rollback changes - undo records 		  2	       0.0	     0.0
rollbacks only - consistent read		 17	       0.1	     0.0
<td class='awrc'>
rows fetched via callback		      5,669	      15.6	     0.0
SQL*Plus
saved cleanouts 				  0	       0.0	     0.0
saved cleanouts successfully com		  0	       0.0	     0.0
</td>
securefile allocation bytes		  1,507,328	   4,152.0	     4.0
securefile allocation chunks			 66	       0.2	     0.0
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
securefile bytes non-transformed	  1,272,350	   3,504.7	     3.4
securefile direct read bytes		    114,688	     315.9	     0.3
<tr><td align="right" class='awrnc'>27.11</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>220.93</td><td align="right" class='awrnc'>12.27</td><td align="right" class='awrnc'>26.89</td><td align="right" class='awrnc'>40.47</td><td scope="row" class='awrnc'><a class="awr" href="#16p07bywtb14q">16p07bywtb14q</a></td>
securefile direct read ops			 14	       0.0	     0.0
securefile direct write bytes		  1,507,328	   4,152.0	     4.0
<td class='awrnc'>
securefile direct write ops			 65	       0.2	     0.0

SQL*Plus
Instance Activity Stats 		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Ordered by statistic name
</td>

Statistic				      Total	per Second     per Trans
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
-------------------------------- ------------------ -------------- -------------
securefile number of non-transfo		 68	       0.2	     0.0
<tr><td align="right" class='awrc'>10.43</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>219.98</td><td align="right" class='awrc'>4.74</td><td align="right" class='awrc'>32.76</td><td align="right" class='awrc'>46.89</td><td scope="row" class='awrc'><a class="awr" href="#38r80y2wpq2ma">38r80y2wpq2ma</a></td>
segment cfs allocations 			  0	       0.0	     0.0
segment chunks allocation from d		 66	       0.2	     0.0
<td class='awrc'>
segment dispenser allocations			 65	       0.2	     0.0
SQL*Plus
segment dispenser load empty			  0	       0.0	     0.0
segment dispenser load tasks			  0	       0.0	     0.0
</td>
segment prealloc bytes			  1,048,576	   2,888.3	     2.8
segment prealloc ops				  2	       0.0	     0.0
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
segment prealloc tasks				  0	       0.0	     0.0
segment prealloc time (ms)			561	       1.6	     0.0
segment prealloc ufs2cfs bytes			  0	       0.0	     0.0
<tr><td align="right" class='awrnc'>8.22</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>220.93</td><td align="right" class='awrnc'>3.72</td><td align="right" class='awrnc'>32.68</td><td align="right" class='awrnc'>46.95</td><td scope="row" class='awrnc'><a class="awr" href="#7w4ajz9mh4684">7w4ajz9mh4684</a></td>
segment total chunk allocation			  0	       0.0	     0.0
session connect time				407	       1.1	     0.0
<td class='awrnc'>
session cursor cache hits		  4,165,344	  11,473.6	    11.0
session logical reads			 20,006,950	  55,110.0	    52.8
SQL*Plus
shared hash latch upgrades - no 	  1,241,100	   3,418.7	     3.3
shared hash latch upgrades - wai		  9	       0.0	     0.0
</td>
shared io pool buffer get failur		  0	       0.0	     0.0
shared io pool buffer get succes		 79	       0.2	     0.0
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
sorts (memory)				      2,286	       6.3	     0.0
sorts (rows)				  1,641,470	   4,521.5	     4.3
sql area evicted				 43	       0.1	     0.0
<tr><td align="right" class='awrc'>5.13</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>219.93</td><td align="right" class='awrc'>2.33</td><td align="right" class='awrc'>31.91</td><td align="right" class='awrc'>44.65</td><td scope="row" class='awrc'><a class="awr" href="#71f07h4b84yt2">71f07h4b84yt2</a></td>
sql area purged 				 34	       0.1	     0.0
summed dirty queue length		 12,509,403	  34,457.7	    33.0
<td class='awrc'>
switch current caused by our pin		 14	       0.0	     0.0
switch current to new buffer			 62	       0.2	     0.0
SQL*Plus
table fetch by rowid			 13,217,858	  36,409.1	    34.9
table fetch continued row			486	       1.3	     0.0
</td>
table scan blocks gotten		     17,438	      48.0	     0.1
table scan disk non-IMC rows got	  1,343,750	   3,701.4	     3.6
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
table scan rows gotten			  1,343,750	   3,701.4	     3.6
table scans (direct read)			  2	       0.0	     0.0
table scans (long tables)			  2	       0.0	     0.0
<tr><td align="right" class='awrnc'>3.74</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>220.93</td><td align="right" class='awrnc'>1.69</td><td align="right" class='awrnc'>31.70</td><td align="right" class='awrnc'>45.37</td><td scope="row" class='awrnc'><a class="awr" href="#czhh6tvvf96yz">czhh6tvvf96yz</a></td>
table scans (short tables)			862	       2.4	     0.0
temp space allocated (bytes)		  5,242,880	  14,441.7	    13.8
<td class='awrnc'>
total cf enq hold time			      2,703	       7.5	     0.0
total number of cf enq holders			122	       0.3	     0.0
SQL*Plus
total number of times SMON poste		  1	       0.0	     0.0
transaction lock background get 		  0	       0.0	     0.0
</td>
transaction lock background gets		  0	       0.0	     0.0
transaction lock foreground requ		  0	       0.0	     0.0
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
transaction rollbacks				  1	       0.0	     0.0
transaction tables consistent re		  8	       0.0	     0.0
undo change vector size 		427,737,488    1,178,220.1	 1,128.7
<tr><td align="right" class='awrc'>3.74</td><td align="right" class='awrc'>57</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>3.98</td><td align="right" class='awrc'>93.91</td><td align="right" class='awrc'>3.36</td><td align="right" class='awrc'>4.32</td><td scope="row" class='awrc'><a class="awr" href="#03guhbfpak0w7">03guhbfpak0w7</a></td>
user calls				      1,264	       3.5	     0.0
user commits				    378,968	   1,043.9	     1.0
<td class='awrc'>&#160;
user logons cumulative				  1	       0.0	     0.0
user logouts cumulative 			119	       0.3	     0.0
</td>
workarea executions - optimal		      2,360	       6.5	     0.0
write clones created in backgrou		 54	       0.2	     0.0
<td class='awrc'>select /*+ index(idl_ub1$ i_id...</td></tr>
write clones created in foregrou	     42,870	     118.1	     0.1
			  ------------------------------------------------------

<tr><td align="right" class='awrnc'>1.04</td><td align="right" class='awrnc'>38</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>99.14</td><td align="right" class='awrnc'>1.03</td><td align="right" class='awrnc'>0.41</td><td scope="row" class='awrnc'><a class="awr" href="#b1wc53ddd6h3p">b1wc53ddd6h3p</a></td>

Instance Activity Stats - Absolute ValuesDB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<td class='awrnc'>&#160;
-> Statistics with absolute values (should not be diffed)

</td>
Statistic			     Begin Value       End Value
-------------------------------- --------------- ---------------
<td class='awrnc'>select audit$, options from pr...</td></tr>
logons current				     257	     139
opened cursors current			     714	     121
session cursor cache count		  35,397	  35,712
<tr><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>220.00</td><td align="right" class='awrc'>0.46</td><td align="right" class='awrc'>35.77</td><td align="right" class='awrc'>47.90</td><td scope="row" class='awrc'><a class="awr" href="#7kcm0mhxqy5q8">7kcm0mhxqy5q8</a></td>
session pga memory		   1,638,576,872     954,297,848
session pga memory max		   1,872,822,280   1,170,210,232
<td class='awrc'>
session uga memory		     964,126,448     646,239,064
session uga memory max		   8,652,933,296   9,336,877,000
SQL*Plus
workarea memory allocated		       0	     308
			  ------------------------------------------------------
</td>

Instance Activity Stats - Thread ActivityDB/Inst: P30SDB/p30sdb2  Snaps: 47-48
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
-> Statistics identified by '(derived)' come from sources other than SYSSTAT

Statistic				      Total  per Hour
<tr><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>26</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>99.02</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>0.21</td><td scope="row" class='awrnc'><a class="awr" href="#ahpwg02s0cb1z">ahpwg02s0cb1z</a></td>
-------------------------------- ------------------ ---------
log switches (derived)				  0	  .00
<td class='awrnc'>&#160;
			  ------------------------------------------------------

</td>
IOStat by Function summary		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
<td class='awrnc'>INSERT INTO wri$_adv_rec_actio...</td></tr>
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> ordered by (Data Read + Write) desc
<tr><td align="right" class='awrc'>0.75</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>71.96</td><td align="right" class='awrc'>1.20</td><td align="right" class='awrc'>0.55</td><td scope="row" class='awrc'><a class="awr" href="#1myuz4d7pbg2j">1myuz4d7pbg2j</a></td>

		 Reads:  Reqs	 Data	Writes:  Reqs	 Data	 Waits:    Avg
<td class='awrc'>&#160;
Function Name	   Data per sec per sec    Data per sec per sec   Count    Time
</td>
--------------- ------- ------- ------- ------- ------- ------- ------- --------
Buffer Cache Re   77.8G 2.8E+04 219.311      0M     0.0      0M   10.2M 364.02us
<td class='awrc'>INSERT INTO wri$_adv_recommend...</td></tr>
DBWR		     0M     0.0      0M    8.6G  2939.0 24.292M       0
LGWR		     0M     0.0      0M   1005M    55.2  2.768M   12.1K  18.56ms
<tr><td align="right" class='awrnc'>0.46</td><td align="right" class='awrnc'>104</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.57</td><td align="right" class='awrnc'>80.38</td><td align="right" class='awrnc'>10.54</td><td align="right" class='awrnc'>13.01</td><td scope="row" class='awrnc'><a class="awr" href="#3un99a0zwp4vd">3un99a0zwp4vd</a></td>
Others		   843M     7.8  2.322M     13M     1.1   .036M    1699   8.19ms
Direct Writes	     0M     0.0      0M      8M     0.2   .022M       0
<td class='awrnc'>&#160;
Direct Reads	     0M     0.0      0M      0M     0.0      0M       0
</td>
TOTAL:		  78.6G 2.8E+04 221.633    9.6G  2995.5 27.118M   10.2M 386.97us
			  ------------------------------------------------------
<td class='awrnc'>select owner#, name, namespace...</td></tr>

<tr><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>118</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.64</td><td align="right" class='awrc'>11.51</td><td align="right" class='awrc'>10.84</td><td align="right" class='awrc'>2.29</td><td scope="row" class='awrc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td>
IOStat by Filetype summary		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
<td class='awrc'>
    other columns suffixed with K,M,G,T,P are in multiples of 1000
-> Small Read and Large Read are average service times
SQL*Plus
-> Ordered by (Data Read + Write) desc

</td>
		Reads:	Reqs	Data   Writes:	Reqs	Data	  Small    Large
<td class='awrc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
Filetype Name	  Data per sec per sec	  Data per sec per sec	   Read     Read
-------------- ------- ------- ------- ------- ------- ------- -------- --------
Data File	 77.5G 2.8E+04 218.664	  8.6G	2926.3	24.19M	47.99us
Log File	  812M	   2.4	2.237M	 1002M	  55.1	 2.76M	13.70us 1601.50m
<tr><td align="right" class='awrnc'>0.28</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>78.39</td><td align="right" class='awrnc'>8.75</td><td align="right" class='awrnc'>9.40</td><td scope="row" class='awrnc'><a class="awr" href="#50vxqdkj4zu1w">50vxqdkj4zu1w</a></td>
Control File	   30M	   5.3	 .083M	    4M	   0.8	 .011M	17.10us
<td class='awrnc'>&#160;
Temp File	   17M	   1.2	 .047M	   13M	   0.6	 .036M	19.05us    .00ns
TOTAL:		 78.4G 2.8E+04 221.03M	  9.6G	2982.8 26.997M	47.98us 1546.28m
</td>
			  ------------------------------------------------------

<td class='awrnc'>select user#, password, datats...</td></tr>
IOStat by Function/Filetype summary	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> 'Data' columns suffixed with M,G,T,P are in multiples of 1024
    other columns suffixed with K,M,G,T,P are in multiples of 1000
<tr><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>36.40</td><td align="right" class='awrc'>0.76</td><td align="right" class='awrc'>3.63</td><td align="right" class='awrc'>2.41</td><td scope="row" class='awrc'><a class="awr" href="#2xfg27zhudyay">2xfg27zhudyay</a></td>
-> Ordered by (Data Read + Write) desc for each function

<td class='awrc'>&#160;
  Reads:  Reqs	  Data	 Writes:  Reqs	  Data	  Waits:      Avg
    Data per sec per sec    Data per sec per sec   Count     Time
</td>
 ------- ------- ------- ------- ------- ------- ------- ----------
Buffer Cache Reads
<td class='awrc'>WITH binds as (select :dbid as...</td></tr>
   77.5G 2.8E+04 218.617      0M     0.0      0M   10.1M   364.15us
 Buffer Cache Reads (Data File)
<tr><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>503</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>61.22</td><td align="right" class='awrnc'>23.03</td><td align="right" class='awrnc'>19.73</td><td scope="row" class='awrnc'><a class="awr" href="#acmvv4fhdc9zh">acmvv4fhdc9zh</a></td>
   77.5G 2.8E+04 218.57M      0M     0.0      0M   10.1M   364.15us
 Buffer Cache Reads (Temp File)
<td class='awrnc'>&#160;
     17M     1.2   .047M      0M     0.0      0M     447   260.66us
DBWR
</td>
      0M     0.0      0M    8.6G  2925.2 24.179M       0
 DBWR (Data File)
<td class='awrnc'>select obj#, type#, ctime, mti...</td></tr>
      0M     0.0      0M    8.6G  2924.9 24.177M       0
 DBWR (Temp File)
      0M     0.0      0M      1M     0.3   .003M       0
<tr><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>66.30</td><td align="right" class='awrc'>30.37</td><td align="right" class='awrc'>9.25</td><td scope="row" class='awrc'><a class="awr" href="#6s1ku6bs9a8xb">6s1ku6bs9a8xb</a></td>
 LGWR (Log File)
      0M     0.0      0M   1002M    55.1   2.76M       0
<td class='awrc'>&#160;
LGWR
      0M     0.0      0M   1002M    55.1   2.76M       0
</td>
Others
    843M     7.8  2.322M     13M     1.1   .036M    1552   236.77us
<td class='awrc'> WITH ash as (SELECT ash.event...</td></tr>
 Others (Log File)
    813M     2.4  2.239M      0M     0.0      0M      73   240.86us
 Others (Control File)
<tr><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>104</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>74.95</td><td align="right" class='awrnc'>15.85</td><td align="right" class='awrnc'>16.44</td><td scope="row" class='awrnc'><a class="awr" href="#8swypbbr0m372">8swypbbr0m372</a></td>
     30M     5.3   .083M      5M     0.8   .014M    1471   237.07us
 Others (Temp File)
<td class='awrnc'>&#160;
      0M     0.0      0M      7M     0.2   .019M       0
 Others (Data File)
</td>
      0M     0.0      0M      1M     0.0   .003M       8   143.88us
 Direct Writes (Data File)
<td class='awrnc'>select order#, columns, types ...</td></tr>
      0M     0.0      0M      3M     0.2   .008M       0
Direct Writes
      0M     0.0      0M      3M     0.2   .008M       0
<tr><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>220.97</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>34.09</td><td align="right" class='awrc'>47.77</td><td scope="row" class='awrc'><a class="awr" href="#ddk08qkf81zw2">ddk08qkf81zw2</a></td>
 Direct Reads (Data File)
      0M     0.0      0M      0M     0.0      0M       0
<td class='awrc'>
Direct Reads
      0M     0.0      0M      0M     0.0      0M       0
SQL*Plus
TOTAL:
   78.3G 2.8E+04 220.939    9.6G  2981.5 26.983M   10.2M   364.13us
</td>
			  ------------------------------------------------------

<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>

Tablespace IO Stats			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

<tr><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.21</td><td align="right" class='awrnc'>85.91</td><td align="right" class='awrnc'>12.22</td><td align="right" class='awrnc'>5.11</td><td scope="row" class='awrnc'><a class="awr" href="#f7xnvp44nukp7">f7xnvp44nukp7</a></td>
		  No data exists for this section of the report.
<td class='awrnc'>&#160;
			  ------------------------------------------------------
</td>


<td class='awrnc'>insert into wrm$_snapshot_deta...</td></tr>
File IO Stats				 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

</table><p />
		  No data exists for this section of the report.
			  ------------------------------------------------------
<hr align="left" width="20%" /><p />


<a class="awr" href="#22">Back to SQL Statistics</a>
Buffer Pool Statistics			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Standard block size Pools  D: default,  K: keep,  R: recycle
<br /><a class="awr" href="#top">Back to Top</a><p />
-> Default Pools for other block sizes: 2k, 4k, 8k, 16k, 32k

<a class="awr" name="99997"></a>
							    Free   Writ   Buffer
     Number of Pool	  Buffer     Physical	 Physical   Buff   Comp     Busy
<p />
P      Buffers Hit%	    Gets	Reads	   Writes   Wait   Wait    Waits
<h3 class="awr">Complete List of SQL Text</h3><p />
--- ---------- ---- ------------ ------------ ----------- ------ ------ --------
D      121,095	 46   20,108,050   10,876,435	1,229,738 3.E+05  61190      180
<table border="0" class="tdiff" summary="This table displays the text of the SQL statements which have been
			  ------------------------------------------------------

      referred to in the report">
Checkpoint Activity			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Total Physical Writes:		     1,198,874

<tr><th class="awrbg" scope="col">SQL Id</th><th class="awrbg" scope="col">SQL Text</th></tr>
					  Other    Autotune	 Thread
       MTTR    Log Size    Log Ckpt    Settings        Ckpt	   Ckpt
<tr><td scope="row" class='awrc'><a class="awr" name="030bnr8n71b4f"></a>030bnr8n71b4f</td><td class='awrc'><pre_sqltext class="awr">DECLARE
     Writes	 Writes      Writes	 Writes      Writes	 Writes
----------- ----------- ----------- ----------- ----------- -----------
v_default_schema_number PLS_INTEGER := '129';
	  0	      0 	  0	      0 	677	      0
v_update_pct PLS_INTEGER := '10';
			  ------------------------------------------------------

Instance Recovery Stats 		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
v_max_loop_iterations PLS_INTEGER := '0';
-> B: Begin Snapshot,  E: End Snapshot

v_seconds_to_run PLS_INTEGER := '300';
									    Estd
  Targt  Estd					  Log Ckpt Log Ckpt    Opt   RAC
v_scale PLS_INTEGER := '32768';
  MTTR	 MTTR Recovery	Actual	 Target   Log Sz   Timeout Interval    Log Avail
   (s)	  (s) Estd IOs RedoBlks RedoBlks RedoBlks RedoBlks RedoBlks  Sz(M)  Time
v_work_unit PLS_INTEGER := '4' ;
- ----- ----- -------- -------- -------- -------- -------- -------- ------ -----
v_redo_stress  VARCHAR2(12) := 'LITE';
B     0    28	 32801	 526519 8.49E+07 8.49E+07      N/A	N/A    N/A    12
E     0   101	 19331	2013573   926782 8.49E+07   926782	N/A    N/A    48
v_hot_schema_modulus PLS_INTEGER := '0';
			  ------------------------------------------------------

v_do_hotspot   VARCHAR(7) := 'FALSE';
MTTR Advisory				     DB/Inst: P30SDB/p30sdb2  Snap: 48

		  No data exists for this section of the report.
v_hotspot_mb  NUMBER := '10';
			  ------------------------------------------------------

v_hotspot_offset_mb NUMBER := '0';
Buffer Pool Advisory			     DB/Inst: P30SDB/p30sdb2  Snap: 48
-> Only rows with estimated physical reads >0 are displayed
-> ordered by Block Size, Buffers For Estimate
v_hotspot_modulus  PLS_INTEGER := '0';

				    Est

				   Phys      Estimated			Est
    Size for   Size	 Buffers   Read     Phys Reads	   Est Phys %DBtime
v_sleep_modulus PLS_INTEGER := '0';
P    Est (M) Factor  (thousands) Factor    (thousands)	  Read Time for Rds
v_sleep_min NUMBER := '.1';
--- -------- ------ ------------ ------ -------------- ------------ -------
D	  96	 .1	      11    1.2        191,108		  1 9.8E+04
v_sleep_max NUMBER := '.5';
D	 192	 .2	      22    1.1        182,854		  1 9.4E+04
D	 288	 .3	      34    1.1        178,259		  1 9.1E+04
D	 384	 .4	      45    1.1        175,434		  1 9.0E+04
v_scan_query_pct PLS_INTEGER := '0';
D	 480	 .5	      56    1.0        173,473		  1 8.9E+04
D	 576	 .6	      67    1.0        171,944		  1 8.8E+04
v_obfuscate VARCHAR(5)	:= 'FALSE';
D	 672	 .6	      78    1.0        170,632		  1 8.7E+04

D	 768	 .7	      89    1.0        169,409		  1 8.7E+04
D	 864	 .8	     101    1.0        168,204		  1 8.6E+04

D	 960	 .9	     112    1.0        167,028		  1 8.6E+04
D      1,040	1.0	     121    1.0        166,097		  1 8.5E+04
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
D      1,056	1.0	     123    1.0        165,890		  1 8.5E+04
D      1,152	1.1	     134    1.0        164,788		  1 8.4E+04
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
D      1,248	1.2	     145    1.0        163,724		  1 8.4E+04

D      1,344	1.3	     156    1.0        162,691		  1 8.3E+04
D      1,440	1.4	     168    1.0        161,673		  1 8.3E+04
v_num_tmp NUMBER := 0;
D      1,536	1.5	     179    1.0        160,670		  1 8.2E+04
D      1,632	1.6	     190    1.0        159,679		  1 8.2E+04
D      1,728	1.7	     201    1.0        158,699		  1 8.1E+04

D      1,824	1.8	     212    0.9        157,725		  1 8.1E+04
D      1,920	1.8	     224    0.9        156,759		  1 8.0E+04
			  ------------------------------------------------------
v_loop_cnt PLS_INTEGER := 0;


PGA Aggr Summary			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> PGA cache hit % - percentage of W/A (WorkArea) data processed only in-memory
v_rowcnt PLS_INTEGER := 0;

PGA Cache Hit %   W/A MB Processed  Extra W/A MB Read/Written
--------------- ------------------ --------------------------
v_updates_cnt PLS_INTEGER := 0;
	  100.0 	       481			    0
			  ------------------------------------------------------

v_selects_cnt PLS_INTEGER := 0;
PGA Aggr Target Stats			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> B: Begin Snap   E: End Snap (rows dentified with B or E contain data

   which is absolute i.e. not diffed over the interval)
-> Auto PGA Target - actual workarea memory target
-> W/A PGA Used    - amount of memory used for all Workareas (manual + auto)
v_random_access_queries_cnt PLS_INTEGER := 0;
-> %PGA W/A Mem    - percentage of PGA memory allocated to workareas
-> %Auto W/A Mem   - percentage of workarea memory controlled by Auto Mem Mgmt
-> %Man W/A Mem    - percentage of workarea memory under manual control

v_scan_queries_cnt PLS_INTEGER := 0;
						%PGA  %Auto   %Man
    PGA Aggr   Auto PGA   PGA Mem    W/A PGA	 W/A	W/A    W/A Global Mem
   Target(M)  Target(M)  Alloc(M)    Used(M)	 Mem	Mem    Mem   Bound(K)

- ---------- ---------- ---------- ---------- ------ ------ ------ ----------
B      4,174	  1,611    2,939.5	  0.0	  .0	 .0	.0    427,410
E      4,174	  2,180    2,147.1	  0.0	  .0	 .0	.0    427,410
v_do_scan_query BOOLEAN :=FALSE;
			  ------------------------------------------------------

PGA Aggr Target Histogram		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Optimal Executions are purely in-memory operations
v_scan_query_quota  BOOLEAN := FALSE;

  Low	  High
Optimal Optimal    Total Execs	Optimal Execs 1-Pass Execs M-Pass Execs
v_scan_workload_only BOOLEAN := FALSE;
------- ------- -------------- -------------- ------------ ------------
     2K      4K 	 1,701		1,701		 0	      0
    64K    128K 	   149		  149		 0	      0
   128K    256K 	    66		   66		 0	      0
v_random_workload_only BOOLEAN := FALSE;
   256K    512K 	    30		   30		 0	      0
   512K   1024K 	   234		  234		 0	      0
     1M      2M 	   190		  190		 0	      0

     2M      4M 	     7		    7		 0	      0
     8M     16M 	     1		    1		 0	      0
			  ------------------------------------------------------


PGA Memory Advisory			     DB/Inst: P30SDB/p30sdb2  Snap: 48
-> When using Auto Memory Mgmt, minimally choose a pga_aggregate_target value
   where Estd PGA Overalloc Count is 0
v_random_block PLS_INTEGER := 1;

v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
				       Estd Extra    Estd P Estd PGA
		END IF;
PGA Target    Size	     W/A MB   W/A MB Read/    Cache Overallo	Estd
  Est (MB)   Factr	  Processed Written to Disk   Hit %    Count	Time
	END IF;
---------- ------- ---------------- ---------------- ------ -------- -------
       522     0.1	   15,843.4	       671.5   96.0	  91 1.2E+08

     1,044     0.3	   15,843.4	       671.5   96.0	  91 1.2E+08
     2,087     0.5	   15,843.4	       258.6   98.0	  39 1.1E+08
	-- Choose the random block. The v_do_hotspot handler that follows can override.
     3,131     0.8	   15,843.4		 0.0  100.0	   0 1.1E+08
     4,174     1.0	   15,843.4		 0.0  100.0	   0 1.1E+08
     5,009     1.2	   15,843.4		 0.0  100.0	   0 1.1E+08
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

     5,844     1.4	   15,843.4		 0.0  100.0	   0 1.1E+08
     6,678     1.6	   15,843.4		 0.0  100.0	   0 1.1E+08
	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
     7,513     1.8	   15,843.4		 0.0  100.0	   0 1.1E+08
     8,348     2.0	   15,843.4		 0.0  100.0	   0 1.1E+08
    12,522     3.0	   15,843.4		 0.0  100.0	   0 1.1E+08
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
    16,696     4.0	   15,843.4		 0.0  100.0	   0 1.1E+08
    25,044     6.0	   15,843.4		 0.0  100.0	   0 1.1E+08
    33,392     8.0	   15,843.4		 0.0  100.0	   0 1.1E+08
			  ------------------------------------------------------


Shared Pool Advisory			     DB/Inst: P30SDB/p30sdb2  Snap: 48
-> SP: Shared Pool     Est LC: Estimated Library Cache	 Factr: Factor
-> Note there is often a 1:Many correlation between a single logical object
   in the Library Cache, and the physical number of memory objects associated
   with it.  Therefore comparing the number of Lib Cache objects (e.g. in
   v$librarycache), with the number of Lib Cache Memory Objects is invalid.

				       Est LC Est LC  Est LC Est LC
  Shared    SP	 Est LC 		 Time	Time	Load   Load	  Est LC
    Pool  Size	   Size       Est LC	Saved  Saved	Time   Time	 Mem Obj
 Size(M) Factr	    (M)      Mem Obj	  (s)  Factr	 (s)  Factr	Hits (K)
-------- ----- -------- ------------ -------- ------ ------- ------ ------------
   1,616    .9	     77        2,720  156,851	  .6 1.1E+05   44.6	   9,318
   1,648    .9	    107        4,548  173,880	  .7  95,891   37.9	  10,795
   1,664    .9	    122        5,030  179,209	  .7  90,562   35.8	  11,493
   1,680    .9	    137        5,832  204,859	  .8  64,912   25.6	  14,647
   1,696    .9	    152        6,039  230,088	  .9  39,683   15.7	  18,146
   1,712    .9	    167        6,310  238,096	  .9  31,675   12.5	  19,341
   1,728   1.0	    182        6,584  244,099	  .9  25,672   10.1	  20,201
   1,744   1.0	    197        6,989  250,734	  .9  19,037	7.5	  21,213
   1,760   1.0	    212        7,772  255,413	 1.0  14,358	5.7	  21,880
   1,776   1.0	    228        8,328  260,460	 1.0   9,311	3.7	  22,574
   1,792   1.0	    243        8,845  265,309	 1.0   4,462	1.8	  23,260
   1,808   1.0	    258       10,015  267,239	 1.0   2,532	1.0	  23,631
   1,824   1.0	    274       10,049  267,247	 1.0   2,524	1.0	  23,632
   1,840   1.0	    289       10,392  267,253	 1.0   2,518	1.0	  23,634
   1,856   1.0	    305       10,618  267,266	 1.0   2,505	1.0	  23,636
   1,872   1.0	    320       11,031  267,269	 1.0   2,502	1.0	  23,637
   1,888   1.0	    335       11,670  267,272	 1.0   2,499	1.0	  23,637
   1,904   1.1	    351       12,103  267,277	 1.0   2,494	1.0	  23,638
   1,920   1.1	    367       12,546  267,281	 1.0   2,490	1.0	  23,639
   1,936   1.1	    383       13,194  267,293	 1.0   2,478	1.0	  23,640
   1,952   1.1	    398       13,883  267,297	 1.0   2,474	1.0	  23,640
   2,000   1.1	    445       15,277  267,319	 1.0   2,452	1.0	  23,642
   2,192   1.2	    553       19,339  267,351	 1.0   2,420	1.0	  23,644
   2,384   1.3	    553       19,339  267,351	 1.0   2,420	1.0	  23,644
   2,576   1.4	    553       19,339  267,351	 1.0   2,420	1.0	  23,644
   2,768   1.5	    553       19,339  267,351	 1.0   2,420	1.0	  23,644
   2,960   1.6	    553       19,339  267,351	 1.0   2,420	1.0	  23,644
   3,152   1.7	    553       19,339  267,351	 1.0   2,420	1.0	  23,644
   3,344   1.8	    553       19,339  267,351	 1.0   2,420	1.0	  23,644
   3,536   2.0	    553       19,339  267,351	 1.0   2,420	1.0	  23,644
   3,728   2.1	    553       19,339  267,351	 1.0   2,420	1.0	  23,644
			  ------------------------------------------------------

SGA Target Advisory			     DB/Inst: P30SDB/p30sdb2  Snap: 48

SGA Target   SGA Size	    Est DB     Est Physical
  Size (M)     Factor	  Time (s)	      Reads
---------- ---------- ------------ ----------------
     2,304	  0.8	   273,696	178,487,671
     3,072	  1.0	   267,333	166,096,846
     3,840	  1.3	   262,681	156,961,519
     4,608	  1.5	   262,574	156,961,519
     5,376	  1.8	   262,574	156,961,519
     6,144	  2.0	   262,574	156,961,519
			  ------------------------------------------------------

Streams Pool Advisory			     DB/Inst: P30SDB/p30sdb2  Snap: 48

		  No data exists for this section of the report.
			  ------------------------------------------------------

Java Pool Advisory			     DB/Inst: P30SDB/p30sdb2  Snap: 48

		  No data exists for this section of the report.
			  ------------------------------------------------------

Buffer Wait Statistics			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> ordered by wait time desc, waits desc

Class			 Waits Total Wait Time (s)  Avg Time (ms)
------------------ ----------- ------------------- --------------
undo header		    19			15	      764
file header block	     4			 2	      593
data block		   151			 0		2
			  ------------------------------------------------------


Enqueue Activity			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> only enqueues with requests are shown
-> Enqueue stats gathered prior to 10g should not be compared with 10g data
-> ordered by Wait Time desc, Waits desc, Requests desc

Enqueue Type (Request Reason)
------------------------------------------------------------------------------
    Requests	Succ Gets Failed Gets	    Waits  Wt Time (s) Av Wt Time(ms)
------------ ------------ ----------- ----------- ------------ --------------
RO-Multiple Object Reuse (fast object reuse)
	 737	      738	    0	      208	   108	       518.32
HW-Segment High Water Mark
	 490	      510	    0	       53	    83	     1,556.66
CR-Reuse Block Range (block range reuse ckpt)
	  57	       58	    0	       15	     5	       314.07
CF-Controlfile Transaction
	 823	      822	    1	       28	     1		32.71
PS-PX Process Reservation
	 620	      620	    0	      126	     0		 2.63
TM-DML
     359,945	  359,910	    0		1	     0		60.00
WF-AWR Flush
	  29	       26	    3	       19	     0		  .95
CO-KTUCLO Master Slave enq (master slave det)
	   6		0	    6		6	     0		 1.00
FB-Format Block
	  15	       15	    0		4	     0		  .75
TA-Instance Undo
	   1		1	    0		1	     0		  .00
TX-Transaction
     360,235	  360,190	    0		0	     0		  N/A
JG-Job Scheduler1
       1,365	    1,365	    0		0	     0		  N/A
JG-Job Scheduler1 (queue lock)
       1,365	    1,365	    0		0	     0		  N/A
CU-Cursor
	 753	      753	    0		0	     0		  N/A
TT-Tablespace
	 314	      314	    0		0	     0		  N/A
DD-ASM Local Disk Group
	 256	      256	    0		0	     0		  N/A
SJ-KTSJ Slave Task Cancel (Slave Task Cancel)
	 232	      232	    0		0	     0		  N/A
TO-Temp Object
	 141	      141	    0		0	     0		  N/A
JG-Job Scheduler1 (q mem clnup lck)
	 130	      130	    0		0	     0		  N/A
SE-Session Migration
	 121	      121	    0		0	     0		  N/A
BU-Buddy Instance Context (recovery set construct)
	 108	      108	    0		0	     0		  N/A
IT-In-Mem Temp Table Meta Creation
	 104	      104	    0		0	     0		  N/A
IS-Instance State
	 100	      100	    0		0	     0		  N/A
DA-Instance DP Array (Slave Process Array)
	  86	       86	    0		0	     0		  N/A
FP-File Object (global fob contention)
	  73	       73	    0		0	     0		  N/A
MR-Media Recovery
	  50	       50	    0		0	     0		  N/A
SQ-Sequence Cache
	  22	       22	    0		0	     0		  N/A
WT-AWR CDB-Wide Table Lock
	  22	       22	    0		0	     0		  N/A
AF-Advisor Framework (task serialization)
	  13	       13	    0		0	     0		  N/A
TH-Threshold Chain (metric threshold evaluation)
	   6		6	    0		0	     0		  N/A

Enqueue Activity			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> only enqueues with requests are shown
-> Enqueue stats gathered prior to 10g should not be compared with 10g data
-> ordered by Wait Time desc, Waits desc, Requests desc

Enqueue Type (Request Reason)
------------------------------------------------------------------------------
    Requests	Succ Gets Failed Gets	    Waits  Wt Time (s) Av Wt Time(ms)
------------ ------------ ----------- ----------- ------------ --------------
AE-Edition Lock (lock)
	   2		2	    0		0	     0		  N/A
DW-In memory Dispenser
	   2		2	    0		0	     0		  N/A
SH-Active Session History Flushing
	   2		2	    0		0	     0		  N/A
PR-Process Startup
	   1		1	    0		0	     0		  N/A
PV-KSV slave startup (syncstart)
	   1		1	    0		0	     0		  N/A
PW-Buffer Cache PreWarm (flush prewarm buffers)
	   1		1	    0		0	     0		  N/A
TD-KTF map table enqueue (KTF dump entries)
	   1		1	    0		0	     0		  N/A
XR-Quiesce / Force Logging (database force logging)
	   1		1	    0		0	     0		  N/A
			  ------------------------------------------------------


Undo Segment Summary			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			  ------------------------------------------------------

Undo Segment Stats			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			  ------------------------------------------------------


Latch Activity				 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
AQ Background: interrupt	      1    0.0		   0	       12    0.0
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
AQ Coord jobx_kwsbgsgn l	     11    0.0		   0		0    N/A
AQ Message drive state o	      1    0.0		   0		0    N/A
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
AQ Sharded master pool l	     11    0.0		   0		0    N/A
AQ deq hash table latch 	      1    0.0		   0		0    N/A
ASM Keyed state latch		    123    1.6	  0.0	   0		0    N/A
	END IF;
ASM allocation			 20,452    0.0		   0		0    N/A
ASM connection state lat	  2,763    0.0		   0		0    N/A
ASM db client latch		    525    0.0		   0		0    N/A

ASM map headers 		    750    0.0		   0		0    N/A
ASM map load waiting lis	    375    0.0		   0		0    N/A
ASM map operation freeli	    471    0.0		   0		0    N/A
ASM map operation hash t     24,975,581    0.0	  0.1	   0		0    N/A
----------------------------------------------------------------------------------------------------------------------
ASM network background l	  2,630    0.0		   0		0    N/A
ASM network state latch 	    155    0.0		   0		0    N/A
ASM remote client latch 	      5    0.0		   0		0    N/A
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
AWR Alerted Metric Eleme	  4,378    0.0		   0		0    N/A
Autotask management		      6    0.0		   0		0    N/A
Change Notification Hash	    187    0.0		   0		0    N/A
Column stats entry latch	      1    0.0		   0		0    N/A
----------------------------------------------------------------------------------------------------------------------
Consistent RBA			 12,835    0.0		   0		0    N/A
DML lock allocation		767,573    0.0	  0.0	   0		0    N/A
Event Group Locks		    113    0.0		   0		0    N/A

FIB s.o chain latch		    150    0.0		   0		0    N/A
FOB consolidated s.o lis	    150    0.0		   0		0    N/A
File State Object Pool P	      1    0.0		   0		0    N/A
	IF  ( v_select_only_workload = TRUE ) THEN
GCS logfile block		      1    0.0		   0		0    N/A
GCS logfile write queue 	      1    0.0		   0		0    N/A
Hang Manager wait event 	     22    0.0		   0	    4,000    0.0
		-- handle case where user specified zero pct updates (a SELECT-only workload)
I/O Staticstics latch		      1    0.0		   0		0    N/A
ILM Stats Stripe Latch		      1    0.0		   0		0    N/A
ILM Stats main anchor la	    387    0.0		   0		0    N/A
		v_do_update := FALSE;
ILM access tracking exte	      1    0.0		   0		0    N/A
ILM activity tracking la	      1    0.0		   0		0    N/A
IM Global dictionary lat	      1    0.0		   0		0    N/A
		v_update_quota := TRUE ;
IM Global dictionary que	      1    0.0		   0		0    N/A
IM Global dictionary rw 	      1    0.0		   0		0    N/A
IM area sb latch		      1    0.0		   0		0    N/A
	ELSE
IM area scb latch		      1    0.0		   0		0    N/A
IM emb latch			      1    0.0		   0		0    N/A
IM seg hdr latch		      1    0.0		   0		0    N/A
IMFS defer write list		      1    0.0		   0		0    N/A
		IF ( v_update_only_workload = TRUE ) THEN
IMXT hash table latch		      1    0.0		   0		0    N/A
IPC other latch 		      5    0.0		   0		0    N/A
IPC stats buffer allocat	      1    0.0		   0		0    N/A
			-- handle case where user specified 100% updates
In memory undo latch		      1    0.0		   0		0    N/A
JS Sh mem access		     69    0.0		   0		0    N/A
JS broadcast add buf lat	     77    0.0		   0		0    N/A
			v_do_update := TRUE;
JS broadcast drop buf la	     77    0.0		   0		0    N/A
JS broadcast load blnc l	     77    0.0		   0		0    N/A
JS queue access latch		      1    0.0		   0		0    N/A
			v_update_quota := FALSE;
JS queue state obj latch	  2,856    0.0		   0		0    N/A
JS slv state obj latch		      1    0.0		   0		0    N/A
		ELSE
KCNIBR - invalid block r	      1    0.0		   0		0    N/A
KDCStatHash latch		      1    0.0		   0		0    N/A
KDFI Buffer Latch		      1    0.0		   0		0    N/A
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
KDFI Hash Bucket Latch		      1    0.0		   0		0    N/A
KDFI Hash Elem Latch		      1    0.0		   0		0    N/A
KDMADO action list latch	      1    0.0		   0		0    N/A
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
KDMADO bll latch		      1    0.0		   0		0    N/A

Latch Activity				 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
			IF ( v_update_quota = FALSE ) THEN
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0
				-- Handle case where user has set UPDATE_PCT to a valid value

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
				--
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
KDMADO latch			      1    0.0		   0		0    N/A
KFC FX Hash Latch		      1    0.0		   0		0    N/A
				-- We are doing updates during this run and quota has not been met yet
KFC Hash Latch			      1    0.0		   0		0    N/A
KFCL LE Freelist		      1    0.0		   0		0    N/A
KFIAS client latch		      1    0.0		   0		0    N/A
				-- We still vacillate until update quota has been met
KFIAS cluster latch		      1    0.0		   0		0    N/A
KFIAS endpoint latch		      1    0.0		   0		0    N/A
KFIAS node latch		      1    0.0		   0		0    N/A

KFIAS process latch		      1    0.0		   0		0    N/A
KFIAS queue latch		      1    0.0		   0		0    N/A
KFK SGA Libload latch		 12,122    0.0		   0		0    N/A
KFMD SGA			    194    0.0		   0		0    N/A
				IF ( MOD(v_random_block,  2) = 0 ) THEN
KGNFS-NFS:SHM structure 	      1    0.0		   0		0    N/A
KGNFS-NFS:SVR LIST		    114    0.0		   0		0    N/A
KJC message pool KGH cal	      1    0.0		   0		0    N/A
					v_do_update := TRUE;
KJC message pool free li	186,172    0.2	  0.2	   0	  255,485    6.5
KJC message pool pending	      1    0.0		   0		0    N/A
KJCT flow control latch       5,517,959    0.1	  0.0	   0		0    N/A
				ELSE
KMG MMAN ready and start	    113    0.0		   0		0    N/A
KSFS OFS ctx level paren	      1    0.0		   0		0    N/A
KSFS OFS req layer paren	      1    0.0		   0		0    N/A
					v_do_update := FALSE;
KSFS OFS sess layer pare	      1    0.0		   0		0    N/A
KSFS Receive and Send Qu	      1    0.0		   0		0    N/A
KSFS id table parent lat	      1    0.0		   0		0    N/A
				END IF;
KSFS ksfs_node latch		      1    0.0		   0		0    N/A
KSFSD name cache parent 	      1    0.0		   0		0    N/A
KSGL LS Segment latch		      1    0.0		   0		0    N/A
KSGL SGA anchor latch		      1    0.0		   0		0    N/A
			ELSE
KSIPC ASPC anchor latch 	      1    0.0		   0		0    N/A
KSIPC SGA allocation par	    489    0.8	  0.0	   0		0    N/A
KSIPCGSN Hash Table latc	      1    0.0		   0		0    N/A
				-- UPDATE quota has been filled,  force drain some SELECTs
KSIPCGSN Namespace latch	      1    0.0		   0		0    N/A
KSK PDB IO STAT 		      1    0.0		   0		0    N/A
KSRMA SGA anchor latch		      1    0.0		   0		0    N/A
KSRMF SGA anchor latch		      1    0.0		   0		0    N/A
				v_do_update := FALSE;
KSWL SGA anchor latch		      1    0.0		   0		0    N/A
KSXR hang analysis phase	    335    0.0		   0	       14    0.0
			END IF;
KSXR hang analysis phase	    215    0.0		   0		0    N/A
KSXR large replies		      2    0.0		   0		0    N/A
KTF sga latch			      2    0.0		   0	      109    0.0
KTILM latch			      1    0.0		   0		0    N/A
		END IF;
KTU in-memory txn table 	      1    0.0		   0		0    N/A
KTURMA ODPSCN latch		      1    0.0		   0		0    N/A
KTURMA SGA allocation pa	      1    0.0		   0		0    N/A
	END IF;
KWQMN job cache list lat	     48    0.0		   0		0    N/A
Latch for NonceHistory		      1    0.0		   0		0    N/A
Locator state objects po	      1    0.0		   0		0    N/A

Lost write change tracki	      1    0.0		   0		0    N/A
Lsod array latch		    184    0.0		   0		0    N/A
MGA asr alloc latch		      6    0.0		   0		0    N/A
----------------------------------------------------------------------------------------------------------------------
MGA heap latch			    252   12.3	  0.5	   0		0    N/A
MGA shared context latch	  2,075    4.6	  1.1	   0		0    N/A
MGA shared context root 	    252   27.0	  1.0	   0		0    N/A
MQL Tracking Latch		      0    N/A		   0		7    0.0
-- The type of SQL is now determined...execute it in the following section
Memory Management Latch 	      0    N/A		   0	      113    0.0
Memory Queue			      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A
----------------------------------------------------------------------------------------------------------------------
Memory Queue Message Sub	      1    0.0		   0		0    N/A
Memory Queue Message Sub	      1    0.0		   0		0    N/A


Latch Activity				 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
	IF ( v_do_update != TRUE ) THEN
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
		--
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
		-- Do a SELECT statement
Memory Queue Subscriber 	      1    0.0		   0		0    N/A
Message cache latch		      1    0.0		   0		0    N/A
MinActiveScn Latch		     18    0.0		   0		0    N/A
Mutex				      1    0.0		   0		0    N/A
		-- Work out scan or random
Mutex Stats			      1    0.0		   0		0    N/A
Nologging Standby SCN Ti	    108    0.0		   0		0    N/A
OS process			    707    0.0		   0		0    N/A
OS process allocation		    805    0.1	  1.0	   0		0    N/A
		IF  ( v_random_workload_only = TRUE ) THEN
OS process: request allo	    123    0.0		   0		0    N/A
PDB Hash Table Latch		      1    0.0		   0		0    N/A
PDB LRU structure		      1    0.0		   0		0    N/A
PL/SQL warning settings 	    110    0.0		   0		0    N/A
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
PX hash array latch		      1    0.0		   0		0    N/A
Parent latch for depende	      1    0.0		   0		0    N/A
Parent latch for query h	      1    0.0		   0		0    N/A
Parent latch for segment	      1    0.0		   0		0    N/A
			v_do_scan_query := FALSE;
QMT				      1    0.0		   0		0    N/A
Real-time descriptor lat	 37,662    0.0		   0		0    N/A
			v_scan_query_quota := TRUE ;
Report Request stats lat	     22    0.0		   0		0    N/A
Report Request struct la	     20    0.0		   0		0    N/A
Request holder compeltio	      3    0.0		   0		0    N/A
		ELSE
Retry Ht elm latch		      1    0.0		   0		0    N/A
Retry bkt latch 		      1    0.0		   0		0    N/A
SGA Blackbox latch		      1    0.0		   0		0    N/A
SGA IO buffer pool latch	    378    0.0		   0	      366    0.0
			IF ( v_scan_workload_only = TRUE ) THEN
SGA Logging Bkt Latch		      1    0.0		   0		0    N/A
SGA Logging Log Latch		 11,173    0.0		   0		0    N/A
SGA blob parent 		      1    0.0		   0		0    N/A
SGA bucket locks		      1    0.0		   0		0    N/A
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
SGA heap locks			      1    0.0		   0		0    N/A
SGA pool locks			      1    0.0		   0		0    N/A
				v_do_scan_query := TRUE;
SO private so latch		    447    0.0		   0	       43    0.0
SQL memory manager latch	      1    0.0		   0	      113    0.0
				v_scan_query_quota := FALSE;
SQL memory manager worka	 10,409    0.0		   0		0    N/A
SR Stats Stripe Latch		      1    0.0		   0		0    N/A
Sched IM Job latch		      6    0.0		   0		0    N/A
			ELSE
Sched InMem Job Cache		      1    0.0		   0		0    N/A
Shared B-Tree			     13    0.0		   0		0    N/A
Streams Generic 		      1    0.0		   0		0    N/A
Subscriber Ht elm latch 	      1    0.0		   0		0    N/A
				IF ( v_scan_query_quota = FALSE ) THEN
Testing 			      1    0.0		   0		0    N/A
Token Manager			      1    0.0		   0		0    N/A
Txn Ht elm latch		      1    0.0		   0		0    N/A
Txn bkt latch			      1    0.0		   0		0    N/A
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
UM object latch 		      1    0.0		   0		0    N/A
WCR: sync			      1    0.0		   0		0    N/A
Write State Object Pool 	      1    0.0		   0		0    N/A
X$KSFQP 			      1    0.0		   0		0    N/A
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
XDB NFS Security Latch		      1    0.0		   0		0    N/A
XDB unused session pool 	      1    0.0		   0		0    N/A
XDB used session pool		      1    0.0		   0		0    N/A
active checkpoint queue 	 21,236    0.6	  0.0	   0		0    N/A
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
active service list		  2,902    0.0	  0.0	   0	    1,374    0.0
archive destination		     12    0.0		   0		0    N/A
begin backup scn array		     66    0.0		   0		0    N/A
buffer pool			      2    0.0		   0		0    N/A
						v_do_scan_query := TRUE;
business card			    189    0.0		   0		0    N/A
cache buffer handles		     77    0.0		   0		0    N/A
cache buffers chains	     75,127,138    0.0	  0.1	   0   19,839,732    0.0
					ELSE
cache buffers lru chain       3,665,916    0.2	  0.0	   0   12,491,529    0.5

Latch Activity				 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
						v_do_scan_query := FALSE;
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					END IF;
					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
				ELSE
cache table scan latch		    329    0.0		   0	      329    0.0
call allocation 		  2,689    0.7	  0.7	   0		0    N/A
					-- Scan quota has been filled,	force drain some random access SELECTS
change notification clie	      1    0.0		   0		0    N/A
channel handle pool latc	    249    0.8	  0.0	   0		0    N/A
channel operations paren	  3,208    0.1	  0.0	   0	       14    0.0
					v_do_scan_query := FALSE;
checkpoint queue latch	      1,911,599    0.0	  0.0	   0	1,221,736    0.0
client/application info 	    678    0.0		   0		0    N/A
compile environment latc	    119    0.0		   0		0    N/A
corrupted undo seg latch	      7    0.0		   0		0    N/A
				END IF;
cp handoff latch		      1    0.0		   0		0    N/A
cp pool latch			      1    0.0		   0		0    N/A
cp server hash latch		      1    0.0		   0		0    N/A
cp sga latch			      5    0.0		   0		0    N/A
			END IF;
cp srv type state latch 	    340    0.0		   0		0    N/A
cp srv type wait latch		      1    0.0		   0		0    N/A
cr slave free list		      1    0.0		   0		0    N/A
cvmap freelist lock		      1    0.0		   0		0    N/A
		END IF;
deferred cleanup latch		      5    0.0		   0		0    N/A
dispatcher info 		      4    0.0		   0		0    N/A
dml lock allocation		      5    0.0		   0		0    N/A


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
done queue latch		      1    0.0		   0		0    N/A
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
dtp latch			    122    0.8	  0.0	   0		0    N/A
dummy allocation		    339    0.0		   0		0    N/A

eighth spare latch - X p	      1    0.0		   0		0    N/A
eleventh spare latch - c	      1    0.0		   0		0    N/A
enqueue freelist latch		      1    0.0		   0	   15,411    0.0
END;</pre_sqltext></td></tr>
enqueue hash chains	      2,325,386    0.1	  0.1	   0	      537    0.0
enqueues			    979    0.0		   0		0    N/A
error message lists		    468    0.0		   0		0    N/A
<tr><td scope="row" class='awrnc'><a class="awr" name="03guhbfpak0w7"></a>03guhbfpak0w7</td><td class='awrnc'><pre_sqltext class="awr">select /*+ index(idl_ub1$ i_idl_ub11) */ piece#, length, piece from idl_ub1$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
fast space usage latch		     64    0.0		   0		0    N/A
fifteenth spare latch - 	      1    0.0		   0		0    N/A
file cache latch		    176    0.0		   0		0    N/A
first Audit Vault latch 	      1    0.0		   0		0    N/A
<tr><td scope="row" class='awrc'><a class="awr" name="04kug40zbu4dm"></a>04kug40zbu4dm</td><td class='awrc'><pre_sqltext class="awr">select policy#,  action# from aud_object_opt$ where object# = :1 and type = 2</pre_sqltext></td></tr>
flash file access latch 	      1    0.0		   0		0    N/A
flashback copy			      1    0.0		   0		0    N/A
fourteenth spare latch -	      1    0.0		   0		0    N/A
<tr><td scope="row" class='awrnc'><a class="awr" name="0gx3b09qrx9f5"></a>0gx3b09qrx9f5</td><td class='awrnc'><pre_sqltext class="awr">select obj#, index# from oid$ where user#=:1 and oid$=:2</pre_sqltext></td></tr>
fourth Audit Vault latch	      1    0.0		   0		0    N/A
gc element		     11,044,840    0.0	  0.1	   0	  830,936    0.1
gc imc list			    287    1.7	  0.0	   0		0    N/A
<tr><td scope="row" class='awrc'><a class="awr" name="16p07bywtb14q"></a>16p07bywtb14q</td><td class='awrc'><pre_sqltext class="awr">DECLARE
gc xid list			    101    0.0		   0		0    N/A
gcs affinity object free	      5    0.0		   0		0    N/A
gcs commit scn state		      1    0.0		   0		0    N/A
v_default_schema_number PLS_INTEGER := '64';
gcs nodemap pool		473,269    0.0	  0.1	   0		0    N/A
gcs opaque info freelist	461,589    0.0	  0.0	   0		0    N/A
v_update_pct PLS_INTEGER := '10';
gcs partitioned table ha     16,269,801    0.0	  0.0	   0	9,166,063    0.0
gcs pcm hashed value buc	      1    0.0		   0		0    N/A
gcs remaster request que	      1    0.0		   0		0    N/A
v_max_loop_iterations PLS_INTEGER := '0';
gcs remastering latch		 51,883    0.6	  0.6	   8	    5,260    9.7
gcs resource freelist	      1,178,418    0.0	  0.0	   0	  277,362    0.1
v_seconds_to_run PLS_INTEGER := '300';
gcs resource hash	     18,758,809    0.0	  0.1	   1	      223    0.0
gcs resource scan list		      1    0.0		   0		0    N/A
gcs resource timerq list	      1    0.0		   0		0    N/A
v_scale PLS_INTEGER := '32768';
gcs resource validate li	      1    0.0		   0		0    N/A
v_work_unit PLS_INTEGER := '4' ;
gcs shadows freelist		893,924    0.0	  0.0	   0		0    N/A
ges cached resource list	302,195    0.0	  0.0	   0	   15,457    0.0
v_redo_stress  VARCHAR2(12) := 'LITE';
ges deadlock list		      4    0.0		   0		0    N/A
ges domain table		947,841    0.0		   0		0    N/A
ges enqueue table freeli	771,969    0.0	  0.1	   0		0    N/A
v_hot_schema_modulus PLS_INTEGER := '0';
ges group table 		949,554    0.0		   0		0    N/A
ges process hash list		 60,818    0.0	  0.0	   0		0    N/A

v_do_hotspot   VARCHAR(7) := 'FALSE';
Latch Activity				 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
v_hotspot_mb  NUMBER := '10';
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0
v_hotspot_offset_mb NUMBER := '0';

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
v_hotspot_modulus  PLS_INTEGER := '0';
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------

ges process parent latch      1,898,958    0.0	  0.5	   0		0    N/A
ges process table freeli	    123    0.0		   0		0    N/A
ges remote lock freelist	     27    0.0		   0		0    N/A
v_sleep_modulus PLS_INTEGER := '0';
ges resource hash list	      1,039,488    0.0	  0.1	   0	      147    0.7
ges resource scan list		     90    0.0		   0		0    N/A
v_sleep_min NUMBER := '.1';
ges resource table freel	    943    0.0		   0		0    N/A
ges s-lock bitvec freeli	  2,867    0.0		   0		0    N/A
ges timeout list		    251    0.0		   0	      103    0.0
v_sleep_max NUMBER := '.5';
ges value block free lis	      1    0.0		   0		0    N/A
global KZLD latch for au	      1    0.0		   0		0    N/A
global tx hash mapping		      1    0.0		   0		0    N/A
v_scan_query_pct PLS_INTEGER := '0';
granule from data transf	      1    0.0		   0		0    N/A
gws:Sharding global desc	     24    0.0		   0		0    N/A
v_obfuscate VARCHAR(5)	:= 'FALSE';
hash table Sql Plan Find	      0    N/A		   0	      277    0.0
hash table column usage 	      0    N/A		   0	   78,315    0.0
hash table expression us	      1    0.0		   0		0    N/A

hash table sql contorl l	      1    0.0		   0		0    N/A
heartbeat check 		      1    0.0		   0	      238    0.0

heartbeat structure mana	      0    N/A		   0	      170    0.0
imc buf hdl lat 		      1    0.0		   0		0    N/A
imc cr clone buf		      1    0.0		   0		0    N/A
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
imc hash lat			      1    0.0		   0		0    N/A
imc sj lat			      1    0.0		   0		0    N/A
imc srchsp lat			      1    0.0		   0		0    N/A
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;
imc-txn-wrk-lat 		      1    0.0		   0		0    N/A
in-memory area latch		      1    0.0		   0		0    N/A
in-memory columnar segme	      1    0.0		   0		0    N/A

in-memory columnar ts ex	      1    0.0		   0		0    N/A
in-memory global pool la	      1    0.0		   0		0    N/A
internal temp table obje	    473    0.0		   0		0    N/A
v_num_tmp NUMBER := 0;
interrupt manipulation		    524    0.0		   0		0    N/A
intra txn parallel recov	      1    0.0		   0		0    N/A

io pool granule list		    153    0.0		   0		0    N/A
io pool granule metadata	    310    0.0		   0		0    N/A
v_loop_cnt PLS_INTEGER := 0;
job workq parent latch		      1    0.0		   0		0    N/A
job_queue_processes para	      6    0.0		   0		0    N/A
k2q global data latch		    226    0.0		   0		0    N/A
v_rowcnt PLS_INTEGER := 0;
k2q lock allocation		      1    0.0		   0		0    N/A
kKCN Cqn SGA			      1    0.0		   0		0    N/A
kcb DW scan objtemp hash	      1    0.0		   0		0    N/A
v_updates_cnt PLS_INTEGER := 0;
kcn buffer chains		      1    0.0		   0		0    N/A
kdlx hb parent latch		      1    0.0		   0		0    N/A
kgb parent			      1    0.0		   0		0    N/A
v_selects_cnt PLS_INTEGER := 0;
kgnfs mount latch		      1    0.0		   0		0    N/A
kjbr roi instance map		      1    0.0		   0		0    N/A

kjci objects freelist la	    775    0.0		   0		0    N/A
kjci process context lat	    768    0.5	  0.0	   0	    5,578    0.0
kjci process list latch 	    427    0.2	  0.0	   0		0    N/A
v_random_access_queries_cnt PLS_INTEGER := 0;
kjci request sequence la	     83    0.0		   0		0    N/A
kjcipctx state object fr	    123    0.0		   0		0    N/A
kjoedcso state object fr	      5    0.0		   0		0    N/A
v_scan_queries_cnt PLS_INTEGER := 0;
kjoeq omni enqueue hash 	      1    0.0		   0		0    N/A
kjoer owner hash bucket 	      1    0.0		   0		0    N/A

kjpm my inst data		     10    0.0		   0		0    N/A
kjsc Request obj freelis	    250    0.0		   0		0    N/A
kjsc Ring Buffer obj fre	    125    0.0		   0		0    N/A
v_do_scan_query BOOLEAN :=FALSE;
kjsc protect control req	    125    0.0		   0	    3,447    0.0
kjsc protect warm up con	    227    0.0		   0		0    N/A
kjsca protect pkey hash 	  3,448    0.0		   0		0    N/A
v_scan_query_quota  BOOLEAN := FALSE;
kjsca protect service ha	      1    0.0		   0		0    N/A

Latch Activity				 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
v_scan_workload_only BOOLEAN := FALSE;
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
v_random_workload_only BOOLEAN := FALSE;
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct

				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------

kjscpss state object fre	    125    0.0		   0		0    N/A
kokc descriptor allocati	    476    0.0		   0		0    N/A
kpoxft latch			      0    N/A		   0	      118    0.8
v_random_block PLS_INTEGER := 1;
krso process			     12    0.0		   0		0    N/A
ksevn object root latch 	    113    0.0		   0		0    N/A
ksfv messages			      1    0.0		   0		0    N/A
v_tmp PLS_INTEGER;
ksi resource reuse count	      1    0.0		   0		0    N/A
ksim group membership ca	  2,791    0.0		   0		0    N/A
v_now PLS_INTEGER;
ksim membership request 	      0    N/A		   0	      197    0.0
ksns object latch		      1    0.0		   0		0    N/A
kss move lock			      3    0.0		   0		0    N/A
v_brick_wall PLS_INTEGER;
ksuosstats global area		     49    0.0		   0	      129    0.0
ksutcpistat latch		      1    0.0		   0		0    N/A
ksv allocation latch		      9    0.0		   0		0    N/A

ksv class latch 		  8,500    0.0	  1.0	   0		0    N/A
ksv msg queue latch		    178    0.0		   0	      177    0.0
ksxp shared latch		    123    0.0		   0		0    N/A
v_begin_time PLS_INTEGER;
ksxp so latch			    123    0.8	  0.0	   0		0    N/A
v_end_time PLS_INTEGER;
ksz_so allocation latch 	    123    0.8	  1.0	   0		0    N/A
ktfbn latch			    131    0.0		   0		0    N/A
ktm adg jrnls			      1    0.0		   0		0    N/A
v_total_time PLS_INTEGER;
ktm adg lookuptable leve	      1    0.0		   0		0    N/A
ktm adg lookuptable leve	      1    0.0		   0		0    N/A
ktm adg space			      1    0.0		   0		0    N/A
v_begin_cpu_tm PLS_INTEGER;
ktm adg stages			      1    0.0		   0		0    N/A
v_end_cpu_tm PLS_INTEGER;
ktm adg worklink		      1    0.0		   0		0    N/A
ktm global data 		     20    0.0		   0		0    N/A
v_total_cpu_tm PLS_INTEGER;
ktm prv jrnls			      1    0.0		   0		0    N/A
ktmpj HT ls			      1    0.0		   0		0    N/A
kwqbsn:qsga			     12    0.0		   0		0    N/A

kwslbmdl: metadata latch	     12    0.0		   0		0    N/A
kwslbql: queue latch		      1    0.0		   0		0    N/A
kwslbutl: uncommitted tx	      1    0.0		   0		0    N/A
kwsptQcachLt: queue cach	      1    0.0		   0		0    N/A
v_do_sleeps BOOLEAN := FALSE;
kwsptTrncTsksLt: trunc t	      1    0.0		   0		0    N/A
kwsptjobAdPtLt: AdPt lis	      8    0.0		   0		0    N/A
kwsslLat: skiplist latch	      1    0.0		   0		0    N/A
v_loop_control BOOLEAN := FALSE;
kxfxscanrate_latch		      1    0.0		   0		0    N/A
lgwr LWN SCN			 12,872    0.1	  0.1	   0		0    N/A
list of block allocation	    151    0.0		   0		0    N/A
v_update_quota BOOLEAN := FALSE;
loader state object free	    160    0.0		   0		0    N/A
lob segment dispenser la	    256    0.0		   0		0    N/A
lob segment hash table l	    198    0.0		   0		0    N/A
v_select_only_workload BOOLEAN := FALSE;
lob segment query latch 	      1    0.0		   0		0    N/A
lock DBA buffer during m	      1    0.0		   0		0    N/A
log write info			      0    N/A		   0	   13,319    2.8
v_update_only_workload BOOLEAN := FALSE;
log write worker phase		      1    0.0		   0		0    N/A
logical standby cache		      1    0.0		   0		0    N/A
logminer context allocat	      1    0.0		   0		0    N/A
v_do_update BOOLEAN := FALSE;
logminer local			      1    0.0		   0		0    N/A
logminer work area		      1    0.0		   0		0    N/A
longop free list parent 	      1    0.0		   0		0    N/A
v_do_hot_schema BOOLEAN := FALSE;
managed standby 		     12    0.0		   0		0    N/A
message bitmap latch		      1    0.0		   0		0    N/A
message pool operations 	    955    0.0		   0		0    N/A
v_stop_immediate BOOLEAN := FALSE;
messages			 88,766    0.8	  0.0	   0		0    N/A
msg queue latch 		      1    0.0		   0		0    N/A
multiblock read objects 	  1,206    0.0		   0		0    N/A
v_sharing_schema BOOLEAN := FALSE;
name-service memory obje	    313    0.0		   0		0    N/A
name-service namespace b	  2,527    0.0		   0		0    N/A

v_seed VARCHAR2(128);
Latch Activity				 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
v_home_schema_str VARCHAR2(80);
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
v_scratch VARCHAR2(200) ;
				    Get    Get	 Slps	Time	   NoWait NoWait
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss

------------------------ -------------- ------ ------ ------ ------------ ------
name-service pending que	    182    0.0		   0		0    N/A
v_cpu_pct NUMBER(6, 3);
name-service request		      4    0.0		   0		0    N/A
name-service request que	  3,750    0.0		   0		0    N/A
ncodef allocation latch 	      5    0.0		   0		0    N/A
v_my_serial NUMBER(16);
ninth spare latch - X pa	      1    0.0		   0		0    N/A
object queue header free      1,057,429    0.0	  0.2	   0		0    N/A

object queue header oper     25,846,032    0.0	  0.1	   0	  354,970    0.0
object queue memory		      1    0.0		   0		0    N/A
object stats modificatio	     89    0.0		   0		0    N/A
BEGIN
parallel query alloc buf	  1,618    0.0		   0	      440    0.0
parallel query stats		    363    0.0		   0		0    N/A
parallel txn reco latch 	    507    0.0		   0		0    N/A

parameter table manageme	  1,351    0.0		   0		0    N/A
pdb enqueue hash chains 	      1    0.0		   0		0    N/A
peshm				      1    0.0		   0		0    N/A
pesom_free_list 		      1    0.0		   0		0    N/A
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
pesom_hash_node 		      1    0.0		   0		0    N/A
pkey global statistics		      1    0.0		   0		0    N/A
pmon dead latch 		      6    0.0		   0		0    N/A
EXECUTE IMMEDIATE v_home_schema_str;
post/wait queue 		926,442    1.2	  0.0	   0	  454,499    1.0
process allocation		  1,750    0.0		   0		0    N/A
process group creation		    123    0.0		   0		0    N/A

process memory detail		      1    0.0		   0		0    N/A
process pkey statistics 	      1    0.0		   0		0    N/A
process queue			    698    0.0		   0		0    N/A

process queue reference 	 28,126    0.0	  0.0	   0	    2,984    0.4
qmn task queue latch		     48    0.0		   0		0    N/A
IF ( v_hot_schema_modulus != 0 ) THEN
quarantine object		      5    0.0		   0		0    N/A
query server freelists		    872    0.0		   0		0    N/A
query server process		    236    0.0		   0		1    0.0
	v_do_hot_schema := TRUE;
queued dump request		      1    0.0		   0		0    N/A
queuing load statistics 	      1    0.0		   0		0    N/A
read-moslty lock queue u	      1    0.0		   0		0    N/A
END IF;
recovery domain hash buc	  4,211    0.0		   0		0    N/A
redo allocation 		 73,458    0.9	  0.1	   0	1,560,115    0.6
redo copy			      1    0.0		   0	1,561,101    0.0

redo writing			 67,527    0.1	  0.0	   0		0    N/A
remote tool request latc	    228    0.0		   0		0    N/A
resmgr group change latc	    108    0.0		   0		0    N/A
IF ( v_sleep_modulus != 0 )	  THEN
resmgr:active threads		    348    0.0		   0		6    0.0
resmgr:actses change gro	    110    0.0		   0		0    N/A
resmgr:actses change sta	      1    0.0		   0		0    N/A
	v_do_sleeps := TRUE;
resmgr:free threads list	    338    0.6	  0.0	   0		0    N/A
resmgr:plan CPU method		      1    0.0		   0		0    N/A
resmgr:plan change alloc	      1    0.0		   0		0    N/A
END IF;
resmgr:plan change latch	      1    0.0		   0		0    N/A
resmgr:resource group CP	      1    0.0		   0		0    N/A
resmgr:schema config		     18    0.0		   0		6    0.0

resmgr:session queuing		      1    0.0		   0		0    N/A
row cache objects		      1    0.0		   0		0    N/A
IF ( v_max_loop_iterations &gt; 0 )  THEN
rt rmv count latch		      0    N/A		   0	      170    0.0
second Audit Vault latch	      1    0.0		   0		0    N/A
segmented array pool		    150    0.0		   0		0    N/A
	v_loop_control := TRUE ;
sequence cache			    604    0.0		   0		0    N/A
service drain list		    341    0.0		   0		0    N/A
session allocation		219,405    0.0	  0.0	   0	  218,882    0.0
END IF;
session idle bit		440,555    0.0	  0.0	   0		0    N/A
session queue latch		      1    0.0		   0		0    N/A
session state list latch	    420    0.0		   0		0    N/A

session statistics		    339    0.0		   0		0    N/A

Latch Activity				 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
IF ( v_update_pct = 0 ) 	  THEN
-> "Get Requests", "Pct Get Miss" and "Avg Slps/Miss" are statistics for
   willing-to-wait latch get requests
-> "NoWait Requests", "Pct NoWait Miss" are for no-wait latch get requests
	v_select_only_workload := TRUE;
-> "Pct Misses" for both should be very close to 0.0

					   Pct	  Avg	Wait		     Pct
				    Get    Get	 Slps	Time	   NoWait NoWait
END IF;
Latch Name		       Requests   Miss	/Miss	 (s)	 Requests   Miss
------------------------ -------------- ------ ------ ------ ------------ ------
session switching		    128    5.5	  0.0	   0		0    N/A

session timer			    113    0.0		   0		0    N/A
seventh spare latch - X 	      1    0.0		   0		0    N/A
sga hash table parent la	      1    0.0		   0		0    N/A
IF ( v_update_pct = 100 )	  THEN
shard latch			      1    0.0		   0		0    N/A
shardgroup list latch		  1,035    0.0		   0		0    N/A
shared pool			163,594    0.9	  0.1	   0		0    N/A
	v_update_only_workload := TRUE;
shared pool sim alloc		     11    0.0		   0		0    N/A
shared pool simulator		  2,844    0.0		   0		0    N/A
shared server configurat	    114    0.0		   0		0    N/A
END IF;
sim partition latch		      1    0.0		   0		0    N/A
simulator hash latch	      3,500,376    0.0	  0.0	   0		0    N/A
simulator lru latch		    581    0.7	  1.0	   0	2,280,395    0.1

sixth spare latch - X pa	      1    0.0		   0		0    N/A
sort extent pool		    757    0.0		   0		0    N/A
space background task la	    929   57.5	  1.0	   0	      219    6.4
IF ( v_scan_query_pct = 0 ) 	THEN
state object free list		      2    0.0		   0		0    N/A
statistics aggregation		    145    0.0		   0		0    N/A
subscriber Ht bkt		      1    0.0		   0		0    N/A
	v_random_workload_only := TRUE;
tablespace key chain		      1    0.0		   0		0    N/A
temp lob duration state 	    108    0.0		   0		0    N/A
temporary table state ob	     88    0.0		   0		0    N/A
END IF;
tenth spare latch - X pa	      1    0.0		   0		0    N/A
test excl. parent l0		      1    0.0		   0		0    N/A
test excl. parent2 l0		      1    0.0		   0		0    N/A

test excl. parent2 lmid 	      1    0.0		   0		0    N/A
test mixed exclusive		      1    0.0		   0		0    N/A
test mode exclusive		      1    0.0		   0		0    N/A
IF ( v_scan_query_pct = 100 ) 	THEN
test open exclusive		      1    0.0		   0		0    N/A
test pdb exclusive		      1    0.0		   0		0    N/A
test shared parent2 lmid	      1    0.0		   0		0    N/A
	v_scan_workload_only := TRUE;
thirteenth spare latch -	      1    0.0		   0		0    N/A
threshold alerts latch		     16    0.0		   0		0    N/A
END IF;
transaction allocation		    358    0.0		   0		0    N/A
twelfth spare latch - ch	      1    0.0		   0		0    N/A
twenty-fifth spare latch	      1    0.0		   0		0    N/A

twenty-first spare latch	      1    0.0		   0		0    N/A
twenty-fourth spare latc	      1    0.0		   0		0    N/A
twenty-second spare latc	      1    0.0		   0		0    N/A
twenty-third spare latch	      1    0.0		   0		0    N/A
v_seconds_to_run := v_seconds_to_run * 100 ;
undo global data	      1,209,150    0.0	  0.0	   0		0    N/A
virtual circuit buffers 	      1    0.0		   0		0    N/A
virtual circuit holder		      1    0.0		   0		0    N/A

virtual circuit queues		      1    0.0		   0		0    N/A
			  ------------------------------------------------------


SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);
Latch Sleep Breakdown			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> ordered by misses desc

				       Get				   Spin

Latch Name			  Requests	 Misses      Sleeps	   Gets
-------------------------- --------------- ------------ ----------- -----------
post/wait queue 		   926,442	 11,350 	 80	 11,273
-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
cache buffers lru chain 	 3,665,916	  8,082 	362	  7,747
cache buffers chains		75,127,138	  7,424       1,074	  6,418
KJCT flow control latch 	 5,517,959	  6,735 	332	  6,413
-- DBMS_RANDOM.seed (val =&gt; v_seed);
gcs resource hash		18,758,809	  4,447 	506	  3,986
gc element			11,044,840	  4,296 	414	  3,907
ASM map operation hash tab	24,975,581	  2,322 	218	  2,117

shared pool			   163,594	  1,450 	 77	  1,381
enqueue hash chains		 2,325,386	  1,164 	 93	  1,079
messages			    88,766	    752 	  6	    746
redo allocation 		    73,458	    680 	 45	    636
v_begin_time := DBMS_UTILITY.GET_TIME();
object queue header operat	25,846,032	    571 	 33	    540
space background task latc	       929	    534 	523	    109
KJC message pool free list	   186,172	    437 	 80	    363
v_now := v_begin_time ;
gcs resource freelist		 1,178,418	    394 	  6	    388
ges resource hash list		 1,039,488	    305 	 39	    268
gcs remastering latch		    51,883	    295 	184	    125
ges enqueue table freelist	   771,969	    183 	 19	    165
v_brick_wall := v_now + v_seconds_to_run ;
active checkpoint queue la	    21,236	    135 	  1	    134
checkpoint queue latch		 1,911,599	     96 	  2	     94
MGA shared context latch	     2,075	     95 	104	     13
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
undo global data		 1,209,150	     90 	  4	     86
MGA shared context root la	       252	     68 	 70	      9
gcs nodemap pool		   473,269	     67 	  7	     60

redo writing			    67,527	     67 	  1	     66
ges cached resource lists	   302,195	     47 	  1	     46
MGA heap latch			       252	     31 	 15	     18
call allocation 		     2,689	     18 	 12	      9
----------------------------------------------------------------------------------------------------------------------
lgwr LWN SCN			    12,872	     12 	  1	     11
object queue header freeli	 1,057,429	      5 	  1	      4
simulator lru latch		       581	      4 	  4	      1
ges process parent latch	 1,898,958	      2 	  1	      1
-- The following WHILE loop is the master work loop control
OS process allocation		       805	      1 	  1	      0
ksv class latch 		     8,500	      1 	  1	      0
ksz_so allocation latch 	       123	      1 	  1	      0
----------------------------------------------------------------------------------------------------------------------
			  ------------------------------------------------------


Latch Miss Sources			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> only latches with sleeps are shown
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
-> ordered by name, sleeps desc

						     NoWait		 Waiter
Latch Name		 Where			     Misses	Sleeps	 Sleeps

------------------------ -------------------------- ------- ---------- --------
ASM map operation hash t kffmTranslate			  0	   127	    119
ASM map operation hash t kffmDoDone_1			  0	    90	     95
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
ASM map operation hash t kffmUnidentify 		  0	     1	      1
KJC message pool free li kjcspfmbq: free vector of	  0	    44	      0
KJC message pool free li kjcsmpav: allocate a msg b	  0	    36	     80
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
KJCT flow control latch  kjctcsnd: send normal mess	  0	   153	    203
KJCT flow control latch  kjcts_sedeqv3: dequeue a v	  0	    84	      9
KJCT flow control latch  kjcts_sqenq: queue a messa	  0	    54	     76
KJCT flow control latch  kjctr_updatetkt: update ti	  0	    26	     25
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
KJCT flow control latch  kjcts_sqenq2: queue a mess	  0	    12	     13
KJCT flow control latch  kjctr_releasetkt: change t	  0	     2	      2
KJCT flow control latch  kjcts_adjtkt: adjust send	  0	     1	      4
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
MGA pid alloc latch	 ksm_mga_sctx_rtrcv_do_whr2	  0	     4	     52
MGA shared context latch ksm_mga_detach_whr2		  0	    57	     30
MGA shared context latch ksm_mga_sync_whr1		  0	    43	     22
			DBMS_LOCK.SLEEP(v_num_tmp);
MGA shared context root  ksm_mga_detach_whr1		  0	    70	     70
OS process allocation	 kso_delete_process:1		  0	     1	      1
active checkpoint queue  kcbbacq: scan active check	  0	     1	      0
		END IF;
cache buffers chains	 kcbgtcr: slow path excl	  0	   690	    165
cache buffers chains	 kclcls_3			  0	   193	     22
cache buffers chains	 kcbzgb: scan from tail now	  0	   129	      0
	END IF;
cache buffers chains	 kcbgcur: slow path		  0	    82	     15
cache buffers chains	 kcbgtcr: convert latch 	  0	    59	      0
cache buffers chains	 kcbzib: finish processing	  0	    40	    168

cache buffers chains	 kclpdcl			  0	    27	      0
cache buffers chains	 kcbgtcr: fast path exam	  0	    20	    163
cache buffers chains	 kcbbic2			  0	    16	     45
cache buffers chains	 kcbbic1			  0	    14	     19
	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
cache buffers chains	 kcbgtcr: fast path pin 	  0	    14	    207
cache buffers chains	 kcbgcur: fast path excl	  0	    12	     15
cache buffers chains	 kcbzwb 			  0	    11	     11
cache buffers chains	 kcbbxsv			  0	    10	     29
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
cache buffers chains	 kcbrls: fast pin release	  0	    10	    350
cache buffers chains	 kclrlstp			  0	     7	      1
cache buffers chains	 kcbchg: aux pin		  0	     6	     14
cache buffers chains	 kcbnlc 			  0	     4	     18
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
cache buffers chains	 kclexpandlock			  0	     4	     17
cache buffers chains	 kcbzwc 			  0	     3	      4
cache buffers chains	 kcbchg: change complete	  0	     2	     22
			v_sharing_schema := TRUE ;
cache buffers chains	 kcbchg: cur pin change 	  0	     1	     14
cache buffers chains	 kcbgtcr: convert latch 4	  0	     1	      0
cache buffers chains	 kcbnew: new latch again	  0	     1	      3
cache buffers chains	 kcbnew_1			  0	     1	      0
		ELSE
cache buffers chains	 kcbzibmlt: multi-block rea	  0	     1	      0
cache buffers chains	 kclantilock			  0	     1	      2
			IF ( v_sharing_schema = TRUE ) THEN
cache buffers chains	 kclrwrite_3			  0	     1	      0
cache buffers lru chain  kcbzgws			  0	   295	      0
cache buffers lru chain  kcbzgb_2			  0	    58	    107
				EXECUTE IMMEDIATE v_home_schema_str;
cache buffers lru chain  kcbbic2			  0	     4	    136
cache buffers lru chain  kcbzgb_1			  0	     3	      4
				v_sharing_schema := FALSE;
cache buffers lru chain  kcbbxsv: move to being wri	  0	     1	      0
cache buffers lru chain  kcbzgb 			  0	     1	     35
call allocation 	 ksuxds 			  0	    12	     10
checkpoint queue latch	 kcbklbc_cql			  0	     1	      0
			END IF;
checkpoint queue latch	 kcbkubc_4			  0	     1	      0
gc element		 kclnfndnewm			  0	   173	     87
gc element		 kclulb 			  0	    50	     72
gc element		 kclfwrite1			  0	    46	     47
		END IF;
gc element		 kclpdcl			  0	    44	     19
gc element		 kclnfndx			  0	    29	     44

Latch Miss Sources			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
	END IF;
-> only latches with sleeps are shown
-> ordered by name, sleeps desc

						     NoWait		 Waiter

Latch Name		 Where			     Misses	Sleeps	 Sleeps
------------------------ -------------------------- ------- ---------- --------
gc element		 kclrwrite			  0	    24	     31
gc element		 kclantilock_1			  0	    14	      6
	-- Choose the random block. The v_do_hotspot handler that follows can override.
gc element		 kclnfnds			  0	    10	     10
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


gc element		 KCLUNLNK			  0	     9	     93
gc element		 kclplz_1			  0	     9	      3
		IF ( v_do_scan_query != TRUE ) THEN
gc element		 kclplz 			  0	     8	      0
gc element		 kclrwrite_1			  0	     7	      5
			SELECT COUNT(c2) INTO v_rowcnt
gc element		 kclpdc_1			  0	     3	     13
gc element		 kclbla 			  0	     2	      0
gc element		 kclhngcbk1			  0	     1	      0
			FROM cf1
gc element		 kclnfnd			  0	     1	      0
gcs nodemap pool	 kjbrnmapalloc_2		  0	     4	      4
gcs nodemap pool	 kjbrnmapalloc_1		  0	     3	      3
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
gcs remastering latch	 kjfcdrmrfg beginning		  0	    97	      0
gcs remastering latch	 kjdrisdrm nowait		  0	    57	    187

gcs remastering latch	 kjfcdrmrfg end step		  0	    27	      0
gcs remastering latch	 kjfcdrmrfg drmfrz step 	  0	     6	      1
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
gcs remastering latch	 kjdrsndRMno status not rem	  0	     1	     14
gcs resource freelist	 kjbralc: check freelist no	  0	     2	      0
gcs resource freelist	 kjbrfr_bg2			  0	     2	      1
		ELSE
gcs resource freelist	 kjbrralc: reserve allocati	  0	     2	      0
gcs resource hash	 kclfwrite1			  0	   201	     31
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
gcs resource hash	 kjblocalobj_nolock		  0	   107	    173
gcs resource hash	 kjbcropen			  0	    54	     41
gcs resource hash	 kclpdc 			  0	    28	    163

gcs resource hash	 kjbmpopen			  0	    27	     13
gcs resource hash	 kjblpast			  0	    22	     16
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
gcs resource hash	 kjbopen			  0	    18	      3
gcs resource hash	 kjbmpclose			  0	    12	      7
gcs resource hash	 kjbrdowncvt			  0	    11	      0

gcs resource hash	 kjbrprmexpack			  0	     8	      2
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
gcs resource hash	 kclrwrite			  0	     6	     22
gcs resource hash	 kjbclose_remaster		  0	     5	     25
				v_scan_query_quota := TRUE;
gcs resource hash	 kjbmpflushpi			  0	     3	      0
gcs resource hash	 kjbcancel			  0	     2	      1
			END IF;
gcs resource hash	 kjblprmexp2			  0	     1	      0
gcs resource hash	 kjbmpconvert			  0	     1	      0
ges cached resource list kjrm2c: move resource to c	  0	     1	      1
		END IF;
ges enqueue table freeli kjlalc: lock allocation	  0	    19	     13
ges process parent latch kjata_fg			  0	     1	      0

ges resource hash list	 kjlrlr: remove lock from r	  0	    34	     35
ges resource hash list	 kjrmas1: lookup master nod	  0	     2	      0
ges resource hash list	 kjucvl: lock convert reque	  0	     2	      0
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
ges resource hash list	 kjrref: find matched resou	  0	     1	      4
ksv class latch 	 ksvclsl: checkpool		  0	     1	      0
	ELSE
ksz_so allocation latch  ksz_parent_so_del1		  0	     1	      1
messages		 ksaamb: after wakeup		  0	     3	      4
messages		 ksarcv 			  0	     2	      1
		--
messages		 ksarcv: after wait		  0	     1	      1
mostly latch-free SCN	 kcs024 			  0	     1	      0
		-- Do an UPDATE statement
object queue header free kcbo_unlink_q			  0	     1	      1
object queue header oper kcbo_link_q			  0	    13	      4
object queue header oper kcbo_unlink_q			  0	     8	      9
		--
object queue header oper kcbo_switch_mq_bg		  0	     6	      5
object queue header oper kcbo_switch_cq 		  0	     5	      6

object queue header oper kcbo_switch_q_bg		  0	     2	     10
post/wait queue 	 ksliwat:remove 		  0	    30	     46
post/wait queue 	 ksliwat:add:nowait		  0	    23	      0
		v_my_serial := v_my_serial + v_loop_cnt ;
post/wait queue 	 kslpstevent:get		  0	    14	     19
post/wait queue 	 kslpstevent:reget		  0	    12	     14


Latch Miss Sources			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> only latches with sleeps are shown
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
-> ordered by name, sleeps desc

						     NoWait		 Waiter
		--
Latch Name		 Where			     Misses	Sleeps	 Sleeps
------------------------ -------------------------- ------- ---------- --------
post/wait queue 	 ksliwat:add:wait		  0	     1	      1
		-- Increment count of UPDATES and set UPDATE quota flag if needed
redo allocation 	 kcrfw_redo_gen: redo alloc	  0	    45	      0
redo writing		 kcrfwcr			  0	     1	      1
		--
simulator lru latch	 kcbs_free_granule_sim_buff	  0	     4	      0
space background task la ktsj_grab_task 		  0	   361	    463
space background task la ktsj_smco_purgeexpired 	  0	    94	      0
		v_updates_cnt := v_updates_cnt + 1;
space background task la ktsj_detach_task		  0	    64	     60
space background task la ktsj_smco_movetasks		  0	     4	      0

undo global data	 ktusmupst: KSLBEGIN		  0	     3	      3
undo global data	 ktudba: KSLBEGIN		  0	     1	      0
unknown latch		 kghfre 			  0	    61	     65
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
unknown latch		 ksqgtl3			  0	    40	     41
unknown latch		 ksqcmi: if lk mode not req	  0	    24	      4
			v_update_quota := TRUE;
unknown latch		 ksqrcl 			  0	    16	     40
unknown latch		 kghupr1			  0	    14	     19
unknown latch		 ksqcmi: if lk mode request	  0	    13	      8
		END IF;
unknown latch		 kghalo 			  0	     6	      7
unknown latch		 kghalp 			  0	     5	      1
	END IF ;
unknown latch		 kgh: sim unpin 		  0	     2	      0
unknown latch		 spmemrm_use_free_mem		  0	     2	      0
unknown latch		 kghasp 			  0	     1	      0
----------------------------------------------------------------------------------------------------------------------
unknown latch		 kghfnd: min scan		  0	     1	      0
			  ------------------------------------------------------

--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
Mutex Sleep Summary			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> ordered by number of sleeps desc

									 Wait
----------------------------------------------------------------------------------------------------------------------
Mutex Type	      Location				     Sleeps    Time (ms)
--------------------- -------------------------------- ------------ ------------

Cursor Pin	      kkslce [KKSCHLPIN2]		      1,268	   1,312
Library Cache	      kglpin1	4				 83	      32
Library Cache	      kglget2	2				 48	      50
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
Library Cache	      kglpnal1	90				 40	      21
Library Cache	      kgllkdl1	85				 38	      47
Library Cache	      kglllal3 111				 35	       1
		--
Library Cache	      kglpnal2	91				 30	      29
Library Cache	      kglhdgn2 106				  8	       0
Library Cache	      kgllkc1	57				  8	      10
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
Library Cache	      kglllal1 109				  8	       0
Library Cache	      kglhdgh3	   161				  7	       0
Library Cache	      kgllldl2 112				  5	       0
		-- so reset flags and counters before continuing
Library Cache	      kglpndl1	95				  4	       0
Library Cache	      kglhdgh1	64				  3	       0
		--
Library Cache	      kglhdgc1	102				  1	       0
Library Cache	      kgllkal1	80				  1	       0
Library Cache	      kglobld1	75				  1	       0
		v_update_quota := FALSE;
			  ------------------------------------------------------


		v_updates_cnt := 0;
Parent Latch Statistics 		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.
		v_selects_cnt := 0;
			  ------------------------------------------------------

Child Latch Statistics			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
	END IF;

		  No data exists for this section of the report.
			  ------------------------------------------------------



Segments by Logical Reads		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
-> Total Logical Reads:      20,006,950
-> Captured Segments account for   52.6% of Total
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
		-- so reset flags and counters
Owner			Name
-------------------- ----------
		     Subobject	Obj.				 Logical
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
		v_scan_query_quota := FALSE;
USER57		     IOPS
CF1				TABLE	   73591      73595	 481,040    2.40
USER7		     IOPS
		v_scan_queries_cnt := 0;
CF1				TABLE	   73347      73354	 440,080    2.20
USER176 	     IOPS
CF1				TABLE	   74180      74205	 424,832    2.12
		v_random_access_queries_cnt := 0;
USER73		     IOPS
CF1				TABLE	   73675      73684	 421,472    2.11
USER67		     IOPS
	END IF;
CF1				TABLE	   73655      73664	 419,840    2.10
			  ------------------------------------------------------


Segments by Physical Reads		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Total Physical Reads:      10,818,025
	v_loop_cnt := v_loop_cnt + 1 ;
-> Captured Segments account for   57.2% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available
	v_now := DBMS_UTILITY.GET_TIME();

		     Tablespace
Owner			Name

-------------------- ----------
		     Subobject	Obj.				Physical
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER57		     IOPS
CF1				TABLE	   73591      73595	 376,418    3.48
		-- If this is a fixed-iteration count test cycle and we've hit the number of
USER7		     IOPS
CF1				TABLE	   73347      73354	 371,434    3.43
USER176 	     IOPS
		-- iterations then set exit flag
CF1				TABLE	   74180      74205	 369,365    3.41
USER186 	     IOPS
CF1				TABLE	   74233      74268	 364,196    3.37
		v_stop_immediate := TRUE ;
USER67		     IOPS
CF1				TABLE	   73655      73664	 358,550    3.31
			  ------------------------------------------------------
	END IF;

Segments by Physical Read Requests	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Total Physical Read Requests:      10,815,881
END LOOP;
-> Captured Segments account for   57.3% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available


		     Tablespace
Owner			Name
-------------------- ----------
v_end_time := v_now ;
		     Subobject	Obj.			       Phys Read
Object Name	       Name	Type	    Obj#   Dataobj#	Requests  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
v_now := DBMS_UTILITY.GET_TIME();
USER57		     IOPS
CF1				TABLE	   73591      73595	 376,418    3.48
USER7		     IOPS
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
CF1				TABLE	   73347      73354	 371,434    3.43
USER176 	     IOPS
CF1				TABLE	   74180      74205	 369,365    3.42

USER186 	     IOPS
CF1				TABLE	   74233      74268	 364,196    3.37
USER67		     IOPS
v_total_time := v_end_time - v_begin_time ;
CF1				TABLE	   73655      73664	 358,550    3.32
			  ------------------------------------------------------

v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
Segments by UnOptimized Reads		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Total UnOptimized Read Requests:	 10,815,881
-> Captured Segments account for   57.3% of Total
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
-------------------- ----------
		     Subobject	Obj.			     UnOptimized
Object Name	       Name	Type	    Obj#   Dataobj#	   Reads  %Total

-------------------- ---------- ----- ---------- ---------- ------------ -------
USER57		     IOPS
CF1				TABLE	   73591      73595	 376,418    3.48
END;</pre_sqltext></td></tr>
USER7		     IOPS
CF1				TABLE	   73347      73354	 371,434    3.43
<tr><td scope="row" class='awrnc'><a class="awr" name="1b74aw70y48yn"></a>1b74aw70y48yn</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
USER176 	     IOPS
CF1				TABLE	   74180      74205	 369,365    3.42
USER186 	     IOPS
v_default_schema_number PLS_INTEGER := '67';
CF1				TABLE	   74233      74268	 364,196    3.37
USER67		     IOPS
CF1				TABLE	   73655      73664	 358,550    3.32
v_update_pct PLS_INTEGER := '10';
			  ------------------------------------------------------

Segments by Optimized Reads		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

v_max_loop_iterations PLS_INTEGER := '0';
		  No data exists for this section of the report.
			  ------------------------------------------------------

v_seconds_to_run PLS_INTEGER := '300';
Segments by Direct Physical Reads	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.
v_scale PLS_INTEGER := '32768';
			  ------------------------------------------------------

Segments by Physical Writes		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
v_work_unit PLS_INTEGER := '4' ;
-> Total Physical Writes:	1,198,874
-> Captured Segments account for   56.1% of Total
v_redo_stress  VARCHAR2(12) := 'LITE';
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
v_hot_schema_modulus PLS_INTEGER := '0';
Owner			Name
-------------------- ----------
		     Subobject	Obj.				Physical
v_do_hotspot   VARCHAR(7) := 'FALSE';
Object Name	       Name	Type	    Obj#   Dataobj#	  Writes  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER57		     IOPS
v_hotspot_mb  NUMBER := '10';
CF1				TABLE	   73591      73595	  44,256    3.69
USER7		     IOPS
CF1				TABLE	   73347      73354	  41,729    3.48
USER176 	     IOPS
v_hotspot_offset_mb NUMBER := '0';
CF1				TABLE	   74180      74205	  40,657    3.39
USER186 	     IOPS
CF1				TABLE	   74233      74268	  39,895    3.33
v_hotspot_modulus  PLS_INTEGER := '0';
USER67		     IOPS
CF1				TABLE	   73655      73664	  39,892    3.33
			  ------------------------------------------------------


Segments by Physical Write Requests	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Total Physical Write Requests:	1,132,021
v_sleep_modulus PLS_INTEGER := '0';
-> Captured Segments account for   56.8% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available

v_sleep_min NUMBER := '.1';
		     Tablespace
Owner			Name
-------------------- ----------
v_sleep_max NUMBER := '.5';
		     Subobject	Obj.			      Phys Write
Object Name	       Name	Type	    Obj#   Dataobj#	Requests  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
v_scan_query_pct PLS_INTEGER := '0';
USER57		     IOPS
CF1				TABLE	   73591      73595	  39,907    3.53
USER7		     IOPS
v_obfuscate VARCHAR(5)	:= 'FALSE';
CF1				TABLE	   73347      73354	  39,332    3.47
USER176 	     IOPS
CF1				TABLE	   74180      74205	  38,836    3.43

USER186 	     IOPS
CF1				TABLE	   74233      74268	  38,290    3.38
USER67		     IOPS

CF1				TABLE	   73655      73664	  37,700    3.33
			  ------------------------------------------------------

Segments by Direct Physical Writes	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
-> Total Direct Physical Writes:	   1,868
-> Captured Segments account for   11.0% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

		     Tablespace
Owner			Name

-------------------- ----------
		     Subobject	Obj.				  Direct
Object Name	       Name	Type	    Obj#   Dataobj#	  Writes  %Total
v_num_tmp NUMBER := 0;
-------------------- ---------- ----- ---------- ---------- ------------ -------
SYS		     SYSAUX
WRH$_ACTIVE_SESSION_ 51622190_0 TABLE	   73031      73031	     183    9.80

SYS		     SYSAUX
SYS_LOB0000007451C00 S_LOB_P223 LOB P	   78502      78502	      22    1.18
			  ------------------------------------------------------
v_loop_cnt PLS_INTEGER := 0;

Segments by Table Scans 		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

v_rowcnt PLS_INTEGER := 0;
		  No data exists for this section of the report.
			  ------------------------------------------------------

v_updates_cnt PLS_INTEGER := 0;
Segments by DB Blocks Changes		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> % of Capture shows % of DB Block Changes for each top segment compared
-> with total DB Block Changes for all segments captured by the Snapshot
v_selects_cnt PLS_INTEGER := 0;
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name

-------------------- ----------
		     Subobject	Obj.				DB Block    % of
Object Name	       Name	Type	    Obj#   Dataobj#	 Changes Capture
v_random_access_queries_cnt PLS_INTEGER := 0;
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER57		     IOPS
CF1				TABLE	   73591      73595	  48,624    6.90
v_scan_queries_cnt PLS_INTEGER := 0;
USER7		     IOPS
CF1				TABLE	   73347      73354	  44,016    6.25

USER176 	     IOPS
CF1				TABLE	   74180      74205	  42,528    6.04
USER73		     IOPS
v_do_scan_query BOOLEAN :=FALSE;
CF1				TABLE	   73675      73684	  42,160    5.98
USER67		     IOPS
CF1				TABLE	   73655      73664	  41,968    5.96
			  ------------------------------------------------------
v_scan_query_quota  BOOLEAN := FALSE;


Segments by Row Lock Waits		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

v_scan_workload_only BOOLEAN := FALSE;
		  No data exists for this section of the report.
			  ------------------------------------------------------

v_random_workload_only BOOLEAN := FALSE;
Segments by ITL Waits			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.

			  ------------------------------------------------------

Segments by Buffer Busy Waits		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48


		  No data exists for this section of the report.
			  ------------------------------------------------------

v_random_block PLS_INTEGER := 1;
Segments by Global Cache Buffer Busy	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.
v_tmp PLS_INTEGER;
			  ------------------------------------------------------


Segments by CR Blocks Received		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
v_now PLS_INTEGER;
-> Total CR Blocks Received:		 666
-> Captured Segments account for   11.4% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available
v_brick_wall PLS_INTEGER;

		     Tablespace
Owner			Name
-------------------- ----------

								   CR
		     Subobject	Obj.				 Blocks
Object Name	       Name	Type	    Obj#   Dataobj#	Received  %Total
v_begin_time PLS_INTEGER;
-------------------- ---------- ----- ---------- ---------- ------------ -------
SYS		     SYSAUX
WRH$_PARAMETER_PK    51622190_0 INDEX	   73018      73018	      10    1.50
v_end_time PLS_INTEGER;
USER48		     IOPS
CF1				TABLE	   73545      73552	       8    1.20
USER124 	     IOPS
v_total_time PLS_INTEGER;
CF1				TABLE	   73925      73943	       7    1.05
USER9		     IOPS
CF1				TABLE	   73356      73372	       7    1.05
USER127 	     IOPS
v_begin_cpu_tm PLS_INTEGER;
CF1				TABLE	   73940      73950	       6     .90
			  ------------------------------------------------------

v_end_cpu_tm PLS_INTEGER;
Segments by Current Blocks Received	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Total Current Blocks Received:	    3,782
-> Captured Segments account for   35.0% of Total
v_total_cpu_tm PLS_INTEGER;
-> When ** MISSING ** occurs, some of the object attributes may not be available

		     Tablespace
Owner			Name

-------------------- ----------
								 Current
		     Subobject	Obj.				 Blocks
v_do_sleeps BOOLEAN := FALSE;
Object Name	       Name	Type	    Obj#   Dataobj#	Received  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER48		     IOPS
v_loop_control BOOLEAN := FALSE;
CF1				TABLE	   73545      73552	     375    9.92
USER46		     IOPS
CF1				TABLE	   73532      73540	     299    7.91
v_update_quota BOOLEAN := FALSE;
USER43		     IOPS
CF1				TABLE	   73522      73543	     147    3.89
USER64		     IOPS
v_select_only_workload BOOLEAN := FALSE;
CF1				TABLE	   73630      73635	     145    3.83
USER73		     IOPS
CF1				TABLE	   73675      73684	      82    2.17
			  ------------------------------------------------------
v_update_only_workload BOOLEAN := FALSE;

Segments by Global Cache Remote Grants	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Total Global Cache Remote Grants:	   1,770,064
v_do_update BOOLEAN := FALSE;
-> Captured Segments account for   32.9% of Total
-> When ** MISSING ** occurs, some of the object attributes may not be available
v_do_hot_schema BOOLEAN := FALSE;

		     Tablespace
Owner			Name
-------------------- ----------
v_stop_immediate BOOLEAN := FALSE;
								      GC
		     Subobject	Obj.				  Remote
v_sharing_schema BOOLEAN := FALSE;
Object Name	       Name	Type	    Obj#   Dataobj#	  Grants  %Total
-------------------- ---------- ----- ---------- ---------- ------------ -------
USER124 	     IOPS
v_seed VARCHAR2(128);
CF1				TABLE	   73925      73943	  21,120    1.19
USER146 	     IOPS
CF1				TABLE	   74037      74043	  20,206    1.14
USER121 	     IOPS
v_home_schema_str VARCHAR2(80);
CF1				TABLE	   73911      73936	  19,988    1.13
USER143 	     IOPS
CF1				TABLE	   74010      74046	  19,897    1.12
v_scratch VARCHAR2(200) ;
USER175 	     IOPS
CF1				TABLE	   74184      74204	  19,846    1.12
			  ------------------------------------------------------



Dictionary Cache Stats			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> "Pct Misses"  should be very low (< 2% in most cases)
v_cpu_pct NUMBER(6, 3);
-> "Final Usage" is the number of cache entries being used

				   Get	  Pct	 Scan	Pct	 Mod	  Final
Cache			      Requests	 Miss	 Reqs  Miss	Reqs	  Usage
v_my_serial NUMBER(16);
------------------------- ------------ ------ ------- ----- -------- ----------
dc_awr_control			    23	  0.0	    0	N/A	   4	      1
dc_global_oids			 9,844	  2.9	    0	N/A	   0	    298

dc_histogram_data		 2,479	 15.1	    0	N/A	   0	    391
dc_histogram_defs		31,394	 11.6	    0	N/A	 564	  4,723
dc_object_grants		    24	 95.8	    0	N/A	   0	     23
BEGIN
dc_objects			23,081	  4.2	    0	N/A	 136	  1,581
dc_profiles			     2	 50.0	    0	N/A	   0	      1
dc_props			   266	  0.8	    0	N/A	   0	      3

dc_rollback_segments		 1,018	  0.0	    0	N/A	   0	    509
dc_segments			 1,402	 34.4	    0	N/A	  10	    531
dc_sequences			    32	 25.0	    0	N/A	  32	      6
dc_tablespaces			 1,242	  0.3	    0	N/A	   0	      7
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
dc_users			   575	 29.4	    4 1E+02	   0	    170
outstanding_alerts		     2	100.0	    0	N/A	   0	      2
			  ------------------------------------------------------

EXECUTE IMMEDIATE v_home_schema_str;
Dictionary Cache Stats (RAC)		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.

			  ------------------------------------------------------

Library Cache Activity			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> "Pct Misses"  should be very low


			 Get	Pct	       Pin    Pct	      Invali-
Namespace	    Requests   Miss	  Requests   Miss    Reloads  dations
--------------- ------------ ------ -------------- ------ ---------- --------
IF ( v_hot_schema_modulus != 0 ) THEN
ACCOUNT_STATUS		   4   25.0		 0    N/A	   0	    0
AUDIT POLICY		   2  100.0		 2  100.0	   0	    0
BODY			 347	2.3	       921    9.2	  30	    0
CLUSTER 		  98	2.0		98    2.0	   0	    0
	v_do_hot_schema := TRUE;
DBLINK			   4   25.0		 0    N/A	   0	    0
EDITION 		   2   50.0		 4   50.0	   0	    0
INDEX			 186   14.5	       186   14.5	   0	    0
END IF;
OBJECT ID		  34  100.0		 0    N/A	   0	    0
SCHEMA		       1,386	0.1		 0    N/A	   0	    0

SQL AREA	       3,664   51.5	 3,842,882   -0.1	 102	   36
SQL AREA BUILD		 883   82.3		 0    N/A	   0	    0
IF ( v_sleep_modulus != 0 )	  THEN
SQL AREA STATS		 836   99.9	       836   99.9	   0	    0
TABLE/PROCEDURE        5,072   16.8	    20,507   10.0	 218	    0
	v_do_sleeps := TRUE;
TRIGGER 		   7   57.1		 7   57.1	   0	    0
			  ------------------------------------------------------

END IF;
Library Cache Activity (RAC)		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		    GES Lock	  GES Pin      GES Pin	 GES Inval GES Invali-

Namespace	    Requests	 Requests     Releases	  Requests     dations
--------------- ------------ ------------ ------------ ----------- -----------
ACCOUNT_STATUS		   4		0	     0		 0	     0
AUDIT POLICY		   2		2	     2		 0	     0
IF ( v_max_loop_iterations &gt; 0 )  THEN
BODY			 330	      879	   879		 0	     0
CLUSTER 		  98	       98	    98		 0	     0
DBLINK			   4		0	     0		 0	     0
	v_loop_control := TRUE ;
EDITION 		   2		2	     2		 0	     0
INDEX			 186	      186	   186		 0	     0
SCHEMA			  35		0	     0		 0	     0
TABLE/PROCEDURE        7,881	   14,486	14,486		 0	     0
END IF;
TRIGGER 		   0		7	     7		 0	     0
			  ------------------------------------------------------



Memory Dynamic Components		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Min/Max sizes since instance startup
-> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred
IF ( v_update_pct = 0 ) 	  THEN
-> ordered by Component

		 Begin Snap	Current 	Min	    Max   Oper Last Op
Component	  Size (Mb)   Size (Mb)   Size (Mb)   Size (Mb)  Count Typ/Mod
	v_select_only_workload := TRUE;
--------------- ----------- ----------- ----------- ----------- ------ -------
ASM Buffer Cach 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 16K buf 	.00	    .00 	.00	    .00      0 STA/
END IF;
DEFAULT 2K buff 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 32K buf 	.00	    .00 	.00	    .00      0 STA/
DEFAULT 4K buff 	.00	    .00 	.00	    .00      0 STA/

DEFAULT 8K buff 	.00	    .00 	.00	    .00      0 STA/
DEFAULT buffer	   1,040.00    1,040.00    1,040.00    1,568.00      0 SHR/IMM
Data Transfer C 	.00	    .00 	.00	    .00      0 STA/
IF ( v_update_pct = 100 )	  THEN
In Memory RO Ex 	.00	    .00 	.00	    .00      0 STA/
In Memory RW Ex 	.00	    .00 	.00	    .00      0 STA/
In-Memory Area		.00	    .00 	.00	    .00      0 STA/
KEEP buffer cac 	.00	    .00 	.00	    .00      0 STA/
	v_update_only_workload := TRUE;
PGA Target	   4,176.00    4,176.00    4,176.00    4,176.00      0 STA/
RECYCLE buffer		.00	    .00 	.00	    .00      0 STA/
SGA Target	   3,072.00    3,072.00    3,072.00    3,072.00      0 STA/
END IF;
Shared IO Pool	      96.00	  96.00 	.00	  96.00      0 GRO/IMM
java pool		.00	    .00 	.00	    .00      0 STA/
large pool	      80.00	  80.00       80.00	  80.00      0 STA/

memoptimize buf 	.00	    .00 	.00	    .00      0 STA/
shared pool	   1,808.00    1,808.00      640.00    1,808.00      0 GRO/IMM
streams pool		.00	    .00 	.00	    .00      0 STA/
unified pga poo 	.00	    .00 	.00	    .00      0 STA/
IF ( v_scan_query_pct = 0 ) 	THEN
			  ------------------------------------------------------

Memory Resize Operations Summary	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Resizes, Grows, Shrinks - Operations captured by AWR
	v_random_workload_only := TRUE;
   if there are operations on the same component for the same
   operation_type, target_size, and with the same start_time
END IF;
   only one operation is captured
-> ordered by Component

			Min	    Max 	Avg    Re-

Component	  Size (Mb)   Size (Mb)   Size (Mb)  Sizes  Grows Shrink
--------------- ----------- ----------- ----------- ------ ------ ------
DEFAULT buffer	   1,040.00    1,040.00    1,040.00	 1	0      1
IF ( v_scan_query_pct = 100 ) 	THEN
shared pool	   1,808.00    1,808.00    1,808.00	 1	1      0
			  ------------------------------------------------------

Memory Resize Ops			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
	v_scan_workload_only := TRUE;
-> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred
   Delta       : change in size of the component
   Target Delta: displayed only if final size <> target_size
END IF;
-> Status: COMplete/CANcelled/INActive/PENding/ERRor
-> ordered by start_time desc,component

		 Ela		 Oper	    Init	Target	Final

Start		 (s) Component	 Typ/Mod Size (M  Delta  Delta	  (M) Sta
-------------- ----- ----------- ------- ------- ------ ------ ------ ---
v_seconds_to_run := v_seconds_to_run * 100 ;
02/17 09:26:13	   0 bufcache	 SHR/IMM   1,040      0    -16	1,040 COM
02/17 09:26:13	   0 shared	 GRO/IMM   1,808      0     16	1,808 COM
			  ------------------------------------------------------


Process Memory Summary			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> B: Begin Snap   E: End Snap
-> All rows below contain absolute values (i.e. not diffed over the interval)
SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
-> Max Alloc is Maximum PGA Allocation size at snapshot time
		END IF;
-> Hist Max Alloc is the Historical Max Allocation for still-connected processes
	END IF;
-> ordered by Begin/End snapshot, Alloc (MB) desc
-> Top 10 containers by Alloc (MB) at end snapshot time are displayed


							     Hist
				     Avg  Std Dev     Max     Max
----------------------------------------------------------------------------------------------------------------------
		Alloc	   Used    Alloc    Alloc   Alloc   Alloc    Num    Num
   Category	 (MB)	   (MB)     (MB)     (MB)    (MB)    (MB)   Proc  Alloc
-- The type of SQL is now determined...execute it in the following section
 - -------- --------- --------- -------- -------- ------- ------- ------ ------
B Freeable     349.5	    .0	    2.3      6.9      44     N/A    151    151
  Other      1,715.5	   N/A	    4.4      6.7      92      92    389    389
----------------------------------------------------------------------------------------------------------------------
  PL/SQL	63.6	  61.4	     .2       .3       2       3    261    259
  SQL		43.1	  28.2	     .2       .4       1      18    191    153

  Total      2,171.7	  89.7	    7.2     14.3     139     113    992    952
E Freeable     245.8	    .0	    5.1     10.1      44     N/A     48     48
	IF ( v_do_update != TRUE ) THEN
  Other      1,114.3	   N/A	    4.1      8.3      96      96    270    270
  PL/SQL	 7.9	   6.5	     .1       .3       2       3    142    140
		--
  SQL		11.2	   8.9	     .2       .8       7      18     72     39
  Total      1,379.2	  15.4	    9.5     19.5     148     117    532    497
			  ------------------------------------------------------
		-- Do a SELECT statement

SGA Memory Summary			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		-- Work out scan or random
						      End Size (Bytes)
SGA regions			Begin Size (Bytes)	(if different)
		IF  ( v_random_workload_only = TRUE ) THEN
------------------------------ ------------------- -------------------
Database Buffers		     1,191,182,336
Fixed Size				 8,954,056
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
Redo Buffers				41,373,696
Variable Size			    20,233,322,496
			       -------------------
			v_do_scan_query := FALSE;
sum				    21,474,832,584
			  ------------------------------------------------------

			v_scan_query_quota := TRUE ;
SGA breakdown difference by Pool and NameDB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> ordered by Pool, Name
		ELSE
-> N/A value for Begin MB or End MB indicates the size of that Pool/Name was
   insignificant, or zero in that snapshot

			IF ( v_scan_workload_only = TRUE ) THEN
Pool   Name				    Begin MB	     End MB  % Diff
------ ------------------------------ -------------- -------------- -------
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
large  PX msg pool				64.0	       64.0    0.00
				v_do_scan_query := TRUE;
large  free memory				15.6	       15.6    0.00
shared ASH buffers				61.4	       61.4    0.00
				v_scan_query_quota := FALSE;
shared KGLH0					 N/A	       28.8	N/A
shared KJSC rnb slots				53.8	       23.0  -57.15
shared KKSSP					18.1		N/A -100.00
			ELSE
shared SO private sga				92.7	       92.7    0.00
shared SQLA					 N/A	       67.3	N/A
				IF ( v_scan_query_quota = FALSE ) THEN
shared buffer handle				23.4	       23.4    0.00
shared dbwriter coalesce buffer 		32.0	       32.0    0.00
shared free memory			       272.3	      223.0  -18.10
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
shared gcs resources				78.0	       78.0    0.00
shared gcs resv res hash bucket 		24.0	       24.0    0.00
shared gcs shadows				42.6	       42.6    0.00
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
shared ges enqueues				91.6	       91.6    0.00
shared ges resource permanent			97.1	       97.1    0.00
shared ksunfy_meta 1			       197.0	      197.0    0.00
shared object queue hash buckets		32.0	       32.0    0.00
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
shared procs: ksunfy				26.7	       26.7    0.00
shared row cache				  .0		 .0    0.00
shared session					75.4	       75.4    0.00
						v_do_scan_query := TRUE;
shared transaction				24.3	       24.3    0.00
					ELSE
       buffer_cache			     1,040.0	    1,040.0    0.00
       fixed_sga				 8.5		8.5    0.00
       log_buffer				39.5	       39.5    0.00
						v_do_scan_query := FALSE;
       shared_io_pool				96.0	       96.0    0.00
			  ------------------------------------------------------

					END IF;

Replication System Resource Usage	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

				ELSE
		  No data exists for this section of the report.
			  ------------------------------------------------------

					-- Scan quota has been filled,	force drain some random access SELECTS
Replication SGA Usage			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.
					v_do_scan_query := FALSE;
			  ------------------------------------------------------


				END IF;
GoldenGate Capture			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			END IF;
			  ------------------------------------------------------

		END IF;
GoldenGate Capture Rate 		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.

			  ------------------------------------------------------

GoldenGate Apply Reader 		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48


		  No data exists for this section of the report.
			  ------------------------------------------------------
		IF ( v_do_scan_query != TRUE ) THEN

GoldenGate Apply Coordinator		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

			SELECT COUNT(c2) INTO v_rowcnt
		  No data exists for this section of the report.
			  ------------------------------------------------------

			FROM cf1
GoldenGate Apply Server 		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
			  ------------------------------------------------------


GoldenGate Apply Coordinator Rate	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
			  ------------------------------------------------------

		ELSE
GoldenGate Apply Reader and Server Rate  DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
			  ------------------------------------------------------



XStream Capture 			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
			v_scan_queries_cnt := v_scan_queries_cnt + 1;

		  No data exists for this section of the report.

			  ------------------------------------------------------

XStream Capture Rate			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN

		  No data exists for this section of the report.
			  ------------------------------------------------------
				v_scan_query_quota := TRUE;

XStream Apply Reader			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

			END IF;
		  No data exists for this section of the report.
			  ------------------------------------------------------
		END IF;

XStream Apply Coordinator		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48


		  No data exists for this section of the report.
			  ------------------------------------------------------

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
XStream Apply Server			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.
	ELSE
			  ------------------------------------------------------

		--
XStream Apply Coordinator Rate		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.
		-- Do an UPDATE statement
			  ------------------------------------------------------

XStream Apply Reader and Server Rate	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
		--

		  No data exists for this section of the report.
			  ------------------------------------------------------



Table Statistics by DML Operations	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
		v_my_serial := v_my_serial + v_loop_cnt ;

		  No data exists for this section of the report.

			  ------------------------------------------------------

Table Statistics by Conflict Resolutions DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);

		  No data exists for this section of the report.
			  ------------------------------------------------------
		--

Replication Large Transaction Statistics DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		-- Increment count of UPDATES and set UPDATE quota flag if needed
		  No data exists for this section of the report.
			  ------------------------------------------------------

		--
Replication Long Running Transaction StatisticsDB/Inst: P30SDB/p30sdb2	Snaps:

		  No data exists for this section of the report.
		v_updates_cnt := v_updates_cnt + 1;
			  ------------------------------------------------------



Advanced Queue CPU/IO Usage		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			  ------------------------------------------------------

Buffered Queues 			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
			v_update_quota := TRUE;

		  No data exists for this section of the report.
			  ------------------------------------------------------
		END IF;

Buffered Queue Subscribers		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

	END IF ;
		  No data exists for this section of the report.
			  ------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
Rule Set				 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.
			  ------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.

Persistent Queues			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

----------------------------------------------------------------------------------------------------------------------
		  No data exists for this section of the report.
			  ------------------------------------------------------


Persistent Queues Rate			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
			  ------------------------------------------------------

Persistent Queue Subscribers		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
		--

		  No data exists for this section of the report.
			  ------------------------------------------------------
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,


		-- so reset flags and counters before continuing
Resource Limit Stats			     DB/Inst: P30SDB/p30sdb2  Snap: 48
-> Only rows with Current or Maximum Utilization > 80% of Limit are shown
		--
-> For "UNLIMITED" resources, rows whose Current or Maximum Utilization
   exceeds 2*Initial Allocation are shown
-> Ordered by Resource Name
		v_update_quota := FALSE;

				  Current      Maximum	   Initial
Resource Name			Utilization  Utilization Allocation   Limit
		v_updates_cnt := 0;
------------------------------ ------------ ------------ ---------- ----------
ges_cache_ress			     24,341	  25,701	  0  UNLIMITED
		v_selects_cnt := 0;
			  ------------------------------------------------------

Shared Servers Activity 		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
	END IF;
-> Values represent averages for all samples

   Avg Total   Avg Active    Avg Total	 Avg Active    Avg Total   Avg Active

 Connections  Connections Shared Srvrs Shared Srvrs  Dispatchers  Dispatchers
------------ ------------ ------------ ------------ ------------ ------------
	   0		0	     1		  0	       1	    0
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
			  ------------------------------------------------------

Shared Servers Rates			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,

  Common     Disp			 Common       Disp     Server
   Queue    Queue   Server    Server	  Queue      Queue	Total	  Server
		-- so reset flags and counters
 Per Sec  Per Sec Msgs/Sec    KB/Sec	  Total      Total	 Msgs  Total(KB)
-------- -------- -------- --------- ---------- ---------- ---------- ----------
		v_scan_query_quota := FALSE;
       0	0	 0	 0.0	      0 	 0	    0	       0
			  ------------------------------------------------------

		v_scan_queries_cnt := 0;
Shared Servers Utilization		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Statistics are combined for all servers
-> Incoming and Outgoing Net % are included in %Busy
		v_random_access_queries_cnt := 0;

  Total Server			  Incoming  Outgoing
      Time (s)	  %Busy    %Idle     Net %     Net %
	END IF;
-------------- -------- -------- --------- ---------
	   330	    0.0    100.0       0.0	 0.0

			  ------------------------------------------------------

Shared Servers Common Queue		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

	v_loop_cnt := v_loop_cnt + 1 ;
		  No data exists for this section of the report.
			  ------------------------------------------------------

	v_now := DBMS_UTILITY.GET_TIME();
Shared Servers Dispatchers		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Ordered by %Busy, descending

-> Total Queued, Total Queue Wait and Avg Queue Wait are for dispatcher queue
-> Name suffixes:
     "(N)" - dispatcher started between begin and end snapshots
	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
     "(R)" - dispatcher re-started between begin and end snapshots

	      Avg Total Disp			    Total Total Queue  Avg Queue
		-- If this is a fixed-iteration count test cycle and we've hit the number of
Name	    Conns   Time (s)	%Busy	 %Idle	   Queued    Wait (s)  Wait (ms)
------- --------- ---------- -------- -------- ---------- ----------- ----------
D000	      0.0	 330	  0.0	 100.0		0	    0
		-- iterations then set exit flag
			  ------------------------------------------------------


		v_stop_immediate := TRUE ;
Modified Parameters			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> This section shows all the modified initialization parameters that
were in effect during the entire snapshot interval
	END IF;
-> End Value is displayed only if the parameter value was modified within
the snapshot interval

END LOOP;
								End value
Parameter Name		      Begin value			(if different)
----------------------------- --------------------------------- --------------

_ipddb_enable		      TRUE
audit_file_dest 	      /u01/app/oracle/admin/p30sdb/adum
audit_trail		      DB
v_end_time := v_now ;
cluster_database	      TRUE
compatible		      19.0.0
control_files		      +P30S/P30SDB/CONTROLFILE/current.
v_now := DBMS_UTILITY.GET_TIME();
db_block_size		      8192
db_create_file_dest	      +P30S
db_domain		      example.com
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();
db_name 		      p30sdb
db_recovery_file_dest	      +FRA

db_recovery_file_dest_size    805306368000
diagnostic_dest 	      /u01/app/oracle
dispatchers		      (PROTOCOL=TCP) (SERVICE=p30sdbXDB
v_total_time := v_end_time - v_begin_time ;
instance_number 	      2
listener_networks
local_listener		       (ADDRESS=(PROTOCOL=TCP)(HOST=192
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
nls_language		      AMERICAN
nls_territory		      AMERICA
open_cursors		      300
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
pga_aggregate_target	      4376756224
processes		      5120
remote_listener 	       mcracpoc-scan.example.com:1521
remote_login_passwordfile     EXCLUSIVE
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;
sga_max_size		      21474836480
sga_target		      3221225472
thread			      2

undo_tablespace 	      UNDOTBS2
			  ------------------------------------------------------

END;</pre_sqltext></td></tr>

Modified Multi-Valued Parameters	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> This section only displays parameters that have more than one value
->'(NULL)' indicates a missing parameter value
<tr><td scope="row" class='awrc'><a class="awr" name="1myuz4d7pbg2j"></a>1myuz4d7pbg2j</td><td class='awrc'><pre_sqltext class="awr">INSERT INTO wri$_adv_recommendations (id,	task_id,  finding_id,  rank,  benefit_msg_id,  benefit_val,  type, flags,  rec_type_id,  exec_name) VALUES (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10) </pre_sqltext></td></tr>
-> A blank in the 'End Snapshot' indicates the same value as the 'Begin Snapshot

								End value
Parameter Name		      Begin value			(if different)
<tr><td scope="row" class='awrnc'><a class="awr" name="2sff4nbj564pf"></a>2sff4nbj564pf</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
----------------------------- --------------------------------- --------------
control_files		      +FRA/P30SDB/CONTROLFILE/current.2
			      +P30S/P30SDB/CONTROLFILE/current.
v_default_schema_number PLS_INTEGER := '177';
			  ------------------------------------------------------

Top SQL with Top Events 		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
v_update_pct PLS_INTEGER := '10';
-> Top SQL statements by DB Time along with the top events by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
-> % Event is the percentage of DB Time due to the event that the SQL is
   waiting on.
v_scale PLS_INTEGER := '32768';
-> % Row Source is the percentage of DB Time due to the row source for the
   SQL waiting on the event.
v_work_unit PLS_INTEGER := '4' ;
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
v_redo_stress  VARCHAR2(12) := 'LITE';
----------------------- -------------------- -------------------- --------------
									   % Row
Event			       % Event Top Row Source			  Source
v_hot_schema_modulus PLS_INTEGER := '0';
------------------------------ ------- --------------------------------- -------
	  bhdvtsvjhgvrh 	  1497866750		     2375	   65.80
gc cr grant busy		 36.86 TABLE ACCESS - BY INDEX ROWID BAT   31.51
v_do_hotspot   VARCHAR(7) := 'FALSE';
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


v_hotspot_mb  NUMBER := '10';
db file sequential read 	 10.36 TABLE ACCESS - BY INDEX ROWID BAT   10.08


free buffer waits		  9.28 TABLE ACCESS - BY INDEX ROWID BAT    8.47
v_hotspot_offset_mb NUMBER := '0';

	  35dumc2tpr9dv 	   203653710		      827	   23.79
write complete waits		  5.79 UPDATE				    5.79
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
v_hotspot_modulus  PLS_INTEGER := '0';
< :B1 )


gc current grant 2-way		  4.40 UPDATE				    4.40



gc current grant busy		  3.35 UPDATE				    3.35

v_sleep_modulus PLS_INTEGER := '0';
			  ------------------------------------------------------

Top SQL with Top Row Sources		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
v_sleep_min NUMBER := '.1';
-> Top SQL statements by DB Time along with the top row sources by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
v_sleep_max NUMBER := '.5';
-> % Row Source is the percentage of DB Time spent on the row source by
   that SQL.
-> % Event is the percentage of DB Time spent on the event by the
v_scan_query_pct PLS_INTEGER := '0';
   SQL executing the row source.
-> Executions is the number of executions of the SQL that were sampled in ASH.

v_obfuscate VARCHAR(5)	:= 'FALSE';
		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
					   % Row

Row Source				  Source Top Event		 % Event

---------------------------------------- ------- ----------------------- -------
	  bhdvtsvjhgvrh 	  1497866750		     2375	   65.80
TABLE ACCESS - BY INDEX ROWID BATCHED	   57.41 gc cr grant busy	   31.51
v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


INDEX - RANGE SCAN			    7.59 gc cr grant busy	    5.34
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

	  35dumc2tpr9dv 	   203653710		      827	   23.79
UPDATE					   21.13 write complete waits	    5.79

UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

v_num_tmp NUMBER := 0;

UPDATE STATEMENT			    1.72 KJC: Wait for msg sends    0.80


			  ------------------------------------------------------

Top Sessions				 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

v_loop_cnt PLS_INTEGER := 0;
		  No data exists for this section of the report.
			  ------------------------------------------------------

v_rowcnt PLS_INTEGER := 0;
Top Blocking Sessions			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Blocking session activity percentages are calculated with respect to
      waits on enqueues, latches and "buffer busy" only
v_updates_cnt PLS_INTEGER := 0;
-> '% Activity' represents the load on the database caused by
      a particular blocking session
-> '# Samples Active' shows the number of ASH samples in which the
v_selects_cnt PLS_INTEGER := 0;
      blocking session was found active.
-> 'XIDs' shows the number of distinct transaction IDs sampled in ASH
      when the blocking session was found active.


 Blocking Sid (Inst) % Activity Event Caused			  % Event
-------------------- ---------- ------------------------------ ----------
v_random_access_queries_cnt PLS_INTEGER := 0;
User		     Program			      # Samples Active	   XIDs
-------------------- ------------------------------ ------------------ --------
  1090,35581(	  2)	   3.05 free buffer waits		     1.97
v_scan_queries_cnt PLS_INTEGER := 0;
SYS		     oracle@mcracpo...le.com (DBW7)	  26/36 [ 72%]	      0

				write complete waits		     1.08



  5688, 1746(	  2)	   2.85 free buffer waits		     2.05
v_do_scan_query BOOLEAN :=FALSE;
SYS		     oracle@mcracpo...le.com (DBW2)	  26/36 [ 72%]	      0

  5930, 3466(	  2)	   2.77 free buffer waits		     2.16
v_scan_query_quota  BOOLEAN := FALSE;
SYS		     oracle@mcracpo...le.com (DBW4)	  27/36 [ 74%]	      0

  5809,28560(	  2)	   1.91 free buffer waits		     1.47
SYS		     oracle@mcracpo...le.com (DBW3)	  26/36 [ 72%]	      0
v_scan_workload_only BOOLEAN := FALSE;

  6051,14506(	  2)	   1.88 free buffer waits		     1.30
SYS		     oracle@mcracpo...le.com (DBW5)	  26/36 [ 72%]	      0

v_random_workload_only BOOLEAN := FALSE;
			  ------------------------------------------------------

Top PL/SQL Procedures			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

-> 'PL/SQL entry subprogram' represents the application's top-level
      entry-point (procedure, function, trigger, package initialization
      or RPC call) into PL/SQL.

-> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed
      at the point of sampling . If the value is 'SQL', it represents
      the percentage of time spent executing SQL for the particular
v_random_block PLS_INTEGER := 1;
      PL/SQL entry subprogram

PL/SQL Entry Subprogram 					  % Activity
v_tmp PLS_INTEGER;
----------------------------------------------------------------- ----------
PL/SQL Current Subprogram					   % Current
----------------------------------------------------------------- ----------
v_now PLS_INTEGER;
USER1.SLOBUPDATE						       25.23
   SQL								       25.23
			  ------------------------------------------------------

v_brick_wall PLS_INTEGER;
Top Events				 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Top Events by DB Time
-> % Activity is the percentage of DB Time due to the event


Event				    Event Class     Session Type
v_begin_time PLS_INTEGER;
----------------------------------- --------------- ---------------
	   Avg Active
% Activity   Sessions
---------- ----------
v_end_time PLS_INTEGER;
gc cr grant busy		    Cluster	    FOREGROUND
     37.41	37.22
free buffer waits		    Configuration   FOREGROUND
v_total_time PLS_INTEGER;
     11.91	11.85
db file sequential read 	    User I/O	    FOREGROUND
     11.60	11.54
v_begin_cpu_tm PLS_INTEGER;
CPU + Wait for CPU		    CPU 	    BACKGROUND
      6.26	 6.23
write complete waits		    Configuration   FOREGROUND
      5.82	 5.79
v_end_cpu_tm PLS_INTEGER;
			  ------------------------------------------------------

v_total_cpu_tm PLS_INTEGER;
Top Event P1/P2/P3 Values		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Top Events by DB Time and the top P1/P2/P3 values for those events.
-> % Event is the percentage of DB Time due to the event

-> % Activity is the percentage of DB Time due to the event with the given
   P1,P2,P3 Values.

v_do_sleeps BOOLEAN := FALSE;
Event			       % Event		   P1, P2, P3 Values % Activity
------------------------------ ------- ----------------------------- ----------
Parameter 1		   Parameter 2		      Parameter 3
v_loop_control BOOLEAN := FALSE;
-------------------------- -------------------------- --------------------------
free buffer waits		 11.91		     "5","246","160"	   0.03
file#			   block#		      set-id#

v_update_quota BOOLEAN := FALSE;
db file sequential read 	 11.60		     "8","46828","1"	   0.03
file#			   block#		      blocks

v_select_only_workload BOOLEAN := FALSE;
write complete waits		  5.84		      "3","3947","0"	   0.03
file#			   block#		      NOT DEFINED

KJC: Wait for msg sends to com	  2.19	   "2484572848","65539","32"	   0.06
v_update_only_workload BOOLEAN := FALSE;
msg			   dest|rcvr		      mtype

			  ------------------------------------------------------

v_do_update BOOLEAN := FALSE;
Top DB Objects				 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

		  No data exists for this section of the report.
v_do_hot_schema BOOLEAN := FALSE;
			  ------------------------------------------------------

Activity Over Time			 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Analysis period is divided into smaller time slots as indicated
v_stop_immediate BOOLEAN := FALSE;
   in the 'Slot Time (Duration)'.
-> Top 3 events are reported in each of those slots
-> 'Slot Count' shows the number of ASH samples in that slot
v_sharing_schema BOOLEAN := FALSE;
-> 'Event Count' shows the number of ASH samples waiting for
   that event in that slot
-> '% Event' is 'Event Count' over all ASH samples in the analysis period
v_seed VARCHAR2(128);

			 Slot					Event
Slot Time (Duration)	Count Event				Count % Event
v_home_schema_str VARCHAR2(80);
-------------------- -------- ------------------------------ -------- -------
09:26:07   (3.9 min)	3,100 gc cr grant busy			1,285	35.59
			      free buffer waits 		  376	10.41
v_scratch VARCHAR2(200) ;
			      db file sequential read		  365	10.11
09:30:00   (2.2 min)	  511 gc cr block lost			   92	 2.55
			      gc cr grant 2-way 		   87	 2.41

			      gc cr grant busy			   68	 1.88
			  ------------------------------------------------------


v_cpu_pct NUMBER(6, 3);

	  ADDM Report for Task 'ADDM:1451622190_2_48'
	  -------------------------------------------

v_my_serial NUMBER(16);
Analysis Period
---------------
AWR snapshot range from 47 to 48.

Time period starts at 17-FEB-20 09.26.07 AM
Time period ends at 17-FEB-20 09.32.10 AM

Analysis Target
BEGIN
---------------
Database 'P30SDB' with DB ID 1451622190.
Database version 19.0.0.0.0.

ADDM performed an analysis of instance p30sdb2, numbered 2 and hosted at
mcracpoc2.example.com.

Activity During the Analysis Period
v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
-----------------------------------
Total database time was 28648 seconds.
The average number of active sessions was 78.92.

EXECUTE IMMEDIATE v_home_schema_str;
Summary of Findings
-------------------

    Description 		  Active Sessions      Recommendations
				  Percent of Activity
    ----------------------------  -------------------  ---------------

1   Interconnect Latency	  78.92 | 100	       1
2   Top SQL Statements		  77.13 | 97.73        2
3   Global Cache Messaging	  49.86 | 63.17        1
IF ( v_hot_schema_modulus != 0 ) THEN
4   Buffer Busy - Hot Objects	  36.85 | 46.7	       0
5   Free Buffer Waits		  10.76 | 13.63        3
6   "User I/O" wait Class	  10.54 | 13.36        0
	v_do_hot_schema := TRUE;
7   Global Cache Lost Blocks	  4.5 | 5.7	       1
8   Unusual "Cluster" Wait Event  2.65 | 3.36	       3
9   Unusual "Other" Wait Event	  2.23 | 2.83	       3
END IF;
10  Undersized SGA		  1.07 | 1.36	       1



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
IF ( v_sleep_modulus != 0 )	  THEN


	  Findings and Recommendations
	  ----------------------------
	v_do_sleeps := TRUE;

Finding 1: Interconnect Latency
Impact is 78.92 active sessions, 100% of total activity.
END IF;
--------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time on this instance.

The instance was consuming 32758 kilo bits per second of interconnect
bandwidth.
0% of this interconnect bandwidth was used for global cache messaging, 0% for
IF ( v_max_loop_iterations &gt; 0 )  THEN
parallel query messaging and 95% for database lock management.
The average latency for 8K interconnect messages was 1166 microseconds.
The instance is using the private interconnect device "fg-priv:1" with IP
	v_loop_control := TRUE ;
address 169.254.26.102 and source "??".
END IF;

   Recommendation 1: Host Configuration

   Estimated benefit is 78.92 active sessions, 100% of total activity.
   -------------------------------------------------------------------
IF ( v_update_pct = 0 ) 	  THEN
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle's recommended solution is to use a high speed
	v_select_only_workload := TRUE;
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
END IF;
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a

      workaround.

   Symptoms That Led to the Finding:
   ---------------------------------
IF ( v_update_pct = 100 )	  THEN
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 49.86 active sessions, 63.17% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	v_update_only_workload := TRUE;
	 Impact is 52.52 active sessions, 66.55% of total activity.


Finding 2: Top SQL Statements
END IF;
Impact is 77.13 active sessions, 97.73% of total activity.
----------------------------------------------------------
SQL statements consuming significant database time were found. These

statements offer a good opportunity for performance improvement.

   Recommendation 1: SQL Tuning
   Estimated benefit is 48.66 active sessions, 61.66% of total activity.
IF ( v_scan_query_pct = 0 ) 	THEN
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      "bhdvtsvjhgvrh".
	v_random_workload_only := TRUE;
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND
END IF;
	 (CUSTID < :B1 )
   Rationale
      The SQL spent 85% of its database time on CPU, I/O and Cluster waits.

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "bhdvtsvjhgvrh" was executed 3062456 times and
      had an average elapsed time of 0.0061 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 20.48 active sessions, 25.95% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      "35dumc2tpr9dv". Additionally, investigate this statement for possible
      performance improvements. You can supplement the information given here
      with an ASH report for this SQL_ID.
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 ))
	 AND (CUSTID < :B1 )
   Rationale
      The SQL spent 58% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
      Look at data given below and an ASH report for further performance
      improvements.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "35dumc2tpr9dv" was executed 340333 times and
      had an average elapsed time of 0.018 seconds.
   Rationale
      Waiting for event "write complete waits" in wait class "Configuration"
      accounted for 24% of the database time spent in processing the SQL
      statement with SQL_ID "35dumc2tpr9dv".
   Rationale
      Waiting for event "free buffer waits" in wait class "Configuration"
      accounted for 11% of the database time spent in processing the SQL
      statement with SQL_ID "35dumc2tpr9dv".


Finding 3: Global Cache Messaging
Impact is 49.86 active sessions, 63.17% of total activity.
----------------------------------------------------------
Inter-instance messaging was consuming significant database time on this
instance.

   Recommendation 1: Application Analysis
   Estimated benefit is 49.86 active sessions, 63.17% of total activity.
   ---------------------------------------------------------------------
   Action
      Look at the "Top SQL Statements" finding for SQL statements consuming
      significant time on Cluster waits. For example, the SELECT statement
      with SQL_ID "bhdvtsvjhgvrh" is responsible for 75% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
      Impact is 52.52 active sessions, 66.55% of total activity.


Finding 4: Buffer Busy - Hot Objects
Impact is 36.85 active sessions, 46.7% of total activity.
---------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 36.85 active sessions, 46.7% of total activity.
	 Inter-instance messaging was consuming significant database time on
	 this instance.
	 Impact is 49.86 active sessions, 63.17% of total activity.
	    Wait class "Cluster" was consuming significant database time.
	    Impact is 52.52 active sessions, 66.55% of total activity.


Finding 5: Free Buffer Waits
Impact is 10.76 active sessions, 13.63% of total activity.
----------------------------------------------------------
Database writers (DBWR) were unable to keep up with the demand for free
buffers.

   Recommendation 1: Database Configuration
   Estimated benefit is 10.76 active sessions, 13.63% of total activity.
   ---------------------------------------------------------------------
   Action
      Consider increasing the number of database writers (DBWR) by setting the
      parameter "db_writer_processes". Also consider if asynchronous I/O is
      appropriate for your architecture.
   Rationale
      The value of parameter "db_writer_processes" was "8" during the analysis
      period.
   Rationale
      The value of parameter "disk_asynch_io" was "TRUE" during the analysis
      period.

   Recommendation 2: Host Configuration
   Estimated benefit is 10.76 active sessions, 13.63% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate the I/O subsystem's write performance.
   Rationale
      During the analysis period, the average data files' I/O throughput was 0
      K per second for reads and 0 K per second for writes. The average
      response time for single block reads was 0 milliseconds.

   Recommendation 3: Application Analysis
   Estimated benefit is 10.76 active sessions, 13.63% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate application logic for possible use of direct path inserts as
      an alternative for multiple INSERT operations.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Configuration" was consuming significant database time.
      Impact is 10.99 active sessions, 13.92% of total activity.


Finding 6: "User I/O" wait Class
Impact is 10.54 active sessions, 13.36% of total activity.
----------------------------------------------------------
Wait class "User I/O" was consuming significant database time.
Waits for I/O to temporary tablespaces were not consuming significant database
time.
The throughput of the I/O subsystem was not significantly lower than expected.

   No recommendations are available.
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;


Finding 7: Global Cache Lost Blocks
Impact is 4.5 active sessions, 5.7% of total activity.
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
------------------------------------------------------
Cluster communications that were retried due to lost blocks consumed
significant database time.
The instance was consuming 32758 kilo bits per second of interconnect
bandwidth.
0% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 95% for database lock management.
The average latency for 8K interconnect messages was 1166 microseconds.
The instance is using the private interconnect device "fg-priv:1" with IP
address 169.254.26.102 and source "??".
	END IF;

   Recommendation 1: Host Configuration
   Estimated benefit is 4.5 active sessions, 5.7% of total activity.
   -----------------------------------------------------------------

   Action
      Check the configuration of the cluster interconnect. Check OS setup like
----------------------------------------------------------------------------------------------------------------------
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
      workaround.

   Symptoms That Led to the Finding:
   ---------------------------------
----------------------------------------------------------------------------------------------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 49.86 active sessions, 63.17% of total activity.

	 Wait class "Cluster" was consuming significant database time.
	 Impact is 52.52 active sessions, 66.55% of total activity.

	IF  ( v_select_only_workload = TRUE ) THEN

Finding 8: Unusual "Cluster" Wait Event
Impact is 2.65 active sessions, 3.36% of total activity.
		-- handle case where user specified zero pct updates (a SELECT-only workload)
--------------------------------------------------------
Wait event "gc current grant read-mostly invalidation" in wait class "Cluster"
was consuming significant database time.
		v_do_update := FALSE;

   Recommendation 1: Application Analysis
   Estimated benefit is 2.65 active sessions, 3.36% of total activity.
		v_update_quota := TRUE ;
   -------------------------------------------------------------------
   Action
      Investigate the cause for high "gc current grant read-mostly
	ELSE
      invalidation" waits. Refer to Oracle's "Database Reference" for the
      description of this wait event.

		IF ( v_update_only_workload = TRUE ) THEN
   Recommendation 2: Application Analysis
   Estimated benefit is 2.65 active sessions, 3.36% of total activity.
   -------------------------------------------------------------------
			-- handle case where user specified 100% updates
   Action
      Investigate the cause for high "gc current grant read-mostly
      invalidation" waits in Module "SQL*Plus".
			v_do_update := TRUE;

   Recommendation 3: Application Analysis
   Estimated benefit is 2.65 active sessions, 3.36% of total activity.
			v_update_quota := FALSE;
   -------------------------------------------------------------------
   Action
		ELSE
      Investigate the cause for high "gc current grant read-mostly
      invalidation" waits in Service "p30sdb.example.com".

			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
      Impact is 52.52 active sessions, 66.55% of total activity.


Finding 9: Unusual "Other" Wait Event
			IF ( v_update_quota = FALSE ) THEN
Impact is 2.23 active sessions, 2.83% of total activity.
--------------------------------------------------------
Wait event "KJC: Wait for msg sends to complete" in wait class "Other" was
				-- Handle case where user has set UPDATE_PCT to a valid value
consuming significant database time.

   Recommendation 1: Application Analysis
				--
   Estimated benefit is 2.23 active sessions, 2.83% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high "KJC: Wait for msg sends to complete"
				-- We are doing updates during this run and quota has not been met yet
      waits. Refer to Oracle's "Database Reference" for the description of
      this wait event.

				-- We still vacillate until update quota has been met
   Recommendation 2: Application Analysis
   Estimated benefit is 2.23 active sessions, 2.83% of total activity.
   -------------------------------------------------------------------

   Action
      Investigate the cause for high "KJC: Wait for msg sends to complete"
				IF ( MOD(v_random_block,  2) = 0 ) THEN
      waits in Module "SQL*Plus".

   Recommendation 3: Application Analysis
					v_do_update := TRUE;
   Estimated benefit is 2.23 active sessions, 2.83% of total activity.
   -------------------------------------------------------------------
   Action
				ELSE
      Investigate the cause for high "KJC: Wait for msg sends to complete"
      waits in Service "p30sdb.example.com".

					v_do_update := FALSE;
   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Other" was consuming significant database time.
				END IF;
      Impact is 2.28 active sessions, 2.89% of total activity.


Finding 10: Undersized SGA
			ELSE
Impact is 1.07 active sessions, 1.36% of total activity.
--------------------------------------------------------
The SGA was inadequately sized, causing additional I/O or hard parses.
				-- UPDATE quota has been filled,  force drain some SELECTs
The value of parameter "sga_target" was "3072 M" during the analysis period.

   Recommendation 1: Database Configuration
				v_do_update := FALSE;
   Estimated benefit is 1.04 active sessions, 1.32% of total activity.
   -------------------------------------------------------------------
   Action
			END IF;
      Increase the size of the SGA by setting the parameter "sga_target" to
      3840 M.

   Symptoms That Led to the Finding:
		END IF;
   ---------------------------------
      Wait class "User I/O" was consuming significant database time.
      Impact is 10.54 active sessions, 13.36% of total activity.
	END IF;




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
----------------------------------------------------------------------------------------------------------------------
	  ----------------------

Warnings
--------
-- The type of SQL is now determined...execute it in the following section
The flushing of snapshots 47 and 48 took 49 seconds which is 13% of the
analysis period time. This may reduce the reliability of the ADDM analysis.

Miscellaneous Information
----------------------------------------------------------------------------------------------------------------------
-------------------------
Wait class "Application" was not consuming significant database time.
Wait class "Commit" was not consuming significant database time.

Wait class "Concurrency" was not consuming significant database time.
CPU was not a bottleneck for the instance.
Wait class "Network" was not consuming significant database time.
	IF ( v_do_update != TRUE ) THEN
Session connect and disconnect calls were not consuming significant database
time.
Hard parsing of SQL statements was not consuming significant database time.
		--

RAC Statistics  DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

				Begin	End
		-- Do a SELECT statement
				----- -----
	   Number of Instances:     2	  2
	       Number of LMS's:     4	  4
		-- Work out scan or random
      Number of realtime LMS's:     4	  4  (0 priority changes)


Global Cache Load Profile
		IF  ( v_random_workload_only = TRUE ) THEN
~~~~~~~~~~~~~~~~~~~~~~~~~		   Per Second	    Per Transaction
				      ---------------	    ---------------
  Global Cache blocks received: 		12.25		       0.01
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
    Global Cache blocks served: 		11.85		       0.01
     GCS/GES messages received: 	    11,947.12		      11.44
			v_do_scan_query := FALSE;
	 GCS/GES messages sent: 	    14,485.63		      13.88
	    DBWR Fusion writes: 		 0.12		       0.00
 Estd Interconnect traffic (KB) 	     5,355.44
			v_scan_query_quota := TRUE ;


Global Cache Efficiency Percentages (Target local+remote 100%)
		ELSE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Buffer access -  local cache %:   45.90
Buffer access - remote cache %:    0.02
Buffer access - 	disk %:   54.08
			IF ( v_scan_workload_only = TRUE ) THEN
Global Cache Locality	     %:   83.70


				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
Global Cache and Enqueue Services - Workload Characteristics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	  Avg global cache cr block receive time (us):	       15,015.0
				v_do_scan_query := TRUE;
     Avg global cache current block receive time (us):	       13,106.8
			       Avg LMS process busy %:		   24.5

				v_scan_query_quota := FALSE;
	    Avg global cache cr block build time (us):		   38.4
      Global cache log flushes for cr blocks served %:		    6.9
	    Avg global cache cr block flush time (us):	      126,492.5
			ELSE

	 Avg global cache current block pin time (us):
 Global cache log flushes for current blocks served %:		    0.2
				IF ( v_scan_query_quota = FALSE ) THEN
       Avg global cache current block flush time (us):		4,000.0

		     Avg global enqueue get time (us):		1,079.8

					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
Global Cache and Enqueue Services - Messaging Statistics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		     Avg message sent queue time (us):		2,270.6
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
	     Avg message sent queue time on ksxp (us):		8,754.2
	  Avg message received kernel queue time (us):		  221.0
		 Avg message received queue time (us):		   54.8
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
		    Avg GCS message process time (us):		   29.7
		    Avg GES message process time (us):		   91.4

			    % of direct sent messages:		  37.33
						v_do_scan_query := TRUE;
			  % of indirect sent messages:		  61.41
			% of flow controlled messages:		   1.26
	  -------------------------------------------------------------
					ELSE

Cluster Interconnect
-> if Public/Source at End snap is different a '*' is displayed
~~~~~~~~~~~~~~~~~~~~
						v_do_scan_query := FALSE;
				    Begin			    End
	     --------------------------------------------------   -------
Interface    IP Address      Pub Source 			  Pub Src
					END IF;
----------   --------------- --- ------------------------------   --- ---
fg-priv:1    169.254.26.102  N

				ELSE
Global Messaging Statistics		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
					-- Scan quota has been filled,	force drain some random access SELECTS
Cluster reconfiguration count			 0	    0.0 	 0.0
Domain reconfiguration count			 0	    0.0 	 0.0
Global Enqueue S-optim Broadcasts		26	    0.1 	 0.0
					v_do_scan_query := FALSE;
Global Enqueue S-optim S-lock get	    83,660	  230.4 	 0.2
Global Enqueue S-optim anti-locks		64	    0.2 	 0.0
KA local message waits				 0	    0.0 	 0.0
				END IF;
KA local messages received			 0	    0.0 	 0.0
KA messages received actual			 0	    0.0 	 0.0
KA messages received logical			 0	    0.0 	 0.0
			END IF;
KA requests failed				 0	    0.0 	 0.0
KA requests succeeded				 0	    0.0 	 0.0
Pseudo reconfiguration count			 0	    0.0 	 0.0
		END IF;
Pseudo rm reconfig count			 0	    0.0 	 0.0
acks for commit broadcast(actual)	       984	    2.7 	 0.0
acks for commit broadcast(logical	     4,706	   13.0 	 0.0

broadcast msgs on commit(actual)	     8,107	   22.3 	 0.0
broadcast msgs on commit(logical)	    12,632	   34.8 	 0.0

broadcast msgs on commit(wasted)	     5,652	   15.6 	 0.0
dynamically allocated gcs resourc		 0	    0.0 	 0.0
dynamically allocated gcs shadows		 0	    0.0 	 0.0
		IF ( v_do_scan_query != TRUE ) THEN
flow control messages received			16	    0.0 	 0.0
flow control messages sent			16	    0.0 	 0.0
gcs assume cvt					 0	    0.0 	 0.0
gcs assume no cvt			     1,011	    2.8 	 0.0
			SELECT COUNT(c2) INTO v_rowcnt
gcs ast to fg				     1,443	    4.0 	 0.0
gcs ast xid					 0	    0.0 	 0.0
gcs bidless ast to lms				 6	    0.0 	 0.0
			FROM cf1
gcs blocked converts			   231,090	  636.5 	 0.6
gcs blocked cr converts 		       632	    1.7 	 0.0
gcs compatible basts				16	    0.0 	 0.0
gcs compatible cr basts (global)		51	    0.1 	 0.0
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);
gcs compatible cr basts (local) 	       565	    1.6 	 0.0
gcs cr basts to PIs				 0	    0.0 	 0.0
gcs cr requests to slave			 0	    0.0 	 0.0

gcs cr serve without current lock		 0	    0.0 	 0.0
gcs dbwr flush pi msgs			   245,935	  677.4 	 0.6
gcs dbwr write request msgs			42	    0.1 	 0.0
gcs error msgs					 1	    0.0 	 0.0
			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
gcs flash read serve requests to		 0	    0.0 	 0.0
gcs force cr block only 			 0	    0.0 	 0.0
gcs force cr grant				 0	    0.0 	 0.0
		ELSE
gcs force cr no current 			 0	    0.0 	 0.0
gcs forward cr to pinged instance		 0	    0.0 	 0.0
gcs grant ast				     1,449	    4.0 	 0.0
gcs grant request in partial open		 0	    0.0 	 0.0
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;
gcs immediate (compatible) conver	     3,081	    8.5 	 0.0
gcs immediate (null) converts		    64,222	  176.9 	 0.2
gcs immediate cr (compatible) con	   117,580	  323.9 	 0.3

gcs immediate cr (null) converts	   798,153	2,198.5 	 2.1
gcs lms flush pi msgs				 0	    0.0 	 0.0
gcs lms write request msgs		       124	    0.3 	 0.0
			v_scan_queries_cnt := v_scan_queries_cnt + 1;
gcs msgs process time(ms)		   119,648	  329.6 	 0.3
gcs msgs received			 4,022,027     11,078.8 	10.6
gcs new served by master		       111	    0.3 	 0.0

gcs out-of-order msgs			       814	    2.2 	 0.0
gcs pings refused			       219	    0.6 	 0.0
gcs pkey conflicts retry			 0	    0.0 	 0.0
gcs queued converts				 0	    0.0 	 0.0
			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
gcs read-mostly failure unmount d		 0	    0.0 	 0.0
gcs reader bypass N->Xw ping loca		 0	    0.0 	 0.0

				v_scan_query_quota := TRUE;
Global Messaging Statistics		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
			END IF;
gcs reader bypass N->Xw ping remo		 0	    0.0 	 0.0
gcs reader bypass grant X on assu		 0	    0.0 	 0.0
gcs reader bypass grant ast			 0	    0.0 	 0.0
		END IF;
gcs reader bypass grant fg ast			 0	    0.0 	 0.0
gcs reader bypass grant immediate		70	    0.2 	 0.0

gcs recovery claim msgs 			 0	    0.0 	 0.0
gcs refuse xid					 0	    0.0 	 0.0
gcs refuse xid to fg				 0	    0.0 	 0.0
gcs refuse xid to lms				 0	    0.0 	 0.0
		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
gcs refuse xid to master			 0	    0.0 	 0.0
gcs regular cr					 0	    0.0 	 0.0
gcs resources for dynamic sga			 0	    0.0 	 0.0
	ELSE
gcs retry convert request			 0	    0.0 	 0.0
gcs shadows for dynamic sga			 0	    0.0 	 0.0
gcs share recovery bast 			 0	    0.0 	 0.0
		--
gcs side channel msgs actual		     2,747	    7.6 	 0.0
gcs side channel msgs logical		   320,670	  883.3 	 0.8
gcs stale cr					 8	    0.0 	 0.0
gcs undo cr				     1,490	    4.1 	 0.0
		-- Do an UPDATE statement
gcs write notification msgs			 0	    0.0 	 0.0
gcs writes refused				 0	    0.0 	 0.0
ges msgs process time(ms)		       144	    0.4 	 0.0
		--
ges msgs received			     1,576	    4.3 	 0.0
ges remote lock allocation			14	    0.0 	 0.0
global posts dropped				 0	    0.0 	 0.0
global posts queue time 			 0	    0.0 	 0.0

global posts queued				 0	    0.0 	 0.0
global posts requested				 0	    0.0 	 0.0
global posts sent				 0	    0.0 	 0.0
implicit batch messages received	    96,753	  266.5 	 0.3
		v_my_serial := v_my_serial + v_loop_cnt ;
implicit batch messages sent		   103,127	  284.1 	 0.3
lmd msg send time(ms)				 0	    0.0 	 0.0
lms(s) msg send time(ms)			 0	    0.0 	 0.0

messages flow controlled		    56,077	  154.5 	 0.1
messages queue sent actual		 1,409,133	3,881.5 	 3.7
messages queue sent logical		   696,730	1,919.2 	 1.8
messages received actual		 2,414,768	6,651.6 	 6.4
		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
messages received logical		 4,023,603     11,083.2 	10.6
messages sent directly			 1,660,381	4,573.6 	 4.4
messages sent indirectly		 2,731,865	7,525.0 	 7.2
		--
messages sent not implicit batche	   187,494	  516.5 	 0.5
messages sent pbatched			 2,832,067	7,801.0 	 7.5
msgs causing lmd to send msgs			 0	    0.0 	 0.0
msgs causing lms(s) to send msgs		 0	    0.0 	 0.0
		-- Increment count of UPDATES and set UPDATE quota flag if needed
msgs received kernel queue time (  889,221,618,716 2.449397E+09  2,346,429.3
msgs received queue time (ms)		   220,338	  606.9 	 0.6
msgs received queued			 4,023,603     11,083.2 	10.6
		--
msgs sent queue time (ms)		 3,741,123     10,305.1 	 9.9
msgs sent queue time on ksxp (ms)	26,879,527     74,040.7 	70.9
msgs sent queued			 1,647,658	4,538.5 	 4.3
msgs sent queued on ksxp		 3,070,469	8,457.7 	 8.1
		v_updates_cnt := v_updates_cnt + 1;
number of broadcasted resources 		 0	    0.0 	 0.0
number of directly freed master r		 0	    0.0 	 0.0
number of ges deadlock detected 		 0	    0.0 	 0.0
number of lock borrowed by LMD			 0	    0.0 	 0.0

number of received ODPS messages		 0	    0.0 	 0.0
number of received RBA messages 		 0	    0.0 	 0.0
number of resource borrowed by LM		 0	    0.0 	 0.0
number of sent ODPS messages			 0	    0.0 	 0.0
		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
number of sent RBA messages			 0	    0.0 	 0.0

Global Messaging Statistics		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

			v_update_quota := TRUE;
Statistic				     Total   per Second    per Trans
--------------------------------- ---------------- ------------ ------------
process batch messages received 	 1,021,433	2,813.6 	 2.7
		END IF;
process batch messages sent		   918,047	2,528.8 	 2.4
receiver cycle time			   477,347	1,314.9 	 1.3
receiver loop count			 2,228,885	6,139.6 	 5.9
	END IF ;
			  ------------------------------------------------------


Global CR Server Statistics		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48

----------------------------------------------------------------------------------------------------------------------
Statistic				    Total
------------------------------ ------------------
CR Block Requests			      519
CURRENT Block Requests			    1,586
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
Data Block Requests			      519
Undo Block Requests				0
TX Block Requests			    1,576
Current Results 			    1,940
Private results 				0
----------------------------------------------------------------------------------------------------------------------
Zero Results					0
Disk Read Results				6
Fail Results				      159
Fairness Down Converts			      514

Light Works				      334
Flushes 				      134
Builds					      519
Errors						0
	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
			  ------------------------------------------------------

Global Current Server Statistics	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Pins    = CURRENT Block Pin Operations
		--
-> Flushes = Redo Flush before CURRENT Block Served Operations

Statistic	  Total % <100us   % <1ms  % <10ms % <100ms    % <1s   % <10s
---------- ------------ -------- -------- -------- -------- -------- --------
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
Pins		      0
Flushes 	      5 		     60.00    40.00
			  ------------------------------------------------------

		-- so reset flags and counters before continuing
Global Cache Transfer Statistics	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> Busy        (Busy) - Block Transfer impacted by Remote Contention
		--
-> Congested (Congst) - Block Transfer impacted by Remote System Load
-> ordered by CR + Current Blocks Received desc

			       CR			  Current
		v_update_quota := FALSE;
		 ----------------------------- -----------------------------
Inst Block	   Blocks      %      %      %	 Blocks      %	    %	   %
  No Class	 Received  Immed   Busy Congst Received  Immed	 Busy Congst
		v_updates_cnt := 0;
---- ----------- -------- ------ ------ ------ -------- ------ ------ ------
   1 data block       604   99.5     .2     .3	  3,743   10.3	 88.6	 1.0
		v_selects_cnt := 0;
   1 undo header       47   63.8   36.2     .0	      1     .0	100.0	  .0
   1 Others	       12  100.0     .0     .0	     20   15.0	 85.0	  .0
			  ------------------------------------------------------

	END IF;
Global Cache Transfer Times (us)	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Avg Time - average time of all blocks (Immed,Busy,Congst) in us
-> Immed, Busy, Congst -  Average times in us

-> ordered by CR + Current Blocks Received desc

		    CR Avg Time (us)	     Current Avg Time (us)
	      --------------------------- ---------------------------
Inst Block
	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
  No Class	 All  Immed   Busy Congst    All  Immed   Busy Congst
---- -------- ------ ------ ------ ------ ------ ------ ------ ------
   1 data blo	8045   6263 1.E+06   4487  13244  22525   9686 2.E+05
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
   1 undo hea 1.E+05	804 3.E+05    N/A    848    N/A    848	  N/A
   1 others	 241	241    N/A    N/A    733    432    786	  N/A
   1 undo blo	 N/A	N/A    N/A    N/A    N/A    N/A    N/A	  N/A
		-- so reset flags and counters
			  ------------------------------------------------------

Global Cache Transfer (Immediate)	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
		v_scan_query_quota := FALSE;
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> % of Blocks Received requiring 2 or 3 hops
-> ordered by CR + Current Blocks Received desc

		v_scan_queries_cnt := 0;
				   CR			    Current
		      --------------------------- ---------------------------
 Src Block     Blocks  Immed Blks	%	%  Immed Blks	    %	    %
Inst Class	 Lost	 Received    2hop    3hop    Received	 2hop	 3hop
		v_random_access_queries_cnt := 0;
---- -------- ------- ----------- ------- ------- ----------- ------- -------
   1 data blo		      601   100.0     0.0	  387	100.0	  0.0
   1 undo hea		       30   100.0     0.0	  N/A	  N/A	  N/A
	END IF;
   1 others		       12   100.0     0.0	    3	100.0	  0.0
   1 undo blo		      N/A     N/A     N/A	  N/A	  N/A	  N/A
			  ------------------------------------------------------


Global Cache Times (Immediate)		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Blocks Lost, 2-hop and 3-hop Average times in (us)
-> ordered by CR + Current Blocks Received desc

	v_loop_cnt := v_loop_cnt + 1 ;
		       CR Avg Time (us)   Current Avg Time (us)
		     -------------------- --------------------
 Src Block	Lost
Inst Class	Time  Immed   2hop   3hop  Immed   2hop   3hop
	v_now := DBMS_UTILITY.GET_TIME();
---- -------- ------ ------ ------ ------ ------ ------ ------
   1 data blo	       6263   6263    N/A  22525  22525    N/A
   1 undo hea		804    804    N/A    N/A    N/A    N/A

   1 others		241    241    N/A    432    432    N/A
   1 undo blo		N/A    N/A    N/A    N/A    N/A    N/A
			  ------------------------------------------------------

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
Interconnect Ping Latency Statistics	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Ping latency of the roundtrip of a message from this instance to -> target in
-> The target instance is identified by an instance number.
-> Average and standard deviation of ping latency is given in microseconds
		-- If this is a fixed-iteration count test cycle and we've hit the number of
-> for message sizes of 500 bytes and 8K.
-> Note that latency of a message from the instance to itself is used as
-> control, since message latency can include wait for CPU

		-- iterations then set exit flag
   Target 500B Pin Avg La      Stddev  8K Ping Avg La	   Stddev
 Instance    Count 500B m    500B msg	 Count 8K msg	   8K msg
--------- -------- ------ ----------- -------- ------ -----------
		v_stop_immediate := TRUE ;
	1	30    812	  .54	    33	 1166	     1.69
	2	30    313	  .14	    33	  294	      .13
			  ------------------------------------------------------

	END IF;
Interconnect Throughput by Client	 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Throughput of interconnect usage by major consumers
-> All throughput numbers are megabytes per second
END LOOP;

			Send	 Receive
Used By 	  Mbytes/sec  Mbytes/sec
---------------- ----------- -----------

Global Cache		 .04	     .13
Parallel Query		 .02	     .03
DB Locks		3.82	    2.67
v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="2xfg27zhudyay"></a>2xfg27zhudyay</td><td class='awrc'><pre_sqltext class="awr">WITH binds as
	 (select :dbid			as dbid
	       ,  :inst_id_low		 as instIdLow
	       ,  :inst_id_high 	 as instIdHigh
	       ,  :begin_snap		 as beginSnap
	       ,  :end_snap		 as endSnap
	       ,  :begin_time		 as beginTime
	       ,  :end_time		 as endTime
	       ,  :disk_begin_time	 as diskBeginTime
	       ,  :disk_end_time	 as diskEndTime
	       ,  :mem_begin_time	 as memBeginTime
	       ,  :mem_end_time 	 as memEndTime
	       ,  :bucket_count 	 as bucketCount
	       ,  :bucket_interval	 as bucketInterval
	       ,  :mem_enable		 as memEnable
	       ,  :disk_enable		 as diskEnable
DB Streams		 N/A	     N/A
	       ,  :disk_filter_ratio	 as filterRatio,  :filter_action as filter_action,  :filter_blocking_session as filter_blocking_session,  :filter_capture_id as filter_capture_id,  :filter_client_id as filter_client_id,  :filter_consumer_group_id as filter_consumer_group_id,  :filter_dbop as filter_dbop,  :filter_ecid as filter_ecid,	:filter_event as filter_event,	:filter_instance_number as filter_instance_number,  :filter_is_captured as filter_is_captured,	:filter_is_filtered_out as filter_is_filtered_out,  :filter_is_nc_background as filter_is_nc_background,  :filter_is_replayed as filter_is_replayed,  :filter_machine as filter_machine,  :filter_machine_port as filter_machine_port,	:filter_module as filter_module,  :filter_object as filter_object,  :filter_pdb as filter_pdb,	:filter_physical_session as filter_physical_session,  :filter_pl_sql as filter_pl_sql,	:filter_pl_sql_top as filter_pl_sql_top,  :filter_program as filter_program,  :filter_px_process as filter_px_process,	:filter_service_hash as filter_service_hash,  :filter_session_type as filter_session_type,  :filter_sql_fms as filter_sql_fms,	:filter_sql_id_top as filter_sql_id_top,  :filter_sql_opcode as filter_sql_opcode,  :filter_sql_opcode_top as filter_sql_opcode_top,  :filter_sql_rws as filter_sql_rws,  :filter_sql_rws_line as filter_sql_rws_line,	:filter_sqlid as filter_sqlid,	:filter_sqlid_fullphv as filter_sqlid_fullphv,	:filter_sqlid_phv as filter_sqlid_phv,	:filter_user_id as filter_user_id,  :filter_wait_class as filter_wait_class,  :filter_xid as filter_xid from sys.dual)	,  unified_ash as
Other			 .02	     .01
			  ------------------------------------------------------
	     (SELECT a.sample_id

Interconnect Device Statistics		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Throughput and errors of interconnect devices (at OS level)
       ,  a.sample_time
-> All throughput numbers are megabytes per second

Device Name	IP Address	 Public Source
       ,  a.session_id
--------------- ---------------- ------ -------------------------------
				  Send	   Send
       ,  a.session_serial#
       Send	Send	 Send	Buffer	Carrier
 Mbytes/sec   Errors  Dropped  Overrun	   Lost
----------- -------- -------- -------- --------
       ,  a.session_type
			       Receive	Receive
    Receive  Receive  Receive	Buffer	  Frame
 Mbytes/sec   Errors  Dropped  Overrun	 Errors
       ,  a.session_state
----------- -------- -------- -------- --------
       ,  a.flags
fg-priv:1	169.254.26.102	 NO
	.00	   0	    0	     0	      0
       ,  a.user_id
	.00	   0	    0	     0	      0
			  ------------------------------------------------------
       ,  a.sql_id

Dynamic Remastering Statistics		 DB/Inst: P30SDB/p30sdb2  Snaps: 47-48
-> Times are in seconds
       ,  a.sql_opcode
-> Affinity objects - Affinity objects mastered at the begin/end snapshot
-> Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot
       ,  a.sql_opname

							per    Begin	  End
Name					Total	Remaster Op	Snap	 Snap
       ,  a.top_level_sql_id
-------------------------------- ------------ ------------- -------- --------
remaster ops				    1	       1.00
remastered objects			    7	       7.00
       ,  a.top_level_sql_opcode
replayed locks received 		    0	       0.00
replayed locks sent			    0	       0.00
       ,  a.sql_child_number
resources cleaned			    0	       0.00
remaster time (s)			  0.8	       0.82
freeze time (s) 			  0.1	       0.08
       ,  a.sql_plan_hash_value
cleanup time (s)			  0.0	       0.01
replay time (s) 			  0.0	       0.01
fixwrite time (s)			  0.0	       0.01
       ,  a.sql_full_plan_hash_value
sync time (s)				  0.6	       0.58
affinity objects					N/A	  63	   61
read-mostly objects					N/A	  65	   65
       ,  a.sql_plan_line_id
affinity objects (other inst)				N/A	 135	  132
read-mostly objects (persistent)			N/A	   0	    0
       ,  a.sql_plan_operation
			  ------------------------------------------------------

End of Report
       ,  a.sql_plan_options
       ,  a.sql_exec_id
       ,  a.force_matching_signature
       ,  a.plsql_entry_object_id
       ,  a.plsql_entry_subprogram_id
       ,  a.plsql_object_id
       ,  a.plsql_subprogram_id
       ,  a.service_hash
       ,  a.qc_session_id
       ,  a.qc_instance_id
       ,  a.qc_session_serial#
       ,  nvl(a.event,
	    CASE WHEN bitand(a.time_model,  power(2, 19)) &gt; 0
		 THEN 'CPU: IM Populate'
		 WHEN bitand(a.time_model,  power(2, 20)) &gt; 0
		 THEN 'CPU: IM Prepopulate'
		 WHEN bitand(a.time_model,  power(2, 21)) &gt; 0
		 THEN 'CPU: IM Repopulate'
		 WHEN bitand(a.time_model,  power(2, 22)) &gt; 0
		 THEN 'CPU: IM Trickle Repop'
		 WHEN bitand(a.time_model,  power(2, 18)) &gt; 0
		 THEN 'CPU: IM Query'
	     ELSE 'CPU + Wait for CPU' END) as event
       ,  nvl(a.event_id,  1)
	   as event_id	
       ,  nvl(a.wait_class,  'CPU')
	   as wait_class	
       ,  nvl(a.wait_class_id,	9999)
	   as wait_class_id
       ,  a.seq#
       ,  a.p1
       ,  a.p1text
       ,  a.p2
       ,  a.p2text	
       ,  a.p3
       ,  a.p3text	
       ,  a.wait_time
       ,  a.time_waited	
       ,  rawtohex(a.xid) as xid	
       ,  a.blocking_session
       ,  a.blocking_session_serial#
       ,  a.blocking_session_status
       ,  a.blocking_inst_id
       ,  a.current_obj#
       ,  a.current_file#
       ,  a.current_block#	
       ,  a.top_level_call#
       ,  a.top_level_call_name
       ,  a.program
       ,  a.module
       ,  a.action
       ,  a.client_id
       ,  a.remote_instance#	
       ,  a.ecid
       ,  a.consumer_group_id
       ,  a.machine
       ,  a.port
       ,  a.in_connection_mgmt
       ,  a.in_parse
       ,  a.in_hard_parse	
       ,  a.in_sql_execution
       ,  a.in_plsql_execution
       ,  a.in_plsql_rpc	
       ,  a.in_plsql_compilation
       ,  a.in_java_execution
       ,  a.in_bind
       ,  a.in_cursor_close
       ,  a.in_sequence_load
       ,  a.is_captured
       ,  a.is_replayed
       ,  a.dbreplay_file_id
       ,  a.dbop_name
       ,  a.con_dbid,  decode(binds.diskEnable, 0, 1, binds.filterRatio)
		       as sample_count
		   ,  inst_id as instance_number
		FROM sys.gv_$active_session_history a,	binds
	       WHERE binds.memEnable = 1
		 AND (	binds.diskEnable = 0
		     OR (  binds.diskEnable = 1
		       AND a.is_awr_sample = 'Y'
		       AND bitand(a.flags,  128) = 0 ) )
		 AND a.inst_id between
			  binds.instIdLow
		      and binds.instIdHigh
		 AND a.sample_time between
			  binds.beginTime
		      and binds.endTime
	      UNION ALL
	      SELECT a.sample_id
       ,  a.sample_time
       ,  a.session_id
       ,  a.session_serial#
       ,  a.session_type
       ,  a.session_state
       ,  a.flags
       ,  a.user_id
       ,  a.sql_id
       ,  a.sql_opcode
       ,  a.sql_opname
       ,  a.top_level_sql_id
       ,  a.top_level_sql_opcode
       ,  a.sql_child_number
       ,  a.sql_plan_hash_value
       ,  a.sql_full_plan_hash_value
       ,  a.sql_plan_line_id
       ,  a.sql_plan_operation
       ,  a.sql_plan_options
       ,  a.sql_exec_id
       ,  a.force_matching_signature
       ,  a.plsql_entry_object_id
       ,  a.plsql_entry_subprogram_id
       ,  a.plsql_object_id
       ,  a.plsql_subprogram_id
       ,  a.service_hash
       ,  a.qc_session_id
       ,  a.qc_instance_id
       ,  a.qc_session_serial#
       ,  nvl(a.event,
	    CASE WHEN bitand(a.time_model,  power(2, 19)) &gt; 0
		 THEN 'CPU: IM Populate'
		 WHEN bitand(a.time_model,  power(2, 20)) &gt; 0
		 THEN 'CPU: IM Prepopulate'
		 WHEN bitand(a.time_model,  power(2, 21)) &gt; 0
		 THEN 'CPU: IM Repopulate'
		 WHEN bitand(a.time_model,  power(2, 22)) &gt; 0
		 THEN 'CPU: IM Trickle Repop'
		 WHEN bitand(a.time_model,  power(2, 18)) &gt; 0
		 THEN 'CPU: IM Query'
	     ELSE 'CPU + Wait for CPU' END) as event
       ,  nvl(a.event_id,  1)
	   as event_id	
       ,  nvl(a.wait_class,  'CPU')
	   as wait_class	
       ,  nvl(a.wait_class_id,	9999)
	   as wait_class_id
       ,  a.seq#
       ,  a.p1
       ,  a.p1text
       ,  a.p2
       ,  a.p2text	
       ,  a.p3
       ,  a.p3text	
       ,  a.wait_time
       ,  a.time_waited	
       ,  rawtohex(a.xid) as xid	
       ,  a.blocking_session
       ,  a.blocking_session_serial#
       ,  a.blocking_session_status
       ,  a.blocking_inst_id
       ,  a.current_obj#
       ,  a.current_file#
       ,  a.current_block#	
       ,  a.top_level_call#
       ,  a.top_level_call_name
       ,  a.program
       ,  a.module
       ,  a.action
       ,  a.client_id
       ,  a.remote_instance#	
       ,  a.ecid
       ,  a.consumer_group_id
       ,  a.machine
       ,  a.port
       ,  a.in_connection_mgmt
       ,  a.in_parse
       ,  a.in_hard_parse	
       ,  a.in_sql_execution
       ,  a.in_plsql_execution
       ,  a.in_plsql_rpc	
       ,  a.in_plsql_compilation
       ,  a.in_java_execution
       ,  a.in_bind
       ,  a.in_cursor_close
       ,  a.in_sequence_load
       ,  a.is_captured
       ,  a.is_replayed
       ,  a.dbreplay_file_id
       ,  a.dbop_name
       ,  a.con_dbid,  binds.filterRatio as sample_count
		   ,  instance_number as instance_number
		FROM AWR_ROOT_active_sess_history a,
		     binds
	       WHERE binds.diskEnable = 1
		 AND a.dbid = binds.dbid
		 AND a.instance_number between
			  binds.instIdLow
Report written to awr.txt
		      and binds.instIdHigh
		 AND a.snap_id between
			  binds.beginSnap
		      and binds.endSnap + 1
		 AND a.sample_time between
			  binds.beginTime
		      and binds.endTime
	     ),  logical_ash as
	     (select sample_id
		   ,  sample_time
		   ,  sample_count
		   ,  instance_number as inst_id, action as action, event as event, instance_number as instance_number, module as module, instance_number || ':' || session_id || ', ' || session_serial# as physical_session, service_hash as service_hash, sql_id as sqlid, wait_class as wait_class,  xid as xid,  user_id as user_id,  program as program from unified_ash) ,  bucketized_ash as
	   (SELECT ash0.*,
		  (case when binds.bucketCount &gt; 1
			then trunc( ( (24 * 60 * 60 *
				       extract(day from sample_time
						      - binds.beginTime))
				    + (60 * 60 *
SQL> 				       extract(hour from sample_time
SQL> 						      - binds.beginTime))
SQL> 				    + (60 *
SQL> 				       extract(minute from sample_time
SQL> SQL> 						      - binds.beginTime))
SQL> 				    + (1 *
				       extract(second from sample_time
						      - binds.beginTime))
				     ) / binds.bucketInterval
				   ) + 1
			else 1
		   end) as bucket_number
	   FROM logical_ash ash0,  binds),  filter_xml as
	 (SELECT xmlconcat(xmlelement(&quot;filters&quot; )
	 ,  xmlelement(&quot;report_time&quot;, xmlattributes(
	     to_char(o.begintime,  'HH24:MI:SS MM/DD/YYYY') as &quot;begin_time&quot;,
	     to_char(o.endtime,  'HH24:MI:SS MM/DD/YYYY') as &quot;end_time&quot;))) as xml_frag FROM
    (select binds.*,  nvl(to_number(filter_pdb), 0) as con_dbid from binds) o) ,  filtered_ash as
	      (SELECT ash.*,
		      1  filtered
	       FROM bucketized_ash ash,  binds WHERE 1=1 ),  grouped_ash as
		   (SELECT ash.*,   0 AS bucket_type  FROM (SELECT sqlid, physical_session, action, module, service_hash, instance_number, event, wait_class	  ,  grouping_id(sqlid, physical_session, action, module, service_hash, instance_number, event, wait_class) as gid  , max(inst_id)	      as inst_id
			     , sum(sample_count)       as sample_count
			     , count(distinct sqlid)   as uniq_sqlids
			     , count(distinct xid)     as uniq_xids
			     , count(distinct physical_session)
						      as uniq_sessions
			     , count(distinct instance_number)
						      as uniq_instances, max(user_id) as user_id, max(program) as program from	filtered_ash
		     group by  grouping sets( (wait_class),  (sqlid),  (module),  (event),  (action),  (instance_number),  (physical_session),	(service_hash)) ) ash ),  component_1_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket


		    from (select max(case when mem_rank &lt;= 13
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 13
				   then mem_rank
				   else (13 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 13
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 13
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 13
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 13
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select wait_class as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , wait_class) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 254
			      and wait_class is not null)
		    group by (case when mem_rank &lt;= 13
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_1_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('wait_class' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 13
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 13
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 13
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_1_treemap) t
		   ) topmems),	component_2_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket


		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select event as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , event) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 253
			      and event is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_2_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('event' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all


			  , max(case when mem_rank &lt;= 5


				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_2_treemap) t
		   ) topmems),	component_3_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket

			 , NVL((SELECT instance_name
	FROM sys.gv_$instance v
	WHERE v.instance_number = left.dim_val
	  AND rownum &lt; 2  ), ( SELECT instance_name
	FROM AWR_ROOT_database_instance v,  binds b
	WHERE v.dbid = b.dbid
	  AND v.instance_number = left.dim_val
	  AND rownum &lt; 2)) as instance_name
		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select instance_number as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , instance_number) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt.  Default value is 'html'.

'html'		HTML format (default)
'text'		Text format
'active-html'	Includes Performance Hub active report


			     from grouped_ash
			    where gid = 251
			      and instance_number is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_3_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('instance_number' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       , instance_name)
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_3_treemap) t

Type Specified:  text

		   ) topmems),	component_4_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket

			 , NVL((SELECT name
       FROM sys.gv_$active_services v
       WHERE v.name_hash = left.dim_val
	     AND v.inst_id = left.inst_id
	     AND rownum &lt; 2 ), ( SELECT service_name
       FROM AWR_ROOT_service_name v,  binds b
       WHERE v.dbid = b.dbid
	     AND v.service_name_hash = left.dim_val
	     AND rownum &lt; 2)) as service_name
		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select service_hash as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , service_hash) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 247
			      and service_hash is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_4_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('service_hash' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       , service_name)
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_4_treemap) t
		   ) topmems),	component_5_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket


		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select module as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , module) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 239
			      and module is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_5_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('module' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_5_treemap) t
		   ) topmems),	component_6_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket


		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select action as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , action) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 223
			      and action is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_6_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('action' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_6_treemap) t
		   ) topmems),	component_7_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket
			 , user_id, program

		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id

			 , max(case when mem_rank &lt;= 5
			  then user_id		else null
		     end)		      as user_id, max(case when mem_rank &lt;= 5
			  then program		else null
		     end)		      as program
		     from (select physical_session as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , physical_session) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id

				 , user_id, program
			     from grouped_ash
			    where gid = 191
			      and physical_session is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_7_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('physical_session' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)
				       , xmlconcat(xmlelement(&quot;info&quot;, xmlattributes('user_id' as &quot;name&quot;), user_id), xmlelement(&quot;info&quot;, xmlattributes('program' as
&quot;name&quot;), program))
				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_7_treemap) t
		   ) topmems),	component_8_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket

			 , NVL((SELECT replace(substr(v.sql_text,  1,  100), CHR(0), '') as sql_text
	 FROM sys.gv_$sql v
	 WHERE v.sql_id = left.dim_val
	       AND v.inst_id = left.inst_id

	       AND rownum &lt; 2 ), ( SELECT replace(sys.dbms_lob.substr(v.sql_text,  100,  1), CHR(0), '')
	   as sql_text
	 FROM AWR_ROOT_sqltext v,  binds b
	 WHERE v.dbid = b.dbid
	   AND v.sql_id = left.dim_val

	   AND rownum &lt; 2)) as sql_text
		    from (select max(case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 5
				   then mem_rank
				   else (5 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 5
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 5
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 5
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 5
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id


		     from (select sqlid as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , sqlid) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 127
			      and sqlid is not null)
		    group by (case when mem_rank &lt;= 5
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_8_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('sqlid' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , topmems.topmems_frag) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 5
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as
&quot;uniq_instances&quot;)

				       , sql_text)
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 5
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 5
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_8_treemap) t
		   ) topmems)select
		   xmlconcat((select xml_frag from filter_xml),
		      xmlelement(&quot;dim_list&quot;,
			xmlelement(&quot;item&quot;,
			  xmlattributes('top_dimensions' as &quot;id&quot;),
			  xmlelement(&quot;subdim&quot;,  xmlconcat((select dim_frag from component_1_xml), (select dim_frag from component_2_xml), (select dim_frag from component_3_xml), (select dim_frag from component_4_xml), (select dim_frag from component_5_xml), (select dim_frag from component_6_xml), (select dim_frag from component_7_xml), (select dim_frag from component_8_xml)))),
	 xmltype('
	   &lt;item type=&quot;separator&quot; /&gt;'),
	 xmltype('
	   &lt;item id=&quot;sql_cat&quot;&gt;
	     &lt;subdim&gt;
	       &lt;item id=&quot;sqlid&quot; /&gt;
	       &lt;item id=&quot;sql_id_top&quot; /&gt;
	       &lt;item id=&quot;sql_fms&quot; /&gt;
	       &lt;item id=&quot;sqlid_phv&quot; /&gt;
	       &lt;item id=&quot;sqlid_fullphv&quot;/&gt;
	       &lt;item id=&quot;sql_rws&quot; /&gt;
	       &lt;item id=&quot;sql_rws_line&quot; /&gt;
	       &lt;item id=&quot;sql_opcode&quot; /&gt;
	       &lt;item id=&quot;sql_opcode_top&quot; /&gt;
	     &lt;/subdim&gt;
	   &lt;/item&gt;'),
	 xmltype('
	   &lt;item id=&quot;pl_sql_cat&quot;&gt;
	     &lt;subdim&gt;
	       &lt;item id=&quot;pl_sql&quot; /&gt;
	       &lt;item id=&quot;pl_sql_top&quot; /&gt;
	     &lt;/subdim&gt;
	   &lt;/item&gt;'),
	 xmltype('
	   &lt;item id=&quot;resource_consumption_cat&quot;&gt;
	     &lt;subdim&gt;
	       &lt;item id=&quot;wait_class&quot; /&gt;
	       &lt;item id=&quot;event&quot; /&gt;
	       &lt;item id=&quot;object&quot; /&gt;
	       &lt;item id=&quot;blocking_session&quot; /&gt;
	     &lt;/subdim&gt;
	   &lt;/item&gt;'),
	 xmltype('
	   &lt;item id=&quot;session_identifiers_cat&quot;&gt;
	     &lt;subdim&gt;
	       &lt;item id=&quot;instance_number&quot; /&gt; &lt;item id=&quot;service_hash&quot; /&gt;
	       &lt;item id=&quot;physical_session&quot; /&gt;
	       &lt;item id=&quot;px_process&quot; /&gt;
	       &lt;item id=&quot;user_id&quot; /&gt;
	       &lt;item id=&quot;program&quot; /&gt;
	       &lt;item id=&quot;session_type&quot; /&gt;
	     &lt;/subdim&gt;
	    &lt;/item&gt;'),
	 xmltype('
	   &lt;item id=&quot;session_attributes_cat&quot;&gt;
	     &lt;subdim&gt;
	       &lt;item id=&quot;consumer_group_id&quot; /&gt;
	       &lt;item id=&quot;module&quot; /&gt;
	       &lt;item id=&quot;action&quot; /&gt;
	       &lt;item id=&quot;client_id&quot; /&gt;
	       &lt;item id=&quot;machine&quot; /&gt;
	       &lt;item id=&quot;machine_port&quot; /&gt;
	       &lt;item id=&quot;xid&quot; /&gt;
	       &lt;item id=&quot;ecid&quot; /&gt;
	       &lt;item id=&quot;dbop
&quot; /&gt;
	     &lt;/subdim&gt;
	   &lt;/item&gt;'))
		  ) from sys.dual</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="31vnknytrunbv"></a>31vnknytrunbv</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '128';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;

v_brick_wall PLS_INTEGER;



v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN


					-- Handle case where user specified valid,  non-zero,  SCAN_PCT

					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="35dumc2tpr9dv"></a>35dumc2tpr9dv</td><td class='awrc'><pre_sqltext class="awr">UPDATE CF1 SET C2 = :B3 ,	C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 )) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="360cbxs8zpbwv"></a>360cbxs8zpbwv</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '151';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="37j3jp5dz0b0t"></a>37j3jp5dz0b0t</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '145';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="38r80y2wpq2ma"></a>38r80y2wpq2ma</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '46';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3bgsbnp64xsbg"></a>3bgsbnp64xsbg</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '10';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="3un99a0zwp4vd"></a>3un99a0zwp4vd</td><td class='awrnc'><pre_sqltext class="awr">select owner#, name, namespace, remoteowner, linkname, p_timestamp, p_obj#,  nvl(property, 0), subname, type#, flags, d_attrs from dependency$ d,  obj$ o where d_obj#=:1 and p_obj#=obj#(+) order by order#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="4638b2uwsqsp1"></a>4638b2uwsqsp1</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '26';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="4zttz5yb0wfmw"></a>4zttz5yb0wfmw</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '170';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="50rt989k98t99"></a>50rt989k98t99</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '182';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="50vxqdkj4zu1w"></a>50vxqdkj4zu1w</td><td class='awrnc'><pre_sqltext class="awr">select user#, password, datats#, tempts#, type#, defrole, resource$, ptime, decode(defschclass, NULL, 'DEFAULT_CONSUMER_GROUP', defschclass), spare1, spare4, ext_username, spare2, nvl(spare3, 16382), spare9, spare10 from user$ where name=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5r2yzfvxw0427"></a>5r2yzfvxw0427</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '138';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5u7g54s63p4ts"></a>5u7g54s63p4ts</td><td class='awrnc'><pre_sqltext class="awr">select toid from type$ where package_obj#=:1 and typ_name=:2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5vdaktvdvngax"></a>5vdaktvdvngax</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '173';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5zuc26whzgn7r"></a>5zuc26whzgn7r</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '150';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
Current Database
	v_loop_control := TRUE ;
~~~~~~~~~~~~~~~~
DB Id	       DB Name	      Container Name
-------------- -------------- --------------
END IF;
 1451622190	P30SDB	       p30sdb



IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="642a1bn9n8g0t"></a>642a1bn9n8g0t</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '243';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6arntugpqz094"></a>6arntugpqz094</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '132';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6pqjm0dp8bnky"></a>6pqjm0dp8bnky</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '149';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6rgx9nqyyyp4u"></a>6rgx9nqyyyp4u</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '131';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet

				-- We still vacillate until update quota has been met


				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>


<tr><td scope="row" class='awrc'><a class="awr" name="6s1ku6bs9a8xb"></a>6s1ku6bs9a8xb</td><td class='awrc'><pre_sqltext class="awr"> WITH ash as  (SELECT ash.event_id,   sum(decode(ash.session_type,  1,  1,  0)) as cnt_fg,   count(*) as cnt_total  FROM  WRH$_ACTIVE_SESSION_HISTORY ash	WHERE  ash.dbid = :dbid  AND ash.instance_number = :inst  AND ash.snap_id &gt; :bid AND ash.snap_id &lt;= :eid	AND  ash.wait_time = 0	GROUP BY ash.event_id  ),   evts as  (SELECT event_id,	sum(w_cnt) as w_cnt,  sum(to_cnt) as to_cnt,   sum(w_time) as w_time  , sum(w_cnt_fg) as w_cnt_fg,  sum(to_cnt_fg) as to_cnt_fg,   sum(w_time_fg) as w_time_fg	FROM (SELECT es.event_id as event_id,	es.total_waits - nvl(bs.total_waits, 0) as w_cnt,   es.TOTAL_TIMEOUTS - nvl(bs.TOTAL_TIMEOUTS, 0) as to_cnt,   es.TIME_WAITED_MICRO - nvl(bs.TIME_WAITED_MICRO, 0)  as w_time  , es.total_waits_fg - nvl(bs.total_waits_fg, 0)	as w_cnt_fg,   es.TOTAL_TIMEOUTS_FG - nvl(bs.TOTAL_TIMEOUTS_FG, 0)  as to_cnt_fg,   es.TIME_WAITED_MICRO_FG - nvl(bs.TIME_WAITED_MICRO_FG, 0)  as w_time_fg  FROM  WRH$_SYSTEM_EVENT es ,  WRH$_SYSTEM_EVENT bs  WHERE	es.dbid = :dbid  AND es.instance_number = :inst  AND es.snap_id = :eid	AND bs.dbid(+) = :dbid AND bs.instance_number(+) = es.instance_number AND bs.snap_id(+) = :bid	AND  es.instance_number = bs.instance_number(+)  AND  es.event_id = bs.event_id(+)  UNION ALL  SELECT x.event_hash as event_id,   0 as w_cnt,  0 as to_cnt,  0 as w_time  , 0 as w_cnt_fg,  0 as to_cnt_fg,  0 as w_time_fg  FROM  X$KEHEVTMAP x  )  GROUP BY event_id	),   awr_names as  (SELECT e.event_id,	max(e.event_name) as event_name,	   max(e.wait_class_id) as wait_class_id,	    max(e.wait_class) as wait_class,	       max(e.parameter1) as parameter1, 	  max(e.parameter2) as parameter2,	     max(e.parameter3) as parameter3  FROM  WRH$_EVENT_NAME e  WHERE e.dbid = :dbid GROUP BY e.event_id  ),   named_events as  (SELECT names.event_id as event_id,   names.event_name as event_name,   evts.w_cnt as w_cnt,   evts.to_cnt as to_cnt,   evts.w_time as w_time,	evts.w_cnt_fg as w_cnt_fg,   evts.to_cnt_fg as to_cnt_fg,   evts.w_time_fg as w_time_fg,   names.wait_class_id as wait_class_id,   names.parameter1 as p1,   names.parameter2 as p2,   names.parameter3 as p3  FROM   evts,  awr_names names  WHERE  evts.event_id = names.event_id  AND  names.wait_class_id &lt;&gt; 2723168908  ),	data as  (SELECT e.event_id as event_id,   e.event_name as event_name,	 e.wait_class_id as wait_class_id,   e.p1 as p1,   e.p2 as p2,	 e.p3 as p3,   e.w_cnt as total_w_cnt,	 e.to_cnt as total_to_cnt,   e.w_time as total_w_time,	 e.w_cnt_fg as fg_w_cnt,   e.to_cnt_fg as fg_to_cnt,   e.w_time_fg as fg_w_time,   nvl(a.cnt_total, 0) as total_ash_cnt,   nvl(a.cnt_fg, 0) as fg_ash_cnt  FROM   named_events e,  ash a  WHERE  e.event_id  = a.event_id(+)  ),   final_query as  (SELECT d.event_name,   d.event_id,	 d.p1 as p1,   case when (p1 is null OR p1 = '0')  then 0 else 1 end as p1valid,   d.p2 as p2,	 case when (p2 is null OR p2 = '0')  then 0 else 1 end as p2valid,   d.p3 as p3,   case when (p3 is null OR p3 = '0')  then 0 else 1 end as p3valid,   nvl(e.keh_id, 0) as keh_evt_id,	 c.class# as class_num,   d.wait_class_id as wait_class_id,   c.keh_id as keh_ecl_id,	round(d.total_ash_cnt, 0) as total_ash_cnt,   round(d.fg_ash_cnt, 0) as fg_ash_cnt,   round(d.fg_w_cnt, 0) as fg_w_cnt,   round(d.fg_to_cnt, 0) as fg_to_cnt,	round(d.fg_w_time, 0) as fg_w_time,   round(d.total_w_cnt, 0) as total_w_cnt,	round(d.total_to_cnt, 0) as total_to_cnt,   round(d.total_w_time, 0) as total_w_time  from data d,   X$KEHEVTMAP e ,  X$KEHECLMAP c  where d.event_id = e.event_hash(+)  and d.wait_class_id = c.class_hash  )	SELECT *  FROM	 final_query  WHERE  keh_evt_id &gt; 0 OR total_w_time &gt; 0  ORDER BY wait_class_id,	fg_w_time DESC,  event_id </pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6ssht0mhh4kvj"></a>6ssht0mhh4kvj</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '55';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6tq14ybssmtfh"></a>6tq14ybssmtfh</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '29';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="6uuqkb35jw13t"></a>6uuqkb35jw13t</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '3';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN

				-- Handle case where user has set UPDATE_PCT to a valid value


				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--


Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="71f07h4b84yt2"></a>71f07h4b84yt2</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '73';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7ab4587x3wp6p"></a>7ab4587x3wp6p</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '166';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="7gx6d596s0fak"></a>7gx6d596s0fak</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '4';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7kcm0mhxqy5q8"></a>7kcm0mhxqy5q8</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '57';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
  DB Id      Inst Num	DB Name      Instance	  Host
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP
------------ ---------- ---------    ----------   ------
* 1451622190	 1	P30SDB	     p30sdb1	  mcracpoc1.ex

* 1451622190	 2	P30SDB	     p30sdb2	  mcracpoc2.ex
	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN

Using 1451622190 for database Id
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
Using instances ALL (default 'ALL')
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="7rgx2dkmdsfn6"></a>7rgx2dkmdsfn6</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '8';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7w4ajz9mh4684"></a>7w4ajz9mh4684</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '48';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN

			-- handle case where user specified 100% updates

Specify the number of days of snapshots to choose from
			v_do_update := TRUE;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
			v_update_quota := FALSE;
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.
		ELSE


			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
Enter value for num_days: 				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="82udwbrd160v6"></a>82udwbrd160v6</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '61';

v_update_pct PLS_INTEGER := '10';
Listing all Completed Snapshots
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="857mw2dsngfyz"></a>857mw2dsngfyz</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '70';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="87gaftwrm2h68"></a>87gaftwrm2h68</td><td class='awrc'><pre_sqltext class="awr">select o.owner#, o.name, o.namespace, o.remoteowner, o.linkname, o.subname from obj$ o where o.obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="87x16ru0715ju"></a>87x16ru0715ju</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '130';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="8pk2bdg5njcb0"></a>8pk2bdg5njcb0</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '184';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="8swypbbr0m372"></a>8swypbbr0m372</td><td class='awrnc'><pre_sqltext class="awr">select order#, columns, types from access$ where d_obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="8zfgu19tss7yh"></a>8zfgu19tss7yh</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '126';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9babjv8yq8ru3"></a>9babjv8yq8ru3</td><td class='awrnc'><pre_sqltext class="awr">BEGIN DBMS_OUTPUT.GET_LINES(:LINES,  :NUMLINES); END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9sq9djzzhr19y"></a>9sq9djzzhr19y</td><td class='awrc'><pre_sqltext class="awr">WITH binds as
	 (select :dbid			as dbid
	       ,  :inst_id_low		 as instIdLow
	       ,  :inst_id_high 	 as instIdHigh
	       ,  :begin_snap		 as beginSnap
	       ,  :end_snap		 as endSnap
	       ,  :begin_time		 as beginTime
	       ,  :end_time		 as endTime
	       ,  :disk_begin_time	 as diskBeginTime
	       ,  :disk_end_time	 as diskEndTime
	       ,  :mem_begin_time	 as memBeginTime
	       ,  :mem_end_time 	 as memEndTime
	       ,  :bucket_count 	 as bucketCount
	       ,  :bucket_interval	 as bucketInterval
	       ,  :mem_enable		 as memEnable
	       ,  :disk_enable		 as diskEnable
	       ,  :disk_filter_ratio	 as filterRatio,  :filter_action as filter_action,  :filter_blocking_session as filter_blocking_session,  :filter_capture_id as filter_capture_id,  :filter_client_id as filter_client_id,  :filter_consumer_group_id as filter_consumer_group_id,  :filter_dbop as filter_dbop,  :filter_ecid as filter_ecid,	:filter_event as filter_event,	:filter_instance_number as filter_instance_number,  :filter_is_captured as filter_is_captured,	:filter_is_filtered_out as filter_is_filtered_out,  :filter_is_nc_background as filter_is_nc_background,  :filter_is_replayed as filter_is_replayed,  :filter_machine as filter_machine,  :filter_machine_port as filter_machine_port,	:filter_module as filter_module,  :filter_object as filter_object,  :filter_pdb as filter_pdb,	:filter_physical_session as filter_physical_session,  :filter_pl_sql as filter_pl_sql,	:filter_pl_sql_top as filter_pl_sql_top,  :filter_program as filter_program,  :filter_px_process as filter_px_process,	:filter_service_hash as filter_service_hash,  :filter_session_type as filter_session_type,  :filter_sql_fms as filter_sql_fms,	:filter_sql_id_top as filter_sql_id_top,  :filter_sql_opcode as filter_sql_opcode,  :filter_sql_opcode_top as filter_sql_opcode_top,  :filter_sql_rws as filter_sql_rws,  :filter_sql_rws_line as filter_sql_rws_line,	:filter_sqlid as filter_sqlid,	:filter_sqlid_fullphv as filter_sqlid_fullphv,	:filter_sqlid_phv as filter_sqlid_phv,	:filter_user_id as filter_user_id,  :filter_wait_class as filter_wait_class,  :filter_xid as filter_xid from sys.dual)	,  unified_ash as
	     (SELECT a.sample_id
       ,  a.sample_time
       ,  a.session_id
       ,  a.session_serial#
       ,  a.session_type
       ,  a.session_state
       ,  a.flags
       ,  a.user_id
       ,  a.sql_id
       ,  a.sql_opcode
       ,  a.sql_opname
       ,  a.top_level_sql_id
       ,  a.top_level_sql_opcode
       ,  a.sql_child_number
       ,  a.sql_plan_hash_value
       ,  a.sql_full_plan_hash_value
       ,  a.sql_plan_line_id
       ,  a.sql_plan_operation
       ,  a.sql_plan_options
       ,  a.sql_exec_id
       ,  a.force_matching_signature
       ,  a.plsql_entry_object_id
       ,  a.plsql_entry_subprogram_id
       ,  a.plsql_object_id
       ,  a.plsql_subprogram_id
       ,  a.service_hash
       ,  a.qc_session_id
       ,  a.qc_instance_id
       ,  a.qc_session_serial#
       ,  nvl(a.event,
	    CASE WHEN bitand(a.time_model,  power(2, 19)) &gt; 0
		 THEN 'CPU: IM Populate'
		 WHEN bitand(a.time_model,  power(2, 20)) &gt; 0
		 THEN 'CPU: IM Prepopulate'
		 WHEN bitand(a.time_model,  power(2, 21)) &gt; 0
		 THEN 'CPU: IM Repopulate'
		 WHEN bitand(a.time_model,  power(2, 22)) &gt; 0
		 THEN 'CPU: IM Trickle Repop'
		 WHEN bitand(a.time_model,  power(2, 18)) &gt; 0
		 THEN 'CPU: IM Query'
	     ELSE 'CPU + Wait for CPU' END) as event
       ,  nvl(a.event_id,  1)
	   as event_id	
       ,  nvl(a.wait_class,  'CPU')
	   as wait_class	
       ,  nvl(a.wait_class_id,	9999)
	   as wait_class_id
       ,  a.seq#
       ,  a.p1
       ,  a.p1text
       ,  a.p2
       ,  a.p2text	
       ,  a.p3
       ,  a.p3text	
       ,  a.wait_time
       ,  a.time_waited	
       ,  rawtohex(a.xid) as xid	
       ,  a.blocking_session
       ,  a.blocking_session_serial#
       ,  a.blocking_session_status
       ,  a.blocking_inst_id
       ,  a.current_obj#
       ,  a.current_file#
       ,  a.current_block#	
       ,  a.top_level_call#
       ,  a.top_level_call_name
       ,  a.program
       ,  a.module
       ,  a.action
       ,  a.client_id
       ,  a.remote_instance#	
       ,  a.ecid
       ,  a.consumer_group_id
       ,  a.machine
       ,  a.port
       ,  a.in_connection_mgmt
       ,  a.in_parse
       ,  a.in_hard_parse	
       ,  a.in_sql_execution
       ,  a.in_plsql_execution
       ,  a.in_plsql_rpc	
       ,  a.in_plsql_compilation
       ,  a.in_java_execution
       ,  a.in_bind
       ,  a.in_cursor_close
       ,  a.in_sequence_load
       ,  a.is_captured
       ,  a.is_replayed
       ,  a.dbreplay_file_id
       ,  a.dbop_name
       ,  a.con_dbid,  decode(binds.diskEnable, 0, 1, binds.filterRatio)
		       as sample_count
		   ,  inst_id as instance_number
		FROM sys.gv_$active_session_history a,	binds
	       WHERE binds.memEnable = 1
		 AND (	binds.diskEnable = 0
		     OR (  binds.diskEnable = 1
		       AND a.is_awr_sample = 'Y'
		       AND bitand(a.flags,  128) = 0 ) )
		 AND a.inst_id between
			  binds.instIdLow
		      and binds.instIdHigh
		 AND a.sample_time between
			  binds.beginTime
		      and binds.endTime
	      UNION ALL
	      SELECT a.sample_id
       ,  a.sample_time
       ,  a.session_id
       ,  a.session_serial#
       ,  a.session_type
       ,  a.session_state
       ,  a.flags
       ,  a.user_id
       ,  a.sql_id
       ,  a.sql_opcode
       ,  a.sql_opname
       ,  a.top_level_sql_id
       ,  a.top_level_sql_opcode
       ,  a.sql_child_number
       ,  a.sql_plan_hash_value
       ,  a.sql_full_plan_hash_value
       ,  a.sql_plan_line_id
       ,  a.sql_plan_operation
       ,  a.sql_plan_options
       ,  a.sql_exec_id
       ,  a.force_matching_signature
       ,  a.plsql_entry_object_id
       ,  a.plsql_entry_subprogram_id
       ,  a.plsql_object_id
       ,  a.plsql_subprogram_id
       ,  a.service_hash
       ,  a.qc_session_id
       ,  a.qc_instance_id
       ,  a.qc_session_serial#
       ,  nvl(a.event,
	    CASE WHEN bitand(a.time_model,  power(2, 19)) &gt; 0
		 THEN 'CPU: IM Populate'
		 WHEN bitand(a.time_model,  power(2, 20)) &gt; 0
		 THEN 'CPU: IM Prepopulate'
		 WHEN bitand(a.time_model,  power(2, 21)) &gt; 0
		 THEN 'CPU: IM Repopulate'
		 WHEN bitand(a.time_model,  power(2, 22)) &gt; 0
		 THEN 'CPU: IM Trickle Repop'
		 WHEN bitand(a.time_model,  power(2, 18)) &gt; 0
		 THEN 'CPU: IM Query'
	     ELSE 'CPU + Wait for CPU' END) as event
       ,  nvl(a.event_id,  1)
	   as event_id	
       ,  nvl(a.wait_class,  'CPU')
	   as wait_class	
       ,  nvl(a.wait_class_id,	9999)
	   as wait_class_id
       ,  a.seq#
       ,  a.p1
       ,  a.p1text
       ,  a.p2
       ,  a.p2text	
       ,  a.p3
       ,  a.p3text	
       ,  a.wait_time
       ,  a.time_waited	
       ,  rawtohex(a.xid) as xid	
       ,  a.blocking_session
       ,  a.blocking_session_serial#
DB Name      Snap Id	   Snap Started    Snap Level
       ,  a.blocking_session_status
------------ ---------- ------------------ ----------

P30SDB		     1	16 Feb 2020 11:00    1
		     2	16 Feb 2020 12:48    1
       ,  a.blocking_inst_id
		     3	16 Feb 2020 13:00    1
		     4	16 Feb 2020 13:13    1
		     5	16 Feb 2020 13:19    1
       ,  a.current_obj#
		     6	16 Feb 2020 13:22    1
       ,  a.current_file#
		     7	16 Feb 2020 13:30    1
		     8	16 Feb 2020 13:33    1
		     9	16 Feb 2020 13:42    1
       ,  a.current_block#	
		    10	16 Feb 2020 13:49    1
		    11	16 Feb 2020 13:55    1
		    12	16 Feb 2020 14:10    1
       ,  a.top_level_call#
       ,  a.top_level_call_name
       ,  a.program
       ,  a.module
       ,  a.action
       ,  a.client_id
       ,  a.remote_instance#	
       ,  a.ecid
       ,  a.consumer_group_id
       ,  a.machine
       ,  a.port
       ,  a.in_connection_mgmt
       ,  a.in_parse
       ,  a.in_hard_parse	
       ,  a.in_sql_execution
       ,  a.in_plsql_execution
       ,  a.in_plsql_rpc	
       ,  a.in_plsql_compilation
       ,  a.in_java_execution
       ,  a.in_bind
       ,  a.in_cursor_close
       ,  a.in_sequence_load
       ,  a.is_captured
       ,  a.is_replayed
       ,  a.dbreplay_file_id
       ,  a.dbop_name
       ,  a.con_dbid,  binds.filterRatio as sample_count
		   ,  instance_number as instance_number
		FROM AWR_ROOT_active_sess_history a,
		     binds
	       WHERE binds.diskEnable = 1
		 AND a.dbid = binds.dbid
		 AND a.instance_number between
			  binds.instIdLow
		      and binds.instIdHigh
		 AND a.snap_id between
			  binds.beginSnap
		    13	16 Feb 2020 14:16    1
		      and binds.endSnap + 1
		    14	16 Feb 2020 14:24    1
		    15	16 Feb 2020 14:33    1
		    16	16 Feb 2020 14:38    1
		    17	16 Feb 2020 14:49    1
		 AND a.sample_time between
		    18	16 Feb 2020 14:56    1
		    19	16 Feb 2020 15:04    1
		    20	16 Feb 2020 16:00    1
			  binds.beginTime
		    21	16 Feb 2020 17:23    1
		    22	16 Feb 2020 17:57    1
		    23	16 Feb 2020 18:05    1
		    24	16 Feb 2020 18:13    1
		      and binds.endTime
		    25	16 Feb 2020 18:19    1
		    26	16 Feb 2020 18:22    1
		    27	16 Feb 2020 18:25    1
	     ),  logical_ash as
	     (select sample_id
		   ,  sample_time
		   ,  sample_count
		   ,  instance_number as inst_id,  wait_class as global_hist_wc, event as event, instance_number || ':' || session_id || ', ' || session_serial# as physical_session, sql_id as sqlid, wait_class as wait_class,  xid as xid,  instance_number as instance_number,  user_id as user_id,  program as program from unified_ash) ,  bucketized_ash as
	   (SELECT ash0.*,
		  (case when binds.bucketCount &gt; 1
			then trunc( ( (24 * 60 * 60 *
				       extract(day from sample_time
						      - binds.beginTime))
				    + (60 * 60 *
				       extract(hour from sample_time
						      - binds.beginTime))
				    + (60 *
				       extract(minute from sample_time
						      - binds.beginTime))
				    + (1 *
				       extract(second from sample_time
						      - binds.beginTime))
				     ) / binds.bucketInterval
				   ) + 1
			else 1
		   end) as bucket_number
	   FROM logical_ash ash0,  binds),  filter_xml as
	 (SELECT xmlconcat(xmlelement(&quot;filters&quot; )
	 ,  xmlelement(&quot;report_time&quot;, xmlattributes(
	     to_char(o.begintime,  'HH24:MI:SS MM/DD/YYYY') as &quot;begin_time&quot;,
	     to_char(o.endtime,  'HH24:MI:SS MM/DD/YYYY') as &quot;end_time&quot;))) as xml_frag FROM
    (select binds.*,  nvl(to_number(filter_pdb), 0) as con_dbid from binds) o) ,  filtered_ash as
	      (SELECT ash.*,
		      (case when 1=1  then 1 else 0 end) filtered
	       FROM bucketized_ash ash,  binds),  grouped_ash as
		   (SELECT ash.*,   (CASE WHEN nvl(filtered,  2) = 1
				      THEN 0  -- target / no histogram
				      ELSE 1  -- totals/global
				 END) AS bucket_type  FROM (SELECT filtered,  event, physical_session, sqlid, wait_class, bucket_number      ,	grouping_id(filtered,  event, physical_session, sqlid, wait_class, bucket_number) as gid , global_hist_wc  , max(inst_id)	     as inst_id
		    28	16 Feb 2020 18:27    1
		    29	16 Feb 2020 18:35    1
		    30	17 Feb 2020 07:54    1
			     , sum(sample_count)       as sample_count
		    31	17 Feb 2020 08:10    1
		    32	17 Feb 2020 08:16    1
		    33	17 Feb 2020 08:20    1
		    34	17 Feb 2020 08:25    1
			     , count(distinct sqlid)   as uniq_sqlids
		    35	17 Feb 2020 08:27    1
		    36	17 Feb 2020 08:33    1
			     , count(distinct xid)     as uniq_xids
		    37	17 Feb 2020 08:37    1
		    38	17 Feb 2020 08:43    1
		    39	17 Feb 2020 08:47    1
		    40	17 Feb 2020 08:52    1
			     , count(distinct physical_session)
		    41	17 Feb 2020 08:55    1
		    42	17 Feb 2020 09:00    1
						      as uniq_sessions
			     , count(distinct instance_number)
						      as uniq_instances, max(user_id) as user_id, max(program) as program from	filtered_ash
		     group by  grouping sets(  (bucket_number,	global_hist_wc) ,  ( bucket_number,  wait_class,  filtered),  (wait_class,  filtered),	(sqlid,  wait_class,  filtered),  (physical_session,  wait_class,  filtered),  (wait_class,  event,  filtered)) ) ash  -- eliminate rows with filtered = 0
		     -- keep filtered and from global/total
		    43	17 Feb 2020 09:09    1
		    44	17 Feb 2020 09:14    1
		    45	17 Feb 2020 09:17    1
		    46	17 Feb 2020 09:23    1
		    47	17 Feb 2020 09:26    1
		    48	17 Feb 2020 09:32    1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 47

End   Snapshot Id specified: 48

		     WHERE (nvl(filtered,  2) != 0)),  component_1_treemap as
		  (select dim_val
			 , inst_id

			 , sample_count
			 , num_mem
			 , mem_rank
			 , uniq_sqlids
			 , uniq_xids
			 , uniq_sessions
			 , uniq_instances
			 , 0 AS bucket_type --target(not global)/filtered bucket


		    from (select max(case when mem_rank &lt;= 13
				   then dim_val
				   else null
			       end)			as dim_val
			 , sum(sample_count)		 as sample_count
			 , count(*)			 as num_mem
			 , max(case when mem_rank &lt;= 13
				   then mem_rank
				   else (13 + 1)
			       end)			as mem_rank
			 , max(case when mem_rank &lt;= 13
				   then uniq_sqlids
				   else 0
			       end)			as uniq_sqlids
			 , max(case when mem_rank &lt;= 13
				   then uniq_xids
				   else 0
			       end)			as uniq_xids
			 , max(case when mem_rank &lt;= 13
				   then uniq_sessions
				   else 0
			       end)			as uniq_sessions
			 , max(case when mem_rank &lt;= 13
				   then uniq_instances
				   else 0
			       end)			as uniq_instances
			 , max(inst_id) 		 as inst_id



		     from (select wait_class as dim_val
				 , sample_count
				 , dense_rank() over
				    (order by sample_count desc
					     , wait_class) as mem_rank
				 , uniq_sqlids
				 , uniq_xids
				 , uniq_sessions
				 , uniq_instances
				 , inst_id


			     from grouped_ash
			    where gid = 29
			      and wait_class is not null)
		    group by (case when mem_rank &lt;= 13
				   then dim_val
				   else null
			       end)

		  ) left   ) ,	component_1_histogram as
		  (select bucket_number
			 , sum(sample_count)		as sample_count
			 , max(case when mem_rank &lt;= 13
				   then mem_rank
				   when mem_rank is not null
				   then (13 + 1)
			       end)			as mem_rank
			 , bucket_type

		    from (select g1.bucket_number
				, g1.sample_count	 as sample_count
				, (case when g1.wait_class = g2.dim_val

				       then to_char(g2.dim_val)
				       -- global/totals
				       when g1.bucket_type = 1
				       then g1.global_hist_wc
				       else null
				   end) 		as dim_val
				, (case when g1.wait_class = g2.dim_val

				       then g2.mem_rank
				       when g1.bucket_type = 1 then NULL
				       else (13 + 1)
				   end) 		as mem_rank
				,  g1.bucket_type

			   from grouped_ash g1,
				component_1_treemap g2
			  where -- both filtered and global
				(g1.gid = 28  AND
				 g1.wait_class is not null OR
				 g1.bucket_type = 1)
			    and g1.wait_class = g2.dim_val(+)

			    -- join filtered rows only
			    and g1.bucket_type = g2.bucket_type(+)
			  )
		 group by bucket_number
			 , dim_val

			 , bucket_type
		  ) ,  component_1_xml as
		(select xmlelement(&quot;item&quot;
			 , xmlattributes('wait_class' as &quot;id&quot;
				       , topmems.cnt_all as &quot;count&quot;
				       , topmems.num_mem as &quot;num_mem&quot;
				       , topmems.num_others as &quot;num_others&quot;)		   , xmlconcat(
			    topmems.topmems_frag
			   , histogram.histogram_xml)) as dim_frag from (select xmlelement(
			   &quot;top_mems&quot;
			  , xmlattributes(sum(case when mem_rank &lt;= 13
						  then sample_count
						  else 0
					      end) as &quot;count&quot;)
			     , xmlagg(xmlelement(
					&quot;mem&quot;
				       , xmlattributes(mem_rank 	 as &quot;id&quot;
						     , dim_val		 as &quot;name&quot;

						     , sample_count	 as &quot;count&quot;
						     , uniq_sqlids	 as &quot;uniq_sqlids&quot;
						     , uniq_xids	 as &quot;uniq_xids&quot;
						     , uniq_sessions	 as &quot;uniq_sessions&quot;
						     , uniq_instances	 as &quot;uniq_instances&quot;)

				       )
				order by sample_count desc))
						 as topmems_frag
			  , sum(case when mem_rank &lt;= 13
				    then 1
				    else 0
				end)		 as num_mem
			  , sum(sample_count)	  as cnt_all
			  , max(case when mem_rank &lt;= 13
				    then 0
				    else num_mem
				end)		 as num_others
		     from (component_1_treemap) t
		   ) topmems , (SELECT xmlagg(
			  xmlelement(
			   &quot;histogram&quot;
			  , xmlattributes(
			     (case when bucket_type = 1 then 'all'
				   else 'target'
			      end) AS &quot;type&quot;
			    , max(binds.bucketCount)	as &quot;bucket_count&quot;
			    , max(binds.bucketInterval) as &quot;bucket_interval&quot;)
			  , xmlagg(bucket_xml
				    order by
				      bucket_type,
				      bucket_number asc)
				     )
				 ) as histogram_xml
		  FROM (SELECT	bucket_type
			       , bucket_number
			       , xmlelement(
				&quot;bucket
&quot;
			       , xmlattributes(bucket_number	 as &quot;number&quot;
					     , sum(sample_count) as &quot;count&quot;)
			       , (case
				 when bucket_type = 0 then -- filtered rows
				   xmlelement(
				    &quot;top_mems&quot;
				   , xmlattributes(
				     sum(case when mem_rank &lt;= 13
					      then sample_count
					      else 0
					  end) as &quot;count&quot;)
				   , xmlagg(
				     xmlelement(
				       &quot;mem&quot;
				       , xmlattributes(
					  mem_rank     as &quot;id&quot;
					 , sample_count as &quot;count&quot;))
				     order by mem_rank asc))
				 end)) as bucket_xml
			 FROM (component_1_histogram)
			 GROUP BY bucket_number,  bucket_type),  binds
		  GROUP by bucket_type) histogram ),  component_2_xml as
	     (select xmlelement(
			&quot;item&quot;
		       , xmlattributes(
			   'sqlid, wait_class' as &quot;item&quot;)
			  , xmlelement(
			      &quot;top_mems&quot;
			     , xmlagg(
				xmlelement(
				  &quot;mem&quot;
				 , xmlattributes(
				    dim1_value		   as &quot;dim1_value&quot;
				   , dim1_nummem	    as
&quot;dim1_nummem&quot;
				   , dim1_rank		    as &quot;dim1_rank&quot;
				   , dim2_value 	    as &quot;dim2_value&quot;
				   , dim12_nummem	    as &quot;dim2_nummem&quot;
				   , dim12_rank 	    as &quot;dim2_rank&quot;
				   , dim12_count	    as &quot;count&quot;
				   , uniq_sqlids	    as &quot;uniq_sqlids&quot;
				   , uniq_xids		    as &quot;uniq_xids&quot;
				   , uniq_sessions	    as &quot;uniq_sessions&quot;
				   , uniq_instances	    as &quot;uniq_instances&quot;

				  )
				, NVL2(sql_text1,
				      xmlelement(&quot;info&quot;
				       , xmlattributes('dim1_name' as &quot;type&quot;)
				       , sql_text1),  NULL)
				, NVL2(NULL,
				      xmlelement(&quot;info&quot;
					, xmlattributes('dim2_name' as &quot;type&quot;)
					, NULL),  NULL)
				)
			       order by dim1_rank, dim12_rank
			      )
			   )
		     ) as dim_frag
		from
		 (select  dim_data.*
			  , NVL((SELECT replace(substr(v.sql_text,  1,	100), CHR(0), '') as sql_text
	 FROM sys.gv_$sql v
	 WHERE v.sql_id = dim_data.dim1_value
	       AND v.inst_id = dim_data.inst_id

	       AND rownum &lt; 2 ), ( SELECT replace(sys.dbms_lob.substr(v.sql_text,  100,  1), CHR(0), '')
	   as sql_text
	 FROM AWR_ROOT_sqltext v,  binds b
	 WHERE v.dbid = b.dbid
	   AND v.sql_id = dim_data.dim1_value

	   AND rownum &lt; 2)) as sql_text1

		  from (select
			     max(case when dim1_rank &lt;= 10
				      then dim1_val
				      else null
				  end)			   as dim1_value
			    , max(case when dim1_rank &lt;= 10
				      then dim2_val
				      else null
				  end)			   as dim2_value
			    , sum(dim12_count) as dim12_count
			    , max(case when dim1_rank &lt;= 10
				      then uniq_sqlids
				      else 0
				  end)			   as uniq_sqlids
			    , max(case when dim1_rank &lt;= 10
				      then uniq_xids
				      else 0
				  end)			   as uniq_xids
			    , max(case when dim1_rank &lt;= 10
				      then uniq_sessions
				      else 0
				  end)			   as uniq_sessions
			    , max(case when dim1_rank &lt;= 10
				      then uniq_instances
				      else 0
				  end)			   as uniq_instances
			    , count(distinct dim1_val)	    as dim1_nummem
			    , sum(dim12_nummem) 	    as dim12_nummem
			    , max(case when dim1_rank &lt;= 10
				      then dim1_rank
				      else (10 + 1)
				  end)			   as dim1_rank
			    , max(case when dim1_rank &lt;= 10
				      then dim12_rank
				      else (10 + 1)
				  end)			   as dim12_rank
			    , max(inst_id)	    as inst_id

			from (select dim1_val
				    , max(case when dim12_rank &lt;= 13
					      then dim2_val
					      else null
					  end)		   as dim2_val
				    , dim1_count
				    , sum(dim12_count)	    as dim12_count
				    , max(case when dim12_rank &lt;= 13
					      then uniq_sqlids
					      else 0
					  end)		   as uniq_sqlids
				    , max(case when dim12_rank &lt;= 13
					      then uniq_xids
					      else 0
					  end)		   as uniq_xids
				    , max(case when dim12_rank &lt;= 13
					      then uniq_sessions
					      else 0
					  end)		   as uniq_sessions
				    , max(case when dim12_rank &lt;= 13
					      then uniq_instances
					      else 0
					  end)		   as uniq_instances
				    , count(*) as dim12_nummem
				    , dense_rank() over
				       (order by dim1_count desc
						, dim1_val
				       ) as dim1_rank
				    , max(case when dim12_rank &lt;= 13
					      then dim12_rank
					      else (13 + 1)
					  end)		   as dim12_rank
				    , max(inst_id)	    as inst_id

				 from (select sqlid   as dim1_val
					     , wait_class   as dim2_val
					     , sample_count as dim12_count
					     , dense_rank() over
						(partition by sqlid

						     order by sample_count desc
							     , wait_class

						) as dim12_rank
					     , sum(sample_count) over
						(partition by sqlid

						) as dim1_count
					     , uniq_sqlids
					     , uniq_xids
					     , uniq_sessions
					     , uniq_instances
					     , inst_id

					from grouped_ash
				       where gid = 25
					 and sqlid is not null
					 and wait_class is not null )
			     group by dim1_val
				     , dim1_count
				     , (case when dim12_rank &lt;= 13
					    then dim2_val
					    else null
					end)

			     )
		    group by (case when dim1_rank &lt;= 10
				   then dim1_val
				   else null
			       end)
			    , (case when dim1_rank &lt;= 10
				   then dim2_val
				   else null
			       end)

			   ) dim_data
			) t
		     ),  component_3_xml as
	     (select xmlelement(
			&quot;item&quot;
		       , xmlattributes(
			   'physical_session, wait_class' as &quot;item&quot;)
			  , xmlelement(
			      &quot;top_mems&quot;
			     , xmlagg(
				xmlelement(
				  &quot;mem&quot;
				 , xmlattributes(
				    dim1_value		   as &quot;dim1_value&quot;
				   , dim1_nummem	    as &quot;dim1_nummem&quot;
				   , dim1_rank		    as &quot;dim1_rank&quot;
				   , dim2_value 	    as &quot;dim2_value&quot;
				   , dim12_nummem	    as &quot;dim2_nummem&quot;
				   , dim12_rank 	    as &quot;dim2_rank&quot;
				   , dim12_count	    as &quot;count&quot;
				   , uniq_sqlids	    as &quot;uniq_sqlids&quot;
				   , uniq_xids		    as &quot;uniq_xids&quot;
				   , uniq_sessions	    as &quot;uniq_sessions&quot;
				   , uniq_instances	    as &quot;uniq_instances&quot;

				  )
				, NVL2(NULL,
				      xmlelement(&quot;info&quot;
				       , xmlattributes('dim1_name' as &quot;type&quot;)
				       , NULL),  NULL)
				, NVL2(NULL,
				      xmlelement(
&quot;info&quot;
					, xmlattributes('dim2_name' as &quot;type&quot;)
					, NULL),  NULL)
				)
			       order by dim1_rank, dim12_rank
			      )
			   )
		     ) as dim_frag
		from
		 (select  dim_data.*


		  from (select
			     max(case when dim1_rank &lt;= 10
				      then dim1_val
				      else null
				  end)			   as dim1_value
			    , max(case when dim1_rank &lt;= 10
				      then dim2_val
				      else null
				  end)			   as dim2_value
			    , sum(dim12_count) as dim12_count
			    , max(case when dim1_rank &lt;= 10
				      then uniq_sqlids
				      else 0
				  end)			   as uniq_sqlids
			    , max(case when dim1_rank &lt;= 10
				      then uniq_xids
				      else 0
				  end)			   as uniq_xids
			    , max(case when dim1_rank &lt;= 10
				      then uniq_sessions
				      else 0
				  end)			   as uniq_sessions
			    , max(case when dim1_rank &lt;= 10
				      then uniq_instances
				      else 0
				  end)			   as uniq_instances
			    , count(distinct dim1_val)	    as dim1_nummem
			    , sum(dim12_nummem) 	    as dim12_nummem
			    , max(case when dim1_rank &lt;= 10
				      then dim1_rank
				      else (10 + 1)
				  end)			   as dim1_rank
			    , max(case when dim1_rank &lt;= 10
				      then dim12_rank
				      else (10 + 1)
				  end)			   as dim12_rank
			    , max(inst_id)	    as inst_id

			from (select dim1_val
				    , max(case when dim12_rank &lt;= 13
					      then dim2_val
					      else null
					  end)		   as dim2_val
				    , dim1_count
				    , sum(dim12_count)	    as dim12_count
				    , max(case when dim12_rank &lt;= 13
					      then uniq_sqlids
					      else 0
					  end)		   as uniq_sqlids
				    , max(case when dim12_rank &lt;= 13
					      then uniq_xids
					      else 0
					  end)		   as uniq_xids
				    , max(case when dim12_rank &lt;= 13
					      then uniq_sessions
					      else 0
					  end)		   as uniq_sessions
				    , max(case when dim12_rank &lt;= 13
					      then uniq_instances
					      else 0
					  end)		   as uniq_instances
				    , count(*) as dim12_nummem
				    , dense_rank() over
				       (order by dim1_count desc
						, dim1_val
				       ) as dim1_rank
				    , max(case when dim12_rank &lt;= 13
					      then dim12_rank
					      else (13 + 1)
					  end)		   as dim12_rank
				    , max(inst_id)	    as inst_id

				 from (select physical_session	 as dim1_val
					     , wait_class   as dim2_val
					     , sample_count as dim12_count
					     , dense_rank() over
						(partition by physical_session

						     order by sample_count desc
							     , wait_class

						) as dim12_rank
					     , sum(sample_count) over
						(partition by physical_session

						) as dim1_count
					     , uniq_sqlids
					     , uniq_xids
					     , uniq_sessions
					     , uniq_instances
					     , inst_id

					from grouped_ash
				       where gid = 21
					 and physical_session is not null
					 and wait_class is not null )
			     group by dim1_val
				     , dim1_count
				     , (case when dim12_rank &lt;= 13
					    then dim2_val
					    else null
					end)

			     )
		    group by (case when dim1_rank &lt;= 10
				   then dim1_val
				   else null
			       end)
			    , (case when dim1_rank &lt;= 10
				   then dim2_val
				   else null
			       end)

			   ) dim_data
			) t
		     ),  component_4_xml as
	     (select xmlelement(
			&quot;item&quot;
		       , xmlattributes(
			   'wait_class, event' as &quot;item&quot;)
			  , xmlelement(
			      &quot;top_mems&quot;
			     , xmlagg(
				xmlelement(
				  &quot;mem&quot;
				 , xmlattributes(
				    dim1_value		   as &quot;dim1_value&quot;
				   , dim1_nummem	    as &quot;dim1_nummem&quot;
				   , dim1_rank		    as &quot;dim1_rank&quot;
				   , dim2_value 	    as &quot;dim2_value&quot;
				   , dim12_nummem	    as &quot;dim2_nummem&quot;
				   , dim12_rank 	    as &quot;dim2_rank&quot;
				   , dim12_count	    as &quot;count&quot;
				   , uniq_sqlids	    as &quot;uniq_sqlids&quot;
				   , uniq_xids		    as &quot;uniq_xids&quot;
				   , uniq_sessions	    as &quot;uniq_sessions&quot;
				   , uniq_instances	    as &quot;uniq_instances&quot;

				  )
				, NVL2(NULL,
				      xmlelement(&quot;info&quot;
				       , xmlattributes('dim1_name' as &quot;type&quot;)
				       , NULL),  NULL)
				, NVL2(NULL,
				      xmlelement(&quot;info&quot;
					, xmlattributes('dim2_name' as &quot;type&quot;)
					, NULL),  NULL)
				)
			       order by dim1_rank, dim12_rank
			      )
			   )
		     ) as dim_frag
		from
		 (select  dim_data.*


		  from (select
			     max(case when dim1_rank &lt;= 13
				      then dim1_val
				      else null
				  end)			   as dim1_value
			    , max(case when dim1_rank &lt;= 13
				      then dim2_val
				      else null
				  end)			   as dim2_value
			    , sum(dim12_count) as dim12_count
			    , max(case when dim1_rank &lt;= 13
				      then uniq_sqlids
				      else 0
				  end)			   as uniq_sqlids
			    , max(case when dim1_rank &lt;= 13
				      then uniq_xids
				      else 0
				  end)			   as uniq_xids
			    , max(case when dim1_rank &lt;= 13
				      then uniq_sessions
				      else 0
				  end)			   as uniq_sessions
			    , max(case when dim1_rank &lt;= 13
				      then uniq_instances
				      else 0
				  end)			   as uniq_instances
			    , count(distinct dim1_val)	    as dim1_nummem
			    , sum(dim12_nummem) 	    as dim12_nummem
			    , max(case when dim1_rank &lt;= 13
				      then dim1_rank
				      else (13 + 1)
				  end)			   as dim1_rank
			    , max(case when dim1_rank &lt;= 13
				      then dim12_rank
				      else (13 + 1)
				  end)			   as dim12_rank
			    , max(inst_id)	    as inst_id

			from (select dim1_val
				    , max(case when dim12_rank &lt;= 10
					      then dim2_val
					      else null
					  end)		   as dim2_val
				    , dim1_count
				    , sum(dim12_count)	    as dim12_count
				    , max(case when dim12_rank &lt;= 10
					      then uniq_sqlids
					      else 0
					  end)		   as uniq_sqlids
				    , max(case when dim12_rank &lt;= 10
					      then uniq_xids
					      else 0
					  end)		   as uniq_xids
				    , max(case when dim12_rank &lt;= 10
					      then uniq_sessions
					      else 0
					  end)		   as uniq_sessions
				    , max(case when dim12_rank &lt;= 10
					      then uniq_instances
					      else 0
					  end)		   as uniq_instances
				    , count(*) as dim12_nummem
				    , dense_rank() over
				       (order by dim1_count desc
						, dim1_val
				       ) as dim1_rank
				    , max(case when dim12_rank &lt;= 10
					      then dim12_rank
					      else (10 + 1)
					  end)		   as dim12_rank
				    , max(inst_id)	    as inst_id

				 from (select wait_class   as dim1_val
					     , event   as dim2_val
					     , sample_count as dim12_count
					     , dense_rank() over
						(partition by wait_class

						     order by sample_count desc
							     , event

						) as dim12_rank
					     , sum(sample_count) over
						(partition by wait_class

						) as dim1_count
					     , uniq_sqlids
					     , uniq_xids
					     , uniq_sessions
					     , uniq_instances
					     , inst_id

					from grouped_ash
				       where gid = 13
					 and wait_class is not null
					 and event is not null )
			     group by dim1_val
				     , dim1_count
				     , (case when dim12_rank &lt;= 10
					    then dim2_val
					    else null
					end)

			     )
		    group by (case when dim1_rank &lt;= 13
				   then dim1_val
				   else null
			       end)
			    , (case when dim1_rank &lt;= 13
				   then dim2_val
				   else null
			       end)

			   ) dim_data
			) t
		     )select xmlconcat((select xml_frag from filter_xml),
		      xmlelement(&quot;dim_list&quot;,
				 xmlconcat((select dim_frag from component_1_xml), (select dim_frag from component_2_xml), (select dim_frag from component_3_xml), (select dim_frag from component_4_xml)))
		) from sys.dual</pre_sqltext></td>
</tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9tt2m0mpc2qqp"></a>9tt2m0mpc2qqp</td><td class='awrnc'><pre_sqltext class="awr">select /*+ index(idl_char$ i_idl_char1) */ piece#, length, piece from idl_char$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9v83s8vqfv1d6"></a>9v83s8vqfv1d6</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '7';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9xs2fh4766zzj"></a>9xs2fh4766zzj</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '84';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9yv5dwv8k0awg"></a>9yv5dwv8k0awg</td><td class='awrc'><pre_sqltext class="awr">WITH MONITOR_DATA AS (SELECT INST_ID,  KEY,  NVL2(PX_QCSID,  NULL,  STATUS) STATUS,  FIRST_REFRESH_TIME,  LAST_REFRESH_TIME,  REFRESH_COUNT,  PROCESS_NAME,  SID,	SQL_ID,  SQL_EXEC_START,  SQL_EXEC_ID,	DBOP_NAME,  DBOP_EXEC_ID,  SQL_PLAN_HASH_VALUE,  SQL_FULL_PLAN_HASH_VALUE,  SESSION_SERIAL#,  SQL_TEXT,  PX_SERVER#,  PX_SERVER_GROUP,	PX_SERVER_SET,	PX_QCINST_ID,  PX_QCSID,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) ELSE ELAPSED_TIME END ELAPSED_TIME,  QUEUING_TIME,  CPU_TIME,  APPLICATION_WAIT_TIME,  CONCURRENCY_WAIT_TIME,  CLUSTER_WAIT_TIME,	USER_IO_WAIT_TIME,  CASE WHEN ELAPSED_TIME &lt; (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) THEN 0 ELSE ELAPSED_TIME - (CPU_TIME+ APPLICATION_WAIT_TIME+ CONCURRENCY_WAIT_TIME+ CLUSTER_WAIT_TIME+ USER_IO_WAIT_TIME+ QUEUING_TIME) END OTHER_WAIT_TIME,  PLSQL_EXEC_TIME,  JAVA_EXEC_TIME,  FETCHES,	BUFFER_GETS,  IO_INTERCONNECT_BYTES IO_INTER_BYTES,  PHYSICAL_READ_REQUESTS READ_REQS,	PHYSICAL_READ_BYTES READ_BYTES,  PHYSICAL_WRITE_REQUESTS WRITE_REQS,  PHYSICAL_WRITE_BYTES WRITE_BYTES,  NVL(PHYSICAL_READ_BYTES,  0) + NVL(PHYSICAL_WRITE_BYTES,  0) IO_BYTES,  NVL(PHYSICAL_READ_REQUESTS,  0) + NVL(PHYSICAL_WRITE_REQUESTS,  0) IO_REQS,  IO_CELL_UNCOMPRESSED_BYTES IO_UNC_BYTES,	IO_CELL_OFFLOAD_ELIGIBLE_BYTES IO_ELIG_BYTES,  IO_CELL_OFFLOAD_RETURNED_BYTES IO_RET_BYTES,  USER# USERID,  USERNAME,  MODULE,	ACTION,  SERVICE_NAME,	CLIENT_IDENTIFIER,  CLIENT_INFO,  PROGRAM,  PLSQL_OBJECT_ID PL_OID,  PLSQL_SUBPROGRAM_ID PL_PROGID,  PLSQL_ENTRY_OBJECT_ID PL_ENTRY_OID,  PLSQL_ENTRY_SUBPROGRAM_ID PL_ENTRY_PROGID,  PX_MAXDOP MAX_DOP,  PX_IS_CROSS_INSTANCE,  PX_MAXDOP_INSTANCES MAX_DOP_INSTANCES,  PX_SERVERS_REQUESTED SERVERS_REQUESTED,  PX_SERVERS_ALLOCATED SERVERS_ALLOCATED,  ERROR_NUMBER,  ERROR_FACILITY,  ERROR_MESSAGE,  NVL2(OTHER_XML,  'Y',  NULL) HAS_OTHER_XML,	NVL2(BINDS_XML,  'Y',  NULL) HAS_BINDS_XML,  NVL2(RM_CONSUMER_GROUP,  NVL2(RM_LAST_ACTION_TIME,  TO_CHAR(RM_LAST_ACTION_TIME,  :B12 ),	'00/00/0000 00:00:01') || XMLELEMENT( &quot;rminfo&quot;,  XMLATTRIBUTES( RM_LAST_ACTION AS &quot;rmlastact&quot;,  RM_LAST_ACTION_REASON AS &quot;rmlastreason&quot;,	TO_CHAR(RM_LAST_ACTION_TIME,  :B12 ) AS &quot;rmlasttime&quot;,  RM_CONSUMER_GROUP AS &quot;rmcg&quot;)).GETSTRINGVAL(),  '00/00/0000 00:00:00') RM_INFO,  CON_NAME,  CON_ID FROM GV$ALL_SQL_MONITOR MO1 WHERE MO1.INST_ID BETWEEN :B11 AND :B10 AND MO1.SQL_ID = NVL(:B9 ,  MO1.SQL_ID) AND MO1.SQL_EXEC_START = NVL(:B8 ,  MO1.SQL_EXEC_START) AND MO1.SQL_EXEC_ID = NVL(:B7 ,  MO1.SQL_EXEC_ID) OR (MO1.DBOP_NAME = NVL(:B6 ,  MO1.DBOP_NAME) AND MO1.DBOP_EXEC_ID = NVL(:B5 ,  MO1.DBOP_EXEC_ID)) AND ((:B4 = 1 AND MO1.PX_QCSID IS NULL) OR (MO1.PX_SERVER_GROUP = NVL(:B3 ,  MO1.PX_SERVER_GROUP) AND MO1.PX_SERVER_SET = NVL(:B2 ,  MO1.PX_SERVER_SET) AND MO1.PX_SERVER# = NVL(:B1 ,  MO1.PX_SERVER#)))),  MONITOR_AGG AS (SELECT MAX_PX_QCSID,  MAX_KEY,  MAX_INST_ID,  MAX_SESSION_ID,  MAX_SESSION_SERIAL,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,  SUM_SERVERS_REQUESTED,  SUM_SERVERS_ALLOCATED,  DIST_INST_COUNT,	DIST_PX_GROUP_COUNT,  DIST_PX_SET_COUNT,  MAX_PLAN_HASH_VALUE,	MAX_FULL_PLAN_HASH_VALUE,  MAX_USERID,	MAX_PROGRAM,  MAX_USERNAME,  MAX_MODULE,  MAX_ACTION,  MAX_SERVICE_NAME,  MAX_CLIENT_ID,  MAX_CLIENT_INFO,  MAX_ERROR_NUMBER,  MAX_ERROR_FACILITY,  MAX_ERROR_MESSAGE,	QC_HAS_OTHER_XML,  QC_HAS_BINDS_XML,  MAX_PL_OID,  MAX_PL_PROGID,  MAX_PL_ENTRY_OID,  MAX_PL_ENTRY_PROGID,  MAX_SQL_ID,  MAX_SQL_EXEC_START,  MAX_SQL_EXEC_ID,	MAX_LAST_REFRESH_TIME,	MAX_DBOP_NAME,	MAX_DBOP_EXEC_ID,  CASE WHEN MAX_PL_OID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_OID AND P.SUBPROGRAM_ID = MAX_PL_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_NAME,  CASE WHEN MAX_PL_ENTRY_OID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,	NULL,  '',  '.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = MAX_PL_ENTRY_OID AND P.SUBPROGRAM_ID = MAX_PL_ENTRY_PROGID AND ROWNUM = 1),  'Unavailable') END MAX_PL_ENTRY_NAME,  MAX_STATUS,	SUM_REFRESH_COUNT,  MIN_FIRST_REFRESH_TIME,  SQLMON_TEXT,  SUM_ELAPSED_TIME,  MAX_ELAPSED_TIME,  MAX_QUEUING_TIME,  SUM_CPU_TIME,  SUM_USER_IO_WAIT_TIME,  SUM_APPLICATION_WAIT_TIME,  SUM_CONCURRENCY_WAIT_TIME,  SUM_CLUSTER_WAIT_TIME,  SUM_PLSQL_EXEC_TIME,  SUM_JAVA_EXEC_TIME,  SUM_OTHER_WAIT_TIME,  SUM_FETCHES,  SUM_BUFFER_GETS,  SUM_READ_REQS,  SUM_READ_BYTES,  SUM_WRITE_REQS,  SUM_WRITE_BYTES,	SUM_IO_BYTES,  SUM_IO_INTER_BYTES,  SUM_IO_UNC_BYTES,  SUM_IO_ELIG_BYTES,  SUM_IO_RET_BYTES,  DECODE(:B14 ,  1,  'db_name',  SYS_CONTEXT('userenv',  'db_unique_name')) DB_UNIQUE_NAME,  DECODE(:B14 ,	1,  'platform_name',  SYS.DBMS_UTILITY.PORT_STRING) PLATFORM_NAME,  DECODE(:B14 ,  1,  'host_name',  SYS_CONTEXT('userenv',  'server_host')) HOST_NAME,  AGG_RM_INFO MAX_RM_INFO,  MAX_CON_NAME,  DECODE(MAX_CON_ID,  0,  NULL,  MAX_CON_ID) MAX_CON_ID FROM (SELECT MAX(PX_QCSID) MAX_PX_QCSID,  MAX(CASE WHEN PX_QCSID IS NULL THEN KEY ELSE NULL END) MAX_KEY,  MAX(CASE WHEN PX_QCSID IS NULL THEN INST_ID ELSE NULL END) MAX_INST_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SID ELSE NULL END) MAX_SESSION_ID,  MAX(CASE WHEN PX_QCSID IS NULL THEN SESSION_SERIAL# ELSE NULL END) MAX_SESSION_SERIAL,  MAX(MAX_DOP) MAX_PX_DOP,  MAX(MAX_DOP_INSTANCES) MAX_PX_DOP_INSTANCES,  MAX(PX_IS_CROSS_INSTANCE) MAX_PX_IS_CROSS_INSTANCE,  SUM(SERVERS_REQUESTED) SUM_SERVERS_REQUESTED,	SUM(SERVERS_ALLOCATED) SUM_SERVERS_ALLOCATED,  COUNT(DISTINCT INST_ID) DIST_INST_COUNT,  COUNT(DISTINCT PX_SERVER_GROUP) DIST_PX_GROUP_COUNT,  COUNT(DISTINCT PX_SERVER_SET) DIST_PX_SET_COUNT,  MAX(SQL_PLAN_HASH_VALUE) MAX_PLAN_HASH_VALUE,	MAX(SQL_FULL_PLAN_HASH_VALUE) MAX_FULL_PLAN_HASH_VALUE,  MAX(USERID) MAX_USERID,  MAX(PROGRAM) MAX_PROGRAM,  MAX(USERNAME) MAX_USERNAME,  MAX(MODULE) MAX_MODULE,  MAX(ACTION) MAX_ACTION,  MAX(SERVICE_NAME) MAX_SERVICE_NAME,  MAX(CLIENT_IDENTIFIER) MAX_CLIENT_ID,	MAX(CLIENT_INFO) MAX_CLIENT_INFO,  MAX(ERROR_NUMBER) MAX_ERROR_NUMBER,	MAX(ERROR_FACILITY) MAX_ERROR_FACILITY,  MAX(ERROR_MESSAGE) MAX_ERROR_MESSAGE,	MAX(NVL2(PX_QCSID,  HAS_OTHER_XML,  NULL)) QC_HAS_OTHER_XML,  MAX(HAS_BINDS_XML) QC_HAS_BINDS_XML,  MAX(PL_OID) MAX_PL_OID,  MAX(PL_PROGID) MAX_PL_PROGID,  MAX(PL_ENTRY_OID) MAX_PL_ENTRY_OID,  MAX(PL_ENTRY_PROGID) MAX_PL_ENTRY_PROGID,  MAX(SQL_ID) MAX_SQL_ID,  MAX(SQL_EXEC_START) MAX_SQL_EXEC_START,  MAX(SQL_EXEC_ID) MAX_SQL_EXEC_ID,  MAX(LAST_REFRESH_TIME) MAX_LAST_REFRESH_TIME,	MAX(STATUS) MAX_STATUS,  SUM(REFRESH_COUNT) SUM_REFRESH_COUNT,	MIN(FIRST_REFRESH_TIME) MIN_FIRST_REFRESH_TIME,  MAX(DBOP_NAME) MAX_DBOP_NAME,	MAX(DBOP_EXEC_ID) MAX_DBOP_EXEC_ID,  CASE WHEN :B13 = 0 THEN NULL ELSE MAX(SQL_TEXT) END SQLMON_TEXT,  SUM(ELAPSED_TIME) SUM_ELAPSED_TIME,  MAX(ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(QUEUING_TIME) MAX_QUEUING_TIME,  SUM(CPU_TIME) SUM_CPU_TIME,  SUM(USER_IO_WAIT_TIME) SUM_USER_IO_WAIT_TIME,  SUM(APPLICATION_WAIT_TIME) SUM_APPLICATION_WAIT_TIME,  SUM(CONCURRENCY_WAIT_TIME) SUM_CONCURRENCY_WAIT_TIME,	SUM(CLUSTER_WAIT_TIME) SUM_CLUSTER_WAIT_TIME,  SUM(PLSQL_EXEC_TIME) SUM_PLSQL_EXEC_TIME,  SUM(JAVA_EXEC_TIME) SUM_JAVA_EXEC_TIME,  SUM(OTHER_WAIT_TIME) SUM_OTHER_WAIT_TIME,  SUM(FETCHES) SUM_FETCHES,  SUM(BUFFER_GETS) SUM_BUFFER_GETS,  SUM(READ_REQS) SUM_READ_REQS,  SUM(READ_BYTES) SUM_READ_BYTES,  SUM(WRITE_REQS) SUM_WRITE_REQS,  SUM(WRITE_BYTES) SUM_WRITE_BYTES,	NVL(SUM(READ_BYTES),  0) + NVL(SUM(WRITE_BYTES),  0) SUM_IO_BYTES,  SUM(IO_INTER_BYTES) SUM_IO_INTER_BYTES,  SUM(IO_UNC_BYTES) S
UM_IO_UNC_BYTES,  SUM(IO_ELIG_BYTES) SUM_IO_ELIG_BYTES,  SUM(IO_RET_BYTES) SUM_IO_RET_BYTES,  MAX(RM_INFO) AGG_RM_INFO,  MAX(CON_NAME) MAX_CON_NAME,  MAX(CON_ID) MAX_CON_ID FROM MONITOR_DATA) MD),  ASH_DATA AS (SELECT AD0.INST_ID,	AD0.SESSION_ID,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.ACTIVITY_BUCKET_NUM,  AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.SQL,  AD0.TOP_LEVEL_SQL_ID,  AD0.DBOP_NAME,  AD0.IS_MONITORED_SQL,  AD0.IS_PX_SLAVE,  AD0.BUCKET_ACTIVITY_START,  AD0.ACTIVITY_START,	AD0.BUCKET_ACTIVITY_END,  AD0.ACTIVITY_END,  AD0.ACTIVITY_COUNT,  AD0.ACTIVITY_TYPE,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.IMQ_COUNT,  AD0.WAIT_COUNT,  AD0.CPU_COUNT,  AD0.OTHER_SQL_COUNT,  AD0.PX_SERVER_SET,	AD0.PX_DFO_ACTIVITY_COUNT,  AD0.DFO_MOST_ACTIVE_IID,  AD0.DFO_MOST_ACTIVE_SID,	(CASE WHEN AD0.DFO_MOST_ACTIVE_IID = AD0.INST_ID AND AD0.DFO_MOST_ACTIVE_SID = AD0.SESSION_ID AND (((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &gt;= AD0.PX_DOP * 1.05) OR ((AD0.PX_DFO_ACTIVITY_COUNT / AD0.DFO_MOST_ACTIVE_COUNT) &lt;= AD0.PX_DOP *0.95)) AND (AD0.DFO_DURATION * 100) &gt; :B32 THEN AD0.ACTIVITY_COUNT ELSE NULL END) DFO_MOST_ACTIVE_COUNT,	AD0.BUCKET_DISTINCT_SAMPLES,  AD0.SQL_BUCKET_DISTINCT_SAMPLES,	CASE WHEN AD0.PX_SERVER_GROUP IS NULL AND AD0.IS_PX_SLAVE = 1 THEN 1 ELSE AD0.PX_SERVER_GROUP END PX_SERVER_GROUP,  AD0.PX_STEP_ID,  AD0.PX_DFO_PAIR_TYPE,  AD0.PX_DFO_PAIR_ID,  AD0.PX_STEP_ARG,  AD0.PX_DOP,	CASE WHEN AD0.PX_DOP IS NOT NULL AND AD0.PX_DOP &lt;&gt; AD0.PX_MIN_DOP AND AD0.PX_MIN_DOP != 0 THEN PX_MIN_DOP ELSE NULL END PX_MIN_DOP FROM (SELECT /*+ use_hash(ash) leading(mo) */ ASH.INST_ID,  ASH.IS_PX_SLAVE,  ASH.SESSION_ID,	ASH.PLAN_LINE_ID,  ASH.PLSQL_OBJECT_ID,  ASH.PLSQL_SUBPROGRAM_ID,  ASH.ACTIVITY_BUCKET_NUM,  ASH.PLAN_ACTIVITY_BUCKET_NUM,  ASH.SQL,  ASH.TOP_LEVEL_SQL_ID,  ASH.DBOP_NAME,  ASH.IS_MONITORED_SQL,  ASH.BUCKET_ACTIVITY_START,	ASH.ACTIVITY_START,  ASH.BUCKET_ACTIVITY_END,  ASH.ACTIVITY_END,  ASH.ACTIVITY_COUNT,  ASH.ACTIVITY_TYPE,  ASH.OTHER_SQL_ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  MO.PX_SERVER_SET,  ASH.PX_DFO_ACTIVITY_COUNT,	TRUNC(ASH.MOST_ACTIVE_IN_DFO / 10000000000) DFO_MOST_ACTIVE_COUNT,  MOD(TRUNC(ASH.MOST_ACTIVE_IN_DFO / 1000000),  10000) DFO_MOST_ACTIVE_IID,  MOD(ASH.MOST_ACTIVE_IN_DFO,  1000000) DFO_MOST_ACTIVE_SID,  ASH.DFO_DURATION,  ASH.BUCKET_DISTINCT_SAMPLES,  ASH.SQL_BUCKET_DISTINCT_SAMPLES,  MO.PX_SERVER_GROUP,  ASH.PX_STEP_ID,  ASH.PX_DFO_PAIR_TYPE,  ASH.PX_DFO_PAIR_ID,	ASH.PX_STEP_ARG,  ASH.PX_DOP,  ASH.PX_MIN_DOP FROM (SELECT /*+ no_merge */ MD.INST_ID,	MD.SID,  MD.SESSION_SERIAL#,  MD.PX_SERVER_SET,  MD.PX_SERVER_GROUP FROM MONITOR_DATA MD WHERE MD.SID IS NOT NULL OR :B31 = 1) MO,  (SELECT /*+ no_merge */ GVTF.INST_ID,  GVTF.GLOBAL_SAMPLE_ID,  GVTF.IS_PX_SLAVE,  GVTF.SESSION_ID,	GVTF.PLAN_LINE_ID,  GVTF.PLSQL_OBJECT_ID,  GVTF.PLSQL_SUBPROGRAM_ID,  GVTF.ACTIVITY_BUCKET_NUM,  GVTF.PLAN_ACTIVITY_BUCKET_NUM,  GVTF.SQL,  GVTF.TOP_LEVEL_SQL_ID,  GVTF.DBOP_NAME,  GVTF.IS_MONITORED_SQL,  GVTF.BUCKET_ACTIVITY_START,  GVTF.ACTIVITY_START,	GVTF.BUCKET_ACTIVITY_END,  GVTF.ACTIVITY_END,  GVTF.ACTIVITY_COUNT,  GVTF.ACTIVITY_TYPE,  GVTF.OTHER_SQL_ACTIVITY_TYPE,  GVTF.EVENT_NAME,  GVTF.IMQ_COUNT,  GVTF.WAIT_COUNT,  GVTF.CPU_COUNT,  GVTF.OTHER_SQL_COUNT,  MAX(GVTF.PER_SERVER_DFO_COUNT * 10000000000 + GVTF.INST_ID * 1000000 + GVTF.SESSION_ID) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,	GVTF.PX_DFO_PAIR_ID) MOST_ACTIVE_IN_DFO,  SUM(GVTF.ACTIVITY_COUNT) OVER(PARTITION BY GVTF.PX_DFO_PAIR_TYPE,  GVTF.PX_DFO_PAIR_ID) PX_DFO_ACTIVITY_COUNT,  GVTF.DFO_DURATION,  GVTF.PX_STEP_ID,	GVTF.PX_DFO_PAIR_TYPE,	GVTF.PX_DFO_PAIR_ID,  GVTF.PX_STEP_ARG,  GVTF.PX_DOP,  GVTF.PX_MIN_DOP,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.ACTIVITY_BUCKET_NUM) BUCKET_DISTINCT_SAMPLES,  COUNT(DISTINCT GVTF.GLOBAL_SAMPLE_ID) OVER(PARTITION BY GVTF.SQL,	GVTF.ACTIVITY_BUCKET_NUM) SQL_BUCKET_DISTINCT_SAMPLES FROM TABLE(SYS.GV$(CURSOR( (SELECT USERENV('INSTANCE') INST_ID,  ASH2.GLOBAL_SAMPLE_ID,  CASE WHEN :B30 = 1 AND :B27 &gt; 1 THEN BUCKET_NUM ELSE NULL END ACTIVITY_BUCKET_NUM,  CASE WHEN :B29 = 1 AND :B27 &gt; 1 THEN BUCKET_NUM ELSE NULL END PLAN_ACTIVITY_BUCKET_NUM,  ASH2.SQL,  ASH2.TOP_LEVEL_SQL_ID,  ASH2.DBOP_NAME,  ASH2.IS_MONITORED_SQL,  ASH2.PLAN_LINE_ID,  ASH2.PLSQL_OBJECT_ID,  ASH2.PLSQL_SUBPROGRAM_ID,  ASH2.ACTIVITY_TYPE,  ASH2.OTHER_SQL_ACTIVITY_TYPE,	ASH2.EVENT_NAME,  ASH2.IS_PX_SLAVE,  ASH2.SESSION_ID,  ASH2.PX_STEP_ID,  ASH2.PX_DFO_PAIR_TYPE,  ASH2.PX_DFO_PAIR_ID,  ASH2.PX_STEP_ARG,  CASE WHEN ASH2.PX_DFO_PAIR_ID IS NOT NULL THEN DECODE(ASH2.PX_DOP,  0,  :B28 ,  ASH2.PX_DOP) ELSE NULL END PX_DOP,  ASH2.PX_MIN_DOP,	:B20 + NUMTODSINTERVAL(:B26 * (ASH2.BUCKET_NUM-1),  'SECOND') BUCKET_ACTIVITY_START,  :B20 + NUMTODSINTERVAL( :B26 * ASH2.BUCKET_NUM - 1,  'SECOND') BUCKET_ACTIVITY_END,  ASH2.ACTIVITY_START,  ASH2.ACTIVITY_END,  ASH2.ACTIVITY_COUNT,  ASH2.IMQ_COUNT,  ASH2.WAIT_COUNT,  ASH2.CPU_COUNT,  ASH2.OTHER_SQL_COUNT,  SUM(ASH2.ACTIVITY_COUNT) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE,  DECODE(ASH2.PX_DFO_PAIR_ID,  NULL,  NULL,  ASH2.SESSION_ID)) PER_SERVER_DFO_COUNT,  CEIL((MAX(ASH2.MAX_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE) - MIN(ASH2.MIN_SAMPLE_DATE) OVER(PARTITION BY ASH2.PX_DFO_PAIR_ID,  ASH2.PX_DFO_PAIR_TYPE)) * 3600 * 24) DFO_DURATION FROM (SELECT ASH1.BUCKET_NUM,  ASH1.GLOBAL_SAMPLE_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.SESSION_ID,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG,  MAX(ASH1.SQL) SQL,  MAX(ASH1.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(ASH1.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  MAX(ASH1.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MIN(SAMPLE_DATE) MIN_SAMPLE_DATE,  MAX(SAMPLE_DATE) MAX_SAMPLE_DATE,  MAX(ASH1.IS_PX_SLAVE) IS_PX_SLAVE,  MAX(ASH1.PX_DOP) PX_DOP,	MIN(ASH1.PX_DOP) PX_MIN_DOP,  MIN(ASH1.SAMPLE_DATE) ACTIVITY_START,  MAX(ASH1.SAMPLE_DATE) ACTIVITY_END,  COUNT(ASH1.SQL) ACTIVITY_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME = 'in memory' THEN 1 ELSE NULL END) IMQ_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE != 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' AND ASH1.ACTIVITY_TYPE != 'Cpu' THEN 1 ELSE NULL END) WAIT_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Cpu' AND ASH1.EVENT_NAME IS NULL THEN 1 ELSE NULL END) CPU_COUNT,  COUNT(CASE WHEN ASH1.ACTIVITY_TYPE = 'Other SQL Execution' AND ASH1.ACTIVITY_TYPE != 'Non SQL' THEN 1 ELSE NULL END) OTHER_SQL_COUNT,  MAX(ASH1.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(ASH1.DBOP_NAME) DBOP_NAME FROM ( SELECT (CASE WHEN :B27 &gt; 1 THEN (TRUNC(DELTA_TIME_SECONDS/ :B26 ) + 1) ELSE 1 END) BUCKET_NUM,  ASH00.SQL,  ASH00.SAMPLE_DATE,  NVL2(DUP.C2,  TRUNC(DELTA_TIME_SECONDS/ (:B25 )) + 1,  NULL) GLOBAL_SAMPLE_ID,  NVL2(DUP.C2,  NULL,	ASH00.IS_MONITORED_SQL) IS_MONITORED_SQL,  NVL2(DUP.C2,  NULL,	ASH00.IN_INMEMORY_QUERY) IN_INMEMORY_QUERY,  NVL2(DUP.C2,  NULL,  ASH00.WAIT_CLASS) WAIT_CLASS,  NVL2(DUP.C2,  NULL,  ASH00.ACTIVITY_TYPE) ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,	ASH00.OTHER_SQL_ACTIVITY_TYPE) OTHER_SQL_ACTIVITY_TYPE,  NVL2(DUP.C2,  NULL,  ASH00.EVENT_NAME) EVENT_NAME,  NVL2(DUP.C2,  NULL,  ASH00.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  NVL2(DUP.C2,  NULL,  ASH00.DBOP_NAME) DBOP_NAME,  NVL2(DUP.C2,  NULL,  ASH00.IS_PX_SLAVE) IS_PX_SLAVE,  NVL2(DUP.C2,  NULL,  ASH00.SESSION_ID) SESSION_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLSQL_OBJECT_ID) PLSQL_OBJECT_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLSQL_SUBPROGRAM_ID) PLSQL_SUBPROGRAM_ID,  NVL2(DUP.C2,  NULL,  ASH00.PLAN_LINE_ID) PLAN_LINE_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_STEP_ID) PX_STEP_ID,  NVL2(DUP.C2,  NULL,  ASH00.PX_STEP_ARG) PX_STEP_ARG,  NVL2(DUP.C2,  NULL,  ASH00.PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  NVL2(DUP.C2,  NULL,	ASH00.PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  NVL2(DUP.C2,  NULL,	ASH00.PX_DOP) PX_DOP FROM (SELECT 1 C1,  NULL C2 FROM V$DUAL UNI
ON ALL SELECT 1 C1,  1 C2 FROM V$DUAL) DUP,  (SELECT /*+ no_merge */ 1 C1,  ASH000.SAMPLE_DATE,  ASH000.IS_MONITORED_SQL,  ((EXTRACT(SECOND FROM(DELTA_TIME)) + EXTRACT(MINUTE FROM(DELTA_TIME)) * 60 + EXTRACT(HOUR FROM(DELTA_TIME)) * 3600 + EXTRACT(DAY FROM(DELTA_TIME)) * 86400)) DELTA_TIME_SECONDS,  ASH000.IN_INMEMORY_QUERY,	ASH000.WAIT_CLASS,  DECODE(ASH000.IS_MONITORED_SQL,  1,  NVL(ASH000.WAIT_CLASS,  'Cpu'),  DECODE(SQL_ID,  NULL,  'Non SQL',  'Other SQL Execution')) ACTIVITY_TYPE,  NVL(ASH000.WAIT_CLASS,  'Cpu') OTHER_SQL_ACTIVITY_TYPE,  DECODE(:B24 ,  1,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 THEN NVL(ASH000.EVENT,  DECODE(ASH000.IN_INMEMORY_QUERY,  'Y',  'in memory',  ASH000.EVENT)) WHEN ASH000.SQL_ID IS NOT NULL THEN 'sql_id: ' || ASH000.SQL_ID WHEN ASH000.CALL_NAME IS NOT NULL THEN 'call: ' || ASH000.CALL_NAME ELSE 'anonymous: '|| ASH000.EVENT END,	NULL) EVENT_NAME,  CASE WHEN ASH000.IS_MONITORED_SQL = 1 AND (NVL(ASH000.SQL_ID,  :B9 ) = :B9 OR NVL(ASH000.DBOP_NAME,	:B6 ) = :B6 ) THEN 'this' WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.SQL_ID IS NOT NULL AND ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID THEN ASH000.TOP_LEVEL_SQL_ID WHEN ASH000.SQL_ID IS NOT NULL THEN ASH000.SQL_ID ELSE NVL(CALL_NAME,  'anonymous') END SQL,  CASE WHEN ASH000.IS_PX_SLAVE = 0 AND (ASH000.SQL_ID IS NULL OR ASH000.TOP_LEVEL_SQL_ID != ASH000.SQL_ID) THEN ASH000.TOP_LEVEL_SQL_ID END TOP_LEVEL_SQL_ID,  ASH000.DBOP_NAME,  ASH000.IS_PX_SLAVE,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL != 1 THEN 65536 ELSE ASH000.SESSION_ID END SESSION_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_OBJECT_ID,  NULL) PLSQL_OBJECT_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PLSQL_SUBPROGRAM_ID,  NULL) PLSQL_SUBPROGRAM_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.SQL_PLAN_LINE_ID,  NULL) PLAN_LINE_ID,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ID,  NULL) PX_STEP_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 1 AND ASH000.IS_MONITORED_SQL = 1 AND ASH000.PX_STEP_ID IN (1,  2,  3) THEN ASH000.PX_STEP_ARG ELSE NULL END PX_DFO_PAIR_ID,  CASE WHEN ASH000.IS_PX_SLAVE = 0 OR ASH000.IS_MONITORED_SQL != 1 THEN NULL WHEN ASH000.PX_STEP_ID = 1 THEN 1 WHEN ASH000.PX_STEP_ID IN (2,  3) THEN 0 ELSE NULL END PX_DFO_PAIR_TYPE,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_STEP_ARG,	NULL) PX_STEP_ARG,  DECODE(ASH000.IS_MONITORED_SQL,  1,  ASH000.PX_DOP,  NULL) PX_DOP FROM (SELECT ASH0.*,  CASE WHEN ASH0.IS_TARGET_SQL = 1 OR (ASH0.IS_PX_SLAVE = 1 AND ((NVL(ASH0.TOP_LEVEL_SQL_ID,	ASH0.SQL_ID) IS NOT NULL AND NVL(ASH0.TOP_LEVEL_SQL_ID,  ASH0.SQL_ID) = :B9 ) OR (SQL_ID IS NULL AND :B23 = 'Y'))) THEN 1 ELSE 0 END IS_MONITORED_SQL FROM (SELECT (CASE WHEN (ASH.SQL_ID = :B9 AND ASH.SQL_EXEC_ID = :B7 AND ASH.SQL_EXEC_START = :B8 ) THEN 1 ELSE 0 END) IS_TARGET_SQL,  ASH.SQL_ID,  ASH.SQL_PLAN_LINE_ID,	ASH.PLSQL_OBJECT_ID,  ASH.PLSQL_SUBPROGRAM_ID,	ASH.TOP_LEVEL_SQL_ID,  DECODE(ASH.SQL_ID,  NULL,  ASH.TOP_LEVEL_CALL_NAME,  NULL) CALL_NAME,  ASH.EVENT,  ASH.IN_INMEMORY_QUERY,  ASH.WAIT_CLASS,  ASH.SQL_EXEC_ID,  ASH.SQL_EXEC_START,  ASH.DBOP_NAME,  ASH.DBOP_EXEC_ID,  ASH.SESSION_ID,  ASH.SESSION_SERIAL#,  CASE WHEN QC_INSTANCE_ID IS NOT NULL AND (ASH.SESSION_ID != ASH.QC_SESSION_ID OR ASH.SESSION_SERIAL# != ASH.QC_SESSION_SERIAL# OR USERENV('instance') != ASH.QC_INSTANCE_ID) THEN 1 ELSE 0 END IS_PX_SLAVE,  SAMPLE_TIME - CAST(:B20 AS TIMESTAMP) DELTA_TIME,  CAST(FROM_TZ(ASH.SAMPLE_TIME,  DBTIMEZONE) AS DATE) SAMPLE_DATE,  TRUNC(MOD(PX_FLAGS/65536,  32)) PX_STEP_ID,  MOD(PX_FLAGS,  65536) PX_STEP_ARG,  TRUNC(PX_FLAGS/2097152) PX_DOP FROM V$ALL_ACTIVE_SESSION_HISTORY ASH WHERE ((ASH.SESSION_ID = :B19 AND ASH.SESSION_SERIAL# = :B18 AND USERENV('INSTANCE') = :B17 ) OR (ASH.QC_SESSION_ID IS NOT NULL AND ASH.QC_SESSION_ID = :B19 AND ASH.QC_SESSION_SERIAL# = :B18 AND ASH.QC_INSTANCE_ID = :B17 )) AND SAMPLE_TIME BETWEEN :B16 AND :B15 ) ASH0 WHERE (ASH0.SAMPLE_DATE BETWEEN :B20 + 1/24/3600 AND :B22 - 1/24/3600 OR (ASH0.SQL_ID = :B9 AND ASH0.SQL_EXEC_START = :B8 AND ASH0.SQL_EXEC_ID = :B7 ) OR (ASH0.DBOP_NAME = :B6 AND ASH0.DBOP_EXEC_ID = :B5 )) AND (:B21 IS NULL OR ASH0.SQL_PLAN_LINE_ID = :B21 ) AND (ASH0.IS_PX_SLAVE = 0 OR ASH0.SQL_ID IS NOT NULL)) ASH000 ) ASH00 WHERE ASH00.C1 = DUP.C1) ASH1 WHERE ASH1.BUCKET_NUM &gt; 0 AND ASH1.BUCKET_NUM &lt;= :B27 GROUP BY USERENV('INSTANCE'),  ASH1.GLOBAL_SAMPLE_ID,  ASH1.BUCKET_NUM,  ASH1.SESSION_ID,  ASH1.PLAN_LINE_ID,  ASH1.PLSQL_OBJECT_ID,  ASH1.PLSQL_SUBPROGRAM_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  ASH1.OTHER_SQL_ACTIVITY_TYPE,  ASH1.PX_STEP_ID,  ASH1.PX_STEP_ARG) ASH2)))) GVTF WHERE GVTF.INST_ID BETWEEN :B11 AND :B10 ) ASH WHERE ASH.GLOBAL_SAMPLE_ID IS NULL AND ASH.SESSION_ID = MO.SID(+) AND ASH.INST_ID = MO.INST_ID(+)) AD0),  RESPONSE_TIME_DATA AS (SELECT ADH.BUCKET_NUM,  ADH.SQL_ROWNUM,  ADH.SQL,	ADH.TOP_LEVEL_SQL_ID,  ADH.DBOP_NAME,  ADH.PX_ID,  DECODE( ADH.PX_STEP_ID,  NULL,  NULL,  0,  NULL,  1,  'PX Server(s) - Executing Parent DFO',  2,  'PX Server(s) - Executing Child DFO',  3,	'PX Server(s) - Sampling Child DFO',  4,  'PX Server(s) - Joining Group',  5,  'QC - Scheduling Child DFO',  6,  'QC - Scheduling Parent DFO',	7,  'QC - Initializing Objects',  8,  'QC - Flushing Objects',	9,  'QC - Allocating Slaves',  10,  'QC - Initializing Granules',  11,	'PX Server(s) - Parsing Cursor',  12,  'PX Server(s) - Executing Cursor',  13,	'PX Server(s) - Preparing Transaction',  14,  'PX Server(s) - Joining Transaction',  15,  'PX Server(s) - Load Commit',  16,  'PX Server(s) - Aborting Transaction',  17,  'QC - Executing Child DFO',	18,  'QC - Executing Parent DFO',  'PX Step - ' || PX_STEP_ID) PX_STEP_ID,  ADH.PX_STEP_ARG,  ADH.PX_DFO_PAIR_ID,  ADH.PX_DOP,	ADH.PX_MIN_DOP,  ADH.DFO_MOST_ACTIVE_IID,  ADH.DFO_MOST_ACTIVE_SID,  ADH.DFO_MOST_ACTIVE_COUNT,  ADH.ACTIVITY_START,  ADH.ACTIVITY_END,  ADH.ACTIVITY_TYPE,  ADH.OTHER_SQL_ACTIVITY_TYPE,  ADH.EVENT_NAME,  ADH.PLAN_LINE_ID,  ADH.PLSQL_OBJECT_ID,  ADH.PLSQL_SUBPROGRAM_ID,  CASE WHEN PLSQL_ROWNUM = 1 AND ADH.PLSQL_OBJECT_ID IS NOT NULL THEN NVL((SELECT P.OWNER || '.' || P.OBJECT_NAME || DECODE(P.PROCEDURE_NAME,  NULL,  '',	'.' || P.PROCEDURE_NAME) FROM ALL_PROCEDURES P WHERE P.OBJECT_ID = ADH.PLSQL_OBJECT_ID AND P.SUBPROGRAM_ID = ADH.PLSQL_SUBPROGRAM_ID),	'Unavailable') ELSE NULL END PLSQL_NAME,  ADH.ACTIVITY_COUNT,  ADH.BUCKET_ACTIVE_SECONDS,  ADH.BUCKET_IDLE_SECONDS,  (CASE WHEN ADH.IS_MONITORED_SQL = 0 THEN ADH.ACTIVE_SECONDS WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_CPU_HEIGHT &gt;= :B34 THEN DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  (ADH.DFO_PAIR_ACTIVITY_HEIGHT / ADH.DFO_PAIR_CPU_HEIGHT) * ADH.DFO_PAIR_TOTAL_SECONDS,  0) WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * DECODE(ADH.ACTIVITY_TYPE,  'Cpu',  ADH.DFO_PAIR_ACTIVITY_HEIGHT,  (ADH.DFO_PAIR_ACTIVITY_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT))) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_ACTIVITY_HEIGHT) / ADH.PX_DOP ELSE ADH.ACTIVE_SECONDS END) RESP_TIME,  (CASE WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 AND ADH.PX_DOP &gt; :B34 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * (ADH.DFO_PAIR_IDLE_HEIGHT * (:B34 - ADH.DFO_PAIR_CPU_HEIGHT)) / (ADH.DFO_PAIR_TOTAL_HEIGHT_ADJ - ADH.DFO_PAIR_CPU_HEIGHT)) / :B34 WHEN ADH.PX_DFO_PAIR_ID IS NOT NULL AND ADH.DFO_PAIR_IDLE_HEIGHT &gt; 0 THEN (ADH.DFO_PAIR_TOTAL_SECONDS * ADH.DFO_PAIR_IDLE_HEIGHT) / ADH.PX_DOP ELSE 0 END) DFO_PAIR_IDLE_RESP_TIME,  ADH.DFO_PAIR_ACTIVITY_HEIGHT,  ADH.DFO_PAIR_CPU_HEIGHT,	ADH.DFO_PAIR_IDLE_HEIGHT,  ADH.DFO_PAIR_TOTAL_HEIGHT,  ADH.DFO_PAIR_CPU_ACTIVITY,  ADH.DFO_PAIR_TOTAL_SECONDS FROM (SELECT ADH_1.*,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.PLSQL_OBJECT_ID,  ADH_1.PLSQL_SUBPROGRAM_ID ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) PLSQL_ROWNUM,  (ROW_NUMBER() OVER(PARTITION BY ADH_1.SQL ORDER BY ADH_1.BUCKET_NUM,  ADH_1.ACTIVITY_TYPE,  ADH_1.EVENT_NAME)) SQL_ROWNUM,  (
CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP - ADH_1.DFO_PAIR_TOTAL_HEIGHT ELSE 0 END) DFO_PAIR_IDLE_HEIGHT,  (CASE WHEN ADH_1.PX_DFO_PAIR_ID IS NOT NULL AND (ADH_1.DFO_PAIR_TOTAL_HEIGHT &lt; ADH_1.PX_DOP) AND (ADH_1.DFO_PAIR_CPU_HEIGHT &lt; :B34 ) THEN ADH_1.PX_DOP ELSE ADH_1.DFO_PAIR_TOTAL_HEIGHT END) DFO_PAIR_TOTAL_HEIGHT_ADJ FROM (SELECT ADH_0.*,  (CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_TOTAL_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_TOTAL_HEIGHT,	(CASE WHEN ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.DFO_PAIR_CPU_ACTIVITY * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_CPU_HEIGHT,  (CASE WHEN ADH_0.PX_DFO_PAIR_ID IS NOT NULL AND ADH_0.DFO_PAIR_TOTAL_SECONDS &gt; 0 THEN (ADH_0.ACTIVITY_COUNT * :B25 ) / ADH_0.DFO_PAIR_TOTAL_SECONDS ELSE 0 END) DFO_PAIR_ACTIVITY_HEIGHT FROM (SELECT AD3.*,  (SUM(DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  0,	AD3.ACTIVE_SECONDS)) OVER(PARTITION BY DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  NULL,  AD3.BUCKET_NUM),  DECODE(AD3.PX_DFO_PAIR_ID,  NULL,  NULL,  AD3.PX_STEP_ARG))) DFO_PAIR_TOTAL_SECONDS FROM (SELECT AD2.*,  CASE WHEN AD2.IS_MONITORED_SQL = 0 THEN SQL_BUCKET_DISTINCT_SAMPLES * :B25 WHEN AD2.PX_ID IS NULL THEN AD2.ACTIVITY_COUNT * :B25 WHEN AD2.BUCKET_PARALLEL_MON_ACTIVITY &gt; 0 THEN (AD2.ACTIVITY_COUNT * AD2.BUCKET_PARALLEL_MON_SECONDS) / AD2.BUCKET_PARALLEL_MON_ACTIVITY ELSE 0 END ACTIVE_SECONDS,  CASE WHEN AD2.BUCKET_INTERVAL &gt; BUCKET_ACTIVE_SECONDS THEN AD2.BUCKET_INTERVAL - BUCKET_ACTIVE_SECONDS ELSE 0 END BUCKET_IDLE_SECONDS FROM (SELECT AD1.*,  (AD1.BUCKET_SERIAL_MON_ACTIVITY * :B25 ) BUCKET_SERIAL_MON_SECONDS,	(AD1.BUCKET_TOTAL_MON_ACTIVITY - AD1.BUCKET_SERIAL_MON_ACTIVITY) BUCKET_PARALLEL_MON_ACTIVITY,	(AD1.BUCKET_ACTIVE_SECONDS - (AD1.BUCKET_OTHER_ACTIVITY + AD1.BUCKET_SERIAL_MON_ACTIVITY) * :B25 ) BUCKET_PARALLEL_MON_SECONDS,  (AD1.BUCKET_OTHER_ACTIVITY * :B25 ) BUCKET_OTHER_SECONDS,  DECODE(AD1.PX_DFO_PAIR_ID,	NULL,  NULL,  SUM(AD1.ACTIVITY_COUNT) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_TOTAL_ACTIVITY,  DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  SUM(DECODE(AD1.ACTIVITY_TYPE,  'Cpu',  AD1.ACTIVITY_COUNT,  0)) OVER(PARTITION BY DECODE(AD1.PX_DFO_PAIR_ID,  NULL,  NULL,  AD1.BUCKET_NUM),  AD1.PX_DFO_PAIR_ID)) DFO_PAIR_CPU_ACTIVITY FROM (SELECT AD01.*,  NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  1,	AD01.ACTIVITY_COUNT,  NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0) BUCKET_TOTAL_MON_ACTIVITY,  (NVL(SUM(CASE WHEN AD01.IS_MONITORED_SQL = 1 AND AD01.PX_ID IS NULL THEN AD01.ACTIVITY_COUNT ELSE NULL END) OVER(PARTITION BY AD01.BUCKET_NUM),  0)) BUCKET_SERIAL_MON_ACTIVITY,  (NVL((SUM(DECODE(AD01.IS_MONITORED_SQL,  0,  AD01.SQL_BUCKET_DISTINCT_SAMPLES,  NULL)) OVER(PARTITION BY AD01.BUCKET_NUM)),  0)) BUCKET_OTHER_ACTIVITY,  (NVL(AD01.BUCKET_DISTINCT_SAMPLES,  0) * :B25 ) BUCKET_ACTIVE_SECONDS,  DECODE(AD01.BUCKET_NUM,  :B27 ,  MOD(:B32 ,  :B26 ),  :B26 ) BUCKET_INTERVAL FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.PX_ID,	AD0.ACTIVITY_TYPE,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.PLAN_LINE_ID,  AD0.PX_STEP_ID,  AD0.PX_STEP_ARG,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,	MAX(AD0.IS_MONITORED_SQL) IS_MONITORED_SQL,  MAX(AD0.SQL) SQL,	MAX(AD0.TOP_LEVEL_SQL_ID) TOP_LEVEL_SQL_ID,  MAX(AD0.DBOP_NAME) DBOP_NAME,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,  NULL,  NULL,  AD0.DFO_MOST_ACTIVE_IID)) DFO_MOST_ACTIVE_IID,  MAX(DECODE(AD0.DFO_MOST_ACTIVE_COUNT,	NULL,  NULL,  AD0.DFO_MOST_ACTIVE_SID)) DFO_MOST_ACTIVE_SID,  SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT,  MAX(PX_DFO_PAIR_TYPE) PX_DFO_PAIR_TYPE,  MAX(PX_DFO_PAIR_ID) PX_DFO_PAIR_ID,  MAX(AD0.PX_DOP) PX_DOP,  MIN(AD0.PX_MIN_DOP) PX_MIN_DOP,  MAX(AD0.BUCKET_DISTINCT_SAMPLES) BUCKET_DISTINCT_SAMPLES,	MAX(AD0.SQL_BUCKET_DISTINCT_SAMPLES) SQL_BUCKET_DISTINCT_SAMPLES FROM (SELECT AD00.*,  (CASE WHEN AD00.IS_MONITORED_SQL = 1 AND (AD00.SESSION_ID != :B19 OR AD00.INST_ID != :B17 ) THEN AD00.PX_SERVER_GROUP END) PX_ID FROM ASH_DATA AD00 WHERE :B33 = 1 ) AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.PX_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  AD0.OTHER_SQL_ACTIVITY_TYPE,  AD0.PLAN_LINE_ID,  AD0.PLSQL_OBJECT_ID,  AD0.PLSQL_SUBPROGRAM_ID,  AD0.PX_STEP_ID,  AD0.PX_STEP_ARG ) AD01) AD1) AD2) AD3) ADH_0) ADH_1) ADH) SELECT /*+ no_monitor no_xml_query_rewrite
		 opt_param('_gby_hash_aggregation_enabled',  'false') */ XMLELEMENT( &quot;sql_monitor_report&quot;,  XMLATTRIBUTES(:B59 AS &quot;version&quot;,  TO_CHAR(:B58 ,  :B12 ) AS &quot;sysdate&quot;),  XMLELEMENT( &quot;report_parameters&quot;,  NULL,  CASE WHEN :B57 IS NOT NULL THEN XMLFOREST( :B57 AS &quot;dbop_name&quot;,  :B56 AS &quot;dbop_exec_id&quot;) ELSE XMLFOREST( :B55 AS
&quot;sql_id&quot;,  :B54 AS &quot;sql_exec_id&quot;) END,  XMLFOREST( :B53 AS &quot;session_id&quot;,	:B52 AS &quot;session_serial&quot;,  TO_CHAR(:B51 ,  :B12 ) AS &quot;sql_exec_start&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR(:B50 ,  :B12 ) AS &quot;interval_start&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;interval_end&quot;,  DECODE(:B49 ,  'Y',	:B48 ,	NULL) AS &quot;auto_refresh&quot;,  :B47 AS &quot;base_path&quot;),  CASE WHEN :B23 = 'Y' AND :B46 IS NOT NULL AND NOT (:B4 = 1 AND :B3 IS NULL AND :B2 IS NULL AND :B1 IS NULL) THEN XMLELEMENT( &quot;parallel_filter&quot;,	NULL,  XMLFOREST( DECODE(:B4 ,	1,  'yes',  'no') AS &quot;qc&quot;,  :B3 AS &quot;server_group&quot;,	:B2 AS &quot;server_set&quot;,	:B1 AS &quot;server_number&quot;)) ELSE NULL END),  CASE WHEN :B14 = 1 THEN XMLELEMENT( &quot;derived_parameters_testing&quot;,  NULL,	XMLFOREST(:B11 AS &quot;instance_id_low&quot;,	:B10 AS &quot;instance_id_high&quot;,  :B26 AS &quot;bucket_interval_sec&quot;,  :B32 AS &quot;interval_second&quot;,  :B27 AS &quot;bucket_calc_count&quot;,  :B45 AS &quot;bucket_calc_max_count&quot;,  :B13 AS &quot;sel_sqltext&quot;)) ELSE NULL END,  (SELECT XMLCONCAT( CASE WHEN :B46 IS NULL AND :B67 IS NULL THEN XMLELEMENT( &quot;target&quot;,  XMLATTRIBUTES(:B17 AS &quot;instance_id&quot;,  :B19 AS &quot;session_id&quot;,  :B18 AS &quot;session_serial&quot;,  NVL2(:B6 ,	NULL,  :B9 ) AS &quot;sql_id&quot;,  NVL2(:B6 ,  NULL,	TO_CHAR(:B8 ,  :B12 )) AS &quot;sql_exec_start&quot;,  NVL2(:B6 ,  NULL,  :B7 ) AS &quot;sql_exec_id&quot;,  NVL2(:B6 ,  :B6 ,	NULL) AS &quot;dbop_name&quot;,  NVL2(:B6 ,  :B5 ,  NULL) AS &quot;dbop_exec_id&quot;,	NVL2(:B6 ,  TO_CHAR(:B8 ,  :B12 ),  NULL) AS &quot;dbop_exec_start&quot;,  NVL2(:B6 ,  NULL,  MAX_PLAN_HASH_VALUE) AS &quot;sql_plan_hash&quot;,  NVL2(:B6 ,  NULL,  MAX_FULL_PLAN_HASH_VALUE) AS &quot;sql_full_plan_hash&quot;,  MAGG.DB_UNIQUE_NAME AS &quot;db_unique_name&quot;,  MAGG.PLATFORM_NAME AS &quot;db_platform_name&quot;,  MAGG.HOST_NAME AS &quot;report_host_name&quot;),  NVL2(SUM_SERVERS_REQUESTED,  XMLELEMENT( &quot;servers_requested&quot;,  NULL,  SUM_SERVERS_REQUESTED),  NULL),  NVL2(SUM_SERVERS_ALLOCATED,  XMLELEMENT( &quot;servers_allocated&quot;,	NULL,  SUM_SERVERS_ALLOCATED),	NULL),	NVL2(MAX_USERID,  XMLELEMENT( &quot;user_id&quot;,  NULL,  MAX_USERID),  NULL),  NVL2(MAX_USERNAME,  XMLELEMENT( &quot;user&quot;,  NULL,  MAX_USERNAME),  NULL),  NVL2(MAX_CON_ID,  XMLELEMENT( &quot;con_id&quot;,  NULL,  MAX_CON_ID),  NULL),  NVL2(MAX_CON_NAME,  XMLELEMENT( &quot;con_name&quot;,  NULL,  MAX_CON_NAME),  NULL),  NVL2(MAX_PROGRAM,  XMLELEMENT( &quot;program&quot;,  NULL,  MAX_PROGRAM),  NULL),  NVL2(MAX_MODULE,  XMLELEMENT( &quot;module&quot;,  NULL,  MAX_MODULE),  NULL),  NVL2(MAX_ACTION,  XMLELEMENT( &quot;action&quot;,  NULL,  MAX_ACTION),  NULL),  NVL2(MAX_SERVICE_NAME,  XMLELEMENT( &quot;service&quot;,  NULL,  MAX_SERVICE_NAME),  NULL),  NVL2(MAX_CLIENT_ID,  XMLELEMENT( &quot;client_id&quot;,  NULL,  MAX_CLIENT_ID),  NULL),  NVL2(MAX_CLIENT_INFO,  XMLELEMENT( &quot;client_info&quot;,  NULL,  MAX_CLIENT_INFO),  NULL),  NVL2(MAX_PL_ENTRY_OID,  XMLELEMENT( &quot;plsql_entry_object_id&quot;,  NULL,	MAX_PL_ENTRY_OID),  NULL),  NVL2(MAX_PL_ENTRY_PROGID,  XMLELEMENT( &quot;plsql_entry_subprogram_id&quot;,  NULL,  MAX_PL_ENTRY_PROGID),  NULL),  NVL2(MAX_PL_ENTRY_NAME,  XMLELEMENT( &quot;plsql_entry_name&quot;,  NULL,  MAX_PL_ENTRY_NAME),  NULL),  NVL2(MAX_PL_OID,  XMLELEMENT( &quot;plsql_object_id&quot;,  NULL,  MAX_PL_OID),  NULL),  NVL2(MAX_PL_PROGID,  XMLELEMENT( &quot;plsql_subprogram_id&quot;,  NULL,  MAX_PL_PROGID),  NULL),  NVL2(MAX_PL_NAME,	XMLELEMENT( &quot;plsql_name&quot;,  NULL,  MAX_PL_NAME),  NULL),  CASE WHEN (:B13 = 0 OR :B6 IS NOT NULL) THEN NULL ELSE XMLELEMENT( &quot;sql_fulltext&quot;,  XMLATTRIBUTES( NVL2(:B65 ,  'Y',  :B66 ) AS &quot;is_full&quot;),  NVL2(:B65 ,  :B65 ,  SQLMON_TEXT)) END,  XMLELEMENT( &quot;status&quot;,  NULL,  MAX_STATUS),  XMLELEMENT( &quot;refresh_count&quot;,  NULL,  SUM_REFRESH_COUNT),  XMLELEMENT( &quot;first_refresh_time&quot;,  NULL,  TO_CHAR(MIN_FIRST_REFRESH_TIME,  :B12 )),  XMLELEMENT( &quot;last_refresh_time&quot;,  NULL,  TO_CHAR(:B58 ,  :B12 )),  XMLELEMENT( &quot;duration&quot;,  NULL,  GREATEST(:B64 ,  LEAST(MAX_ELAPSED_TIME/1000000,  1),  CEIL(MAX_QUEUING_TIME/1000000))),  DECODE(MAX_RM_INFO,  '00/00/0000 00:00:00',  NULL,  XMLTYPE(SUBSTR(MAX_RM_INFO,	20))),	CASE WHEN (:B62 = 'Y') THEN XMLELEMENT( &quot;adaptive_plan&quot;,  XMLATTRIBUTES(:B63 AS &quot;is_final&quot;),  :B62 ) ELSE NULL END ) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  DECODE(NVL(SUM_ELAPSED_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  SUM_ELAPSED_TIME)),  DECODE(NVL(MAX_QUEUING_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX_QUEUING_TIME)),  DECODE(NVL(SUM_CPU_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  SUM_CPU_TIME)),  DECODE(NVL(SUM_USER_IO_WAIT_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  SUM_USER_IO_WAIT_TIME)),  DECODE(NVL(SUM_APPLICATION_WAIT_TIME,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  SUM_APPLICATION_WAIT_TIME)),  DECODE(NVL(SUM_CONCURRENCY_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  SUM_CONCURRENCY_WAIT_TIME)),  DECODE(NVL(SUM_CLUSTER_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  SUM_CLUSTER_WAIT_TIME)),	DECODE(NVL(SUM_PLSQL_EXEC_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  SUM_PLSQL_EXEC_TIME)),  DECODE(NVL(SUM_JAVA_EXEC_TIME,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  SUM_JAVA_EXEC_TIME)),  DECODE(NVL(SUM_OTHER_WAIT_TIME,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  SUM_OTHER_WAIT_TIME)),  DECODE(NVL(SUM_FETCHES,  0),	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  SUM_FETCHES)),  DECODE(NVL(SUM_BUFFER_GETS,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  SUM_BUFFER_GETS)),  DECODE(NVL(SUM_READ_REQS,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  SUM_WRITE_REQS)),  DECODE(NVL(SUM_READ_REQS,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  SUM_READ_REQS)),  DECODE(NVL(SUM_READ_BYTES,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),	SUM_READ_BYTES)),  DECODE(NVL(SUM_WRITE_REQS,  0),  0,	NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),	SUM_WRITE_REQS)),  DECODE(NVL(SUM_WRITE_BYTES,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  SUM_WRITE_BYTES)),  DECODE(NVL(SUM_IO_UNC_BYTES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  SUM_IO_UNC_BYTES)),  DECODE(NVL(SUM_IO_ELIG_BYTES,	0),  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  SUM_IO_ELIG_BYTES)),  DECODE(NVL(SUM_IO_RET_BYTES,  0),  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  SUM_IO_RET_BYTES)),  CASE WHEN SUM_IO_INTER_BYTES IS NULL OR SUM_IO_BYTES = 0 OR SUM_IO_INTER_BYTES = SUM_IO_BYTES OR NVL(SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE
 XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(SUM_IO_BYTES / DECODE(SUM_IO_INTER_BYTES,	0,  1,	SUM_IO_INTER_BYTES),  2)) END,	CASE WHEN NVL(SUM_IO_ELIG_BYTES,  0) = 0 OR SUM_IO_BYTES = 0 OR SUM_IO_UNC_BYTES = SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST(SUM_IO_UNC_BYTES,  SUM_IO_ELIG_BYTES) - SUM_IO_RET_BYTES) / SUM_IO_ELIG_BYTES,  2))) END),	CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN SUM(ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLAGG( XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME)) ELSE NULL END FROM (SELECT AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1) ELSE NULL END,  NVL2(MAX_ERROR_NUMBER,  XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MAX_ERROR_NUMBER AS &quot;number&quot;,  MAX_ERROR_FACILITY AS &quot;facility&quot;),  MAX_ERROR_MESSAGE),  NULL),  CASE WHEN :B61 = 1 AND MAGG.QC_HAS_BINDS_XML = 'Y' THEN (SELECT XMLTYPE(BINDS_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = :B17 AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END,  CASE WHEN :B60 = 1 AND MAGG.QC_HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = MAGG.MAX_INST_ID AND MON.KEY = MAGG.MAX_KEY AND MON.SID = MAGG.MAX_SESSION_ID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) FROM MONITOR_AGG MAGG),  CASE WHEN :B44 = 1 THEN (SELECT CASE WHEN AT.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( :B41 AS
&quot;ash_missing_seconds&quot;,  TO_CHAR(AT.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,	TO_CHAR(AT.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AT.ACTIVITY_END - AT.ACTIVITY_START) * 3600 * 24) + 1 AS &quot;duration&quot;,  AT.ACTIVITY_COUNT AS &quot;count&quot;,  AT.IMQ_COUNT AS &quot;imq_count&quot;,  AT.WAIT_COUNT AS &quot;wait_count&quot;,  AT.CPU_COUNT AS &quot;cpu_count&quot;,  DECODE(AT.OTHER_SQL_COUNT,  0,  NULL,  AT.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AT.ACTIVITY_TOTAL,	AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,	SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,	SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1) AT,  (SELECT CASE WHEN :B30 = 1 AND :B27 &gt; 1 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22 ,  :B12 ) AS &quot;end_time&quot;,  ROUND(( :B22 - :B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  SUM(ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(IMQ_COUNT) IMQ_COUNT,  SUM(WAIT_COUNT) WAIT_COUNT,  SUM(CPU_COUNT) CPU_COUNT,  SUM(OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG( XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),	AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,	MIN(AD0.ACTIVITY_START) ACTIVITY_START,  MAX(AD0.ACTIVITY_END) ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,	MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END FROM ASH_DATA AD0 GROUP BY AD0.ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,	CASE WHEN :B33 = 1 THEN (SELECT CASE WHEN AH.ACTIVITY_COUNT &gt; 0 THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( TO_CHAR( :B20 ,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR( :B22 ,  :B12 ) AS &quot;end_time&quot;,  :B41 AS &quot;ash_missing_seconds&quot;,  TO_CHAR(AH.ACTIVITY_START,  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(AH.ACTIVITY_END,  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((AH.ACTIVITY_END - AH.ACTIVITY_START) * 3600 * 24) + 1 AS &quot;duration&quot;,  :B25 AS &quot;sample_interval&quot;,  :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,	ROUND((:B22 - :B20 ) *3600*24) + 1 AS &quot;bucket_duration&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B34 AS &quot;total_cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  AH.GLOB_ACTIVITY_HISTO) WHEN :B41 IS NOT NULL THEN XMLELEMENT( &quot;activity_detail&quot;,  XMLATTRIBUTES( DECODE( :B41 ,  -1,  'all',  TO_CHAR( :B41 )) AS &quot;ash_missing_seconds&quot;)) ELSE NULL END FROM (SELECT MIN(AD2.ACTIVITY_START) ACTIVITY_START,	MAX(AD2.ACTIVITY_END) ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  XMLAGG( XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),  ACTIVITY_BUCKET_XML) ORDER BY AD2.BUCKET_NUM) GLOB_ACTIVITY_HISTO FROM (SELECT AD1.BUCKET_NUM,  MIN(AD1.ACTIVITY_START) ACTIVITY_START,  MAX(AD1.ACTIVITY_END) ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  MAX(AD1.BUCKET_IDLE_SECONDS) BUCKET_IDLE_SECONDS,	XMLAGG( XMLCONCAT( CASE WHEN AD1.DFO_PAIR_IDLE_RESP_TIME != 0 AND DFO_PAIR_ROWNUM = 1 THEN XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( 'Parallel Skew' AS &quot;class&quot;,  AD1.PX_STEP_ARG AS &quot;line&quot;,  AD1.PX_ID AS &quot;px&quot;,	ROUND(AD1.DFO_PAIR_IDLE_RESP_TIME,  2) AS &quot;rt&quot;),  0) ELSE NULL END,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( NVL(AD1.OTHER_SQL,  AD1.RPI) AS &quot;sql&quot;,  AD1.NON_SQL AS &quot;non_sql&quot;,	AD1.CLASS AS &quot;class&quot;,  AD1.OTHER_SQL_CLASS AS &quot;other_sql_class&quot;,  AD1.EVENT AS &quot;event&quot;,  AD1.PLAN_LINE_ID AS &quot;line&quot;,  NVL2(AD1.PLSQL_OBJECT_ID,  AD1.PLSQL_OBJECT_ID||'.'|| AD1.PLSQL_SUBPROGRAM_ID,  NULL) AS &quot;plsql_id&quot;,  AD1.PLSQL_NAME AS &quot;plsql_name&quot;,  CASE WHEN AD1.SQL_ROWNUM = 1 THEN AD1.TOP_LEVEL_SQL_ID END AS &quot;top_sql_id&quot;,	CASE WHEN AD1.DBOP_NAME IS NOT NULL THEN AD1.DBOP_NAME END AS &quot;dbop_name&quot;,  CASE WHEN AD1.DFO_MOST_ACTIVE_IID IS NOT NULL AND :B68 = 'Y' THEN AD1.DFO_MOST_ACTIVE_IID END AS &quot;skew_iid&quot;,  DECODE(AD1.DFO_MOST_ACTIVE_COUNT,  NULL, NULL,  AD1.DFO_MOST_ACTIVE_SID) AS &quot;skew_sid&quot;,  AD1.DFO_MOST_ACTIVE_COUNT AS &quot;skew_count&quot;,  DECODE(AD1.PX_DOP,  :B28 ,  NULL,  AD1.PX_DOP) AS &quot;dop&quot;,  DECODE(AD1.PX_DOP,  AD1.PX_MIN_DOP,	NULL,  AD1.PX_MIN_DOP) AS &quot;min_dop&quot;,	AD1.PX_ID AS &quot;px&quot;,  AD1.PX_STEP_ID AS &quot;step&quot;,  AD1.PX_STEP_ARG AS &quot;arg&quot;,	DECODE(AD1.ACTIVITY_COUNT,  AD1.RESP_TIME,  NULL,  ROUND(AD1.RESP_TIME,  2)) AS &quot;rt&quot;),  AD1.ACTIVITY_COUNT)) ORDER BY AD1.PX_STEP_ID,  AD1.PX_STEP_ARG,  AD1.DFO_PAIR_ROWNUM) ACTIVITY_BUCKET_XML FROM (SELECT AD01.*,  CASE WHEN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.ACTIVITY_TYPE END CLASS,	CASE WHEN (AD01.ACTIVITY_TYPE = 'Other SQL Execution' OR AD01.ACTIVITY_TYPE = 'Non SQL') THEN AD01.OTHER_SQL_ACTIVITY_TYPE END OTHER_SQL_CLASS,  CASE WHEN AD01.ACTIVITY_TYPE != 'Other SQL Execution' AND AD01.ACTIVITY_TYPE != 'Non SQL' THEN AD01.EVENT_NAME END EVENT,  CASE WHEN AD01.SQL IN ('this',  'anonymous') THEN NULL ELSE AD01.SQL END RPI,  DECODE(AD01.ACTIVITY_TYPE,  'Other SQL Execution',  SUBSTR(AD01.EVENT_NAME,	9),  NULL) OTHER_SQL,  DECODE(AD01.ACTIVITY_TYPE,  'Non SQL',  AD01.EVENT_NAME,  NULL) NON_SQL,  ROW_NUMBER() OVER(PARTITION BY AD01.BUCKET_NUM,  AD01.PX_DFO_PAIR_ID ORDER BY AD01.ACTIVITY_TYPE,  AD01.EVENT_NAME,  AD01.PLAN_LINE_ID) DFO_PAIR_ROWNUM FROM RESPONSE_TIME_DATA AD01) AD1 GROUP BY AD1.BUCKET_NUM) AD2) AH) ELSE NULL END,  CASE WHEN :B23 = 'Y' THEN (SELECT XMLELEMENT( &quot;parallel_info&quot;,  XMLATTRIBUTES( :B17 AS &quot;qc_instance_id&quot;,  MAX_PX_QCSID AS &quot;qc_session_id&quot;,  MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MAX_PX_DOP AS &quot;dop&quot;,  MAX_PX_DOP_INSTANCES AS &quot;max_dop_instances&quot;,  DIST_INST_COUNT AS &quot;inst_count&quot;,  DIST_PX_GROUP_COUNT AS &quot;serv
er_group_count&quot;,  DIST_PX_SET_COUNT AS &quot;server_set_count&quot;),  CASE WHEN :B70 = 1 THEN PX_SESSIONS ELSE NULL END,	CASE WHEN :B68 = 'Y' THEN DECODE(:B69 ,  1,  PX_INSTANCES,  NULL) ELSE NULL END) FROM (SELECT MAX_PX_QCSID,  MAX_PX_DOP,  MAX_PX_DOP_INSTANCES,  MAX_PX_IS_CROSS_INSTANCE,  SUM_SERVERS_REQUESTED,  SUM_SERVERS_ALLOCATED,  DIST_INST_COUNT,  DIST_PX_GROUP_COUNT,  DIST_PX_SET_COUNT,	(SELECT XMLELEMENT( &quot;sessions&quot;,  XMLATTRIBUTES(MAX(PX_SESSION.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_SESSION.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_SESSION.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_SESSION.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_SESSION.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,  MAX(PX_SESSION.MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_SESSION.MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PX_SESSION.MAX_BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_SESSION.MAX_ELAPSED_TIME) AS &quot;max_elapsed_time&quot;),  XMLAGG(PX_SESSION.PX_SESSION_XML ORDER BY PX_SERVER_GROUP NULLS FIRST,  PX_SERVER_SET,  PX_SERVER#)) FROM (SELECT PX_SERVER_GROUP,  PX_SERVER_SET,  PX_SERVER#,	MAX(PI.MAX_ELAPSED_TIME) MAX_ELAPSED_TIME,  MAX(PI.MAX_IO_REQS) MAX_IO_REQS,  MAX(PI.MAX_IO_BYTES) MAX_IO_BYTES,  MAX(PI.MAX_BUFFER_GETS) MAX_BUFFER_GETS,  SUM(PI.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,  SUM(PI.WAIT_COUNT) WAIT_COUNT,  SUM(PI.CPU_COUNT) CPU_COUNT,	SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  XMLELEMENT( &quot;session&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;,  PROCESS_NAME AS &quot;process_name&quot;,  SID AS &quot;session_id&quot;,  SESSION_SERIAL# AS &quot;session_serial&quot;,  PX_SERVER_GROUP AS &quot;server_group&quot;,  PX_SERVER_SET AS &quot;server_set&quot;,  PX_SERVER# AS &quot;server_num&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MAX(ELAPSED_TIME)),	NULL),	NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MAX(APPLICATION_WAIT_TIME)),  NULL),  NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),	MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),  XMLELEMENT(
&quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),  MAX(OTHER_WAIT_TIME)),  NULL),  NVL2(MAX(FETCHES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MAX(READ_REQS)),  NULL),  NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MAX(WRITE_BYTES)),	NULL),	NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_ELIG_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),	MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),	ROUND(MAX(IO_BYTES) / DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,	ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES), 0),  NVL(MAX(IO_ELIG_BYTES), 0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN SUM(PI.ACTIVITY_COUNT) &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),  :B12 ) AS &quot;first_sample_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;last_sample_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;imq_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.OTHER_SQL_COUNT)AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),	XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,  PI.EVENT_NAME)) ELSE NULL END,  CASE WHEN :B60 = 1 AND PI.HAS_OTHER_XML = 'Y' THEN (SELECT XMLTYPE(OTHER_XML) FROM GV$ALL_SQL_MONITOR MON WHERE MON.INST_ID = PI.INST_ID AND MON.KEY = PI.KEY AND MON.SID = PI.SID AND MON.SQL_ID = :B9 AND MON.SQL_EXEC_START = :B8 AND MON.SQL_EXEC_ID = :B7 AND ROWNUM = 1) ELSE NULL END) PX_SESSION_XML FROM (SELECT MO.HAS_OTHER_XML,  MO.KEY,  MO.INST_ID,  DECODE(MO.PROCESS_NAME,  'ora',  'PX Coordinator',	MO.PROCESS_NAME) PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  MAX(MO.IO_REQS) MAX_IO_REQS,  MAX(MO.IO_BYTES) MAX_IO_BYTES,  MAX(MO.BUFFER_GETS) MAX_BUFFER_GETS,  MAX(MO.ELAPSED_TIME) MAX_ELAPSED_TIME,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.ACTIVITY_COUNT)) ACTIVITY_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.IMQ_COUNT)) IMQ_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.WAIT_COUNT)) WAIT_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,  NULL,  ASH0.CPU_COUNT)) CPU_COUNT,  SUM(DECODE(ASH0.ACTIVITY_TYPE,  NULL,	NULL,  ASH0.OTHER_SQL_COUNT)) OTHER_SQL_COUNT,	MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END,	MAX(DECODE(MO.ELAPSED_TIME,  0,  NULL,	MO.ELAPSED_TIME)) ELAPSED_TIME,  MAX(DECODE(MO.QUEUING_TIME,  0,  NULL,  MO.QUEUING_TIME)) QUEUING_TIME,  MAX(DECODE(MO.CPU_TIME,  0,  NULL,  CPU_TIME)) CPU_TIME,  MAX(DECODE(MO.FETCHES,  0,	NULL,  FETCHES)) FETCHES,  MAX(DECODE(MO.BUFFER_GETS,  0,  NULL,  MO.BUFFER_GETS)) BUFFER_GETS,  MAX(DECODE(MO.IO_INTER_BYTES,	0,  NULL,  MO.IO_INTER_BYTES)) IO_INTER_BYTES,	MAX(DECODE(MO.READ_REQS,  0,  NULL,  MO.READ_REQS)) READ_REQS,	MAX(DECODE(MO.READ_BYTES,  0,  NULL,  MO.READ_BYTES)) READ_BYTES,  MAX(DECODE(MO.WRITE_REQS,  0,  NULL,  MO.WRITE_REQS)) WRITE_REQS,  MAX(DECODE(MO.WRITE_BYTES,  0,  NULL,  MO.WRITE_BYTES)) WRITE_BYTES,  MAX(DECODE(MO.IO_BYTES,  0,  NULL,	MO.IO_BYTES)) IO_BYTES,  MAX(DECODE(MO.IO_UNC_BYTES,  0,  NULL,  MO.IO_UNC_BYTES)) IO_UNC_BYTES,  MAX(DECODE(MO.IO_ELIG_BYTES,	0,  NULL,  MO.IO_ELIG_BYTES)) IO_ELIG_BYTES,  MAX(DECODE(MO.IO_RET_BYTES,  0,  NULL,  MO.IO_RET_BYTES)) IO_RET_BYTES,  MAX(DECODE(MO.APPLICATION_WAIT_TIME,  0,  NULL,	MO.APPLICATION_WAIT_TIME)) APPLICATION_WAIT_TIME,  MAX(DECODE(MO.CONCURRENCY_WAIT_TIME,  0,  NULL,  MO.CONCURRENCY_WAIT_TIME)) CONCURRENCY_WAIT_TIME,  MAX(DECODE(MO.CLUSTER_WAIT_TIME,  0,  NULL,  MO.CLUSTER_WAIT_TIME)) CLUSTER_WAIT_TIME,  MAX(DECODE(MO.USER_IO_WAIT_TIME,  0,  NULL,  MO.USER_IO_WAIT_TIME)) USER_IO_WAIT_TIME,  MAX(DECODE(PLSQL_EXEC_TIME,  0,	NULL,  PLSQL_EXEC_TIME)) PLSQL_EXEC_TIME,  MAX(DECODE(MO.JAVA_EXEC_TIME,  0,  NULL,  MO.JAVA_EXEC_TIME)) JAVA_EXEC_TIME,  MAX(DECODE(MO.OTHER_WAIT_TIME,  0,  NULL,  MO.OTHER_WAIT_TIME)) OTHER_WAIT_TIME FROM MONITOR_DATA MO,  (SELECT ASH1.INST_ID,	ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,  ASH1.EVENT_NAME,  SUM(ASH1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH1.IMQ_COUNT) IMQ_COUNT,  SUM(ASH1.WAIT_COUNT) WAIT_COUNT,  SUM(ASH1.CPU_COUNT) CPU_COUNT,  SUM(ASH1.OTHER_SQL_COUNT)OTHER_SQL_COUNT,	MIN(ASH1.ACTIVITY_START) ACTIVITY_START,  MAX(ASH1.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH1 GROUP BY ASH1.INST_ID,  ASH1.SESSION_ID,  ASH1.ACTIVITY_TYPE,	ASH1.EVENT_NAME) ASH0 WHERE MO.INST_ID = ASH0.INST_ID(+) AND MO.SID = ASH0.SESSION_ID(+) AND (:B70 = 1 OR :B69 = 1) GROUP BY MO.INST_ID,  MO.KEY,  MO.HAS_OTHER_XML,  MO.PROCESS_NAME,	MO.SID,  MO.SESSION_SERIAL#,  MO.PX_SERVER_GROUP,  MO.PX_SERVER_SET,  MO.PX_SERVER#,  ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) PI WHERE (:B70 = 1) GROUP BY PI.INST_ID,  PI.KEY,  PI.HAS_OTHER_XML,  PI.SID,  PI.PROCESS_NAME,  PI.SESSION_SERIAL#,  PI.PX_SERVER_GROUP,  PI.PX_SERVER_SET,  PI.PX_SERVER#) PX_SESSION) PX_SESSIONS,  (SELECT XMLELEMENT( &quot;instances&quot;,  XMLATTRIBUTES( MAX(PX_INSTANCE.ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PX_INSTANCE.IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PX_INSTANCE.CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PX_INSTANCE.WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PX_INSTANCE.OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;,	MAX(PX_INSTANCE.ELAPSED_TIME) AS &quot;max_elapsed_time&quot;,	MAX(PX_INSTANCE.BUFFER_GETS) AS &quot;max_buffer_gets&quot;,  MAX(PX_INSTANCE.IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PX_INSTANCE.IO_BYTES) AS &quot;max_io_bytes&quot;),  XMLAGG(PX_INSTANCE.PX_INSTANCES_XML ORDER BY INST_ID)) FROM (SELECT PI.INST_ID,  MAX(PI.ELAPSED_TIME) ELAPSED_TIME,  MAX(PI.IO_REQS) IO_REQS,  MAX(PI.IO_BYTES) IO_BYTES,	MAX(PI.BUFFER_GETS) BUFFER_GETS,  SUM(PI
.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(PI.IMQ_COUNT) IMQ_COUNT,	SUM(PI.WAIT_COUNT) WAIT_COUNT,	SUM(PI.CPU_COUNT) CPU_COUNT,  SUM(PI.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	XMLELEMENT( &quot;instance&quot;,  XMLATTRIBUTES( INST_ID AS &quot;inst_id&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES( 'monitor' AS &quot;type&quot;),  NVL2(MAX(ELAPSED_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),	MAX(ELAPSED_TIME)),  NULL),  NVL2(MAX(QUEUING_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MAX(QUEUING_TIME)),  NULL),  NVL2(MAX(CPU_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MAX(CPU_TIME)),  NULL),  NVL2(MAX(USER_IO_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MAX(USER_IO_WAIT_TIME)),  NULL),  NVL2(MAX(APPLICATION_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name
&quot;),  MAX(APPLICATION_WAIT_TIME)),	NULL),	NVL2(MAX(CONCURRENCY_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MAX(CONCURRENCY_WAIT_TIME)),  NULL),  NVL2(MAX(CLUSTER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MAX(CLUSTER_WAIT_TIME)),  NULL),  NVL2(MAX(PLSQL_EXEC_TIME),	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MAX(PLSQL_EXEC_TIME)),  NULL),  NVL2(MAX(JAVA_EXEC_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MAX(JAVA_EXEC_TIME)),  NULL),  NVL2(MAX(OTHER_WAIT_TIME),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'other_wait_time' AS &quot;name&quot;),	MAX(OTHER_WAIT_TIME)),	NULL),	NVL2(MAX(FETCHES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MAX(FETCHES)),  NULL),  NVL2(MAX(BUFFER_GETS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MAX(BUFFER_GETS)),  NULL),  NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('disk_reads' AS &quot;name&quot;),	MAX(READ_REQS)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('direct_writes' AS &quot;name&quot;),  MAX(WRITE_REQS)),	NULL),	NVL2(MAX(READ_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MAX(READ_REQS)),	NULL),	NVL2(MAX(READ_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),	MAX(READ_BYTES)),  NULL),  NVL2(MAX(WRITE_REQS),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MAX(WRITE_REQS)),  NULL),  NVL2(MAX(WRITE_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),	MAX(WRITE_BYTES)),  NULL),  NVL2(MAX(IO_UNC_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MAX(IO_UNC_BYTES)),  NULL),  NVL2(MAX(IO_ELIG_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MAX(IO_ELIG_BYTES)),  NULL),  NVL2(MAX(IO_RET_BYTES),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MAX(IO_RET_BYTES)),  NULL),  CASE WHEN MAX(IO_INTER_BYTES) IS NULL OR NVL(MAX(IO_BYTES),  0) = 0 OR MAX(IO_INTER_BYTES) = MAX(IO_BYTES) OR NVL(MAX(IO_ELIG_BYTES),	0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MAX(IO_BYTES)/ DECODE(MAX(IO_INTER_BYTES),  0,  1,  MAX(IO_INTER_BYTES)),  2)) END,  CASE WHEN NVL(MAX(IO_ELIG_BYTES),  0) = 0 OR NVL(MAX(IO_BYTES),	0) = 0 OR MAX(IO_UNC_BYTES) = MAX(IO_RET_BYTES) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100* (GREATEST( NVL(MAX(IO_UNC_BYTES),  0),  NVL(MAX(IO_ELIG_BYTES),  0)) - MAX(IO_RET_BYTES)) / MAX(IO_ELIG_BYTES),  2))) END),  CASE WHEN :B33 = 1 AND SUM(PI.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_sampled&quot;,	XMLATTRIBUTES( TO_CHAR(MIN(PI.ACTIVITY_START),	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(MAX(PI.ACTIVITY_END),  :B12 ) AS &quot;end_time&quot;,  ROUND((MAX(PI.ACTIVITY_END) - MIN(PI.ACTIVITY_START)) * 3600 * 24) + 1 AS &quot;duration&quot;,  SUM(PI.ACTIVITY_COUNT) AS &quot;count&quot;,  SUM(PI.IMQ_COUNT) AS &quot;imq_count&quot;,  SUM(PI.WAIT_COUNT) AS &quot;wait_count&quot;,  SUM(PI.CPU_COUNT) AS &quot;cpu_count&quot;,  SUM(PI.OTHER_SQL_COUNT) AS &quot;other_sql_count&quot;,  :B40 AS &quot;cpu_cores&quot;,  :B39 AS &quot;hyperthread&quot;),  XMLAGG( NVL2(ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( PI.ACTIVITY_TYPE AS &quot;class&quot;,  PI.EVENT_NAME AS &quot;event&quot;),  ACTIVITY_COUNT),  NULL) ORDER BY PI.ACTIVITY_TYPE,	PI.EVENT_NAME)) ELSE NULL END) PX_INSTANCES_XML FROM (SELECT MO.INST_ID,  ASH.ACTIVITY_TYPE,  ASH.EVENT_NAME,  ASH.ACTIVITY_COUNT,  ASH.IMQ_COUNT,  ASH.WAIT_COUNT,  ASH.CPU_COUNT,  ASH.OTHER_SQL_COUNT,  ASH.ACTIVITY_START,	ASH.ACTIVITY_END,  MO.ELAPSED_TIME,  MO.QUEUING_TIME,  MO.CPU_TIME,  MO.APPLICATION_WAIT_TIME,	MO.CONCURRENCY_WAIT_TIME,  MO.CLUSTER_WAIT_TIME,  MO.USER_IO_WAIT_TIME,  MO.PLSQL_EXEC_TIME,  MO.JAVA_EXEC_TIME,  MO.OTHER_WAIT_TIME,  MO.FETCHES,  MO.BUFFER_GETS,  MO.IO_INTER_BYTES,  MO.IO_BYTES,  MO.READ_REQS,  MO.READ_BYTES,  MO.WRITE_REQS,  MO.WRITE_BYTES,  MO.IO_REQS,  MO.IO_UNC_BYTES,  MO.IO_ELIG_BYTES,  MO.IO_RET_BYTES FROM (SELECT MO0.INST_ID,  SUM(MO0.ELAPSED_TIME) ELAPSED_TIME,  SUM(MO0.QUEUING_TIME) QUEUING_TIME,  SUM(MO0.CPU_TIME) CPU_TIME,  SUM(MO0.FETCHES) FETCHES,  SUM(MO0.BUFFER_GETS) BUFFER_GETS,  SUM(MO0.IO_INTER_BYTES) IO_INTER_BYTES,  SUM(MO0.IO_BYTES) IO_BYTES,  SUM(MO0.READ_REQS) READ_REQS,  SUM(MO0.READ_BYTES) READ_BYTES,  SUM(MO0.WRITE_REQS) WRITE_REQS,	SUM(MO0.WRITE_BYTES) WRITE_BYTES,  SUM(MO0.IO_REQS) IO_REQS,  SUM(MO0.IO_UNC_BYTES) IO_UNC_BYTES,  SUM(MO0.IO_ELIG_BYTES) IO_ELIG_BYTES,  SUM(MO0.IO_RET_BYTES) IO_RET_BYTES,  SUM(MO0.APPLICATION_WAIT_TIME) APPLICATION_WAIT_TIME,  SUM(MO0.CONCURRENCY_WAIT_TIME) CONCURRENCY_WAIT_TIME,  SUM(MO0.CLUSTER_WAIT_TIME) CLUSTER_WAIT_TIME,  SUM(MO0.USER_IO_WAIT_TIME) USER_IO_WAIT_TIME,  SUM(MO0.PLSQL_EXEC_TIME) PLSQL_EXEC_TIME,  SUM(MO0.JAVA_EXEC_TIME) JAVA_EXEC_TIME,  SUM(MO0.OTHER_WAIT_TIME) OTHER_WAIT_TIME FROM MONITOR_DATA MO0 GROUP BY MO0.INST_ID) MO,  (SELECT ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME,  SUM(ASH0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(ASH0.IMQ_COUNT) IMQ_COUNT,  SUM(ASH0.WAIT_COUNT) WAIT_COUNT,  SUM(ASH0.CPU_COUNT) CPU_COUNT,  SUM(ASH0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MIN(ASH0.ACTIVITY_START) ACTIVITY_START,  MAX(ASH0.ACTIVITY_END) ACTIVITY_END FROM ASH_DATA ASH0 GROUP BY ASH0.INST_ID,	ASH0.ACTIVITY_TYPE,  ASH0.EVENT_NAME) ASH,  MONITOR_AGG WHERE MO.INST_ID = ASH.INST_ID(+) AND MONITOR_AGG.DIST_INST_COUNT &gt; 0 ) PI GROUP BY PI.INST_ID)PX_INSTANCE) PX_INSTANCES FROM MONITOR_AGG)) ELSE NULL END,  XPLAN_XML,  CASE WHEN :B43 = 1 THEN (SELECT XMLELEMENT( &quot;plan_monitor&quot;,  XMLATTRIBUTES(MAX(PLI.MAX_LINE_ACTIVITY_COUNT) AS &quot;max_activity_count&quot;,  MAX(PLI.OVERALL_MAX_IO_REQS) AS &quot;max_io_reqs&quot;,  MAX(PLI.OVERALL_MAX_IO_BYTES) AS &quot;max_io_bytes&quot;,  MAX(PLI.MAX_LINE_IMQ_COUNT) AS &quot;max_imq_count&quot;,  MAX(PLI.MAX_LINE_CPU_COUNT) AS &quot;max_cpu_count&quot;,  MAX(PLI.MAX_LINE_WAIT_COUNT) AS &quot;max_wait_count&quot;,  MAX(PLI.MAX_LINE_OTHER_SQL_COUNT) AS &quot;max_other_sql_count&quot;),  XMLAGG( XMLELEMENT( &quot;operation&quot;,  XMLATTRIBUTES( PLI.PLAN_LINE_ID AS &quot;id&quot;,  PLI.PARENT_ID AS &quot;parent_id&quot;,  PLI.OPERATION AS &quot;name&quot;,  PLI.OPTIONS AS &quot;options&quot;,	PLI.DEPTH AS &quot;depth&quot;,  PLI.POSITION AS &quot;position&quot;,	PLI.INACTIVE AS &quot;skp&quot;,  PLI.PX_TYPE AS &quot;px_type&quot;),	NVL2(PLI.OBJECT_NAME,  XMLELEMENT( &quot;object&quot;,	XMLATTRIBUTES(PLI.OBJECT_TYPE AS &quot;type&quot;),  XMLFOREST(PLI.OBJECT_OWNER AS &quot;owner&quot;),	XMLFOREST(PLI.OBJECT_NAME AS &quot;name&quot;)),  NULL),  XMLFOREST(PLI.PARTITION_START AS &quot;partition_start&quot;,  PLI.PARTITION_STOP AS &quot;partition_stop&quot;),  CASE WHEN PLI.CARDINALITY IS NULL AND PLI.BYTES IS NULL AND PLI.COST IS NULL AND PLI.TEMP_SPACE IS NULL AND PLI.TIME IS NULL THEN NULL ELSE XMLELEMENT( &quot;optimizer&quot;,  NULL,  NVL2(PLI.CARDINALITY,  XMLFOREST(PLI.CARDINALITY AS &quot;cardinality&quot;),  NULL),  NVL2(PLI.BYTES,  XMLFOREST(PLI.BYTES AS &quot;bytes&quot;),	NULL),	NVL2(PLI.COST,	XMLFOREST(PLI.COST AS &quot;cost&quot;),  NULL),  NVL2(PLI.CPU_COST,  XMLFOREST(PLI.CPU_COST AS &quot;cpu_cost&quot;),	NULL),	NVL2(PLI.IO_COST,  XMLFOREST(PLI.IO_COST AS &quot;io_cost&quot;),  NULL),  NVL2(PLI.TEMP_SPACE,  XMLFOREST(PLI.TEMP_SPACE AS &quot;temp&quot;),  NULL),  NVL2(PLI.TIME,  XMLFOREST(PLI.TIME AS &quot;time&quot;),  NULL)) END,	XMLELEMENT( &quot;stats&quot;,	XMLATTRIBUTES('plan_monitor' AS &quot;type&quot;),  NVL2(PLI.FIR
ST_MOVE_TIME,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_active' AS &quot;name&quot;),  TO_CHAR(FIRST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN PLI.FIRST_MOVE_TIME != PLI.FIRST_CHANGE_TIME THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('first_row' AS &quot;name&quot;),  TO_CHAR(FIRST_CHANGE_TIME,  :B12 )) ELSE NULL END,  NVL2(PLI.LAST_MOVE_TIME,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('last_active' AS &quot;name&quot;),  TO_CHAR(LAST_MOVE_TIME,  :B12 )),  NULL),  CASE WHEN (PLI.FIRST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  ROUND((LAST_MOVE_TIME - FIRST_MOVE_TIME) * 3600 * 24)+1) END,	CASE WHEN (PLI.OVERALL_LAST_MOVE_TIME IS NULL OR PLI.LAST_MOVE_TIME IS NULL) THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('from_most_recent' AS &quot;name&quot;),  ROUND((PLI.OVERALL_LAST_MOVE_TIME - PLI.LAST_MOVE_TIME) * 3600 * 24)) END,  NVL2(PLI.LAST_MOVE_TIME,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'from_sql_exec_start' AS &quot;name&quot;),  ROUND( (FIRST_MOVE_TIME - :B8 ) * 3600*24)),  NULL),  NVL2(PLI.PERCENT_COMPLETE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('percent_complete' AS &quot;name&quot;),  PLI.PERCENT_COMPLETE),  NULL),  NVL2(PLI.TIME_REMAINING,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('time_left' AS &quot;name&quot;),  PLI.TIME_REMAINING),  NULL),  CASE WHEN PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('starts' AS &quot;name&quot;),  PLI.STARTS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_starts' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_STARTS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(MAX_STARTS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_STARTS/10000000000)) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.HAS_EXECUTED = 1 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('dop' AS
&quot;name&quot;),  PLI.DOP) ELSE NULL END,  CASE WHEN NEED_ROWS IS NOT NULL AND PLI.FIRST_MOVE_TIME IS NOT NULL THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cardinality' AS &quot;name&quot;),	PLI.OUTPUT_ROWS) ELSE NULL END,  CASE WHEN PLI.NEED_ROWS IS NOT NULL AND PLI.DOP &gt; 0 AND PLI.MAX_OUTPUT_ROWS IS NOT NULL AND (PLI.FIRST_MOVE_TIME IS NOT NULL) THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_card' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_OUTPUT_ROWS/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_OUTPUT_ROWS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_OUTPUT_ROWS/10000000000)) ELSE NULL END,  CASE WHEN PLI.MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('memory' AS &quot;name&quot;),  PLI.MEM) ELSE NULL END,  CASE WHEN PLI.MAX_MEM &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_memory' AS &quot;name&quot;),	PLI.MAX_MEM) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MIN_MAX_MEM IS NOT NULL AND PLI.MAX_MEM
&gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'min_max_mem' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MIN_MAX_MEM/1000000),  10000),  NULL) AS &quot;iid&quot;,	MOD(MIN_MAX_MEM,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MIN_MAX_MEM/10000000000)) ELSE NULL END,  CASE WHEN PLI.TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('temp' AS &quot;name&quot;),  PLI.TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('max_temp' AS &quot;name&quot;),  PLI.MAX_TEMP) ELSE NULL END,  CASE WHEN PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('spill_count' AS &quot;name&quot;),  PLI.SPILL_COUNT) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_MAX_TEMP IS NOT NULL AND PLI.MAX_TEMP &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_max_temp' AS &quot;name&quot;,  DECODE(:B68 ,	'Y',  MOD(TRUNC(MAX_MAX_TEMP/1000000),	10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_MAX_TEMP,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_MAX_TEMP/10000000000)) ELSE NULL END,  CASE WHEN PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  PLI.READ_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_REQS IS NOT NULL AND PLI.READ_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_read_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',	MOD(TRUNC(PLI.MAX_READ_REQS/1000000),  10000),	NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_REQS/10000000000)) ELSE NULL END,	CASE WHEN PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  PLI.READ_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_READ_BYTES IS NOT NULL AND PLI.READ_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES( 'max_read_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_READ_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_READ_BYTES,	1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_READ_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  PLI.WRITE_REQS) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_REQS IS NOT NULL AND PLI.WRITE_REQS &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_reqs' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_REQS/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_REQS,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_REQS/10000000000)) ELSE NULL END,  CASE WHEN PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  PLI.WRITE_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_WRITE_BYTES IS NOT NULL AND PLI.WRITE_BYTES &gt; 0 THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_write_bytes' AS &quot;name&quot;,	DECODE(:B68 ,  'Y',  MOD(TRUNC(PLI.MAX_WRITE_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(PLI.MAX_WRITE_BYTES,  1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_WRITE_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('io_inter_bytes' AS &quot;name&quot;),  PLI.IO_INTER_BYTES) ELSE NULL END,  CASE WHEN PLI.DOP &gt; 0 AND PLI.MAX_IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( 'max_io_inter_bytes' AS &quot;name&quot;,  DECODE(:B68 ,  'Y',  MOD(TRUNC(MAX_IO_INTER_BYTES/1000000),  10000),  NULL) AS &quot;iid&quot;,  MOD(MAX_IO_INTER_BYTES, 1000000) AS &quot;sid&quot;),  TRUNC(PLI.MAX_IO_INTER_BYTES/10000000000)) ELSE NULL END,  CASE WHEN PLI.IO_INTER_BYTES IS NOT NULL AND PLI.IO_BYTES &gt; 0 AND PLI.IO_BYTES != PLI.IO_INTER_BYTES THEN XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(PLI.IO_BYTES / DECODE(PLI.IO_INTER_BYTES,  0,  1,  PLI.IO_INTER_BYTES),  2)) ELSE NULL END),	NVL2(STAT_GID,	XMLELEMENT( &quot;rwsstats&quot;,  XMLATTRIBUTES( PLI.STAT_GID AS &quot;group_id&quot;),  DECODE(GID_ROWNUM,  1,  (SELECT XMLELEMENT( &quot;metadata&quot;,  NULL,  XMLAGG( XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES( ROWNUM AS &quot;id&quot;,  NAME AS &quot;name&quot;,	DESCRIPTION AS &quot;desc&quot;,  TYPE AS &quot;type&quot;,  DECODE(FLAGS,  0,	NULL,  FLAGS) AS &quot;flags&quot;),  NULL) ORDER BY ID)) FROM V$SQL_MONITOR_STATNAME WHERE GROUP_ID = PLI.STAT_GID),  NULL),  NVL2(STAT1_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(1 AS &quot;id&quot;),  STAT1_VALUE),  NULL),  NVL2(STAT2_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(2 AS &quot;id&quot;),  STAT2_VALUE),  NULL),  NVL2(STAT3_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(3 AS &quot;id&quot;),  STAT3_VALUE),  NULL),  NVL2(STAT4_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(4 AS &quot;id&quot;),	STAT4_VALUE),  NULL),  NVL2(STAT5_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(5 AS &quot;id&quot;),  STAT5_VALUE),  NULL),  NVL2(STAT6_VALUE,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(6 AS &quot;id&quot;),  STAT6_VALUE),  NULL),  NVL2(STAT7_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(7 AS &quot;id&quot;),  STAT7_VALUE),  NULL),  NVL2(STAT8_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(8 AS &quot;id&quot;),	STAT8_VALUE),  NULL),  NVL2(STAT9_VALUE,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES(9 AS &quot;id&quot;),  STAT9_VALUE),  NULL),  NVL2(STAT10_VALUE,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES(10 AS &quot;id&quot;),  STAT10_VALUE),  NULL)),  NULL),  CASE WHEN PLI.LINE_ACTIVITY_COUNT &gt; 0 AND :B33 = 1 THEN XMLELEMENT( &quot;activity_sampled&quot;,  XMLATTRIBUTES( TO_CHAR(PLI.LINE_ACTIVITY_START,  :B12 ) AS &quot;start_time&quot;,  TO_CHAR(PLI.LINE_ACTIVITY_END,  :B12 ) AS &quot;end_time&quot;,  ROUND((PLI.LINE_ACTIVITY_END - PLI.LINE_ACTIVITY_START) * 3600*24) + 1 AS &quot;duration&quot;,  PLI.LINE_ACTIVITY_COUNT AS &quot;count&quot;,  PLI.LINE_IMQ_COUNT AS &quot;imq_count&quot;,	PLI.LINE_WAIT_COUNT AS &quot;wait_count&quot;,	PLI.LINE_CPU_COUNT AS &quot;cpu_count&quot;,  PLI.LINE_OTHER_SQL_COUNT AS &quot;other_sql_count&quot;,	:B40 AS &quot;cpu_cores&quot;,	:B39 AS &quot;hyperthread&quot;),  PLI.ACTIVITY_TOTAL,	PLI.PLAN_ACTIVITY_HISTO) ELSE NULL END) ORDER BY PLI.PLAN_LINE_ID) ) FROM (SELECT AT.MAX_LINE_ACTIVITY_COUNT,  PM.OVERALL_MAX_IO_REQS,	PM.OVERALL_MAX_IO_BYTES,  AT.MAX_LINE_IMQ_COUNT,  AT.MAX_LINE_CPU_COUNT,  AT.MAX_LINE_WAIT_COUNT,  AT.LINE_OTHER_SQL_COUNT,  AT.MAX_LINE_OTHER_SQL_COUNT,  PM.PLAN_LINE_ID,  PM.PARENT_ID,  PM.OPERATION,  PM.OPTIONS,	PM.DEPTH,  PM.POSITION,  PM.INACTIVE,  CASE WHEN PM.OPERATION = 'PX COORDINATOR' AND :B23 = 'Y' AND (PM.PX_SERVER_SET IS NOT NULL OR AH.PX_SERVER_SET IS NOT NULL) THEN 'QC' WHEN PM.PX_SERVER_SET IS NOT NULL THEN TO_CHAR(PM.PX_SERVER_SET) WHEN AH.PX_SERVER_SET IS NOT NULL THEN TO_CHAR(AH.PX_SERVER_SET) WHEN (:B23 = 'N' OR (PM.LAST_CHANGE_TIME IS NULL AND AT.LINE_ACTIVITY_END IS NULL)) THEN NULL ELSE 'QC' END PX_TYPE,  PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START,  PM.LAST_CHANGE_TIME,  PM.OVERALL_LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END,	AT.OVERALL_LINE_ACTIVITY_END,  LEAST(NVL(AT.LINE_ACTIVITY_START,  PM.FIRST_CHANGE_TIME),  NVL(PM.FIRST_CHANGE_TIME,  AT.LINE_ACTIVITY_START)) FIRST_MOVE_TIME,	GREATEST(NVL(AT.LINE_ACTIVITY_END,  PM.LAST_CHANGE_TIME),  NVL(PM.LAST_CHANGE_TIME,  AT.LINE_ACTIVITY_END)) LAST_MOVE_TIME,  GREATEST(NVL(AT.OVERALL_LINE_ACTIVITY_END,  PM.OVERALL_LAST_CHANGE_TIME),	NVL(PM.OVERALL_LAST_CHANGE_TIME,  AT.OVERALL_LINE_ACTIVITY_END)) OVERALL_LAST_MOVE_TIME,  CASE WHEN PM.STARTS IS NOT NULL AND PM.STARTS &gt; 0 THEN 1 ELSE 0 END HAS_EXECUTED,	PM.OBJECT_NAME,  PM.OBJECT_TYPE,  PM.OBJECT_OWNER,  PM.PARTITION_START,  PM.PARTITION_STOP,  PM.CARDINAL
ITY,  PM.BYTES,  PM.COST,  PM.TEMP_SPACE,  PM.TIME,  PM.CPU_COST,  PM.IO_COST,	LO.PERCENT_COMPLETE,  LO.TIME_REMAINING,  PM.STARTS,  PM.DOP,  PM.MAX_STARTS,  PM.OUTPUT_ROWS,	PM.NEED_ROWS,  PM.MAX_OUTPUT_ROWS,  PM.MEM,  PM.MAX_MEM,  PM.MIN_MAX_MEM,  PM.TEMP,  PM.MAX_TEMP,  PM.SPILL_COUNT,  PM.MAX_MAX_TEMP,  PM.READ_REQS,  PM.MAX_READ_REQS,	PM.READ_BYTES,	PM.MAX_READ_BYTES,  PM.WRITE_REQS,  PM.MAX_WRITE_REQS,	PM.WRITE_BYTES,  PM.MAX_WRITE_BYTES,  PM.IO_INTER_BYTES,  PM.IO_BYTES,	PM.MAX_IO_INTER_BYTES,	AT.LINE_ACTIVITY_COUNT,  AT.LINE_IMQ_COUNT,  AT.LINE_WAIT_COUNT,  AT.LINE_CPU_COUNT,  AT.ACTIVITY_TOTAL,  AH.PLAN_ACTIVITY_HISTO,  PM.STAT_GID,  PM.GID_ROWNUM,  PM.STAT1_VALUE,  PM.STAT2_VALUE,  PM.STAT3_VALUE,  PM.STAT4_VALUE,  PM.STAT5_VALUE,  PM.STAT6_VALUE,  PM.STAT7_VALUE,	PM.STAT8_VALUE,  PM.STAT9_VALUE,  PM.STAT10_VALUE FROM (SELECT AT0.*,  MAX(LINE_ACTIVITY_END) OVER() OVERALL_LINE_ACTIVITY_END,  MAX(LINE_ACTIVITY_COUNT) OVER() MAX_LINE_ACTIVITY_COUNT,  MAX(LINE_IMQ_COUNT) OVER() MAX_LINE_IMQ_COUNT,  MAX(LINE_CPU_COUNT) OVER() MAX_LINE_CPU_COUNT,  MAX(LINE_WAIT_COUNT) OVER() MAX_LINE_WAIT_COUNT,  MAX(LINE_OTHER_SQL_COUNT) OVER() MAX_LINE_OTHER_SQL_COUNT FROM (SELECT AD1.PLAN_LINE_ID,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) LINE_ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) LINE_IMQ_COUNT,  SUM(AD1.WAIT_COUNT) LINE_WAIT_COUNT,  SUM(AD1.OTHER_SQL_COUNT) LINE_OTHER_SQL_COUNT,  SUM(AD1.CPU_COUNT) LINE_CPU_COUNT,  SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(XMLELEMENT( &quot;activity&quot;,	XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,	AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT) ORDER BY AD1.ACTIVITY_TYPE,	AD1.EVENT_NAME) ACTIVITY_TOTAL FROM (SELECT AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  MAX(AD0.DFO_MOST_ACTIVE_IID) DFO_MOST_ACTIVE_IID,  MAX(AD0.DFO_MOST_ACTIVE_SID) DFO_MOST_ACTIVE_SID,  SUM(AD0.DFO_MOST_ACTIVE_COUNT) DFO_MOST_ACTIVE_COUNT FROM ASH_DATA AD0 WHERE AD0.PLAN_LINE_ID IS NOT NULL GROUP BY AD0.PLAN_LINE_ID,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID) AT0) AT,	(SELECT AD2.PLAN_LINE_ID,  MIN(AD2.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD2.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD2.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  SUM(AD2.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD2.IMQ_COUNT) IMQ_COUNT,  SUM(AD2.WAIT_COUNT) WAIT_COUNT,  SUM(AD2.CPU_COUNT) CPU_COUNT,  SUM(AD2.OTHER_SQL_COUNT) OTHER_SQL_COUNT,  CASE WHEN :B29 = 1 AND SUM(AD2.ACTIVITY_COUNT) &gt; 0 THEN XMLELEMENT( &quot;activity_histogram&quot;,  XMLATTRIBUTES( :B26 AS &quot;bucket_interval&quot;,  :B27 AS &quot;bucket_count&quot;,  TO_CHAR( :B20 ,	:B12 ) AS &quot;start_time&quot;,  TO_CHAR(:B22 ,  :B12 ) AS &quot;end_time&quot;,  ROUND((:B22 -:B20 ) *3600*24) + 1 AS &quot;duration&quot;),  XMLAGG(XMLELEMENT( &quot;bucket&quot;,  XMLATTRIBUTES( AD2.BUCKET_NUM AS &quot;number&quot;),	AD2.ACTIVITY_BUCKET) ORDER BY AD2.BUCKET_NUM)) ELSE NULL END PLAN_ACTIVITY_HISTO FROM (SELECT AD1.PLAN_LINE_ID,  AD1.BUCKET_NUM,  MIN(AD1.PX_SERVER_SET) PX_SERVER_SET,  MIN(AD1.LINE_ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD1.LINE_ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD1.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD1.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD1.ACTIVITY_COUNT) ACTIVITY_COUNT,  SUM(AD1.IMQ_COUNT) IMQ_COUNT,  SUM(AD1.WAIT_COUNT) WAIT_COUNT,  SUM(AD1.CPU_COUNT) CPU_COUNT,  SUM(AD1.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUBSTR(MAX(LPAD(AD1.ACTIVITY_COUNT, 10)|| AD1.ACTIVITY_TYPE),  11) MOST_ACTIVE,  XMLAGG(NVL2(AD1.ACTIVITY_TYPE,  XMLELEMENT( &quot;activity&quot;,  XMLATTRIBUTES( AD1.ACTIVITY_TYPE AS &quot;class&quot;,  AD1.EVENT_NAME AS &quot;event&quot;),  AD1.ACTIVITY_COUNT),  NULL) ORDER BY AD1.ACTIVITY_TYPE,  AD1.EVENT_NAME) ACTIVITY_BUCKET FROM (SELECT AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM BUCKET_NUM,  AD0.ACTIVITY_TYPE,  AD0.EVENT_NAME,  MIN(NVL2(AD0.ACTIVITY_START,  AD0.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  MIN(AD0.ACTIVITY_START) LINE_ACTIVITY_START,  MAX(AD0.ACTIVITY_END) LINE_ACTIVITY_END,  MIN(AD0.BUCKET_ACTIVITY_START) BUCKET_ACTIVITY_START,  MAX(AD0.BUCKET_ACTIVITY_END) BUCKET_ACTIVITY_END,  SUM(AD0.IMQ_COUNT) IMQ_COUNT,  SUM(AD0.CPU_COUNT) CPU_COUNT,  SUM(AD0.WAIT_COUNT) WAIT_COUNT,  SUM(AD0.OTHER_SQL_COUNT) OTHER_SQL_COUNT,	SUM(AD0.ACTIVITY_COUNT) ACTIVITY_COUNT FROM ASH_DATA AD0 GROUP BY AD0.PLAN_LINE_ID,  AD0.PLAN_ACTIVITY_BUCKET_NUM,  AD0.ACTIVITY_TYPE,	AD0.EVENT_NAME) AD1 GROUP BY AD1.PLAN_LINE_ID,	AD1.BUCKET_NUM) AD2 GROUP BY AD2.PLAN_LINE_ID) AH,  (SELECT LO.SQL_PLAN_LINE_ID PLAN_LINE_ID,  DECODE(SUM(LO.TOTALWORK),  0,  NULL,  ROUND(SUM(LO.SOFAR)*100/SUM(LO.TOTALWORK))) PERCENT_COMPLETE,  MAX(LO.TIME_REMAINING) TIME_REMAINING FROM GV$SESSION_LONGOPS LO,  MONITOR_DATA MO WHERE (:B49 = 'Y' OR :B71 = 'DONE (ERROR)') AND LO.SQL_ID = :B9 AND LO.SQL_EXEC_START = :B8 AND LO.SQL_EXEC_ID = :B7 AND LO.INST_ID = MO.INST_ID AND LO.SID = MO.SID GROUP BY LO.SQL_PLAN_LINE_ID) LO,  (SELECT PM0.*,  CASE WHEN PM0.STARTS IS NULL OR PM0.STARTS = 0 OR PM0.OUTPUT_ROWS IS NULL THEN NULL ELSE 1 END NEED_ROWS,  ROW_NUMBER() OVER(PARTITION BY PM0.STAT_GID ORDER BY PM0.PLAN_LINE_ID ) GID_ROWNUM,  MAX(LAST_CHANGE_TIME) OVER() OVERALL_LAST_CHANGE_TIME,  MAX(MAX_IO_REQS) OVER() OVERALL_MAX_IO_REQS,  MAX(MAX_IO_BYTES) OVER() OVERALL_MAX_IO_BYTES FROM (SELECT /*+ leading(mo) use_hash(plm) */ PLM.PLAN_LINE_ID PLAN_LINE_ID,  PLM.PLAN_OPERATION OPERATION,	PLM.PLAN_OPTIONS OPTIONS,  MAX(PLM.PLAN_PARENT_ID) PARENT_ID,  MAX(PLM.PLAN_DEPTH) DEPTH,  MAX(PLM.PLAN_POSITION) POSITION,  MAX(PLM.PLAN_OPERATION_INACTIVE) INACTIVE,  MAX(PLM.PLAN_OBJECT_OWNER) OBJECT_OWNER,  MAX(PLM.PLAN_OBJECT_NAME) OBJECT_NAME,  MAX(PLM.PLAN_OBJECT_TYPE) OBJECT_TYPE,  MAX(PLM.PLAN_COST) COST,  MAX(PLM.PLAN_CARDINALITY) CARDINALITY,  MAX(PLM.PLAN_BYTES) BYTES,  MAX(PLM.PLAN_CPU_COST) CPU_COST,  MAX(PLM.PLAN_IO_COST) IO_COST,  MAX(PLM.PLAN_TEMP_SPACE) TEMP_SPACE,  MAX(PLM.PLAN_TIME) TIME,  MAX(PLM.PLAN_PARTITION_START) PARTITION_START,  MAX(PLM.PLAN_PARTITION_STOP) PARTITION_STOP,  MIN(PLM.FIRST_CHANGE_TIME) FIRST_CHANGE_TIME,	MAX(PLM.LAST_CHANGE_TIME) LAST_CHANGE_TIME,  MIN(PLM.LAST_CHANGE_TIME) MIN_LAST_CHANGE_TIME,  MIN(NVL2(PLM.FIRST_CHANGE_TIME,  MO.PX_SERVER_SET,  NULL)) PX_SERVER_SET,  COUNT(CASE WHEN PLM.PAR IS NOT NULL AND PLM.STARTS IS NOT NULL AND PLM.STARTS &gt; 0 AND PLM.PLAN_LINE_ID != 0 AND PLM.PLAN_OPERATION != 'PX COORDINATOR' THEN 1 ELSE NULL END) DOP,  SUM(PLM.STARTS) STARTS,	MAX(NVL2(PAR,  PLM.STARTS * 10000000000 + PLM.ES,  NULL)) MAX_STARTS,  SUM(PLM.OUTPUT_ROWS) OUTPUT_ROWS,  MAX(NVL2(PAR,  PLM.OUTPUT_ROWS * 10000000000 +PLM.ES,  NULL)) MAX_OUTPUT_ROWS,  SUM(PLM.WORKAREA_MEM) MEM,  SUM(PLM.WORKAREA_MAX_MEM) MAX_MEM,  MIN(NVL2(PAR,  PLM.WORKAREA_MAX_MEM * 10000000000 + PLM.ES,  NULL)) MIN_MAX_MEM,  SUM(PLM.WORKAREA_TEMPSEG) TEMP,  SUM(PLM.WORKAREA_MAX_TEMPSEG) MAX_TEMP,  MAX(NVL2(PAR,  PLM.WORKAREA_MAX_TEMPSEG * 10000000000 + PLM.ES,  NULL)) MAX_MAX_TEMP,  COUNT(PLM.WORKAREA_MAX_TEMPSEG) SPILL_COUNT,  SUM(PLM.PHYSICAL_READ_REQUESTS) READ_REQS,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_READ_REQS,  SUM(PLM.PHYSICAL_READ_BYTES) READ_BYTES,  MAX(NVL2(PAR,  PLM.PHYSICAL_READ_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_READ_BYTES,  SUM(PLM.PHYSICAL_WRITE_REQUESTS) WRITE_REQS,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_REQUESTS * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_REQS,  SUM(PLM.PHYSICAL_WRITE_BYTES) WRITE_BYTES,  MAX(NVL2(PAR,	PLM.PHYSICAL_WRITE_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_WRITE_BYTES,  NVL(SUM(PLM.PHYSICAL_READ_BYTES),  0) + NVL(SUM(PLM.PHYSICAL_WRITE_BYTES),  0) IO_BYTES,  SUM(NVL(PLM.PHYSICA
L_READ_REQUESTS,  0) + NVL(PLM.PHYSICAL_WRITE_REQUESTS,  0)) MAX_IO_REQS,  SUM(NVL(PLM.PHYSICAL_READ_BYTES,  0) + NVL(PLM.PHYSICAL_WRITE_BYTES,  0)) MAX_IO_BYTES,  SUM(PLM.IO_INTERCONNECT_BYTES) IO_INTER_BYTES,  MAX(NVL2(PAR,  PLM.IO_INTERCONNECT_BYTES * 10000000000 + PLM.ES,  NULL)) MAX_IO_INTER_BYTES,  MAX(OTHERSTAT_GROUP_ID) STAT_GID,  NVL(DECODE(MAX(OTHERSTAT_1_TYPE),	3,  MAX(OTHERSTAT_1_VALUE),  4,  MAX(OTHERSTAT_1_VALUE),  6,  MIN(OTHERSTAT_1_VALUE),  7,  MIN(OTHERSTAT_1_VALUE),  NULL),  SUM(DECODE(OTHERSTAT_1_TYPE,  1,  OTHERSTAT_1_VALUE,  2,  OTHERSTAT_1_VALUE,  NULL))) STAT1_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_2_TYPE),	3,  MAX(OTHERSTAT_2_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),	4,  MAX(RMAX1 + OTHERSTAT_2_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_2_VALUE),  NULL),  6,  MIN(OTHERSTAT_2_VALUE),  NULL)),	10000000000000000),  SUM(DECODE(OTHERSTAT_2_TYPE,  1,  OTHERSTAT_2_VALUE,  2,  OTHERSTAT_2_VALUE,  NULL))) STAT2_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_3_TYPE),  3,  MAX(OTHERSTAT_3_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_3_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_3_VALUE),  NULL),  6,  MIN(OTHERSTAT_3_VALUE),	NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_3_TYPE,  1,	OTHERSTAT_3_VALUE,  2,	OTHERSTAT_3_VALUE,  NULL))) STAT3_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_4_TYPE),  3,  MAX(OTHERSTAT_4_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_4_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_4_VALUE),  NULL),  6,	MIN(OTHERSTAT_4_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_4_TYPE,  1,  OTHERSTAT_4_VALUE,  2,  OTHERSTAT_4_VALUE,  NULL))) STAT4_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_5_TYPE),  3,  MAX(OTHERSTAT_5_VALUE),	5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_5_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_5_VALUE),  NULL),  6,  MIN(OTHERSTAT_5_VALUE),  NULL)),  10000000000000000),	SUM(DECODE(OTHERSTAT_5_TYPE,  1,  OTHERSTAT_5_VALUE,  2,  OTHERSTAT_5_VALUE,  NULL))) STAT5_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_6_TYPE),  3,	MAX(OTHERSTAT_6_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,	MAX(RMAX1 + OTHERSTAT_6_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_6_VALUE),  NULL),  6,  MIN(OTHERSTAT_6_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_6_TYPE,  1,  OTHERSTAT_6_VALUE,  2,  OTHERSTAT_6_VALUE,  NULL))) STAT6_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_7_TYPE),  3,  MAX(OTHERSTAT_7_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_7_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_7_VALUE),  NULL),  6,  MIN(OTHERSTAT_7_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_7_TYPE,	1,  OTHERSTAT_7_VALUE,	2,  OTHERSTAT_7_VALUE,	NULL))) STAT7_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_8_TYPE),  3,  MAX(OTHERSTAT_8_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_8_VALUE),  7,  MIN(RMAX1 + OTHERSTAT_8_VALUE),	NULL),	6,  MIN(OTHERSTAT_8_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_8_TYPE,  1,  OTHERSTAT_8_VALUE,  2,  OTHERSTAT_8_VALUE,  NULL))) STAT8_VALUE,  NVL(MOD((DECODE(MAX(OTHERSTAT_9_TYPE),  3,  MAX(OTHERSTAT_9_VALUE),  5,	DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_9_VALUE),  7,	MIN(RMAX1 + OTHERSTAT_9_VALUE),  NULL),  6,  MIN(OTHERSTAT_9_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_9_TYPE,  1,  OTHERSTAT_9_VALUE,  2,  OTHERSTAT_9_VALUE,  NULL))) STAT9_VALUE,	NVL(MOD((DECODE(MAX(OTHERSTAT_10_TYPE),  3,  MAX(OTHERSTAT_10_VALUE),  5,  DECODE(MAX(OTHERSTAT_1_TYPE),  4,  MAX(RMAX1 + OTHERSTAT_10_VALUE),	7,  MIN(RMAX1 + OTHERSTAT_10_VALUE),  NULL),  6,  MIN(OTHERSTAT_10_VALUE),  NULL)),  10000000000000000),  SUM(DECODE(OTHERSTAT_10_TYPE,  1,  OTHERSTAT_10_VALUE,  2,  OTHERSTAT_10_VALUE,  NULL))) STAT10_VALUE FROM (SELECT A.*,  OTHERSTAT_1_VALUE * 10000000000000000 RMAX1,  A.INST_ID * 1000000 + A.SID ES,  DECODE(A.PROCESS_NAME,  'ora',  NULL,  1) PAR FROM GV$ALL_SQL_PLAN_MONITOR A) PLM,  MONITOR_DATA MO WHERE PLM.SQL_ID = :B9 AND PLM.SQL_EXEC_START = :B8 AND PLM.SQL_EXEC_ID = :B7 AND PLM.INST_ID = MO.INST_ID AND PLM.INST_ID BETWEEN :B11 AND :B10 AND PLM.KEY = MO.KEY GROUP BY PLM.PLAN_LINE_ID,	PLM.PLAN_OPERATION,  PLM.PLAN_OPTIONS) PM0) PM WHERE AH.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND AT.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND LO.PLAN_LINE_ID(+) = PM.PLAN_LINE_ID AND (:B21 IS NULL OR PM.PLAN_LINE_ID = :B21 )) PLI) ELSE NULL END,	CASE WHEN :B42 = 1 THEN DBMS_SQLTUNE.BUILD_STASH_XML( SESSION_ID=&gt;:B19 ,  SESSION_SERIAL=&gt;:B18 ,	SESSION_INST_ID=&gt;:B17 ,  PX_MODE=&gt;'yes',	START_TIME=&gt;:B20 ,  END_TIME=&gt;:B22 ,  MISSING_SECONDS=&gt; :B41 ,  INSTANCE_LOW_FILTER=&gt;:B11 ,  INSTANCE_HIGH_FILTER=&gt;:B10 ,  BUCKET_MAX_COUNT=&gt;NULL,  BUCKET_INTERVAL=&gt;:B26 ,  REPORT_LEVEL=&gt;'typical',  CPU_CORES=&gt;:B40 ,  IS_HYPER=&gt;:B39 ) ELSE NULL END),  (CASE WHEN :B38 = 1 THEN (SELECT XMLELEMENT( &quot;skewed_sessions&quot;,  XMLATTRIBUTES( DECODE(MIN(INST_ID),  NULL,  :B17 ,  MIN(INST_ID)) AS &quot;min_iid&quot;,	DECODE(MAX(INST_ID),  NULL,  :B17 ,  MAX(INST_ID)) AS
&quot;max_iid&quot;),  XMLAGG( XMLELEMENT( &quot;s&quot;,  XMLATTRIBUTES( INST_ID AS &quot;i&quot;),  SESSION_ID) ORDER BY INST_ID,  SESSION_ID)) FROM (SELECT SESS.* FROM (SELECT DECODE(AD.DFO_MOST_ACTIVE_IID,  :B17 ,  NULL,  AD.DFO_MOST_ACTIVE_IID) INST_ID,  AD.DFO_MOST_ACTIVE_SID SESSION_ID FROM ASH_DATA AD WHERE AD.DFO_MOST_ACTIVE_COUNT IS NOT NULL GROUP BY AD.DFO_MOST_ACTIVE_IID,  AD.DFO_MOST_ACTIVE_SID ORDER BY MAX(AD.DFO_MOST_ACTIVE_COUNT) DESC) SESS WHERE ROWNUM &lt;= 100)) ELSE NULL END),  (CASE WHEN :B37 = 1 THEN (SELECT XMLELEMENT( &quot;report_repository_summary&quot;,  CASE WHEN MA.MAX_DBOP_NAME IS NOT NULL THEN XMLELEMENT( &quot;dbop&quot;,  XMLATTRIBUTES('F' AS &quot;detail&quot;,  MA.MAX_DBOP_NAME AS &quot;dbop_name&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,  :B12 ) AS &quot;dbop_exec_start&quot;,  MA.MAX_DBOP_EXEC_ID AS &quot;dbop_exec_id&quot;),  XMLFOREST( MA.MAX_STATUS AS &quot;status&quot;,  TO_CHAR(NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME),  :B12 )AS
&quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 )AS &quot;last_refresh_time&quot;,  MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,  MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,	MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,	MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_entry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,  MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,	MA.MAX_PX_DOP AS &quot;dop&quot;,  MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;),  CASE WHEN MA.MAX_ERROR_NUMBER IS NULL THEN NULL ELSE XMLELEMENT( &quot;error&quot;,  XMLATTRIBUTES(MA.MAX_ERROR_NUMBER AS &quot;number&quot;,  MA.MAX_ERROR_FACILITY AS &quot;facility&quot;),  MA.MAX_ERROR_MESSAGE) END,  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('duration' AS &quot;name&quot;),  GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- NVL(MA.MAX_SQL_EXEC_START,  MA.MIN_FIRST_REFRESH_TIME))*86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,  0,  1,  MA.SUM_IO_INTER_BYTES),  2)) END,	CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_BYTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,  2))) END) ) ELSE XMLELEMENT( &quot;sql&quot;,  XMLATTRIBUTES( MA.MAX_SQL_ID AS &quot;sql_id&quot;,  TO_CHAR(MA.MAX_SQL_EXEC_START,  :B12 ) AS &quot;sql_exec_start&quot;,	MA.MAX_SQL_EXEC_ID AS &quot;sql_exec_id&quot;),  XMLFOREST(MA.MAX_STATUS AS &quot;status&quot;,  SUBSTR(MA.SQLMON_TEXT,  1,  100) AS &quot;sql_text&quot;,  TO_CHAR(MA.MIN_FIRST_REFRESH_TIME,	:B12 ) AS &quot;first_refresh_time&quot;,  TO_CHAR(MA.MAX_LAST_REFRESH_TIME,  :B12 ) AS &quot;last_refresh_time&quot;,	MA.SUM_REFRESH_COUNT AS &quot;refresh_count&quot;,  MA.MAX_INST_ID AS &quot;inst_id&quot;,  MA.MAX_SESSION_ID AS &quot;session_id&quot;,  MA.MAX_SESSION_SERIAL AS &quot;session_serial&quot;,	MA.MAX_USERID AS &quot;user_id&quot;,  MA.MAX_USERNAME AS &quot;user&quot;,  MA.MAX_CON_ID AS &quot;con_id&quot;,  MA.MAX_CON_NAME AS &quot;con_name&quot;,  MA.MAX_MODULE AS &quot;module&quot;,  MA.MAX_ACTION AS &quot;action&quot;,  MA.MAX_SERVICE_NAME AS &quot;service&quot;,  MA.MAX_CLIENT_ID AS &quot;client_id&quot;,  MA.MAX_CLIENT_INFO AS &quot;client_info&quot;,  MA.MAX_PROGRAM AS &quot;program&quot;,  MA.MAX_PLAN_HASH_VALUE AS &quot;plan_hash&quot;,  MA.MAX_PL_ENTRY_OID AS &quot;plsql_entry_object_id&quot;,  MA.MAX_PL_ENTRY_PROGID AS &quot;plsql_entry_subprogram_id&quot;,  MA.MAX_PL_OID AS &quot;plsql_object_id&quot;,	MA.MAX_PL_PROGID AS &quot;plsql_subprogram_id&quot;,  MA.MAX_PX_IS_CROSS_INSTANCE AS &quot;is_cross_instance&quot;,  MA.MAX_PX_DOP AS &quot;dop&quot;,	MA.MAX_PX_DOP_INSTANCES AS &quot;instances&quot;,  MA.SUM_SERVERS_REQUESTED AS &quot;px_servers_requested&quot;,  MA.SUM_SERVERS_ALLOCATED AS &quot;px_servers_allocated&quot;),  XMLELEMENT( &quot;stats&quot;,  XMLATTRIBUTES('monitor' AS &quot;type&quot;),  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('duration' AS &quot;name&quot;),	GREATEST(ROUND((MA.MAX_LAST_REFRESH_TIME- MA.MAX_SQL_EXEC_START) * 86400),  LEAST(MA.SUM_ELAPSED_TIME/1000000,	1),  CEIL(MA.MAX_QUEUING_TIME/1000000))),  DECODE(MA.SUM_ELAPSED_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elapsed_time' AS &quot;name&quot;),  MA.SUM_ELAPSED_TIME)),  DECODE(MA.MAX_QUEUING_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('queuing_time' AS &quot;name&quot;),  MA.MAX_QUEUING_TIME)),  DECODE(MA.SUM_CPU_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cpu_time' AS &quot;name&quot;),  MA.SUM_CPU_TIME)),	DECODE(MA.SUM_USER_IO_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_io_wait_time' AS &quot;name&quot;),  MA.SUM_USER_IO_WAIT_TIME)),  DECODE(MA.SUM_APPLICATION_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('application_wait_time' AS &quot;name&quot;),  MA.SUM_APPLICATION_WAIT_TIME)),	DECODE(MA.SUM_CONCURRENCY_WAIT_TIME,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('concurrency_wait_time' AS &quot;name&quot;),  MA.SUM_CONCURRENCY_WAIT_TIME)),  DECODE(MA.SUM_CLUSTER_WAIT_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cluster_wait_time' AS &quot;name&quot;),  MA.SUM_CLUSTER_WAIT_TIME)),	DECODE(MA.SUM_PLSQL_EXEC_TIME,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('plsql_exec_time' AS &quot;name&quot;),  MA.SUM_PLSQL_EXEC_TIME)),  DECODE(MA.SUM_JAVA_EXEC_TIME
,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('java_exec_time' AS &quot;name&quot;),  MA.SUM_JAVA_EXEC_TIME)),  DECODE(MA.SUM_OTHER_WAIT_TIME,  0,  NULL,	XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('other_wait_time' AS &quot;name&quot;),  MA.SUM_OTHER_WAIT_TIME)),  DECODE(MA.SUM_FETCHES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('user_fetch_count' AS &quot;name&quot;),  MA.SUM_FETCHES)),  DECODE(MA.SUM_BUFFER_GETS,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('buffer_gets' AS &quot;name&quot;),  MA.SUM_BUFFER_GETS)),  DECODE(MA.SUM_READ_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_reqs' AS &quot;name&quot;),  MA.SUM_READ_REQS)),	DECODE(MA.SUM_READ_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('read_bytes' AS &quot;name&quot;),  MA.SUM_READ_BYTES)),  DECODE(MA.SUM_WRITE_REQS,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('write_reqs' AS &quot;name&quot;),  MA.SUM_WRITE_REQS)),  DECODE(MA.SUM_WRITE_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,	XMLATTRIBUTES('write_bytes' AS &quot;name&quot;),  MA.SUM_WRITE_BYTES)),  DECODE(MA.SUM_IO_UNC_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('unc_bytes' AS &quot;name&quot;),  MA.SUM_IO_UNC_BYTES)),  DECODE(MA.SUM_IO_ELIG_BYTES,	0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('elig_bytes' AS &quot;name&quot;),  MA.SUM_IO_ELIG_BYTES)),  DECODE(MA.SUM_IO_RET_BYTES,  0,  NULL,  XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('ret_bytes' AS &quot;name&quot;),  MA.SUM_IO_RET_BYTES)),  CASE WHEN MA.SUM_IO_INTER_BYTES IS NULL OR MA.SUM_IO_INTER_BYTES = MA.SUM_IO_BYTES OR MA.SUM_IO_BYTES = 0 OR NVL(MA.SUM_IO_ELIG_BYTES,  0) = 0 THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency' AS &quot;name&quot;),  ROUND(MA.SUM_IO_BYTES / DECODE(MA.SUM_IO_INTER_BYTES,	0,  1,	MA.SUM_IO_INTER_BYTES),  2)) END,  CASE WHEN NVL(MA.SUM_IO_ELIG_BYTES,	0) = 0 OR MA.SUM_IO_BYTES = 0 OR MA.SUM_IO_UNC_BYTES = MA.SUM_IO_RET_BYTES THEN NULL ELSE XMLELEMENT( &quot;stat&quot;,  XMLATTRIBUTES('cell_offload_efficiency2' AS &quot;name&quot;),  GREATEST(0,  ROUND(100 * (GREATEST(MA.SUM_IO_UNC_BYTES,  MA.SUM_IO_ELIG_BYTES) - MA.SUM_IO_RET_BYTES) / MA.SUM_IO_ELIG_BYTES,	2))) END) ) END) FROM MONITOR_AGG MA) ELSE NULL END) FROM (SELECT CASE WHEN V1.XPLAN_XML IS NULL OR V1.XPLAN_XML.EXISTSNODE('/error') &gt; 0 THEN NULL ELSE V1.XPLAN_XML END XPLAN_XML FROM (SELECT CASE WHEN :B36 = 1 THEN DBMS_XPLAN.BUILD_PLAN_XML( TABLE_NAME=&gt;'gv$all_sql_plan',  PLAN_TAG=&gt;'plan',	FILTER_PREDS=&gt;:B35 ,  FORMAT=&gt;'-PROJECTION +ALIAS +ADAPTIVE') ELSE NULL END XPLAN_XML FROM DUAL) V1) CONST_VIEW</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="a017akb6vk41k"></a>a017akb6vk41k</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '164';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';



Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_rac_47_48.txt.  To use this name,
press <return> to continue, otherwise enter an alternative.

v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;

EXECUTE IMMEDIATE v_home_schema_str;
Using the report name awr_rac.txt


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="a3jpjzh7mtwwp"></a>a3jpjzh7mtwwp</td><td class='awrc'><pre_sqltext class="awr">select /*+ index(idl_ub2$ i_idl_ub21) */ piece#, length, piece from idl_ub2$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="acmvv4fhdc9zh"></a>acmvv4fhdc9zh</td><td class='awrnc'><pre_sqltext class="awr">select obj#, type#, ctime, mtime, stime,  status,  dataobj#,  flags,  oid$,  spare1,  spare2,  spare3,  signature,  spare7,  spare8,  spare9,  nvl(dflcollid,  16382),  creappid,  creverid,  modappid,	modverid,  crepatchid,	modpatchid from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is null</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="ahpwg02s0cb1z"></a>ahpwg02s0cb1z</td><td class='awrc'><pre_sqltext class="awr">INSERT INTO wri$_adv_rec_actions (task_id,  rec_id,  act_id) VALUES (:1, :2, :3) </pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="ahrc3p276uqf2"></a>ahrc3p276uqf2</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '175';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="aqrcx9hdk5uuf"></a>aqrcx9hdk5uuf</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '180';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="asvzxj61dc5vs"></a>asvzxj61dc5vs</td><td class='awrnc'><pre_sqltext class="awr">select timestamp,  flags from fixed_obj$ where obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="atwuyuvqkf27w"></a>atwuyuvqkf27w</td><td class='awrc'><pre_sqltext class="awr">SELECT /*+ OPT_PARAM('_fix_control' '16391176:1') */ GROUP_TYPE,  BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END,  SUM(TM_CPU_FIRST_BUCKET_VALUE) TM_CPU_FIRST_BUCKET_VALUE,	SUM(TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE,	SUM(TM_DB_FIRST_BUCKET_VALUE) TM_DB_FIRST_BUCKET_VALUE,  SUM(TM_DB_MIDDLE_BUCKETS_VALUE) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(TM_DB_LAST_BUCKET_VALUE) TM_DB_LAST_BUCKET_VALUE,  SUM(RREQS_FIRST_BUCKET_VALUE) RREQS_FIRST_BUCKET_VALUE,  SUM(RREQS_MIDDLE_BUCKETS_VALUE) RREQS_MIDDLE_BUCKETS_VALUE,  SUM(RREQS_LAST_BUCKET_VALUE) RREQS_LAST_BUCKET_VALUE,  SUM(WREQS_FIRST_BUCKET_VALUE) WREQS_FIRST_BUCKET_VALUE,  SUM(WREQS_MIDDLE_BUCKETS_VALUE) WREQS_MIDDLE_BUCKETS_VALUE,	SUM(WREQS_LAST_BUCKET_VALUE) WREQS_LAST_BUCKET_VALUE,  SUM(RBYTES_FIRST_BUCKET_VALUE) RBYTES_FIRST_BUCKET_VALUE,  SUM(RBYTES_MIDDLE_BUCKETS_VALUE) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(RBYTES_LAST_BUCKET_VALUE) RBYTES_LAST_BUCKET_VALUE,  SUM(WBYTES_FIRST_BUCKET_VALUE) WBYTES_FIRST_BUCKET_VALUE,  SUM(WBYTES_MIDDLE_BUCKETS_VALUE) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(WBYTES_LAST_BUCKET_VALUE) WBYTES_LAST_BUCKET_VALUE,  SUM(IBYTES_FIRST_BUCKET_VALUE) IBYTES_FIRST_BUCKET_VALUE,	SUM(IBYTES_MIDDLE_BUCKETS_VALUE) IBYTES_MIDDLE_BUCKETS_VALUE,  SUM(IBYTES_LAST_BUCKET_VALUE) IBYTES_LAST_BUCKET_VALUE,	SUM(CRBYTES_FIRST_BUCKET_VALUE) CRBYTES_FIRST_BUCKET_VALUE,  SUM(CRBYTES_MIDDLE_BUCKETS_VALUE) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(CRBYTES_LAST_BUCKET_VALUE) CRBYTES_LAST_BUCKET_VALUE,  SUM(PGA_ALLOC_FIRST_BUCKET_VALUE) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(PGA_ALLOC_MIDDLE_BUCKETS_VALUE) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(PGA_ALLOC_LAST_BUCKET_VALUE) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(TMP_ALLOC_FIRST_BUCKET_VALUE) TMP_ALLOC_FIRST_BUCKET_VALUE,  SUM(TMP_ALLOC_MIDDLE_BUCKETS_VALUE) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(TMP_ALLOC_LAST_BUCKET_VALUE) TMP_ALLOC_LAST_BUCKET_VALUE FROM ( SELECT GROUP_TYPE,  BUCKET_START,  TM_BUCKET_START,  TM_BUCKET_END,  BUCKET_END,  TM_GROUP_TYPE,  SUM(GVTF.TM_CPU_FIRST_BUCKET_VALUE) TM_CPU_FIRST_BUCKET_VALUE,  SUM(GVTF.TM_CPU_MIDDLE_BUCKETS_VALUE) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TM_CPU_LAST_BUCKET_VALUE) TM_CPU_LAST_BUCKET_VALUE,  SUM(GVTF.TM_DB_FIRST_BUCKET_VALUE) TM_DB_FIRST_BUCKET_VALUE,  SUM(GVTF.TM_DB_MIDDLE_BUCKETS_VALUE) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TM_DB_LAST_BUCKET_VALUE) TM_DB_LAST_BUCKET_VALUE,	SUM(GVTF.RREQS_FIRST_BUCKET_VALUE) RREQS_FIRST_BUCKET_VALUE,  SUM(GVTF.RREQS_MIDDLE_BUCKETS_VALUE) RREQS_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.RREQS_LAST_BUCKET_VALUE) RREQS_LAST_BUCKET_VALUE,  SUM(GVTF.WREQS_FIRST_BUCKET_VALUE) WREQS_FIRST_BUCKET_VALUE,  SUM(GVTF.WREQS_MIDDLE_BUCKETS_VALUE) WREQS_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.WREQS_LAST_BUCKET_VALUE) WREQS_LAST_BUCKET_VALUE,	SUM(GVTF.RBYTES_FIRST_BUCKET_VALUE) RBYTES_FIRST_BUCKET_VALUE,	SUM(GVTF.RBYTES_MIDDLE_BUCKETS_VALUE) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.RBYTES_LAST_BUCKET_VALUE) RBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.WBYTES_FIRST_BUCKET_VALUE) WBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.WBYTES_MIDDLE_BUCKETS_VALUE) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.WBYTES_LAST_BUCKET_VALUE) WBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.IBYTES_FIRST_BUCKET_VALUE) IBYTES_FIRST_BUCKET_VALUE,  SUM(GVTF.IBYTES_MIDDLE_BUCKETS_VALUE) IBYTES_MIDDLE_BUCKETS_VALUE,	SUM(GVTF.IBYTES_LAST_BUCKET_VALUE) IBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.CRBYTES_FIRST_BUCKET_VALUE) CRBYTES_FIRST_BUCKET_VALUE,	SUM(GVTF.CRBYTES_MIDDLE_BUCKETS_VALUE) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.CRBYTES_LAST_BUCKET_VALUE) CRBYTES_LAST_BUCKET_VALUE,  SUM(GVTF.PGA_ALLOC_FIRST_BUCKET_VALUE) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(GVTF.PGA_ALLOC_MIDDLE_BUCKETS_VALUE) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.PGA_ALLOC_LAST_BUCKET_VALUE) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(GVTF.TMP_ALLOC_FIRST_BUCKET_VALUE) TMP_ALLOC_FIRST_BUCKET_VALUE,	SUM(GVTF.TMP_ALLOC_MIDDLE_BUCKETS_VALUE) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(GVTF.TMP_ALLOC_LAST_BUCKET_VALUE) TMP_ALLOC_LAST_BUCKET_VALUE FROM TABLE(SYS.GV$(CURSOR( SELECT INST_ID,	GROUP_TYPE,  BUCKET_START,  TM_BUCKET_START,  TM_BUCKET_END,  BUCKET_END,  TM_GROUP_TYPE,  SUM(TM_DELTA_CPU_TIME * TM_FIRST_BUCKET_RATIO) TM_CPU_FIRST_BUCKET_VALUE,  SUM(TM_DELTA_CPU_TIME * TM_MIDDLE_BUCKETS_RATIO) TM_CPU_MIDDLE_BUCKETS_VALUE,  SUM(TM_DELTA_CPU_TIME * TM_LAST_BUCKET_RATIO) TM_CPU_LAST_BUCKET_VALUE,  SUM(TM_DELTA_DB_TIME * TM_FIRST_BUCKET_RATIO) TM_DB_FIRST_BUCKET_VALUE,  SUM(TM_DELTA_DB_TIME * TM_MIDDLE_BUCKETS_RATIO) TM_DB_MIDDLE_BUCKETS_VALUE,  SUM(TM_DELTA_DB_TIME * TM_LAST_BUCKET_RATIO) TM_DB_LAST_BUCKET_VALUE,  SUM(DELTA_READ_REQUESTS * FIRST_BUCKET_RATIO) RREQS_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_REQUESTS * MIDDLE_BUCKETS_RATIO) RREQS_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_REQUESTS * LAST_BUCKET_RATIO) RREQS_LAST_BUCKET_VALUE,	SUM(DELTA_WRITE_REQUESTS * FIRST_BUCKET_RATIO) WREQS_FIRST_BUCKET_VALUE,  SUM(DELTA_WRITE_REQUESTS * MIDDLE_BUCKETS_RATIO) WREQS_MIDDLE_BUCKETS_VALUE,	SUM(DELTA_WRITE_REQUESTS * LAST_BUCKET_RATIO) WREQS_LAST_BUCKET_VALUE,	SUM(DELTA_READ_BYTES * FIRST_BUCKET_RATIO) RBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_BYTES * MIDDLE_BUCKETS_RATIO) RBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_BYTES * LAST_BUCKET_RATIO) RBYTES_LAST_BUCKET_VALUE,  SUM(DELTA_WRITE_BYTES * FIRST_BUCKET_RATIO) WBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_WRITE_BYTES * MIDDLE_BUCKETS_RATIO) WBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_WRITE_BYTES * LAST_BUCKET_RATIO) WBYTES_LAST_BUCKET_VALUE,  SUM(DELTA_INTERCONNECT_BYTES * FIRST_BUCKET_RATIO) IBYTES_FIRST_BUCKET_VALUE,	SUM(DELTA_INTERCONNECT_BYTES * MIDDLE_BUCKETS_RATIO) IBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_INTERCONNECT_BYTES * LAST_BUCKET_RATIO) IBYTES_LAST_BUCKET_VALUE,	SUM(DELTA_READ_MEM_BYTES * FIRST_BUCKET_RATIO) CRBYTES_FIRST_BUCKET_VALUE,  SUM(DELTA_READ_MEM_BYTES * MIDDLE_BUCKETS_RATIO) CRBYTES_MIDDLE_BUCKETS_VALUE,  SUM(DELTA_READ_MEM_BYTES * LAST_BUCKET_RATIO) CRBYTES_LAST_BUCKET_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * FIRST_BUCKET_RATIO) PGA_ALLOC_FIRST_BUCKET_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * MIDDLE_BUCKETS_RATIO) PGA_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(PGA_ALLOCATED * LENGTH_SEG * LAST_BUCKET_RATIO) PGA_ALLOC_LAST_BUCKET_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * FIRST_BUCKET_RATIO) TMP_ALLOC_FIRST_BUCKET_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * MIDDLE_BUCKETS_RATIO) TMP_ALLOC_MIDDLE_BUCKETS_VALUE,  SUM(TEMP_SPACE_ALLOCATED * LENGTH_SEG * LAST_BUCKET_RATIO) TMP_ALLOC_LAST_BUCKET_VALUE FROM ( SELECT USERENV('INSTANCE') INST_ID,  ROW_ID,  SID,	SAMPLE_TIME,  CASE WHEN BUCKET_END IS NULL OR BUCKET_START IS NULL THEN NULL WHEN BUCKET_START = TM_BUCKET_START AND BUCKET_START = BUCKET_END THEN 'CO' WHEN BUCKET_START = TM_BUCKET_START THEN 'CM' WHEN BUCKET_START = BUCKET_END THEN 'SO' ELSE 'SM' END GROUP_TYPE,  CASE WHEN TM_BUCKET_START IS NULL OR BUCKET_END IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL WHEN TM_BUCKET_START = BUCKET_END THEN 'O' ELSE 'M' END TM_GROUP_TYPE,  START_SEG,  BUCKET_START,  BUCKET_START_OFFSET,  TM_START_SEG,  CASE WHEN TM_BUCKET_START IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL ELSE TM_BUCKET_START END TM_BUCKET_START,  CASE WHEN TM_BUCKET_START IS NULL OR (TM_BUCKET_START = BUCKET_START) THEN NULL ELSE BUCKET_END END TM_BUCKET_END,	TM_BUCKET_START_OFFSET,  LENGTH_SEG,  TM_LENGTH_SEG,  END_SEG,	BUCKET_END,  BUCKET_END_OFFSET,  CASE WHEN BUCKET_START != BUCKET_END THEN (:B9 - BUCKET_START_OFFSET) / LENGTH_SEG ELSE 1 END FIRST_BUCKET_RATIO,  CASE WHEN BUCKET_END &gt;= BUCKET_START + 2 THEN :B9 / LENGTH_SEG ELSE NULL END MIDDLE_BUCKETS_RATIO,  CASE WHEN BUCKET_START != BUCKET_END THEN BUCKET_END_OFFSET / LENGTH_SEG ELSE NULL END LAST_BUCKET_RATIO,  CASE WHEN TM_BUCKET_START != BUCKET_END THEN (:B9 - TM_BUCKET_START_OFFSET) / TM_LENGTH_SEG ELSE 1 END TM_FIRST_BUCKET_RATIO,  CASE WHEN BUCKET_END &gt;= TM_BUCKE
T_START + 2 THEN :B9 / TM_LENGTH_SEG ELSE NULL END TM_MIDDLE_BUCKETS_RATIO,  CASE WHEN TM_BUCKET_START != BUCKET_END THEN BUCKET_END_OFFSET / TM_LENGTH_SEG ELSE NULL END TM_LAST_BUCKET_RATIO,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,	DELTA_READ_IO_REQUESTS DELTA_READ_REQUESTS,  DELTA_WRITE_IO_REQUESTS DELTA_WRITE_REQUESTS,  DELTA_READ_IO_BYTES DELTA_READ_BYTES,  DELTA_WRITE_IO_BYTES DELTA_WRITE_BYTES,  DELTA_INTERCONNECT_IO_BYTES DELTA_INTERCONNECT_BYTES,  DELTA_READ_MEM_BYTES DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,	SAMPLE_TIME,  START_SEG,  TRUNC(START_SEG / :B9 ) BUCKET_START,  MOD(START_SEG,  :B9 ) BUCKET_START_OFFSET,  TM_START_SEG,  TRUNC(TM_START_SEG/:B9 ) TM_BUCKET_START,  MOD(TM_START_SEG,  :B9 ) TM_BUCKET_START_OFFSET,  TRUNC(END_SEG/:B9 ) BUCKET_END,  MOD(END_SEG,	:B9 ) BUCKET_END_OFFSET,  END_SEG,  LENGTH_SEG,  TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,	DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,	DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,	SID,  SAMPLE_TIME,  TIME_INTERVAL,  CASE WHEN START_SEG &lt; 0 THEN 0 ELSE START_SEG END START_SEG,  CASE WHEN TM_START_SEG &lt; 0 THEN 0 ELSE TM_START_SEG END TM_START_SEG,  CASE WHEN END_SEG &gt; TIME_INTERVAL THEN TIME_INTERVAL ELSE END_SEG END END_SEG,  (LENGTH_SEG - (CASE WHEN START_SEG &lt; 0 THEN -START_SEG ELSE 0 END + CASE WHEN END_SEG &gt; TIME_INTERVAL THEN END_SEG - TIME_INTERVAL ELSE 0 END)) LENGTH_SEG,  (TM_LENGTH_SEG - (CASE WHEN TM_START_SEG &lt; 0 THEN -TM_START_SEG ELSE 0 END + CASE WHEN END_SEG &gt; TIME_INTERVAL THEN END_SEG - TIME_INTERVAL ELSE 0 END)) TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,	TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,	PGA_ALLOCATED,	TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,  SAMPLE_TIME,  TIME_INTERVAL,  LENGTH_SEG,  TM_LENGTH_SEG,  END_SEG - TM_LENGTH_SEG TM_START_SEG,  END_SEG - LENGTH_SEG START_SEG,  END_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,	DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROW_ID,  SID,  SAMPLE_TIME,  EXTRACT(SECOND FROM REL_SAMPLE_TIME_INT) + EXTRACT(MINUTE FROM REL_SAMPLE_TIME_INT)*60 + EXTRACT(HOUR FROM REL_SAMPLE_TIME_INT)*3600 + EXTRACT(DAY FROM REL_SAMPLE_TIME_INT)*3600*24 END_SEG,	TIME_INTERVAL,	DELTA_TIME/1000000 LENGTH_SEG,	TM_DELTA_TIME/1000000 TM_LENGTH_SEG,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,	DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,  DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ROWNUM ROW_ID,  SESSION_ID SID,  CAST(FROM_TZ(SAMPLE_TIME,	DBTIMEZONE) AS DATE) SAMPLE_DATE,  SAMPLE_TIME,  (SAMPLE_TIME - CAST(:B8 AS TIMESTAMP)) REL_SAMPLE_TIME_INT,  TRUNC((:B7 - :B8 ) * 3600 * 24) TIME_INTERVAL,  :B8 AS BND_START_INTERVAL ,  :B7 AS BND_END_INTERVAL ,  TM_DELTA_TIME,  TM_DELTA_CPU_TIME,  TM_DELTA_DB_TIME,  DELTA_TIME,  DELTA_READ_IO_REQUESTS,  DELTA_WRITE_IO_REQUESTS,  DELTA_READ_IO_BYTES,  DELTA_WRITE_IO_BYTES,  DELTA_INTERCONNECT_IO_BYTES,	DELTA_READ_MEM_BYTES,  PGA_ALLOCATED,  TEMP_SPACE_ALLOCATED FROM (SELECT ASH0.* FROM V$ACTIVE_SESSION_HISTORY ASH0 WHERE SAMPLE_TIME BETWEEN :B6 AND :B5 AND ( (SESSION_ID = :B2 AND SESSION_SERIAL# = :B1 AND USERENV('INSTANCE') = :B3 ) OR (:B4 = 'yes' AND QC_INSTANCE_ID = :B3 AND QC_SESSION_ID = :B2 AND QC_SESSION_SERIAL# = :B1 ))) ) ASH1 WHERE SAMPLE_DATE &gt;= BND_START_INTERVAL AND SAMPLE_DATE &lt;= BND_END_INTERVAL + 120/3600/24 ) ) WHERE START_SEG &lt;= TIME_INTERVAL ) WHERE (LENGTH_SEG IS NOT NULL AND LENGTH_SEG &gt; 0) OR (TM_LENGTH_SEG IS NOT NULL AND TM_LENGTH_SEG &gt; 0)) ) GROUP BY INST_ID,  GROUP_TYPE,  BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END))) GVTF WHERE INST_ID &gt;= :B11 AND INST_ID &lt;= :B10 GROUP BY GROUP_TYPE,	BUCKET_START,  BUCKET_END,  TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END ) GROUP BY GROUPING SETS ( (GROUP_TYPE,  BUCKET_START,  BUCKET_END),  (TM_GROUP_TYPE,  TM_BUCKET_START,  TM_BUCKET_END) )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="av2x55hf6b4kn"></a>av2x55hf6b4kn</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '172';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="b1wc53ddd6h3p"></a>b1wc53ddd6h3p</td><td class='awrc'><pre_sqltext class="awr">select audit$, options from procedure$ where obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bhdvtsvjhgvrh"></a>bhdvtsvjhgvrh</td><td class='awrnc'><pre_sqltext class="awr">SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="bkvq4kcy2sz66"></a>bkvq4kcy2sz66</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '13';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="c73qcqy18vbud"></a>c73qcqy18vbud</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '17';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="c845wy077y4vn"></a>c845wy077y4vn</td><td class='awrc'><pre_sqltext class="awr">WITH ash as
  (SELECT round((cast(sample_time as date) - :1) * 24 * 60 * 60, 0) as t,
	  inst_id || '_' || session_id || '_' || session_serial# as sid,
	  decode(session_type,	'FOREGROUND',  1,  0) as session_type,
	  nvl(sql_id, 'null') as sql_id,
	  nvl(sql_opcode, 0) as sql_opcode,
	  nvl(force_matching_signature, 0) as fms,
	  QC_INSTANCE_ID || '_' || QC_SESSION_ID || '_' || qc_session_serial# as qsid,
	  decode(session_state,  'ON CPU',  'CPU',  event) as wait_event,
	  decode(session_state,  'ON CPU',  'CPU',  wait_class) as wait_class,
	  decode(blocking_session_status,  'VALID',  blocking_inst_id || '_' || BLOCKING_SESSION || '_' || BLOCKING_SESSION_SERIAL#,  '__') as bsid,
	  nvl(service_hash, 0) as service_hash,
	  nvl(program, '__') as program,
	  nvl(module, '__') as module,
	  nvl(action, '__') as action,	 nvl(pga_allocated, 0) as pga ,  decode(in_connection_mgmt,  'Y',  1,  0)
		     + decode(in_parse,  'Y',  2,  0)
		     + decode(in_hard_parse,  'Y',  4,	0)
		     + decode(in_sql_execution,  'Y',  8,  0)
		     + decode(in_plsql_execution,  'Y',  16,  0)
		     + decode(in_plsql_rpc,  'Y',  32,	0)
		     + decode(in_plsql_compilation,  'Y',  64,	0)
		     + decode(in_java_execution,  'Y',	128,  0)
		     + decode(in_bind,	'Y',  256,  0)
		     + decode(in_cursor_close,	'Y',  512,  0) as tm   FROM   sys.gv_$active_session_history
   WHERE  sample_time &gt;= :2 and sample_time &lt;= :3
     AND  (session_state = 'ON CPU' or wait_class &lt;&gt; 'Idle')   AND
       ora_hash(inst_id || '_' || session_id || '_' || sample_id
	       , 100000, 0) &lt;= (100000 / 149.074659414807886439733333333333333333)	),
  map_op as ( SELECT xmlelement(&quot;op&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	   v.command_type as &quot;i&quot;,  v.command_name as &quot;n&quot;
	 )))) as x
  FROM	 (SELECT distinct sql_opcode FROM ash WHERE sql_opcode &lt;&gt; 0) a ,
	 sys.v_$sqlcommand v
  WHERE  a.sql_opcode = v.command_type	),
  map_sql as
  (SELECT fms,	sql_opcode,  sql_id,  rownum as id
   FROM   (SELECT fms,	sql_opcode,  max(sql_id) as sql_id
	   FROM ash GROUP BY fms,  sql_opcode)
  ),
  map_sql_xml as
  (SELECT xmlelement(&quot;sql&quot;, xmlagg(xmlelement(&quot;m&quot;,	xmlattributes(
	    fms as &quot;f&quot;,  sql_opcode as &quot;o&quot;,  sql_id as &quot;s&quot;,  id as &quot;i&quot;
	  )))) as x
   FROM   map_sql
  ),
  map_sid as
  (SELECT a,  rownum as id
   FROM   (SELECT sid as a FROM ash
	   UNION
	   SELECT qsid as a FROM ash
	   UNION
	   SELECT bsid as a FROM ash)
  ),
  map_sid_xml as
  (SELECT xmlelement(&quot;sid&quot;, xmlagg(xmlelement(&quot;m&quot;,	xmlattributes(
	     a as &quot;v&quot;,  id as &quot;i&quot;
	   )))) as x
   FROM   map_sid
  ),
  map_event as
  (SELECT wait_class,  wait_event,  rownum as id
   FROM  (SELECT DISTINCT wait_class , wait_event FROM ash)
  ),
  map_event_xml as
  (SELECT xmlelement(&quot;evt&quot;, xmlagg(xmlelement(&quot;m&quot;,	xmlattributes(
	     wait_class as &quot;c&quot;,  wait_event as &quot;e&quot;,  id as &quot;i&quot;
	   )))) as x
   FROM   map_event
  ),
  map_service as
  (SELECT a.service_hash as sh,  s.service_id as id,  s.name as name
   FROM  (SELECT distinct service_hash from ash) a,
	 sys.v_$services s
   WHERE s.name_hash = a.service_hash
  ),
  map_service_xml as
  (SELECT xmlelement(&quot;service&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	     sh as &quot;h&quot;,  name as &quot;n&quot;,  id as &quot;i&quot;
	   )))) as x
   FROM   map_service
  ),
  map_program as
  (SELECT program,  rownum as id
   FROM  (SELECT distinct program FROM ash)
  ),
  map_program_xml as
  (SELECT xmlelement(&quot;program&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	     program as &quot;v&quot;,	id as &quot;i&quot;
	  )))) as x
   FROM   map_program
  ),
  map_module as
  (SELECT module,  rownum as id
   FROM  (SELECT distinct module FROM ash)
  ),
  map_module_xml as
  (SELECT xmlelement(&quot;module&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	     module as &quot;v&quot;,  id as &quot;i&quot;
	  )))) as x
   FROM   map_module
  ),
  map_action as
  (SELECT action,  rownum as id
   FROM  (SELECT distinct action FROM ash)
  ),
  map_action_xml as
  (SELECT xmlelement(&quot;action&quot;, xmlagg(xmlelement(&quot;m&quot;,  xmlattributes(
	     action as &quot;v&quot;,  id as &quot;i&quot;
	  )))) as x
   FROM   map_action
  ),
  ash_xml as
  (SELECT xmlelement(&quot;data&quot;, xmlagg(xmlelement(&quot;a&quot;,
	    ash.t || ', ' ||
	    ms1.id || ', ' ||
	    ash.session_type || ', ' ||
	    ms2.id || ', ' ||
	    ms3.id  || ', ' ||
	    msql.id  || ', ' ||
	    trunc(ash.pga/(1024*1024)) || ', ' ||
	    mp.id  || ', ' ||
	    ms.id  || ', ' ||
	    mm.id  || ', ' ||
	    ma.id  || ', ' ||
	    me.id  || ', ' ||
	    ash.tm
	  ))) as x
   FROM   ash,
	  map_sid ms1,	map_sid ms2,  map_sid ms3,
	  map_event me,
	  map_service ms,
	  map_program mp,
	  map_module mm,
	  map_action ma,
	  map_sql    msql
   WHERE  ash.sid = ms1.a
     AND  ash.qsid = ms2.a
     AND  ash.bsid = ms3.a
     AND  ash.wait_class = me.wait_class
     AND  ash.wait_event = me.wait_event
     AND  ash.service_hash = ms.sh
     AND  ash.program = mp.program
     AND  ash.module = mm.module
     AND  ash.action = ma.action
     AND  ash.fms = msql.fms
  )
SELECT xmlelement(&quot;ash_data&quot;,
	  xmlattributes(round(:4, 4) as &quot;sampling_ratio&quot;,
			round(:5, 4) as &quot;avg_active_sessions&quot;,
			round((:6 - :7) * (24 * 60 * 60), 0) as &quot;secs&quot;),
	  map_op.x,
	  map_sid_xml.x,
	  map_event_xml.x,
	  map_service_xml.x,
	  map_program_xml.x,
	  map_module_xml.x,
	  map_action_xml.x,
	  map_sql_xml.x,
	  ash_xml.x
       ) as data
FROM   map_op,	map_sid_xml,  map_event_xml,  map_service_xml,
       map_program_xml,  map_module_xml,  map_action_xml,
       map_sql_xml,  ash_xml </pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="cnjgta3s8p2g9"></a>cnjgta3s8p2g9</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '154';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="cwjq8stjymah0"></a>cwjq8stjymah0</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '162';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="czhh6tvvf96yz"></a>czhh6tvvf96yz</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '43';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="ddk08qkf81zw2"></a>ddk08qkf81zw2</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '176';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="ds7scgmy0unq5"></a>ds7scgmy0unq5</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '171';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="dzjgnuh2rvhcp"></a>dzjgnuh2rvhcp</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '181';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f0vn9wx7zt80z"></a>f0vn9wx7zt80z</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '156';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="f7xnvp44nukp7"></a>f7xnvp44nukp7</td><td class='awrc'><pre_sqltext class="awr">insert into  wrm$_snapshot_details  (snap_id, dbid, instance_number, table_id, begin_time, end_time, step_id)    values (:snap_id, :dbid, :instance_number, :bind1, :bind2, :bind3, :step_id)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f80h0xb1qvbsk"></a>f80h0xb1qvbsk</td><td class='awrnc'><pre_sqltext class="awr">SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fcfyvfu5jmtsj"></a>fcfyvfu5jmtsj</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '186';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fg11facbfjwvx"></a>fg11facbfjwvx</td><td class='awrnc'><pre_sqltext class="awr">
	  SELECT  /*+ no_monitor leading(mo_px) use_hash(mo_px) */
	  xmlelement(
	    &quot;sql_monitor_list_report&quot;,
	    xmlattributes(
	      :report_version				  as &quot;version&quot;,
	      :total_count				  as &quot;total_count&quot;,
	      to_char(:new_last_refresh_time,
		      :date_fmt)			  as &quot;sysdate&quot;,
	      :auto_refresh				  as &quot;auto_refresh&quot;,
	      :base_path				  as &quot;base_path&quot;),
	    case
	      when :debug_xml is NULL
	      then NULL
	      else xmltype(:debug_xml)
	    end,
	    xmlagg(
	      case
	       when mo.dbop_name is not NULL
	       then
	       xmlelement(
		 &quot;dbop&quot;,
		  xmlattributes(mo.detail_level 	as &quot;detail&quot;,
				mo.report_ref		as &quot;report_ref&quot;,
				mo.dbop_name		as &quot;dbop_name&quot;,
				to_char(mo.sql_exec_start,
					:date_fmt)	as &quot;dbop_exec_start&quot;,
				mo.dbop_exec_id 	as &quot;dbop_exec_id&quot;),
		 decode(
		   mo.detail_level,
		   'P',
		   xmlforest(
		     mo.status			   as &quot;status&quot;,
		     to_char(mo.last_refresh_time,
			     :date_fmt) 	   as &quot;last_refresh_time&quot;,
		     mo.refresh_count		   as &quot;refresh_count&quot;)),
		 decode(
		   mo.detail_level,
		   'F',
		   xmlforest(
		     mo.status			   as &quot;status&quot;,
		     to_char(mo.first_refresh_time,
			     :date_fmt) 	   as &quot;first_refresh_time&quot;,
		     to_char(mo.last_refresh_time,
			     :date_fmt) 	   as &quot;last_refresh_time&quot;,
		     mo.refresh_count		   as &quot;refresh_count&quot;,
		     mo.inst_id 		   as &quot;inst_id&quot;,
		     mo.sid			   as &quot;session_id&quot;,
		     mo.session_serial# 	   as &quot;session_serial&quot;,
		     mo.user#			   as &quot;user_id&quot;,
		     mo.username		   as &quot;user&quot;,
		     decode(mo.con_id,	0,  NULL,  mo.con_id)
						   as &quot;con_id&quot;,
		     mo.con_name		   as &quot;con_name&quot;,
		     mo.module			   as &quot;module&quot;,
		     mo.action			   as &quot;action&quot;,
		     mo.service_name		   as &quot;service&quot;,
		     mo.client_identifier	   as &quot;client_id&quot;,
		     mo.client_info		   as &quot;client_info&quot;,
		     mo.program 		   as &quot;program&quot;,
		     mo.plsql_entry_object_id	   as &quot;plsql_entry_object_id&quot;,
		     mo.plsql_entry_subprogram_id
						as &quot;plsql_entry_subprogram_id&quot;,
		     mo.plsql_object_id 	as &quot;plsql_object_id&quot;,
		     mo.plsql_subprogram_id	as &quot;plsql_subprogram_id&quot;,
		     mo.rm_consumer_group	as &quot;rm_consumer_group&quot;,
		     mo.px_is_cross_instance	as &quot;is_cross_instance&quot;,
		     mo.px_maxdop		as &quot;dop&quot;,
		     mo.px_maxdop_instances	as &quot;instances&quot;,
		     mo.ecid			as &quot;ecid&quot;)),
		 case
		   when mo.error_number is null or
			mo.detail_level = 'N'
		   then null
		   else
		     xmlelement(&quot;error&quot;,
			      xmlattributes(mo.error_number   as &quot;number&quot;,
					    mo.error_facility as &quot;facility&quot;),
			      mo.error_message)
		 end,
		 case
		   when mo.rm_last_action is not null
		   then
		     xmlelement(&quot;rm_action&quot;,
		       xmlattributes(mo.rm_last_action	 as &quot;name&quot;,
				     mo.rm_last_action_reason as &quot;reason&quot;))
		 end,
		 decode(mo.detail_level,  'N',	null,
		  xmlelement(&quot;stats&quot;,
		   xmlattributes('monitor' as &quot;type&quot;),
		   xmlelement(&quot;stat&quot;,
			      xmlattributes('duration' as &quot;name&quot;),
			      greatest(mo.duration,
				       least(mo.elapsed_time/1000000,  1),
				       ceil(mo.queuing_time/1000000))),
		   decode(mo.elapsed_time,  0,	NULL,
			  xmlelement(&quot;stat&quot;,
				   xmlattributes('elapsed_time' as &quot;name&quot;),
				   mo.elapsed_time)),
		   decode(mo.queuing_time,  0,	NULL,
			  xmlelement(&quot;stat&quot;,
				   xmlattributes('queuing_time' as &quot;name&quot;),
				   mo.queuing_time)),
		   decode(mo.cpu_time,	0,  NULL,
			  xmlelement(&quot;stat&quot;,
				    xmlattributes('cpu_time' as &quot;name&quot;),
				    mo.cpu_time)),
		   decode(mo.user_io_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('user_io_wait_time' as &quot;name&quot;),
				mo.user_io_wait_time)),
		   decode(mo.application_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('application_wait_time' as &quot;name&quot;),
			      mo.application_wait_time)),
		   decode(mo.concurrency_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('concurrency_wait_time' as &quot;name&quot;),
			      mo.concurrency_wait_time)),
		   decode(mo.cluster_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('cluster_wait_time' as &quot;name&quot;),
				mo.cluster_wait_time)),
		   decode(mo.plsql_exec_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('plsql_exec_time' as &quot;name&quot;),
				mo.plsql_exec_time)),
		   decode(mo.java_exec_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('java_exec_time' as &quot;name&quot;),
				mo.java_exec_time)),
		   decode(mo.other_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('other_wait_time' as &quot;name&quot;),
				mo.other_wait_time)),
		   decode(mo.fetches,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('user_fetch_count' as &quot;name&quot;),
				mo.fetches)),
		   decode(mo.buffer_gets,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('buffer_gets' as &quot;name&quot;),
				mo.buffer_gets)),
		   decode(mo.read_reqs,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('read_reqs' as &quot;name&quot;),
				mo.read_reqs)),
		   decode(mo.read_bytes,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('read_bytes' as &quot;name&quot;),
				mo.read_bytes)),
		   decode(mo.write_reqs,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('write_reqs' as &quot;name&quot;),
				mo.write_reqs)),
		   decode(mo.write_bytes,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('write_bytes' as &quot;name&quot;),
				mo.write_bytes)),
		   case
		     when mo.io_inter_bytes is null or
			  mo.io_inter_bytes = mo.io_bytes or
			  mo.io_bytes = 0
		     then null
		     else xmlelement(&quot;stat
&quot;,
				xmlattributes('cell_offload_efficiency' as
					      &quot;name&quot;),
				round(mo.io_bytes /
				      decode(mo.io_inter_bytes,  0,  1,
					     mo.io_inter_bytes),  2))
		   end)))
	       else
	       xmlelement(
		 &quot;sql&quot;,
		 xmlattributes(mo.detail_level	       as &quot;detail&quot;,
			       mo.report_ref	       as &quot;report_ref&quot;,
			       mo.sql_id	       as &quot;sql_id&quot;,
			       to_char(mo.sql_exec_start,
				       :date_fmt)      as &quot;sql_exec_start&quot;,
			       mo.sql_exec_id	       as &quot;sql_exec_id&quot;),
		 decode(
		   mo.detail_level,
		   'P',
		   xmlforest(
		     mo.status			   as &quot;status&quot;,
		     to_char(mo.last_refresh_time,
			     :date_fmt) 	   as &quot;last_refresh_time&quot;,
		     mo.refresh_count		   as &quot;refresh_count&quot;,
		     mo.px_is_cross_instance	   as &quot;is_cross_instance&quot;,
		     mo.px_maxdop		   as &quot;dop&quot;,
		     mo.px_maxdop_instances	   as &quot;instances&quot;,
		     mo.px_servers_requested	   as &quot;px_servers_requested&quot;,
		     mo.px_servers_allocated	   as &quot;px_servers_allocated&quot;)),
		 decode(
		   mo.detail_level,
		   'F',
		   xmlforest(
		     mo.status			   as &quot;status&quot;,
		     to_char(mo.first_refresh_time,
			     :date_fmt) 	   as &quot;first_refresh_time&quot;,
		     to_char(mo.last_refresh_time,
			     :date_fmt) 	   as &quot;last_refresh_time&quot;,
		     mo.refresh_count		   as &quot;refresh_count&quot;,
		     mo.inst_id 		   as &quot;inst_id&quot;,
		     mo.sid			   as &quot;session_id&quot;,
		     mo.session_serial# 	   as &quot;session_serial&quot;,
		     mo.user#			   as &quot;user_id&quot;,
		     mo.username		   as &quot;user&quot;,
		     decode(mo.con_id,	0,  NULL,  mo.con_id)
						   as &quot;con_id&quot;,
		     mo.con_name		   as &quot;con_name&quot;,
		     mo.module			   as &quot;module&quot;,
		     mo.action			   as &quot;action&quot;,
		     mo.service_name		   as &quot;service&quot;,
		     mo.client_identifier	   as &quot;client_id&quot;,
		     mo.client_info		   as &quot;client_info&quot;,
		     mo.program 		   as &quot;program&quot;,
		     mo.sql_plan_hash_value	   as &quot;plan_hash&quot;,
		     mo.plsql_entry_object_id	   as &quot;plsql_entry_object_id&quot;,
		     mo.plsql_entry_subprogram_id
						as &quot;plsql_entry_subprogram_id&quot;,
		     mo.plsql_object_id 	as &quot;plsql_object_id&quot;,
		     mo.plsql_subprogram_id	as &quot;plsql_subprogram_id&quot;,
		     mo.rm_consumer_group	as &quot;rm_consumer_group&quot;,
		     mo.px_is_cross_instance	as &quot;is_cross_instance&quot;,
		     mo.px_maxdop		as &quot;dop&quot;,
		     mo.px_maxdop_instances	as &quot;instances&quot;,
		     mo.px_servers_requested	as &quot;px_servers_requested&quot;,
		     mo.px_servers_allocated	as &quot;px_servers_allocated&quot;,
		     mo.ecid			as &quot;ecid&quot;)),
		 case
		   when mo.error_number is null or
			mo.detail_level = 'N'
		   then null
		   else
		     xmlelement(&quot;error&quot;,
			      xmlattributes(mo.error_number   as &quot;number&quot;,
					    mo.error_facility as &quot;facility&quot;),
			      mo.error_message)
		 end,
		 case
		   when mo.rm_last_action is not null
		   then
		     xmlelement(&quot;rm_action&quot;,
		       xmlattributes(mo.rm_last_action	 as &quot;name&quot;,
				     mo.rm_last_action_reason as &quot;reason&quot;))
		 end,
		 case
		   when :sel_sqltext = 0 or
			mo.detail_level != 'F'
		   then null
		   else
		     xmlelement(
		       &quot;sql_text&quot;,
		       xmlattributes(mo.is_full_sqltext  as &quot;is_full&quot;),
		       to_clob(mo.sql_text))
		 end,
		 decode(mo.detail_level,  'N',	null,
		  xmlelement(&quot;stats&quot;,
		   xmlattributes('monitor' as &quot;type&quot;),
		   xmlelement(&quot;stat&quot;,
			      xmlattributes('duration' as &quot;name&quot;),
			      greatest(mo.duration,
				       least(mo.elapsed_time/1000000,  1),
				       ceil(mo.queuing_time/1000000))),
		   decode(mo.elapsed_time,  0,	NULL,
			  xmlelement(&quot;stat&quot;,
				   xmlattributes('elapsed_time' as &quot;name&quot;),
				   mo.elapsed_time)),
		   decode(mo.queuing_time,  0,	NULL,
			  xmlelement(&quot;stat&quot;,
				   xmlattributes('queuing_time' as &quot;name&quot;),
				   mo.queuing_time)),
		   decode(mo.cpu_time,	0,  NULL,
			  xmlelement(&quot;stat&quot;,
				    xmlattributes('cpu_time' as &quot;name&quot;),
				    mo.cpu_time)),
		   decode(mo.user_io_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('user_io_wait_time' as &quot;name&quot;),
				mo.user_io_wait_time)),
		   decode(mo.application_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('application_wait_time' as &quot;name&quot;),
			      mo.application_wait_time)),
		   decode(mo.concurrency_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('concurrency_wait_time' as &quot;name&quot;),
			      mo.concurrency_wait_time)),
		   decode(mo.cluster_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('cluster_wait_time' as &quot;name&quot;),
				mo.cluster_wait_time)),
		   decode(mo.plsql_exec_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('plsql_exec_time' as &quot;name&quot;),
				mo.plsql_exec_time)),
		   decode(mo.java_exec_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('java_exec_time' as &quot;name&quot;),
				mo.java_exec_time)),
		   decode(mo.other_wait_time,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('other_wait_time' as &quot;name&quot;),
				mo.other_wait_time)),
		   decode(mo.fetches,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('user_fetch_count' as &quot;name&quot;),
				mo.fetches)),
		   decode(mo.buffer_gets,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('buffer_gets' as &quot;name&quot;),
				mo.buffer_gets)),
		   decode(mo.read_reqs,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('read_reqs' as &quot;name&quot;),
				mo.read_reqs)),
		   decode(mo.read_bytes,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('read_bytes' as &quot;name&quot;),
				mo.read_bytes)),
		   decode(mo.write_reqs,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('write_reqs' as &quot;name&quot;),
				mo.write_reqs)),
		   decode(mo.write_bytes,  0,  NULL,
			  xmlelement(&quot;stat&quot;,
				xmlattributes('write_bytes' as &quot;name&quot;),
				mo.write_bytes)),
		   decode(:top_n_count,  NULL,	NULL,
			  xmlelement(&quot;stat&quot;,
			      xmlattributes('row_rank' as &quot;name&quot;),
			      mo.row_rank)),
		   case
		     when mo.io_inter_bytes is null or
			  mo.io_inter_bytes = mo.io_bytes or
			  mo.io_bytes = 0
		     then null
		     else xmlelement(&quot;stat&quot;,
				xmlattributes('cell_offload_efficiency' as
					      &quot;name&quot;),
				round(mo.io_bytes /
				      decode(mo.io_inter_bytes,  0,  1,
					     mo.io_inter_bytes),  2))
		   end)))
		end
		order by decode(mo.running,  'Y',  1,  2),
			 decode(mo.running,  'Y',  mo.sql_exec_start,
				mo.last_refresh_time) desc,
			 mo.sql_id,
			 mo.dbop_name,
			 mo.sql_exec_id,
			 mo.dbop_exec_id desc))FROM
	  (SELECT
	    decode(
	      :top_n_count,  null,  0,
	      (rank() over
		(order by
		  decode(
		    lower(nvl(:top_n_rankby,  'last_active_time')),
		    'duration',  mo0.duration,
		    'db_time',	mo0.elapsed_time,
		    'cpu_time',  mo0.cpu_time,
		    'io_requests',  (mo0.read_reqs + mo0.write_reqs),
		    'io_bytes',  mo0.io_bytes,
		    decode(mo0.running,  'Y',  0,
			   (mo0.last_refresh_time - sysdate) *
			    3600 * 24)) desc))) row_rank,
	    mo0.*
	  FROM
	    (SELECT
	       mo_qc.status status,
	       case
		 when mo_qc.status = 'EXECUTING' or mo_qc.status = 'QUEUED'
		 then 'Y'
		 else 'N'
	       end running,
	       case
		 when mo_qc.last_active &lt;
			      :show_detail_after
		 then 'N'
		 when mo_qc.first_refresh_time &lt;
			      :show_detail_after
		 then 'P'
		 else 'F'
	       end detail_level,
	       mo_qc.error_number,
	       mo_qc.error_facility,
	       mo_qc.error_message,
	       mo_qc.rm_last_action,
	       mo_qc.rm_last_action_reason,
	       case
		 when :need_url = 1 and mo_qc.dbop_name is not NULL
		 then
		     'main?report_level=all'||chr(38)||
		     'dbop_name='||mo_qc.dbop_name||chr(38)||
		     'inst_id='||mo_qc.inst_id||chr(38)||
		     'sql_exec_start='||to_char(mo_qc.sql_exec_start,
						:date_fmt_mod)||chr(38)||
		     'dbop_exec_id='||mo_qc.dbop_exec_id
		 when :need_url = 1
		 then
		     'main?report_level=all'||chr(38)||
		     'sql_id='||mo_qc.sql_id||chr(38)||
		     'inst_id='||mo_qc.inst_id||chr(38)||
		     'sql_exec_start='||to_char(mo_qc.sql_exec_start,
						:date_fmt_mod)||chr(38)||
		     'sql_exec_id='||mo_qc.sql_exec_id
		 else
		   null
	       end report_ref,
	       mo_qc.sql_id,
	       mo_qc.dbop_name,
	       mo_qc.sql_exec_start,
	       mo_qc.sql_exec_id,
	       mo_qc.dbop_exec_id,
	       mo_qc.first_refresh_time,
	       case when mo_px.last_refresh_time is null or
			 mo_qc.last_refresh_time &gt; mo_px.last_refresh_time
		    then mo_qc.last_refresh_time
		    else mo_px.last_refresh_time
	       end last_refresh_time,
	       mo_qc.refresh_count + nvl(mo_px.refresh_count,  0) refresh_count,
	       round((mo_qc.last_active - mo_qc.sql_exec_start) *
							24 * 3600) duration,
	       mo_qc.inst_id inst_id,
	       mo_qc.sid sid,
	       mo_qc.session_serial# session_serial#,
	       mo_qc.user# user#,
	       mo_qc.username username,
	       mo_qc.module module,
	       mo_qc.action action,
	       mo_qc.service_name service_name,
	       mo_qc.client_identifier client_identifier,
	       mo_qc.client_info client_info,
	       mo_qc.program program,
	       mo_qc.sql_plan_hash_value sql_plan_hash_value,
	       mo_qc.plsql_entry_object_id plsql_entry_object_id,
	       mo_qc.plsql_entry_subprogram_id plsql_entry_subprogram_id,
	       mo_qc.plsql_object_id plsql_object_id,
	       mo_qc.plsql_subprogram_id plsql_subprogram_id,
	       mo_qc.rm_consumer_group rm_consumer_group,
	       mo_qc.px_is_cross_instance px_is_cross_instance,
	       mo_qc.px_maxdop px_maxdop,
	       decode(mo_qc.px_is_cross_instance,  'Y',
		      mo_qc.px_maxdop_instances,  NULL) px_maxdop_instances,
	       mo_qc.px_servers_requested px_servers_requested,
	       mo_qc.px_servers_allocated px_servers_allocated,
	       decode(:max_sqltext_length,  null,
		      mo_qc.is_full_sqltext,
		      case
			when length(mo_qc.sql_text) &gt;
			     :max_sqltext_length
			then 'N'
			else 'Y'
		      end) is_full_sqltext,
	       decode(:max_sqltext_length,  null,
		      mo_qc.sql_text,
		      substr(mo_qc.sql_text,  1,
			     :max_sqltext_length)) sql_text,
	       nvl(mo_px.sum_elapsed_time,  0) +
		mo_qc.elapsed_time elapsed_time,
	       mo_qc.queuing_time queuing_time,
	       nvl(mo_px.sum_cpu_time,	0) + mo_qc.cpu_time cpu_time,
	       nvl(mo_px.sum_user_io_wait_time,  0) +
		   mo_qc.user_io_wait_time user_io_wait_time,
	       nvl(mo_px.sum_application_wait_time,  0) +
		   mo_qc.application_wait_time application_wait_time,
	       nvl(mo_px.sum_concurrency_wait_time,  0) +
		   mo_qc.concurrency_wait_time concurrency_wait_time,
	       nvl(mo_px.sum_cluster_wait_time,  0) +
		   mo_qc.cluster_wait_time cluster_wait_time,
	       nvl(mo_px.sum_plsql_exec_time,  0) +
		   mo_qc.plsql_exec_time plsql_exec_time,
	       nvl(mo_px.sum_java_exec_time,  0) +
		   mo_qc.java_exec_time java_exec_time,
	       nvl(mo_px.sum_other_wait_time,  0) +
		   mo_qc.other_wait_time other_wait_time,
	       nvl(mo_px.sum_fetches,  0) + mo_qc.fetches fetches,
	       nvl(mo_px.sum_buffer_gets,  0) + mo_qc.buffer_gets buffer_gets,
	       nvl(mo_px.sum_read_reqs,  0) + mo_qc.read_reqs read_reqs,
	       nvl(mo_px.sum_read_bytes,  0) + mo_qc.read_bytes read_bytes,
	       nvl(mo_px.sum_write_reqs,  0) + mo_qc.write_reqs write_reqs,
	       nvl(mo_px.sum_write_bytes,  0) + mo_qc.write_bytes write_bytes,
	       nvl(mo_px.sum_io_inter_bytes,  0) +
		   mo_qc.io_inter_bytes io_inter_bytes,
	       nvl(mo_px.sum_io_bytes,	0) + mo_qc.io_bytes io_bytes,
	       mo_qc.con_id,
	       mo_qc.con_name,
	       mo_qc.ecid
	     FROM
	     (SELECT /*+ no_merge */
		     mo1.inst_id,
		     mo1.sid,
		     mo1.session_serial#,
		     mo1.sql_id,
		     mo1.dbop_name,
		     nvl(mo1.sql_exec_start,
			 mo1.first_refresh_time) sql_exec_start,
		     mo1.sql_exec_id,
		     mo1.dbop_exec_id,
		     mo1.first_refresh_time,
		     mo1.last_refresh_time,
		     mo1.refresh_count,
		     case
		       when mo1.status = 'EXECUTING' or mo1.status = 'QUEUED'
		       then :new_last_refresh_time
		       else mo1.last_refresh_time
		     end last_active,
		     mo1.sql_plan_hash_value,
		     mo1.status,
		     mo1.error_number,
		     mo1.error_facility,
		     mo1.error_message,
		     mo1.rm_last_action,
		     mo1.rm_last_action_reason,
		     mo1.px_is_cross_instance,
		     mo1.px_maxdop,
		     mo1.px_maxdop_instances,
		     mo1.px_servers_requested,
		     mo1.px_servers_allocated,
		     mo1.is_full_sqltext,
		     mo1.sql_text,
		     mo1.user#,
		     mo1.username,
		     mo1.module,
		     mo1.action,
		     mo1.service_name,
		     mo1.client_identifier,
		     mo1.client_info,
		     mo1.program,
		     mo1.plsql_entry_object_id,
		     mo1.plsql_entry_subprogram_id,
		     mo1.plsql_object_id,
		     mo1.plsql_subprogram_id,
		     mo1.rm_consumer_group,
		     case
		     when
		       mo1.elapsed_time &lt; (mo1.cpu_time+
					   mo1.application_wait_time+
					   mo1.concurrency_wait_time+
					   mo1.cluster_wait_time+
					   mo1.user_io_wait_time+
					   mo1.queuing_time)
		     then
		       (mo1.cpu_time+
			mo1.application_wait_time+
			mo1.concurrency_wait_time+
			mo1.cluster_wait_time+
			mo1.user_io_wait_time+
			mo1.queuing_time)
		     else
			mo1.elapsed_time
		     end elapsed_time,
		     mo1.cpu_time cpu_time,
		     mo1.user_io_wait_time user_io_wait_time,
		     mo1.application_wait_time application_wait_time,
		     mo1.concurrency_wait_time concurrency_wait_time,
		     mo1.cluster_wait_time cluster_wait_time,
		     mo1.plsql_exec_time plsql_exec_time,
		     mo1.java_exec_time java_exec_time,
		     mo1.queuing_time queuing_time,
		     case
		     when
		       mo1.elapsed_time &lt; (mo1.cpu_time+
					   mo1.application_wait_time+
					   mo1.concurrency_wait_time+
					   mo1.cluster_wait_time+
					   mo1.user_io_wait_time+
					   mo1.queuing_time)
		     then
		       0
		     else
		       mo1.elapsed_time - (mo1.cpu_time+
					   mo1.application_wait_time+
					   mo1.concurrency_wait_time+
					   mo1.cluster_wait_time+
					   mo1.user_io_wait_time+
					   mo1.queuing_time)
		     end other_wait_time,
		     mo1.fetches,
		     mo1.buffer_gets,
		     mo1.physical_read_requests read_reqs,
		     mo1.physical_read_bytes read_bytes,
		     mo1.physical_write_requests write_reqs,
		     mo1.physical_write_bytes write_bytes,
		     nvl(mo1.physical_read_bytes,  0) +
		       nvl(mo1.physical_write_bytes,  0) io_bytes,
		     mo1.io_interconnect_bytes io_inter_bytes,
		     mo1.con_id,
		     mo1.con_name,
		     mo1.ecid
	     FROM    gv$all_sql_monitor mo1
	     WHERE   mo1.px_qcsid is NULL
	       AND   mo1.inst_id between :target_inst_id_low and
					 :target_inst_id_high
	       AND   mo1.sid =
			 nvl(:target_session_id,
			     mo1.sid)
	       AND   ((:dbop_name is NULL and
		      mo1.sql_id = nvl(:sql_id,
				      mo1.sql_id))
		     OR
		     (:sql_id is NULL and
		      mo1.dbop_name =
			nvl(:dbop_name,
			    mo1.dbop_name))
		     OR
		     (mo1.dbop_name = :dbop_name or
		      mo1.sql_id = :sql_id))
	       AND   mo1.session_serial# =
			 nvl(:target_session_serial,
			       mo1.session_serial#)
	       AND   (mo1.status = 'EXECUTING' or
		      mo1.status = 'QUEUED' or
		      mo1.last_refresh_time &gt;=
			  :active_since_filter)
	       AND (nvl(mo1.sql_exec_start,  mo1.first_refresh_time) between
			:target_first_exec_start and
			:target_last_exec_start)
	       AND   1 = nvl(1,  :dbsearch_value)
	     ) mo_qc,
	    (SELECT /*+ no_merge */
		     mo2.sql_id,
		     mo2.sql_exec_start,
		     mo2.sql_exec_id,
		     max(mo2.last_refresh_time) last_refresh_time,
		     sum(mo2.refresh_count) refresh_count,
		     sum(
		       case
			 when
			   mo2.elapsed_time &lt; (mo2.cpu_time+
					       mo2.application_wait_time+
					       mo2.concurrency_wait_time+
					       mo2.cluster_wait_time+
					       mo2.user_io_wait_time)
			 then
			   (mo2.cpu_time+
			    mo2.application_wait_time+
			    mo2.concurrency_wait_time+
			    mo2.cluster_wait_time+
			    mo2.user_io_wait_time)
			 else
			   mo2.elapsed_time
		       end) sum_elapsed_time,
		     sum(mo2.cpu_time) sum_cpu_time,
		     sum(mo2.user_io_wait_time) sum_user_io_wait_time,
		     sum(mo2.application_wait_time) sum_application_wait_time,
		     sum(mo2.concurrency_wait_time) sum_concurrency_wait_time,
		     sum(mo2.cluster_wait_time) sum_cluster_wait_time,
		     sum(mo2.plsql_exec_time) sum_plsql_exec_time,
		     sum(mo2.java_exec_time) sum_java_exec_time,
		     sum(
		       case
			 when
			   mo2.elapsed_time &lt; (mo2.cpu_time+
					       mo2.application_wait_time+
					       mo2.concurrency_wait_time+
					       mo2.cluster_wait_time+
					       mo2.user_io_wait_time)
			 then
			   0
			 else
			   mo2.elapsed_time - (mo2.cpu_time+
					       mo2.application_wait_time+
					       mo2.concurrency_wait_time+
					       mo2.cluster_wait_time+
					       mo2.user_io_wait_time)
		       end) sum_other_wait_time,
		     sum(mo2.fetches) sum_fetches,
		     sum(mo2.buffer_gets) sum_buffer_gets,
		     sum(mo2.physical_read_requests) sum_read_reqs,
		     sum(mo2.physical_read_bytes) sum_read_bytes,
		     sum(mo2.physical_write_requests) sum_write_reqs,
		     sum(mo2.physical_write_bytes) sum_write_bytes,
		     sum(nvl(mo2.physical_read_bytes,  0) +
			 nvl(mo2.physical_write_bytes,	0)) sum_io_bytes,
		     sum(nvl(mo2.io_interconnect_bytes,  0)) sum_io_inter_bytes
	     FROM    gv$all_sql_monitor mo2
	     WHERE   :detail_is_parallel is not null
	       AND   mo2.inst_id between
			  :px_inst_id_low and
			  :px_inst_id_high
	       AND   mo2.px_qcinst_id between
			  :target_inst_id_low and
			  :target_inst_id_high
	       AND   mo2.sql_id between
			  :detail_px_min_sqlid and
			  :detail_px_max_sqlid
	       AND   mo2.sql_exec_start &gt;=
			  :detail_px_first_exec_start
	       AND   (mo2.px_qcsid =
			 nvl(:target_session_id,
			     mo2.px_qcsid))
	       AND   mo2.con_id = nvl(:con_id,	mo2.con_id)
	       AND   1 = nvl(1,  :dbsearch_value)
	     GROUP BY mo2.sql_id,
		      mo2.sql_exec_start,
		      mo2.sql_exec_id
	    ) mo_px
	  WHERE mo_qc.sql_id	     = mo_px.sql_id(+)
	    AND mo_qc.sql_exec_start = mo_px.sql_exec_start(+)
	    AND mo_qc.sql_exec_id    = mo_px.sql_exec_id(+)) mo0) mo
	WHERE row_rank &lt;= nvl(:top_n_count,	1)
	</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fh5ufah919kun"></a>fh5ufah919kun</td><td class='awrc'><pre_sqltext class="awr">select /*+ index(idl_sb4$ i_idl_sb41) */ piece#, length, piece from idl_sb4$ where obj#=:1 and part=:2 and version=:3 order by piece#</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fn5s5p6hr6702"></a>fn5s5p6hr6702</td><td class='awrnc'><pre_sqltext class="awr">INSERT INTO wri$_adv_message_groups (task_id, id, seq, message#, fac, hdr, lm, nl, p1, p2, p3, p4, p5) VALUES (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="g4s4tnmn3d6ss"></a>g4s4tnmn3d6ss</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '185';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="g91ncg7p7wdzy"></a>g91ncg7p7wdzy</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '183';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="gb9s6mvbwrkpf"></a>gb9s6mvbwrkpf</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '76';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="gmtzgmxa3z2gp"></a>gmtzgmxa3z2gp</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '20';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="gqbp4bdj9hjjb"></a>gqbp4bdj9hjjb</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '58';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="grwydz59pu6mc"></a>grwydz59pu6mc</td><td class='awrnc'><pre_sqltext class="awr">select text from view$ where rowid=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="gw31j4b8zwtab"></a>gw31j4b8zwtab</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '23';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)
				v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_random_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
</table>
<p />
<a class="awr" href="#22">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="23"></a>
<h2 class="awr">
Instance Activity Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1200">Key Instance Activity Stats</a></li>
<li class="awr"><a class="awr" href="#1250">Instance Activity Stats</a></li>
<li class="awr"><a class="awr" href="#1300">Instance Activity Stats - Absolute Values</a></li>
<li class="awr"><a class="awr" href="#1400">Instance Activity Stats - Thread Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1200"></a>
<h3 class="awr">Key Instance Activity Stats</h3>
<ul>
<li class="awr"> Ordered by statistic name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Key Instance activity statistics. For each instance, activity total, activity per second, and activity per transaction are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>db block changes</td><td align="right" class='awrc'>3,087,250</td><td align="right" class='awrc'>8,503.95</td><td align="right" class='awrc'>8.15</td></tr>
<tr><td scope="row" class='awrnc'>execute count</td><td align="right" class='awrnc'>3,789,973</td><td align="right" class='awrnc'>10,439.63</td><td align="right" class='awrnc'>10.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block receive time</td><td align="right" class='awrc'>1,000</td><td align="right" class='awrc'>2.75</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks received</td><td align="right" class='awrnc'>666</td><td align="right" class='awrnc'>1.83</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block receive time</td><td align="right" class='awrc'>4,957</td><td align="right" class='awrc'>13.65</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks received</td><td align="right" class='awrnc'>3,782</td><td align="right" class='awrnc'>10.42</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>logons cumulative</td><td align="right" class='awrc'>110</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors cumulative</td><td align="right" class='awrnc'>4,185,174</td><td align="right" class='awrnc'>11,528.23</td><td align="right" class='awrnc'>11.04</td></tr>
<tr><td scope="row" class='awrc'>parse count (total)</td><td align="right" class='awrc'>4,844</td><td align="right" class='awrc'>13.34</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>646</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads</td><td align="right" class='awrc'>10,818,025</td><td align="right" class='awrc'>29,798.68</td><td align="right" class='awrc'>28.55</td></tr>
<tr><td scope="row" class='awrnc'>physical writes</td><td align="right" class='awrnc'>1,198,874</td><td align="right" class='awrnc'>3,302.35</td><td align="right" class='awrnc'>3.16</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>1,069,135,204</td><td align="right" class='awrc'>2,944,975.87</td><td align="right" class='awrc'>2,821.18</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>4,165,344</td><td align="right" class='awrnc'>11,473.61</td><td align="right" class='awrnc'>10.99</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>20,006,950</td><td align="right" class='awrc'>55,109.95</td><td align="right" class='awrc'>52.79</td></tr>
<tr><td scope="row" class='awrnc'>user calls</td><td align="right" class='awrnc'>1,264</td><td align="right" class='awrnc'>3.48</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>user commits</td><td align="right" class='awrc'>378,968</td><td align="right" class='awrc'>1,043.88</td><td align="right" class='awrc'>1.00</td></tr>
<tr><td scope="row" class='awrnc'>workarea executions - optimal</td><td align="right" class='awrnc'>2,360</td><td align="right" class='awrnc'>6.50</td><td align="right" class='awrnc'>0.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1250"></a>
<h3 class="awr">Instance Activity Stats</h3>
<ul>
<li class="awr"> Ordered by statistic name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Instance activity statistics. For each instance, activity total, activity per second, and activity per transaction are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>ASSM bg: segment fix monitor</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM cbk:blocks examined</td><td align="right" class='awrnc'>928</td><td align="right" class='awrnc'>2.56</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM cbk:blocks marked full</td><td align="right" class='awrc'>162</td><td align="right" class='awrc'>0.45</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L1 bitmaps examined</td><td align="right" class='awrnc'>785</td><td align="right" class='awrnc'>2.16</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:L2 bitmap full</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L2 bitmaps examined</td><td align="right" class='awrnc'>127</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search all</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search hint</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search steal</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:bump HWM</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free block</td><td align="right" class='awrc'>767</td><td align="right" class='awrc'>2.11</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free data block</td><td align="right" class='awrnc'>667</td><td align="right" class='awrnc'>1.84</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free index block</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:good hint</td><td align="right" class='awrnc'>655</td><td align="right" class='awrnc'>1.80</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM rsv:fill reserve</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ASSM wasted db state change</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Batched IO (bound) vector count</td><td align="right" class='awrc'>609</td><td align="right" class='awrc'>1.68</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO block miss count</td><td align="right" class='awrnc'>2,972,292</td><td align="right" class='awrnc'>8,187.30</td><td align="right" class='awrnc'>7.84</td></tr>
<tr><td scope="row" class='awrc'>Batched IO buffer defrag count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO double miss count</td><td align="right" class='awrnc'>2,972,085</td><td align="right" class='awrnc'>8,186.73</td><td align="right" class='awrnc'>7.84</td></tr>
<tr><td scope="row" class='awrc'>Batched IO same unit count</td><td align="right" class='awrc'>136</td><td align="right" class='awrc'>0.37</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO single block count</td><td align="right" class='awrnc'>2,972,698</td><td align="right" class='awrnc'>8,188.42</td><td align="right" class='awrnc'>7.84</td></tr>
<tr><td scope="row" class='awrc'>Batched IO vector block count</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO vector read count</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Block Cleanout Optim referenced</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>CCursor + sql area evicted</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>CPU used by this session</td><td align="right" class='awrc'>328,707</td><td align="right" class='awrc'>905.44</td><td align="right" class='awrc'>0.87</td></tr>
<tr><td scope="row" class='awrnc'>CPU used when call started</td><td align="right" class='awrnc'>346,732</td><td align="right" class='awrnc'>955.09</td><td align="right" class='awrnc'>0.91</td></tr>
<tr><td scope="row" class='awrc'>CR blocks created</td><td align="right" class='awrc'>43</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Cached Commit SCN referenced</td><td align="right" class='awrnc'>2,337,043</td><td align="right" class='awrnc'>6,437.48</td><td align="right" class='awrnc'>6.17</td></tr>
<tr><td scope="row" class='awrc'>Client Advertised Receive Window</td><td align="right" class='awrc'>833</td><td align="right" class='awrc'>2.29</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Client Advertised Send Window</td><td align="right" class='awrnc'>833</td><td align="right" class='awrnc'>2.29</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Client Path Maximum Transmission Unit(MTU)</td><td align="right" class='awrc'>172,550</td><td align="right" class='awrc'>475.30</td><td align="right" class='awrc'>0.46</td></tr>
<tr><td scope="row" class='awrnc'>Client Send Congestion Window</td><td align="right" class='awrnc'>1,142</td><td align="right" class='awrnc'>3.15</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Ack Received</td><td align="right" class='awrc'>1,031</td><td align="right" class='awrc'>2.84</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Data Received</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Data Sent</td><td align="right" class='awrc'>3,014</td><td align="right" class='awrc'>8.30</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Round Trip Time</td><td align="right" class='awrnc'>430,301</td><td align="right" class='awrnc'>1,185.28</td><td align="right" class='awrnc'>1.14</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Round Trip Time Variance</td><td align="right" class='awrc'>613,976</td><td align="right" class='awrc'>1,691.22</td><td align="right" class='awrc'>1.62</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Bytes Acked</td><td align="right" class='awrnc'>1,871,821</td><td align="right" class='awrnc'>5,156.01</td><td align="right" class='awrnc'>4.94</td></tr>
<tr><td scope="row" class='awrc'>Client Total Bytes Received</td><td align="right" class='awrc'>726,850</td><td align="right" class='awrc'>2,002.14</td><td align="right" class='awrc'>1.92</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Number of Retransmitted Packets</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Commit SCN cached</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DBWR checkpoint buffers written</td><td align="right" class='awrnc'>677</td><td align="right" class='awrnc'>1.86</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DBWR checkpoints</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DBWR fusion writes</td><td align="right" class='awrnc'>42</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DBWR object drop buffers written</td><td align="right" class='awrc'>46</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>DBWR thread checkpoint buffers written</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>DBWR transaction table writes</td><td align="right" class='awrc'>2,236</td><td align="right" class='awrc'>6.16</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>DBWR undo block writes</td><td align="right" class='awrnc'>87,617</td><td align="right" class='awrnc'>241.34</td><td align="right" class='awrnc'>0.23</td></tr>
<tr><td scope="row" class='awrc'>DFO trees parallelized</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Effective IO time</td><td align="right" class='awrnc'>4,331</td><td align="right" class='awrnc'>11.93</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>HSC Heap Segment Block Changes</td><td align="right" class='awrc'>1,133,731</td><td align="right" class='awrc'>3,122.91</td><td align="right" class='awrc'>2.99</td></tr>
<tr><td scope="row" class='awrnc'>Heap Segment Array Inserts</td><td align="right" class='awrnc'>192</td><td align="right" class='awrnc'>0.53</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Heap Segment Array Updates</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Heatmap Blklevel Flush Task Count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc req</td><td align="right" class='awrc'>130</td><td align="right" class='awrc'>0.36</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc space (block)</td><td align="right" class='awrnc'>142,671,872</td><td align="right" class='awrnc'>392,995.40</td><td align="right" class='awrnc'>376.47</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc time (ms)</td><td align="right" class='awrc'>7,123,875</td><td align="right" class='awrc'>19,623.00</td><td align="right" class='awrc'>18.80</td></tr>
<tr><td scope="row" class='awrnc'>KTFB apply req</td><td align="right" class='awrnc'>132</td><td align="right" class='awrnc'>0.36</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTFB apply time (ms)</td><td align="right" class='awrc'>3,613</td><td align="right" class='awrc'>9.95</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>KTFB free req</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTFB free space (block)</td><td align="right" class='awrc'>168</td><td align="right" class='awrc'>0.46</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KTFB free time (ms)</td><td align="right" class='awrnc'>309</td><td align="right" class='awrnc'>0.85</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>LOB table id lookup cache misses</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Number of read IOs issued</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX local messages recv'd</td><td align="right" class='awrc'>952</td><td align="right" class='awrc'>2.62</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX local messages sent</td><td align="right" class='awrnc'>952</td><td align="right" class='awrnc'>2.62</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>PX remote messages recv'd</td><td align="right" class='awrc'>745</td><td align="right" class='awrc'>2.05</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>PX remote messages sent</td><td align="right" class='awrnc'>475</td><td align="right" class='awrnc'>1.31</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Parallel operations not downgraded</td><td align="right" class='awrc'>94</td><td align="right" class='awrc'>0.26</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Requests to/from client</td><td align="right" class='awrnc'>365</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SMON posted for undo segment shrink</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net roundtrips to/from client</td><td align="right" class='awrnc'>247</td><td align="right" class='awrnc'>0.68</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>active txn count during cleanout</td><td align="right" class='awrc'>244</td><td align="right" class='awrc'>0.67</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>background checkpoints completed</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>background checkpoints started</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>background timeouts</td><td align="right" class='awrnc'>3,460</td><td align="right" class='awrnc'>9.53</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>blocks cleaned out using minact</td><td align="right" class='awrc'>803,723</td><td align="right" class='awrc'>2,213.89</td><td align="right" class='awrc'>2.12</td></tr>
<tr><td scope="row" class='awrnc'>branch node splits</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>buffer is not pinned count</td><td align="right" class='awrc'>23,367,663</td><td align="right" class='awrc'>64,367.17</td><td align="right" class='awrc'>61.66</td></tr>
<tr><td scope="row" class='awrnc'>buffer is pinned count</td><td align="right" class='awrnc'>7,995,580</td><td align="right" class='awrnc'>22,024.15</td><td align="right" class='awrnc'>21.10</td></tr>
<tr><td scope="row" class='awrc'>bytes received via SQL*Net from client</td><td align="right" class='awrc'>119,948</td><td align="right" class='awrc'>330.40</td><td align="right" class='awrc'>0.32</td></tr>
<tr><td scope="row" class='awrnc'>bytes sent via SQL*Net to client</td><td align="right" class='awrnc'>66,478</td><td align="right" class='awrnc'>183.12</td><td align="right" class='awrnc'>0.18</td></tr>
<tr><td scope="row" class='awrc'>calls to get snapshot scn: kcmgss</td><td align="right" class='awrc'>4,193,997</td><td align="right" class='awrc'>11,552.53</td><td align="right" class='awrc'>11.07</td></tr>
<tr><td scope="row" class='awrnc'>calls to kcmgas</td><td align="right" class='awrnc'>477,319</td><td align="right" class='awrnc'>1,314.79</td><td align="right" class='awrnc'>1.26</td></tr>
<tr><td scope="row" class='awrc'>calls to kcmgcs</td><td align="right" class='awrc'>4,347</td><td align="right" class='awrc'>11.97</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>cell physical IO interconnect bytes</td><td align="right" class='awrnc'>111,813,127,680</td><td align="right" class='awrnc'>307,993,751.82</td><td align="right" class='awrnc'>295,046.36</td></tr>
<tr><td scope="row" class='awrc'>change write time</td><td align="right" class='awrc'>2,338</td><td align="right" class='awrc'>6.44</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>cleanout - number of ktugct calls</td><td align="right" class='awrnc'>911</td><td align="right" class='awrnc'>2.51</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>cleanouts and rollbacks - consistent read gets</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>cleanouts only - consistent read gets</td><td align="right" class='awrnc'>537</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>cluster key scan block gets</td><td align="right" class='awrc'>2,876</td><td align="right" class='awrc'>7.92</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>cluster key scans</td><td align="right" class='awrnc'>1,862</td><td align="right" class='awrnc'>5.13</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit batch/immediate performed</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit batch/immediate requested</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: block lost</td><td align="right" class='awrc'>150</td><td align="right" class='awrc'>0.41</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: buffer being written</td><td align="right" class='awrnc'>712</td><td align="right" class='awrnc'>1.96</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: callback failure</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: cannot pin</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit cleanouts</td><td align="right" class='awrc'>1,133,625</td><td align="right" class='awrc'>3,122.62</td><td align="right" class='awrc'>2.99</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanouts successfully completed</td><td align="right" class='awrnc'>1,132,753</td><td align="right" class='awrnc'>3,120.21</td><td align="right" class='awrnc'>2.99</td></tr>
<tr><td scope="row" class='awrc'>commit immediate performed</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>commit immediate requested</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>commit txn count during cleanout</td><td align="right" class='awrc'>771</td><td align="right" class='awrc'>2.12</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>consistent changes</td><td align="right" class='awrnc'>11,214</td><td align="right" class='awrnc'>30.89</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>consistent gets</td><td align="right" class='awrc'>17,949,115</td><td align="right" class='awrc'>49,441.56</td><td align="right" class='awrc'>47.36</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets direct</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>consistent gets examination</td><td align="right" class='awrc'>3,823,128</td><td align="right" class='awrc'>10,530.96</td><td align="right" class='awrc'>10.09</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets examination (fastpath)</td><td align="right" class='awrnc'>3,821,794</td><td align="right" class='awrnc'>10,527.29</td><td align="right" class='awrnc'>10.08</td></tr>
<tr><td scope="row" class='awrc'>consistent gets from cache</td><td align="right" class='awrc'>17,949,110</td><td align="right" class='awrc'>49,441.54</td><td align="right" class='awrc'>47.36</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets pin</td><td align="right" class='awrnc'>14,125,983</td><td align="right" class='awrnc'>38,910.59</td><td align="right" class='awrnc'>37.27</td></tr>
<tr><td scope="row" class='awrc'>consistent gets pin (fastpath)</td><td align="right" class='awrc'>4,339,819</td><td align="right" class='awrc'>11,954.21</td><td align="right" class='awrc'>11.45</td></tr>
<tr><td scope="row" class='awrnc'>cursor authentications</td><td align="right" class='awrnc'>309</td><td align="right" class='awrnc'>0.85</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>cursor reload failures</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>data blocks consistent reads - undo records applied</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>db block changes</td><td align="right" class='awrc'>3,087,250</td><td align="right" class='awrc'>8,503.95</td><td align="right" class='awrc'>8.15</td></tr>
<tr><td scope="row" class='awrnc'>db block gets</td><td align="right" class='awrnc'>2,056,836</td><td align="right" class='awrnc'>5,665.64</td><td align="right" class='awrnc'>5.43</td></tr>
<tr><td scope="row" class='awrc'>db block gets direct</td><td align="right" class='awrc'>1,683</td><td align="right" class='awrc'>4.64</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>db block gets from cache</td><td align="right" class='awrnc'>2,055,148</td><td align="right" class='awrnc'>5,660.99</td><td align="right" class='awrnc'>5.42</td></tr>
<tr><td scope="row" class='awrc'>db block gets from cache (fastpath)</td><td align="right" class='awrc'>870,375</td><td align="right" class='awrc'>2,397.48</td><td align="right" class='awrc'>2.30</td></tr>
<tr><td scope="row" class='awrnc'>deferred (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>1,060,065</td><td align="right" class='awrnc'>2,919.99</td><td align="right" class='awrnc'>2.80</td></tr>
<tr><td scope="row" class='awrc'>dirty buffers inspected</td><td align="right" class='awrc'>1,130,570</td><td align="right" class='awrc'>3,114.20</td><td align="right" class='awrc'>2.98</td></tr>
<tr><td scope="row" class='awrnc'>enqueue conversions</td><td align="right" class='awrnc'>952</td><td align="right" class='awrnc'>2.62</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enqueue releases</td><td align="right" class='awrc'>766,529</td><td align="right" class='awrc'>2,111.43</td><td align="right" class='awrc'>2.02</td></tr>
<tr><td scope="row" class='awrnc'>enqueue requests</td><td align="right" class='awrnc'>766,362</td><td align="right" class='awrnc'>2,110.97</td><td align="right" class='awrnc'>2.02</td></tr>
<tr><td scope="row" class='awrc'>enqueue timeouts</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enqueue waits</td><td align="right" class='awrnc'>484</td><td align="right" class='awrnc'>1.33</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>exchange deadlocks</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>execute count</td><td align="right" class='awrnc'>3,789,973</td><td align="right" class='awrnc'>10,439.63</td><td align="right" class='awrnc'>10.00</td></tr>
<tr><td scope="row" class='awrc'>fastpath consistent get quota limit</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>file io service time</td><td align="right" class='awrnc'>761,742,185</td><td align="right" class='awrnc'>2,098,249.45</td><td align="right" class='awrnc'>2,010.04</td></tr>
<tr><td scope="row" class='awrc'>free buffer inspected</td><td align="right" class='awrc'>19,269,897</td><td align="right" class='awrc'>53,079.71</td><td align="right" class='awrc'>50.85</td></tr>
<tr><td scope="row" class='awrnc'>free buffer requested</td><td align="right" class='awrnc'>11,165,179</td><td align="right" class='awrnc'>30,754.93</td><td align="right" class='awrnc'>29.46</td></tr>
<tr><td scope="row" class='awrc'>gc blocks compressed</td><td align="right" class='awrc'>3,817</td><td align="right" class='awrc'>10.51</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc blocks lost</td><td align="right" class='awrnc'>2,695</td><td align="right" class='awrnc'>7.42</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc cleanout applied</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cleanout saved</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks created</td><td align="right" class='awrc'>228,800</td><td align="right" class='awrc'>630.24</td><td align="right" class='awrc'>0.60</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks expanded</td><td align="right" class='awrnc'>178</td><td align="right" class='awrnc'>0.49</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks shrunk</td><td align="right" class='awrc'>8,405</td><td align="right" class='awrc'>23.15</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block build time</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr block flush time</td><td align="right" class='awrc'>1,695</td><td align="right" class='awrc'>4.67</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block receive time</td><td align="right" class='awrnc'>1,000</td><td align="right" class='awrnc'>2.75</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks built</td><td align="right" class='awrc'>521</td><td align="right" class='awrc'>1.44</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks flushed</td><td align="right" class='awrnc'>134</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks received</td><td align="right" class='awrc'>666</td><td align="right" class='awrc'>1.83</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks served</td><td align="right" class='awrnc'>1,943</td><td align="right" class='awrnc'>5.35</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc cr bypass requests</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multiblock grant time</td><td align="right" class='awrnc'>453</td><td align="right" class='awrnc'>1.25</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc cr multiblock grants received</td><td align="right" class='awrc'>492</td><td align="right" class='awrc'>1.36</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current block flush time</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current block pin time</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current block receive time</td><td align="right" class='awrnc'>4,957</td><td align="right" class='awrnc'>13.65</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks flushed</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks pinned</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks received</td><td align="right" class='awrc'>3,782</td><td align="right" class='awrc'>10.42</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks served</td><td align="right" class='awrnc'>2,358</td><td align="right" class='awrnc'>6.50</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc force cr read cr</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc force cr read current</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc kbytes saved</td><td align="right" class='awrc'>21,122</td><td align="right" class='awrc'>58.18</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>gc kbytes sent</td><td align="right" class='awrnc'>13,286</td><td align="right" class='awrnc'>36.60</td><td align="right" class='awrnc'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gc local grants</td><td align="right" class='awrc'>9,089,246</td><td align="right" class='awrc'>25,036.69</td><td align="right" class='awrc'>23.98</td></tr>
<tr><td scope="row" class='awrnc'>gc merge pi bg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc merge pi fg</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc no change made</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc read time waited</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc read wait timeouts</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc read waits</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc reader bypass grants</td><td align="right" class='awrnc'>70</td><td align="right" class='awrnc'>0.19</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gc reader bypass waits</td><td align="right" class='awrc'>46</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gc remote grants</td><td align="right" class='awrnc'>1,770,064</td><td align="right" class='awrnc'>4,875.71</td><td align="right" class='awrnc'>4.67</td></tr>
<tr><td scope="row" class='awrc'>gc status messages received</td><td align="right" class='awrc'>313,645</td><td align="right" class='awrc'>863.95</td><td align="right" class='awrc'>0.83</td></tr>
<tr><td scope="row" class='awrnc'>gc status messages sent</td><td align="right" class='awrnc'>1,610</td><td align="right" class='awrnc'>4.43</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs affinity lock failures</td><td align="right" class='awrc'>14,077</td><td align="right" class='awrc'>38.78</td><td align="right" class='awrc'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gcs affinity lock grants</td><td align="right" class='awrnc'>6,887,164</td><td align="right" class='awrnc'>18,970.97</td><td align="right" class='awrnc'>18.17</td></tr>
<tr><td scope="row" class='awrc'>gcs anti-locks created</td><td align="right" class='awrc'>228,680</td><td align="right" class='awrc'>629.91</td><td align="right" class='awrc'>0.60</td></tr>
<tr><td scope="row" class='awrnc'>gcs data block access records</td><td align="right" class='awrnc'>10,809,613</td><td align="right" class='awrnc'>29,775.51</td><td align="right" class='awrnc'>28.52</td></tr>
<tr><td scope="row" class='awrc'>gcs messages sent</td><td align="right" class='awrc'>5,252,554</td><td align="right" class='awrc'>14,468.37</td><td align="right" class='awrc'>13.86</td></tr>
<tr><td scope="row" class='awrnc'>gcs read-mostly lock failures</td><td align="right" class='awrnc'>222,161</td><td align="right" class='awrnc'>611.95</td><td align="right" class='awrnc'>0.59</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly lock grants</td><td align="right" class='awrc'>1,922,600</td><td align="right" class='awrc'>5,295.88</td><td align="right" class='awrc'>5.07</td></tr>
<tr><td scope="row" class='awrnc'>ges messages sent</td><td align="right" class='awrnc'>4,655</td><td align="right" class='awrnc'>12.82</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>global enqueue get time</td><td align="right" class='awrc'>50,463</td><td align="right" class='awrc'>139.00</td><td align="right" class='awrc'>0.13</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue gets async</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global enqueue gets sync</td><td align="right" class='awrc'>467,341</td><td align="right" class='awrc'>1,287.31</td><td align="right" class='awrc'>1.23</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue releases</td><td align="right" class='awrnc'>468,407</td><td align="right" class='awrnc'>1,290.25</td><td align="right" class='awrnc'>1.24</td></tr>
<tr><td scope="row" class='awrc'>heap block compress</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>hot buffers moved to head of LRU</td><td align="right" class='awrnc'>147,064</td><td align="right" class='awrnc'>405.09</td><td align="right" class='awrnc'>0.39</td></tr>
<tr><td scope="row" class='awrc'>immediate (CR) block cleanout applications</td><td align="right" class='awrc'>537</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>immediate (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>263</td><td align="right" class='awrnc'>0.72</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>index crx state invalidation</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>index crx upgrade (positioned)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>index fast full scans (full)</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>index fetch by key</td><td align="right" class='awrnc'>8,820</td><td align="right" class='awrnc'>24.30</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>index range scans</td><td align="right" class='awrc'>3,791,450</td><td align="right" class='awrc'>10,443.70</td><td align="right" class='awrc'>10.00</td></tr>
<tr><td scope="row" class='awrnc'>leaf node 90-10 splits</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>leaf node splits</td><td align="right" class='awrc'>98</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>lob reads</td><td align="right" class='awrnc'>935</td><td align="right" class='awrnc'>2.58</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>lob writes</td><td align="right" class='awrc'>7,220</td><td align="right" class='awrc'>19.89</td><td align="right" class='awrc'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>lob writes unaligned</td><td align="right" class='awrnc'>7,219</td><td align="right" class='awrnc'>19.89</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>logical read bytes from cache</td><td align="right" class='awrc'>163,874,553,856</td><td align="right" class='awrc'>451,399,041.57</td><td align="right" class='awrc'>432,423.20</td></tr>
<tr><td scope="row" class='awrnc'>logons cumulative</td><td align="right" class='awrnc'>110</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>max cf enq hold time</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>messages received</td><td align="right" class='awrnc'>33,137</td><td align="right" class='awrnc'>91.28</td><td align="right" class='awrnc'>0.09</td></tr>
<tr><td scope="row" class='awrc'>messages sent</td><td align="right" class='awrc'>33,129</td><td align="right" class='awrc'>91.26</td><td align="right" class='awrc'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>min active SCN optimization applied on CR</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>no buffer to keep pinned count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>no work - consistent read gets</td><td align="right" class='awrnc'>14,060,700</td><td align="right" class='awrnc'>38,730.76</td><td align="right" class='awrnc'>37.10</td></tr>
<tr><td scope="row" class='awrc'>non-idle wait count</td><td align="right" class='awrc'>15,228,177</td><td align="right" class='awrc'>41,946.63</td><td align="right" class='awrc'>40.18</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors cumulative</td><td align="right" class='awrnc'>4,185,174</td><td align="right" class='awrnc'>11,528.23</td><td align="right" class='awrnc'>11.04</td></tr>
<tr><td scope="row" class='awrc'>parse count (describe)</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>0.20</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parse count (failures)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>parse count (hard)</td><td align="right" class='awrc'>1,048</td><td align="right" class='awrc'>2.89</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parse count (total)</td><td align="right" class='awrnc'>4,844</td><td align="right" class='awrnc'>13.34</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>parse time cpu</td><td align="right" class='awrc'>185</td><td align="right" class='awrc'>0.51</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>646</td><td align="right" class='awrnc'>1.78</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical read IO requests</td><td align="right" class='awrc'>10,815,881</td><td align="right" class='awrc'>29,792.78</td><td align="right" class='awrc'>28.54</td></tr>
<tr><td scope="row" class='awrnc'>physical read bytes</td><td align="right" class='awrnc'>88,621,211,648</td><td align="right" class='awrnc'>244,110,687.47</td><td align="right" class='awrnc'>233,848.80</td></tr>
<tr><td scope="row" class='awrc'>physical read total IO requests</td><td align="right" class='awrc'>10,819,319</td><td align="right" class='awrc'>29,802.25</td><td align="right" class='awrc'>28.55</td></tr>
<tr><td scope="row" class='awrnc'>physical read total bytes</td><td align="right" class='awrnc'>89,538,762,240</td><td align="right" class='awrnc'>246,638,117.44</td><td align="right" class='awrnc'>236,269.98</td></tr>
<tr><td scope="row" class='awrc'>physical read total multi block requests</td><td align="right" class='awrc'>869</td><td align="right" class='awrc'>2.39</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical reads</td><td align="right" class='awrnc'>10,818,025</td><td align="right" class='awrnc'>29,798.68</td><td align="right" class='awrnc'>28.55</td></tr>
<tr><td scope="row" class='awrc'>physical reads cache</td><td align="right" class='awrc'>10,818,007</td><td align="right" class='awrc'>29,798.63</td><td align="right" class='awrc'>28.55</td></tr>
<tr><td scope="row" class='awrnc'>physical reads cache prefetch</td><td align="right" class='awrnc'>2,150</td><td align="right" class='awrnc'>5.92</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>physical reads direct</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical reads direct (lob)</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical reads direct temporary tablespace</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical reads prefetch warmup</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical write IO requests</td><td align="right" class='awrc'>1,132,021</td><td align="right" class='awrc'>3,118.20</td><td align="right" class='awrc'>2.99</td></tr>
<tr><td scope="row" class='awrnc'>physical write bytes</td><td align="right" class='awrnc'>9,821,175,808</td><td align="right" class='awrnc'>27,052,823.29</td><td align="right" class='awrnc'>25,915.58</td></tr>
<tr><td scope="row" class='awrc'>physical write total IO requests</td><td align="right" class='awrc'>1,175,977</td><td align="right" class='awrc'>3,239.28</td><td align="right" class='awrc'>3.10</td></tr>
<tr><td scope="row" class='awrnc'>physical write total bytes</td><td align="right" class='awrnc'>11,134,884,864</td><td align="right" class='awrnc'>30,671,487.66</td><td align="right" class='awrnc'>29,382.12</td></tr>
<tr><td scope="row" class='awrc'>physical write total multi block requests</td><td align="right" class='awrc'>1,248</td><td align="right" class='awrc'>3.44</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical writes</td><td align="right" class='awrnc'>1,198,874</td><td align="right" class='awrnc'>3,302.35</td><td align="right" class='awrnc'>3.16</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct</td><td align="right" class='awrc'>1,868</td><td align="right" class='awrc'>5.15</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct (lob)</td><td align="right" class='awrnc'>184</td><td align="right" class='awrnc'>0.51</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct temporary tablespace</td><td align="right" class='awrc'>1,501</td><td align="right" class='awrc'>4.13</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>physical writes from cache</td><td align="right" class='awrnc'>1,197,006</td><td align="right" class='awrnc'>3,297.20</td><td align="right" class='awrnc'>3.16</td></tr>
<tr><td scope="row" class='awrc'>physical writes non checkpoint</td><td align="right" class='awrc'>1,129,052</td><td align="right" class='awrc'>3,110.02</td><td align="right" class='awrc'>2.98</td></tr>
<tr><td scope="row" class='awrnc'>pinned buffers inspected</td><td align="right" class='awrnc'>29,100</td><td align="right" class='awrnc'>80.16</td><td align="right" class='awrnc'>0.08</td></tr>
<tr><td scope="row" class='awrc'>prefetch warmup blocks aged out before use</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>prefetched blocks aged out before use</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>process last non-idle time</td><td align="right" class='awrc'>363</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>recursive calls</td><td align="right" class='awrnc'>4,604,907</td><td align="right" class='awrnc'>12,684.40</td><td align="right" class='awrnc'>12.15</td></tr>
<tr><td scope="row" class='awrc'>recursive cpu usage</td><td align="right" class='awrc'>296,229</td><td align="right" class='awrc'>815.97</td><td align="right" class='awrc'>0.78</td></tr>
<tr><td scope="row" class='awrnc'>redo KB read</td><td align="right" class='awrnc'>552,960</td><td align="right" class='awrnc'>1,523.15</td><td align="right" class='awrnc'>1.46</td></tr>
<tr><td scope="row" class='awrc'>redo blocks checksummed by FG (exclusive)</td><td align="right" class='awrc'>921,268</td><td align="right" class='awrc'>2,537.67</td><td align="right" class='awrc'>2.43</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written</td><td align="right" class='awrnc'>2,168,517</td><td align="right" class='awrnc'>5,973.27</td><td align="right" class='awrnc'>5.72</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written (group 0)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks written (group 1)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo buffer allocation retries</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo entries</td><td align="right" class='awrnc'>1,537,157</td><td align="right" class='awrnc'>4,234.16</td><td align="right" class='awrnc'>4.06</td></tr>
<tr><td scope="row" class='awrc'>redo log space requests</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo size</td><td align="right" class='awrnc'>1,069,135,204</td><td align="right" class='awrnc'>2,944,975.87</td><td align="right" class='awrnc'>2,821.18</td></tr>
<tr><td scope="row" class='awrc'>redo size for direct writes</td><td align="right" class='awrc'>120</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo subscn max counts</td><td align="right" class='awrnc'>725</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo synch time</td><td align="right" class='awrc'>194</td><td align="right" class='awrc'>0.53</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time (usec)</td><td align="right" class='awrnc'>1,809,218</td><td align="right" class='awrnc'>4,983.56</td><td align="right" class='awrnc'>4.77</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead (usec)</td><td align="right" class='awrc'>4,857</td><td align="right" class='awrc'>13.38</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead count (  2ms)</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo synch writes</td><td align="right" class='awrc'>120</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo wastage</td><td align="right" class='awrnc'>5,000,780</td><td align="right" class='awrnc'>13,774.85</td><td align="right" class='awrnc'>13.20</td></tr>
<tr><td scope="row" class='awrc'>redo write active strands</td><td align="right" class='awrc'>20,743</td><td align="right" class='awrc'>57.14</td><td align="right" class='awrc'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>redo write broadcast ack count</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write broadcast ack time</td><td align="right" class='awrc'>52,564</td><td align="right" class='awrc'>144.79</td><td align="right" class='awrc'>0.14</td></tr>
<tr><td scope="row" class='awrnc'>redo write finish time</td><td align="right" class='awrnc'>237,401,842</td><td align="right" class='awrnc'>653,932.91</td><td align="right" class='awrnc'>626.44</td></tr>
<tr><td scope="row" class='awrc'>redo write gather time</td><td align="right" class='awrc'>756,463</td><td align="right" class='awrc'>2,083.71</td><td align="right" class='awrc'>2.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write info find</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write schedule time</td><td align="right" class='awrc'>857,174</td><td align="right" class='awrc'>2,361.12</td><td align="right" class='awrc'>2.26</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (   4KB)</td><td align="right" class='awrnc'>1,024</td><td align="right" class='awrnc'>2.82</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (   8KB)</td><td align="right" class='awrc'>1,547</td><td align="right" class='awrc'>4.26</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (  16KB)</td><td align="right" class='awrnc'>1,767</td><td align="right" class='awrnc'>4.87</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (  32KB)</td><td align="right" class='awrc'>2,284</td><td align="right" class='awrc'>6.29</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 128KB)</td><td align="right" class='awrnc'>5,132</td><td align="right" class='awrnc'>14.14</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 256KB)</td><td align="right" class='awrc'>394</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 512KB)</td><td align="right" class='awrnc'>118</td><td align="right" class='awrnc'>0.33</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (1024KB)</td><td align="right" class='awrc'>121</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (inf)</td><td align="right" class='awrnc'>256</td><td align="right" class='awrnc'>0.71</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write time</td><td align="right" class='awrc'>23,745</td><td align="right" class='awrc'>65.41</td><td align="right" class='awrc'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>redo write time (usec)</td><td align="right" class='awrnc'>237,454,050</td><td align="right" class='awrnc'>654,076.72</td><td align="right" class='awrnc'>626.58</td></tr>
<tr><td scope="row" class='awrc'>redo write total time</td><td align="right" class='awrc'>237,770,083</td><td align="right" class='awrc'>654,947.25</td><td align="right" class='awrc'>627.41</td></tr>
<tr><td scope="row" class='awrnc'>redo write worker delay (usec)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo write worker delay count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo writes</td><td align="right" class='awrnc'>12,643</td><td align="right" class='awrnc'>34.83</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>redo writes (group 0)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>redo writes (group 1)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>redo writes adaptive all</td><td align="right" class='awrc'>12,642</td><td align="right" class='awrc'>34.82</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>redo writes adaptive worker</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>rollback changes - undo records applied</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>rollbacks only - consistent read gets</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>rows fetched via callback</td><td align="right" class='awrc'>5,669</td><td align="right" class='awrc'>15.62</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>saved cleanouts</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>saved cleanouts successfully completed</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile allocation bytes</td><td align="right" class='awrnc'>1,507,328</td><td align="right" class='awrnc'>4,152.00</td><td align="right" class='awrnc'>3.98</td></tr>
<tr><td scope="row" class='awrc'>securefile allocation chunks</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile bytes non-transformed</td><td align="right" class='awrnc'>1,272,350</td><td align="right" class='awrnc'>3,504.74</td><td align="right" class='awrnc'>3.36</td></tr>
<tr><td scope="row" class='awrc'>securefile direct read bytes</td><td align="right" class='awrc'>114,688</td><td align="right" class='awrc'>315.91</td><td align="right" class='awrc'>0.30</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct read ops</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>securefile direct write bytes</td><td align="right" class='awrc'>1,507,328</td><td align="right" class='awrc'>4,152.00</td><td align="right" class='awrc'>3.98</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct write ops</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>securefile number of non-transformed flushes</td><td align="right" class='awrc'>68</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment cfs allocations</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment chunks allocation from dispenser</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser allocations</td><td align="right" class='awrnc'>65</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment dispenser load empty</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser load tasks</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc bytes</td><td align="right" class='awrc'>1,048,576</td><td align="right" class='awrc'>2,888.34</td><td align="right" class='awrc'>2.77</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc ops</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc tasks</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc time (ms)</td><td align="right" class='awrnc'>561</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc ufs2cfs bytes</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>segment total chunk allocation</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>session connect time</td><td align="right" class='awrc'>407</td><td align="right" class='awrc'>1.12</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>session cursor cache hits</td><td align="right" class='awrnc'>4,165,344</td><td align="right" class='awrnc'>11,473.61</td><td align="right" class='awrnc'>10.99</td></tr>
<tr><td scope="row" class='awrc'>session logical reads</td><td align="right" class='awrc'>20,006,950</td><td align="right" class='awrc'>55,109.95</td><td align="right" class='awrc'>52.79</td></tr>
<tr><td scope="row" class='awrnc'>shared hash latch upgrades - no wait</td><td align="right" class='awrnc'>1,241,100</td><td align="right" class='awrnc'>3,418.66</td><td align="right" class='awrnc'>3.27</td></tr>
<tr><td scope="row" class='awrc'>shared hash latch upgrades - wait</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>shared io pool buffer get failure</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>shared io pool buffer get success</td><td align="right" class='awrc'>79</td><td align="right" class='awrc'>0.22</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>sorts (memory)</td><td align="right" class='awrnc'>2,286</td><td align="right" class='awrnc'>6.30</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>sorts (rows)</td><td align="right" class='awrc'>1,641,470</td><td align="right" class='awrc'>4,521.50</td><td align="right" class='awrc'>4.33</td></tr>
<tr><td scope="row" class='awrnc'>sql area evicted</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>sql area purged</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>summed dirty queue length</td><td align="right" class='awrnc'>12,509,403</td><td align="right" class='awrnc'>34,457.65</td><td align="right" class='awrnc'>33.01</td></tr>
<tr><td scope="row" class='awrc'>switch current caused by our pin</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>switch current to new buffer</td><td align="right" class='awrnc'>62</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>table fetch by rowid</td><td align="right" class='awrc'>13,217,858</td><td align="right" class='awrc'>36,409.12</td><td align="right" class='awrc'>34.88</td></tr>
<tr><td scope="row" class='awrnc'>table fetch continued row</td><td align="right" class='awrnc'>486</td><td align="right" class='awrnc'>1.34</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>table scan blocks gotten</td><td align="right" class='awrc'>17,438</td><td align="right" class='awrc'>48.03</td><td align="right" class='awrc'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>table scan disk non-IMC rows gotten</td><td align="right" class='awrnc'>1,343,750</td><td align="right" class='awrnc'>3,701.41</td><td align="right" class='awrnc'>3.55</td></tr>
<tr><td scope="row" class='awrc'>table scan rows gotten</td><td align="right" class='awrc'>1,343,750</td><td align="right" class='awrc'>3,701.41</td><td align="right" class='awrc'>3.55</td></tr>
<tr><td scope="row" class='awrnc'>table scans (direct read)</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>table scans (long tables)</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>table scans (short tables)</td><td align="right" class='awrnc'>862</td><td align="right" class='awrnc'>2.37</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>temp space allocated (bytes)</td><td align="right" class='awrc'>5,242,880</td><td align="right" class='awrc'>14,441.72</td><td align="right" class='awrc'>13.83</td></tr>
<tr><td scope="row" class='awrnc'>total cf enq hold time</td><td align="right" class='awrnc'>2,703</td><td align="right" class='awrnc'>7.45</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>total number of cf enq holders</td><td align="right" class='awrc'>122</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>total number of times SMON posted</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction lock background get time</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction lock background gets</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction lock foreground requests</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>transaction rollbacks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>transaction tables consistent reads - undo records applied</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>undo change vector size</td><td align="right" class='awrnc'>427,737,488</td><td align="right" class='awrnc'>1,178,220.09</td><td align="right" class='awrnc'>1,128.69</td></tr>
<tr><td scope="row" class='awrc'>user calls</td><td align="right" class='awrc'>1,264</td><td align="right" class='awrc'>3.48</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>user commits</td><td align="right" class='awrnc'>378,968</td><td align="right" class='awrnc'>1,043.88</td><td align="right" class='awrnc'>1.00</td></tr>
<tr><td scope="row" class='awrc'>user logons cumulative</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>user logouts cumulative</td><td align="right" class='awrnc'>119</td><td align="right" class='awrnc'>0.33</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>workarea executions - optimal</td><td align="right" class='awrc'>2,360</td><td align="right" class='awrc'>6.50</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>write clones created in background</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>write clones created in foreground</td><td align="right" class='awrc'>42,870</td><td align="right" class='awrc'>118.09</td><td align="right" class='awrc'>0.11</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1300"></a>
<h3 class="awr">Instance Activity Stats - Absolute Values</h3>
<ul>
<li class="awr"> Statistics with absolute values (should not be diffed)</li>
</ul>
<table border="0" class="tdiff" summary="This table displays absolute values of instance-related features. For each instance, activity begin value and end value are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Begin Value</th><th class="awrbg" scope="col">End Value</th></tr>
<tr><td scope="row" class='awrc'>logons current</td><td align="right" class='awrc'>257</td><td align="right" class='awrc'>139</td></tr>
<tr><td scope="row" class='awrnc'>opened cursors current</td><td align="right" class='awrnc'>714</td><td align="right" class='awrnc'>121</td></tr>
<tr><td scope="row" class='awrc'>session cursor cache count</td><td align="right" class='awrc'>35,397</td><td align="right" class='awrc'>35,712</td></tr>
<tr><td scope="row" class='awrnc'>session pga memory</td><td align="right" class='awrnc'>1,638,576,872</td><td align="right" class='awrnc'>954,297,848</td></tr>
<tr><td scope="row" class='awrc'>session pga memory max</td><td align="right" class='awrc'>1,872,822,280</td><td align="right" class='awrc'>1,170,210,232</td></tr>
<tr><td scope="row" class='awrnc'>session uga memory</td><td align="right" class='awrnc'>964,126,448</td><td align="right" class='awrnc'>646,239,064</td></tr>
<tr><td scope="row" class='awrc'>session uga memory max</td><td align="right" class='awrc'>8,652,933,296</td><td align="right" class='awrc'>9,336,877,000</td></tr>
<tr><td scope="row" class='awrnc'>workarea memory allocated</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>308</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1400"></a>
<h3 class="awr">Instance Activity Stats - Thread Activity</h3>
<ul>
<li class="awr"> Statistics identified by '(derived)' come from sources other than SYSSTAT</li>
</ul>
<table border="0" class="tdiff" summary="This table displays thread activity stats in the instance. For each activity , total number of activity and activity per hour are displayed"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Hour</th></tr>
<tr><td scope="row" class='awrc'>log switches (derived)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#23">Back to Instance Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="24"></a>
<h2 class="awr">
IO Stats
</h2>
<ul>
<li class="awr"><a class="awr" href="#8760">IOStat by Function summary</a></li>
<li class="awr"><a class="awr" href="#8770">IOStat by Filetype summary</a></li>
<li class="awr"><a class="awr" href="#8780">IOStat by Function/Filetype summary</a></li>
<li class="awr"><a class="awr" href="#1700">Tablespace IO Stats</a></li>
<li class="awr"><a class="awr" href="#1800">File IO Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8760"></a>
<h3 class="awr">IOStat by Function summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> ordered by (Data Read + Write) desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the IO Statistics for different functions. IO stats includes amount of reads and writes, requests per second, data per second, wait count and average wait time"><tr><th class="awrbg" scope="col">Function Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time </th></tr>
<tr><td scope="row" class='awrc'>Buffer Cache Reads</td><td align="right" class='awrc'>77.8G</td><td align="right" class='awrc'>28068.79</td><td align="right" class='awrc'>219.311M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>10.2M</td><td align="right" class='awrc'>364.02us</td></tr>
<tr><td scope="row" class='awrnc'>DBWR</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>8.6G</td><td align="right" class='awrnc'>2938.96</td><td align="right" class='awrnc'>24.292M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>LGWR</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1005M</td><td align="right" class='awrc'>55.25</td><td align="right" class='awrc'>2.768M</td><td align="right" class='awrc'>12.1K</td><td align="right" class='awrc'>18.56ms</td></tr>
<tr><td scope="row" class='awrnc'>Others</td><td align="right" class='awrnc'>843M</td><td align="right" class='awrnc'>7.78</td><td align="right" class='awrnc'>2.322M</td><td align="right" class='awrnc'>13M</td><td align="right" class='awrnc'>1.08</td><td align="right" class='awrnc'>.036M</td><td align="right" class='awrnc'>1699</td><td align="right" class='awrnc'>8.19ms</td></tr>
<tr><td scope="row" class='awrc'>Direct Writes</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>8M</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>.022M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Direct Reads</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TOTAL:</td><td align="right" class='awrc'>78.6G</td><td align="right" class='awrc'>28076.61</td><td align="right" class='awrc'>221.633M</td><td align="right" class='awrc'>9.6G</td><td align="right" class='awrc'>2995.46</td><td align="right" class='awrc'>27.118M</td><td align="right" class='awrc'>10.2M</td><td align="right" class='awrc'>386.97us</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8770"></a>
<h3 class="awr">IOStat by Filetype summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> Small Read and Large Read are average service times </li>
<li class="awr"> Ordered by (Data Read + Write) desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays IO Statistics for different file types, such as data files, control files, log files and temp files. IO Statistics include amount of reads and writes, requests per second, data per second, wait count and average wait time"><tr><th class="awrbg" scope="col">Filetype Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Small Read</th><th class="awrbg" scope="col">Large Read</th></tr>
<tr><td scope="row" class='awrc'>Data File</td><td align="right" class='awrc'>77.5G</td><td align="right" class='awrc'>27984.65</td><td align="right" class='awrc'>218.664M</td><td align="right" class='awrc'>8.6G</td><td align="right" class='awrc'>2926.34</td><td align="right" class='awrc'>24.19M</td><td align="right" class='awrc'>47.99us</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Log File</td><td align="right" class='awrnc'>812M</td><td align="right" class='awrnc'>2.44</td><td align="right" class='awrnc'>2.237M</td><td align="right" class='awrnc'>1002M</td><td align="right" class='awrnc'>55.09</td><td align="right" class='awrnc'>2.76M</td><td align="right" class='awrnc'>13.70us</td><td align="right" class='awrnc'>1601.50ms</td></tr>
<tr><td scope="row" class='awrc'>Control File</td><td align="right" class='awrc'>30M</td><td align="right" class='awrc'>5.32</td><td align="right" class='awrc'>.083M</td><td align="right" class='awrc'>4M</td><td align="right" class='awrc'>0.81</td><td align="right" class='awrc'>.011M</td><td align="right" class='awrc'>17.10us</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Temp File</td><td align="right" class='awrnc'>17M</td><td align="right" class='awrnc'>1.24</td><td align="right" class='awrnc'>.047M</td><td align="right" class='awrnc'>13M</td><td align="right" class='awrnc'>0.56</td><td align="right" class='awrnc'>.036M</td><td align="right" class='awrnc'>19.05us</td><td align="right" class='awrnc'>.00ns</td></tr>
<tr><td scope="row" class='awrc'>TOTAL:</td><td align="right" class='awrc'>78.4G</td><td align="right" class='awrc'>27993.64</td><td align="right" class='awrc'>221.03M</td><td align="right" class='awrc'>9.6G</td><td align="right" class='awrc'>2982.79</td><td align="right" class='awrc'>26.997M</td><td align="right" class='awrc'>47.98us</td><td align="right" class='awrc'>1546.28ms</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8780"></a>
<h3 class="awr">IOStat by Function/Filetype summary</h3>
<ul>
<li class="awr"> 'Data' columns suffixed with M,G,T,P are in multiples of 1024	   other columns suffixed with K,M,G,T,P are in multiples of 1000 </li>
<li class="awr"> Ordered by (Data Read + Write) desc for each function</li>
</ul>
<table border="0" class="tdiff" summary="IOStat by Function/Filetype summary. . 'Data' columns suffixed with M,G,T,P are in multiples of 1024 other columns suffixed with K,M,G,T,P are in multiples of 1000. Ordered by (Data Read + Write) desc for each function"><tr><th class="awrbg" scope="col">Function/File Name</th><th class="awrbg" scope="col">Reads: Data</th><th class="awrbg" scope="col">Reqs	 per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Writes: Data</th><th class="awrbg" scope="col">Reqs   per sec</th><th class="awrbg" scope="col">Data   per sec</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time	</th></tr>
<tr><td scope="row" class='awrc'>
Buffer Cache Reads
</td><td align="right" class='awrc'>77.5G</td><td align="right" class='awrc'>27979.83</td><td align="right" class='awrc'>218.617M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>10.1M</td><td align="right" class='awrc'>364.15us</td></tr>
<tr><td scope="row" class='awrnc'>
 Buffer Cache Reads (Data File)
</td><td align="right" class='awrnc'>77.5G</td><td align="right" class='awrnc'>27978.60</td><td align="right" class='awrnc'>218.57M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>10.1M</td><td align="right" class='awrnc'>364.15us</td></tr>
<tr><td scope="row" class='awrc'>
 Buffer Cache Reads (Temp File)
</td><td align="right" class='awrc'>17M</td><td align="right" class='awrc'>1.23</td><td align="right" class='awrc'>.047M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>447</td><td align="right" class='awrc'>260.66us</td></tr>
<tr><td scope="row" class='awrnc'>
DBWR
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>8.6G</td><td align="right" class='awrnc'>2925.17</td><td align="right" class='awrnc'>24.179M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
 DBWR (Data File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>8.6G</td><td align="right" class='awrc'>2924.86</td><td align="right" class='awrc'>24.177M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
 DBWR (Temp File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>1M</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>.003M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
 LGWR (Log File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1002M</td><td align="right" class='awrc'>55.06</td><td align="right" class='awrc'>2.76M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
LGWR
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>1002M</td><td align="right" class='awrnc'>55.06</td><td align="right" class='awrnc'>2.76M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
Others
</td><td align="right" class='awrc'>843M</td><td align="right" class='awrc'>7.78</td><td align="right" class='awrc'>2.322M</td><td align="right" class='awrc'>13M</td><td align="right" class='awrc'>1.08</td><td align="right" class='awrc'>.036M</td><td align="right" class='awrc'>1552</td><td align="right" class='awrc'>236.77us</td></tr>
<tr><td scope="row" class='awrnc'>
 Others (Log File)
</td><td align="right" class='awrnc'>813M</td><td align="right" class='awrnc'>2.44</td><td align="right" class='awrnc'>2.239M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>73</td><td align="right" class='awrnc'>240.86us</td></tr>
<tr><td scope="row" class='awrc'>
 Others (Control File)
</td><td align="right" class='awrc'>30M</td><td align="right" class='awrc'>5.32</td><td align="right" class='awrc'>.083M</td><td align="right" class='awrc'>5M</td><td align="right" class='awrc'>0.81</td><td align="right" class='awrc'>.014M</td><td align="right" class='awrc'>1471</td><td align="right" class='awrc'>237.07us</td></tr>
<tr><td scope="row" class='awrnc'>
 Others (Temp File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>7M</td><td align="right" class='awrnc'>0.24</td><td align="right" class='awrnc'>.019M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
 Others (Data File)
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>1M</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>.003M</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>143.88us</td></tr>
<tr><td scope="row" class='awrnc'>
 Direct Writes (Data File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>3M</td><td align="right" class='awrnc'>0.16</td><td align="right" class='awrnc'>.008M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
Direct Writes
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>3M</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>.008M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
 Direct Reads (Data File)
</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0M</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>
Direct Reads
</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0M</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>
TOTAL:
</td><td align="right" class='awrnc'>78.3G</td><td align="right" class='awrnc'>27987.65</td><td align="right" class='awrnc'>220.939M</td><td align="right" class='awrnc'>9.6G</td><td align="right" class='awrnc'>2981.46</td><td align="right" class='awrnc'>26.983M</td><td align="right" class='awrnc'>10.2M</td><td align="right" class='awrnc'>364.13us</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1700"></a>
<h3 class="awr">Tablespace IO Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1800"></a>
<h3 class="awr">File IO Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#24">Back to IO Stats</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="25"></a>
<h2 class="awr">
Buffer Pool Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#1900">Buffer Pool Statistics</a></li>
<li class="awr"><a class="awr" href="#1910">Checkpoint Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1900"></a>
<h3 class="awr">Buffer Pool Statistics</h3>
<ul>
<li class="awr"> Standard block size Pools  D: default,  K: keep,  R: recycle </li>
<li class="awr"> Default Pools for other block sizes: 2k, 4k, 8k, 16k, 32k</li>
</ul>
<table border="0" class="tdiff" summary="This table displays buffer pool statistics for different types of buffers, such as default, keep, and recycle. Statistics include number of buffers, % Pool hit, buffer gets, physical reads, physical writes, free buffer wait, etc."><tr><th class="awrbg" scope="col">P</th><th class="awrbg" scope="col">Number of Buffers</th><th class="awrbg" scope="col">Pool Hit%</th><th class="awrbg" scope="col">Buffer Gets</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">Free Buff Wait</th><th class="awrbg" scope="col">Writ Comp Wait</th><th class="awrbg" scope="col">Buffer Busy Waits</th></tr>
<tr><td scope="row" class='awrc'>D</td><td align="right" class='awrc'>121,095</td><td align="right" class='awrc'>46</td><td align="right" class='awrc'>20,108,050</td><td align="right" class='awrc'>10,876,435</td><td align="right" class='awrc'>1,229,738</td><td align="right" class='awrc'>286407</td><td align="right" class='awrc'>61190</td><td align="right" class='awrc'>180</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#25">Back to Buffer Pool Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="1910"></a>
<h3 class="awr">Checkpoint Activity</h3>
<ul>
<li class="awr">Total Physical Writes:			  1,198,874</li>
</ul>
<table border="0" class="tdiff" summary="This table displays checkpoint activity statistics. Statistics include MTTR writes, log size writes, autotune checkpoint writes, etc."><tr><th class="awrbg" scope="col">MTTR Writes</th><th class="awrbg" scope="col">Log Size Writes</th><th class="awrbg" scope="col">Log Ckpt Writes</th><th class="awrbg" scope="col">Other Settings Writes</th><th class="awrbg" scope="col">Autotune Ckpt Writes</th><th class="awrbg" scope="col">Thread Ckpt Writes</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>677</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#25">Back to Buffer Pool Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="26"></a>
<h2 class="awr">
Advisory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#2000">Instance Recovery Stats</a></li>
<li class="awr"><a class="awr" href="#2010">MTTR Advisory</a></li>
<li class="awr"><a class="awr" href="#2100">Buffer Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#2400">PGA Aggr Summary</a></li>
<li class="awr"><a class="awr" href="#2600">PGA Aggr Target Stats</a></li>
<li class="awr"><a class="awr" href="#2700">PGA Aggr Target Histogram</a></li>
<li class="awr"><a class="awr" href="#2800">PGA Memory Advisory</a></li>
<li class="awr"><a class="awr" href="#5500">Shared Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#6900">SGA Target Advisory</a></li>
<li class="awr"><a class="awr" href="#7100">Streams Pool Advisory</a></li>
<li class="awr"><a class="awr" href="#5700">Java Pool Advisory</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2000"></a>
<h3 class="awr">Instance Recovery Stats</h3>
<ul>
<li class="awr"> B: Begin Snapshot,  E: End Snapshot</li>
</ul>
<table border="0" class="tdiff" summary="This table displays instance recovery statistics at begin and end snapshot. It displays target MTTR, estimated MTTR, recovery estimated IO per second, redo blocks, target redo blocks, etc."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Targt MTTR  (s) </th><th class="awrbg" scope="col">Estd MTTR (s)</th><th class="awrbg" scope="col">Recovery Estd IOs</th><th class="awrbg" scope="col">Actual  RedoBlks</th><th class="awrbg" scope="col">Target	RedoBlks</th><th class="awrbg" scope="col">Log Sz  RedoBlks</th><th class="awrbg" scope="col">Log Ckpt Timeout RedoBlks</th><th class="awrbg" scope="col">Log Ckpt Interval RedoBlks</th><th class="awrbg" scope="col">Opt Log Sz(M)</th><th class="awrbg" scope="col">Estd RAC Avail Time</th></tr>
<tr><td scope="row" class='awrc'>B</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>32801</td><td align="right" class='awrc'>526519</td><td align="right" class='awrc'>84934656</td><td align="right" class='awrc'>84934656</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>12</td></tr>
<tr><td scope="row" class='awrnc'>E</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>101</td><td align="right" class='awrnc'>19331</td><td align="right" class='awrnc'>2013573</td><td align="right" class='awrnc'>926782</td><td align="right" class='awrnc'>84934656</td><td align="right" class='awrnc'>926782</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>48</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2010"></a>
<h3 class="awr">MTTR Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2100"></a>
<h3 class="awr">Buffer Pool Advisory</h3>
<ul>
<li class="awr"> Only rows with estimated physical reads &gt;0 are displayed </li>
<li class="awr"> ordered by Block Size, Buffers For Estimate</li>
</ul>
<table border="0" class="tdiff" summary="This table displays MTTR advisory. It displays size for estimate, dirty limit, estimated cache writes, estimated cache write factor, estimated total write, estimated total IO per second, etc."><tr><th class="awrbg" scope="col">P</th><th class="awrbg" scope="col">Size for Est (M)</th><th class="awrbg" scope="col">Size Factor</th><th class="awrbg" scope="col">Buffers (thousands)</th><th class="awrbg" scope="col">Est Phys Read Factor</th><th class="awrbg" scope="col">Estimated Phys Reads (thousands)</th><th class="awrbg" scope="col">Est Phys Read Time</th><th class="awrbg" scope="col">Est %DBtime for Rds</th></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>96</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>1.15</td><td align="right" class='awrc'>191,108</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>97858.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>192</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>1.10</td><td align="right" class='awrnc'>182,854</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>93631.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>288</td><td align="right" class='awrc'>0.28</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>1.07</td><td align="right" class='awrc'>178,259</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>91278.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>384</td><td align="right" class='awrnc'>0.37</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>1.06</td><td align="right" class='awrnc'>175,434</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>89831.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>480</td><td align="right" class='awrc'>0.46</td><td align="right" class='awrc'>56</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>173,473</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>88827.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>576</td><td align="right" class='awrnc'>0.55</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>1.04</td><td align="right" class='awrnc'>171,944</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>88044.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>672</td><td align="right" class='awrc'>0.65</td><td align="right" class='awrc'>78</td><td align="right" class='awrc'>1.03</td><td align="right" class='awrc'>170,632</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>87372.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>768</td><td align="right" class='awrnc'>0.74</td><td align="right" class='awrnc'>89</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>169,409</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>86746.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>864</td><td align="right" class='awrc'>0.83</td><td align="right" class='awrc'>101</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>168,204</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>86128.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>960</td><td align="right" class='awrnc'>0.92</td><td align="right" class='awrnc'>112</td><td align="right" class='awrnc'>1.01</td><td align="right" class='awrnc'>167,028</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>85526.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>1,040</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>121</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>166,097</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>85050.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>1,056</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>123</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>165,890</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>84944.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>1,152</td><td align="right" class='awrc'>1.11</td><td align="right" class='awrc'>134</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>164,788</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>84379.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>1,248</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>145</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>163,724</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>83834.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>1,344</td><td align="right" class='awrc'>1.29</td><td align="right" class='awrc'>156</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>162,691</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>83305.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>1,440</td><td align="right" class='awrnc'>1.38</td><td align="right" class='awrnc'>168</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>161,673</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>82784.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>1,536</td><td align="right" class='awrc'>1.48</td><td align="right" class='awrc'>179</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>160,670</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>82270.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>1,632</td><td align="right" class='awrnc'>1.57</td><td align="right" class='awrnc'>190</td><td align="right" class='awrnc'>0.96</td><td align="right" class='awrnc'>159,679</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>81763.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>1,728</td><td align="right" class='awrc'>1.66</td><td align="right" class='awrc'>201</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>158,699</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>81261.00</td></tr>
<tr><td class='awrnc'>D</td><td align="right" class='awrnc'>1,824</td><td align="right" class='awrnc'>1.75</td><td align="right" class='awrnc'>212</td><td align="right" class='awrnc'>0.95</td><td align="right" class='awrnc'>157,725</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>80762.00</td></tr>
<tr><td class='awrc'>D</td><td align="right" class='awrc'>1,920</td><td align="right" class='awrc'>1.85</td><td align="right" class='awrc'>224</td><td align="right" class='awrc'>0.94</td><td align="right" class='awrc'>156,759</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>80267.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2400"></a>
<h3 class="awr">PGA Aggr Summary</h3>
<ul>
<li class="awr"> PGA cache hit % - percentage of W/A (WorkArea) data processed only in-memory</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate summary. It includes PGA cache hits, total wait time, average time for each class of buffer wait and WorkArea data processed."><tr><th class="awrbg" scope="col">PGA Cache Hit %</th><th class="awrbg" scope="col">W/A MB Processed</th><th class="awrbg" scope="col">Extra W/A MB Read/Written</th></tr>
<tr><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>481</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2600"></a>
<h3 class="awr">PGA Aggr Target Stats</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap (rows dentified with B or E contain data	 which is absolute i.e. not diffed over the interval) </li>
<li class="awr"> Auto PGA Target - actual workarea memory target </li>
<li class="awr"> W/A PGA Used	 - amount of memory used for all Workareas (manual + auto) </li>
<li class="awr"> %PGA W/A Mem	 - percentage of PGA memory allocated to workareas </li>
<li class="awr"> %Auto W/A Mem	 - percentage of workarea memory controlled by Auto Mem Mgmt </li>
<li class="awr"> %Man W/A Mem	 - percentage of workarea memory under manual control</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate target statistics for begin and end snapshot. Statistics include PGA aggregate target, auto PGA target, PGA memory allocation, etc."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">PGA Aggr Target(M)</th><th class="awrbg" scope="col">Auto PGA Target(M)</th><th class="awrbg" scope="col">PGA Mem  Alloc(M) </th><th class="awrbg" scope="col">W/A PGA  Used(M) </th><th class="awrbg" scope="col">%PGA W/A Mem</th><th class="awrbg" scope="col">%Auto W/A Mem</th><th class="awrbg" scope="col">%Man W/A Mem</th><th class="awrbg" scope="col">Global Mem Bound(K)</th></tr>
<tr><td scope="row" class='awrc'>B</td><td align="right" class='awrc'>4,174</td><td align="right" class='awrc'>1,611</td><td align="right" class='awrc'>2,939.54</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>427,410</td></tr>
<tr><td scope="row" class='awrnc'>E</td><td align="right" class='awrnc'>4,174</td><td align="right" class='awrnc'>2,180</td><td align="right" class='awrnc'>2,147.07</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>427,410</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2700"></a>
<h3 class="awr">PGA Aggr Target Histogram</h3>
<ul>
<li class="awr"> Optimal Executions are purely in-memory operations</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA aggregate target histograms."><tr><th class="awrbg" scope="col">  Low Optimal</th><th class="awrbg" scope="col">  High Optimal</th><th class="awrbg" scope="col">Total Execs</th><th class="awrbg" scope="col">Optimal Execs</th><th class="awrbg" scope="col">1-Pass Execs</th><th class="awrbg" scope="col">M-Pass Execs</th></tr>
<tr><td class='awrc'>2K</td><td class='awrc'>4K</td><td align="right" class='awrc'>1,701</td><td align="right" class='awrc'>1,701</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>64K</td><td class='awrnc'>128K</td><td align="right" class='awrnc'>149</td><td align="right" class='awrnc'>149</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>128K</td><td class='awrc'>256K</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>256K</td><td class='awrnc'>512K</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>512K</td><td class='awrc'>1024K</td><td align="right" class='awrc'>234</td><td align="right" class='awrc'>234</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>1M</td><td class='awrnc'>2M</td><td align="right" class='awrnc'>190</td><td align="right" class='awrnc'>190</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>2M</td><td class='awrc'>4M</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>8M</td><td class='awrnc'>16M</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2800"></a>
<h3 class="awr">PGA Memory Advisory</h3>
<ul>
<li class="awr"> When using Auto Memory Mgmt, minimally choose a pga_aggregate_target value    where Estd PGA Overalloc Count is 0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays PGA memory advisory for different estimated PGA target sizes. It displays size factor, Workarea MB processed, estimated PGA cache hit, estimated extra Workarea MB read written to disk, etc., for each target size."><tr><th class="awrbg" scope="col">PGA Target Est (MB)</th><th class="awrbg" scope="col">Size Factr</th><th class="awrbg" scope="col">W/A MB Processed</th><th class="awrbg" scope="col">Estd Extra	 W/A MB Read/	Written to Disk </th><th class="awrbg" scope="col">Estd PGA Cache Hit %</th><th class="awrbg" scope="col">Estd PGA Overalloc Count</th><th class="awrbg" scope="col">Estd Time</th></tr>
<tr><td align="right" scope="row" class='awrc'>522</td><td align="right" class='awrc'>0.13</td><td align="right" class='awrc'>15,843.44</td><td align="right" class='awrc'>671.47</td><td align="right" class='awrc'>96.00</td><td align="right" class='awrc'>91</td><td align="right" class='awrc'>117,862,692</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,044</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>15,843.44</td><td align="right" class='awrnc'>671.47</td><td align="right" class='awrnc'>96.00</td><td align="right" class='awrnc'>91</td><td align="right" class='awrnc'>117,862,692</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,087</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>15,843.44</td><td align="right" class='awrc'>258.59</td><td align="right" class='awrc'>98.00</td><td align="right" class='awrc'>39</td><td align="right" class='awrc'>114,916,025</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,131</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>15,843.44</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>113,070,563</td></tr>
<tr><td align="right" scope="row" class='awrc'>4,174</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>15,843.44</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>113,070,563</td></tr>
<tr><td align="right" scope="row" class='awrnc'>5,009</td><td align="right" class='awrnc'>1.20</td><td align="right" class='awrnc'>15,843.44</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>113,070,563</td></tr>
<tr><td align="right" scope="row" class='awrc'>5,844</td><td align="right" class='awrc'>1.40</td><td align="right" class='awrc'>15,843.44</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>113,070,563</td></tr>
<tr><td align="right" scope="row" class='awrnc'>6,678</td><td align="right" class='awrnc'>1.60</td><td align="right" class='awrnc'>15,843.44</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>113,070,563</td></tr>
<tr><td align="right" scope="row" class='awrc'>7,513</td><td align="right" class='awrc'>1.80</td><td align="right" class='awrc'>15,843.44</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>113,070,563</td></tr>
<tr><td align="right" scope="row" class='awrnc'>8,348</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>15,843.44</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>113,070,563</td></tr>
<tr><td align="right" scope="row" class='awrc'>12,522</td><td align="right" class='awrc'>3.00</td><td align="right" class='awrc'>15,843.44</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>113,070,563</td></tr>
<tr><td align="right" scope="row" class='awrnc'>16,696</td><td align="right" class='awrnc'>4.00</td><td align="right" class='awrnc'>15,843.44</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>113,070,563</td></tr>
<tr><td align="right" scope="row" class='awrc'>25,044</td><td align="right" class='awrc'>6.00</td><td align="right" class='awrc'>15,843.44</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>113,070,563</td></tr>
<tr><td align="right" scope="row" class='awrnc'>33,392</td><td align="right" class='awrnc'>8.00</td><td align="right" class='awrnc'>15,843.44</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>113,070,563</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5500"></a>
<h3 class="awr">Shared Pool Advisory</h3>
<ul>
<li class="awr"> SP: Shared Pool     Est LC: Estimated Library Cache   Factr: Factor </li>
<li class="awr"> Note there is often a 1:Many correlation between a single logical object    in the Library Cache, and the physical number of memory objects associated    with it.  Therefore comparing the number of Lib Cache objects (e.g. in     v$librarycache), with the number of Lib Cache Memory Objects is invalid.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared pool advisory. Size factor, estimated library cache size, estimated library cache memory object and other info is displayed for different shared pool sizes"><tr><th class="awrbg" scope="col">Shared Pool Size(M)</th><th class="awrbg" scope="col">SP Size Factr</th><th class="awrbg" scope="col">Est LC Size (M)</th><th class="awrbg" scope="col">Est LC Mem Obj</th><th class="awrbg" scope="col">Est LC Time Saved (s)</th><th class="awrbg" scope="col">Est LC Time Saved Factr</th><th class="awrbg" scope="col">Est LC Load Time (s)</th><th class="awrbg" scope="col">Est LC Load Time Factr</th><th class="awrbg" scope="col">Est LC Mem Obj Hits (K)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1,616</td><td align="right" class='awrc'>0.89</td><td align="right" class='awrc'>77</td><td align="right" class='awrc'>2,720</td><td align="right" class='awrc'>156,851</td><td align="right" class='awrc'>0.59</td><td align="right" class='awrc'>112,920</td><td align="right" class='awrc'>44.60</td><td align="right" class='awrc'>9,318</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,648</td><td align="right" class='awrnc'>0.91</td><td align="right" class='awrnc'>107</td><td align="right" class='awrnc'>4,548</td><td align="right" class='awrnc'>173,880</td><td align="right" class='awrnc'>0.65</td><td align="right" class='awrnc'>95,891</td><td align="right" class='awrnc'>37.87</td><td align="right" class='awrnc'>10,795</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,664</td><td align="right" class='awrc'>0.92</td><td align="right" class='awrc'>122</td><td align="right" class='awrc'>5,030</td><td align="right" class='awrc'>179,209</td><td align="right" class='awrc'>0.67</td><td align="right" class='awrc'>90,562</td><td align="right" class='awrc'>35.77</td><td align="right" class='awrc'>11,493</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,680</td><td align="right" class='awrnc'>0.93</td><td align="right" class='awrnc'>137</td><td align="right" class='awrnc'>5,832</td><td align="right" class='awrnc'>204,859</td><td align="right" class='awrnc'>0.77</td><td align="right" class='awrnc'>64,912</td><td align="right" class='awrnc'>25.64</td><td align="right" class='awrnc'>14,647</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,696</td><td align="right" class='awrc'>0.94</td><td align="right" class='awrc'>152</td><td align="right" class='awrc'>6,039</td><td align="right" class='awrc'>230,088</td><td align="right" class='awrc'>0.86</td><td align="right" class='awrc'>39,683</td><td align="right" class='awrc'>15.67</td><td align="right" class='awrc'>18,146</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,712</td><td align="right" class='awrnc'>0.95</td><td align="right" class='awrnc'>167</td><td align="right" class='awrnc'>6,310</td><td align="right" class='awrnc'>238,096</td><td align="right" class='awrnc'>0.89</td><td align="right" class='awrnc'>31,675</td><td align="right" class='awrnc'>12.51</td><td align="right" class='awrnc'>19,341</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,728</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>182</td><td align="right" class='awrc'>6,584</td><td align="right" class='awrc'>244,099</td><td align="right" class='awrc'>0.91</td><td align="right" class='awrc'>25,672</td><td align="right" class='awrc'>10.14</td><td align="right" class='awrc'>20,201</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,744</td><td align="right" class='awrnc'>0.96</td><td align="right" class='awrnc'>197</td><td align="right" class='awrnc'>6,989</td><td align="right" class='awrnc'>250,734</td><td align="right" class='awrnc'>0.94</td><td align="right" class='awrnc'>19,037</td><td align="right" class='awrnc'>7.52</td><td align="right" class='awrnc'>21,213</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,760</td><td align="right" class='awrc'>0.97</td><td align="right" class='awrc'>212</td><td align="right" class='awrc'>7,772</td><td align="right" class='awrc'>255,413</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>14,358</td><td align="right" class='awrc'>5.67</td><td align="right" class='awrc'>21,880</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,776</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>228</td><td align="right" class='awrnc'>8,328</td><td align="right" class='awrnc'>260,460</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>9,311</td><td align="right" class='awrnc'>3.68</td><td align="right" class='awrnc'>22,574</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,792</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>243</td><td align="right" class='awrc'>8,845</td><td align="right" class='awrc'>265,309</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>4,462</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>23,260</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,808</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>258</td><td align="right" class='awrnc'>10,015</td><td align="right" class='awrnc'>267,239</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,532</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>23,631</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,824</td><td align="right" class='awrc'>1.01</td><td align="right" class='awrc'>274</td><td align="right" class='awrc'>10,049</td><td align="right" class='awrc'>267,247</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,524</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>23,632</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,840</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>289</td><td align="right" class='awrnc'>10,392</td><td align="right" class='awrnc'>267,253</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,518</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>23,634</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,856</td><td align="right" class='awrc'>1.03</td><td align="right" class='awrc'>305</td><td align="right" class='awrc'>10,618</td><td align="right" class='awrc'>267,266</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,505</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>23,636</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,872</td><td align="right" class='awrnc'>1.04</td><td align="right" class='awrnc'>320</td><td align="right" class='awrnc'>11,031</td><td align="right" class='awrnc'>267,269</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,502</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>23,637</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,888</td><td align="right" class='awrc'>1.04</td><td align="right" class='awrc'>335</td><td align="right" class='awrc'>11,670</td><td align="right" class='awrc'>267,272</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,499</td><td align="right" class='awrc'>0.99</td><td align="right" class='awrc'>23,637</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,904</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>351</td><td align="right" class='awrnc'>12,103</td><td align="right" class='awrnc'>267,277</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,494</td><td align="right" class='awrnc'>0.99</td><td align="right" class='awrnc'>23,638</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,920</td><td align="right" class='awrc'>1.06</td><td align="right" class='awrc'>367</td><td align="right" class='awrc'>12,546</td><td align="right" class='awrc'>267,281</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,490</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>23,639</td></tr>
<tr><td align="right" scope="row" class='awrnc'>1,936</td><td align="right" class='awrnc'>1.07</td><td align="right" class='awrnc'>383</td><td align="right" class='awrnc'>13,194</td><td align="right" class='awrnc'>267,293</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,478</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>23,640</td></tr>
<tr><td align="right" scope="row" class='awrc'>1,952</td><td align="right" class='awrc'>1.08</td><td align="right" class='awrc'>398</td><td align="right" class='awrc'>13,883</td><td align="right" class='awrc'>267,297</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,474</td><td align="right" class='awrc'>0.98</td><td align="right" class='awrc'>23,640</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,000</td><td align="right" class='awrnc'>1.11</td><td align="right" class='awrnc'>445</td><td align="right" class='awrnc'>15,277</td><td align="right" class='awrnc'>267,319</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,452</td><td align="right" class='awrnc'>0.97</td><td align="right" class='awrnc'>23,642</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,192</td><td align="right" class='awrc'>1.21</td><td align="right" class='awrc'>553</td><td align="right" class='awrc'>19,339</td><td align="right" class='awrc'>267,351</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,420</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>23,644</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,384</td><td align="right" class='awrnc'>1.32</td><td align="right" class='awrnc'>553</td><td align="right" class='awrnc'>19,339</td><td align="right" class='awrnc'>267,351</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,420</td><td align="right" class='awrnc'>0.96</td><td align="right" class='awrnc'>23,644</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,576</td><td align="right" class='awrc'>1.42</td><td align="right" class='awrc'>553</td><td align="right" class='awrc'>19,339</td><td align="right" class='awrc'>267,351</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,420</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>23,644</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2,768</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>553</td><td align="right" class='awrnc'>19,339</td><td align="right" class='awrnc'>267,351</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,420</td><td align="right" class='awrnc'>0.96</td><td align="right" class='awrnc'>23,644</td></tr>
<tr><td align="right" scope="row" class='awrc'>2,960</td><td align="right" class='awrc'>1.64</td><td align="right" class='awrc'>553</td><td align="right" class='awrc'>19,339</td><td align="right" class='awrc'>267,351</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,420</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>23,644</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,152</td><td align="right" class='awrnc'>1.74</td><td align="right" class='awrnc'>553</td><td align="right" class='awrnc'>19,339</td><td align="right" class='awrnc'>267,351</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,420</td><td align="right" class='awrnc'>0.96</td><td align="right" class='awrnc'>23,644</td></tr>
<tr><td align="right" scope="row" class='awrc'>3,344</td><td align="right" class='awrc'>1.85</td><td align="right" class='awrc'>553</td><td align="right" class='awrc'>19,339</td><td align="right" class='awrc'>267,351</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,420</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>23,644</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,536</td><td align="right" class='awrnc'>1.96</td><td align="right" class='awrnc'>553</td><td align="right" class='awrnc'>19,339</td><td align="right" class='awrnc'>267,351</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>2,420</td><td align="right" class='awrnc'>0.96</td><td align="right" class='awrnc'>23,644</td></tr>
<tr><td align="right" scope="row" class='awrc'>3,728</td><td align="right" class='awrc'>2.06</td><td align="right" class='awrc'>553</td><td align="right" class='awrc'>19,339</td><td align="right" class='awrc'>267,351</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>2,420</td><td align="right" class='awrc'>0.96</td><td align="right" class='awrc'>23,644</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6900"></a>
<h3 class="awr">SGA Target Advisory</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA target advisory for different SGA target sizes. It displays SGA size factor, estimated DB time and estimated physical reads for different SGA target sizes."><tr><th class="awrbg" scope="col">SGA Target Size (M)</th><th class="awrbg" scope="col">SGA Size Factor</th><th class="awrbg" scope="col">Est DB Time (s)</th><th class="awrbg" scope="col">Est Physical Reads</th></tr>
<tr><td align="right" scope="row" class='awrc'>2,304</td><td align="right" class='awrc'>0.75</td><td align="right" class='awrc'>273,696</td><td align="right" class='awrc'>178,487,671</td></tr>
<tr><td align="right" scope="row" class='awrnc'>3,072</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>267,333</td><td align="right" class='awrnc'>166,096,846</td></tr>
<tr><td align="right" scope="row" class='awrc'>3,840</td><td align="right" class='awrc'>1.25</td><td align="right" class='awrc'>262,681</td><td align="right" class='awrc'>156,961,519</td></tr>
<tr><td align="right" scope="row" class='awrnc'>4,608</td><td align="right" class='awrnc'>1.50</td><td align="right" class='awrnc'>262,574</td><td align="right" class='awrnc'>156,961,519</td></tr>
<tr><td align="right" scope="row" class='awrc'>5,376</td><td align="right" class='awrc'>1.75</td><td align="right" class='awrc'>262,574</td><td align="right" class='awrc'>156,961,519</td></tr>
<tr><td align="right" scope="row" class='awrnc'>6,144</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>262,574</td><td align="right" class='awrnc'>156,961,519</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7100"></a>
<h3 class="awr">Streams Pool Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5700"></a>
<h3 class="awr">Java Pool Advisory</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#26">Back to Advisory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="27"></a>
<h2 class="awr">
Wait Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#2300">Buffer Wait Statistics</a></li>
<li class="awr"><a class="awr" href="#3000">Enqueue Activity</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="2300"></a>
<h3 class="awr">Buffer Wait Statistics</h3>
<ul>
<li class="awr"> ordered by wait time desc, waits desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays buffer wait statistics. Statistics include waits, total wait time and average time for each class of buffer wait."><tr><th class="awrbg" scope="col">Class</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Total Wait Time (s)</th><th class="awrbg" scope="col">Avg Time (ms)</th></tr>
<tr><td scope="row" class='awrc'>undo header</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>764</td></tr>
<tr><td scope="row" class='awrnc'>file header block</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>593</td></tr>
<tr><td scope="row" class='awrc'>data block</td><td align="right" class='awrc'>151</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#27">Back to Wait Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3000"></a>
<h3 class="awr">Enqueue Activity</h3>
<ul>
<li class="awr"> only enqueues with requests are shown	</li>
<li class="awr"> Enqueue stats gathered prior to 10g should not be compared with 10g data </li>
<li class="awr"> ordered by Wait Time desc, Waits desc, Requests desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays enqueue activity statistics. Requests, success gets, failed gets, waits, wait time and average wait time are displayed for each enqueue type."><tr><th class="awrbg" scope="col">Enqueue Type (Request Reason)</th><th class="awrbg" scope="col">Requests</th><th class="awrbg" scope="col">Succ Gets</th><th class="awrbg" scope="col">Failed Gets</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col">Wt Time (s)</th><th class="awrbg" scope="col">Av Wt Time(ms)</th></tr>
<tr><td scope="row" class='awrc'>RO-Multiple Object Reuse (fast object reuse)</td>
<td align="right" class='awrc'>737</td><td align="right" class='awrc'>738</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>208</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>518.32</td></tr>
<tr><td scope="row" class='awrnc'>HW-Segment High Water Mark</td>
<td align="right" class='awrnc'>490</td><td align="right" class='awrnc'>510</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>53</td><td align="right" class='awrnc'>83</td><td align="right" class='awrnc'>1,556.66</td></tr>
<tr><td scope="row" class='awrc'>CR-Reuse Block Range (block range reuse ckpt)</td>
<td align="right" class='awrc'>57</td><td align="right" class='awrc'>58</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>314.07</td></tr>
<tr><td scope="row" class='awrnc'>CF-Controlfile Transaction</td>
<td align="right" class='awrnc'>823</td><td align="right" class='awrnc'>822</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>32.71</td></tr>
<tr><td scope="row" class='awrc'>PS-PX Process Reservation</td>
<td align="right" class='awrc'>620</td><td align="right" class='awrc'>620</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>126</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2.63</td></tr>
<tr><td scope="row" class='awrnc'>TM-DML</td>
<td align="right" class='awrnc'>359,945</td><td align="right" class='awrnc'>359,910</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>60.00</td></tr>
<tr><td scope="row" class='awrc'>WF-AWR Flush</td>
<td align="right" class='awrc'>29</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.95</td></tr>
<tr><td scope="row" class='awrnc'>CO-KTUCLO Master Slave enq (master slave det)</td>
<td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1.00</td></tr>
<tr><td scope="row" class='awrc'>FB-Format Block</td>
<td align="right" class='awrc'>15</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.75</td></tr>
<tr><td scope="row" class='awrnc'>TA-Instance Undo</td>
<td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>TX-Transaction</td>
<td align="right" class='awrc'>360,235</td><td align="right" class='awrc'>360,190</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JG-Job Scheduler1</td>
<td align="right" class='awrnc'>1,365</td><td align="right" class='awrnc'>1,365</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JG-Job Scheduler1 (queue lock)</td>
<td align="right" class='awrc'>1,365</td><td align="right" class='awrc'>1,365</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CU-Cursor</td>
<td align="right" class='awrnc'>753</td><td align="right" class='awrnc'>753</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TT-Tablespace</td>
<td align="right" class='awrc'>314</td><td align="right" class='awrc'>314</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DD-ASM Local Disk Group</td>
<td align="right" class='awrnc'>256</td><td align="right" class='awrnc'>256</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SJ-KTSJ Slave Task Cancel (Slave Task Cancel)</td>
<td align="right" class='awrc'>232</td><td align="right" class='awrc'>232</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TO-Temp Object</td>
<td align="right" class='awrnc'>141</td><td align="right" class='awrnc'>141</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JG-Job Scheduler1 (q mem clnup lck)</td>
<td align="right" class='awrc'>130</td><td align="right" class='awrc'>130</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SE-Session Migration</td>
<td align="right" class='awrnc'>121</td><td align="right" class='awrnc'>121</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>BU-Buddy Instance Context (recovery set construct)</td>
<td align="right" class='awrc'>108</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IT-In-Mem Temp Table Meta Creation</td>
<td align="right" class='awrnc'>104</td><td align="right" class='awrnc'>104</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IS-Instance State</td>
<td align="right" class='awrc'>100</td><td align="right" class='awrc'>100</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DA-Instance DP Array (Slave Process Array)</td>
<td align="right" class='awrnc'>86</td><td align="right" class='awrnc'>86</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>FP-File Object (global fob contention)</td>
<td align="right" class='awrc'>73</td><td align="right" class='awrc'>73</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MR-Media Recovery</td>
<td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQ-Sequence Cache</td>
<td align="right" class='awrc'>22</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>WT-AWR CDB-Wide Table Lock</td>
<td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AF-Advisor Framework (task serialization)</td>
<td align="right" class='awrc'>13</td><td align="right" class='awrc'>13</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>TH-Threshold Chain (metric threshold evaluation)</td>
<td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AE-Edition Lock (lock)</td>
<td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DW-In memory Dispenser</td>
<td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SH-Active Session History Flushing</td>
<td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PR-Process Startup</td>
<td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PV-KSV slave startup (syncstart)</td>
<td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PW-Buffer Cache PreWarm (flush prewarm buffers)</td>
<td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>TD-KTF map table enqueue (KTF dump entries)</td>
<td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>XR-Quiesce / Force Logging (database force logging)</td>
<td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#27">Back to Wait Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="28"></a>
<h2 class="awr">
Undo Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#3300">Undo Segment Summary</a></li>
<li class="awr"><a class="awr" href="#3400">Undo Segment Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3300"></a>
<h3 class="awr">Undo Segment Summary</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#28">Back to Undo Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3400"></a>
<h3 class="awr">Undo Segment Stats</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#28">Back to Undo Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="29"></a>
<h2 class="awr">
Latch Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#3500">Latch Activity</a></li>
<li class="awr"><a class="awr" href="#3600">Latch Sleep Breakdown</a></li>
<li class="awr"><a class="awr" href="#3700">Latch Miss Sources</a></li>
<li class="awr"><a class="awr" href="#7500">Mutex Sleep Summary</a></li>
<li class="awr"><a class="awr" href="#3800">Parent Latch Statistics</a></li>
<li class="awr"><a class="awr" href="#3900">Child Latch Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3500"></a>
<h3 class="awr">Latch Activity</h3>
<ul>
<li class="awr"> &quot;Get Requests&quot;, &quot;Pct Get Miss&quot; and &quot;Avg Slps/Miss&quot; are statistics for	 willing-to-wait latch get requests </li>
<li class="awr"> &quot;NoWait Requests&quot;, &quot;Pct NoWait Miss&quot; are for no-wait latch get requests </li>
<li class="awr"> &quot;Pct Misses&quot; for both should be very close to 0.0</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch statistics. Get requests, % get miss, wait time, noWait requests are displayed for each latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Get Miss</th><th class="awrbg" scope="col">Avg Slps /Miss</th><th class="awrbg" scope="col">Wait Time (s)</th><th class="awrbg" scope="col">NoWait Requests</th><th class="awrbg" scope="col">Pct NoWait Miss</th></tr>
<tr><td scope="row" class='awrc'>AQ Background: interrupt command latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>AQ Coord jobx_kwsbgsgn latch</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ Message drive state object latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AQ Sharded master pool latch</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AQ deq hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM Keyed state latch</td><td align="right" class='awrnc'>123</td><td align="right" class='awrnc'>1.63</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM allocation</td><td align="right" class='awrc'>20,452</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM connection state latch</td><td align="right" class='awrnc'>2,763</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM db client latch</td><td align="right" class='awrc'>525</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM map headers</td><td align="right" class='awrnc'>750</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM map load waiting list</td><td align="right" class='awrc'>375</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM map operation freelist</td><td align="right" class='awrnc'>471</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM map operation hash table</td><td align="right" class='awrc'>24,975,581</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM network background latch</td><td align="right" class='awrnc'>2,630</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM network state latch</td><td align="right" class='awrc'>155</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM remote client latch</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>AWR Alerted Metric Element list</td><td align="right" class='awrc'>4,378</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Autotask management</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Change Notification Hash table latch</td><td align="right" class='awrc'>187</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Column stats entry latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Consistent RBA</td><td align="right" class='awrc'>12,835</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DML lock allocation</td><td align="right" class='awrnc'>767,573</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Event Group Locks</td><td align="right" class='awrc'>113</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>FIB s.o chain latch</td><td align="right" class='awrnc'>150</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>FOB consolidated s.o list latch</td><td align="right" class='awrc'>150</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>File State Object Pool Parent Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCS logfile block</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCS logfile write queue</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Hang Manager wait event statistics</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4,000</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>I/O Staticstics latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ILM Stats Stripe Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ILM Stats main anchor latch</td><td align="right" class='awrnc'>387</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ILM access tracking extent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ILM activity tracking latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM Global dictionary latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM Global dictionary queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM Global dictionary rw latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM area sb latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM area scb latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IM emb latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IM seg hdr latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IMFS defer write list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMXT hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC other latch</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC stats buffer allocation latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>In memory undo latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS Sh mem access</td><td align="right" class='awrc'>69</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS broadcast add buf latch</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS broadcast drop buf latch</td><td align="right" class='awrc'>77</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS broadcast load blnc latch</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS queue access latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>JS queue state obj latch</td><td align="right" class='awrnc'>2,856</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>JS slv state obj latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KCNIBR - invalid block range tree</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDCStatHash latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDFI Buffer Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDFI Hash Bucket Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDFI Hash Elem Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDMADO action list latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KDMADO bll latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KDMADO latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFC FX Hash Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFC Hash Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFCL LE Freelist</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS client latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS cluster latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS endpoint latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS node latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFIAS process latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFIAS queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KFK SGA Libload latch</td><td align="right" class='awrc'>12,122</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KFMD SGA</td><td align="right" class='awrnc'>194</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KGNFS-NFS:SHM structure</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KGNFS-NFS:SVR LIST</td><td align="right" class='awrnc'>114</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KJC message pool KGH calls</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJC message pool free list</td><td align="right" class='awrnc'>186,172</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0.18</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>255,485</td><td align="right" class='awrnc'>6.51</td></tr>
<tr><td scope="row" class='awrc'>KJC message pool pending avail list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KJCT flow control latch</td><td align="right" class='awrnc'>5,517,959</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KMG MMAN ready and startup request latch</td><td align="right" class='awrc'>113</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS OFS ctx level parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS OFS req layer parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS OFS sess layer parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS Receive and Send Queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFS id table parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSFS ksfs_node latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSFSD name cache parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSGL LS Segment latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSGL SGA anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSIPC ASPC anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSIPC SGA allocation parent latch</td><td align="right" class='awrnc'>489</td><td align="right" class='awrnc'>0.82</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSIPCGSN Hash Table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSIPCGSN Namespace latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSK PDB IO STAT</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSRMA SGA anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSRMF SGA anchor latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KSWL SGA anchor latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSXR hang analysis phase 1 latch</td><td align="right" class='awrc'>335</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KSXR hang analysis phase 2 latch</td><td align="right" class='awrnc'>215</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KSXR large replies</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KTF sga latch</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>109</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KTILM latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KTU in-memory txn table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KTURMA ODPSCN latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>KTURMA SGA allocation parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>KWQMN job cache list latch</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Latch for NonceHistory</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Locator state objects pool parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Lost write change tracking</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Lsod array latch</td><td align="right" class='awrc'>184</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MGA asr alloc latch</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MGA heap latch</td><td align="right" class='awrc'>252</td><td align="right" class='awrc'>12.30</td><td align="right" class='awrc'>0.48</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MGA shared context latch</td><td align="right" class='awrnc'>2,075</td><td align="right" class='awrnc'>4.58</td><td align="right" class='awrnc'>1.09</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MGA shared context root latch</td><td align="right" class='awrc'>252</td><td align="right" class='awrc'>26.98</td><td align="right" class='awrc'>1.03</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>MQL Tracking Latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Memory Management Latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>113</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Message Subscriber #1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Message Subscriber #2</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Message Subscriber #3</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Memory Queue Message Subscriber #4</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Memory Queue Subscriber</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Message cache latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>MinActiveScn Latch</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Mutex</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Mutex Stats</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Nologging Standby SCN Time Map cache</td><td align="right" class='awrnc'>108</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>OS process</td><td align="right" class='awrc'>707</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>OS process allocation</td><td align="right" class='awrnc'>805</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>1.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>OS process: request allocation</td><td align="right" class='awrc'>123</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PDB Hash Table Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PDB LRU structure</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PL/SQL warning settings</td><td align="right" class='awrnc'>110</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PX hash array latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parent latch for dependency tracking</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Parent latch for query hash table access</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Parent latch for segments scanning</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>QMT</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Real-time descriptor latch</td><td align="right" class='awrnc'>37,662</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Report Request stats latch</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Report Request struct latch</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Request holder compeltion list latch</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Retry Ht elm latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Retry bkt latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA Blackbox latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA IO buffer pool latch</td><td align="right" class='awrc'>378</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>366</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SGA Logging Bkt Latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA Logging Log Latch</td><td align="right" class='awrc'>11,173</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA blob parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA bucket locks</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SGA heap locks</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SGA pool locks</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SO private so latch</td><td align="right" class='awrnc'>447</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>43</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>SQL memory manager latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>113</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>SQL memory manager workarea list latch</td><td align="right" class='awrnc'>10,409</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SR Stats Stripe Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Sched IM Job latch</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sched InMem Job Cache</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Shared B-Tree</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Streams Generic</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Subscriber Ht elm latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Testing</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Token Manager</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Txn Ht elm latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Txn bkt latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>UM object latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>WCR: sync</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Write State Object Pool Parent Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>X$KSFQP</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XDB NFS Security Latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>XDB unused session pool</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>XDB used session pool</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>active checkpoint queue latch</td><td align="right" class='awrnc'>21,236</td><td align="right" class='awrnc'>0.64</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>active service list</td><td align="right" class='awrc'>2,902</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,374</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>archive destination</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>begin backup scn array</td><td align="right" class='awrc'>66</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>buffer pool</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>business card</td><td align="right" class='awrc'>189</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cache buffer handles</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cache buffers chains</td><td align="right" class='awrc'>75,127,138</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>19,839,732</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>cache buffers lru chain</td><td align="right" class='awrnc'>3,665,916</td><td align="right" class='awrnc'>0.22</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>12,491,529</td><td align="right" class='awrnc'>0.51</td></tr>
<tr><td scope="row" class='awrc'>cache table scan latch</td><td align="right" class='awrc'>329</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>329</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>call allocation</td><td align="right" class='awrnc'>2,689</td><td align="right" class='awrnc'>0.67</td><td align="right" class='awrnc'>0.67</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>change notification client cache latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>channel handle pool latch</td><td align="right" class='awrnc'>249</td><td align="right" class='awrnc'>0.80</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>channel operations parent latch</td><td align="right" class='awrc'>3,208</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>checkpoint queue latch</td><td align="right" class='awrnc'>1,911,599</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,221,736</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>client/application info</td><td align="right" class='awrc'>678</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>compile environment latch</td><td align="right" class='awrnc'>119</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>corrupted undo seg latch</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp handoff latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp pool latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp server hash latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp sga latch</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cp srv type state latch</td><td align="right" class='awrnc'>340</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cp srv type wait latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cr slave free list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cvmap freelist lock</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>deferred cleanup latch</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dispatcher info</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dml lock allocation</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>done queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dtp latch</td><td align="right" class='awrnc'>122</td><td align="right" class='awrnc'>0.82</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>dummy allocation</td><td align="right" class='awrc'>339</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>eighth spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>eleventh spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enqueue freelist latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>15,411</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>enqueue hash chains</td><td align="right" class='awrc'>2,325,386</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>537</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>enqueues</td><td align="right" class='awrnc'>979</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>error message lists</td><td align="right" class='awrc'>468</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fast space usage latch</td><td align="right" class='awrnc'>64</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>fifteenth spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>file cache latch</td><td align="right" class='awrnc'>176</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>first Audit Vault latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>flash file access latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>flashback copy</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fourteenth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>fourth Audit Vault latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc element</td><td align="right" class='awrnc'>11,044,840</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>830,936</td><td align="right" class='awrnc'>0.08</td></tr>
<tr><td scope="row" class='awrc'>gc imc list</td><td align="right" class='awrc'>287</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc xid list</td><td align="right" class='awrnc'>101</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs affinity object freelist latch</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs commit scn state</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs nodemap pool</td><td align="right" class='awrc'>473,269</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs opaque info freelist</td><td align="right" class='awrnc'>461,589</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs partitioned table hash</td><td align="right" class='awrc'>16,269,801</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9,166,063</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs pcm hashed value bucket hash</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs remaster request queue</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs remastering latch</td><td align="right" class='awrnc'>51,883</td><td align="right" class='awrnc'>0.57</td><td align="right" class='awrnc'>0.62</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>5,260</td><td align="right" class='awrnc'>9.73</td></tr>
<tr><td scope="row" class='awrc'>gcs resource freelist</td><td align="right" class='awrc'>1,178,418</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>277,362</td><td align="right" class='awrc'>0.08</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource hash</td><td align="right" class='awrnc'>18,758,809</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>223</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs resource scan list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs resource timerq list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs resource validate list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs shadows freelist</td><td align="right" class='awrnc'>893,924</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges cached resource lists</td><td align="right" class='awrc'>302,195</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>15,457</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges deadlock list</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges domain table</td><td align="right" class='awrc'>947,841</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges enqueue table freelist</td><td align="right" class='awrnc'>771,969</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges group table</td><td align="right" class='awrc'>949,554</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges process hash list</td><td align="right" class='awrnc'>60,818</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges process parent latch</td><td align="right" class='awrc'>1,898,958</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.50</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges process table freelist</td><td align="right" class='awrnc'>123</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges remote lock freelist</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges resource hash list</td><td align="right" class='awrnc'>1,039,488</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.13</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>147</td><td align="right" class='awrnc'>0.68</td></tr>
<tr><td scope="row" class='awrc'>ges resource scan list</td><td align="right" class='awrc'>90</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges resource table freelist</td><td align="right" class='awrnc'>943</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges s-lock bitvec freelist</td><td align="right" class='awrc'>2,867</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges timeout list</td><td align="right" class='awrnc'>251</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>103</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges value block free list</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>global KZLD latch for auth type mem in SGA</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>global tx hash mapping</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>granule from data transfer cache</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gws:Sharding global descriptor latch</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>hash table Sql Plan Finding latch</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>277</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>hash table column usage latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>78,315</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>hash table expression usage tracking latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>hash table sql contorl latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>heartbeat check</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>238</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>heartbeat structure management</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>170</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>imc buf hdl lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc cr clone buf</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc hash lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc sj lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>imc srchsp lat</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>imc-txn-wrk-lat</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>in-memory area latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>in-memory columnar segment hash table latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>in-memory columnar ts extent map chunk latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>in-memory global pool latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>internal temp table object number allocation latch</td><td align="right" class='awrnc'>473</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>interrupt manipulation</td><td align="right" class='awrc'>524</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>intra txn parallel recovery</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>io pool granule list</td><td align="right" class='awrc'>153</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>io pool granule metadata list</td><td align="right" class='awrnc'>310</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>job workq parent latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>job_queue_processes parameter latch</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>k2q global data latch</td><td align="right" class='awrc'>226</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>k2q lock allocation</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kKCN Cqn SGA</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kcb DW scan objtemp hash table latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kcn buffer chains</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kdlx hb parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kgb parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kgnfs mount latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjbr roi instance map</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjci objects freelist latch</td><td align="right" class='awrnc'>775</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjci process context latch</td><td align="right" class='awrc'>768</td><td align="right" class='awrc'>0.52</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5,578</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>kjci process list latch</td><td align="right" class='awrnc'>427</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjci request sequence latch</td><td align="right" class='awrc'>83</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjcipctx state object freelist latch</td><td align="right" class='awrnc'>123</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjoedcso state object freelist latch</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjoeq omni enqueue hash bucket latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjoer owner hash bucket</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjpm my inst data</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsc Request obj freelist latch</td><td align="right" class='awrc'>250</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsc Ring Buffer obj freelist latch</td><td align="right" class='awrnc'>125</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsc protect control request queue</td><td align="right" class='awrc'>125</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3,447</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>kjsc protect warm up context</td><td align="right" class='awrnc'>227</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjsca protect pkey hash table bucket</td><td align="right" class='awrc'>3,448</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kjsca protect service hash table bucket</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjscpss state object freelist latch</td><td align="right" class='awrc'>125</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kokc descriptor allocation latch</td><td align="right" class='awrnc'>476</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kpoxft latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>118</td><td align="right" class='awrc'>0.85</td></tr>
<tr><td scope="row" class='awrnc'>krso process</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksevn object root latch</td><td align="right" class='awrc'>113</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksfv messages</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksi resource reuse count</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksim group membership cache</td><td align="right" class='awrnc'>2,791</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksim membership request latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>197</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ksns object latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kss move lock</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksuosstats global area</td><td align="right" class='awrnc'>49</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>129</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ksutcpistat latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksv allocation latch</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksv class latch</td><td align="right" class='awrc'>8,500</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksv msg queue latch</td><td align="right" class='awrnc'>178</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>177</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ksxp shared latch</td><td align="right" class='awrc'>123</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ksxp so latch</td><td align="right" class='awrnc'>123</td><td align="right" class='awrnc'>0.81</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksz_so allocation latch</td><td align="right" class='awrc'>123</td><td align="right" class='awrc'>0.81</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktfbn latch</td><td align="right" class='awrnc'>131</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg jrnls</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg lookuptable level 1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg lookuptable level 2</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg space</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm adg stages</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm adg worklink</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktm global data</td><td align="right" class='awrc'>20</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ktm prv jrnls</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ktmpj HT ls</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwqbsn:qsga</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwslbmdl: metadata latch</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwslbql: queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwslbutl: uncommitted txn latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwsptQcachLt: queue cache latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwsptTrncTsksLt: trunc task latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kwsptjobAdPtLt: AdPt list latch</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kwsslLat: skiplist latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kxfxscanrate_latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lgwr LWN SCN</td><td align="right" class='awrc'>12,872</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>list of block allocation</td><td align="right" class='awrnc'>151</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>loader state object freelist</td><td align="right" class='awrc'>160</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lob segment dispenser latch</td><td align="right" class='awrnc'>256</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lob segment hash table latch</td><td align="right" class='awrc'>198</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lob segment query latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lock DBA buffer during media recovery</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>log write info</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13,319</td><td align="right" class='awrnc'>2.79</td></tr>
<tr><td scope="row" class='awrc'>log write worker phase</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>logical standby cache</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>logminer context allocation</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>logminer local</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>logminer work area</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>longop free list parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>managed standby</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>message bitmap latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>message pool operations parent latch</td><td align="right" class='awrc'>955</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>messages</td><td align="right" class='awrnc'>88,766</td><td align="right" class='awrnc'>0.85</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>msg queue latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>multiblock read objects</td><td align="right" class='awrnc'>1,206</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service memory objects</td><td align="right" class='awrc'>313</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service namespace bucket</td><td align="right" class='awrnc'>2,527</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service pending queue</td><td align="right" class='awrc'>182</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service request</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>name-service request queue</td><td align="right" class='awrc'>3,750</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ncodef allocation latch</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ninth spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>object queue header freelist</td><td align="right" class='awrnc'>1,057,429</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>object queue header operation</td><td align="right" class='awrc'>25,846,032</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>354,970</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>object queue memory</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>object stats modification</td><td align="right" class='awrc'>89</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parallel query alloc buffer</td><td align="right" class='awrnc'>1,618</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>440</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>parallel query stats</td><td align="right" class='awrc'>363</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>parallel txn reco latch</td><td align="right" class='awrnc'>507</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>parameter table management</td><td align="right" class='awrc'>1,351</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pdb enqueue hash chains</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>peshm</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pesom_free_list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pesom_hash_node</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>pkey global statistics</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>pmon dead latch</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>post/wait queue</td><td align="right" class='awrnc'>926,442</td><td align="right" class='awrnc'>1.23</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>454,499</td><td align="right" class='awrnc'>1.02</td></tr>
<tr><td scope="row" class='awrc'>process allocation</td><td align="right" class='awrc'>1,750</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process group creation</td><td align="right" class='awrnc'>123</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process memory detail</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process pkey statistics list</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>process queue</td><td align="right" class='awrc'>698</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>process queue reference</td><td align="right" class='awrnc'>28,126</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2,984</td><td align="right" class='awrnc'>0.44</td></tr>
<tr><td scope="row" class='awrc'>qmn task queue latch</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>quarantine object</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>query server freelists</td><td align="right" class='awrc'>872</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>query server process</td><td align="right" class='awrnc'>236</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>queued dump request</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>queuing load statistics</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>read-moslty lock queue under pkey</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>recovery domain hash bucket</td><td align="right" class='awrnc'>4,211</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>redo allocation</td><td align="right" class='awrc'>73,458</td><td align="right" class='awrc'>0.93</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,560,115</td><td align="right" class='awrc'>0.62</td></tr>
<tr><td scope="row" class='awrnc'>redo copy</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1,561,101</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>redo writing</td><td align="right" class='awrc'>67,527</td><td align="right" class='awrc'>0.10</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remote tool request latch</td><td align="right" class='awrnc'>228</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr group change latch</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:active threads</td><td align="right" class='awrnc'>348</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>resmgr:actses change group</td><td align="right" class='awrc'>110</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:actses change state</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:free threads list</td><td align="right" class='awrc'>338</td><td align="right" class='awrc'>0.59</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:plan CPU method</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:plan change alloc latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:plan change latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resmgr:resource group CPU method</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>resmgr:schema config</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>resmgr:session queuing</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>row cache objects</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>rt rmv count latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>170</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>second Audit Vault latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>segmented array pool</td><td align="right" class='awrc'>150</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sequence cache</td><td align="right" class='awrnc'>604</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>service drain list</td><td align="right" class='awrc'>341</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session allocation</td><td align="right" class='awrnc'>219,405</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>218,882</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>session idle bit</td><td align="right" class='awrc'>440,555</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session queue latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session state list latch</td><td align="right" class='awrc'>420</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session statistics</td><td align="right" class='awrnc'>339</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>session switching</td><td align="right" class='awrc'>128</td><td align="right" class='awrc'>5.47</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>session timer</td><td align="right" class='awrnc'>113</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>seventh spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sga hash table parent latch</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shard latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shardgroup list latch</td><td align="right" class='awrnc'>1,035</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shared pool</td><td align="right" class='awrc'>163,594</td><td align="right" class='awrc'>0.89</td><td align="right" class='awrc'>0.05</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shared pool sim alloc</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>shared pool simulator</td><td align="right" class='awrc'>2,844</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>shared server configuration</td><td align="right" class='awrnc'>114</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sim partition latch</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>simulator hash latch</td><td align="right" class='awrnc'>3,500,376</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>simulator lru latch</td><td align="right" class='awrc'>581</td><td align="right" class='awrc'>0.69</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2,280,395</td><td align="right" class='awrc'>0.10</td></tr>
<tr><td scope="row" class='awrnc'>sixth spare latch - X parent</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sort extent pool</td><td align="right" class='awrc'>757</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>space background task latch</td><td align="right" class='awrnc'>929</td><td align="right" class='awrnc'>57.48</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>219</td><td align="right" class='awrnc'>6.39</td></tr>
<tr><td scope="row" class='awrc'>state object free list</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>statistics aggregation</td><td align="right" class='awrnc'>145</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>subscriber Ht bkt</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>tablespace key chain</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>temp lob duration state obj allocation</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>temporary table state object allocation</td><td align="right" class='awrnc'>88</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>tenth spare latch - X parent</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test excl. parent l0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test excl. parent2 l0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test excl. parent2 lmid cln</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test mixed exclusive</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test mode exclusive</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test open exclusive</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>test pdb exclusive</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>test shared parent2 lmid</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>thirteenth spare latch - children</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>threshold alerts latch</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>transaction allocation</td><td align="right" class='awrnc'>358</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twelfth spare latch - children</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-fifth spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-first spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-fourth spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>twenty-second spare latch - S par</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>twenty-third spare latch - S par</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>undo global data</td><td align="right" class='awrc'>1,209,150</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>virtual circuit buffers</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>virtual circuit holder</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>virtual circuit queues</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3600"></a>
<h3 class="awr">Latch Sleep Breakdown</h3>
<ul>
<li class="awr"> ordered by misses desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch sleep statistics. Get requests, misses, sleeps, spin gets are displayed for each latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Misses</th><th class="awrbg" scope="col">Sleeps</th><th class="awrbg" scope="col">Spin Gets</th></tr>
<tr><td scope="row" class='awrc'>post/wait queue</td><td align="right" class='awrc'>926,442</td><td align="right" class='awrc'>11,350</td><td align="right" class='awrc'>80</td><td align="right" class='awrc'>11,273</td></tr>
<tr><td scope="row" class='awrnc'>cache buffers lru chain</td><td align="right" class='awrnc'>3,665,916</td><td align="right" class='awrnc'>8,082</td><td align="right" class='awrnc'>362</td><td align="right" class='awrnc'>7,747</td></tr>
<tr><td scope="row" class='awrc'>cache buffers chains</td><td align="right" class='awrc'>75,127,138</td><td align="right" class='awrc'>7,424</td><td align="right" class='awrc'>1,074</td><td align="right" class='awrc'>6,418</td></tr>
<tr><td scope="row" class='awrnc'>KJCT flow control latch</td><td align="right" class='awrnc'>5,517,959</td><td align="right" class='awrnc'>6,735</td><td align="right" class='awrnc'>332</td><td align="right" class='awrnc'>6,413</td></tr>
<tr><td scope="row" class='awrc'>gcs resource hash</td><td align="right" class='awrc'>18,758,809</td><td align="right" class='awrc'>4,447</td><td align="right" class='awrc'>506</td><td align="right" class='awrc'>3,986</td></tr>
<tr><td scope="row" class='awrnc'>gc element</td><td align="right" class='awrnc'>11,044,840</td><td align="right" class='awrnc'>4,296</td><td align="right" class='awrnc'>414</td><td align="right" class='awrnc'>3,907</td></tr>
<tr><td scope="row" class='awrc'>ASM map operation hash table</td><td align="right" class='awrc'>24,975,581</td><td align="right" class='awrc'>2,322</td><td align="right" class='awrc'>218</td><td align="right" class='awrc'>2,117</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>163,594</td><td align="right" class='awrnc'>1,450</td><td align="right" class='awrnc'>77</td><td align="right" class='awrnc'>1,381</td></tr>
<tr><td scope="row" class='awrc'>enqueue hash chains</td><td align="right" class='awrc'>2,325,386</td><td align="right" class='awrc'>1,164</td><td align="right" class='awrc'>93</td><td align="right" class='awrc'>1,079</td></tr>
<tr><td scope="row" class='awrnc'>messages</td><td align="right" class='awrnc'>88,766</td><td align="right" class='awrnc'>752</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>746</td></tr>
<tr><td scope="row" class='awrc'>redo allocation</td><td align="right" class='awrc'>73,458</td><td align="right" class='awrc'>680</td><td align="right" class='awrc'>45</td><td align="right" class='awrc'>636</td></tr>
<tr><td scope="row" class='awrnc'>object queue header operation</td><td align="right" class='awrnc'>25,846,032</td><td align="right" class='awrnc'>571</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>540</td></tr>
<tr><td scope="row" class='awrc'>space background task latch</td><td align="right" class='awrc'>929</td><td align="right" class='awrc'>534</td><td align="right" class='awrc'>523</td><td align="right" class='awrc'>109</td></tr>
<tr><td scope="row" class='awrnc'>KJC message pool free list</td><td align="right" class='awrnc'>186,172</td><td align="right" class='awrnc'>437</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnc'>363</td></tr>
<tr><td scope="row" class='awrc'>gcs resource freelist</td><td align="right" class='awrc'>1,178,418</td><td align="right" class='awrc'>394</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>388</td></tr>
<tr><td scope="row" class='awrnc'>ges resource hash list</td><td align="right" class='awrnc'>1,039,488</td><td align="right" class='awrnc'>305</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>268</td></tr>
<tr><td scope="row" class='awrc'>gcs remastering latch</td><td align="right" class='awrc'>51,883</td><td align="right" class='awrc'>295</td><td align="right" class='awrc'>184</td><td align="right" class='awrc'>125</td></tr>
<tr><td scope="row" class='awrnc'>ges enqueue table freelist</td><td align="right" class='awrnc'>771,969</td><td align="right" class='awrnc'>183</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>165</td></tr>
<tr><td scope="row" class='awrc'>active checkpoint queue latch</td><td align="right" class='awrc'>21,236</td><td align="right" class='awrc'>135</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>134</td></tr>
<tr><td scope="row" class='awrnc'>checkpoint queue latch</td><td align="right" class='awrnc'>1,911,599</td><td align="right" class='awrnc'>96</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>94</td></tr>
<tr><td scope="row" class='awrc'>MGA shared context latch</td><td align="right" class='awrc'>2,075</td><td align="right" class='awrc'>95</td><td align="right" class='awrc'>104</td><td align="right" class='awrc'>13</td></tr>
<tr><td scope="row" class='awrnc'>undo global data</td><td align="right" class='awrnc'>1,209,150</td><td align="right" class='awrnc'>90</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>86</td></tr>
<tr><td scope="row" class='awrc'>MGA shared context root latch</td><td align="right" class='awrc'>252</td><td align="right" class='awrc'>68</td><td align="right" class='awrc'>70</td><td align="right" class='awrc'>9</td></tr>
<tr><td scope="row" class='awrnc'>gcs nodemap pool</td><td align="right" class='awrnc'>473,269</td><td align="right" class='awrnc'>67</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>60</td></tr>
<tr><td scope="row" class='awrc'>redo writing</td><td align="right" class='awrc'>67,527</td><td align="right" class='awrc'>67</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>66</td></tr>
<tr><td scope="row" class='awrnc'>ges cached resource lists</td><td align="right" class='awrnc'>302,195</td><td align="right" class='awrnc'>47</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>46</td></tr>
<tr><td scope="row" class='awrc'>MGA heap latch</td><td align="right" class='awrc'>252</td><td align="right" class='awrc'>31</td><td align="right" class='awrc'>15</td><td align="right" class='awrc'>18</td></tr>
<tr><td scope="row" class='awrnc'>call allocation</td><td align="right" class='awrnc'>2,689</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>9</td></tr>
<tr><td scope="row" class='awrc'>lgwr LWN SCN</td><td align="right" class='awrc'>12,872</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>11</td></tr>
<tr><td scope="row" class='awrnc'>object queue header freelist</td><td align="right" class='awrnc'>1,057,429</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>4</td></tr>
<tr><td scope="row" class='awrc'>simulator lru latch</td><td align="right" class='awrc'>581</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>ges process parent latch</td><td align="right" class='awrnc'>1,898,958</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td scope="row" class='awrc'>OS process allocation</td><td align="right" class='awrc'>805</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>ksv class latch</td><td align="right" class='awrnc'>8,500</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>ksz_so allocation latch</td><td align="right" class='awrc'>123</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3700"></a>
<h3 class="awr">Latch Miss Sources</h3>
<ul>
<li class="awr"> only latches with sleeps are shown </li>
<li class="awr"> ordered by name, sleeps desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays latch miss sources. Place where latch was requested, no-wait misses, sleeps, waiter sleeps are displayed for each missed latch"><tr><th class="awrbg" scope="col">Latch Name</th><th class="awrbg" scope="col">Where</th><th class="awrbg" scope="col">NoWait Misses</th><th class="awrbg" scope="col">   Sleeps</th><th class="awrbg" scope="col">Waiter Sleeps</th></tr>
<tr><td class='awrc'>ASM map operation hash table</td><td class='awrc'>kffmTranslate</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>127</td><td align="right" class='awrc'>119</td></tr>
<tr><td class='awrnc'>ASM map operation hash table</td><td class='awrnc'>kffmDoDone_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>90</td><td align="right" class='awrnc'>95</td></tr>
<tr><td class='awrc'>ASM map operation hash table</td><td class='awrc'>kffmUnidentify</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>KJC message pool free list</td><td class='awrnc'>kjcspfmbq: free vector of msg buffers</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>KJC message pool free list</td><td class='awrc'>kjcsmpav: allocate a msg buffer</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>80</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjctcsnd: send normal message</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>153</td><td align="right" class='awrnc'>203</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjcts_sedeqv3: dequeue a vector of msgs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>84</td><td align="right" class='awrc'>9</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjcts_sqenq: queue a message</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>76</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjctr_updatetkt: update ticket info</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>25</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjcts_sqenq2: queue a message</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>13</td></tr>
<tr><td class='awrc'>KJCT flow control latch</td><td class='awrc'>kjctr_releasetkt: change ticket allocation</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>KJCT flow control latch</td><td class='awrnc'>kjcts_adjtkt: adjust send tickets</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>4</td></tr>
<tr><td class='awrc'>MGA pid alloc latch</td><td class='awrc'>ksm_mga_sctx_rtrcv_do_whr2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>52</td></tr>
<tr><td class='awrnc'>MGA shared context latch</td><td class='awrnc'>ksm_mga_detach_whr2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>57</td><td align="right" class='awrnc'>30</td></tr>
<tr><td class='awrc'>MGA shared context latch</td><td class='awrc'>ksm_mga_sync_whr1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>43</td><td align="right" class='awrc'>22</td></tr>
<tr><td class='awrnc'>MGA shared context root latch</td><td class='awrnc'>ksm_mga_detach_whr1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>70</td><td align="right" class='awrnc'>70</td></tr>
<tr><td class='awrc'>OS process allocation</td><td class='awrc'>kso_delete_process:1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>active checkpoint queue latch</td><td class='awrnc'>kcbbacq: scan active checkpoints</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgtcr: slow path excl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>690</td><td align="right" class='awrc'>165</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclcls_3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>193</td><td align="right" class='awrnc'>22</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzgb: scan from tail nowait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>129</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgcur: slow path</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>82</td><td align="right" class='awrnc'>15</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgtcr: convert latch</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>59</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbzib: finish processing buffer</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>168</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kclpdcl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgtcr: fast path exam</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>163</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbbic2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>45</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbbic1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>19</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgtcr: fast path pin</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>207</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbgcur: fast path excl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>15</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbzwb</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>11</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbbxsv</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>29</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbrls: fast pin release</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>350</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclrlstp</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbchg: aux pin</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>14</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbnlc</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>18</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kclexpandlock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>17</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbzwc</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>4</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbchg: change complete</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>22</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbchg: cur pin change</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>14</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbgtcr: convert latch 4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbnew: new latch again</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>3</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kcbnew_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kcbzibmlt: multi-block read: nowait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers chains</td><td class='awrc'>kclantilock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>cache buffers chains</td><td class='awrnc'>kclrwrite_3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbzgws</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>295</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbzgb_2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>58</td><td align="right" class='awrnc'>107</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbbic2</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>136</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbzgb_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>4</td></tr>
<tr><td class='awrc'>cache buffers lru chain</td><td class='awrc'>kcbbxsv: move to being written</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>cache buffers lru chain</td><td class='awrnc'>kcbzgb</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>35</td></tr>
<tr><td class='awrc'>call allocation</td><td class='awrc'>ksuxds</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>10</td></tr>
<tr><td class='awrnc'>checkpoint queue latch</td><td class='awrnc'>kcbklbc_cql</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>checkpoint queue latch</td><td class='awrc'>kcbkubc_4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclnfndnewm</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>173</td><td align="right" class='awrnc'>87</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclulb</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>50</td><td align="right" class='awrc'>72</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclfwrite1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>46</td><td align="right" class='awrnc'>47</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclpdcl</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>19</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclnfndx</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>29</td><td align="right" class='awrnc'>44</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclrwrite</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>31</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclantilock_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>6</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclnfnds</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>10</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>KCLUNLNK</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9</td><td align="right" class='awrnc'>93</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclplz_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>9</td><td align="right" class='awrc'>3</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclplz</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclrwrite_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>5</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclpdc_1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>13</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclbla</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gc element</td><td class='awrnc'>kclhngcbk1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gc element</td><td class='awrc'>kclnfnd</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs nodemap pool</td><td class='awrnc'>kjbrnmapalloc_2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>4</td></tr>
<tr><td class='awrc'>gcs nodemap pool</td><td class='awrc'>kjbrnmapalloc_1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>3</td></tr>
<tr><td class='awrnc'>gcs remastering latch</td><td class='awrnc'>kjfcdrmrfg beginning</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>97</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs remastering latch</td><td class='awrc'>kjdrisdrm nowait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>57</td><td align="right" class='awrc'>187</td></tr>
<tr><td class='awrnc'>gcs remastering latch</td><td class='awrnc'>kjfcdrmrfg end step</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs remastering latch</td><td class='awrc'>kjfcdrmrfg drmfrz step</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>gcs remastering latch</td><td class='awrnc'>kjdrsndRMno status not remastering</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>14</td></tr>
<tr><td class='awrc'>gcs resource freelist</td><td class='awrc'>kjbralc: check freelist nowait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource freelist</td><td class='awrnc'>kjbrfr_bg2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>gcs resource freelist</td><td class='awrc'>kjbrralc: reserve allocation</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kclfwrite1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>201</td><td align="right" class='awrnc'>31</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjblocalobj_nolock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>107</td><td align="right" class='awrc'>173</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbcropen</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>54</td><td align="right" class='awrnc'>41</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kclpdc</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>28</td><td align="right" class='awrc'>163</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbmpopen</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>27</td><td align="right" class='awrnc'>13</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjblpast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>22</td><td align="right" class='awrc'>16</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbopen</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>3</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbmpclose</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>7</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbrdowncvt</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbrprmexpack</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>2</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kclrwrite</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>22</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbclose_remaster</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>25</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjbmpflushpi</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbcancel</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>gcs resource hash</td><td class='awrnc'>kjblprmexp2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>gcs resource hash</td><td class='awrc'>kjbmpconvert</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>ges cached resource lists</td><td class='awrnc'>kjrm2c: move resource to cache</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>ges enqueue table freelist</td><td class='awrc'>kjlalc: lock allocation</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>19</td><td align="right" class='awrc'>13</td></tr>
<tr><td class='awrnc'>ges process parent latch</td><td class='awrnc'>kjata_fg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjlrlr: remove lock from resource queue</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>34</td><td align="right" class='awrc'>35</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjrmas1: lookup master node</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>ges resource hash list</td><td class='awrc'>kjucvl: lock convert request</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>ges resource hash list</td><td class='awrnc'>kjrref: find matched resource</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>4</td></tr>
<tr><td class='awrc'>ksv class latch</td><td class='awrc'>ksvclsl: checkpool</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>ksz_so allocation latch</td><td class='awrnc'>ksz_parent_so_del1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>messages</td><td class='awrc'>ksaamb: after wakeup</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>4</td></tr>
<tr><td class='awrnc'>messages</td><td class='awrnc'>ksarcv</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>messages</td><td class='awrc'>ksarcv: after wait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>mostly latch-free SCN</td><td class='awrnc'>kcs024</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>object queue header freelist</td><td class='awrc'>kcbo_unlink_q</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_link_q</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>4</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_unlink_q</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>9</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_switch_mq_bg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>5</td></tr>
<tr><td class='awrc'>object queue header operation</td><td class='awrc'>kcbo_switch_cq</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>5</td><td align="right" class='awrc'>6</td></tr>
<tr><td class='awrnc'>object queue header operation</td><td class='awrnc'>kcbo_switch_q_bg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>10</td></tr>
<tr><td class='awrc'>post/wait queue</td><td class='awrc'>ksliwat:remove</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>46</td></tr>
<tr><td class='awrnc'>post/wait queue</td><td class='awrnc'>ksliwat:add:nowait</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>23</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>post/wait queue</td><td class='awrc'>kslpstevent:get</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>19</td></tr>
<tr><td class='awrnc'>post/wait queue</td><td class='awrnc'>kslpstevent:reget</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>14</td></tr>
<tr><td class='awrc'>post/wait queue</td><td class='awrc'>ksliwat:add:wait</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>redo allocation</td><td class='awrnc'>kcrfw_redo_gen: redo allocation 1</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>redo writing</td><td class='awrc'>kcrfwcr</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1</td></tr>
<tr><td class='awrnc'>simulator lru latch</td><td class='awrnc'>kcbs_free_granule_sim_buffers</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>space background task latch</td><td class='awrc'>ktsj_grab_task</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>361</td><td align="right" class='awrc'>463</td></tr>
<tr><td class='awrnc'>space background task latch</td><td class='awrnc'>ktsj_smco_purgeexpired</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>94</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>space background task latch</td><td class='awrc'>ktsj_detach_task</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>60</td></tr>
<tr><td class='awrnc'>space background task latch</td><td class='awrnc'>ktsj_smco_movetasks</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>undo global data</td><td class='awrc'>ktusmupst: KSLBEGIN</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>3</td></tr>
<tr><td class='awrnc'>undo global data</td><td class='awrnc'>ktudba: KSLBEGIN</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>kghfre</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>61</td><td align="right" class='awrc'>65</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>ksqgtl3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>41</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>ksqcmi: if lk mode not requested</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>4</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>ksqrcl</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>40</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>kghupr1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>19</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>ksqcmi: if lk mode requested</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>13</td><td align="right" class='awrnc'>8</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>kghalo</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>7</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>kghalp</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>kgh: sim unpin</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>spmemrm_use_free_mem</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>unknown latch</td><td class='awrc'>kghasp</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>unknown latch</td><td class='awrnc'>kghfnd: min scan</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7500"></a>
<h3 class="awr">Mutex Sleep Summary</h3>
<ul>
<li class="awr"> ordered by number of sleeps desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the mutex sleep summary. Location, sleeps and wait time are displayed for each mutex type"><tr><th class="awrbg" scope="col">Mutex Type</th><th class="awrbg" scope="col">Location</th><th class="awrbg" scope="col">Sleeps</th><th class="awrbg" scope="col">Wait    Time (ms)</th></tr>
<tr><td class='awrc'>Cursor Pin</td><td class='awrc'>kkslce [KKSCHLPIN2]</td><td align="right" class='awrc'>1,268</td><td align="right" class='awrc'>1,312</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kglpin1   4</td><td align="right" class='awrnc'>83</td><td align="right" class='awrnc'>32</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kglget2   2</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>50</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kglpnal1  90</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>21</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kgllkdl1  85</td><td align="right" class='awrc'>38</td><td align="right" class='awrc'>47</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kglllal3 111</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>1</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kglpnal2  91</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>29</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kglhdgn2 106</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kgllkc1   57</td><td align="right" class='awrc'>8</td><td align="right" class='awrc'>10</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kglllal1 109</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kglhdgh3     161</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kgllldl2 112</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kglpndl1  95</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kglhdgh1  64</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kglhdgc1  102</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
<tr><td class='awrnc'>Library Cache</td><td class='awrnc'>kgllkal1  80</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
<tr><td class='awrc'>Library Cache</td><td class='awrc'>kglobld1  75</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3800"></a>
<h3 class="awr">Parent Latch Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="3900"></a>
<h3 class="awr">Child Latch Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#29">Back to Latch Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="30"></a>
<h2 class="awr">
Segment Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4000">Segments by Logical Reads</a></li>
<li class="awr"><a class="awr" href="#4100">Segments by Physical Reads</a></li>
<li class="awr"><a class="awr" href="#4104">Segments by Physical Read Requests</a></li>
<li class="awr"><a class="awr" href="#4108">Segments by UnOptimized Reads</a></li>
<li class="awr"><a class="awr" href="#4106">Segments by Optimized Reads</a></li>
<li class="awr"><a class="awr" href="#4110">Segments by Direct Physical Reads</a></li>
<li class="awr"><a class="awr" href="#4120">Segments by Physical Writes</a></li>
<li class="awr"><a class="awr" href="#4124">Segments by Physical Write Requests</a></li>
<li class="awr"><a class="awr" href="#4130">Segments by Direct Physical Writes</a></li>
<li class="awr"><a class="awr" href="#4140">Segments by Table Scans</a></li>
<li class="awr"><a class="awr" href="#4150">Segments by DB Blocks Changes</a></li>
<li class="awr"><a class="awr" href="#4200">Segments by Row Lock Waits</a></li>
<li class="awr"><a class="awr" href="#4300">Segments by ITL Waits</a></li>
<li class="awr"><a class="awr" href="#4400">Segments by Buffer Busy Waits</a></li>
<li class="awr"><a class="awr" href="#4450">Segments by Global Cache Buffer Busy</a></li>
<li class="awr"><a class="awr" href="#4500">Segments by CR Blocks Received</a></li>
<li class="awr"><a class="awr" href="#4600">Segments by Current Blocks Received</a></li>
<li class="awr"><a class="awr" href="#4605">Segments by Global Cache Remote Grants</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4000"></a>
<h3 class="awr">Segments by Logical Reads</h3>
<ul>
<li class="awr">Total Logical Reads:	  20,006,950</li>
<li class="awr">Captured Segments account for	52.6% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by logical reads. Owner, tablespace name, object type, logical read, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Logical Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER57</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73591</td><td align="right" class='awrc'>73595</td><td align="right" class='awrc'>481,040</td><td align="right" class='awrc'>2.40</td></tr>
<tr><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73347</td><td align="right" class='awrnc'>73354</td><td align="right" class='awrnc'>440,080</td><td align="right" class='awrnc'>2.20</td></tr>
<tr><td class='awrc'>USER176</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74180</td><td align="right" class='awrc'>74205</td><td align="right" class='awrc'>424,832</td><td align="right" class='awrc'>2.12</td></tr>
<tr><td class='awrnc'>USER73</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73675</td><td align="right" class='awrnc'>73684</td><td align="right" class='awrnc'>421,472</td><td align="right" class='awrnc'>2.11</td></tr>
<tr><td class='awrc'>USER67</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73655</td><td align="right" class='awrc'>73664</td><td align="right" class='awrc'>419,840</td><td align="right" class='awrc'>2.10</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4100"></a>
<h3 class="awr">Segments by Physical Reads</h3>
<ul>
<li class="awr">Total Physical Reads:	   10,818,025</li>
<li class="awr">Captured Segments account for	57.2% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical reads. Owner, tablespace name, object type, physical reads, etc. are displayed for each segment "><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	 Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER57</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73591</td><td align="right" class='awrc'>73595</td><td align="right" class='awrc'>376,418</td><td align="right" class='awrc'>3.48</td></tr>
<tr><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73347</td><td align="right" class='awrnc'>73354</td><td align="right" class='awrnc'>371,434</td><td align="right" class='awrnc'>3.43</td></tr>
<tr><td class='awrc'>USER176</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74180</td><td align="right" class='awrc'>74205</td><td align="right" class='awrc'>369,365</td><td align="right" class='awrc'>3.41</td></tr>
<tr><td class='awrnc'>USER186</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>74233</td><td align="right" class='awrnc'>74268</td><td align="right" class='awrnc'>364,196</td><td align="right" class='awrnc'>3.37</td></tr>
<tr><td class='awrc'>USER67</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73655</td><td align="right" class='awrc'>73664</td><td align="right" class='awrc'>358,550</td><td align="right" class='awrc'>3.31</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4104"></a>
<h3 class="awr">Segments by Physical Read Requests</h3>
<ul>
<li class="awr">Total Physical Read Requests:	   10,815,881</li>
<li class="awr">Captured Segments account for	57.3% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical read requests. Owner, tablespace name, object type, physical read requests, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Phys Read Requests</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER57</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73591</td><td align="right" class='awrc'>73595</td><td align="right" class='awrc'>376,418</td><td align="right" class='awrc'>3.48</td></tr>
<tr><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73347</td><td align="right" class='awrnc'>73354</td><td align="right" class='awrnc'>371,434</td><td align="right" class='awrnc'>3.43</td></tr>
<tr><td class='awrc'>USER176</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74180</td><td align="right" class='awrc'>74205</td><td align="right" class='awrc'>369,365</td><td align="right" class='awrc'>3.42</td></tr>
<tr><td class='awrnc'>USER186</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>74233</td><td align="right" class='awrnc'>74268</td><td align="right" class='awrnc'>364,196</td><td align="right" class='awrnc'>3.37</td></tr>
<tr><td class='awrc'>USER67</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73655</td><td align="right" class='awrc'>73664</td><td align="right" class='awrc'>358,550</td><td align="right" class='awrc'>3.32</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4108"></a>
<h3 class="awr">Segments by UnOptimized Reads</h3>
<ul>
<li class="awr">Total UnOptimized Read Requests:      10,815,881</li>
<li class="awr">Captured Segments account for	57.3% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by unoptimized reads. Owner, tablespace name, object type, unoptimized reads, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">UnOptimized Reads</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER57</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73591</td><td align="right" class='awrc'>73595</td><td align="right" class='awrc'>376,418</td><td align="right" class='awrc'>3.48</td></tr>
<tr><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73347</td><td align="right" class='awrnc'>73354</td><td align="right" class='awrnc'>371,434</td><td align="right" class='awrnc'>3.43</td></tr>
<tr><td class='awrc'>USER176</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74180</td><td align="right" class='awrc'>74205</td><td align="right" class='awrc'>369,365</td><td align="right" class='awrc'>3.42</td></tr>
<tr><td class='awrnc'>USER186</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>74233</td><td align="right" class='awrnc'>74268</td><td align="right" class='awrnc'>364,196</td><td align="right" class='awrnc'>3.37</td></tr>
<tr><td class='awrc'>USER67</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73655</td><td align="right" class='awrc'>73664</td><td align="right" class='awrc'>358,550</td><td align="right" class='awrc'>3.32</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4106"></a>
<h3 class="awr">Segments by Optimized Reads</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4110"></a>
<h3 class="awr">Segments by Direct Physical Reads</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4120"></a>
<h3 class="awr">Segments by Physical Writes</h3>
<ul>
<li class="awr">Total Physical Writes:	     1,198,874</li>
<li class="awr">Captured Segments account for	56.1% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical writes. Owner, tablespace name, object type, physical writes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER57</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73591</td><td align="right" class='awrc'>73595</td><td align="right" class='awrc'>44,256</td><td align="right" class='awrc'>3.69</td></tr>
<tr><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73347</td><td align="right" class='awrnc'>73354</td><td align="right" class='awrnc'>41,729</td><td align="right" class='awrnc'>3.48</td></tr>
<tr><td class='awrc'>USER176</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74180</td><td align="right" class='awrc'>74205</td><td align="right" class='awrc'>40,657</td><td align="right" class='awrc'>3.39</td></tr>
<tr><td class='awrnc'>USER186</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>74233</td><td align="right" class='awrnc'>74268</td><td align="right" class='awrnc'>39,895</td><td align="right" class='awrnc'>3.33</td></tr>
<tr><td class='awrc'>USER67</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73655</td><td align="right" class='awrc'>73664</td><td align="right" class='awrc'>39,892</td><td align="right" class='awrc'>3.33</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4124"></a>
<h3 class="awr">Segments by Physical Write Requests</h3>
<ul>
<li class="awr">Total Physical Write Requests:	     1,132,021</li>
<li class="awr">Captured Segments account for	56.8% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by physical write requests. Owner, tablespace name, object type, physical write requests, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Phys Write Requests</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER57</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73591</td><td align="right" class='awrc'>73595</td><td align="right" class='awrc'>39,907</td><td align="right" class='awrc'>3.53</td></tr>
<tr><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73347</td><td align="right" class='awrnc'>73354</td><td align="right" class='awrnc'>39,332</td><td align="right" class='awrnc'>3.47</td></tr>
<tr><td class='awrc'>USER176</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74180</td><td align="right" class='awrc'>74205</td><td align="right" class='awrc'>38,836</td><td align="right" class='awrc'>3.43</td></tr>
<tr><td class='awrnc'>USER186</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>74233</td><td align="right" class='awrnc'>74268</td><td align="right" class='awrnc'>38,290</td><td align="right" class='awrnc'>3.38</td></tr>
<tr><td class='awrc'>USER67</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73655</td><td align="right" class='awrc'>73664</td><td align="right" class='awrc'>37,700</td><td align="right" class='awrc'>3.33</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4130"></a>
<h3 class="awr">Segments by Direct Physical Writes</h3>
<ul>
<li class="awr">Total Direct Physical Writes:		1,868</li>
<li class="awr">Captured Segments account for	11.0% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by direct physical writes. Owner, tablespace name, object type, direct writes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Direct Writes</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_1451622190_0</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>73031</td><td align="right" class='awrc'>73031</td><td align="right" class='awrc'>183</td><td align="right" class='awrc'>9.80</td></tr>
<tr><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td>
<td scope="row" class='awrnc'>SYS_LOB0000007451C00009$$</td><td class='awrnc'>SYS_LOB_P223</td><td class='awrnc'>LOB PARTITION</td><td align="right" class='awrnc'>78502</td><td align="right" class='awrnc'>78502</td><td align="right" class='awrnc'>22</td><td align="right" class='awrnc'>1.18</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4140"></a>
<h3 class="awr">Segments by Table Scans</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4150"></a>
<h3 class="awr">Segments by DB Blocks Changes</h3>
<ul>
<li class="awr"> % of Capture shows % of DB Block Changes for each top segment compared  </li>
<li class="awr"> with total DB Block Changes for all segments captured by the Snapshot </li>
<li class="awr"> When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by DB blocks changes. Owner, tablespace name, object type, db block changes, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">DB Block Changes</th><th class="awrbg" scope="col">% of Capture</th></tr>
<tr><td class='awrc'>USER57</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73591</td><td align="right" class='awrc'>73595</td><td align="right" class='awrc'>48,624</td><td align="right" class='awrc'>6.90</td></tr>
<tr><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73347</td><td align="right" class='awrnc'>73354</td><td align="right" class='awrnc'>44,016</td><td align="right" class='awrnc'>6.25</td></tr>
<tr><td class='awrc'>USER176</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74180</td><td align="right" class='awrc'>74205</td><td align="right" class='awrc'>42,528</td><td align="right" class='awrc'>6.04</td></tr>
<tr><td class='awrnc'>USER73</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73675</td><td align="right" class='awrnc'>73684</td><td align="right" class='awrnc'>42,160</td><td align="right" class='awrnc'>5.98</td></tr>
<tr><td class='awrc'>USER67</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73655</td><td align="right" class='awrc'>73664</td><td align="right" class='awrc'>41,968</td><td align="right" class='awrc'>5.96</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4200"></a>
<h3 class="awr">Segments by Row Lock Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4300"></a>
<h3 class="awr">Segments by ITL Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4400"></a>
<h3 class="awr">Segments by Buffer Busy Waits</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4450"></a>
<h3 class="awr">Segments by Global Cache Buffer Busy</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4500"></a>
<h3 class="awr">Segments by CR Blocks Received</h3>
<ul>
<li class="awr">Total CR Blocks Received:	      666</li>
<li class="awr">Captured Segments account for	11.4% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by CR blocks received. Owner, tablespace name, object type, CR blocks received, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject	Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">CR    Blocks  Received</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td>
<td scope="row" class='awrc'>WRH$_PARAMETER_PK</td><td class='awrc'>WRH$_PARAMETER_1451622190_0</td><td class='awrc'>INDEX PARTITION</td><td align="right" class='awrc'>73018</td><td align="right" class='awrc'>73018</td><td align="right" class='awrc'>10</td><td align="right" class='awrc'>1.50</td></tr>
<tr><td class='awrnc'>USER48</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73545</td><td align="right" class='awrnc'>73552</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>1.20</td></tr>
<tr><td class='awrc'>USER124</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73925</td><td align="right" class='awrc'>73943</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>1.05</td></tr>
<tr><td class='awrnc'>USER9</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73356</td><td align="right" class='awrnc'>73372</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>1.05</td></tr>
<tr><td class='awrc'>USER127</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73940</td><td align="right" class='awrc'>73950</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.90</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4600"></a>
<h3 class="awr">Segments by Current Blocks Received</h3>
<ul>
<li class="awr">Total Current Blocks Received:		 3,782</li>
<li class="awr">Captured Segments account for	35.0% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by current blocks received. Owner, tablespace name, object type, Current blocks received, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace	 Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Current Blocks  Received</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER48</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73545</td><td align="right" class='awrc'>73552</td><td align="right" class='awrc'>375</td><td align="right" class='awrc'>9.92</td></tr>
<tr><td class='awrnc'>USER46</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73532</td><td align="right" class='awrnc'>73540</td><td align="right" class='awrnc'>299</td><td align="right" class='awrnc'>7.91</td></tr>
<tr><td class='awrc'>USER43</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73522</td><td align="right" class='awrc'>73543</td><td align="right" class='awrc'>147</td><td align="right" class='awrc'>3.89</td></tr>
<tr><td class='awrnc'>USER64</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73630</td><td align="right" class='awrnc'>73635</td><td align="right" class='awrnc'>145</td><td align="right" class='awrnc'>3.83</td></tr>
<tr><td class='awrc'>USER73</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73675</td><td align="right" class='awrc'>73684</td><td align="right" class='awrc'>82</td><td align="right" class='awrc'>2.17</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4605"></a>
<h3 class="awr">Segments by Global Cache Remote Grants</h3>
<ul>
<li class="awr">Total Global Cache Remote Grants:	1,770,064</li>
<li class="awr">Captured Segments account for	32.9% of Total</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="This table displays top segments by gc remote grants. Owner, tablespace name, object type, gc remote grants, etc. are displayed for each segment"><tr><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace    Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject   Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">GC Remote Grants</th><th class="awrbg" scope="col">%Total</th></tr>
<tr><td class='awrc'>USER124</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73925</td><td align="right" class='awrc'>73943</td><td align="right" class='awrc'>21,120</td><td align="right" class='awrc'>1.19</td></tr>
<tr><td class='awrnc'>USER146</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>74037</td><td align="right" class='awrnc'>74043</td><td align="right" class='awrnc'>20,206</td><td align="right" class='awrnc'>1.14</td></tr>
<tr><td class='awrc'>USER121</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73911</td><td align="right" class='awrc'>73936</td><td align="right" class='awrc'>19,988</td><td align="right" class='awrc'>1.13</td></tr>
<tr><td class='awrnc'>USER143</td><td class='awrnc'>IOPS</td>
<td scope="row" class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>74010</td><td align="right" class='awrnc'>74046</td><td align="right" class='awrnc'>19,897</td><td align="right" class='awrnc'>1.12</td></tr>
<tr><td class='awrc'>USER175</td><td class='awrc'>IOPS</td>
<td scope="row" class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74184</td><td align="right" class='awrc'>74204</td><td align="right" class='awrc'>19,846</td><td align="right" class='awrc'>1.12</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#30">Back to Segment Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="31"></a>
<h2 class="awr">
Dictionary Cache Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4700">Dictionary Cache Stats</a></li>
<li class="awr"><a class="awr" href="#4800">Dictionary Cache Stats (RAC)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4700"></a>
<h3 class="awr">Dictionary Cache Stats</h3>
<ul>
<li class="awr"> &quot;Pct Misses&quot;  should be very low (&lt; 2% in most cases) </li>
<li class="awr"> &quot;Final Usage&quot; is the number of cache entries being used</li>
</ul>
<table border="0" class="tdiff" summary="This table displays dictionary cache statistics. Get requests, % misses, scan requests, final usage, etc. are displayed for each cache"><tr><th class="awrbg" scope="col">Cache</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Scan Reqs</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Mod Reqs</th><th class="awrbg" scope="col">Final Usage</th></tr>
<tr><td scope="row" class='awrc'>dc_awr_control</td><td align="right" class='awrc'>23</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>dc_global_oids</td><td align="right" class='awrnc'>9,844</td><td align="right" class='awrnc'>2.90</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>298</td></tr>
<tr><td scope="row" class='awrc'>dc_histogram_data</td><td align="right" class='awrc'>2,479</td><td align="right" class='awrc'>15.09</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>391</td></tr>
<tr><td scope="row" class='awrnc'>dc_histogram_defs</td><td align="right" class='awrnc'>31,394</td><td align="right" class='awrnc'>11.58</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>564</td><td align="right" class='awrnc'>4,723</td></tr>
<tr><td scope="row" class='awrc'>dc_object_grants</td><td align="right" class='awrc'>24</td><td align="right" class='awrc'>95.83</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>23</td></tr>
<tr><td scope="row" class='awrnc'>dc_objects</td><td align="right" class='awrnc'>23,081</td><td align="right" class='awrnc'>4.24</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>136</td><td align="right" class='awrnc'>1,581</td></tr>
<tr><td scope="row" class='awrc'>dc_profiles</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>50.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>dc_props</td><td align="right" class='awrnc'>266</td><td align="right" class='awrnc'>0.75</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td></tr>
<tr><td scope="row" class='awrc'>dc_rollback_segments</td><td align="right" class='awrc'>1,018</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>509</td></tr>
<tr><td scope="row" class='awrnc'>dc_segments</td><td align="right" class='awrnc'>1,402</td><td align="right" class='awrnc'>34.38</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>531</td></tr>
<tr><td scope="row" class='awrc'>dc_sequences</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>25.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>6</td></tr>
<tr><td scope="row" class='awrnc'>dc_tablespaces</td><td align="right" class='awrnc'>1,242</td><td align="right" class='awrnc'>0.32</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td></tr>
<tr><td scope="row" class='awrc'>dc_users</td><td align="right" class='awrc'>575</td><td align="right" class='awrc'>29.39</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>170</td></tr>
<tr><td scope="row" class='awrnc'>outstanding_alerts</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#31">Back to Dictionary Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4800"></a>
<h3 class="awr">Dictionary Cache Stats (RAC)</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#31">Back to Dictionary Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="32"></a>
<h2 class="awr">
Library Cache Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#4900">Library Cache Activity</a></li>
<li class="awr"><a class="awr" href="#5000">Library Cache Activity (RAC)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="4900"></a>
<h3 class="awr">Library Cache Activity</h3>
<ul>
<li class="awr"> &quot;Pct Misses&quot;  should be very low  </li>
</ul>
<table border="0" class="tdiff" summary="This table displays library cache statistics. Get requests, % misses, pin request, % miss, reloads, etc. are displayed for each library cache namespace"><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Pin Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Reloads</th><th class="awrbg" scope="col">Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>25.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>347</td><td align="right" class='awrc'>2.31</td><td align="right" class='awrc'>921</td><td align="right" class='awrc'>9.23</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>2.04</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>2.04</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>25.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>50.00</td><td align="right" class='awrnc'>4</td><td align="right" class='awrnc'>50.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>INDEX</td><td align="right" class='awrc'>186</td><td align="right" class='awrc'>14.52</td><td align="right" class='awrc'>186</td><td align="right" class='awrc'>14.52</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>OBJECT ID</td><td align="right" class='awrnc'>34</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SCHEMA</td><td align="right" class='awrc'>1,386</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA</td><td align="right" class='awrnc'>3,664</td><td align="right" class='awrnc'>51.50</td><td align="right" class='awrnc'>3,842,882</td><td align="right" class='awrnc'>-0.05</td><td align="right" class='awrnc'>102</td><td align="right" class='awrnc'>36</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA BUILD</td><td align="right" class='awrc'>883</td><td align="right" class='awrc'>82.33</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA STATS</td><td align="right" class='awrnc'>836</td><td align="right" class='awrnc'>99.88</td><td align="right" class='awrnc'>836</td><td align="right" class='awrnc'>99.88</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TABLE/PROCEDURE</td><td align="right" class='awrc'>5,072</td><td align="right" class='awrc'>16.84</td><td align="right" class='awrc'>20,507</td><td align="right" class='awrc'>9.97</td><td align="right" class='awrc'>218</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRIGGER</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>57.14</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>57.14</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#32">Back to Library Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5000"></a>
<h3 class="awr">Library Cache Activity (RAC)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays library cache statistics. Ges lock requests, GES pin requests, GES pin releases, etc. are displayed for each library cache namespace"><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">GES Lock Requests</th><th class="awrbg" scope="col">GES Pin Requests</th><th class="awrbg" scope="col">GES Pin Releases</th><th class="awrbg" scope="col">GES Inval Requests</th><th class="awrbg" scope="col">GES Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>330</td><td align="right" class='awrc'>879</td><td align="right" class='awrc'>879</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>INDEX</td><td align="right" class='awrc'>186</td><td align="right" class='awrc'>186</td><td align="right" class='awrc'>186</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SCHEMA</td><td align="right" class='awrnc'>35</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TABLE/PROCEDURE</td><td align="right" class='awrc'>7,881</td><td align="right" class='awrc'>14,486</td><td align="right" class='awrc'>14,486</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRIGGER</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#32">Back to Library Cache Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="33"></a>
<h2 class="awr">
Memory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#8500">Memory Dynamic Components</a></li>
<li class="awr"><a class="awr" href="#8600">Memory Resize Operations Summary</a></li>
<li class="awr"><a class="awr" href="#8650">Memory Resize Ops</a></li>
<li class="awr"><a class="awr" href="#7300">Process Memory Summary</a></li>
<li class="awr"><a class="awr" href="#5900">SGA Memory Summary</a></li>
<li class="awr"><a class="awr" href="#6100">SGA breakdown difference by Pool and Name</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8500"></a>
<h3 class="awr">Memory Dynamic Components</h3>
<ul>
<li class="awr"> Min/Max sizes since instance startup </li>
<li class="awr"> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred </li>
<li class="awr"> ordered by Component </li>
</ul>
<table border="0" class="tdiff" summary="This table displays memory dynamic component statistics. Begin snap size, current size, min size, etc. are displayed for each component"><tr><th class="awrbg" scope="col">Component</th><th class="awrbg" scope="col">Begin Snap Size (Mb)</th><th class="awrbg" scope="col">Current Size (Mb)</th><th class="awrbg" scope="col">Min Size (Mb)</th><th class="awrbg" scope="col">Max Size (Mb)</th><th class="awrbg" scope="col">Oper Count</th><th class="awrbg" scope="col">Last Op Typ/Mod</th></tr>
<tr><td scope="row" class='awrc'>ASM Buffer Cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 16K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT 2K buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 32K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT 4K buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>DEFAULT 8K buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>DEFAULT buffer cache</td><td align="right" class='awrc'>1,040.00</td><td align="right" class='awrc'>1,040.00</td><td align="right" class='awrc'>1,040.00</td><td align="right" class='awrc'>1,568.00</td><td align="right" class='awrc'>0</td><td class='awrc'>SHR/IMM</td></tr>
<tr><td scope="row" class='awrnc'>Data Transfer Cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>In Memory RO Extension Area</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>In Memory RW Extension Area</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>In-Memory Area</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>KEEP buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>PGA Target</td><td align="right" class='awrc'>4,176.00</td><td align="right" class='awrc'>4,176.00</td><td align="right" class='awrc'>4,176.00</td><td align="right" class='awrc'>4,176.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>RECYCLE buffer cache</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>SGA Target</td><td align="right" class='awrc'>3,072.00</td><td align="right" class='awrc'>3,072.00</td><td align="right" class='awrc'>3,072.00</td><td align="right" class='awrc'>3,072.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>Shared IO Pool</td><td align="right" class='awrnc'>96.00</td><td align="right" class='awrnc'>96.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>96.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>GRO/IMM</td></tr>
<tr><td scope="row" class='awrc'>java pool</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>large pool</td><td align="right" class='awrnc'>80.00</td><td align="right" class='awrnc'>80.00</td><td align="right" class='awrnc'>80.00</td><td align="right" class='awrnc'>80.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
<tr><td scope="row" class='awrc'>memoptimize buffer cache</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>1,808.00</td><td align="right" class='awrnc'>1,808.00</td><td align="right" class='awrnc'>640.00</td><td align="right" class='awrnc'>1,808.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>GRO/IMM</td></tr>
<tr><td scope="row" class='awrc'>streams pool</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td class='awrc'>STA/</td></tr>
<tr><td scope="row" class='awrnc'>unified pga pool</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0</td><td class='awrnc'>STA/</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8600"></a>
<h3 class="awr">Memory Resize Operations Summary</h3>
<ul>
<li class="awr"> Resizes, Grows, Shrinks - Operations captured by AWR	 if there are operations on the same component for the same	operation_type, target_size, and with the same start_time     only one operation is captured  </li>
<li class="awr"> ordered by Component </li>
</ul>
<table border="0" class="tdiff" summary="This table displays memory resize summary. For each component, it displays min size, max size, average size, resizes, etc."><tr><th class="awrbg" scope="col">Component</th><th class="awrbg" scope="col">Min Size (Mb)</th><th class="awrbg" scope="col">Max Size (Mb)</th><th class="awrbg" scope="col">Avg Size (Mb)</th><th class="awrbg" scope="col">Re- Sizes</th><th class="awrbg" scope="col">Grows</th><th class="awrbg" scope="col">Shrinks</th></tr>
<tr><td scope="row" class='awrc'>DEFAULT buffer cache</td><td align="right" class='awrc'>1,040.00</td><td align="right" class='awrc'>1,040.00</td><td align="right" class='awrc'>1,040.00</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td></tr>
<tr><td scope="row" class='awrnc'>shared pool</td><td align="right" class='awrnc'>1,808.00</td><td align="right" class='awrnc'>1,808.00</td><td align="right" class='awrnc'>1,808.00</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8650"></a>
<h3 class="awr">Memory Resize Ops</h3>
<ul>
<li class="awr"> Oper Types/Modes: INItializing,GROw,SHRink,STAtic/IMMediate,DEFerred	 Delta	     : change in size of the component	  Target Delta: displayed only if final size &lt;&gt; target_size </li>
<li class="awr"> Status: COMplete/CANcelled/INActive/PENding/ERRor </li>
<li class="awr"> ordered by start_time desc,component </li>
</ul>
<table border="0" class="tdiff" summary="This table displays service memory resize operations. For each resize operation, it displays component involved, operation type, init size, target delta, etc."><tr><th class="awrbg" scope="col">Start</th><th class="awrbg" scope="col">Ela (s)</th><th class="awrbg" scope="col">Component</th><th class="awrbg" scope="col">Oper Typ/Mod</th><th class="awrbg" scope="col">Init Size (M)</th><th class="awrbg" scope="col">Delta</th><th class="awrbg" scope="col">Target Delta</th><th class="awrbg" scope="col">Final (M)</th><th class="awrbg" scope="col">Sta</th></tr>
<tr><td class='awrc'>02/17 09:26:13</td><td align="right" class='awrc'>0</td><td class='awrc'>bufcache</td><td class='awrc'>SHR/IMM</td><td align="right" class='awrc'>1,040</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>-16</td><td align="right" class='awrc'>1,040</td><td class='awrc'>COM</td></tr>
<tr><td class='awrnc'>02/17 09:26:13</td><td align="right" class='awrnc'>0</td><td class='awrnc'>shared</td><td class='awrnc'>GRO/IMM</td><td align="right" class='awrnc'>1,808</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>1,808</td><td class='awrnc'>COM</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7300"></a>
<h3 class="awr">Process Memory Summary</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap  </li>
<li class="awr"> All rows below contain absolute values (i.e. not diffed over the interval) </li>
<li class="awr"> Max Alloc is Maximum PGA Allocation size at snapshot time  </li>
<li class="awr"> Hist Max Alloc is the Historical Max Allocation for still-connected processes </li>
<li class="awr"> ordered by Begin/End snapshot, Alloc (MB) desc </li>
<li class="awr"> Top 10 containers by Alloc (MB) at end snapshot time are displayed</li>
</ul>
<table border="0" class="tdiff" summary="This table displays process memory summary. Allocation, used, average allocation, etc. are displayed for different category of process memory."><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Category</th><th class="awrbg" scope="col">Alloc (MB)</th><th class="awrbg" scope="col">Used (MB)</th><th class="awrbg" scope="col">Avg Alloc (MB)</th><th class="awrbg" scope="col">Std Dev Alloc (MB)</th><th class="awrbg" scope="col">Max Alloc (MB)</th><th class="awrbg" scope="col">Hist Max Alloc (MB)</th><th class="awrbg" scope="col">Num Proc</th><th class="awrbg" scope="col">Num Alloc</th></tr>
<tr><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>349.50</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.31</td><td align="right" class='awrc'>6.89</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>151</td><td align="right" class='awrc'>151</td></tr>
<tr><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>1,715.52</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4.41</td><td align="right" class='awrnc'>6.75</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>389</td><td align="right" class='awrnc'>389</td></tr>
<tr><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>63.59</td><td align="right" class='awrc'>61.42</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>261</td><td align="right" class='awrc'>259</td></tr>
<tr><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>43.09</td><td align="right" class='awrnc'>28.25</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0.36</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>191</td><td align="right" class='awrnc'>153</td></tr>
<tr><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>2,171.69</td><td align="right" class='awrc'>89.67</td><td align="right" class='awrc'>7.19</td><td align="right" class='awrc'>14.28</td><td align="right" class='awrc'>139</td><td align="right" class='awrc'>113</td><td align="right" class='awrc'>992</td><td align="right" class='awrc'>952</td></tr>
<tr><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>245.81</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>5.12</td><td align="right" class='awrnc'>10.09</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>48</td></tr>
<tr><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>1,114.26</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4.13</td><td align="right" class='awrc'>8.31</td><td align="right" class='awrc'>96</td><td align="right" class='awrc'>96</td><td align="right" class='awrc'>270</td><td align="right" class='awrc'>270</td></tr>
<tr><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>7.92</td><td align="right" class='awrnc'>6.50</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>142</td><td align="right" class='awrnc'>140</td></tr>
<tr><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>11.18</td><td align="right" class='awrc'>8.94</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.82</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>39</td></tr>
<tr><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>1,379.17</td><td align="right" class='awrnc'>15.44</td><td align="right" class='awrnc'>9.46</td><td align="right" class='awrnc'>19.47</td><td align="right" class='awrnc'>148</td><td align="right" class='awrnc'>117</td><td align="right" class='awrnc'>532</td><td align="right" class='awrnc'>497</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5900"></a>
<h3 class="awr">SGA Memory Summary</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA memory summary. For each SGA region, begin size and end size is displayed."><tr><th class="awrbg" scope="col">SGA regions</th><th class="awrbg" scope="col">Begin Size (Bytes)</th><th class="awrbg" scope="col">End Size (Bytes) (if different)</th></tr>
<tr><td scope="row" class='awrc'>Database Buffers</td><td align="right" class='awrc'>1,191,182,336</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Fixed Size</td><td align="right" class='awrnc'>8,954,056</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Redo Buffers</td><td align="right" class='awrc'>41,373,696</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Variable Size</td><td align="right" class='awrnc'>20,233,322,496</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6100"></a>
<h3 class="awr">SGA breakdown difference by Pool and Name</h3>
<ul>
<li class="awr"> ordered by Pool, Name	</li>
<li class="awr"> N/A value for Begin MB or End MB indicates the size of that Pool/Name was    insignificant, or zero in that snapshot</li>
</ul>
<table border="0" class="tdiff" summary="This table displays SGA breakdown difference. For each pool name, begin and end size are displayed."><tr><th class="awrbg" scope="col">Pool</th><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Begin MB</th><th class="awrbg" scope="col">End MB</th><th class="awrbg" scope="col">% Diff</th></tr>
<tr><td class='awrc'>large</td><td class='awrc'>PX msg pool</td><td align="right" class='awrc'>64.00</td><td align="right" class='awrc'>64.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>large</td><td class='awrnc'>free memory</td><td align="right" class='awrnc'>15.62</td><td align="right" class='awrnc'>15.62</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ASH buffers</td><td align="right" class='awrc'>61.44</td><td align="right" class='awrc'>61.44</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>KGLH0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>28.81</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>KJSC rnb slots</td><td align="right" class='awrc'>53.76</td><td align="right" class='awrc'>23.04</td><td align="right" class='awrc'>-57.15</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>KKSSP</td><td align="right" class='awrnc'>18.09</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>-100.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>SO private sga</td><td align="right" class='awrc'>92.68</td><td align="right" class='awrc'>92.68</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>SQLA</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>67.33</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>buffer handle</td><td align="right" class='awrc'>23.44</td><td align="right" class='awrc'>23.44</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>dbwriter coalesce buffer</td><td align="right" class='awrnc'>32.03</td><td align="right" class='awrnc'>32.03</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>free memory</td><td align="right" class='awrc'>272.28</td><td align="right" class='awrc'>222.99</td><td align="right" class='awrc'>-18.10</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>gcs resources</td><td align="right" class='awrnc'>78.01</td><td align="right" class='awrnc'>78.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>gcs resv res hash bucket</td><td align="right" class='awrc'>24.00</td><td align="right" class='awrc'>24.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>gcs shadows</td><td align="right" class='awrnc'>42.55</td><td align="right" class='awrnc'>42.55</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ges enqueues</td><td align="right" class='awrc'>91.60</td><td align="right" class='awrc'>91.60</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>ges resource permanent</td><td align="right" class='awrnc'>97.11</td><td align="right" class='awrnc'>97.11</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>ksunfy_meta 1</td><td align="right" class='awrc'>196.98</td><td align="right" class='awrc'>196.98</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>object queue hash buckets</td><td align="right" class='awrnc'>32.00</td><td align="right" class='awrnc'>32.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>procs: ksunfy</td><td align="right" class='awrc'>26.72</td><td align="right" class='awrc'>26.72</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>row cache</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>shared</td><td class='awrc'>session</td><td align="right" class='awrc'>75.45</td><td align="right" class='awrc'>75.45</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>shared</td><td class='awrnc'>transaction</td><td align="right" class='awrnc'>24.31</td><td align="right" class='awrnc'>24.31</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>&#160;</td><td class='awrc'>buffer_cache</td><td align="right" class='awrc'>1,040.00</td><td align="right" class='awrc'>1,040.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>&#160;</td><td class='awrnc'>fixed_sga</td><td align="right" class='awrnc'>8.54</td><td align="right" class='awrnc'>8.54</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td class='awrc'>&#160;</td><td class='awrc'>log_buffer</td><td align="right" class='awrc'>39.46</td><td align="right" class='awrc'>39.46</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>&#160;</td><td class='awrnc'>shared_io_pool</td><td align="right" class='awrnc'>96.00</td><td align="right" class='awrnc'>96.00</td><td align="right" class='awrnc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#33">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="39"></a>
<h2 class="awr">
Replication Statistics (GoldenGate, XStream)
</h2>
<ul>
<li class="awr"><a class="awr" href="#9000">Replication System Resource Usage</a></li>
<li class="awr"><a class="awr" href="#9010">Replication SGA Usage</a></li>
<li class="awr"><a class="awr" href="#9020">GoldenGate Capture</a></li>
<li class="awr"><a class="awr" href="#9030">GoldenGate Capture Rate</a></li>
<li class="awr"><a class="awr" href="#9040">GoldenGate Apply Reader</a></li>
<li class="awr"><a class="awr" href="#9041">GoldenGate Apply Coordinator</a></li>
<li class="awr"><a class="awr" href="#9042">GoldenGate Apply Server</a></li>
<li class="awr"><a class="awr" href="#9051">GoldenGate Apply Coordinator Rate</a></li>
<li class="awr"><a class="awr" href="#9050">GoldenGate Apply Reader and Server Rate</a></li>
<li class="awr"><a class="awr" href="#9060">XStream Capture</a></li>
<li class="awr"><a class="awr" href="#9070">XStream Capture Rate</a></li>
<li class="awr"><a class="awr" href="#9080">XStream Apply Reader</a></li>
<li class="awr"><a class="awr" href="#9081">XStream Apply Coordinator</a></li>
<li class="awr"><a class="awr" href="#9082">XStream Apply Server</a></li>
<li class="awr"><a class="awr" href="#9091">XStream Apply Coordinator Rate</a></li>
<li class="awr"><a class="awr" href="#9090">XStream Apply Reader and Server Rate</a></li>
<li class="awr"><a class="awr" href="#9100">Table Statistics by DML Operations</a></li>
<li class="awr"><a class="awr" href="#9110">Table Statistics by Conflict Resolutions</a></li>
<li class="awr"><a class="awr" href="#9120">Replication Large Transaction Statistics</a></li>
<li class="awr"><a class="awr" href="#9130">Replication Long Running Transaction Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9000"></a>
<h3 class="awr">Replication System Resource Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9010"></a>
<h3 class="awr">Replication SGA Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9020"></a>
<h3 class="awr">GoldenGate Capture</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9030"></a>
<h3 class="awr">GoldenGate Capture Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9040"></a>
<h3 class="awr">GoldenGate Apply Reader</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9041"></a>
<h3 class="awr">GoldenGate Apply Coordinator</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9042"></a>
<h3 class="awr">GoldenGate Apply Server</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9051"></a>
<h3 class="awr">GoldenGate Apply Coordinator Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9050"></a>
<h3 class="awr">GoldenGate Apply Reader and Server Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9060"></a>
<h3 class="awr">XStream Capture</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9070"></a>
<h3 class="awr">XStream Capture Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9080"></a>
<h3 class="awr">XStream Apply Reader</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9081"></a>
<h3 class="awr">XStream Apply Coordinator</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9082"></a>
<h3 class="awr">XStream Apply Server</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9091"></a>
<h3 class="awr">XStream Apply Coordinator Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9090"></a>
<h3 class="awr">XStream Apply Reader and Server Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9100"></a>
<h3 class="awr">Table Statistics by DML Operations</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9110"></a>
<h3 class="awr">Table Statistics by Conflict Resolutions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9120"></a>
<h3 class="awr">Replication Large Transaction Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9130"></a>
<h3 class="awr">Replication Long Running Transaction Statistics</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#39">Back to Replication Statistics (GoldenGate, XStream)</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="34"></a>
<h2 class="awr">
Advanced Queuing
</h2>
<ul>
<li class="awr"><a class="awr" href="#6150">Advanced Queue CPU/IO Usage</a></li>
<li class="awr"><a class="awr" href="#6400">Buffered Queues</a></li>
<li class="awr"><a class="awr" href="#6500">Buffered Queue Subscribers</a></li>
<li class="awr"><a class="awr" href="#6600">Rule Set</a></li>
<li class="awr"><a class="awr" href="#7600">Persistent Queues</a></li>
<li class="awr"><a class="awr" href="#7610">Persistent Queues Rate</a></li>
<li class="awr"><a class="awr" href="#7700">Persistent Queue Subscribers</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6150"></a>
<h3 class="awr">Advanced Queue CPU/IO Usage</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6400"></a>
<h3 class="awr">Buffered Queues</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6500"></a>
<h3 class="awr">Buffered Queue Subscribers</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6600"></a>
<h3 class="awr">Rule Set</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7600"></a>
<h3 class="awr">Persistent Queues</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7610"></a>
<h3 class="awr">Persistent Queues Rate</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7700"></a>
<h3 class="awr">Persistent Queue Subscribers</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#34">Back to Advanced Queuing</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="6700"></a>
<h3 class="awr">Resource Limit Stats</h3>
<ul>
<li class="awr"> Only rows with Current or Maximum Utilization &gt; 80% of Limit are shown  </li>
<li class="awr"> For &quot;UNLIMITED&quot; resources, rows whose Current or Maximum Utilization    exceeds 2*Initial Allocation are shown </li>
<li class="awr"> Ordered by Resource Name</li>
</ul>
<table border="0" class="tdiff" summary="This table displays resource limit statistics. Current utilization, maximum utilization, initial allocation and limit are displayed for each resource name"><tr><th class="awrbg" scope="col">Resource Name</th><th class="awrbg" scope="col">Current	 Utilization</th><th class="awrbg" scope="col">Maximum	 Utilization</th><th class="awrbg" scope="col">  Initial Allocation</th><th class="awrbg" scope="col">	Limit</th></tr>
<tr><td scope="row" class='awrc'>ges_cache_ress</td><td align="right" class='awrc'>24,341</td><td align="right" class='awrc'>25,701</td><td class='awrc'>0</td><td class='awrc'>UNLIMITED</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="37"></a>
<h2 class="awr">
Shared Server Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#8710">Shared Servers Activity</a></li>
<li class="awr"><a class="awr" href="#8720">Shared Servers Rates</a></li>
<li class="awr"><a class="awr" href="#8730">Shared Servers Utilization</a></li>
<li class="awr"><a class="awr" href="#8740">Shared Servers Common Queue</a></li>
<li class="awr"><a class="awr" href="#8750">Shared Servers Dispatchers</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8710"></a>
<h3 class="awr">Shared Servers Activity</h3>
<ul>
<li class="awr"> Values represent averages for all samples</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers activity statistics. It displays average total connections, average active connections, average total shared servers, etc."><tr><th class="awrbg" scope="col">Avg Total Connections</th><th class="awrbg" scope="col">Avg Active Connections</th><th class="awrbg" scope="col">Avg Total Shared Srvrs</th><th class="awrbg" scope="col">Avg Active Shared Srvrs</th><th class="awrbg" scope="col">Avg Total Dispatchers</th><th class="awrbg" scope="col">Avg Active Dispatchers</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8720"></a>
<h3 class="awr">Shared Servers Rates</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers rate statistics. It displays common queue per second, disp queue per second, server messages per second, common queue total, etc."><tr><th class="awrbg" scope="col">Common Queue Per Sec</th><th class="awrbg" scope="col">Disp Queue Per Sec</th><th class="awrbg" scope="col">Server Msgs/Sec</th><th class="awrbg" scope="col">Server KB/Sec</th><th class="awrbg" scope="col">Common Queue Total</th><th class="awrbg" scope="col">Disp Queue Total</th><th class="awrbg" scope="col">Server Total Msgs</th><th class="awrbg" scope="col">Server Total(KB)</th></tr>
<tr><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8730"></a>
<h3 class="awr">Shared Servers Utilization</h3>
<ul>
<li class="awr"> Statistics are combined for all servers </li>
<li class="awr"> Incoming and Outgoing Net % are included in %Busy</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers utilization statistics. It displays total server time second, % busy, % idle, incoming net %, outgoing net %, etc."><tr><th class="awrbg" scope="col">Total Server Time (s)</th><th class="awrbg" scope="col">%Busy</th><th class="awrbg" scope="col">%Idle</th><th class="awrbg" scope="col">Incoming Net %</th><th class="awrbg" scope="col">Outgoing Net %</th></tr>
<tr><td align="right" class='awrc'>330</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8740"></a>
<h3 class="awr">Shared Servers Common Queue</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8750"></a>
<h3 class="awr">Shared Servers Dispatchers</h3>
<ul>
<li class="awr"> Ordered by %Busy, descending </li>
<li class="awr"> Total Queued, Total Queue Wait and Avg Queue Wait are for dispatcher queue </li>
<li class="awr"> Name suffixes:       &quot;(N)&quot; - dispatcher started between begin and end snapshots	&quot;(R)&quot; - dispatcher re-started between begin and end snapshots</li>
</ul>
<table border="0" class="tdiff" summary="This table displays shared servers dispatcher statistics. Average connections, total dispatch time, % busy, % idle, total queued, total queued wait, etc. are displayed for each dispatcher"><tr><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Avg Conns</th><th class="awrbg" scope="col">Total Disp Time (s)</th><th class="awrbg" scope="col">%Busy</th><th class="awrbg" scope="col">%Idle</th><th class="awrbg" scope="col">Total Queued</th><th class="awrbg" scope="col">Total Queue Wait (s)</th><th class="awrbg" scope="col">Avg Queue Wait (ms)</th></tr>
<tr><td scope="row" class='awrc'>D000</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>330</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>100.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#37">Back to Shared Server Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="36"></a>
<h2 class="awr">
Initialization Parameters
</h2>
<ul>
<li class="awr"><a class="awr" href="#6800">Modified Parameters</a></li>
<li class="awr"><a class="awr" href="#6850">Modified Multi-Valued Parameters</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6800"></a>
<h3 class="awr">Modified Parameters</h3>
<ul>
<li class="awr"> This section shows all the modified initialization parameters that  were in effect during the entire snapshot interval </li>
<li class="awr"> End Value is displayed only if the parameter value was modified within the snapshot interval</li>
</ul>
<table border="0" class="tdiff" summary="This table displays name and value of the modified initialization parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>_ipddb_enable</td><td class='awrc'>TRUE</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>audit_file_dest</td><td class='awrnc'>/u01/app/oracle/admin/p30sdb/adump</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>audit_trail</td><td class='awrc'>DB</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cluster_database</td><td class='awrnc'>TRUE</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>compatible</td><td class='awrc'>19.0.0</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>control_files</td><td class='awrnc'>+P30S/P30SDB/CONTROLFILE/current.261.1032513199,	+FRA/P30SDB/CONTROLFILE/current.256.1032513199</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_block_size</td><td class='awrc'>8192</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_create_file_dest</td><td class='awrnc'>+P30S</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_domain</td><td class='awrc'>example.com</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_name</td><td class='awrnc'>p30sdb</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>db_recovery_file_dest</td><td class='awrc'>+FRA</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db_recovery_file_dest_size</td><td class='awrnc'>805306368000</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>diagnostic_dest</td><td class='awrc'>/u01/app/oracle</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>dispatchers</td><td class='awrnc'>(PROTOCOL=TCP) (SERVICE=p30sdbXDB)</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>instance_number</td><td class='awrc'>2</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>listener_networks</td><td class='awrnc'>&#160;&#160;</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>local_listener</td><td class='awrc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522))</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>nls_language</td><td class='awrnc'>AMERICAN</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>nls_territory</td><td class='awrc'>AMERICA</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>open_cursors</td><td class='awrnc'>300</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>pga_aggregate_target</td><td class='awrc'>4376756224</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>processes</td><td class='awrnc'>5120</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>remote_listener</td><td class='awrc'>mcracpoc-scan.example.com:1521</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remote_login_passwordfile</td><td class='awrnc'>EXCLUSIVE</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>sga_max_size</td><td class='awrc'>21474836480</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>sga_target</td><td class='awrnc'>3221225472</td><td class='awrnc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrc'>thread</td><td class='awrc'>2</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo_tablespace</td><td class='awrnc'>UNDOTBS2</td><td class='awrnc'>&#160;&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#36">Back to Initialization Parameters</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="6850"></a>
<h3 class="awr">Modified Multi-Valued Parameters</h3>
<ul>
<li class="awr"> This section only displays parameters that have more than one value </li>
<li class="awr">'(NULL)' indicates a missing parameter value </li>
<li class="awr"> A blank in the 'End Snapshot' indicates the same value as the 'Begin Snapshot'</li>
</ul>
<table border="0" class="tdiff" summary="This table displays name and value of multi-valued parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>control_files</td><td class='awrc'>+FRA/P30SDB/CONTROLFILE/current.256.1032513199</td><td class='awrc'>&#160;&#160;</td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">control_files</div></td><td class='awrnc'>+P30S/P30SDB/CONTROLFILE/current.261.1032513199</td><td class='awrnc'>&#160;&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#36">Back to Initialization Parameters</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="42"></a>
<h2 class="awr">
Active Session History (ASH) Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#9990">Top SQL with Top Events</a></li>
<li class="awr"><a class="awr" href="#9989">Top SQL with Top Row Sources</a></li>
<li class="awr"><a class="awr" href="#9993">Top Sessions</a></li>
<li class="awr"><a class="awr" href="#9992">Top Blocking Sessions</a></li>
<li class="awr"><a class="awr" href="#9991">Top PL/SQL Procedures</a></li>
<li class="awr"><a class="awr" href="#9988">Top Events</a></li>
<li class="awr"><a class="awr" href="#9994">Top Event P1/P2/P3 Values</a></li>
<li class="awr"><a class="awr" href="#9987">Top DB Objects</a></li>
<li class="awr"><a class="awr" href="#9986">Activity Over Time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9990"></a>
<h3 class="awr">Top SQL with Top Events</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top events by DB Time	 for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event that the SQL is	   waiting on. </li>
<li class="awr"> % Row Source is the percentage of DB Time due to the row source for the     SQL waiting on the event. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top SQL by Top Wait Events"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Top Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>2375</td><td align="right" class='awrc'>65.80</td>
<td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>36.86</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>31.51</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">2375</div></td><td align="right" class='awrnc'><div class="hidden">65.79894765992799778454721683744115203545</div></td>
<td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>10.36</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>10.08</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">2375</div></td><td align="right" class='awrc'><div class="hidden">65.79894765992799778454721683744115203545</div></td>
<td class='awrc'>free buffer waits</td><td align="right" class='awrc'>9.28</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>8.47</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrnc'>203653710</td><td align="right" class='awrnc'>827</td><td align="right" class='awrnc'>23.79</td>
<td class='awrnc'>write complete waits</td><td align="right" class='awrnc'>5.79</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>5.79</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrc'><div class="hidden">203653710</div></td><td align="right" class='awrc'><div class="hidden">827</div></td><td align="right" class='awrc'><div class="hidden">23.78842425920797563001938521185267238992</div></td>
<td class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>4.40</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>4.40</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">827</div></td><td align="right" class='awrnc'><div class="hidden">23.78842425920797563001938521185267238992</div></td>
<td class='awrnc'>gc current grant busy</td><td align="right" class='awrnc'>3.35</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>3.35</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9989"></a>
<h3 class="awr">Top SQL with Top Row Sources</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top row sources by DB Time    for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Row Source is the percentage of DB Time spent on the row source by	   that SQL. </li>
<li class="awr"> % Event is the percentage of DB Time spent on the event by the      SQL executing the row source. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table display the Top SQLs with Top Row Sources"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">Top Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>2375</td><td align="right" class='awrc'>65.80</td>
<td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>57.41</td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>31.51</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">2375</div></td><td align="right" class='awrnc'><div class="hidden">65.79894765992799778454721683744115203545</div></td>
<td class='awrnc'>INDEX - RANGE SCAN</td><td align="right" class='awrnc'>7.59</td><td class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>5.34</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>827</td><td align="right" class='awrc'>23.79</td>
<td class='awrc'>UPDATE</td><td align="right" class='awrc'>21.13</td><td class='awrc'>write complete waits</td><td align="right" class='awrc'>5.79</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">827</div></td><td align="right" class='awrnc'><div class="hidden">23.78842425920797563001938521185267238992</div></td>
<td class='awrnc'>UPDATE STATEMENT</td><td align="right" class='awrnc'>1.72</td><td class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>0.80</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9993"></a>
<h3 class="awr">Top Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9992"></a>
<h3 class="awr">Top Blocking Sessions</h3>
<ul>
<li class="awr"> Blocking session activity percentages are calculated with respect to	     waits on enqueues, latches and &quot;buffer busy&quot; only  </li>
<li class="awr"> '% Activity' represents the load on the database caused by	   a particular blocking session </li>
<li class="awr"> '# Samples Active' shows the number of ASH samples in which the	blocking session was found active. </li>
<li class="awr"> 'XIDs' shows the number of distinct transaction IDs sampled in ASH	   when the blocking session was found active.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top sessions that are blocking other sessions."><tr><th class="awrbg" scope="col">Blocking Sid (Inst)</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event Caused</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">User</th><th class="awrbg" scope="col">Program</th><th class="awrbg" scope="col"># Samples Active</th><th class="awrbg" scope="col">XIDs</th></tr>
<tr><td align="right" scope="row" class='awrc'>1090,35581(     2)</td><td align="right" class='awrc'>3.05</td><td class='awrc'>free buffer waits</td><td align="right" class='awrc'>1.97</td>
<td class='awrc'>SYS</td><td class='awrc'>oracle@mcracpo...le.com (DBW7)</td><td align="right" class='awrc'>26/36 [ 72%]</td><td align="right" class='awrc'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1090,35581(     2)</div></td><td align="right" class='awrnc'><div class="hidden">3.04624757684851841595126003877042370534</div></td><td class='awrnc'>write complete waits</td><td align="right" class='awrnc'>1.08</td>
<td class='awrnc'><div class="hidden">SYS</div></td><td class='awrnc'><div class="hidden">oracle@mcracpo...le.com (DBW7)</div></td><td align="right" class='awrnc'><div class="hidden">26/36 [ 72%]</div></td><td align="right" class='awrnc'><div class="hidden">0</div></td></tr>
<tr><td align="right" scope="row" class='awrc'>5688, 1746(     2)</td><td align="right" class='awrc'>2.85</td><td class='awrc'>free buffer waits</td><td align="right" class='awrc'>2.05</td>
<td class='awrc'>SYS</td><td class='awrc'>oracle@mcracpo...le.com (DBW2)</td><td align="right" class='awrc'>26/36 [ 72%]</td><td align="right" class='awrc'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>5930, 3466(	2)</td><td align="right" class='awrnc'>2.77</td><td class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>2.16</td>
<td class='awrnc'>SYS</td><td class='awrnc'>oracle@mcracpo...le.com (DBW4)</td><td align="right" class='awrnc'>27/36 [ 74%]</td><td align="right" class='awrnc'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>5809,28560(     2)</td><td align="right" class='awrc'>1.91</td><td class='awrc'>free buffer waits</td><td align="right" class='awrc'>1.47</td>
<td class='awrc'>SYS</td><td class='awrc'>oracle@mcracpo...le.com (DBW3)</td><td align="right" class='awrc'>26/36 [ 72%]</td><td align="right" class='awrc'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>6051,14506(	2)</td><td align="right" class='awrnc'>1.88</td><td class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>1.30</td>
<td class='awrnc'>SYS</td><td class='awrnc'>oracle@mcracpo...le.com (DBW5)</td><td align="right" class='awrnc'>26/36 [ 72%]</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9991"></a>
<h3 class="awr">Top PL/SQL Procedures</h3>
<ul>
<li class="awr"> 'PL/SQL entry subprogram' represents the application's top-level	 entry-point (procedure, function, trigger, package initialization	 or RPC call) into PL/SQL. </li>
<li class="awr"> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed	    at the point of sampling . If the value is 'SQL', it represents	   the percentage of time spent executing SQL for the particular	PL/SQL entry subprogram</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top PL/SQL procedures"><tr><th class="awrbg" scope="col">PL/SQL Entry Subprogram</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">PL/SQL Current Subprogram</th><th class="awrbg" scope="col">% Current</th></tr>
<tr><td scope="row" class='awrc'>USER1.SLOBUPDATE</td><td align="right" class='awrc'>25.23</td>
<td class='awrc'>SQL</td><td align="right" class='awrc'>25.23</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9988"></a>
<h3 class="awr">Top Events</h3>
<ul>
<li class="awr"> Top Events by DB Time </li>
<li class="awr"> % Activity is the percentage of DB Time due to the event</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the top events"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Class</th><th class="awrbg" scope="col">Session Type</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>37.41</td><td align="right" class='awrc'>37.22</td></tr>
<tr><td scope="row" class='awrnc'>free buffer waits</td><td class='awrnc'>Configuration</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>11.91</td><td align="right" class='awrnc'>11.85</td></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td class='awrc'>User I/O</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>11.60</td><td align="right" class='awrc'>11.54</td></tr>
<tr><td scope="row" class='awrnc'>CPU + Wait for CPU</td><td class='awrnc'>CPU</td><td class='awrnc'>BACKGROUND</td>
<td align="right" class='awrnc'>6.26</td><td align="right" class='awrnc'>6.23</td></tr>
<tr><td scope="row" class='awrc'>write complete waits</td><td class='awrc'>Configuration</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>5.82</td><td align="right" class='awrc'>5.79</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9994"></a>
<h3 class="awr">Top Event P1/P2/P3 Values</h3>
<ul>
<li class="awr"> Top Events by DB Time and the top P1/P2/P3 values for those events. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event	</li>
<li class="awr"> % Activity is the percentage of DB Time due to the event with the given     P1,P2,P3 Values.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top event P1/P2/P3 values"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">P1, P2, P3 Values</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Parameter 1</th><th class="awrbg" scope="col">Parameter 2</th><th class="awrbg" scope="col">Parameter 3</th></tr>
<tr><td scope="row" class='awrc'>free buffer waits</td><td align="right" class='awrc'>11.91</td><td align="right" class='awrc'>&quot;5&quot;,&quot;246&quot;,&quot;160&quot;</td><td align="right" class='awrc'>0.03</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>set-id#</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>11.60</td><td align="right" class='awrnc'>&quot;8&quot;,&quot;46828&quot;,&quot;1&quot;</td><td align="right" class='awrnc'>0.03</td>
<td class='awrnc'>file#</td><td class='awrnc'>block#</td><td class='awrnc'>blocks</td></tr>
<tr><td scope="row" class='awrc'>write complete waits</td><td align="right" class='awrc'>5.84</td><td align="right" class='awrc'>&quot;3&quot;,&quot;3947&quot;,&quot;0&quot;</td><td align="right" class='awrc'>0.03</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>NOT DEFINED</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>2.19</td><td align="right" class='awrnc'>&quot;2484572848&quot;,&quot;65539&quot;,&quot;32&quot;</td><td align="right" class='awrnc'>0.06</td>
<td class='awrnc'>msg</td><td class='awrnc'>dest|rcvr</td><td class='awrnc'>mtype</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9987"></a>
<h3 class="awr">Top DB Objects</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9986"></a>
<h3 class="awr">Activity Over Time</h3>
<ul>
<li class="awr"> Analysis period is divided into smaller time slots as indicated    in the 'Slot Time (Duration)'. </li>
<li class="awr"> Top 3 events are reported in each of those slots </li>
<li class="awr"> 'Slot Count' shows the number of ASH samples in that slot </li>
<li class="awr"> 'Event Count' shows the number of ASH samples waiting for    that event in that slot </li>
<li class="awr"> '% Event' is 'Event Count' over all ASH samples in the analysis period</li>
</ul>
<table border="0" class="tdiff" summary="This table show the activity in ASH over time"><tr><th class="awrbg" scope="col">Slot Time (Duration)</th><th class="awrbg" scope="col">Slot Count</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Count</th><th class="awrbg" scope="col">% Event</th></tr>
<tr><td align="right" class='awrc'>09:26:07   (3.9 min)</td><td align="right" class='awrc'>3,100</td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>1,285</td><td align="right" class='awrc'>35.59</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">09:26:07   (3.9 min)</div></td><td align="right" class='awrnc'><div class="hidden">3100</div></td><td class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>376</td><td align="right" class='awrnc'>10.41</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">09:26:07   (3.9 min)</div></td><td align="right" class='awrc'><div class="hidden">3100</div></td><td class='awrc'>db file sequential read</td><td align="right" class='awrc'>365</td><td align="right" class='awrc'>10.11</td></tr>
<tr><td align="right" class='awrnc'>09:30:00   (2.2 min)</td><td align="right" class='awrnc'>511</td><td class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>2.55</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">09:30:00   (2.2 min)</div></td><td align="right" class='awrc'><div class="hidden">511</div></td><td class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>87</td><td align="right" class='awrc'>2.41</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">09:30:00   (2.2 min)</div></td><td align="right" class='awrnc'><div class="hidden">511</div></td><td class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>68</td><td align="right" class='awrnc'>1.88</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#42">Back to Active Session History (ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="99995"></a>
<h2>ADDM Task ADDM:1451622190_2_48</h2>
<pre>
	  ADDM Report for Task &apos;ADDM:1451622190_2_48&apos;
	  -------------------------------------------

Analysis Period
---------------
AWR snapshot range from 47 to 48.
Time period starts at 17-FEB-20 09.26.07 AM
Time period ends at 17-FEB-20 09.32.10 AM

Analysis Target
---------------
Database &apos;P30SDB&apos; with DB ID 1451622190.
Database version 19.0.0.0.0.
ADDM performed an analysis of instance p30sdb2, numbered 2 and hosted at
mcracpoc2.example.com.

Activity During the Analysis Period
-----------------------------------
Total database time was 28648 seconds.
The average number of active sessions was 78.92.

Summary of Findings
-------------------
    Description 		  Active Sessions      Recommendations
				  Percent of Activity
    ----------------------------  -------------------  ---------------
1   Interconnect Latency	  78.92 | 100	       1
2   Top SQL Statements		  77.13 | 97.73        2
3   Global Cache Messaging	  49.86 | 63.17        1
4   Buffer Busy - Hot Objects	  36.85 | 46.7	       0
5   Free Buffer Waits		  10.76 | 13.63        3
6   &quot;User I/O&quot; wait Class	    10.54 | 13.36	 0
7   Global Cache Lost Blocks	  4.5 | 5.7	       1
8   Unusual &quot;Cluster&quot; Wait Event  2.65 | 3.36 	 3
9   Unusual &quot;Other&quot; Wait Event    2.23 | 2.83 	 3
10  Undersized SGA		  1.07 | 1.36	       1


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 78.92 active sessions, 100% of total activity.
--------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time on this instance.
The instance was consuming 32758 kilo bits per second of interconnect
bandwidth.
0% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 95% for database lock management.
The average latency for 8K interconnect messages was 1166 microseconds.
The instance is using the private interconnect device &quot;fg-priv:1&quot; with IP
address 169.254.26.102 and source &quot;??&quot;.

   Recommendation 1: Host Configuration
   Estimated benefit is 78.92 active sessions, 100% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle&apos;s recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 49.86 active sessions, 63.17% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 52.52 active sessions, 66.55% of total activity.


Finding 2: Top SQL Statements
Impact is 77.13 active sessions, 97.73% of total activity.
----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

   Recommendation 1: SQL Tuning
   Estimated benefit is 48.66 active sessions, 61.66% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      &quot;bhdvtsvjhgvrh&quot;.
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND
	 (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 85% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;bhdvtsvjhgvrh&quot; was executed 3062456 times and
      had an average elapsed time of 0.0061 seconds.

   Recommendation 2: SQL Tuning
   Estimated benefit is 20.48 active sessions, 25.95% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      &quot;35dumc2tpr9dv&quot;. Additionally, investigate this statement for possible
      performance improvements. You can supplement the information given here
      with an ASH report for this SQL_ID.
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 ))
	 AND (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 58% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
      Look at data given below and an ASH report for further performance
      improvements.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;35dumc2tpr9dv&quot; was executed 340333 times and
      had an average elapsed time of 0.018 seconds.
   Rationale
      Waiting for event &quot;write complete waits&quot; in wait class &quot;Configuration&quot;
      accounted for 24% of the database time spent in processing the SQL
      statement with SQL_ID &quot;35dumc2tpr9dv&quot;.
   Rationale
      Waiting for event &quot;free buffer waits&quot; in wait class &quot;Configuration&quot;
      accounted for 11% of the database time spent in processing the SQL
      statement with SQL_ID &quot;35dumc2tpr9dv&quot;.


Finding 3: Global Cache Messaging
Impact is 49.86 active sessions, 63.17% of total activity.
----------------------------------------------------------
Inter-instance messaging was consuming significant database time on this
instance.

   Recommendation 1: Application Analysis
   Estimated benefit is 49.86 active sessions, 63.17% of total activity.
   ---------------------------------------------------------------------
   Action
      Look at the &quot;Top SQL Statements&quot; finding for SQL statements consuming
      significant time on Cluster waits. For example, the SELECT statement
      with SQL_ID &quot;bhdvtsvjhgvrh&quot; is responsible for 75% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 52.52 active sessions, 66.55% of total activity.


Finding 4: Buffer Busy - Hot Objects
Impact is 36.85 active sessions, 46.7% of total activity.
---------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 36.85 active sessions, 46.7% of total activity.
	 Inter-instance messaging was consuming significant database time on
	 this instance.
	 Impact is 49.86 active sessions, 63.17% of total activity.
	    Wait class &quot;Cluster&quot; was consuming significant database time.
	    Impact is 52.52 active sessions, 66.55% of total activity.


Finding 5: Free Buffer Waits
Impact is 10.76 active sessions, 13.63% of total activity.
----------------------------------------------------------
Database writers (DBWR) were unable to keep up with the demand for free
buffers.

   Recommendation 1: Database Configuration
   Estimated benefit is 10.76 active sessions, 13.63% of total activity.
   ---------------------------------------------------------------------
   Action
      Consider increasing the number of database writers (DBWR) by setting the
      parameter &quot;db_writer_processes&quot;. Also consider if asynchronous I/O is
      appropriate for your architecture.
   Rationale
      The value of parameter &quot;db_writer_processes&quot; was &quot;8&quot; during the analysis
      period.
   Rationale
      The value of parameter &quot;disk_asynch_io&quot; was &quot;TRUE&quot; during the analysis
      period.

   Recommendation 2: Host Configuration
   Estimated benefit is 10.76 active sessions, 13.63% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate the I/O subsystem&apos;s write performance.
   Rationale
      During the analysis period, the average data files&apos; I/O throughput was 0
      K per second for reads and 0 K per second for writes. The average
      response time for single block reads was 0 milliseconds.

   Recommendation 3: Application Analysis
   Estimated benefit is 10.76 active sessions, 13.63% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate application logic for possible use of direct path inserts as
      an alternative for multiple INSERT operations.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Configuration&quot; was consuming significant database time.
      Impact is 10.99 active sessions, 13.92% of total activity.


Finding 6: &quot;User I/O&quot; wait Class
Impact is 10.54 active sessions, 13.36% of total activity.
----------------------------------------------------------
Wait class &quot;User I/O&quot; was consuming significant database time.
Waits for I/O to temporary tablespaces were not consuming significant database
time.
The throughput of the I/O subsystem was not significantly lower than expected.

   No recommendations are available.


Finding 7: Global Cache Lost Blocks
Impact is 4.5 active sessions, 5.7% of total activity.
------------------------------------------------------
Cluster communications that were retried due to lost blocks consumed
significant database time.
The instance was consuming 32758 kilo bits per second of interconnect
bandwidth.
0% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 95% for database lock management.
The average latency for 8K interconnect messages was 1166 microseconds.
The instance is using the private interconnect device &quot;fg-priv:1&quot; with IP
address 169.254.26.102 and source &quot;??&quot;.

   Recommendation 1: Host Configuration
   Estimated benefit is 4.5 active sessions, 5.7% of total activity.
   -----------------------------------------------------------------
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time on this
      instance.
      Impact is 49.86 active sessions, 63.17% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 52.52 active sessions, 66.55% of total activity.


Finding 8: Unusual &quot;Cluster&quot; Wait Event
Impact is 2.65 active sessions, 3.36% of total activity.
--------------------------------------------------------
Wait event &quot;gc current grant read-mostly invalidation&quot; in wait class &quot;Cluster&quot;
was consuming significant database time.

   Recommendation 1: Application Analysis
   Estimated benefit is 2.65 active sessions, 3.36% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;gc current grant read-mostly
      invalidation&quot; waits. Refer to Oracle&apos;s &quot;Database Reference&quot; for the
      description of this wait event.

   Recommendation 2: Application Analysis
   Estimated benefit is 2.65 active sessions, 3.36% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;gc current grant read-mostly
      invalidation&quot; waits in Module &quot;SQL*Plus&quot;.

   Recommendation 3: Application Analysis
   Estimated benefit is 2.65 active sessions, 3.36% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;gc current grant read-mostly
      invalidation&quot; waits in Service &quot;p30sdb.example.com&quot;.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 52.52 active sessions, 66.55% of total activity.


Finding 9: Unusual &quot;Other&quot; Wait Event
Impact is 2.23 active sessions, 2.83% of total activity.
--------------------------------------------------------
Wait event &quot;KJC: Wait for msg sends to complete&quot; in wait class &quot;Other&quot; was
consuming significant database time.

   Recommendation 1: Application Analysis
   Estimated benefit is 2.23 active sessions, 2.83% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;KJC: Wait for msg sends to complete&quot;
      waits. Refer to Oracle&apos;s &quot;Database Reference&quot; for the description of
      this wait event.

   Recommendation 2: Application Analysis
   Estimated benefit is 2.23 active sessions, 2.83% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;KJC: Wait for msg sends to complete&quot;
      waits in Module &quot;SQL*Plus&quot;.

   Recommendation 3: Application Analysis
   Estimated benefit is 2.23 active sessions, 2.83% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;KJC: Wait for msg sends to complete&quot;
      waits in Service &quot;p30sdb.example.com&quot;.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Other&quot; was consuming significant database time.
      Impact is 2.28 active sessions, 2.89% of total activity.


Finding 10: Undersized SGA
Impact is 1.07 active sessions, 1.36% of total activity.
--------------------------------------------------------
The SGA was inadequately sized, causing additional I/O or hard parses.
The value of parameter &quot;sga_target&quot; was &quot;3072 M&quot; during the analysis period.

   Recommendation 1: Database Configuration
   Estimated benefit is 1.04 active sessions, 1.32% of total activity.
   -------------------------------------------------------------------
   Action
      Increase the size of the SGA by setting the parameter &quot;sga_target&quot; to
      3840 M.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;User I/O&quot; was consuming significant database time.
      Impact is 10.54 active sessions, 13.36% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Warnings
--------
The flushing of snapshots 47 and 48 took 49 seconds which is 13% of the
analysis period time. This may reduce the reliability of the ADDM analysis.

Miscellaneous Information
-------------------------
Wait class &quot;Application&quot; was not consuming significant database time.
Wait class &quot;Commit&quot; was not consuming significant database time.
Wait class &quot;Concurrency&quot; was not consuming significant database time.
CPU was not a bottleneck for the instance.
Wait class &quot;Network&quot; was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.
Hard parsing of SQL statements was not consuming significant database time.

</pre>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="9997"></a>
<a class="awr" name="9997"></a><h3 class="awr">RAC Statistics</h3>
<p />
<table border="0" width="600" class="tdiff" summary="This table displays information about RAC instances">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Begin</th><th class="awrbg" scope="col">End</th><th class="awrnobg" scope="col"></th></tr>
<tr><td scope="row" class='awrnc'>Number of Instances:</td><td align="right" class='awrnc'>    2</td><td align="right" class='awrnc'>	 2</td></tr>
<tr><td scope="row" class='awrc'>Number of LMS's:</td><td align="right" class='awrc'>	 4</td><td align="right" class='awrc'>	  4</td></tr>
<tr><td scope="row" class='awrnc'>Number of realtime LMS's:</td><td align="right" class='awrnc'>    4</td><td align="right" class='awrnc'>    4</td><td class='awrnc'> (0 priority changes)</td></tr>
</table><p />
Global Cache Load Profile
<p />
<table border="0" width="600" class="tdiff" summary="This table displays information about global cache load
		     profile">
<tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Per Second</th><th class="awrbg" scope="col">Per Transaction</th></tr>
<tr><td scope="row" class='awrnc'>Global Cache blocks received:</td><td align="right" class='awrnc'>		    12.25</td><td align="right" class='awrnc'>		       0.01</td></tr>
<tr><td scope="row" class='awrc'>Global Cache blocks served:</td><td align="right" class='awrc'>		11.85</td><td align="right" class='awrc'>		  0.01</td></tr>
<tr><td scope="row" class='awrnc'>GCS/GES messages received:</td><td align="right" class='awrnc'>	     11,947.12</td><td align="right" class='awrnc'>		   11.44</td></tr>
<tr><td scope="row" class='awrc'>GCS/GES messages sent:</td><td align="right" class='awrc'>	       14,485.63</td><td align="right" class='awrc'>		    13.88</td></tr>
<tr><td scope="row" class='awrnc'>DBWR Fusion writes:</td><td align="right" class='awrnc'>		   0.12</td><td align="right" class='awrnc'>		     0.00</td></tr>
<tr><td scope="row" class='awrc'>Estd Interconnect traffic (KB)</td><td align="right" class='awrc'>		5,355.44</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
Global Cache Efficiency Percentages (Target local+remote 100%)
<p />
<table border="0" width="600" class="tdiff" summary="This table displays global cache efficiency percentages">
<tr><td scope="row" class='awrnc'>Buffer access -  local cache %:</td><td align="right" class='awrnc'>	45.90</td></tr>
<tr><td scope="row" class='awrc'>Buffer access - remote cache %:</td><td align="right" class='awrc'>   0.02</td></tr>
<tr><td scope="row" class='awrnc'>Buffer access -	  disk %:</td><td align="right" class='awrnc'>	54.08</td></tr>
<tr><td scope="row" class='awrc'>Global Cache Locality	      %:</td><td align="right" class='awrc'>  83.70</td></tr>
</table><p />
Global Cache and Enqueue Services - Workload Characteristics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays workload characteristics for global
		    cache and enqueue services">
<tr><td scope="row" class='awrnc'>Avg global cache cr block receive time (us):</td><td align="right" class='awrnc'>	   15,015.0</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache current block receive time (us):</td><td align="right" class='awrc'>	      13,106.8</td></tr>
<tr><td scope="row" class='awrnc'>Avg LMS process busy %:</td><td align="right" class='awrnc'>		  24.5</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache cr block build time (us):</td><td align="right" class='awrc'> 	   38.4</td></tr>
<tr><td scope="row" class='awrnc'>Global cache log flushes for cr blocks served %:</td><td align="right" class='awrnc'> 	    6.9</td></tr>
<tr><td scope="row" class='awrc'>Avg global cache cr block flush time (us):</td><td align="right" class='awrc'>       126,492.5</td></tr>
<tr><td scope="row" class='awrnc'>Avg global cache current block pin time (us):</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Global cache log flushes for current blocks served %:</td><td align="right" class='awrc'>	       0.2</td></tr>
<tr><td scope="row" class='awrnc'>Avg global cache current block flush time (us):</td><td align="right" class='awrnc'>	       4,000.0</td></tr>
<tr><td scope="row" class='awrc'>Avg global enqueue get time (us):</td><td align="right" class='awrc'>	       1,079.8</td></tr>
</table><p />
Global Cache and Enqueue Services - Messaging Statistics
<p />
<table border="0" width="600" class="tdiff" summary="This table displays messaging statistics for Global Cache
		    and Enqueue Services">
<tr><td scope="row" class='awrnc'>Avg message sent queue time (us):</td><td align="right" class='awrnc'>	 2,270.6</td></tr>
<tr><td scope="row" class='awrc'>Avg message sent queue time on ksxp (us):</td><td align="right" class='awrc'>	       8,754.2</td></tr>
<tr><td scope="row" class='awrnc'>Avg message received kernel queue time (us):</td><td align="right" class='awrnc'>	      221.0</td></tr>
<tr><td scope="row" class='awrc'>Avg message received queue time (us):</td><td align="right" class='awrc'>	      54.8</td></tr>
<tr><td scope="row" class='awrnc'>Avg GCS message process time (us):</td><td align="right" class='awrnc'>	     29.7</td></tr>
<tr><td scope="row" class='awrc'>Avg GES message process time (us):</td><td align="right" class='awrc'> 	   91.4</td></tr>
<tr><td scope="row" class='awrnc'>% of direct sent messages:</td><td align="right" class='awrnc'>   37.33</td></tr>
<tr><td scope="row" class='awrc'>% of indirect sent messages:</td><td align="right" class='awrc'>   61.41</td></tr>
<tr><td scope="row" class='awrnc'>% of flow controlled messages:</td><td align="right" class='awrnc'>	 1.26</td></tr>
</table><p />
<hr />
<p />Cluster Interconnect<p />
<ul>
<li class="awr"> if Public/Source at End snap is different a '*' is displayed</li>
</ul>
<table border="0" class="tdiff" summary="Cluster Interconnect. . if Public/Source at End snap is different a '*' is displayed"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Begin">Begin</th>
<th class="awrbg" colspan=" 2" id="End">End</th>
</tr><tr>
<th class="awrbg" scope="col">Interface</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Src">Src</th></tr>
<tr><td class='awrc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrclb'>169.254.26.102</td><td headers="Begin Pub" class='awrc'>N</td><td headers="Begin Source" class='awrc'>&#160;</td><td headers="End Pub" class='awrclb'>&#160;</td><td headers="End Src" class='awrcrb'>&#160;</td></tr>
</table><p />
<a class="awr" name="top"></a>
<h2 class="awr">
RAC Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#9997">RAC Report Summary</a></li>
<li class="awr"><a class="awr" href="#5100">Global Messaging Statistics</a></li>
<li class="awr"><a class="awr" href="#5200">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#5300">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#7">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#8">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#8790">Dynamic Remastering Statistics</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5100"></a>
<h3 class="awr">Global Messaging Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays global messaging statistics. Total, per second, per transaction values are displayed for each statistics"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th></tr>
<tr><td scope="row" class='awrc'>Cluster reconfiguration count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Domain reconfiguration count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim Broadcasts sent</td><td align="right" class='awrc'>26</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Global Enqueue S-optim S-lock gets</td><td align="right" class='awrnc'>83,660</td><td align="right" class='awrnc'>230.44</td><td align="right" class='awrnc'>0.22</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim anti-locks crea</td><td align="right" class='awrc'>64</td><td align="right" class='awrc'>0.18</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA local message waits</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA local messages received</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA messages received actual</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA messages received logical</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>KA requests failed</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>KA requests succeeded</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>Pseudo reconfiguration count</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>Pseudo rm reconfig count</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>acks for commit broadcast(actual)</td><td align="right" class='awrnc'>984</td><td align="right" class='awrnc'>2.71</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>acks for commit broadcast(logical)</td><td align="right" class='awrc'>4,706</td><td align="right" class='awrc'>12.96</td><td align="right" class='awrc'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(actual)</td><td align="right" class='awrnc'>8,107</td><td align="right" class='awrnc'>22.33</td><td align="right" class='awrnc'>0.02</td></tr>
<tr><td scope="row" class='awrc'>broadcast msgs on commit(logical)</td><td align="right" class='awrc'>12,632</td><td align="right" class='awrc'>34.80</td><td align="right" class='awrc'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(wasted)</td><td align="right" class='awrnc'>5,652</td><td align="right" class='awrnc'>15.57</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>dynamically allocated gcs resources</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>dynamically allocated gcs shadows</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>flow control messages received</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>flow control messages sent</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs assume cvt</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs assume no cvt</td><td align="right" class='awrnc'>1,011</td><td align="right" class='awrnc'>2.78</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs ast to fg</td><td align="right" class='awrc'>1,443</td><td align="right" class='awrc'>3.97</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs ast xid</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs bidless ast to lms</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs blocked converts</td><td align="right" class='awrnc'>231,090</td><td align="right" class='awrnc'>636.55</td><td align="right" class='awrnc'>0.61</td></tr>
<tr><td scope="row" class='awrc'>gcs blocked cr converts</td><td align="right" class='awrc'>632</td><td align="right" class='awrc'>1.74</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible basts</td><td align="right" class='awrnc'>16</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible cr basts (global)</td><td align="right" class='awrc'>51</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible cr basts (local)</td><td align="right" class='awrnc'>565</td><td align="right" class='awrnc'>1.56</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs cr basts to PIs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs cr requests to slave</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs cr serve without current lock</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs dbwr flush pi msgs</td><td align="right" class='awrnc'>245,935</td><td align="right" class='awrnc'>677.44</td><td align="right" class='awrnc'>0.65</td></tr>
<tr><td scope="row" class='awrc'>gcs dbwr write request msgs</td><td align="right" class='awrc'>42</td><td align="right" class='awrc'>0.12</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs error msgs</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs flash read serve requests to slave</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr block only</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs force cr grant</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs force cr no current</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs forward cr to pinged instance</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs grant ast</td><td align="right" class='awrnc'>1,449</td><td align="right" class='awrnc'>3.99</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs grant request in partial open</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate (compatible) converts</td><td align="right" class='awrnc'>3,081</td><td align="right" class='awrnc'>8.49</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate (null) converts</td><td align="right" class='awrc'>64,222</td><td align="right" class='awrc'>176.90</td><td align="right" class='awrc'>0.17</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate cr (compatible) converts</td><td align="right" class='awrnc'>117,580</td><td align="right" class='awrnc'>323.88</td><td align="right" class='awrnc'>0.31</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate cr (null) converts</td><td align="right" class='awrc'>798,153</td><td align="right" class='awrc'>2,198.54</td><td align="right" class='awrc'>2.11</td></tr>
<tr><td scope="row" class='awrnc'>gcs lms flush pi msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs lms write request msgs</td><td align="right" class='awrc'>124</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs msgs process time(ms)</td><td align="right" class='awrnc'>119,648</td><td align="right" class='awrnc'>329.58</td><td align="right" class='awrnc'>0.32</td></tr>
<tr><td scope="row" class='awrc'>gcs msgs received</td><td align="right" class='awrc'>4,022,027</td><td align="right" class='awrc'>11,078.83</td><td align="right" class='awrc'>10.61</td></tr>
<tr><td scope="row" class='awrnc'>gcs new served by master</td><td align="right" class='awrnc'>111</td><td align="right" class='awrnc'>0.31</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs out-of-order msgs</td><td align="right" class='awrc'>814</td><td align="right" class='awrc'>2.24</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs pings refused</td><td align="right" class='awrnc'>219</td><td align="right" class='awrnc'>0.60</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs pkey conflicts retry</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs queued converts</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly failure unmount db</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass N-&gt;Xw ping local</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass N-&gt;Xw ping remote</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant X on assume</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant ast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs reader bypass grant fg ast</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant immediate</td><td align="right" class='awrc'>70</td><td align="right" class='awrc'>0.19</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs recovery claim msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to fg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs refuse xid to lms</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs refuse xid to master</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs regular cr</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs resources for dynamic sga</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs retry convert request</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs shadows for dynamic sga</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs share recovery bast</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs side channel msgs actual</td><td align="right" class='awrnc'>2,747</td><td align="right" class='awrnc'>7.57</td><td align="right" class='awrnc'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gcs side channel msgs logical</td><td align="right" class='awrc'>320,670</td><td align="right" class='awrc'>883.30</td><td align="right" class='awrc'>0.85</td></tr>
<tr><td scope="row" class='awrnc'>gcs stale cr</td><td align="right" class='awrnc'>8</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs undo cr</td><td align="right" class='awrc'>1,490</td><td align="right" class='awrc'>4.10</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs write notification msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>gcs writes refused</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges msgs process time(ms)</td><td align="right" class='awrnc'>144</td><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ges msgs received</td><td align="right" class='awrc'>1,576</td><td align="right" class='awrc'>4.34</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>ges remote lock allocation</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts dropped</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global posts queue time</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts queued</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>global posts requested</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>global posts sent</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>implicit batch messages received</td><td align="right" class='awrnc'>96,753</td><td align="right" class='awrnc'>266.51</td><td align="right" class='awrnc'>0.26</td></tr>
<tr><td scope="row" class='awrc'>implicit batch messages sent</td><td align="right" class='awrc'>103,127</td><td align="right" class='awrc'>284.07</td><td align="right" class='awrc'>0.27</td></tr>
<tr><td scope="row" class='awrnc'>lmd msg send time(ms)</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>lms(s) msg send time(ms)</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>messages flow controlled</td><td align="right" class='awrnc'>56,077</td><td align="right" class='awrnc'>154.47</td><td align="right" class='awrnc'>0.15</td></tr>
<tr><td scope="row" class='awrc'>messages queue sent actual</td><td align="right" class='awrc'>1,409,133</td><td align="right" class='awrc'>3,881.51</td><td align="right" class='awrc'>3.72</td></tr>
<tr><td scope="row" class='awrnc'>messages queue sent logical</td><td align="right" class='awrnc'>696,730</td><td align="right" class='awrnc'>1,919.17</td><td align="right" class='awrnc'>1.84</td></tr>
<tr><td scope="row" class='awrc'>messages received actual</td><td align="right" class='awrc'>2,414,768</td><td align="right" class='awrc'>6,651.58</td><td align="right" class='awrc'>6.37</td></tr>
<tr><td scope="row" class='awrnc'>messages received logical</td><td align="right" class='awrnc'>4,023,603</td><td align="right" class='awrnc'>11,083.18</td><td align="right" class='awrnc'>10.62</td></tr>
<tr><td scope="row" class='awrc'>messages sent directly</td><td align="right" class='awrc'>1,660,381</td><td align="right" class='awrc'>4,573.59</td><td align="right" class='awrc'>4.38</td></tr>
<tr><td scope="row" class='awrnc'>messages sent indirectly</td><td align="right" class='awrnc'>2,731,865</td><td align="right" class='awrnc'>7,525.03</td><td align="right" class='awrnc'>7.21</td></tr>
<tr><td scope="row" class='awrc'>messages sent not implicit batched</td><td align="right" class='awrc'>187,494</td><td align="right" class='awrc'>516.46</td><td align="right" class='awrc'>0.49</td></tr>
<tr><td scope="row" class='awrnc'>messages sent pbatched</td><td align="right" class='awrnc'>2,832,067</td><td align="right" class='awrnc'>7,801.04</td><td align="right" class='awrnc'>7.47</td></tr>
<tr><td scope="row" class='awrc'>msgs causing lmd to send msgs</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>msgs causing lms(s) to send msgs</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>msgs received kernel queue time (ns)</td><td align="right" class='awrc'>889,221,618,716</td><td align="right" class='awrc'>2,449,396,669.53</td><td align="right" class='awrc'>2,346,429.30</td></tr>
<tr><td scope="row" class='awrnc'>msgs received queue time (ms)</td><td align="right" class='awrnc'>220,338</td><td align="right" class='awrnc'>606.93</td><td align="right" class='awrnc'>0.58</td></tr>
<tr><td scope="row" class='awrc'>msgs received queued</td><td align="right" class='awrc'>4,023,603</td><td align="right" class='awrc'>11,083.18</td><td align="right" class='awrc'>10.62</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queue time (ms)</td><td align="right" class='awrnc'>3,741,123</td><td align="right" class='awrnc'>10,305.07</td><td align="right" class='awrnc'>9.87</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queue time on ksxp (ms)</td><td align="right" class='awrc'>26,879,527</td><td align="right" class='awrc'>74,040.74</td><td align="right" class='awrc'>70.93</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queued</td><td align="right" class='awrnc'>1,647,658</td><td align="right" class='awrnc'>4,538.54</td><td align="right" class='awrnc'>4.35</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queued on ksxp</td><td align="right" class='awrc'>3,070,469</td><td align="right" class='awrc'>8,457.73</td><td align="right" class='awrc'>8.10</td></tr>
<tr><td scope="row" class='awrnc'>number of broadcasted resources</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of directly freed master res</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of ges deadlock detected</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of lock borrowed by LMD</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of received ODPS messages</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of received RBA messages</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of resource borrowed by LMD</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>number of sent ODPS messages</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>number of sent RBA messages</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td scope="row" class='awrc'>process batch messages received</td><td align="right" class='awrc'>1,021,433</td><td align="right" class='awrc'>2,813.58</td><td align="right" class='awrc'>2.70</td></tr>
<tr><td scope="row" class='awrnc'>process batch messages sent</td><td align="right" class='awrnc'>918,047</td><td align="right" class='awrnc'>2,528.80</td><td align="right" class='awrnc'>2.42</td></tr>
<tr><td scope="row" class='awrc'>receiver cycle time</td><td align="right" class='awrc'>477,347</td><td align="right" class='awrc'>1,314.87</td><td align="right" class='awrc'>1.26</td></tr>
<tr><td scope="row" class='awrnc'>receiver loop count</td><td align="right" class='awrnc'>2,228,885</td><td align="right" class='awrnc'>6,139.55</td><td align="right" class='awrnc'>5.88</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5200"></a>
<h3 class="awr">Global CR Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="This table displays global CR served statistics. For each statistics, total value is shown"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th></tr>
<tr><td scope="row" class='awrc'>CR Block Requests</td><td align="right" class='awrc'>519</td></tr>
<tr><td scope="row" class='awrnc'>CURRENT Block Requests</td><td align="right" class='awrnc'>1,586</td></tr>
<tr><td scope="row" class='awrc'>Data Block Requests</td><td align="right" class='awrc'>519</td></tr>
<tr><td scope="row" class='awrnc'>Undo Block Requests</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TX Block Requests</td><td align="right" class='awrc'>1,576</td></tr>
<tr><td scope="row" class='awrnc'>Current Results</td><td align="right" class='awrnc'>1,940</td></tr>
<tr><td scope="row" class='awrc'>Private results</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>Zero Results</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>Disk Read Results</td><td align="right" class='awrc'>6</td></tr>
<tr><td scope="row" class='awrnc'>Fail Results</td><td align="right" class='awrnc'>159</td></tr>
<tr><td scope="row" class='awrc'>Fairness Down Converts</td><td align="right" class='awrc'>514</td></tr>
<tr><td scope="row" class='awrnc'>Light Works</td><td align="right" class='awrnc'>334</td></tr>
<tr><td scope="row" class='awrc'>Flushes</td><td align="right" class='awrc'>134</td></tr>
<tr><td scope="row" class='awrnc'>Builds</td><td align="right" class='awrnc'>519</td></tr>
<tr><td scope="row" class='awrc'>Errors</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="5300"></a>
<h3 class="awr">Global Current Server Statistics</h3>
<ul>
<li class="awr"> Pins	 = CURRENT Block Pin Operations </li>
<li class="awr"> Flushes = Redo Flush before CURRENT Block Served Operations</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global current served statistics"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th></tr>
<tr><td scope="row" class='awrc'>Pins</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Flushes</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>60.00</td><td align="right" class='awrnc'>40.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="7"></a>
<h2 class="awr">
Global Cache Transfer Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#5400">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#5450">Global Cache Transfer Times (us)</a></li>
<li class="awr"><a class="awr" href="#5460">Global Cache Transfer (Immediate)</a></li>
<li class="awr"><a class="awr" href="#5470">Global Cache Times (Immediate)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5400"></a>
<h3 class="awr">Global Cache Transfer Statistics</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> Busy	     (Busy) - Block Transfer impacted by Remote Contention </li>
<li class="awr"> Congested (Congst) - Block Transfer impacted by Remote System Load </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer stats. CR, blocks received, % immediate, % busy, % congestion are displayed for each instance and block class"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CR">CR</th>
<th class="awrbg" colspan=" 4" id="Current">Current</th>
</tr><tr>
<th class="awrbg" scope="col">Inst No</th><th class="awrbg" scope="col">Block	Class  </th><th class="awrbg" scope="col" id="Blocks|Received">Blocks Received</th><th class="awrbg" scope="col" id="%|Immed">% Immed</th><th class="awrbg" scope="col" id="%|Busy">% Busy</th><th class="awrbg" scope="col" id="%|Congst">% Congst</th><th class="awrbg" scope="col" id="Blocks|Received">Blocks Received</th><th class="awrbg" scope="col" id="%|Immed">% Immed</th><th class="awrbg" scope="col" id="%|Busy">% Busy</th><th class="awrbg" scope="col" id="%|Congst">% Congst</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>data block</td><td align="right" headers="CR Blocks|Received" class='awrclb'>604</td><td align="right" headers="CR %|Immed" class='awrc'>99.50</td><td align="right" headers="CR %|Busy" class='awrc'>0.17</td><td align="right" headers="CR %|Congst" class='awrc'>0.33</td><td align="right" headers="Current Blocks|Received" class='awrclb'>3,743</td><td align="right" headers="Current %|Immed" class='awrc'>10.34</td><td align="right" headers="Current %|Busy" class='awrc'>88.65</td><td align="right" headers="Current %|Congst" class='awrcrb'>1.02</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo header</td><td align="right" headers="CR Blocks|Received" class='awrnclb'>47</td><td align="right" headers="CR %|Immed" class='awrnc'>63.83</td><td align="right" headers="CR %|Busy" class='awrnc'>36.17</td><td align="right" headers="CR %|Congst" class='awrnc'>0.00</td><td align="right" headers="Current Blocks|Received" class='awrnclb'>1</td><td align="right" headers="Current %|Immed" class='awrnc'>0.00</td><td align="right" headers="Current %|Busy" class='awrnc'>100.00</td><td align="right" headers="Current %|Congst" class='awrncrb'>0.00</td></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>Others</td><td align="right" headers="CR Blocks|Received" class='awrclb'>12</td><td align="right" headers="CR %|Immed" class='awrc'>100.00</td><td align="right" headers="CR %|Busy" class='awrc'>0.00</td><td align="right" headers="CR %|Congst" class='awrc'>0.00</td><td align="right" headers="Current Blocks|Received" class='awrclb'>20</td><td align="right" headers="Current %|Immed" class='awrc'>15.00</td><td align="right" headers="Current %|Busy" class='awrc'>85.00</td><td align="right" headers="Current %|Congst" class='awrcrb'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5450"></a>
<h3 class="awr">Global Cache Transfer Times (us)</h3>
<ul>
<li class="awr"> Avg Time - average time of all blocks (Immed,Busy,Congst) in us </li>
<li class="awr"> Immed, Busy, Congst -	Average times in us </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer time statistics"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 4" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col">Inst No</th><th class="awrbg" scope="col">Block	Class  </th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Congst">Congst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Congst">Congst</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>data block</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>8045</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>6263</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>1085989</td><td align="right" headers="CRAvgTime(us) Congst" class='awrc'>4487</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>13244</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>22525</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>9686</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrcrb'>229342</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo header</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>111760</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>804</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>307566</td><td align="right" headers="CRAvgTime(us) Congst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>848</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>848</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>others</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>241</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>241</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Congst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>733</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>432</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>786</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo block</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Congst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Congst" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5460"></a>
<h3 class="awr">Global Cache Transfer (Immediate)</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> % of Blocks Received requiring 2 or 3 hops </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache transfer (immediate) statistics"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="CR">CR</th>
<th class="awrbg" colspan=" 3" id="Current">Current</th>
</tr><tr>
<th class="awrbg" scope="col">Src Inst#</th><th class="awrbg" scope="col">Block   Class  </th><th class="awrbg" scope="col">Blocks Lost</th><th class="awrbg" scope="col" id="ImmedBlks|Received">Immed Blks Received</th><th class="awrbg" scope="col" id="%|2hop">% 2hop</th><th class="awrbg" scope="col" id="%|3hop">% 3hop</th><th class="awrbg" scope="col" id="ImmedBlks|Received">Immed Blks Received</th><th class="awrbg" scope="col" id="%|2hop">% 2hop</th><th class="awrbg" scope="col" id="%|3hop">% 3hop</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>data block</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrclb'>601</td><td align="right" headers="CR %|2hop" class='awrc'>100.00</td><td align="right" headers="CR %|3hop" class='awrc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrclb'>387</td><td align="right" headers="Current %|2hop" class='awrc'>100.00</td><td align="right" headers="Current %|3hop" class='awrcrb'>0.00</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo header</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrnclb'>30</td><td align="right" headers="CR %|2hop" class='awrnc'>100.00</td><td align="right" headers="CR %|3hop" class='awrnc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrnclb'>&#160;</td><td align="right" headers="Current %|2hop" class='awrnc'>&#160;</td><td align="right" headers="Current %|3hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>others</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrclb'>12</td><td align="right" headers="CR %|2hop" class='awrc'>100.00</td><td align="right" headers="CR %|3hop" class='awrc'>0.00</td><td align="right" headers="Current ImmedBlks|Received" class='awrclb'>3</td><td align="right" headers="Current %|2hop" class='awrc'>100.00</td><td align="right" headers="Current %|3hop" class='awrcrb'>0.00</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CR ImmedBlks|Received" class='awrnclb'>&#160;</td><td align="right" headers="CR %|2hop" class='awrnc'>&#160;</td><td align="right" headers="CR %|3hop" class='awrnc'>&#160;</td><td align="right" headers="Current ImmedBlks|Received" class='awrnclb'>&#160;</td><td align="right" headers="Current %|2hop" class='awrnc'>&#160;</td><td align="right" headers="Current %|3hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="5470"></a>
<h3 class="awr">Global Cache Times (Immediate)</h3>
<ul>
<li class="awr"> Blocks Lost, 2-hop and 3-hop Average times in (us) </li>
<li class="awr"> ordered by CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="This table displays global cache times (immediate) statistics"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 3" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col">Src Inst#</th><th class="awrbg" scope="col">Block   Class  </th><th class="awrbg" scope="col">Lost Time</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="2hop">2hop</th><th class="awrbg" scope="col" id="3hop">3hop</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="2hop">2hop</th><th class="awrbg" scope="col" id="3hop">3hop</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>data block</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrclb'>6263</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrc'>6263</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrclb'>22525</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrc'>22525</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo header</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnclb'>804</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrnc'>804</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>others</td><td align="right" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrclb'>241</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrc'>241</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrclb'>432</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrc'>432</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'>1</td><td class='awrnc'>undo block</td><td align="right" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnclb'>&#160;</td><td align="right" headers="CRAvgTime(us) 2hop" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) 3hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 2hop" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) 3hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#7">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="8"></a>
<h2 class="awr">
Interconnect Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#7800">Interconnect Latency Stats</a></li>
<li class="awr"><a class="awr" href="#7900">Interconnect Throughput by Client</a></li>
<li class="awr"><a class="awr" href="#8000">Interconnect Device Stats</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7800"></a>
<h3 class="awr">Interconnect Ping Latency Statistics</h3>
<ul>
<li class="awr"> Ping latency of the roundtrip of a message from this instance to </li>
<li class="awr"> target instances.  </li>
<li class="awr"> The target instance is identified by an instance number. </li>
<li class="awr"> Average and standard deviation of ping latency is given in microseconds </li>
<li class="awr"> for message sizes of 500 bytes and 8K. </li>
<li class="awr"> Note that latency of a message from the instance to itself is used as </li>
<li class="awr"> control, since message latency can include wait for CPU</li>
</ul>
<table border="0" class="tdiff" summary="This table displays IC ping latency statistics"><tr><th class="awrbg" scope="col">Target Instance</th><th class="awrbg" scope="col">500B Ping Count</th><th class="awrbg" scope="col">Avg Latency 500B msg</th><th class="awrbg" scope="col">Stddev 500B msg</th><th class="awrbg" scope="col">8K Ping Count</th><th class="awrbg" scope="col">Avg Latency 8K msg</th><th class="awrbg" scope="col">Stddev 8K msg</th></tr>
<tr><td align="right" class='awrc'>1</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>812</td><td align="right" class='awrc'>0.54</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>1166</td><td align="right" class='awrc'>1.69</td></tr>
<tr><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>30</td><td align="right" class='awrnc'>313</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>33</td><td align="right" class='awrnc'>294</td><td align="right" class='awrnc'>0.13</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="7900"></a>
<h3 class="awr">Interconnect Throughput by Client</h3>
<ul>
<li class="awr"> Throughput of interconnect usage by major consumers </li>
<li class="awr"> All throughput numbers are megabytes per second</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Interconnect throughput by client statistics"><tr><th class="awrbg" scope="col">Used By</th><th class="awrbg" scope="col">Send Mbytes/sec</th><th class="awrbg" scope="col">Receive Mbytes/sec</th></tr>
<tr><td scope="row" class='awrc'>Global Cache</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.13</td></tr>
<tr><td scope="row" class='awrnc'>Parallel Query</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.03</td></tr>
<tr><td scope="row" class='awrc'>DB Locks</td><td align="right" class='awrc'>3.82</td><td align="right" class='awrc'>2.67</td></tr>
<tr><td scope="row" class='awrnc'>DB Streams</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Other</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.01</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="8000"></a>
<h3 class="awr">Interconnect Device Statistics</h3>
<ul>
<li class="awr"> Throughput and errors of interconnect devices (at OS level) </li>
<li class="awr"> All throughput numbers are megabytes per second</li>
</ul>
<table border="0" class="tdiff" summary="This table displays Interconnect device statistics. IP address, public, source, etc. are displayed for each device"><tr><th class="awrbg" scope="col">Device Name</th><th class="awrbg" scope="col">IP Address</th><th class="awrbg" scope="col">Public</th><th class="awrbg" scope="col">Source</th><th class="awrbg" scope="col">Send Mbytes/sec</th><th class="awrbg" scope="col">Send Errors</th><th class="awrbg" scope="col">Send Dropped</th><th class="awrbg" scope="col">Send Buffer Overrun</th><th class="awrbg" scope="col">Send Carrier Lost</th><th class="awrbg" scope="col">Receive Mbytes/sec</th><th class="awrbg" scope="col">Receive Errors</th><th class="awrbg" scope="col">Receive Dropped</th><th class="awrbg" scope="col">Receive Buffer Overrun</th><th class="awrbg" scope="col">Receive Frame Errors</th></tr>
<tr><td scope="row" class='awrc'>fg-priv:1</td><td class='awrc'>169.254.26.102</td><td class='awrc'>NO</td><td class='awrc'>&#160;</td>
<td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td>
<td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#8">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="8790"></a>
<h3 class="awr">Dynamic Remastering Statistics</h3>
<ul>
<li class="awr"> Times are in seconds </li>
<li class="awr"> Affinity objects - Affinity objects mastered at the begin/end snapshot </li>
<li class="awr"> Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot</li>
</ul>
<table border="0" class="tdiff" summary="Dynamic Remastering Statistics. . Times are in seconds. Affinity objects - Affinity objects mastered at the begin/end snapshot. Read-mostly objects - Read-mostly objects mastered at the begin/end snapshot"><tr><th class="awrbg" scope="col">Name</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Remaster Op</th><th class="awrbg" scope="col">Begin Snap</th><th class="awrbg" scope="col">End Snap</th></tr>
<tr><td scope="row" class='awrc'>remaster ops</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>1.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remastered objects</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>7.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>replayed locks received</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>replayed locks sent</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>resources cleaned</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>remaster time (s)</td><td align="right" class='awrnc'>0.8</td><td align="right" class='awrnc'>0.82</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>freeze time (s)</td><td align="right" class='awrc'>0.1</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>cleanup time (s)</td><td align="right" class='awrnc'>0.0</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>replay time (s)</td><td align="right" class='awrc'>0.0</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>fixwrite time (s)</td><td align="right" class='awrnc'>0.0</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>sync time (s)</td><td align="right" class='awrc'>0.6</td><td align="right" class='awrc'>0.58</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>affinity objects</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>63</td><td align="right" class='awrnc'>61</td></tr>
<tr><td scope="row" class='awrc'>read-mostly objects</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>65</td><td align="right" class='awrc'>65</td></tr>
<tr><td scope="row" class='awrnc'>affinity objects (other inst)</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>135</td><td align="right" class='awrnc'>132</td></tr>
<tr><td scope="row" class='awrc'>read-mostly objects (persistent)</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<p />
End of Report
</body></html>
Report written to awr.html
SQL> Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

WORKLOAD REPOSITORY REPORT (RAC)

Database Summary
~~~~~~~~~~~~~~~~
				   Database					   Snapshot Ids     Number of Instances     Number of Hosts	Report Total (minutes)
-----------------------------------------------------------------------------	-----------------   ------------------	 ------------------   ------------------------
	 Id Name      Unique Name Role		   Edition RAC CDB Block Size	   Begin      End   In Report	 Total	 In Report    Total	  DB time Elapsed time
----------- --------- ----------- ---------------- ------- --- --- ----------	-------- --------   --------- --------	 --------- --------   ----------- ------------
 1451622190 P30SDB    p30sdb	  PRIMARY	   EE	   YES NO	 8192	      47       48	    2	     2		 2	  2	 1,083.88	  6.05
Database Instances Included In Report
-> Listed in order of instance number, I#
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
																      Avg Active
  I# Instance  Host	  Startup	  Begin Snap Time End Snap Time   Release	  Elapsed Time(min) DB time(min) Up Time(hrs)	Sessions Platform
---- --------- ---------- --------------- --------------- --------------- --------------- ----------------- ------------ ------------ ---------- ---------------
   1 p30sdb1   mcracpoc1. 17-Feb-20 07:43 17-Feb-20 09:26 17-Feb-20 09:32 19.0.0.0.0		       6.05	  606.42	 1.81	  100.23 Linux x86 64-bi
   2 p30sdb2   mcracpoc2. 17-Feb-20 07:43 17-Feb-20 09:26 17-Feb-20 09:32 19.0.0.0.0		       6.05	  477.46	 1.81	   78.92 Linux x86 64-bi

Top ADDM Findings by Average Active Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Finding Name				 Avg act Percen Task Name		       Begin Snap Time End Snap Time
---------------------------------------- ------- ------ ------------------------------ --------------- ---------------
Interconnect Latency			  179.15 1.E+02 ADDM:1451622190_48	       17-Feb-20 09:26 17-Feb-20 09:32
Top SQL Statements			  179.15  98.04 ADDM:1451622190_48	       17-Feb-20 09:26 17-Feb-20 09:32
Global Cache Messaging			  179.15  45.58 ADDM:1451622190_48	       17-Feb-20 09:26 17-Feb-20 09:32
Buffer Busy - Hot Objects		  179.15  34.03 ADDM:1451622190_48	       17-Feb-20 09:26 17-Feb-20 09:32
"Configuration" Wait Class		  179.15  28.43 ADDM:1451622190_48	       17-Feb-20 09:26 17-Feb-20 09:32
Cache Sizes
-> All values are in Megabytes
-> Listed in order of instance number, I#
-> End values displayed only if different from Begin values
~~~~~~~~~~~
	 Memory Target	       Sga Target	    DB Cache	      Shared Pool	   Large Pool	       Java Pool	  Streams Pool	       PGA Target
       -----------------   -----------------   -----------------   -----------------   -----------------   -----------------   -----------------   -----------------
  I#	  Begin      End      Begin	 End	  Begin      End      Begin	 End	  Begin      End      Begin	 End	  Begin      End      Begin	 End   Log Buffer
----   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   -------- --------   ----------
   1			      3,072		  1,136 	      1,712		     80 						      4,176		     38.2
   2			      3,072		  1,040 	      1,808		     80 						      4,176		     38.2
 ~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~
 Avg			      3,072		  1,088 	      1,760		     80 						      4,176		     38.2
 Min			      3,072		  1,040 	      1,712		     80 						      4,176		     38.2
 Max			      3,072		  1,136 	      1,808		     80 						      4,176		     38.2

OS Statistics By Instance		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Listed in order of instance number, I#
-> End values are diplayed only if different from begin values

	      CPU		Load			  % CPU 				  Time (s)			 Memory 	    End Values
       -----------------   -------------   ----------------------------------	--------------------------------------------   ----------   -------------------------
  I#   #CPUs #Core #Sckt    Begin    End   % Busy  % Usr  % Sys  % WIO	% Idl		  Busy		 Idle	       Total	       MB   #CPU #Cor #Sck Memory (M)
----   ----- ----- -----   ------ ------   ------ ------ ------ ------ ------	-------------- -------------- --------------   ----------   ---- ---- ---- ----------
   1	  64	32     2     20.4   10.7     17.3    5.9    8.0   17.3	 82.7	       3,773.8	     18,042.4	    21,816.2   1.0321E+06
   2	  64	32     2     22.7    7.2     17.0    6.0    7.9   12.8	 83.0	       3,499.9	     17,105.9	    20,605.8   1.0321E+06
 ~~~										~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum										       7,273.7	     35,148.3	    42,422.0
			  --------------------------------------------------------------------------------------------------------------------


Time Model				 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

					 SQL Exec		     Hard Parse
  I#	DB time (s)	DB CPU (s)	  Ela (s)  Parse Ela (s)	Ela (s) PL/SQL Ela (s)	 Java Ela (s)	 bg time (s)	 bg CPU (s)
---- -------------- -------------- -------------- -------------- -------------- -------------- -------------- -------------- --------------
   1	   36,385.3	   2,949.6	 36,361.8	     4.6	    4.4 	 113.1		  0.0	     2,871.4	      728.9
   2	   28,647.6	   2,747.9	 28,636.3	    11.0	    8.3 	 103.0		  0.0	     2,715.7	      591.5
 ~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum	   65,032.8	   5,697.5	 64,998.0	    15.6	   12.7 	 216.2		  0.0	     5,587.1	    1,320.5
 Avg	   32,516.4	   2,848.7	 32,499.0	     7.8	    6.3 	 108.1		  0.0	     2,793.6	      660.2
 Std	    5,471.4	     142.6	  5,462.8	     4.5	    2.7 	   7.2		  0.0	       110.1	       97.2
			  --------------------------------------------------------------------------------------------------------------------

Time Model - % of DB time		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]

							      % DB time 							      % bg time
		      ----------------------------------------------------------------------------------------- 		   --------------
	    % Total													 % Total
  I#	    DB time	      DB CPU   SQL Exec Ela	 Parse Ela     Hard Parse     PL/SQL Ela       Java Ela 	 bg time	   bg CPU
---- --------------   -------------- -------------- -------------- -------------- -------------- --------------   --------------   --------------
   1	       55.9		 8.1	       99.9	       0.0	      0.0	     0.0	    0.0 	    51.4	     25.4
   2	       44.1		 9.6	      100.0	       0.0	      0.0	     0.0	    0.0 	    48.6	     21.8
 ~~~ ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~
 Avg	       50.0		 8.8	       99.9	       0.0	      0.0	     0.0	    0.0 	    50.0	     23.6
			  --------------------------------------------------------------------------------------------------------------------


Foreground Wait Classes -  % of Total DB timeDB/Inst: P30SDB/p30sdb1  Snaps: 4
-> Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time

	  User I/O	 Sys I/O	 Other	      Applic	    Commit	 Network      Concurcy	      Config	   Cluster	   Admin     Scheduler	      DB CPU
---- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- -------------
	      17.3	     0.0	   2.3		 0.0	       0.0	     0.0	   0.1		28.4	      48.7	     N/A	   N/A		 8.8
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Classes 		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

  I#   User I/O(s)    Sys I/O(s)      Other(s)	  Applic (s)	Commit (s)   Network (s)  Concurcy (s)	  Config (s)   Cluster (s)     Admin (s) Scheduler (s)	  DB CPU (s)	    DB time
---- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- --------------
   1	   7,442.8	     0.0	 640.2		 0.0	       8.7	     0.0	  50.9	    14,502.3	  12,630.4	     N/A	   N/A	     2,949.6	   36,385.3
   2	   3,827.6	     0.0	 827.5		 0.0	       1.8	     0.0	   9.5	     3,988.7	  19,064.4	     N/A	   N/A	     2,747.9	   28,647.6
 ~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~~
 Sum	  11,270.3	     0.0       1,467.8		 0.0	      10.5	     0.0	  60.4	    18,491.1	  31,694.8	     0.0	   0.0	     5,697.5	   65,032.8
 Avg	   5,635.2	     0.0	 733.9		 0.0	       5.2	     0.0	  30.2	     9,245.5	  15,847.4	     N/A	   N/A	     2,848.7	   32,516.4
 Std	   2,556.4	     0.0	 132.4		 0.0	       4.9	     0.0	  29.3	     7,434.3	   4,549.6	     N/A	   N/A	       142.6	    5,471.4
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Classes -  % of DB time  DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time

										      % DB time
       -----------------------------------------------------------------------------------------------------------------------------------------------------------------------
																						       % Total
  I#	    User I/O	   Sys I/O	   Other	Applic	      Commit	   Network	Concurcy	Config	     Cluster	     Admin     Scheduler	DB CPU	       DB time
----   ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- ------------- -------------	 -------------
   1		20.5	       0.0	     1.8	   0.0		 0.0	       0.0	     0.1	  39.9		34.7	       N/A	     N/A	   8.1		  55.9
   2		13.4	       0.0	     2.9	   0.0		 0.0	       0.0	     0.0	  13.9		66.5	       N/A	     N/A	   9.6		  44.1
 ~~~   ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~
 Avg		16.9	       0.0	     2.3	   0.0		 0.0	       0.0	     0.1	  26.9		50.6	       N/A	     N/A	   8.8
			  --------------------------------------------------------------------------------------------------------------------


Top Timed Events			 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time '	       : Per-instance 'Wait Time Avg ' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *   Cluster	  gc cr grant busy				1,876,600	0.0	  20,108.50  10.72ms	30.92	   10.83ms    10.37ms	 11.30ms   660.53us    2
       User I/O   db file sequential read		       22,242,758	0.0	  11,271.33 506.74us	17.33	  504.06us   350.24us	657.88us   217.53us    2
       Configurat free buffer waits				1,107,511	0.0	  10,515.26   9.49ms	16.17	    9.49ms     9.47ms	  9.50ms    24.71us    2
       Configurat write complete waits				    1,777	0.0	   6,459.96 3635.32m	 9.93	 3247.66ms  2230.12ms  4265.20ms  1439.02ms    2
		  DB CPU					      N/A	N/A	   5,697.47		 8.76						       2
       Cluster	  gc current grant 2-way			  241,040	0.0	   4,231.54  17.56ms	 6.51	   17.31ms    13.96ms	 20.66ms     4.73ms    2
       Cluster	  gc current grant read-mostly invalidatio	  265,494	0.0	   2,045.18   7.70ms	 3.14	    7.70ms     7.22ms	  8.19ms   686.66us    2
       Cluster	  gc current grant busy 			  185,089	0.0	   1,917.67  10.36ms	 2.95	   10.46ms    10.04ms	 10.89ms   602.27us    2
       Configurat enq: HW - contention				      449	0.0	   1,544.00 3438.74m	 2.37	 2604.86ms  1493.84ms  3715.88ms  1571.22ms    2
       Cluster	  gc cr grant 2-way				  264,385	0.0	   1,447.76   5.48ms	 2.23	    5.60ms     5.47ms	  5.73ms   182.78us    2

   1   Cluster	  gc cr grant busy				  700,974	0.0	   7,921.42  11.30ms	21.77
       Configurat free buffer waits				  823,076	0.0	   7,822.08   9.50ms	21.50
       User I/O   db file sequential read		       11,315,362	0.0	   7,444.11 657.88us	20.46
       Configurat write complete waits				    1,227	0.0	   5,233.40 4265.20m	14.38
		  DB CPU					      N/A	N/A	   2,949.59		 8.11
       Cluster	  gc current grant 2-way			  129,335	0.0	   2,671.61  20.66ms	 7.34
       Configurat enq: HW - contention				      393	0.0	   1,460.34 3715.88m	 4.01
       Cluster	  gc current grant read-mostly invalidatio	  132,293	0.0	   1,083.55   8.19ms	 2.98
       Cluster	  gc current grant busy 			   70,395	0.0	     766.50  10.89ms	 2.11
       Other	  KJC: Wait for msg sends to complete		   18,170      84.0	     628.77  34.60ms	 1.73

   2   Cluster	  gc cr grant busy				1,175,626	0.0	  12,187.08  10.37ms	42.54
       User I/O   db file sequential read		       10,927,396	0.0	   3,827.22 350.24us	13.36
		  DB CPU					      N/A	N/A	   2,747.87		 9.59
       Configurat free buffer waits				  284,435	0.0	   2,693.18   9.47ms	 9.40
       Cluster	  gc current grant 2-way			  111,705	0.0	   1,559.93  13.96ms	 5.45
       Cluster	  gc cr grant 2-way				  262,491	0.0	   1,436.90   5.47ms	 5.02
       Cluster	  gc cr block lost				    2,298	0.0	   1,384.48 602.47ms	 4.83
       Configurat write complete waits				      550	0.0	   1,226.56 2230.12m	 4.28
       Cluster	  gc current grant busy 			  114,694	0.0	   1,151.17  10.04ms	 4.02
       Cluster	  gc current grant read-mostly invalidatio	  133,201	0.0	     961.63   7.22ms	 3.36
			  --------------------------------------------------------------------------------------------------------------------

Top Timed Foreground Events		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Foreground Activity is captured in release 11g and above
-> For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time'	      : Per-instance 'Wait Time Avg' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *   Cluster	  gc cr grant busy				1,875,030	0.0	  20,090.93  10.71ms	30.89	   10.83ms    10.37ms	 11.30ms   661.20us    2
       User I/O   db file sequential read		       22,237,980	0.0	  11,268.44 506.72us	17.33	  504.03us   350.19us	657.88us   217.57us    2
       Configurat free buffer waits				1,106,919	0.0	  10,503.41   9.49ms	16.15	    9.48ms     9.47ms	  9.50ms    19.50us    2
       Configurat write complete waits				    1,771	0.0	   6,443.66 3638.43m	 9.91	 3246.07ms  2222.72ms  4269.43ms  1447.25ms    2
		  DB CPU					      N/A	N/A	   5,697.47		 8.76						       2
       Cluster	  gc current grant 2-way			  240,951	0.0	   4,230.28  17.56ms	 6.50	   17.31ms    13.97ms	 20.66ms     4.73ms    2
       Cluster	  gc current grant read-mostly invalidatio	  265,494	0.0	   2,045.18   7.70ms	 3.14	    7.70ms     7.22ms	  8.19ms   686.66us    2
       Cluster	  gc current grant busy 			  184,618	0.0	   1,912.92  10.36ms	 2.94	   10.46ms    10.04ms	 10.89ms   600.17us    2
       Configurat enq: HW - contention				      447	0.0	   1,543.99 3454.12m	 2.37	 2623.17ms  1520.99ms  3725.35ms  1558.72ms    2
       Cluster	  gc cr grant 2-way				  263,979	0.0	   1,446.60   5.48ms	 2.22	    5.61ms     5.48ms	  5.73ms   179.91us    2

   1   Cluster	  gc cr grant busy				  700,472	0.0	   7,915.86  11.30ms	21.76
       Configurat free buffer waits				  822,661	0.0	   7,811.95   9.50ms	21.47
       User I/O   db file sequential read		       11,313,353	0.0	   7,442.78 657.88us	20.46
       Configurat write complete waits				    1,225	0.0	   5,230.06 4269.43m	14.37
		  DB CPU					      N/A	N/A	   2,949.59		 8.11
       Cluster	  gc current grant 2-way			  129,275	0.0	   2,670.36  20.66ms	 7.34
       Configurat enq: HW - contention				      392	0.0	   1,460.34 3725.35m	 4.01
       Cluster	  gc current grant read-mostly invalidatio	  132,293	0.0	   1,083.55   8.19ms	 2.98
       Cluster	  gc current grant busy 			   69,963	0.0	     761.80  10.89ms	 2.09
       Other	  KJC: Wait for msg sends to complete		    2,850	0.0	     624.88 219.26ms	 1.72

   2   Cluster	  gc cr grant busy				1,174,558	0.0	  12,175.07  10.37ms	42.50
       User I/O   db file sequential read		       10,924,627	0.0	   3,825.67 350.19us	13.35
		  DB CPU					      N/A	N/A	   2,747.87		 9.59
       Configurat free buffer waits				  284,258	0.0	   2,691.46   9.47ms	 9.40
       Cluster	  gc current grant 2-way			  111,676	0.0	   1,559.92  13.97ms	 5.45
       Cluster	  gc cr grant 2-way				  262,085	0.0	   1,435.74   5.48ms	 5.01
       Cluster	  gc cr block lost				    2,298	0.0	   1,384.48 602.47ms	 4.83
       Configurat write complete waits				      546	0.0	   1,213.60 2222.72m	 4.24
       Cluster	  gc current grant busy 			  114,655	0.0	   1,151.12  10.04ms	 4.02
       Cluster	  gc current grant read-mostly invalidatio	  133,201	0.0	     961.63   7.22ms	 3.36
			  --------------------------------------------------------------------------------------------------------------------

Top Timed Background Events		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> % of bg time: % of background elapsed time
-> Instance '*'  - cluster wide summary
->	    '*'  Waits, %Timeouts, Wait Time Total(s)	   : Cluster-wide total for the wait event
->	    '*'  'Wait Time Avg'		      : Cluster-wide average computed as (Wait Time Total / Event Waits)
->	    '*'  Summary 'Avg Wait Time'	      : Per-instance 'Wait Time Avg' used to compute the following statistics
->	    '*'  [Avg/Min/Max/Std Dev]			   : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'
->	    '*'  Cnt					   : count of instances with wait times for the event

			       Wait				      Event			 Wait Time			      Summary Avg Wait Time
       ---------------------------------------------------   ----------------------   -------------------------------	------------------------------------------------
  I#   Class	  Event 					    Waits %Timeouts	   Total(s) Avg Wait %DB time	       Avg	  Min	     Max    Std Dev  Cnt
----   ---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	---------- ---------- ---------- ---------- ----
   *		  background cpu time				      N/A	N/A	   1,320.46		23.63						       2
       System I/O log file parallel write			   22,311	0.0	     502.52  22.52ms	 8.99	   23.19ms    18.79ms	 27.59ms     6.22ms    2
       System I/O db file parallel write			   21,706	0.0	     240.23  11.07ms	 4.30	   10.99ms    10.45ms	 11.52ms   757.56us    2
       Applicatio enq: RO - fast object reuse			      346	0.0	     118.57 342.69ms	 2.12	  295.88ms    50.44ms	541.31ms   347.10ms    2
       Other	  enq: CR - block range reuse ckpt		      156	0.0	      73.76 472.79ms	 1.32	  515.74ms   444.47ms	587.02ms   100.80ms    2
       Concurrenc buffer busy waits				       18	0.0	      30.29 1682.73m	 0.54	 1753.73ms  1434.20ms  2073.26ms   451.89ms    2
       System I/O control file parallel write			      336	0.0	      30.12  89.65ms	 0.54	   89.82ms    88.04ms	 91.60ms     2.52ms    2
       User I/O   Disk file Mirror Read 			      944	0.0	      19.15  20.29ms	 0.34	   21.53ms   536.16us	 42.53ms    29.69ms    2
       Other	  PX Deq: Join ACK				      214	0.0	      17.91  83.70ms	 0.32	   50.95ms     7.15ms	 94.75ms    61.94ms    2
       Other	  gcs log flush sync				   61,408	0.0	      17.71 288.32us	 0.32	  283.13us   265.12us	301.14us    25.47us    2

   1		  background cpu time				      N/A	N/A	     728.94		25.39
       System I/O log file parallel write			    9,462	0.0	     261.07  27.59ms	 9.09
       System I/O db file parallel write			    9,244	0.0	      96.62  10.45ms	 3.36
       Other	  enq: CR - block range reuse ckpt		      125	0.0	      55.56 444.47ms	 1.93
       System I/O control file parallel write			      184	0.0	      16.20  88.04ms	 0.56
       Concurrenc buffer busy waits				       11	0.0	      15.78 1434.20m	 0.55
       Cluster	  gc cr block busy				      111	0.0	      11.74 105.74ms	 0.41
       Configurat free buffer waits				      415	0.0	      10.13  24.41ms	 0.35
       Applicatio enq: RO - fast object reuse			      140	0.0	       7.06  50.44ms	 0.25
       Other	  gcs log flush sync				   21,859	0.0	       5.80 265.12us	 0.20

   2		  background cpu time				      N/A	N/A	     591.52		21.78
       System I/O log file parallel write			   12,849	0.0	     241.46  18.79ms	 8.89
       System I/O db file parallel write			   12,462	0.0	     143.61  11.52ms	 5.29
       Applicatio enq: RO - fast object reuse			      206	0.0	     111.51 541.31ms	 4.11
       User I/O   Disk file Mirror Read 			      444	0.0	      18.88  42.53ms	 0.70
       Other	  enq: CR - block range reuse ckpt		       31	0.0	      18.20 587.02ms	 0.67
       Other	  PX Deq: Join ACK				      187	0.0	      17.72  94.75ms	 0.65
       Other	  IMR slave acknowledgement msg 		    1,026	0.0	      14.97  14.59ms	 0.55
       Concurrenc buffer busy waits					7	0.0	      14.51 2073.26m	 0.53
       System I/O control file parallel write			      152	0.0	      13.92  91.60ms	 0.51
			  --------------------------------------------------------------------------------------------------------------------

Foreground Wait Events (Global) 	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %DB time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Cluster    gc cr grant busy				 1,875,030	 0.0	   20,090.93  10.71ms	 30.89	    10.83ms    10.37ms	  11.30ms   661.20us
User I/O   db file sequential read			22,237,980	 0.0	   11,268.44 506.72us	 17.33	   504.03us   350.19us	 657.88us   217.57us
Configurat free buffer waits				 1,106,919	 0.0	   10,503.41   9.49ms	 16.15	     9.48ms	9.47ms	   9.50ms    19.50us
Configurat write complete waits 			     1,771	 0.0	    6,443.66 3638.43m	  9.91	  3246.07ms  2222.72ms	4269.43ms  1447.25ms
Cluster    gc current grant 2-way			   240,951	 0.0	    4,230.28  17.56ms	  6.50	    17.31ms    13.97ms	  20.66ms     4.73ms
Cluster    gc current grant read-mostly invalidatio	   265,494	 0.0	    2,045.18   7.70ms	  3.14	     7.70ms	7.22ms	   8.19ms   686.66us
Cluster    gc current grant busy			   184,618	 0.0	    1,912.92  10.36ms	  2.94	    10.46ms    10.04ms	  10.89ms   600.17us
Configurat enq: HW - contention 			       447	 0.0	    1,543.99 3454.12m	  2.37	  2623.17ms  1520.99ms	3725.35ms  1558.72ms
Cluster    gc cr grant 2-way				   263,979	 0.0	    1,446.60   5.48ms	  2.22	     5.61ms	5.48ms	   5.73ms   179.91us
Other	   KJC: Wait for msg sends to complete		     7,235	 0.0	    1,435.89 198.46ms	  2.21	   202.10ms   184.95ms	 219.26ms    24.26ms
Cluster    gc cr block lost				     2,365	 0.0	    1,425.24 602.64ms	  2.19	   605.44ms   602.47ms	 608.41ms     4.20ms
Cluster    gc current block lost			       425	 0.0	      265.77 625.34ms	  0.41	   639.90ms   623.14ms	 656.66ms    23.71ms
Cluster    gc current grant congested			     3,814	 0.0	      137.68  36.10ms	  0.21	    35.66ms    30.86ms	  40.45ms     6.78ms
Concurrenc buffer busy waits					18	 0.0	       56.91 3161.81m	  0.09	  2844.45ms  2368.42ms	3320.48ms   673.21ms
Cluster    gc current block busy			     4,957	 0.0	       51.19  10.33ms	  0.08	    10.30ms    10.23ms	  10.37ms   103.58us
Cluster    gc cr grant congested			     2,538	 0.0	       27.29  10.75ms	  0.04	    10.88ms    10.75ms	  11.01ms   183.15us
Cluster    gc current block 2-way			     1,540	 0.0	       22.25  14.45ms	  0.03	    17.09ms    11.76ms	  22.42ms     7.54ms
Cluster    gc cr block busy					41	 0.0	       12.62 307.72ms	  0.02	   308.79ms   294.28ms	 323.29ms    20.51ms
Commit	   log file sync				       146	 0.0	       10.49  71.85ms	  0.02	    63.75ms    46.37ms	  81.14ms    24.59ms
Cluster    gc cr block 2-way				     1,305	 0.0		9.73   7.45ms	  0.01	     7.38ms	6.15ms	   8.62ms     1.75ms
Other	   IPC send completion sync			       340	 0.0		9.44  27.77ms	  0.01	    16.19ms   696.16us	  31.69ms    21.92ms
Other	   PX Deq: Slave Session Stats			       213	 0.0		8.95  42.04ms	  0.01	    41.93ms    19.31ms	  64.55ms    31.99ms
Other	   latch free					     1,532	 0.0		8.79   5.74ms	  0.01	     6.27ms   310.54us	  12.22ms     8.42ms
Cluster    gc current block congested				47	 0.0		8.78 186.75ms	  0.01	   115.48ms	7.42ms	 223.54ms   152.82ms
Cluster    gc buffer busy release				 4	 0.0		3.00 749.91ms	  0.00	   749.91ms   749.91ms	 749.91ms
Other	   enq: PS - contention 			       109	 0.9		2.64  24.20ms	  0.00	    14.33ms   718.27us	  27.95ms    19.26ms
Cluster    gc remaster						 1     100.0		2.00 1999.61m	  0.00	  1999.61ms  1999.61ms	1999.61ms
User I/O   Disk file Mirror Read				41	 0.0		1.78  43.52ms	  0.00	    24.49ms   851.00us	  48.13ms    33.43ms
Cluster    gc cr failure					 2	 0.0		1.71 853.51ms	  0.00	   853.51ms   853.51ms	 853.51ms
Concurrenc cursor: pin S wait on X				39	 0.0		1.40  35.88ms	  0.00	    35.88ms    35.88ms	  35.88ms
Cluster    gc cr block congested				 9	 0.0		1.04 115.81ms	  0.00	    76.05ms	4.49ms	 147.62ms   101.21ms
Concurrenc latch: cache buffers chains			     3,843	 0.0		0.89 231.81us	  0.00	   294.99us   176.72us	 413.27us   167.27us
Other	   latch: gcs resource hash			       565	 0.0		0.88   1.56ms	  0.00	     1.98ms   288.83us	   3.68ms     2.40ms
Concurrenc library cache: mutex X			       326	 0.0		0.74   2.26ms	  0.00	     2.32ms	1.12ms	   3.52ms     1.69ms
Other	   gcs drm freeze in enter server mode			 9	 0.0		0.46  51.55ms	  0.00	    51.55ms    51.55ms	  51.55ms
Concurrenc library cache load lock				86	 0.0		0.40   4.65ms	  0.00	     4.65ms	4.65ms	   4.65ms
Cluster    gc cr multi block grant				89	 0.0		0.35   3.97ms	  0.00	     3.97ms	3.97ms	   3.97ms
Cluster    gc buffer busy acquire				67	 0.0		0.26   3.90ms	  0.00	     3.90ms	3.90ms	   3.90ms
Other	   latch: gc element				       514	 0.0		0.14 280.54us	  0.00	   285.31us   197.79us	 372.83us   123.77us
Other	   kksfbc child completion				 2     100.0		0.10  49.97ms	  0.00	    49.97ms    49.97ms	  49.97ms
Other	   PGA memory operation 			       310	 0.0		0.07 240.18us	  0.00	   255.81us    53.93us	 457.69us   285.50us
Other	   PX Deq: reap credit				     3,137     100.0		0.07  22.51us	  0.00	    20.42us    17.36us	  23.49us     4.34us
Other	   latch: enqueue hash chains			       273	 0.0		0.06 237.24us	  0.00	   234.74us   228.11us	 241.37us     9.38us
User I/O   db file scattered read			       128	 0.0		0.05 415.75us	  0.00	   415.75us   415.75us	 415.75us
Concurrenc latch: shared pool				       136	 0.0		0.05 384.55us	  0.00	   381.26us   157.67us	 604.86us   316.21us
Other	   DLM cross inst call completion			59	 0.0		0.05 877.05us	  0.00	      .96ms   295.36us	   1.62ms   933.37us
Concurrenc row cache lock					26     100.0		0.05   1.86ms	  0.00	     1.86ms	1.86ms	   1.86ms
Other	   latch: ges resource hash list			85	 0.0		0.05 533.24us	  0.00	   488.12us    62.08us	 914.17us   602.52us
Other	   latch: cache buffers lru chain		       304	 0.0		0.04 145.31us	  0.00	   144.21us   127.44us	 160.98us    23.72us
User I/O   direct path write					13	 0.0		0.03   2.62ms	  0.00	     2.62ms	2.62ms	   2.62ms
System I/O control file sequential read 		       162	 0.0		0.03 181.01us	  0.00	   217.10us   172.81us	 261.40us    62.64us
Other	   ges enter server mode			     3,751	 0.0		0.02   6.16us	  0.00	     6.00us	5.24us	   6.75us     1.06us
Cluster    gc cr multi block mixed				11	 0.0		0.02   1.52ms	  0.00	     1.52ms	1.52ms	   1.52ms
Other	   enq: WF - contention 				18	 0.0		0.02 866.28us	  0.00	   866.28us   866.28us	 866.28us
Other	   enq: TO - contention 				10	 0.0		0.01   1.47ms	  0.00	     1.47ms	1.47ms	   1.47ms
Other	   latch: object queue header operation 		52	 0.0		0.01 240.31us	  0.00	   212.52us   132.24us	 292.80us   113.54us
Other	   lock deadlock retry				       421     100.0		0.01  24.84us	  0.00	    26.04us    24.65us	  27.43us     1.96us
Other	   latch: call allocation				25	 0.0		0.01 396.56us	  0.00	   321.20us   111.88us	 530.53us   296.03us
User I/O   read by other session				 9	 0.0		0.01   1.07ms	  0.00	     1.07ms	1.07ms	   1.07ms
User I/O   db file parallel read				 6	 0.0		0.01   1.27ms	  0.00	     1.27ms	1.27ms	   1.27ms
Foreground Wait Events (Global) 	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %DB time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Other	   latch: redo allocation				44	 0.0		0.00 113.25us	  0.00	   110.60us   100.88us	 120.32us    13.75us
Applicatio SQL*Net break/reset to client			72	 0.0		0.00  60.35us	  0.00	    60.35us    60.35us	  60.35us
Other	   latch: undo global data				16	 0.0		0.00 233.13us	  0.00	   238.00us   228.25us	 247.75us    13.79us
User I/O   Disk file operations I/O			       106	 0.0		0.00  31.85us	  0.00	    29.36us    24.46us	  34.25us     6.92us
Network    SQL*Net message to client			       595	 0.0		0.00   5.20us	  0.00	     5.25us	4.94us	   5.56us   435.70ns
Other	   enq: FB - contention 				 2	 0.0		0.00   1.31ms	  0.00	     1.31ms	1.31ms	   1.31ms
Other	   wait list latch free 				 2	 0.0		0.00   1.12ms	  0.00	     1.12ms	1.10ms	   1.14ms    21.92us
Other	   name-service call wait				 4	 0.0		0.00 413.25us	  0.00	   413.25us   404.00us	 422.50us    13.08us
Cluster    gc current retry					 1	 0.0		0.00   1.30ms	  0.00	     1.30ms	1.30ms	   1.30ms
User I/O   ASM IO for non-blocking poll 			47	 0.0		0.00  11.04us	  0.00	    11.04us    11.04us	  11.04us
Cluster    gc current multi block request			 1	 0.0		0.00 429.00us	  0.00	   429.00us   429.00us	 429.00us
Other	   latch: messages					 2	 0.0		0.00 213.00us	  0.00	   213.00us   213.00us	 213.00us
Network    IPC group service call				25	 0.0		0.00  13.36us	  0.00	    12.29us	9.86us	  14.72us     3.44us
Other	   PX qref latch					13     100.0		0.00  11.08us	  0.00	    11.08us    11.08us	  11.08us
Other	   buffer deadlock					 3     100.0		0.00  17.00us	  0.00	    17.00us    17.00us	  17.00us
Concurrenc library cache: bucket mutex X			 4	 0.0		0.00   7.00us	  0.00	     6.33us	5.00us	   7.67us     1.89us
Other	   AWR Flush						 5	 0.0		0.00   4.80us	  0.00	     4.80us	4.80us	   4.80us
Other	   asynch descriptor resize				 2     100.0		0.00  12.00us	  0.00	    12.00us    12.00us	  12.00us
Other	   ges resource directory to be unfrozen		 1	 0.0		0.00   4.00us	  0.00	     4.00us	4.00us	   4.00us
Idle	   watchdog main loop				     1,410	 0.0	    4,224.01 2995.75m	  6.50	  2995.62ms  2991.23ms	3000.02ms     6.21ms
Idle	   SQL*Net message from client			       592	 0.0	      360.59 609.10ms	  0.55	   522.83ms	1.71ms	1043.95ms   736.98ms
Idle	   PX Deq: Execution Msg			       634	 0.0	       33.51  52.86ms	  0.05	    52.55ms    28.10ms	  77.00ms    34.58ms
Idle	   PX Deq Credit: send blkd			       587	 0.0		2.96   5.05ms	  0.00	     5.98ms	3.59ms	   8.38ms     3.38ms
Idle	   PX Deq: Msg Fragment 			       774	 0.0		2.67   3.45ms	  0.00	     3.45ms	2.23ms	   4.67ms     1.72ms
Idle	   PX Deq Credit: need buffer				36	 0.0		0.01 371.94us	  0.00	   371.94us   371.94us	 371.94us
			  --------------------------------------------------------------------------------------------------------------------

Background Wait Events (Global) 	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
System I/O log file parallel write			    22,311	 0.0	      502.52  22.52ms	  0.09	    23.19ms    18.79ms	  27.59ms     6.22ms
System I/O db file parallel write			    21,706	 0.0	      240.23  11.07ms	  0.04	    10.99ms    10.45ms	  11.52ms   757.56us
Applicatio enq: RO - fast object reuse			       346	 0.0	      118.57 342.69ms	  0.02	   295.88ms    50.44ms	 541.31ms   347.10ms
Other	   enq: CR - block range reuse ckpt		       156	 0.0	       73.76 472.79ms	  0.01	   515.74ms   444.47ms	 587.02ms   100.80ms
Concurrenc buffer busy waits					18	 0.0	       30.29 1682.73m	  0.01	  1753.73ms  1434.20ms	2073.26ms   451.89ms
System I/O control file parallel write			       336	 0.0	       30.12  89.65ms	  0.01	    89.82ms    88.04ms	  91.60ms     2.52ms
User I/O   Disk file Mirror Read			       944	 0.0	       19.15  20.29ms	  0.00	    21.53ms   536.16us	  42.53ms    29.69ms
Other	   PX Deq: Join ACK				       214	 0.0	       17.91  83.70ms	  0.00	    50.95ms	7.15ms	  94.75ms    61.94ms
Other	   gcs log flush sync				    61,408	 0.0	       17.71 288.32us	  0.00	   283.13us   265.12us	 301.14us    25.47us
Cluster    gc cr grant busy				     1,570	 0.0	       17.58  11.20ms	  0.00	    11.17ms    11.09ms	  11.25ms   112.27us
Configurat write complete waits 				 6	 0.0	       16.30 2717.22m	  0.00	  2455.65ms  1670.96ms	3240.34ms  1109.72ms
Other	   IMR slave acknowledgement msg		     2,109	 0.0	       15.29   7.25ms	  0.00	     7.44ms   293.14us	  14.59ms    10.11ms
Cluster    gc cr block busy				       112	 0.0	       12.82 114.49ms	  0.00	   595.87ms   105.74ms	1085.99ms   693.14ms
Configurat free buffer waits				       592	 0.0	       11.85  20.02ms	  0.00	    17.06ms	9.72ms	  24.41ms    10.39ms
Other	   reliable message				       236	 0.0	       11.26  47.71ms	  0.00	    46.91ms    44.91ms	  48.91ms     2.83ms
Other	   KJC: Wait for msg sends to complete		    32,331	99.7		7.19 222.45us	  0.00	   224.00us   194.32us	 253.68us    41.98us
Cluster    gc cr block lost					 8	 0.0		5.11 638.71ms	  0.00	   638.71ms   638.71ms	 638.71ms
Cluster    gc current grant busy			       474	 0.0		4.75  10.01ms	  0.00	     6.03ms	1.26ms	  10.80ms     6.74ms
User I/O   direct path write temp			       151	 0.0		4.47  29.62ms	  0.00	    29.45ms    25.90ms	  33.00ms     5.02ms
User I/O   ASM IO for non-blocking poll 		    28,786	 0.0		4.17 144.79us	  0.00	   146.95us   131.53us	 162.37us    21.81us
Cluster    gc cr block 2-way				     1,320	 0.0		4.05   3.07ms	  0.00	     2.01ms   905.67us	   3.11ms     1.56ms
User I/O   db file sequential read			     4,783	 0.0		2.88 602.54us	  0.00	   610.55us   559.85us	 661.24us    71.69us
Other	   ASM file metadata operation			     3,067	 0.0		2.60 848.29us	  0.00	   848.31us   847.67us	 848.95us   901.48ns
Other	   gcs remastering wait for read latch			37	 0.0		2.57  69.46ms	  0.00	    62.65ms    50.64ms	  74.66ms    16.99ms
Other	   enq: CF - contention 				72	50.0		2.39  33.24ms	  0.00	    33.00ms    31.74ms	  34.26ms     1.78ms
Other	   KSV master wait				     1,156	45.7		2.27   1.96ms	  0.00	     1.96ms	1.96ms	   1.96ms     5.57us
Other	   IPC send completion sync			       818	85.9		2.09   2.56ms	  0.00	     2.37ms    33.51us	   4.71ms     3.31ms
Concurrenc row cache lock					51     100.0		1.86  36.57ms	  0.00	    41.31ms	6.72ms	  75.91ms    48.92ms
Cluster    gc current block lost				 3	 0.0		1.84 613.08ms	  0.00	   613.08ms   613.08ms	 613.08ms
Other	   PX Deq: reap credit				    99,737     100.0		1.79  17.93us	  0.00	    17.93us    17.62us	  18.25us   445.58ns
Cluster    gc current grant 2-way				87	 0.0		1.26  14.45ms	  0.00	    10.91ms   314.34us	  21.51ms    14.99ms
Cluster    gc cr grant 2-way				       406	 0.0		1.16   2.86ms	  0.00	     2.86ms	2.86ms	   2.86ms
Cluster    gc cr multi block grant				41	 0.0		1.07  26.00ms	  0.00	    37.39ms	1.48ms	  73.30ms    50.78ms
Other	   PX Deq: Slave Session Stats			       214	 0.0		1.05   4.92ms	  0.00	     2.92ms   237.00us	   5.60ms     3.79ms
Other	   PX Deq: Signal ACK EXT			       214	 0.0		1.03   4.81ms	  0.00	     2.83ms   177.41us	   5.47ms     3.75ms
System I/O control file sequential read 		     3,983	 0.0		0.88 220.09us	  0.00	   218.04us   184.43us	 251.65us    47.53us
Other	   enq: PS - contention 			       142	13.4		0.86   6.06ms	  0.00	     4.14ms	1.17ms	   7.11ms     4.19ms
Other	   ges inquiry response 			       123	 0.0		0.81   6.61ms	  0.00	     8.72ms	3.21ms	  14.22ms     7.78ms
Cluster    gc cr multi block mixed				14	 0.0		0.72  51.64ms	  0.00	    31.72ms	3.83ms	  59.60ms    39.43ms
Other	   latch free					     1,638	 0.0		0.59 361.13us	  0.00	   372.03us   325.55us	 418.52us    65.74us
System I/O log file sequential read			       478	 0.0		0.49   1.02ms	  0.00	     1.01ms   740.47us	   1.29ms   386.81us
User I/O   Disk file operations I/O			       617	 0.0		0.44 715.92us	  0.00	   706.98us   557.88us	 856.08us   210.86us
Cluster    gc cr disk read					49	 0.0		0.37   7.49ms	  0.00	     5.07ms	1.68ms	   8.46ms     4.79ms
Other	   Sync ASM rebalance					66	 0.0		0.31   4.64ms	  0.00	     4.74ms	3.68ms	   5.79ms     1.49ms
Concurrenc latch: MGA shared context root latch 	       175	 0.0		0.25   1.43ms	  0.00	     1.24ms   542.45us	   1.94ms      .99ms
User I/O   direct path write					30	 0.0		0.24   7.88ms	  0.00	     8.23ms	7.48ms	   8.97ms     1.05ms
Cluster    gc current block busy			       123	 0.0		0.22   1.79ms	  0.00	     1.40ms   576.94us	   2.23ms     1.17ms
Other	   latch: gcs resource hash			       528	 0.0		0.20 380.86us	  0.00	   389.17us   242.84us	 535.51us   206.96us
Other	   lock escalate retry					17     100.0		0.17   9.94ms	  0.00	     9.94ms	9.94ms	   9.94ms
Other	   CGS wait for IPC msg 			    10,743     100.0		0.16  15.15us	  0.00	    15.15us    14.46us	  15.83us      .97us
Cluster    gc cr failure				       159	 0.0		0.15 926.67us	  0.00	   926.67us   926.67us	 926.67us
User I/O   db file scattered read			       343	 0.0		0.14 396.22us	  0.00	   425.30us   256.27us	 594.33us   239.05us
Other	   PGA memory operation 			       720	 0.0		0.13 179.73us	  0.00	   175.81us   123.55us	 228.07us    73.91us
Other	   AQ: RAC AQ Network				     7,007     100.0		0.13  18.35us	  0.00	    18.34us    18.11us	  18.57us   326.96ns
Concurrenc latch: cache buffers chains			       407	 0.0		0.11 260.15us	  0.00	   257.09us   249.74us	 264.45us    10.40us
Concurrenc latch: MGA shared context latch		       241	 0.0		0.10 422.55us	  0.00	   388.99us   278.19us	 499.78us   156.69us
Other	   latch: gc element				       250	 0.0		0.09 373.78us	  0.00	   371.47us   323.36us	 419.58us    68.04us
Other	   ges lms sync during dynamic remastering		84	 0.0		0.09   1.07ms	  0.00	     1.07ms	1.03ms	   1.11ms    59.31us
Other	   latch: cache buffers lru chain		       612	 0.0		0.09 143.62us	  0.00	   133.94us   107.51us	 160.38us    37.38us
System I/O db file async I/O submit			    12,872	 0.0		0.07   5.30us	  0.00	     5.30us	5.30us	   5.30us     3.08ns
Background Wait Events (Global) 	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Other	   DFS lock handle				       226     100.0		0.07 295.24us	  0.00	   295.24us   295.24us	 295.24us
Applicatio enq: TM - contention 				 3	 0.0		0.06  20.35ms	  0.00	    30.29ms   462.50us	  60.12ms    42.19ms
Other	   oracle thread bootstrap				 2	 0.0		0.06  29.81ms	  0.00	    29.81ms    21.96ms	  37.66ms    11.10ms
Other	   DLM cross inst call completion			79	 0.0		0.05 614.42us	  0.00	   531.86us   221.28us	 842.44us   439.23us
Other	   LGWR wait for redo copy			       456	 0.0		0.05 106.21us	  0.00	   106.26us   106.00us	 106.52us   362.48ns
Other	   kjctssqmg: quick message send wait		       124     100.0		0.05 380.05us	  0.00	   355.28us   227.28us	 483.27us   181.01us
Other	   ges2 LMON to wake up LMD - mrcvr		       122	 0.0		0.04 297.62us	  0.00	   302.19us   280.74us	 323.65us    30.34us
Other	   ksxr poll remote instances			     1,815     100.0		0.04  19.56us	  0.00	    19.58us    18.51us	  20.65us     1.51us
Network    IPC group service call			       548	 0.0		0.03  61.39us	  0.00	    61.41us    60.60us	  62.21us     1.14us
Other	   CSS operation: data query				22	 0.0		0.03   1.30ms	  0.00	     1.30ms	1.27ms	   1.33ms    43.90us
User I/O   db file parallel read				 9	 0.0		0.03   2.95ms	  0.00	     1.88ms   500.00us	   3.25ms     1.95ms
Other	   CSS operation: data update				26	 0.0		0.03	.96ms	  0.00	      .98ms   835.86us	   1.11ms   196.85us
Cluster    gc current block 2-way				17	 0.0		0.01 811.29us	  0.00	   801.33us   632.00us	    .97ms   239.47us
Concurrenc latch: MGA heap latch				71	 0.0		0.01 146.32us	  0.00	   107.08us    42.29us	 171.88us    91.64us
Cluster    gc buffer busy acquire				 2	 0.0		0.01   4.83ms	  0.00	     4.83ms	4.83ms	   4.83ms
Other	   latch: call allocation				18	 0.0		0.01 423.17us	  0.00	   280.69us    97.50us	 463.88us   259.07us
Cluster    gc cr block congested				 1	 0.0		0.01   7.30ms	  0.00	     7.30ms	7.30ms	   7.30ms
Cluster    gc cr grant congested				 1	 0.0		0.01   7.14ms	  0.00	     7.14ms	7.14ms	   7.14ms
Cluster    gc current multi block request			 1	 0.0		0.01   6.58ms	  0.00	     6.58ms	6.58ms	   6.58ms
Other	   latch: object queue header operation 		30	 0.0		0.01 213.93us	  0.00	   209.90us   149.36us	 270.44us    85.62us
Other	   enq: US - contention 				 5	 0.0		0.01   1.24ms	  0.00	     1.41ms	1.14ms	   1.68ms   384.49us
Other	   enq: WF - contention 				11	 9.1		0.01 548.18us	  0.00	   579.60us   541.20us	 618.00us    54.31us
Concurrenc cursor: pin S wait on X				 1	 0.0		0.01   5.57ms	  0.00	     5.57ms	5.57ms	   5.57ms
Other	   latch: checkpoint queue latch			11	 0.0		0.01 496.36us	  0.00	   312.47us    23.50us	 601.44us   408.67us
Other	   enq: CO - master slave det				 6     100.0		0.00 711.83us	  0.00	   711.83us   711.83us	 711.83us
Other	   latch: redo allocation				30	 0.0		0.00 136.60us	  0.00	   135.71us   122.43us	 149.00us    18.79us
Other	   os thread creation					 2	 0.0		0.00   1.81ms	  0.00	     1.81ms	1.72ms	   1.89ms   121.62us
Other	   ges LMON to get to FTDONE				 1	 0.0		0.00   3.50ms	  0.00	     3.50ms	3.50ms	   3.50ms
Concurrenc libcache interrupt action by LCK		       948	 0.0		0.00   3.60us	  0.00	     3.60us	3.48us	   3.72us   167.46ns
Other	   lock deadlock retry				       265     100.0		0.00   9.62us	  0.00	     9.62us	9.62us	   9.62us
User I/O   direct path read					14	 0.0		0.00 149.93us	  0.00	   149.93us   149.93us	 149.93us
Concurrenc latch: shared pool					 9	 0.0		0.00 218.33us	  0.00	   156.07us    44.00us	 268.14us   158.49us
Configurat enq: HW - contention 				 2	 0.0		0.00 831.00us	  0.00	   831.00us   620.00us	   1.04ms   298.40us
Other	   enq: AF - task serialization 			 1	 0.0		0.00   1.66ms	  0.00	     1.66ms	1.66ms	   1.66ms
Other	   asynch descriptor resize			       264	99.6		0.00   5.73us	  0.00	     5.76us	5.43us	   6.09us   469.45ns
Other	   enq: TA - contention 				 2	 0.0		0.00 728.00us	  0.00	   728.00us   299.00us	   1.16ms   606.70us
Network    SQL*Net message to client			       259	 0.0		0.00   4.68us	  0.00	     4.72us	4.14us	   5.29us   809.16ns
Other	   CSS operation: action				 2	 0.0		0.00 558.50us	  0.00	   558.50us   558.50us	 558.50us
Concurrenc library cache pin					 1	 0.0		0.00   1.00ms	  0.00	     1.00ms	1.00ms	   1.00ms
Other	   latch: messages					 8	 0.0		0.00 111.88us	  0.00	   118.63us    91.60us	 145.67us    38.23us
Other	   latch: ges resource hash list			 4	 0.0		0.00 193.25us	  0.00	   193.25us   193.25us	 193.25us
Other	   enq: RA - RT ADDM flood control			 1     100.0		0.00 513.00us	  0.00	   513.00us   513.00us	 513.00us
Configurat latch: redo writing					 2	 0.0		0.00 215.00us	  0.00	   215.00us   116.00us	 314.00us   140.01us
Other	   GCR CSS group query					22	 0.0		0.00  12.00us	  0.00	    12.00us    11.36us	  12.64us   899.95ns
Other	   GCR CSS group update 				23	 0.0		0.00  11.35us	  0.00	    11.29us    10.00us	  12.58us     1.83us
Other	   ges ipc enter server mode				38	 0.0		0.00   5.71us	  0.00	     5.63us	4.00us	   7.25us     2.30us
User I/O   direct path read temp				 2	 0.0		0.00 100.50us	  0.00	   100.50us   100.50us	 100.50us
Other	   ges enter server mode				 7	 0.0		0.00  19.00us	  0.00	    35.67us    12.33us	  59.00us    33.00us
Concurrenc library cache: mutex X				 3	 0.0		0.00  13.00us	  0.00	    13.00us    13.00us	  13.00us
Other	   AWR Flush						 3	 0.0		0.00   4.00us	  0.00	     4.00us	4.00us	   4.00us
Other	   buffer deadlock					 1     100.0		0.00  11.00us	  0.00	    11.00us    11.00us	  11.00us
Other	   undo_retention publish retry 			 2	 0.0		0.00   5.00us	  0.00	     5.00us	4.00us	   6.00us     1.41us
Other	   ges resource directory to be unfrozen		 2	 0.0		0.00   3.50us	  0.00	     3.50us	3.00us	   4.00us   707.11ns
Idle	   PX Idle Wait 				       213	 0.0	   91,363.11 428.93 s	 16.35	   429.00 s   414.34 s	 443.67 s    20.74 s
Idle	   Space Manager: slave idle wait		     7,478	 0.0	   32,111.36 4294.11m	  5.75	  4293.58ms  4272.43ms	4314.73ms    29.91ms
Idle	   rdbms ipc message				    25,255	51.8	   16,426.61 650.43ms	  2.94	   650.47ms   649.02ms	 651.93ms     2.06ms
Idle	   class slave wait				     8,657	78.9	    5,013.94 579.18ms	  0.90	   576.88ms   526.71ms	 627.04ms    70.94ms
Idle	   LMS CR slave timer				   280,967	 0.0	    2,807.85   9.99ms	  0.50	     9.99ms	9.99ms	  10.00ms    10.22us
Idle	   gcs yield cpu				   100,105	96.0	    2,800.87  27.98ms	  0.50	    27.98ms    27.89ms	  28.08ms   133.13us
Idle	   gcs remote message				 4,792,482	 0.0	    2,224.82 464.23us	  0.40	   466.33us   438.28us	 494.37us    39.66us
Background Wait Events (Global) 	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> s - second, ms - millisecond, us - microsecond, ns - nanosecond
-> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]
-> ordered by wait time desc, waits desc (idle events last)

			Wait				       Event			  Wait Time			    Summary Avg Wait Time
---------------------------------------------------   ----------------------   -------------------------------	 -------------------------------------------
Class	   Event					     Waits %Timeouts	    Total(s) Avg Wait %bg time		Avg	   Min	      Max    Std Dev
---------- ----------------------------------------   ------------ ---------   ------------- -------- --------	 ---------- ---------- ---------- ----------
Idle	   wait for unread message on broadcast cha	     1,078     100.0	    2,112.66 1959.80m	  0.38	  1959.82ms  1959.19ms	1960.45ms   894.19us
Idle	   ges remote message				    32,130	 0.0	    2,109.32  65.65ms	  0.38	    65.67ms    65.18ms	  66.16ms   695.75us
Idle	   pmon timer					       470	99.8	    1,408.56 2996.94m	  0.25	  2997.03ms  2994.21ms	2999.84ms     3.98ms
Idle	   GCR sleep					     4,675	 0.0	    1,404.24 300.37ms	  0.25	   300.37ms   300.33ms	 300.41ms    60.07us
Idle	   DIAG idle wait				    15,102	58.1	    1,391.26  92.12ms	  0.25	    92.11ms    91.50ms	  92.72ms   866.07us
Idle	   LGWR worker group idle				 2	 0.0	    1,200.00 600.00 s	  0.21	   300.00 s   300.00 s	 300.00 s
Idle	   shared server idle wait				 0	 N/A	      720.14		  0.13
Idle	   VKRM Idle						 0	 N/A	      720.06		  0.13
Idle	   dispatcher timer					12     100.0	      720.06  60.00 s	  0.13	    60.00 s    60.00 s	  60.01 s   500.16us
Idle	   Data Guard: Gap Manager				12	 0.0	      720.01  60.00 s	  0.13	    60.00 s    60.00 s	  60.00 s    82.85us
Idle	   lreg timer					       236	99.6	      705.64 2990.00m	  0.13	  2989.67ms  2976.70ms	3002.64ms    18.34ms
Idle	   OFS idle					       235     100.0	      705.00 2999.99m	  0.13	  2999.99ms  2999.99ms	3000.00ms     9.19us
Idle	   pman timer					       235     100.0	      704.94 2999.73m	  0.13	  2999.73ms  2999.73ms	2999.73ms     1.32us
Idle	   ASM background timer 			     2,370	 0.0	      704.07 297.08ms	  0.13	   297.05ms   295.87ms	 298.23ms     1.66ms
Idle	   REPL Capture/Apply: RAC AQ qmn coordinat		11     100.0	      703.42  63.95 s	  0.13	    64.31 s    60.35 s	  68.26 s  5588.85ms
Idle	   heartbeat redo informer			       703	 0.0	      703.09 1000.13m	  0.13	  1000.13ms  1000.12ms	1000.13ms     7.76us
Idle	   PING 					       664	20.2	      700.36 1054.76m	  0.13	  1054.72ms  1053.16ms	1056.27ms     2.20ms
Idle	   ASM cluster membership changes		       400	84.8	      700.15 1750.39m	  0.13	  1750.39ms  1750.38ms	1750.39ms     6.24us
Idle	   Streams AQ: qmn coordinator idle wait		50	 0.0	      700.02  14.00 s	  0.13	    14.00 s    14.00 s	  14.00 s     6.43us
Idle	   Streams AQ: qmn slave idle wait			25	 0.0	      700.02  28.00 s	  0.13	    28.00 s    28.00 s	  28.00 s     4.32us
Idle	   Streams AQ: waiting for time management		 0	 N/A	      700.00		  0.13
Idle	   SCM slave idle				     7,092	 0.0	      699.96  98.70ms	  0.13	    98.69ms    98.43ms	  98.95ms   363.82us
Idle	   AQPC idle						23     100.0	      690.01  30.00 s	  0.12	    30.00 s    30.00 s	  30.00 s    95.06us
Idle	   smon timer						 9	11.1	      307.81  34.20 s	  0.06	    75.59 s  1085.67ms	 150.10 s   105.37 s
Idle	   PX Deq: Parse Reply				       214	 0.0		7.86  36.71ms	  0.00	    56.70ms    29.97ms	  83.43ms    37.80ms
Idle	   PX Deq: Execute Reply			       924	 0.0		4.97   5.38ms	  0.00	    21.73ms	4.37ms	  39.09ms    24.56ms
Idle	   PX Deq Credit: send blkd			       398	 0.0		1.91   4.79ms	  0.00	     4.02ms   828.22us	   7.22ms     4.52ms
Idle	   SQL*Net message from client			       260	 0.0		0.24 924.36us	  0.00	      .96ms   416.64us	   1.50ms   765.10us
Idle	   RMA: IPC0 completion sync			       761	 0.0		0.01  13.64us	  0.00	    13.64us    13.60us	  13.68us    63.19ns
			  --------------------------------------------------------------------------------------------------------------------

Wait Event Histogram (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
AQ: RAC AQ Network	    6893					   42.9     53.0      2.6      1.3	0.2	 0.1   0.0(1)
ASM IO for non-blocking p  27.5K		       0.0(3)	  20.5	   26.0      4.2      2.0      1.5     19.3	24.0	  2.2	   0.3	    0.1   0.0(5)
ASM file metadata operati   2993			  6.7	   7.6	    6.3     11.1     20.8     13.0     12.1	11.1	  0.8	   2.0	    2.4      2.1      3.3      0.6	0.1
AWR Flush		       8			 25.0	  62.5	   12.5
CGS wait for IPC msg	   10.6K				   3.5	   69.0     23.5      2.5      1.2	0.2	 0.1
CSS operation: action	       2					   50.0 							  50.0
CSS operation: data query     21											 9.5	 33.3	  42.9	   14.3
CSS operation: data updat     25											12.0	 56.0	  24.0	    8.0
DFS lock handle 	     226										2.7	96.0	  1.3
DLM cross inst call compl    136					    5.9     25.0      3.7      8.8	4.4	 7.4	 19.1	  18.4	    5.1      2.2
Disk file Mirror Read	     969								       2.4     31.8	 9.8	 17.9	   9.4	    8.8      3.5      4.6      3.3	1.7	 1.5	  2.9	   2.1	    0.4
Disk file operations I/O     731			  0.1	   1.5	    7.9     31.6     13.3     13.5     14.6	 2.7	  1.4	   2.1	    6.0      5.2
GCR CSS group query	      22				   4.5	   86.4      9.1
GCR CSS group update	      23				  17.4	   78.3 	      4.3
IMR slave acknowledgement   2073				   6.4	   12.9      5.6      3.4     27.0     11.6	15.0	  6.3	   2.8	    2.5      1.2      1.4      1.0	0.5	 0.7	  0.9	   0.8	    0.1
IPC group service call	     565			  0.4	   3.0	    3.0     31.9     22.1     34.3	5.0	 0.4
IPC send completion sync    1151					   27.4     31.0      1.5      0.4	7.0	 8.9	 10.5	   7.7	    3.6      0.9      0.3						    0.7      0.1
KJC: Wait for msg sends t  38.5K				   1.0	   38.1      6.2     14.4     11.6	6.2	 6.4	  3.1	   1.1	    0.4      0.1   0.0(8)					  10.9	    0.4   0.0(4)
KSV master wait 	    1131				   5.7	   20.7     13.1      3.5      8.9     17.4	 2.8	  0.5	   4.7	    6.9      5.5      8.9      1.2	0.1
LGWR wait for redo copy      445			 22.7	  24.0	    0.9      1.3      9.9     15.5     18.0	 5.2	  0.9	   1.3	    0.2
PGA memory operation	    1024			  0.1	   4.8	   32.2      8.7      7.5      8.2     13.6	16.2	  5.3	   2.9	    0.3      0.1      0.1
PX Deq: Join ACK	     208											 0.5	 36.5	  22.6	   15.9      9.1      6.7      1.4			  2.9	   1.9	    1.0      1.4
PX Deq: Signal ACK EXT	     208					   14.9     52.4      9.6      5.3	4.8	 5.8	  6.3		    0.5 								    0.5
PX Deq: Slave Session Sta    420				   3.6	    3.6      8.6      0.5     18.1     21.0	13.6	 10.0	  11.4	    5.0      2.4      0.5						    1.7      0.2
PX Deq: reap credit	  101.4K				   0.2	   54.8     41.2      2.4      1.1	0.3	 0.1  0.0(26)	0.0(6)	 0.0(1)
PX qref latch		      13					   92.3      7.7
SQL*Net break/reset to cl     72				  47.2	    2.8 		      40.3	8.3	 1.4
SQL*Net message to client    853			 22.9	  73.5	    2.7      0.5      0.4		0.1
Sync ASM rebalance	      66				   3.0	   22.7     18.2      4.5		1.5		 15.2		    3.0      7.6     18.2      4.5	1.5
asynch descriptor resize     265			  0.8	  92.8	    4.5      0.8      1.1
buffer busy waits	      36					    2.8 	      2.8		8.3	 2.8	  2.8			     2.8      8.3			 2.8	  2.8		   11.1     52.8
buffer deadlock 	       4					   50.0     50.0
control file parallel wri    332														   21.7     38.6      9.0      3.9	4.8	 2.4	 11.4	   4.5	    2.1      1.5
control file sequential r   4071				   0.5	   17.1      5.5      0.4     10.3     47.6	13.9	  2.8	   1.1	    0.5      0.1      0.1
cursor: pin S wait on X       40													   2.5		    10.0      5.0     35.0     47.5
db file async I/O submit   12.3K			 27.1	  69.5	    1.8      0.4      0.8      0.3	0.1   0.0(1)   0.0(3)
db file parallel read	      15									       20.0	13.3	 26.7	  20.0		     6.7     13.3
db file parallel write	   20.5K					    0.1      0.4      1.3      1.9	3.4	12.3	 22.8	  14.3	   18.6     12.1      5.4      1.6	0.7	 1.4	  3.6	   0.2	 0.0(2)
db file scattered read	     476								       0.8     44.3	39.1	 12.6	   2.1	    0.6 	      0.4
db file sequential read    21.7M								       0.8     24.1	56.8	 11.8	   3.6	    1.8      0.6      0.4 0.0(2066 0.0(1009 0.0(214) 0.0(273)
direct path read	      14					   14.3 		      28.6     35.7	21.4
direct path read temp	       2							     50.0	       50.0
direct path write	      45											 4.4	  6.7	  28.9	   37.8     11.1      2.2      6.7		 2.2
direct path write temp	     159														   53.5     34.0      2.5      1.9	1.9	 1.9	  1.9		    2.5
enq: AF - task serializat      1													 100.0
enq: CF - contention	      71											16.9	 38.0	  19.7	   14.1      1.4				 2.8	  1.4	   4.2	    1.4
enq: CO - master slave de      6											33.3	 33.3	  33.3
enq: CR - block range reu    124							      0.8				 15.3	  25.0	   25.0      6.5				 0.8	  0.8	   4.0	    5.6     16.1
enq: FB - contention	       4										       100.0
enq: HW - contention	     449												  0.4	   0.2	    0.2 		       0.4	1.1	 1.3	  2.7	   5.8	    9.8     78.0
enq: PS - contention	     250					    0.8      0.4      0.4      0.4	2.4	14.8	 32.8	  30.0	   12.0      2.4      0.4				  1.6	   1.6
enq: RO - fast object reu    360										1.1	35.6	 11.7	  15.6	   17.2      3.9      0.3		0.6		  0.3	   0.8	    1.7     11.4
enq: TA - contention	       1										       100.0
enq: TM - contention	       3											33.3	 33.3						       33.3
enq: TO - contention	      10												 50.0	  40.0	   10.0
enq: US - contention	       5												 60.0	  20.0	   20.0
enq: WF - contention	      29											37.9	 34.5	  27.6
free buffer waits	    1.1M			      0.0(131)	    0.3      0.1      0.1 0.0(327) 0.0(463)	 0.1	  0.2	   0.3	    0.5      0.9     97.5  0.0(59)   0.0(1)	       0.0(4)	0.0(1)	 0.0(1)   0.0(2)
gc buffer busy acquire	      69												  1.4	  11.6	   21.7     63.8      1.4
gc buffer busy release	       8					   12.5 								   12.5     25.0	      12.5					   37.5
Wait Event Histogram (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
gc cr block 2-way	    2567								       0.2     17.3	21.2	 29.4	  21.0	    8.6      1.7      0.2   0.0(1)	      0.0(1)			    0.3   0.0(1)
gc cr block busy	     148													   2.7	    4.1     12.8     23.0     18.9	6.8	 4.1	  4.1	  14.2	    8.1      1.4
gc cr block congested	      10														   60.0     20.0     10.0						   10.0
gc cr block lost	    2355																						  24.8	   74.0      1.2
gc cr disk read 	      49									       32.7	 8.2	  6.1	  34.7	   12.2      2.0					  4.1
gc cr failure		     161											32.9	 36.6	  24.2	    3.7      1.2				 0.6				     0.6
gc cr grant 2-way	  263.6K						  0.0(1)      0.1      0.1	2.9	30.7	 34.4	  22.1	    7.7      1.4      0.2  0.0(60)   0.0(3)  0.0(19)   0.0(3)  0.0(12)	    0.4  0.0(73)
gc cr grant busy	    1.8M					0.0(25)  0.0(32)  0.0(57)  0.0(98) 0.0(642)	 7.0	 28.1	  34.7	   18.6      6.5      2.0      0.6	0.3	 1.5	  0.1 0.0(289)	    0.6      0.1
gc cr grant congested	    2539													   6.9	   51.8     33.9      6.3      0.5					    0.6
gc cr multi block grant      130										0.8	13.1	 31.5	  24.6	   20.8      6.2	       0.8		 1.5			    0.8
gc cr multi block mixed       25											16.0	 24.0	  28.0	   24.0      4.0							    4.0
gc current block 2-way	    1392								       0.1	0.4	14.3	 35.3	  30.5	   14.6      3.2      0.5      0.1					    1.1      0.1
gc current block busy	    4847							   0.0(2)   0.0(2)	0.5	 9.4	 25.2	  31.1	   20.1      8.3      2.2      0.9	0.4	 1.4	  0.1	0.0(1)	    0.4      0.1
gc current block congeste     45														   48.9     35.6      2.2      2.2			  2.2			     8.9
gc current block lost	     421																						  23.3	   74.3      2.4
gc current grant 2-way	  235.3K							  0.0(15)  0.0(15)	0.4	 3.5	  6.5	  22.5	   33.5     19.5      6.6      2.0	1.1	 3.1	  0.4	   0.1	    0.7      0.1
gc current grant busy	    180K					 0.0(5)   0.0(6)   0.0(4)   0.0(9)  0.0(63)	 7.6	 28.6	  34.3	   18.1      6.4      1.9      0.6	0.3	 1.4	  0.1  0.0(47)	    0.5      0.1
gc current grant congeste   3729													   0.2	    7.9     31.6     36.0      8.6	3.5	 8.5	  2.1	   0.4	    0.8      0.4
gc current grant read-mos 259.5K						  0.0(1)   0.0(5)	    0.0(17)	 1.4	 19.5	  36.9	   23.7      9.5      3.4      1.3	1.1	 3.0	  0.2	   0.1	    0.1  0.0(50)
gc current multi block re      2											50.0				    50.0
gc current retry	       1													 100.0
gc remaster		       1																								   100.0
gcs drm freeze in enter s      9																     33.3     22.2     11.1	33.3
gcs log flush sync	   59.1K			       0.0(14)	    4.1      4.8     18.4     21.9     21.0	16.4	  8.6	   3.4	    0.9      0.2      0.1  0.0(13)
gcs remastering wait for      37										2.7	 5.4	  5.4	   5.4	    5.4      5.4			2.7	64.9	  2.7
ges LMON to get to FTDONE      1														  100.0
ges enter server mode	    3764			 21.6	  73.5	    2.0      0.4      1.5      0.8	0.2   0.0(1)
ges inquiry response	     118											31.4	 19.5	  31.4	   15.3      0.8					  0.8	   0.8
ges ipc enter server mode     38			 23.7	  73.7			      2.6
ges lms sync during dynam     84						     3.6			9.5	20.2	 21.4	  34.5	   10.7
ges resource directory to      3			 33.3	  66.7
ges2 LMON to wake up LMD     122					   16.4     12.3      7.4     16.4     16.4	16.4	  9.0	   3.3	    2.5
kjctssqmg: quick message     123					   15.4      8.9      4.1      8.9     12.2	24.4	 17.1	   8.1	    0.8
kksfbc child completion        2																		      100.0
ksxr poll remote instance   1783					   54.9     39.0      3.6      2.0	0.2	 0.2	  0.1	   0.1
latch free		    3115				   0.7	   10.6      2.4      3.8     16.2     17.8	28.5	 11.1	   3.6	    1.7      1.0   0.0(1)   0.0(1)   0.0(1)	 2.6
latch: MGA heap latch	      71				   9.9	    8.5     11.3     16.9     12.7     18.3	18.3	  4.2
latch: MGA shared context    241				   1.7	    7.5 	      1.7     13.3     22.4	27.0	 15.4	  10.4	    0.8
latch: MGA shared context    175				   2.9	    1.1 	      6.9      6.3	7.4	 8.6	 12.0	  23.4	   26.3      5.1
latch: cache buffers chai   4138				   3.1	   32.0      3.1      4.5     23.2     17.7	 8.8	  4.6	   2.0	    0.6      0.1	    0.0(1)	0.1   0.0(1)
latch: cache buffers lru     887				   4.7	   27.5      4.1      7.9     26.7     17.7	 7.6	  1.9	   1.2	    0.6      0.1
latch: call allocation	      43				   7.0	    7.0      9.3     16.3     16.3     16.3	 7.0	  7.0	   7.0	    7.0
latch: checkpoint queue l     11					    9.1 	     27.3      9.1	9.1	18.2	  9.1	   9.1	    9.1
latch: enqueue hash chain    265				   3.8	   13.2      3.8      6.8     26.0     25.3	 8.3	  7.2	   4.5	    1.1
latch: gc element	     737				   1.4	   12.5      2.6      5.7     24.3     23.1	13.8	 10.4	   4.1	    1.9      0.3
latch: gcs resource hash    1061				   1.7	   18.7      3.3      5.7     27.1     19.8	11.3	  6.5	   3.2	    1.1      0.3	       0.1	0.5	 0.7
latch: ges resource hash      89				   9.0	   23.6     12.4      9.0     13.5     12.4	 4.5	  2.2	   2.2	   11.2
latch: messages 	      12					   25.0 		      41.7     25.0	 8.3
latch: object queue heade     79				   2.5	   17.7      3.8      3.8     22.8     20.3	19.0	  5.1	   5.1
latch: redo allocation	      73				   1.4	   24.7      9.6      6.8     28.8     20.5	 4.1	  2.7	   1.4
latch: redo writing	       2								      50.0		50.0
latch: shared pool	     142				   7.7	   26.1      5.6      4.2      2.8     13.4	12.0	 15.5	  12.7
latch: undo global data       16					   12.5 		      18.8     43.8	18.8		   6.3
libcache interrupt action    924			 68.0	  30.5	    0.5      0.3      0.5      0.1
library cache load lock       86					    2.3      1.2      2.3      3.5     10.5	 9.3	  1.2	   8.1	   11.6     30.2     19.8
library cache pin	       1												100.0
library cache: bucket mut      4				  50.0	   50.0
library cache: mutex X	     332			  2.7	  29.2	   19.9     13.3      3.3      1.8	3.0	 2.7	  2.7	   1.2			     17.2      3.0
lock deadlock retry	     678				   8.1	   50.1     36.7      2.7      1.2	0.7	 0.3		   0.1
lock escalate retry	      14																    100.0
Wait Event Histogram (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> When % of Total Waits is  0.0 the count is displayed in parenthesis

															      % of Total Waits
				   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event			   Waits       <1us	<2us	 <4us	  <8us	  <16us    <32us    <64us   <128us   <256us   <512us	 <1ms	  <2ms	   <4ms     <8ms    <16ms    <32ms    <64ms   <128ms   <256ms	<512ms	    <1s     >=1s
------------------------- ------   -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --------
log file parallel write    21.9K														   22.8     37.3     27.7      5.7	1.5	 0.6	  2.8	   1.0	    0.5   0.0(9)
log file sequential read     465							     27.7      5.6     18.3	11.0	  1.3	  23.9	    7.7      3.2      1.3
log file sync		     146														    4.8      3.4      4.8     17.8     17.1	39.7	 12.3
name-service call wait	       4											75.0	 25.0
oracle thread bootstrap        2																	      50.0     50.0
os thread creation	       2													 100.0
read by other session	       9					   11.1     11.1		       11.1	11.1	 11.1	  22.2	   22.2
reliable message	     231												 17.3	  22.9	   35.1     12.6      5.6      0.4			  1.7	   1.7	    1.3      1.3
row cache lock		      78											15.4	 37.2	  26.9	   14.1      2.6					  1.3		    2.6
undo_retention publish re      2				 100.0
wait list latch free	       2													 100.0
write complete waits	    1755																      0.1      0.1	0.2	 0.9	  1.9	   3.7	    8.4     84.7
			  --------------------------------------------------------------------------------------------------------------------


System Statistics			 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	       Reads	    Reads	Writes	   Size (k)	 Changes	Calls	     Execs	 Parses     Logons	   Txns
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ---------- ------------
   1	  20,058,682   11,204,858    1,223,547	  1,048,131    3,106,687	1,432	 3,801,670	  4,454        109	381,867
   2	  20,006,950   10,818,025    1,198,874	  1,044,077    3,087,250	1,264	 3,789,973	  4,844        110	378,968
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	  40,065,632   22,022,883    2,422,421	  2,092,209    6,193,937	2,696	 7,591,643	  9,298        219	760,835
 Avg	  20,032,816   11,011,442    1,211,211	  1,046,104    3,096,969	1,348	 3,795,822	  4,649        110	380,418
 Std	      36,580	  273,532	17,446	      2,867	  13,744	  119	     8,271	    276 	 1	  2,050
			  --------------------------------------------------------------------------------------------------------------------

System Statistics - Per Second		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	     Reads/s	  Reads/s     Writes/s	 Size (k)/s    Changes/s      Calls/s	   Execs/s     Parses/s   Logons/s	 Txns/s
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ---------- ------------
   1	   55,253.66	 30,864.9      3,370.4	    2,887.2	 8,557.7	  3.9	  10,472.1	   12.3       0.30	1,051.9
   2	   55,109.95	 29,798.7      3,302.3	    2,876.0	 8,504.0	  3.5	  10,439.6	   13.3       0.30	1,043.9
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	  110,363.61	 60,663.6      6,672.7	    5,763.1	17,061.6	  7.4	  20,911.7	   25.6       0.60	2,095.8
 Avg	   55,181.81	 30,331.8      3,336.4	    2,881.6	 8,530.8	  3.7	  10,455.9	   12.8       0.30	1,047.9
 Std	      101.62	    753.9	  48.1		7.9	    38.0	  0.3	      22.9	    0.8       0.00	    5.7
			  --------------------------------------------------------------------------------------------------------------------

System Statistics - Per Transaction	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

	     Logical	 Physical     Physical	       Redo	   Block	 User
  I#	    Reads/tx	 Reads/tx    Writes/tx	Size (k)/tx   Changes/tx     Calls/tx	  Execs/tx    Parses/tx  Logons/tx
---- --------------- ------------ ------------ ------------ ------------ ------------ ------------ ------------ ----------
   1	       52.53	     29.3	   3.2		2.7	     8.1	  0.0	      10.0	    0.0       0.00
   2	       52.79	     28.5	   3.2		2.8	     8.1	  0.0	      10.0	    0.0       0.00
 ~~~ ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~
 Avg	       52.66	     28.9	   3.2		2.7	     8.1	  0.0	      10.0	    0.0       0.00
			  --------------------------------------------------------------------------------------------------------------------


SysStat and Global Messaging  - RAC	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

	   Blocks Received	      Blocks Served	       CPU (seconds)						Messages				       GC Blks	   GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   -------	 --------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent   GES Sent   Sent Direct  Sent Indir	  Lost	  Failure
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   -------	 --------
   1	     2,587	 2,146	       4,395	     783	  N/A	       0	5,654,477	   4,809      4,696,161       1,658	 896,647   1,981,425	    89	      161
   2	     3,782	   666	       2,358	   1,943	  N/A	       0	4,335,672	   1,576      5,254,164       4,655    1,660,381   2,731,865	 2,695		0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~	 ~~~~~~~~
 Sum	     6,369	 2,812	       6,753	   2,726	    0	       0	9,990,149	   6,385      9,950,325       6,313    2,557,028   4,713,290	 2,784	      161
 Avg	     3,185	 1,406	       3,377	   1,363	  N/A	       0	4,995,075	   3,193      4,975,163       3,157    1,278,514   2,356,645	 1,392	       81
 Std	       845	 1,047	       1,440	     820	  N/A	       0	  932,536	   2,286	394,568       2,119	 540,041     530,641	 1,843	      114
			  --------------------------------------------------------------------------------------------------------------------

SysStat and Global Messaging (per Sec)- RACDB/Inst: P30SDB/p30sdb1  Snaps: 47-

     Blocks Received Per Second   Blocks Served per Second   CPU seconds per Second				     Messages Per Second				  GC Blks     GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   -------	 --------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent    GES Sent  Sent Direct  Sent Indir	Lost/s	   Fail/s
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   -------	 --------
   1	      7.13	  5.91	       12.11	    2.16	  N/A	    0.00	15,575.83	   13.25      12,936.05        4.57	 2,469.9    5,458.04	     0		0
   2	     10.42	  1.83		6.50	    5.35	  N/A	    0.00	11,942.78	    4.34      14,472.81       12.82	 4,573.6    7,525.03	     7		0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~	 ~~~~~~~~
 Sum	     17.54	  7.75	       18.60	    7.51	 0.00	    0.00	27,518.61	   17.59      27,408.85       17.39	 7,043.5   12,983.07	     8		0
 Avg	      8.77	  3.87		9.30	    3.75	  N/A	    0.00	13,759.30	    8.79      13,704.43        8.69	 3,521.7    6,491.53	     4		0
 Std	      2.33	  2.88		3.97	    2.26	  N/A	    0.00	 2,568.95	    6.30       1,086.65        5.84	 1,487.5    1,461.59	     5		0
			  --------------------------------------------------------------------------------------------------------------------

SysStat and Global Messaging (per Tx)- RACDB/Inst: P30SDB/p30sdb1  Snaps: 47-4

	Blocks Received per Tx	      Blocks Served	    CPU (seconds) per Tx				Messages per Transaction			       GC Blks	   GC CR
       -----------------------	 -----------------------   ---------------------   ---------------------------------------------------------------------------------   ------	--------
  I#	GC Current	 GC CR	  GC Current	   GC CR	   GC	     IPC     GCS Received   GES Received       GCS Sent   GES Sent   Sent Direct  Sent Indir   Lost/T	 Fail/Tx
----   ----------- -----------	 ----------- -----------   ---------- ----------   -------------- -------------- -------------- ----------- ------------ -----------   ------	--------
   1	      0.01	  0.01		0.01	    0.00	  N/A	    0.00	    14.81	    0.01	  12.30        0.00	     2.3	5.19	  0.0	     0.0
   2	      0.01	  0.00		0.01	    0.01	  N/A	    0.00	    11.44	    0.00	  13.86        0.01	     4.4	7.21	  0.0	     0.0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~	 ~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~   ~~~~~~	~~~~~~~~
 Avg	      0.01	  0.00		0.01	    0.00	  N/A	    0.00	    13.12	    0.01	  13.08        0.01	     3.4	6.20	  0.0	     0.0
			  --------------------------------------------------------------------------------------------------------------------


Global Cache Efficiency Percentages	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

	       Buffer Access
       -----------------------------
  I#	   Local % Remote %   Disk %	Locality %
----   ----------- -------- --------   -----------
   1	     44.11     0.02    55.86	     90.91
   2	     45.90     0.02    54.08	     83.70
			  --------------------------------------------------------------------------------------------------------------------

Global Latency Characteristics		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

				CR Blocks				  CU Blocks
		 ---------------------------------------   ---------------------------------------
	GE Get	   Receive     Build	 Flush Log Flush     Receive	   Pin	   Flush Log Flush
  I# Time (us)	 Time (us) Time (us) Time (us) CR Srvd %   Time (us) Time (us) Time (us) CU Srvd %
---- ---------	 --------- --------- --------- ---------   --------- --------- --------- ---------
   1	  4142	     13481	  28	330870	     2.9       10866	   N/A	  133333       0.1
   2	  1080	     15015	  38	126493	     6.9       13107	   N/A	    4000       0.2
			  --------------------------------------------------------------------------------------------------------------------

Global Messaging Statistics		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

	     Queue Time (us)	    Process Time (us)	      % Messages Sent
       --------------------------   -----------------	--------------------------
  I#	   Sent  on ksxp Received   GCS msgs GES msgs	  Direct Indirect Flow Ctr
----   -------- -------- --------   -------- --------	-------- -------- --------
   1	   1555    11012       65	  25	   18	    30.5     67.4      2.1
   2	   2271     8754       55	  30	   91	    37.3     61.4      1.3
			  --------------------------------------------------------------------------------------------------------------------


Global CR Server Statistics		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

			   Block Requests					   Results			 Fairness      Light		   Total
       -----------------------------------------------------   ----------------------------------------------	----------   --------	--------------------------
  I#		CR	    CU	      Data     Undo	  TX	   Current Private	 Zero  Dsk Rd	 Fail	 Down Conv	Works	   Flushes     Builds Erro
----   ----------- ----------- ----------- -------- --------   ----------- ------- ---------- ------- -------	----------   --------	---------- ---------- ----
   1	       717	   103	       717	  0	  56	       778	 0	    0	   42	    0	       672	   57		23	  716	 0
   2	       519	 1,586	       519	  0    1,576	     1,940	 0	    0	    6	  159	       514	  334	       134	  519	 0
 ~~~   ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~~ ~~~~~~~ ~~~~~~~~~~ ~~~~~~~ ~~~~~~~	~~~~~~~~~~   ~~~~~~~~	~~~~~~~~~~ ~~~~~~~~~~ ~~~~
 Sum	     1,236	 1,689	     1,236	  0    1,632	     2,718	 0	    0	   48	  159	     1,186	  391	       157	1,235	 0
 Avg	       618	   845	       618	  0	 816	     1,359	 0	    0	   24	   80	       593	  196		79	  618	 0
 Std	       140	 1,049	       140	  0    1,075	       822	 0	    0	   25	  112	       112	  196		78	  139	 0
			  --------------------------------------------------------------------------------------------------------------------

Global Current Server Statistics	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

  I#	    Pins % <100us   % <1ms  % <10ms % <100ms	% <1s	% <10s	   Flushes % <100us   % <1ms  % <10ms % <100ms	  % <1s   % <10s
---- ----------- -------- -------- -------- -------- -------- -------- ----------- -------- -------- -------- -------- -------- --------
   1	       0     0.00     0.00     0.00	0.00	 0.00	  0.00		 6     0.00	0.00	66.67	 16.67	  16.67     0.00
   2	       0     0.00     0.00     0.00	0.00	 0.00	  0.00		 5     0.00	0.00	60.00	 40.00	   0.00     0.00
 ~~~ ~~~~~~~~~~~						       ~~~~~~~~~~~
 Sum	       0								11
 Avg	       0								 6
 Std	       0								 1
			  --------------------------------------------------------------------------------------------------------------------


Global Cache Transfer Statistics	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays
-> Busy        (Busy) - Block Transfer impacted by Remote Contention
-> Congested  (Cngst) - Block Transfer impacted by Remote System Load
-> All - average time of All blocks (Immed,Busy,Cngst) in us
-> Ordered by instance_number, CR + Current Blocks Received desc

Instance#	Block		       CR Blocks		       Current Blocks		       CR Avg Time (us) 	  Current Avg Time (us)
---------   ------------   --------------------------------   --------------------------------	 ---------------------------   ---------------------------
Dest  Src   Class	      Received %Immed  %Busy %Cngst	 Received %Immed  %Busy %Cngst	    All  Immed	 Busy  Cngst	  All  Immed   Busy  Cngst
---- ----   ------------   ----------- ------ ------ ------   ----------- ------ ------ ------	 ------ ------ ------ ------   ------ ------ ------ ------
   1	2   data block		   700	 98.7	 0.3	1.0	    2,554   39.4   60.3    0.3	  10096   8728	 1466 1.E+05	 9821  10239   9557   7938
	2   undo header 	 1,422	 90.8	 9.1	0.1		1    0.0  100.0    0.0	  14657   2267 1.E+05	7301	  725	 N/A	725    N/A
	2   others		     7	100.0	 0.0	0.0	       10    0.0  100.0    0.0	    917    917	  N/A	 N/A	  569	 N/A	569    N/A
	2   undo block		     1	100.0	 0.0	0.0		0    N/A    N/A    N/A	   2056   2056	  N/A	 N/A	  N/A	 N/A	N/A    N/A

   2	1   data block		   604	 99.5	 0.2	0.3	    3,743   10.3   88.6    1.0	   8045   6263 1.E+06	4487	13244  22525   9686 2.E+05
	1   undo header 	    47	 63.8	36.2	0.0		1    0.0  100.0    0.0	 1.E+05    804 3.E+05	 N/A	  848	 N/A	848    N/A
	1   others		    12	100.0	 0.0	0.0	       20   15.0   85.0    0.0	    241    241	  N/A	 N/A	  733	 432	786    N/A
			  --------------------------------------------------------------------------------------------------------------------

Global Cache Transfer (Immediate)	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Ordered by instance_number, CR + Current Blocks Received desc

Instance#	Block	     Lost Blocks	 Immediate CR Blocks	     Immediate Current Blocks	   Immed CR Avg Time (us)   Immed Current Avg Time (us)
---------   ------------   --------------   ----------------------------   ----------------------------   -----------------------   -----------------------
Dest  Src   Class	     Count Time(u      Received  %2-hop   %3-hop      Received	%2-hop	 %3-hop     Total   2-hop   3-hop     Total   2-hop   3-hop
---- ----   ------------   ------- ------   ----------- ------- --------   ----------- ------- --------   ------- ------- -------   ------- ------- -------
   1	2   data block		 0    N/A	    691   100.0      0.0	 1,007	 100.0	    0.0      8728    8728     N/A     10239   10239	N/A
	2   undo header 	 0    N/A	  1,291   100.0      0.0	     0	   N/A	    N/A      2267    2267     N/A	N/A	N/A	N/A
	2   others		 0    N/A	      7   100.0      0.0	     0	   N/A	    N/A       917     917     N/A	N/A	N/A	N/A
	2   undo block		 0    N/A	      1   100.0      0.0	     0	   N/A	    N/A      2056    2056     N/A	N/A	N/A	N/A

   2	1   data block		 0    N/A	    601   100.0      0.0	   387	 100.0	    0.0      6263    6263     N/A     22525   22525	N/A
	1   undo header 	 0    N/A	     30   100.0      0.0	     0	   N/A	    N/A       804     804     N/A	N/A	N/A	N/A
	1   others		 0    N/A	     12   100.0      0.0	     3	 100.0	    0.0       241     241     N/A	432	432	N/A
	1   undo block		 0    N/A	      0     N/A      N/A	     0	   N/A	    N/A       N/A     N/A     N/A	N/A	N/A	N/A
			  --------------------------------------------------------------------------------------------------------------------


Cluster Interconnect			 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

					 Begin					  End (if different from Begin)
		  --------------------------------------------------   --------------------------------------------------
  I# NAME	  IP Address	  Pub Source			       IP Address      Pub Source
---- ----------   --------------- --- ------------------------------   --------------- --- ------------------------------
   1 fg-priv:1	  169.254.26.166  N
   2 fg-priv:1	  169.254.26.102  N
			  --------------------------------------------------------------------------------------------------------------------

Ping Statistics 			 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Latency of the roundtrip of a message from  Src Instance to the Target instances

 Instance#	       500 bytes		    8 Kbytes
-----------   --------------------------   --------------------------
		    Ping    Avg      Std	 Ping	 Avg	  Std
 Src Target	   Count Time(us)    Dev	Count Time(us)	  Dev
---- ------   ---------- -------- ------   ---------- -------- ------
   1	  1	      33      451    0.2	   36	   429	  0.1
	  2	      33      831    0.5	   36	   945	  0.7

   2	  1	      30      812    0.5	   33	  1166	  1.7
	  2	      30      313    0.1	   33	   294	  0.1
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Client Statistics		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

				   Sent (MB)							     Received (MB)
       -----------------------------------------------------------------   -----------------------------------------------------------------
  I#	    Total      Cache	    IPQ        DLM	  PNG	    Misc	Total	   Cache	IPQ	   DLM	      PNG	Misc
----   ---------- ---------- ---------- ---------- ---------- ----------   ---------- ---------- ---------- ---------- ---------- ----------
   1	  1,180.2	49.6	   10.6    1,079.3	  0.6	    40.2      1,602.8	    14.7	5.6    1,531.9	      0.6	50.0
   2	  1,451.6	13.2	    5.6    1,385.9	  0.6	    46.3      1,064.8	    46.7       10.5	 969.7	      0.6	37.3
 ~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~
 Sum	  2,631.8	62.8	   16.2    2,465.2	  1.2	    86.5      2,667.6	    61.4       16.2    2,501.7	      1.2	87.3
 Avg	  1,315.9	31.4	    8.1    1,232.6	  0.6	    43.3      1,333.8	    30.7	8.1    1,250.8	      0.6	43.6
 Std	    191.9	25.7	    3.6      216.8	  0.0	     4.4	380.5	    22.7	3.5	 397.5	      0.0	 9.0
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Client Statistics (per Second)DB/Inst: P30SDB/p30sdb1  Snaps: 47-

				  Sent (MB/s)							    Received (MB/s)
       -----------------------------------------------------------------   -----------------------------------------------------------------
  I#	    Total      Cache	    IPQ        DLM	  PNG	    Misc	Total	   Cache	IPQ	   DLM	      PNG	Misc
----   ---------- ---------- ---------- ---------- ---------- ----------   ---------- ---------- ---------- ---------- ---------- ----------
   1	      3.3	 0.1	    0.0        3.0	  0.0	     0.1	  4.4	     0.0	0.0	   4.2	      0.0	 0.1
   2	      4.0	 0.0	    0.0        3.8	  0.0	     0.1	  2.9	     0.1	0.0	   2.7	      0.0	 0.1
 ~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~   ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~ ~~~~~~~~~~
 Sum	      7.2	 0.2	    0.0        6.8	  0.0	     0.2	  7.3	     0.2	0.0	   6.9	      0.0	 0.2
 Avg	      3.6	 0.1	    0.0        3.4	  0.0	     0.1	  3.7	     0.1	0.0	   3.4	      0.0	 0.1
 Std	      0.5	 0.1	    0.0        0.6	  0.0	     0.0	  1.0	     0.1	0.0	   1.1	      0.0	 0.0
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Device Statistics		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs
-> null means begin value > end value

			Interface					       Sent							  Received
       ------------------------------------------   ----------------------------------------------------------	 ----------------------------------------------------------
										       Packets	Buffer Carrier					    Packets  Buffer   Frame
  I#   NAME	  IP Address	  IP Mask		   MBytes      Packets	Errors Dropped	Ovrrun	  Lost		MBytes	    Packets  Errors Dropped  Ovrrun  Errors
----   ---------- --------------- ---------------   ------------- ------------ ------- ------- ------- -------	 ------------- ------------ ------- ------- ------- -------
   1   eth0	  10.1.5.4	  255.255.255.0 	 14,690.3    9,718,720	     0	     0	     0	     0	      15,746.4	  9,200,692	  0	  0	  0	  0
       fg-priv	  192.168.2.1	  255.255.255.0 	  2,390.0    6,258,991	     0	     0	     0	     0	       2,816.9	  6,198,749	  0	  0	  0	  0
       fg-priv:1  169.254.26.166  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.1	  255.255.255.0 	      0.2	   715	     0	     0	     0	     0		   0.1		697	  0	  0	  0	  0
       fg-pub:1   192.168.1.11	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.21	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.1	  255.255.255.0 	      1.8	 2,082	     0	     0	     0	     0		   1.3	      2,785	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		     73.2    1,185,412	     0	     0	     0	     0		  73.2	  1,185,412	  0	  0	  0	  0
   2   eth0	  10.1.5.6	  255.255.255.0 	 15,900.7    9,461,035	     0	     0	     0	     0	      14,553.5	  9,453,776	  0	  0	  0	  0
       fg-priv	  192.168.2.2	  255.255.255.0 	  2,813.3    5,883,101	     0	     0	     0	     0	       2,396.1	  6,474,954	  0	  0	  0	  0
       fg-priv:1  169.254.26.102  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.2	  255.255.255.0 	      0.1	   693	     0	     0	     0	     0		   0.2		718	  0	  0	  0	  0
       fg-pub:1   192.168.1.23	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:3   192.168.1.22	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:4   192.168.1.12	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.2	  255.255.255.0 	      1.8	 2,088	     0	     0	     0	     0		   1.3	      2,791	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		     93.5    1,848,465	     0	     0	     0	     0		  93.5	  1,848,465	  0	  0	  0	  0
 ~~~						    ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~	 ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~
 Sum							 35,964.8   34,361,302	     0	     0	     0	     0	      35,682.3	 34,369,039	  0	  0	  0	  0
 Avg							  2,115.6    2,021,253	     0	     0	     0	     0	       2,099.0	  2,021,708	  0	  0	  0	  0
 Std							  5,038.6    3,474,188	     0	     0	     0	     0	       4,990.9	  3,443,418	  0	  0	  0	  0
			  --------------------------------------------------------------------------------------------------------------------

Interconnect Device Statistics (per Second)DB/Inst: P30SDB/p30sdb1  Snaps: 47-
-> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs
-> Blank  means begin value > end value

			Interface					       Sent							  Received
       ------------------------------------------   ----------------------------------------------------------	 ----------------------------------------------------------
										       Packets	Buffer Carrier					    Packets  Buffer   Frame
  I#   NAME	  IP Address	  IP Mask		   MBytes      Packets	Errors Dropped	Ovrrun	  Lost		MBytes	    Packets  Errors Dropped  Ovrrun  Errors
----   ---------- --------------- ---------------   ------------- ------------ ------- ------- ------- -------	 ------------- ------------ ------- ------- ------- -------
   1   eth0	  10.1.5.4	  255.255.255.0 	     40.5	26,771	     0	     0	     0	     0		  43.4	     25,344	  0	  0	  0	  0
       fg-priv	  192.168.2.1	  255.255.255.0 	      6.6	17,241	     0	     0	     0	     0		   7.8	     17,075	  0	  0	  0	  0
       fg-priv:1  169.254.26.166  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.1	  255.255.255.0 	      0.0	     2	     0	     0	     0	     0		   0.0		  2	  0	  0	  0	  0
       fg-pub:1   192.168.1.11	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:2   192.168.1.21	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.1	  255.255.255.0 	      0.0	     6	     0	     0	     0	     0		   0.0		  8	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		      0.2	 3,265	     0	     0	     0	     0		   0.2	      3,265	  0	  0	  0	  0
   2   eth0	  10.1.5.6	  255.255.255.0 	     43.8	26,061	     0	     0	     0	     0		  40.1	     26,041	  0	  0	  0	  0
       fg-priv	  192.168.2.2	  255.255.255.0 	      7.7	16,205	     0	     0	     0	     0		   6.6	     17,836	  0	  0	  0	  0
       fg-priv:1  169.254.26.102  255.255.224.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub	  192.168.1.2	  255.255.255.0 	      0.0	     2	     0	     0	     0	     0		   0.0		  2	  0	  0	  0	  0
       fg-pub:1   192.168.1.23	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:3   192.168.1.22	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-pub:4   192.168.1.12	  255.255.255.0 	      0.0	     0	     0	     0	     0	     0		   0.0		  0	  0	  0	  0	  0
       fg-storage 192.168.3.2	  255.255.255.0 	      0.0	     6	     0	     0	     0	     0		   0.0		  8	  0	  0	  0	  0
       lo	  127.0.0.1	  255.0.0.0		      0.3	 5,092	     0	     0	     0	     0		   0.3	      5,092	  0	  0	  0	  0
 ~~~						    ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~	 ~~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~ ~~~~~~~
 Sum							     99.1	94,651	     0	     0	     0	     0		  98.3	     94,672	  0	  0	  0	  0
 Avg							      5.8	 5,568	     0	     0	     0	     0		   5.8	      5,569	  0	  0	  0	  0
 Std							     13.9	 9,570	     0	     0	     0	     0		  13.7	      9,485	  0	  0	  0	  0
			  --------------------------------------------------------------------------------------------------------------------

Dynamic Remastering Statistics		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Affinity Objects - Affinity objects remastered at the begin/end snapshot
-> Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot

				   Counts per Ops					 Time per Ops (seconds) 			 Affinity Objects		  Read Mostly Objects
		---------------------------------------------------   -----------------------------------------------------------   -------------------------	--------------------------------------
     Remaster	  Remastered Replay Locks Replay Locks	  Resources														    Begin
  I#	  Ops	     Objects	 Received	  Sent	    Cleaned    Remaster    Freeze   Cleanup    Replay  Fixwrite      Sync	   Begin	  End	       Begin (persistent)	   End
---- --------	------------ ------------ ------------ ------------   --------- --------- --------- --------- --------- ---------   ------------ ------------	------------ ------------ ------------
   1	    1		 7.0	      0.0	   0.0		0.0	   0.94      0.08      0.01	 0.03	   0.01      0.79	     135	  132		  65		0	    65
   2	    1		 7.0	      0.0	   0.0		0.0	   0.82      0.08      0.01	 0.01	   0.01      0.58	      63	   61		  65		0	    65
 ~~~ ~~~~~~~~	~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~   ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~ ~~~~~~~~~   ~~~~~~~~~~~~ ~~~~~~~~~~~~	~~~~~~~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~~~
 Avg	    1		 7.0	      0.0	   0.0		0.0	   0.88      0.08      0.01	 0.02	   0.01      0.69	      99	   97		  65		0	    65
 Max				      0.0	   0.0		0.0	   0.94      0.08      0.01	 0.03	   0.01      0.79	     135	  132		  65		0	    65
			  --------------------------------------------------------------------------------------------------------------------


SQL ordered by Elapsed Time (Global)	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Captured SQL account for   90.2% of Total DB Time (s):	   65,033
-> Captured PL/SQL account for	 40.2% of Total DB Time (s):	      65,033

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	  Elapsed (s)	  CPU (s)  IOWait (s)		Gets	    Reads	  Rows Cluster (s)	  Execs     Elapsed (s)     CPU (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	DB time   DB CPU  IO Wait     Gets    Reads  Cluster	Execs
-------------	------------- ----------- ----------- -------------- ------------ ------------ ----------- ------------   ------------- ----------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	    39,035.02	 3,816.71    3,050.82	  15,337,053	8,718,740    3,062,533	 13,124.27    3,062,456 	   0.01        0.00	   0.00 	   5.0		2.8	     1.0	0.00	   60.0     67.0      0.3     38.3     39.6	41.3	 40.3
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	    19,495.06	   644.64      345.83	   2,148,157	  962,854    1,020,999	  3,734.45	340,333 	   0.06        0.00	   0.00 	   6.3		2.8	     3.0	0.01	   30.0     11.3      0.0      5.4	4.4	11.8	  4.5
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

5arf1acfkxs97	       252.29	    10.44	15.92	      34,004	   19,136	     1	    188.16	      1 	 252.29       10.44	  15.92       34,004.0	   19,136.0	     1.0      188.16	    0.4      0.2      0.0      0.1	0.1	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '11'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

8fg5cq0nbygpt	       251.43	     8.96	12.45	      28,983	   16,469	     1	    198.98	      1 	 251.43        8.96	  12.45       28,983.0	   16,469.0	     1.0      198.98	    0.4      0.2      0.0      0.1	0.1	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

7drkmz76wk052	       251.35	    10.50	15.12	      34,508	   19,708	     1	    191.42	      1 	 251.35       10.50	  15.12       34,508.0	   19,708.0	     1.0      191.42	    0.4      0.2      0.0      0.1	0.1	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '45'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

9ssvtqp2k6160	       251.22	    10.28	14.10	      31,911	   19,048	     1	    182.66	      1 	 251.22       10.28	  14.10       31,911.0	   19,048.0	     1.0      182.66	    0.4      0.2      0.0      0.1	0.1	 0.6	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '82'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

g86sg3wychh60	       250.80	    13.30	33.39	      83,752	   47,832	     1	     85.97	      1 	 250.80       13.30	  33.39       83,752.0	   47,832.0	     1.0       85.97	    0.4      0.2      0.0      0.2	0.2	 0.3	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '54'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

anaswt0rrkktj	       250.77	    15.47	38.71	      97,014	   57,117	     1	     91.51	      1 	 250.77       15.47	  38.71       97,014.0	   57,117.0	     1.0       91.51	    0.4      0.3      0.0      0.2	0.3	 0.3	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '104'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

1z43m6frrngsy	       250.74	    15.32	37.18	      94,336	   55,633	     1	    108.58	      1 	 250.74       15.32	  37.18       94,336.0	   55,633.0	     1.0      108.58	    0.4      0.3      0.0      0.2	0.3	 0.3	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '103'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

3m5q54b1a187h	       250.71	    16.88	42.71	     114,162	   63,085	     1	     90.62	      1 	 250.71       16.88	  42.71      114,162.0	   63,085.0	     1.0       90.62	    0.4      0.3      0.0      0.3	0.3	 0.3	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '83'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by CPU Time (Global)	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Captured SQL account for   78.6% of Total CPU Time (s):	     5,697
-> Captured PL/SQL account for	 52.9% of Total CPU Time (s):		5,697

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	    CPU (s)   Elapsed (s)  IOWait (s)		Gets	    Reads	  Rows Cluster (s)	  Execs       CPU (s)	Elapsed (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	 DB CPU  DB time  IO Wait     Gets    Reads  Cluster	Execs
-------------	----------- ------------- ----------- -------------- ------------ ------------ ----------- ------------   ----------- ------------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	   3,816.71	39,035.02    3,050.82	  15,337,053	8,718,740    3,062,533	 13,124.27    3,062,456 	 0.00	       0.01	   0.00 	   5.0		2.8	     1.0	0.00	   67.0     60.0     27.0     38.3     39.6	41.3	 40.3
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	     644.64	19,495.06      345.83	   2,148,157	  962,854    1,020,999	  3,734.45	340,333 	 0.00	       0.06	   0.00 	   6.3		2.8	     3.0	0.01	   11.3     30.0      3.1      5.4	4.4	11.8	  4.5
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

7kcm0mhxqy5q8	      78.69	   220.00      105.37	     800,126	  359,510	     1	      1.01	      1 	78.69	     220.00	 105.37      800,126.0	  359,510.0	     1.0	1.01	    1.4      0.3      0.9      2.0	1.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

9v83s8vqfv1d6	      76.58	   221.01      106.14	     736,208	  356,686	     1	      0.01	      1 	76.58	     221.01	 106.14      736,208.0	  356,686.0	     1.0	0.01	    1.3      0.3      0.9      1.8	1.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

ddk08qkf81zw2	      75.32	   220.97      105.55	     709,473	  355,268	     1	      0.18	      1 	75.32	     220.97	 105.55      709,473.0	  355,268.0	     1.0	0.18	    1.3      0.3      0.9      1.8	1.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

fcfyvfu5jmtsj	      74.30	   219.93      105.43	     689,514	  348,698	     1	      0.00	      1 	74.30	     219.93	 105.43      689,514.0	  348,698.0	     1.0	0.00	    1.3      0.3      0.9      1.7	1.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

1b74aw70y48yn	      73.89	   220.93      103.30	     699,935	  342,604	     1	      0.01	      1 	73.89	     220.93	 103.30      699,935.0	  342,604.0	     1.0	0.01	    1.3      0.3      0.9      1.7	1.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

7w4ajz9mh4684	      72.19	   220.93      103.73	     655,710	  340,739	     1	      8.22	      1 	72.19	     220.93	 103.73      655,710.0	  340,739.0	     1.0	8.22	    1.3      0.3      0.9      1.6	1.5	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

38r80y2wpq2ma	      72.05	   219.98      103.16	     654,914	  338,924	     1	     10.43	      1 	72.05	     219.98	 103.16      654,914.0	  338,924.0	     1.0       10.43	    1.3      0.3      0.9      1.6	1.5	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

71f07h4b84yt2	      70.17	   219.93	98.20	     696,304	  321,693	     1	      5.13	      1 	70.17	     219.93	  98.20      696,304.0	  321,693.0	     1.0	5.13	    1.2      0.3      0.9      1.7	1.5	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by User I/O Time (Global)	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Captured SQL account for   30.1% of Total User I/O Wait Time (s):	      11,302
-> Captured PL/SQL account for	 50.7% of Total User I/O Wait Time (s): 	 11,302

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	 IOWait (s)   Elapsed (s)     CPU (s)		Gets	    Reads	  Rows Cluster (s)	  Execs    IOWait (s)	Elapsed (s)	CPU (s) 	  Gets	      Reads	    Rows Cluster (s)	IO Wait  DB time   DB CPU     Gets    Reads  Cluster	Execs
-------------	----------- ------------- ----------- -------------- ------------ ------------ ----------- ------------   ----------- ------------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	   3,050.82	39,035.02    3,816.71	  15,337,053	8,718,740    3,062,533	 13,124.27    3,062,456 	 0.00	       0.01	   0.00 	   5.0		2.8	     1.0	0.00	   27.0     60.0     67.0     38.3     39.6	41.3	 40.3
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	     345.83	19,495.06      644.64	   2,148,157	  962,854    1,020,999	  3,734.45	340,333 	 0.00	       0.06	   0.00 	   6.3		2.8	     3.0	0.01	    3.1     30.0     11.3      5.4	4.4	11.8	  4.5
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

9v83s8vqfv1d6	     106.14	   221.01	76.58	     736,208	  356,686	     1	      0.01	      1        106.14	     221.01	  76.58      736,208.0	  356,686.0	     1.0	0.01	    0.9      0.3      1.3      1.8	1.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

ddk08qkf81zw2	     105.55	   220.97	75.32	     709,473	  355,268	     1	      0.18	      1        105.55	     220.97	  75.32      709,473.0	  355,268.0	     1.0	0.18	    0.9      0.3      1.3      1.8	1.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

fcfyvfu5jmtsj	     105.43	   219.93	74.30	     689,514	  348,698	     1	      0.00	      1        105.43	     219.93	  74.30      689,514.0	  348,698.0	     1.0	0.00	    0.9      0.3      1.3      1.7	1.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

7kcm0mhxqy5q8	     105.37	   220.00	78.69	     800,126	  359,510	     1	      1.01	      1        105.37	     220.00	  78.69      800,126.0	  359,510.0	     1.0	1.01	    0.9      0.3      1.4      2.0	1.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

7w4ajz9mh4684	     103.73	   220.93	72.19	     655,710	  340,739	     1	      8.22	      1        103.73	     220.93	  72.19      655,710.0	  340,739.0	     1.0	8.22	    0.9      0.3      1.3      1.6	1.5	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

1b74aw70y48yn	     103.30	   220.93	73.89	     699,935	  342,604	     1	      0.01	      1        103.30	     220.93	  73.89      699,935.0	  342,604.0	     1.0	0.01	    0.9      0.3      1.3      1.7	1.6	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

38r80y2wpq2ma	     103.16	   219.98	72.05	     654,914	  338,924	     1	     10.43	      1        103.16	     219.98	  72.05      654,914.0	  338,924.0	     1.0       10.43	    0.9      0.3      1.3      1.6	1.5	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

71f07h4b84yt2	      98.20	   219.93	70.17	     696,304	  321,693	     1	      5.13	      1 	98.20	     219.93	  70.17      696,304.0	  321,693.0	     1.0	5.13	    0.9      0.3      1.2      1.7	1.5	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Gets (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Total Buffer Gets:	   40,065,632
-> Captured SQL account for   43.9% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id		  Gets	      Reads   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)	  Execs 	    Gets	Reads	Elapsed (s)	CPU (s)  IOWait (s)	    Rows Cluster (s)	   Gets    Reads  DB time   DB CPU  IO Wait  Cluster	Execs
-------------	-------------- ------------ ------------- ----------- ----------- ------------ ----------- ------------   -------------- ------------ ------------- ----------- ----------- ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	    15,337,053	  8,718,740	39,035.02    3,816.71	 3,050.82    3,062,533	 13,124.27    3,062,456 	     5.0	  2.8	       0.01	   0.00        0.00	     1.0	0.00	   38.3     39.6     60.0     67.0     27.0	41.3	 40.3
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	     2,148,157	    962,854	19,495.06      644.64	   345.83    1,020,999	  3,734.45	340,333 	     6.3	  2.8	       0.06	   0.00        0.00	     3.0	0.01	    5.4      4.4     30.0     11.3	3.1	11.8	  4.5
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

7kcm0mhxqy5q8	       800,126	    359,510	   220.00	78.69	   105.37	     1	      1.01	      1        800,126.0    359,510.0	     220.00	  78.69      105.37	     1.0	1.01	    2.0      1.6      0.3      1.4	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

9v83s8vqfv1d6	       736,208	    356,686	   221.01	76.58	   106.14	     1	      0.01	      1        736,208.0    356,686.0	     221.01	  76.58      106.14	     1.0	0.01	    1.8      1.6      0.3      1.3	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

ddk08qkf81zw2	       709,473	    355,268	   220.97	75.32	   105.55	     1	      0.18	      1        709,473.0    355,268.0	     220.97	  75.32      105.55	     1.0	0.18	    1.8      1.6      0.3      1.3	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

1b74aw70y48yn	       699,935	    342,604	   220.93	73.89	   103.30	     1	      0.01	      1        699,935.0    342,604.0	     220.93	  73.89      103.30	     1.0	0.01	    1.7      1.6      0.3      1.3	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

71f07h4b84yt2	       696,304	    321,693	   219.93	70.17	    98.20	     1	      5.13	      1        696,304.0    321,693.0	     219.93	  70.17       98.20	     1.0	5.13	    1.7      1.5      0.3      1.2	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '73'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

fcfyvfu5jmtsj	       689,514	    348,698	   219.93	74.30	   105.43	     1	      0.00	      1        689,514.0    348,698.0	     219.93	  74.30      105.43	     1.0	0.00	    1.7      1.6      0.3      1.3	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

ds7scgmy0unq5	       657,589	    329,515	   220.96	70.11	    99.51	     1	      0.01	      1        657,589.0    329,515.0	     220.96	  70.11       99.51	     1.0	0.01	    1.6      1.5      0.3      1.2	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '171'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

7w4ajz9mh4684	       655,710	    340,739	   220.93	72.19	   103.73	     1	      8.22	      1        655,710.0    340,739.0	     220.93	  72.19      103.73	     1.0	8.22	    1.6      1.5      0.3      1.3	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Reads (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Total Disk Reads:	  22,022,883
-> Captured SQL account for   44.0% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	       Reads	       Gets   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)	  Execs 	 Reads		 Gets	Elapsed (s)	CPU (s)  IOWait (s)	    Rows Cluster (s)	  Reads     Gets  DB time   DB CPU  IO Wait  Cluster	Execs
-------------	------------ -------------- ------------- ----------- ----------- ------------ ----------- ------------   ------------ -------------- ------------- ----------- ----------- ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	   8,718,740	 15,337,053	39,035.02    3,816.71	 3,050.82    3,062,533	 13,124.27    3,062,456 	   2.8		  5.0	       0.01	   0.00        0.00	     1.0	0.00	   39.6     38.3     60.0     67.0     27.0	41.3	 40.3
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	     962,854	  2,148,157	19,495.06      644.64	   345.83    1,020,999	  3,734.45	340,333 	   2.8		  6.3	       0.06	   0.00        0.00	     3.0	0.01	    4.4      5.4     30.0     11.3	3.1	11.8	  4.5
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

7kcm0mhxqy5q8	     359,510	    800,126	   220.00	78.69	   105.37	     1	      1.01	      1      359,510.0	    800,126.0	     220.00	  78.69      105.37	     1.0	1.01	    1.6      2.0      0.3      1.4	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

9v83s8vqfv1d6	     356,686	    736,208	   221.01	76.58	   106.14	     1	      0.01	      1      356,686.0	    736,208.0	     221.01	  76.58      106.14	     1.0	0.01	    1.6      1.8      0.3      1.3	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

ddk08qkf81zw2	     355,268	    709,473	   220.97	75.32	   105.55	     1	      0.18	      1      355,268.0	    709,473.0	     220.97	  75.32      105.55	     1.0	0.18	    1.6      1.8      0.3      1.3	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

fcfyvfu5jmtsj	     348,698	    689,514	   219.93	74.30	   105.43	     1	      0.00	      1      348,698.0	    689,514.0	     219.93	  74.30      105.43	     1.0	0.00	    1.6      1.7      0.3      1.3	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

1b74aw70y48yn	     342,604	    699,935	   220.93	73.89	   103.30	     1	      0.01	      1      342,604.0	    699,935.0	     220.93	  73.89      103.30	     1.0	0.01	    1.6      1.7      0.3      1.3	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

7w4ajz9mh4684	     340,739	    655,710	   220.93	72.19	   103.73	     1	      8.22	      1      340,739.0	    655,710.0	     220.93	  72.19      103.73	     1.0	8.22	    1.5      1.6      0.3      1.3	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

38r80y2wpq2ma	     338,924	    654,914	   219.98	72.05	   103.16	     1	     10.43	      1      338,924.0	    654,914.0	     219.98	  72.05      103.16	     1.0       10.43	    1.5      1.6      0.3      1.3	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

ds7scgmy0unq5	     329,515	    657,589	   220.96	70.11	    99.51	     1	      0.01	      1      329,515.0	    657,589.0	     220.96	  70.11       99.51	     1.0	0.01	    1.5      1.6      0.3      1.2	0.9	 0.0	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '171'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by UnOptimized Read Requests (Global)DB/Inst: P30SDB/p30sdb1  Snap
-> Total Physical Read Requests:      22,020,196
-> Captured SQL account for    0.1% of Total
-> Total UnOptimized Read Requests:	 22,020,196
-> Captured SQL account for    0.1% of Total
-> Total Optimized Read Requests:		1
-> Captured SQL account for    0.0% of Total

								       Total													 Per Execution									    Percentage of Total
		------------------------------------------------------------------------------------------------------------------   -----------------------------------------------------------------------------------------------------   -----------------------------------------------------------------
   SQL Id	 UnOptimized	 Requests	 Reads	 Elapsed (s)	 CPU (s)  IOWait (s)	     Rows Cluster (s)	     Execs    UnOptimized     Requests	      Reads   Elapsed (s)     CPU (s)  IOWait (s)	  Rows Cluster (s)   UnOptimized Requests  Reads DB time DB CPU IO Wait Cluster  Execs
-------------	------------ ------------ ------------ ------------- ----------- ----------- ------------ ----------- ------------   ------------ ------------ ------------ ------------- ----------- ----------- ------------ -----------   ----------- -------- ------ ------- ------ ------- ------- ------
7kcm0mhxqy5q8	     359,510	  359,510      359,510	      220.00	   78.69      105.37		1	 1.01		 1	359,510.0    359,510.0	  359,510.0	   220.00	78.69	   105.37	   1.0	      1.01	     1.6      1.6    1.6     0.3    1.4     0.9     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '57'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

9v83s8vqfv1d6	     356,686	  356,686      356,686	      221.01	   76.58      106.14		1	 0.01		 1	356,686.0    356,686.0	  356,686.0	   221.01	76.58	   106.14	   1.0	      0.01	     1.6      1.6    1.6     0.3    1.3     0.9     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '7'; v_update_pct PLS_INTEGER :=
'10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
'300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_s
tress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_hot

ddk08qkf81zw2	     355,268	  355,268      355,268	      220.97	   75.32      105.55		1	 0.18		 1	355,268.0    355,268.0	  355,268.0	   220.97	75.32	   105.55	   1.0	      0.18	     1.6      1.6    1.6     0.3    1.3     0.9     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '176'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

fcfyvfu5jmtsj	     348,698	  348,698      348,698	      219.93	   74.30      105.43		1	 0.00		 1	348,698.0    348,698.0	  348,698.0	   219.93	74.30	   105.43	   1.0	      0.00	     1.6      1.6    1.6     0.3    1.3     0.9     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '186'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

1b74aw70y48yn	     342,604	  342,604      342,604	      220.93	   73.89      103.30		1	 0.01		 1	342,604.0    342,604.0	  342,604.0	   220.93	73.89	   103.30	   1.0	      0.01	     1.6      1.6    1.6     0.3    1.3     0.9     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '67'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

7w4ajz9mh4684	     340,739	  340,739      340,739	      220.93	   72.19      103.73		1	 8.22		 1	340,739.0    340,739.0	  340,739.0	   220.93	72.19	   103.73	   1.0	      8.22	     1.5      1.5    1.5     0.3    1.3     0.9     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '48'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

38r80y2wpq2ma	     338,924	  338,924      338,924	      219.98	   72.05      103.16		1	10.43		 1	338,924.0    338,924.0	  338,924.0	   219.98	72.05	   103.16	   1.0	     10.43	     1.5      1.5    1.5     0.3    1.3     0.9     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '46'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

ds7scgmy0unq5	     329,515	  329,515      329,515	      220.96	   70.11       99.51		1	 0.01		 1	329,515.0    329,515.0	  329,515.0	   220.96	70.11	    99.51	   1.0	      0.01	     1.5      1.5    1.5     0.3    1.2     0.9     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '171'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

czhh6tvvf96yz	     327,622	  327,622      327,622	      220.93	   70.04      100.24		1	 3.74		 1	327,622.0    327,622.0	  327,622.0	   220.93	70.04	   100.24	   1.0	      3.74	     1.5      1.5    1.5     0.3    1.2     0.9     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '43'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

2sff4nbj564pf	     323,453	  323,453      323,453	      219.95	   68.44       98.66		1	 0.00		 1	323,453.0    323,453.0	  323,453.0	   219.95	68.44	    98.66	   1.0	      0.00	     1.5      1.5    1.5     0.3    1.2     0.9     0.0    0.0
DECLARE v_default_schema_number PLS_INTEGER := '177'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Executions (Global)	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Total Executions:	   7,591,643
-> Captured SQL account for   45.0% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	       Execs   Elapsed (s)     CPU (s)	IOWait (s)	     Gets	 Reads	       Rows Cluster (s)     Elapsed (s)     CPU (s)  IOWait (s) 	  Gets	      Reads	    Rows Cluster (s)	  Execs  DB time   DB CPU  IO Wait     Gets    Reads  Cluster
-------------	------------ ------------- ----------- ----------- -------------- ------------ ------------ -----------   ------------- ----------- ----------- -------------- ------------ ------------ -----------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	   3,062,456	 39,035.02    3,816.71	  3,050.82     15,337,053    8,718,740	  3,062,533   13,124.27 	   0.01        0.00	   0.00 	   5.0		2.8	     1.0	0.00	   40.3     60.0     67.0     27.0     38.3	39.6	 41.3
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	     340,333	 19,495.06	644.64	    345.83	2,148,157      962,854	  1,020,999    3,734.45 	   0.06        0.00	   0.00 	   6.3		2.8	     3.0	0.01	    4.5     30.0     11.3      3.1	5.4	 4.4	 11.8
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

24djtk7r8fz33	       2,550	      0.18	  0.16	      0.00	    7,738	     0	      2,547	   0.00 	   0.00        0.00	   0.00 	   3.0		0.0	     1.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
update svcobj_access$ set accesses = :5, inc_no = :6 where name = :1 AND pdb = :
2 AND tsn = :3 AND objid = :4

87gaftwrm2h68	       2,541	      0.19	  0.09	      0.02	    5,240	    26		158	   0.08 	   0.00        0.00	   0.00 	   2.1		0.0	     0.1	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select o.owner#,o.name,o.namespace,o.remoteowner,o.linkname,o.subname from obj$
o where o.obj#=:1

acmvv4fhdc9zh		 651	      1.49	  0.12	      0.10	    2,302	   144		352	   1.29 	   0.00        0.00	   0.00 	   3.5		0.2	     0.5	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select obj#,type#,ctime,mtime,stime, status, dataobj#, flags, oid$, spare1, spar
e2, spare3, signature, spare7, spare8, spare9, nvl(dflcollid, 16382), creappid,
creverid, modappid, modverid, crepatchid, modpatchid from obj$ where owner#=:1 a
nd name=:2 and namespace=:3 and remoteowner is null and linkname is null and sub

0gx3b09qrx9f5		 384	      0.04	  0.02	      0.01	      790	    12		 16	   0.01 	   0.00        0.00	   0.00 	   2.1		0.0	     0.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select obj#,index# from oid$ where user#=:1 and oid$=:2

fn5s5p6hr6702		 282	      1.16	  0.05	      0.01	    1,824	    22		282	   0.85 	   0.00        0.00	   0.00 	   6.5		0.1	     1.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
INSERT INTO wri$_adv_message_groups (task_id,id,seq,message#,fac,hdr,lm,nl,p1,p2
,p3,p4,p5) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13)

04kug40zbu4dm		 265	      0.03	  0.02	      0.00	    2,120	     0		  0	   0.00 	   0.00        0.00	   0.00 	   8.0		0.0	     0.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
select policy#, action# from aud_object_opt$ where object# = :1 and type = 2

9babjv8yq8ru3		 256	      3.06	  0.37	      0.06	    1,018	    63		256	   0.30 	   0.01        0.00	   0.00 	   4.0		0.2	     1.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
BEGIN DBMS_OUTPUT.GET_LINES(:LINES, :NUMLINES); END;

f80h0xb1qvbsk		 242	      0.35	  0.05	      0.00	      119	     2		242	   0.00 	   0.00        0.00	   0.00 	   0.5		0.0	     1.0	0.00	    0.0      0.0      0.0      0.0	0.0	 0.0	  0.0
SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual

			  --------------------------------------------------------------------------------------------------------------------

SQL ordered by Cluster Wait Time (Global)DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Total Cluster Wait Time (s): 	 31,746
-> Captured SQL account for   53.1% of Total

								 Total												 Per Execution								     Percentage of Total
		-------------------------------------------------------------------------------------------------------   ------------------------------------------------------------------------------------------   --------------------------------------------------------------
   SQL Id	Cluster (s)   Elapsed (s)     CPU (s)  IOWait (s)	    Gets	Reads	      Rows	  Execs   Cluster (s)	Elapsed (s)	CPU (s)  IOWait (s)	      Gets	  Reads 	Rows	Cluster  DB time   DB CPU     Gets  IO Wait    Reads	Execs
-------------	----------- ------------- ----------- ----------- -------------- ------------ ------------ ------------   ----------- ------------- ----------- ----------- -------------- ------------ ------------   -------- -------- -------- -------- -------- -------- --------
bhdvtsvjhgvrh	  13,124.27	39,035.02    3,816.71	 3,050.82     15,337,053    8,718,740	 3,062,533    3,062,456 	 0.00	       0.01	   0.00        0.00	       5.0	    2.8 	 1.0	   41.3     60.0     67.0     27.0     38.3	39.6	 40.3
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )

35dumc2tpr9dv	   3,734.45	19,495.06      644.64	   345.83      2,148,157      962,854	 1,020,999	340,333 	 0.01	       0.06	   0.00        0.00	       6.3	    2.8 	 3.0	   11.8     30.0     11.3      3.1	5.4	 4.4	  4.5
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )

8fg5cq0nbygpt	     198.98	   251.43	 8.96	    12.45	  28,983       16,469		 1	      1        198.98	     251.43	   8.96       12.45	  28,983.0     16,469.0 	 1.0	    0.6      0.4      0.2      0.1	0.1	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '80'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

9udhpyj6s7uqj	     197.92	   250.53	 9.76	    13.60	  32,957       18,763		 1	      1        197.92	     250.53	   9.76       13.60	  32,957.0     18,763.0 	 1.0	    0.6      0.4      0.2      0.1	0.1	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '86'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

088xwjaryshvr	     192.20	   250.35	 8.71	    12.79	  27,736       15,887		 1	      1        192.20	     250.35	   8.71       12.79	  27,736.0     15,887.0 	 1.0	    0.6      0.4      0.2      0.1	0.1	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '77'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

37j3jp5dz0b0t	     191.43	   221.91	 8.78	     7.61	  26,688       18,337		 1	      1        191.43	     221.91	   8.78        7.61	  26,688.0     18,337.0 	 1.0	    0.6      0.3      0.2      0.1	0.1	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '145'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

7drkmz76wk052	     191.42	   251.35	10.50	    15.12	  34,508       19,708		 1	      1        191.42	     251.35	  10.50       15.12	  34,508.0     19,708.0 	 1.0	    0.6      0.4      0.2      0.1	0.1	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '45'; v_update_pct PLS_INTEGER :=
 '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :=
 '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo_
stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_ho

4zttz5yb0wfmw	     191.20	   221.90	 9.94	     8.61	  30,969       21,224		 1	      1        191.20	     221.90	   9.94        8.61	  30,969.0     21,224.0 	 1.0	    0.6      0.3      0.2      0.1	0.1	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '170'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

6pqjm0dp8bnky	     190.68	   222.43	 9.28	     8.18	  28,861       19,948		 1	      1        190.68	     222.43	   9.28        8.18	  28,861.0     19,948.0 	 1.0	    0.6      0.3      0.2      0.1	0.1	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '149'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

5zuc26whzgn7r	     189.81	   222.45	 9.19	     8.74	  31,481       21,594		 1	      1        189.81	     222.45	   9.19        8.74	  31,481.0     21,594.0 	 1.0	    0.6      0.3      0.2      0.1	0.1	 0.1	  0.0
DECLARE v_default_schema_number PLS_INTEGER := '150'; v_update_pct PLS_INTEGER :
= '10'; v_max_loop_iterations PLS_INTEGER := '0'; v_seconds_to_run PLS_INTEGER :
= '300'; v_scale PLS_INTEGER := '32768'; v_work_unit PLS_INTEGER := '4' ; v_redo
_stress VARCHAR2(12) := 'LITE'; v_hot_schema_modulus PLS_INTEGER := '0'; v_do_h

			  --------------------------------------------------------------------------------------------------------------------


System Statistics (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
ASSM cbk:blocks examined						  1,631 	   4.5		0.0		2.2	      0.4	    1.9 	  2.6
ASSM cbk:blocks marked full						    328 	   0.9		0.0		0.5	      0.0	    0.4 	  0.5
ASSM gsp:L1 bitmaps examined						  1,340 	   3.7		0.0		1.8	      0.4	    1.5 	  2.2
ASSM gsp:L2 bitmap full 						     20 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:L2 bitmaps examined						    168 	   0.5		0.0		0.2	      0.2	    0.1 	  0.3
ASSM gsp:Search all							     19 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:Search hint							     21 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
ASSM gsp:Search steal							      3 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
ASSM gsp:bump HWM							      3 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
ASSM gsp:get free block 						  1,304 	   3.6		0.0		1.8	      0.4	    1.5 	  2.1
ASSM gsp:get free data block						  1,099 	   3.0		0.0		1.5	      0.5	    1.2 	  1.8
ASSM gsp:get free index block						    205 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
ASSM gsp:good hint							  1,176 	   3.2		0.0		1.6	      0.3	    1.4 	  1.8
ASSM rsv:fill reserve							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
ASSM wasted db state change						      3 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
Batched IO (bound) vector count 					    980 	   2.7		0.0		1.3	      0.5	    1.0 	  1.7
Batched IO block miss count					      6,234,393       17,173.1		8.2	    8,586.5	    564.6	8,187.3       8,985.8
Batched IO double miss count					      6,234,060       17,172.2		8.2	    8,586.1	    564.8	8,186.7       8,985.4
Batched IO same unit count						    222 	   0.6		0.0		0.3	      0.1	    0.2 	  0.4
Batched IO single block count					      6,235,043       17,174.9		8.2	    8,587.4	    564.3	8,188.4       8,986.5
Batched IO vector block count						      4 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
Batched IO vector read count						      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
Block Cleanout Optim referenced 					     89 	   0.2		0.0		0.1	      0.1	    0.1 	  0.2
CCursor + sql area evicted						     61 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
CPU used by this session						685,160        1,887.3		0.9	      943.7	     54.1	  905.4 	981.9
CPU used when call started						678,326        1,868.5		0.9	      934.2	     29.5	  913.4 	955.1
CR blocks created							    147 	   0.4		0.0		0.2	      0.1	    0.1 	  0.3
Cached Commit SCN referenced					      6,190,779       17,053.0		8.1	    8,526.5	  2,954.3	6,437.5      10,615.5
Client Advertised Receive Window					  1,799 	   5.0		0.0		2.5	      0.3	    2.3 	  2.7
Client Advertised Send Window						  1,799 	   5.0		0.0		2.5	      0.3	    2.3 	  2.7
Client Path Maximum Transmission Unit(MTU)			      9,216,380       25,387.4	       12.1	   12,693.7	 17,279.5	  475.3      24,912.1
Client Send Congestion Window						  2,522 	   6.9		0.0		3.5	      0.5	    3.1 	  3.8
Client Time (usec) Last Ack Received					  1,082 	   3.0		0.0		1.5	      1.9	    0.1 	  2.8
Client Time (usec) Last Data Received					    113 	   0.3		0.0		0.2	      0.0	    0.1 	  0.2
Client Time (usec) Last Data Sent					  3,684 	  10.1		0.0		5.1	      4.6	    1.8 	  8.3
Client Time (usec) Round Trip Time					981,426        2,703.4		1.3	    1,351.7	    235.4	1,185.3       1,518.1
Client Time (usec) Round Trip Time Variance			      1,482,317        4,083.2		1.9	    2,041.6	    495.5	1,691.2       2,391.9
Client Total Bytes Acked					      4,055,711       11,171.8		5.3	    5,585.9	    607.9	5,156.0       6,015.7
Client Total Bytes Received					      1,570,932        4,327.2		2.1	    2,163.6	    228.4	2,002.1       2,325.1
Client Total Number of Retransmitted Packets				     24 	   0.1		0.0		0.1	      N/A	    0.1 	  0.1
Commit SCN cached							      3 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
DB time 							      7,701,995       21,215.7	       10.1	   10,607.9	  1,154.8	9,791.3      11,424.4
DBWR checkpoint buffers written 					  1,660 	   4.6		0.0		2.3	      0.6	    1.9 	  2.7
DBWR checkpoints							    238 	   0.7		0.0		0.3	      0.0	    0.3 	  0.4
DBWR fusion writes							    198 	   0.5		0.0		0.3	      0.2	    0.1 	  0.4
DBWR object drop buffers written					     92 	   0.3		0.0		0.1	      0.0	    0.1 	  0.1
DBWR transaction table writes						  4,067 	  11.2		0.0		5.6	      0.8	    5.0 	  6.2
DBWR undo block writes							169,388 	 466.6		0.2	      233.3	     11.4	  225.2 	241.3
DFO trees parallelized							     81 	   0.2		0.0		0.1	      0.1	    0.0 	  0.2
Effective IO time							  4,331 	  11.9		0.0	       11.9	      N/A	   11.9 	 11.9
HSC Heap Segment Block Changes					      2,273,708        6,263.1		3.0	    3,131.5	     12.2	3,122.9       3,140.2
Heap Segment Array Inserts						    369 	   1.0		0.0		0.5	      0.0	    0.5 	  0.5
Heap Segment Array Updates						     12 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
KTFB alloc req								    371 	   1.0		0.0		0.5	      0.2	    0.4 	  0.7
KTFB alloc space (block)					    291,176,448      802,066.2	      382.7	  401,033.1	 11,367.0     392,995.4     409,070.8
KTFB alloc time (ms)						     68,767,455      189,426.5	       90.4	   94,713.2	106,193.6      19,623.0     169,803.5
KTFB apply req								    397 	   1.1		0.0		0.5	      0.3	    0.4 	  0.7
KTFB apply time (ms)							 11,592 	  31.9		0.0	       16.0	      8.5	   10.0 	 22.0
KTFB free req								     29 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
KTFB free space (block) 						    952 	   2.6		0.0		1.3	      1.2	    0.5 	  2.2

System Statistics (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
KTFB free time (ms)							    597 	   1.6		0.0		0.8	      0.0	    0.8 	  0.9
Number of read IOs issued						      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
PX local messages recv'd						  1,144 	   3.2		0.0		1.6	      1.5	    0.5 	  2.6
PX local messages sent							  1,144 	   3.2		0.0		1.6	      1.5	    0.5 	  2.6
PX remote messages recv'd						  1,221 	   3.4		0.0		1.7	      0.5	    1.3 	  2.1
PX remote messages sent 						  1,233 	   3.4		0.0		1.7	      0.6	    1.3 	  2.1
Parallel operations not downgraded					    108 	   0.3		0.0		0.1	      0.2	    0.0 	  0.3
Requests to/from client 						    851 	   2.3		0.0		1.2	      0.2	    1.0 	  1.3
SMON posted for undo segment shrink					      7 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
SQL*Net roundtrips to/from client					    595 	   1.6		0.0		0.8	      0.2	    0.7 	  1.0
active txn count during cleanout					    470 	   1.3		0.0		0.6	      0.0	    0.6 	  0.7
application wait time							 11,865 	  32.7		0.0	       16.3	     20.4	    1.9 	 30.7
background checkpoints completed					      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
background timeouts							  7,068 	  19.5		0.0		9.7	      0.3	    9.5 	  9.9
blocks cleaned out using minact 				      1,711,265        4,713.8		2.2	    2,356.9	    202.3	2,213.9       2,499.9
branch node splits							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
buffer is not pinned count					     47,334,137      130,385.2	       62.2	   65,192.6	  1,167.4      64,367.2      66,018.1
buffer is pinned count						     15,980,093       44,018.3	       21.0	   22,009.1	     21.2      21,994.1      22,024.1
bytes received via SQL*Net from client					482,876        1,330.1		0.6	      665.1	    473.3	  330.4 	999.7
bytes sent via SQL*Net to client					151,224 	 416.6		0.2	      208.3	     35.6	  183.1 	233.4
calls to get snapshot scn: kcmgss				      8,411,845       23,171.0	       11.1	   11,585.5	     46.6      11,552.5      11,618.5
calls to kcmgas 							934,472        2,574.1		1.2	    1,287.0	     39.3	1,259.3       1,314.8
calls to kcmgcs 							  7,455 	  20.5		0.0	       10.3	      2.4	    8.6 	 12.0
cell physical IO interconnect bytes				226,874,099,200  624,940,804.3	  298,190.9   3.1247040E+08   6,330,939.6 3.0799375E+08 3.1694705E+08
change write time							  5,002 	  13.8		0.0		6.9	      0.6	    6.4 	  7.3
cleanout - number of ktugct calls					  1,883 	   5.2		0.0		2.6	      0.1	    2.5 	  2.7
cleanouts and rollbacks - consistent read gets				      3 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
cleanouts only - consistent read gets					  1,177 	   3.2		0.0		1.6	      0.2	    1.5 	  1.8
cluster key scan block gets						  3,036 	   8.4		0.0		4.2	      5.3	    0.4 	  7.9
cluster key scans							  2,007 	   5.5		0.0		2.8	      3.3	    0.4 	  5.1
cluster wait time						      3,116,384        8,584.3		4.1	    4,292.1	  1,233.6	3,419.8       5,164.5
commit batch/immediate performed					     12 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit batch/immediate requested					     12 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanout failures: block lost					    354 	   1.0		0.0		0.5	      0.1	    0.4 	  0.6
commit cleanout failures: buffer being written				  1,584 	   4.4		0.0		2.2	      0.3	    2.0 	  2.4
commit cleanout failures: callback failure				     19 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
commit cleanouts						      2,278,532        6,276.4		3.0	    3,138.2	     22.0	3,122.6       3,153.8
commit cleanouts successfully completed 			      2,276,575        6,271.0		3.0	    3,135.5	     21.6	3,120.2       3,150.8
commit immediate performed						     12 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit immediate requested						     12 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
commit txn count during cleanout					  1,569 	   4.3		0.0		2.2	      0.1	    2.1 	  2.2
concurrency wait time							  9,258 	  25.5		0.0	       12.8	      8.1	    7.0 	 18.5
consistent changes							 19,450 	  53.6		0.0	       26.8	      5.8	   22.7 	 30.9
consistent gets 						     35,954,451       99,039.1	       47.3	   49,519.5	    110.3      49,441.6      49,597.5
consistent gets direct							      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
consistent gets examination					      7,653,892       21,083.2	       10.1	   10,541.6	     15.0      10,531.0      10,552.2
consistent gets examination (fastpath)				      7,652,142       21,078.4	       10.1	   10,539.2	     16.8      10,527.3      10,551.1
consistent gets from cache					     35,954,425       99,039.0	       47.3	   49,519.5	    110.2      49,441.5      49,597.5
consistent gets pin						     28,300,513       77,955.8	       37.2	   38,977.9	     95.2      38,910.6      39,045.2
consistent gets pin (fastpath)					      8,410,216       23,166.5	       11.1	   11,583.3	    524.6      11,212.3      11,954.2
cursor authentications							    338 	   0.9		0.0		0.5	      0.5	    0.1 	  0.9
cursor reload failures							     10 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
data blocks consistent reads - undo records applied			    109 	   0.3		0.0		0.2	      0.1	    0.1 	  0.2
db block changes						      6,193,937       17,061.6		8.1	    8,530.8	     38.0	8,504.0       8,557.7
db block gets							      4,109,783       11,320.7		5.4	    5,660.3	      7.5	5,655.0       5,665.6
db block gets direct							  2,086 	   5.7		0.0		2.9	      2.5	    1.1 	  4.6
db block gets from cache					      4,107,692       11,314.9		5.4	    5,657.5	      5.0	5,653.9       5,661.0
db block gets from cache (fastpath)				      1,695,223        4,669.6		2.2	    2,334.8	     88.6	2,272.1       2,397.5
deferred (CURRENT) block cleanout applications			      2,073,708        5,712.2		2.7	    2,856.1	     90.4	2,792.2       2,920.0
dirty buffers inspected 					      2,308,595        6,359.2		3.0	    3,179.6	     92.5	3,114.2       3,245.0

System Statistics (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
enqueue conversions							  1,539 	   4.2		0.0		2.1	      0.7	    1.6 	  2.6
enqueue releases						      1,539,287        4,240.1		2.0	    2,120.0	     12.2	2,111.4       2,128.6
enqueue requests						      1,538,929        4,239.1		2.0	    2,119.5	     12.1	2,111.0       2,128.1
enqueue timeouts							     14 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
enqueue waits								  1,315 	   3.6		0.0		1.8	      0.7	    1.3 	  2.3
exchange deadlocks							     17 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
execute count							      7,591,643       20,911.7	       10.0	   10,455.9	     22.9      10,439.6      10,472.1
file io service time						  1,784,283,615    4,914,943.0	    2,345.2	2,457,471.5	508,016.7   2,098,249.4   2,816,693.5
file io wait time					      7,607,018,337,442 2.09541159E+10	9,998,249.7   1.0477058E+10 3.0437930E+09 8.3247713E+09 1.2629345E+10
free buffer inspected						     46,785,706      128,874.8	       61.5	   64,437.4	 16,062.2      53,079.7      75,795.1
free buffer requested						     23,277,735       64,120.2	       30.6	   32,060.1	  1,845.8      30,754.9      33,365.3
gc blocks compressed							  8,650 	  23.8		0.0	       11.9	      2.0	   10.5 	 13.3
gc blocks lost								  2,784 	   7.7		0.0		3.8	      5.1	    0.2 	  7.4
gc cr anti locks created						478,847        1,319.0		0.6	      659.5	     41.4	  630.2 	688.8
gc cr anti locks expanded						    193 	   0.5		0.0		0.3	      0.3	    0.0 	  0.5
gc cr anti locks shrunk 						 22,819 	  62.9		0.0	       31.4	     11.7	   23.2 	 39.7
gc cr block build time							      4 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc cr block flush time							  2,456 	   6.8		0.0		3.4	      1.8	    2.1 	  4.7
gc cr block receive time						  3,893 	  10.7		0.0		5.4	      3.7	    2.8 	  8.0
gc cr blocks built							  1,242 	   3.4		0.0		1.7	      0.4	    1.4 	  2.0
gc cr blocks flushed							    157 	   0.4		0.0		0.2	      0.2	    0.1 	  0.4
gc cr blocks received							  2,812 	   7.7		0.0		3.9	      2.9	    1.8 	  5.9
gc cr blocks served							  2,726 	   7.5		0.0		3.8	      2.3	    2.2 	  5.4
gc cr multiblock grant time						    480 	   1.3		0.0		0.7	      0.8	    0.1 	  1.2
gc cr multiblock grants received					    755 	   2.1		0.0		1.0	      0.4	    0.7 	  1.4
gc current block flush time						     82 	   0.2		0.0		0.1	      0.2	    0.0 	  0.2
gc current block receive time						  7,768 	  21.4		0.0	       10.7	      4.2	    7.7 	 13.7
gc current blocks flushed						      7 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gc current blocks received						  6,369 	  17.5		0.0		8.8	      2.3	    7.1 	 10.4
gc current blocks served						  6,753 	  18.6		0.0		9.3	      4.0	    6.5 	 12.1
gc force cr read cr							     52 	   0.1		0.0		0.1	      0.1	    0.0 	  0.1
gc kbytes saved 							 46,946 	 129.3		0.1	       64.7	      9.2	   58.2 	 71.1
gc kbytes sent								 28,886 	  79.6		0.0	       39.8	      4.5	   36.6 	 43.0
gc local grants 						     19,334,619       53,258.6	       25.4	   26,629.3	  2,252.3      25,036.7      28,221.9
gc merge pi fg								     27 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
gc reader bypass grants 						     98 	   0.3		0.0		0.1	      0.1	    0.1 	  0.2
gc reader bypass waits							     59 	   0.2		0.0		0.1	      0.1	    0.0 	  0.1
gc remote grants						      2,794,776        7,698.4		3.7	    3,849.2	  1,451.7	2,822.7       4,875.7
gc status messages received						315,229 	 868.3		0.4	      434.2	    607.8	    4.4 	863.9
gc status messages sent 						317,878 	 875.6		0.4	      437.8	    612.9	    4.4 	871.2
gcs affinity lock failures						 17,616 	  48.5		0.0	       24.3	     20.5	    9.7 	 38.8
gcs affinity lock grants					     14,747,721       40,623.7	       19.4	   20,311.8	  1,896.3      18,971.0      21,652.7
gcs anti-locks created							477,937        1,316.5		0.6	      658.3	     40.1	  629.9 	686.6
gcs data block access records					     22,014,590       60,640.8	       28.9	   30,320.4	    770.6      29,775.5      30,865.2
gcs messages sent						      9,632,447       26,533.2	       12.7	   13,266.6	  1,699.5      12,064.9      14,468.4
gcs read-mostly lock failures						482,502        1,329.1		0.6	      664.5	     74.4	  612.0 	717.1
gcs read-mostly lock grants					      4,216,919       11,615.8		5.5	    5,807.9	    724.1	5,295.9       6,319.9
ges messages sent							  6,313 	  17.4		0.0		8.7	      5.8	    4.6 	 12.8
global enqueue get time 						220,266 	 606.7		0.3	      303.4	    232.5	  139.0 	467.7
global enqueue gets sync						877,342        2,416.7		1.2	    1,208.3	    111.7	1,129.4       1,287.3
global enqueue releases 						880,409        2,425.1		1.2	    1,212.6	    109.8	1,134.9       1,290.2
hot buffers moved to head of LRU					242,776 	 668.7		0.3	      334.4	    100.0	  263.6 	405.1
immediate (CR) block cleanout applications				  1,180 	   3.3		0.0		1.6	      0.2	    1.5 	  1.8
immediate (CURRENT) block cleanout applications 			    554 	   1.5		0.0		0.8	      0.1	    0.7 	  0.8
in call idle wait time						      8,614,499       23,729.3	       11.3	   11,864.6	    507.5      11,505.8      12,223.5
index crx upgrade (positioned)						     36 	   0.1		0.0		0.1	      N/A	    0.1 	  0.1
index fast full scans (full)						      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
index fetch by key							 13,964 	  38.5		0.0	       19.2	      7.2	   14.2 	 24.3
index range scans						      7,590,097       20,907.5	       10.0	   10,453.7	     14.2      10,443.7      10,463.8
leaf node 90-10 splits							     45 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1

System Statistics (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
leaf node splits							    193 	   0.5		0.0		0.3	      0.0	    0.3 	  0.3
lob reads								  1,462 	   4.0		0.0		2.0	      0.8	    1.5 	  2.6
lob writes								 13,627 	  37.5		0.0	       18.8	      1.6	   17.6 	 19.9
lob writes unaligned							 13,626 	  37.5		0.0	       18.8	      1.6	   17.6 	 19.9
logical read bytes from cache					328,188,149,760  904,017,416.2	  431,352.6   4.5200871E+08	862,198.6 4.5139904E+08 4.5261837E+08
logons cumulative							    219 	   0.6		0.0		0.3	      0.0	    0.3 	  0.3
max cf enq hold time							    116 	   0.3		0.0		0.3	      N/A	    0.3 	  0.3
messages received							 57,541 	 158.5		0.1	       79.3	     17.0	   67.2 	 91.3
messages sent								 57,528 	 158.5		0.1	       79.2	     17.0	   67.2 	 91.3
no work - consistent read gets					     28,208,524       77,702.4	       37.1	   38,851.2	    170.3      38,730.8      38,971.6
non-idle wait count						     30,516,350       84,059.4	       40.1	   42,029.7	    117.5      41,946.6      42,112.8
non-idle wait time						      6,342,836       17,471.8		8.3	    8,735.9	  1,466.0	7,699.3       9,772.5
opened cursors cumulative					      8,391,507       23,115.0	       11.0	   11,557.5	     41.4      11,528.2      11,586.8
parse count (describe)							     74 	   0.2		0.0		0.1	      0.1	    0.0 	  0.2
parse count (hard)							  1,194 	   3.3		0.0		1.6	      1.8	    0.4 	  2.9
parse count (total)							  9,298 	  25.6		0.0	       12.8	      0.8	   12.3 	 13.3
parse time cpu								    238 	   0.7		0.0		0.3	      0.3	    0.1 	  0.5
parse time elapsed							    775 	   2.1		0.0		1.1	      1.0	    0.4 	  1.8
physical read IO requests					     22,020,196       60,656.2	       28.9	   30,328.1	    757.1      29,792.8      30,863.4
physical read bytes						180,411,269,120  496,955,659.8	  237,122.7   2.4847783E+08   6,176,072.1 2.4411069E+08 2.5284497E+08
physical read total IO requests 				     22,026,972       60,674.9	       29.0	   30,337.4	    756.9      29,802.2      30,872.6
physical read total bytes					182,284,211,712  502,114,813.4	  239,584.4   2.5105741E+08   6,249,818.8 2.4663812E+08 2.5547670E+08
physical read total multi block requests				  1,748 	   4.8		0.0		2.4	      0.0	    2.4 	  2.4
physical reads							     22,022,883       60,663.6	       28.9	   30,331.8	    753.9      29,798.7      30,864.9
physical reads cache						     22,022,861       60,663.5	       28.9	   30,331.8	    754.0      29,798.6      30,864.9
physical reads cache prefetch						  2,766 	   7.6		0.0		3.8	      3.0	    1.7 	  5.9
physical reads direct							     16 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
physical reads direct (lob)						     14 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
physical reads direct temporary tablespace				      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
physical write IO requests					      2,313,742        6,373.4		3.0	    3,186.7	     96.9	3,118.2       3,255.2
physical write bytes						 19,844,472,832   54,663,006.0	   26,082.5    27,331,503.0	394,112.6  27,052,823.3  27,610,182.7
physical write total IO requests				      2,375,374        6,543.1		3.1	    3,271.6	     45.7	3,239.3       3,303.9
physical write total bytes					 22,289,668,096   61,398,463.3	   29,296.3    30,699,231.6	 39,235.9  30,671,487.7  30,726,975.6
physical write total multi block requests				  2,827 	   7.8		0.0		3.9	      0.6	    3.4 	  4.3
physical writes 						      2,422,421        6,672.7		3.2	    3,336.4	     48.1	3,302.3       3,370.4
physical writes direct							  2,422 	   6.7		0.0		3.3	      2.6	    1.5 	  5.1
physical writes direct (lob)						    335 	   0.9		0.0		0.5	      0.1	    0.4 	  0.5
physical writes direct temporary tablespace				  1,690 	   4.7		0.0		2.3	      2.6	    0.5 	  4.1
physical writes from cache					      2,419,999        6,666.1		3.2	    3,333.0	     50.7	3,297.2       3,368.9
physical writes non checkpoint					      2,312,457        6,369.8		3.0	    3,184.9	    105.9	3,110.0       3,259.8
pinned buffers inspected						 48,294 	 133.0		0.1	       66.5	     19.3	   52.9 	 80.2
process last non-idle time						    722 	   2.0		0.0		1.0	      0.0	    1.0 	  1.0
recursive calls 						      9,225,392       25,412.0	       12.1	   12,706.0	     30.5      12,684.4      12,727.6
recursive cpu usage							621,427        1,711.8		0.8	      855.9	     56.4	  816.0 	895.8
redo KB read							      1,122,304        3,091.5		1.5	    1,545.7	     31.9	1,523.2       1,568.3
redo blocks checksummed by FG (exclusive)			      1,842,176        5,074.4		2.4	    2,537.2	      0.7	2,536.7       2,537.7
redo blocks written						      4,355,066       11,996.3		5.7	    5,998.2	     35.2	5,973.3       6,023.1
redo entries							      3,086,690        8,502.5		4.1	    4,251.3	     24.2	4,234.2       4,268.3
redo size							  2,142,421,708    5,901,451.8	    2,815.9	2,950,725.9	  8,131.8   2,944,975.9   2,956,475.9
redo size for direct writes						    300 	   0.8		0.0		0.4	      0.1	    0.3 	  0.5
redo subscn max counts							  1,494 	   4.1		0.0		2.1	      0.1	    2.0 	  2.1
redo synch time 							  1,081 	   3.0		0.0		1.5	      1.3	    0.5 	  2.4
redo synch time (usec)						     10,493,125       28,904.3	       13.8	   14,452.1	 13,390.6	4,983.6      23,920.7
redo synch time overhead (usec) 					109,672 	 302.1		0.1	      151.1	    194.7	   13.4 	288.7
redo synch time overhead count (  2ms)					    131 	   0.4		0.0		0.2	      0.1	    0.1 	  0.3
redo synch time overhead count (  8ms)					     15 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
redo synch writes							    258 	   0.7		0.0		0.4	      0.0	    0.3 	  0.4
redo wastage							      8,825,360       24,310.0	       11.6	   12,155.0	  2,290.8      10,535.2      13,774.8
redo write active strands						 36,450 	 100.4		0.0	       50.2	      9.8	   43.3 	 57.1
redo write broadcast ack count						     52 	   0.1		0.0		0.1	      0.0	    0.1 	  0.1

System Statistics (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
redo write broadcast ack time						 96,890 	 266.9		0.1	      133.4	     16.0	  122.1 	144.8
redo write finish time						    495,319,002    1,364,391.7	      651.0	  682,195.9	 39,969.9     653,932.9     710,458.8
redo write gather time						      1,346,634        3,709.4		1.8	    1,854.7	    323.9	1,625.7       2,083.7
redo write info find							    146 	   0.4		0.0		0.2	      0.1	    0.1 	  0.3
redo write schedule time					      1,531,136        4,217.6		2.0	    2,108.8	    356.8	1,856.5       2,361.1
redo write size count (   4KB)						  2,203 	   6.1		0.0		3.0	      0.3	    2.8 	  3.2
redo write size count (   8KB)						  3,183 	   8.8		0.0		4.4	      0.2	    4.3 	  4.5
redo write size count (  16KB)						  3,175 	   8.7		0.0		4.4	      0.7	    3.9 	  4.9
redo write size count (  32KB)						  3,602 	   9.9		0.0		5.0	      1.9	    3.6 	  6.3
redo write size count ( 128KB)						  7,718 	  21.3		0.0	       10.6	      5.0	    7.1 	 14.1
redo write size count ( 256KB)						    955 	   2.6		0.0		1.3	      0.3	    1.1 	  1.5
redo write size count ( 512KB)						    297 	   0.8		0.0		0.4	      0.1	    0.3 	  0.5
redo write size count (1024KB)						    285 	   0.8		0.0		0.4	      0.1	    0.3 	  0.5
redo write size count (inf)						    524 	   1.4		0.0		0.7	      0.0	    0.7 	  0.7
redo write time 							 49,566 	 136.5		0.1	       68.3	      4.0	   65.4 	 71.1
redo write time (usec)						    495,663,046    1,365,339.4	      651.5	  682,669.7	 40,436.6     654,076.7     711,262.7
redo write total time						    495,974,288    1,366,196.8	      651.9	  683,098.4	 39,811.7     654,947.2     711,249.5
redo writes								 21,942 	  60.4		0.0	       30.2	      6.5	   25.6 	 34.8
redo writes adaptive all						 21,940 	  60.4		0.0	       30.2	      6.5	   25.6 	 34.8
rollback changes - undo records applied 				     21 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
rollbacks only - consistent read gets					     40 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
rows fetched via callback						  7,749 	  21.3		0.0	       10.7	      7.0	    5.7 	 15.6
securefile allocation bytes					      2,744,320        7,559.4		3.6	    3,779.7	    526.5	3,407.4       4,152.0
securefile allocation chunks						    124 	   0.3		0.0		0.2	      0.0	    0.2 	  0.2
securefile bytes non-transformed				      2,314,564        6,375.6		3.0	    3,187.8	    448.2	2,870.9       3,504.7
securefile direct read bytes						114,688 	 315.9		0.2	      315.9	      N/A	  315.9 	315.9
securefile direct read ops						     14 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
securefile direct write bytes					      2,744,320        7,559.4		3.6	    3,779.7	    526.5	3,407.4       4,152.0
securefile direct write ops						    122 	   0.3		0.0		0.2	      0.0	    0.2 	  0.2
securefile number of non-transformed flushes				    127 	   0.3		0.0		0.2	      0.0	    0.2 	  0.2
segment chunks allocation from dispenser				    124 	   0.3		0.0		0.2	      0.0	    0.2 	  0.2
segment dispenser allocations						    122 	   0.3		0.0		0.2	      0.0	    0.2 	  0.2
segment prealloc bytes						      1,048,576        2,888.3		1.4	    2,888.3	      N/A	2,888.3       2,888.3
segment prealloc ops							      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
segment prealloc time (ms)						    561 	   1.5		0.0		1.5	      N/A	    1.5 	  1.5
session connect time							    407 	   1.1		0.0		1.1	      N/A	    1.1 	  1.1
session cursor cache hits					      8,345,719       22,988.9	       11.0	   11,494.4	     29.5      11,473.6      11,515.3
session logical reads						     40,065,632      110,363.6	       52.7	   55,181.8	    101.6      55,109.9      55,253.7
shared hash latch upgrades - no wait				      4,027,756       11,094.8		5.3	    5,547.4	  3,010.5	3,418.7       7,676.1
shared hash latch upgrades - wait					     39 	   0.1		0.0		0.1	      0.0	    0.0 	  0.1
shared io pool buffer get success					    136 	   0.4		0.0		0.2	      0.0	    0.2 	  0.2
sorts (memory)								  2,950 	   8.1		0.0		4.1	      3.2	    1.8 	  6.3
sorts (rows)							      1,732,369        4,771.9		2.3	    2,385.9	  3,020.1	  250.4       4,521.5
sql area evicted							     71 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
sql area purged 							     61 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
summed dirty queue length					     27,803,978       76,588.1	       36.5	   38,294.1	  5,425.5      34,457.7      42,130.4
switch current caused by our pin					     33 	   0.1		0.0		0.0	      0.0	    0.0 	  0.1
switch current to new buffer						     98 	   0.3		0.0		0.1	      0.1	    0.1 	  0.2
table fetch by rowid						     26,725,327       73,616.8	       35.1	   36,808.4	    564.7      36,409.1      37,207.7
table fetch continued row						    536 	   1.5		0.0		0.7	      0.8	    0.1 	  1.3
table scan blocks gotten						 21,653 	  59.6		0.0	       29.8	     25.8	   11.6 	 48.0
table scan disk non-IMC rows gotten				      1,906,960        5,252.8		2.5	    2,626.4	  1,520.3	1,551.4       3,701.4
table scan rows gotten						      1,906,960        5,252.8		2.5	    2,626.4	  1,520.3	1,551.4       3,701.4
table scans (direct read)						      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
table scans (long tables)						      2 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
table scans (short tables)						  1,131 	   3.1		0.0		1.6	      1.2	    0.7 	  2.4
temp space allocated (bytes)					      6,291,456       17,330.1		8.3	    8,665.1	  8,169.4	2,888.4      14,441.7
total cf enq hold time							  9,211 	  25.4		0.0	       12.7	      7.4	    7.4 	 17.9
total number of cf enq holders						    257 	   0.7		0.0		0.4	      0.0	    0.3 	  0.4
total number of times SMON posted					      7 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0

System Statistics (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
transaction rollbacks							     11 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
transaction tables consistent reads - undo records applied		     55 	   0.2		0.0		0.1	      0.1	    0.0 	  0.1
undo change vector size 					    856,075,352    2,358,119.9	    1,125.2	1,179,060.0	  1,187.8   1,178,220.1   1,179,899.9
user I/O wait time						      1,122,864        3,093.0		1.5	    1,546.5	    699.9	1,051.6       2,041.4
user calls								  2,696 	   7.4		0.0		3.7	      0.3	    3.5 	  3.9
user commits								760,835        2,095.8		1.0	    1,047.9	      5.7	1,043.9       1,051.9
user logons cumulative							      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
user logouts cumulative 						    257 	   0.7		0.0		0.4	      0.0	    0.3 	  0.4
workarea executions - optimal						  3,407 	   9.4		0.0		4.7	      2.6	    2.9 	  6.5
write clones created in background					    169 	   0.5		0.0		0.2	      0.1	    0.1 	  0.3
write clones created in foreground					 75,794 	 208.8		0.1	      104.4	     19.4	   90.7 	118.1
			  --------------------------------------------------------------------------------------------------------------------


Global Messaging Statistics (Global)	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
Global Enqueue S-optim Broadcasts sent					    156 	   0.4		0.0		0.2	      0.2	    0.1 	  0.4
Global Enqueue S-optim S-lock gets					107,634 	 296.5		0.1	      148.2	    116.3	   66.0 	230.4
Global Enqueue S-optim anti-locks crea					     77 	   0.2		0.0		0.1	      0.1	    0.0 	  0.2
acks for commit broadcast(actual)					  2,885 	   7.9		0.0		4.0	      1.8	    2.7 	  5.2
acks for commit broadcast(logical)					 13,539 	  37.3		0.0	       18.6	      8.0	   13.0 	 24.3
broadcast msgs on commit(actual)					 13,235 	  36.5		0.0	       18.2	      5.8	   14.1 	 22.3
broadcast msgs on commit(logical)					 21,915 	  60.4		0.0	       30.2	      6.5	   25.6 	 34.8
broadcast msgs on commit(wasted)					  8,917 	  24.6		0.0	       12.3	      4.6	    9.0 	 15.6
flow control messages received						     32 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
flow control messages sent						     32 	   0.1		0.0		0.0	      0.0	    0.0 	  0.0
gcs assume no cvt							  2,506 	   6.9		0.0		3.5	      0.9	    2.8 	  4.1
gcs ast to fg								317,700 	 875.1		0.4	      437.6	    613.2	    4.0 	871.2
gcs bidless ast to lms							    663 	   1.8		0.0		0.9	      1.3	    0.0 	  1.8
gcs blocked converts							480,248        1,322.9		0.6	      661.4	     35.2	  636.5 	686.3
gcs blocked cr converts 						  1,380 	   3.8		0.0		1.9	      0.2	    1.7 	  2.1
gcs compatible basts							     18 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
gcs compatible cr basts (global)					     77 	   0.2		0.0		0.1	      0.0	    0.1 	  0.1
gcs compatible cr basts (local) 					  1,417 	   3.9		0.0		2.0	      0.6	    1.6 	  2.3
gcs dbwr flush pi msgs							445,763        1,227.9		0.6	      613.9	     89.8	  550.4 	677.4
gcs dbwr write request msgs						    197 	   0.5		0.0		0.3	      0.2	    0.1 	  0.4
gcs error msgs								      1 	   0.0		0.0		0.0	      N/A	    0.0 	  0.0
gcs grant ast								318,363 	 877.0		0.4	      438.5	    614.5	    4.0 	873.0
gcs immediate (compatible) converts					  4,215 	  11.6		0.0		5.8	      3.8	    3.1 	  8.5
gcs immediate (null) converts						212,887 	 586.4		0.3	      293.2	    164.5	  176.9 	409.5
gcs immediate cr (compatible) converts					216,441 	 596.2		0.3	      298.1	     36.5	  272.3 	323.9
gcs immediate cr (null) converts				      2,312,254        6,369.3		3.0	    3,184.6	  1,394.6	2,198.5       4,170.7
gcs lms write request msgs						    171 	   0.5		0.0		0.2	      0.1	    0.1 	  0.3
gcs msgs process time(ms)						259,303 	 714.3		0.3	      357.1	     39.0	  329.6 	384.7
gcs msgs received						      9,674,920       26,650.3	       12.7	   13,325.1	  3,176.8      11,078.8      15,571.5
gcs new served by master						    127 	   0.3		0.0		0.2	      0.2	    0.0 	  0.3
gcs out-of-order msgs							  2,258 	   6.2		0.0		3.1	      1.2	    2.2 	  4.0
gcs pings refused							    725 	   2.0		0.0		1.0	      0.6	    0.6 	  1.4
gcs reader bypass grant immediate					     97 	   0.3		0.0		0.1	      0.1	    0.1 	  0.2
gcs side channel msgs actual						  4,070 	  11.2		0.0		5.6	      2.8	    3.6 	  7.6
gcs side channel msgs logical						327,044 	 900.9		0.4	      450.4	    612.2	   17.6 	883.3
gcs stale cr								     52 	   0.1		0.0		0.1	      0.1	    0.0 	  0.1
gcs undo cr								  1,545 	   4.3		0.0		2.1	      2.8	    0.2 	  4.1
ges msgs process time(ms)						    232 	   0.6		0.0		0.3	      0.1	    0.2 	  0.4
ges msgs received							  6,385 	  17.6		0.0		8.8	      6.3	    4.3 	 13.2
ges remote lock allocation						     18 	   0.0		0.0		0.0	      0.0	    0.0 	  0.0
implicit batch messages received					209,326 	 576.6		0.3	      288.3	     30.8	  266.5 	310.1
implicit batch messages sent						208,243 	 573.6		0.3	      286.8	      3.9	  284.1 	289.6
messages flow controlled						116,707 	 321.5		0.2	      160.7	      8.9	  154.5 	167.0
messages queue sent actual					      3,142,852        8,657.2		4.1	    4,328.6	    632.3	3,881.5       4,775.7
messages queue sent logical					      1,444,584        3,979.2		1.9	    1,989.6	     99.6	1,919.2       2,060.0
messages received actual					      5,740,381       15,812.3		7.5	    7,906.2	  1,774.2	6,651.6       9,160.7
messages received logical					      9,681,305       26,667.9	       12.7	   13,333.9	  3,183.1      11,083.2      15,584.7
messages sent directly						      2,557,028        7,043.5		3.4	    3,521.7	  1,487.5	2,469.9       4,573.6
messages sent indirectly					      4,713,290       12,983.1		6.2	    6,491.5	  1,461.6	5,458.0       7,525.0
messages sent not implicit batched					411,170        1,132.6		0.5	      566.3	     70.5	  516.5 	616.1
messages sent pbatched						      5,593,903       15,408.8		7.4	    7,704.4	    136.7	7,607.8       7,801.0
msgs received kernel queue time (ns)			      2,021,115,702,408 5.56731310E+09	2,656,444.2   2.7836565E+09 4.7271486E+08 2.4493967E+09 3.1179164E+09
msgs received queue time (ms)						586,157        1,614.6		0.8	      807.3	    283.4	  606.9       1,007.7
msgs received queued						      9,681,304       26,667.9	       12.7	   13,333.9	  3,183.1      11,083.2      15,584.7
msgs sent queue time (ms)					      6,735,712       18,554.0		8.9	    9,277.0	  1,453.9	8,248.9      10,305.1
msgs sent queue time on ksxp (ms)				     55,855,976      153,859.3	       73.4	   76,929.6	  4,085.5      74,040.7      79,818.6
msgs sent queued						      3,572,925        9,841.9		4.7	    4,920.9	    540.8	4,538.5       5,303.3
msgs sent queued on ksxp					      5,701,713       15,705.8		7.5	    7,852.9	    855.4	7,248.0       8,457.7
process batch messages received 				      1,922,488        5,295.6		2.5	    2,647.8	    234.4	2,482.0       2,813.6
process batch messages sent					      2,138,955        5,891.9		2.8	    2,946.0	    590.0	2,528.8       3,363.1

Global Messaging Statistics (Global)	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> per Second Average - average of per-instance per Second rates
-> per Second Std Dev - standard deviation of per-instance per Second rates
-> per Second Min     - minimum of per-instance per Second rates
-> per Second Max     - maximum of per-instance per Second rates

																     per Second
													      -------------------------------------------------------
Statistic								  Total     per Second	  per Trans	    Average	  Std Dev	    Min 	  Max
------------------------------------------------------------ ------------------ -------------- ------------   ------------- ------------- ------------- -------------
receiver cycle time						      1,035,685        2,852.9		1.4	    1,426.4	    157.8	1,314.9       1,538.0
receiver loop count						      4,799,281       13,220.0		6.3	    6,610.0	    665.3	6,139.6       7,080.4
			  --------------------------------------------------------------------------------------------------------------------


System Statistics (Absolute Values)	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

	    Sessions		   Open Cursors 	    Session Cached Cursors
       -----------------   ---------------------------	 ---------------------------
  I#	  Begin      End	    Begin	   End		  Begin 	 End
----   -------- --------   -------------- ------------	 -------------- ------------
   1	    279      141	      805	   113		 37,252       37,497
   2	    257      139	      714	   121		 35,397       35,712
 ~~~   ~~~~~~~~ ~~~~~~~~   ~~~~~~~~~~~~~~ ~~~~~~~~~~~~	 ~~~~~~~~~~~~~~ ~~~~~~~~~~~~
 Sum	    536      280	    1,519	   234		 72,649       73,209
 Avg	    268      140	      760	   117		 36,325       36,605
 Std	     16        1	       64	     6		  1,312        1,262
			  --------------------------------------------------------------------------------------------------------------------

IO Profile (Global)			 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

Statistic			  Read+Write/s	      Reads/s	    Writes/s
------------------------------ --------------- -------------- --------------
Total Requests			     67,208.17	    60,665.99	    6,542.18
Database Requests		     67,019.76	    60,647.33	    6,372.44
Optimized Requests			  0.00		 0.00		0.00
Redo Requests				 60.43		  N/A	       60.43
Total (MB)				537.33	       478.78	       58.55
Database (MB)				525.99	       473.86	       52.12
Optimized Total (MB)			  0.00		 0.00		0.00
Redo (MB)				  5.63		  N/A		5.63
Database (blocks)		     67,326.48	    60,654.73	    6,671.76
Via Buffer Cache (blocks)	     67,319.75	    60,654.67	    6,665.08
Direct (blocks) 			  6.71		 0.04		6.67
			  --------------------------------------------------------------------------------------------------------------------

IOStat by Function			 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

					   Requests						 MB
		       ------------------------------------------------   ------------------------------------------------
															      Waits:	Avg
  I# Function Name	      Total	  IOs/s     Reads/s    Writes/s 	 Total	   IO MB/s   Read MB/s	Write MB/s     Count	Time
---- ---------------   ------------ ----------- ----------- -----------   ------------ ----------- ----------- -----------   ------- --------
   * Total		 23,343,962   64,293.20   58,013.61    6,279.60        186,667	    514.11	457.91	     56.20     21.1M 546.64us
     Buffer Cache Re	 21,058,050   57,997.42   57,997.42	   0.00        164,517	    453.11	453.11	      0.00     21.1M 523.11us
     DBWR		  2,243,289    6,178.40        0.00    6,178.40 	18,333	     50.49	  0.00	     50.49	   0
     LGWR		     35,797	  98.59        0.00	  98.59 	 2,041	      5.62	  0.00	      5.62     21.4K  22.40ms
     Others		      6,699	  18.45       16.14	   2.31 	 1,766	      4.86	  4.80	      0.06	3557   8.56ms
     Direct Writes		111	   0.31        0.00	   0.31 	    10	      0.03	  0.00	      0.03	   0
     Direct Reads		 16	   0.04        0.04	   0.00 	     0	      0.00	  0.00	      0.00	   0

   1 Total		 12,063,650   33,225.32   29,940.78    3,284.54 	96,361	    265.39	236.31	     29.09     10.9M 696.24us
     Buffer Cache Re	 10,868,039   29,932.41   29,932.41	   0.00 	84,899	    233.83	233.83	      0.00     10.9M 672.12us
     DBWR		  1,176,338    3,239.83        0.00    3,239.83 	 9,514	     26.20	  0.00	     26.20	   0
     LGWR		     15,740	  43.35        0.00	  43.35 	 1,036	      2.85	  0.00	      2.85	9230  27.45ms
     Others		      3,485	   9.60        8.37	   1.23 	   910	      2.51	  2.48	      0.02	1858   8.90ms
     Direct Writes		 48	   0.13        0.00	   0.13 	     2	      0.01	  0.00	      0.01	   0

   2 Total		 11,280,312   31,067.88   28,072.83    2,995.05 	90,306	    248.72	221.60	     27.11     10.2M 386.97us
     Buffer Cache Re	 10,190,011   28,065.01   28,065.01	   0.00 	79,618	    219.28	219.28	      0.00     10.2M 364.02us
     DBWR		  1,066,951    2,938.56        0.00    2,938.56 	 8,819	     24.29	  0.00	     24.29	   0
     LGWR		     20,057	  55.24        0.00	  55.24 	 1,005	      2.77	  0.00	      2.77     12.1K  18.56ms
     Others		      3,214	   8.85        7.78	   1.08 	   856	      2.36	  2.32	      0.04	1699   8.19ms
     Direct Writes		 63	   0.17        0.00	   0.17 	     8	      0.02	  0.00	      0.02	   0
     Direct Reads		 16	   0.04        0.04	   0.00 	     0	      0.00	  0.00	      0.00	   0
			  --------------------------------------------------------------------------------------------------------------------

IOStat by File Type			 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

					   Requests						 MB				Service Time
		       ------------------------------------------------   ------------------------------------------------   -----------------
																Small	 Large
  I# Filetype Name	      Total	  IOs/s     Reads/s    Writes/s 	 Total	   IO MB/s   Read MB/s	Write MB/s	 Read	  Read
---- ---------------   ------------ ----------- ----------- -----------   ------------ ----------- ----------- -----------   -------- --------
   * Total		 23,306,861   64,191.02   57,923.03    6,267.99        186,483	    513.61	457.52	     56.08   160.42us 1582.89m
     Data File		 23,263,687   64,072.11   57,905.30    6,166.81        182,658	    503.07	452.67	     50.40   160.45us	 .00ns
     Log File		     37,573	 103.48        5.05	  98.44 	 3,718	     10.24	  4.63	      5.61   236.84us 1613.04m
     Control File	      4,678	  12.88       11.08	   1.81 	    73	      0.20	  0.17	      0.03    41.27us
     Temp File			923	   2.54        1.61	   0.93 	    34	      0.09	  0.05	      0.04    19.78us	 .00ns

   1 Total		 12,061,271   33,218.77   29,933.17    3,285.60 	96,440	    265.61	236.52	     29.09   265.57us 1618.24m
     Data File		 12,041,856   33,165.30   29,924.43    3,240.87 	94,493	    260.25	234.04	     26.21   265.61us	 .00ns
     Log File		     16,689	  45.96        2.61	  43.36 	 1,904	      5.24	  2.39	      2.85   443.04us 1623.83m
     Control File	      2,454	   6.76        5.76	   1.00 	    39	      0.11	  0.09	      0.02    63.58us
     Temp File			272	   0.75        0.37	   0.37 	     4	      0.01	  0.01	      0.01    22.06us

   2 Total		 11,245,590   30,972.25   27,989.86    2,982.39 	90,043	    247.99	221.00	     26.99    47.98us 1546.28m
     Data File		 11,221,831   30,906.81   27,980.87    2,925.94 	88,165	    242.82	218.63	     24.19    47.99us
     Log File		     20,884	  57.52        2.44	  55.08 	 1,814	      5.00	  2.24	      2.76    13.70us 1601.50m
     Control File	      2,224	   6.13        5.32	   0.81 	    34	      0.09	  0.08	      0.01    17.10us
     Temp File			651	   1.79        1.24	   0.56 	    30	      0.08	  0.05	      0.04    19.05us	 .00ns
			  --------------------------------------------------------------------------------------------------------------------


Segment Statistics (Global)		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> % Total shows % of statistic for each segment compared to the global cluster-wide total
   (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants)
-> % Capture shows % of statistic for each segment compared to the  total captured
   by AWR for all segments during the snapshot interval
-> Captured Segments account for   39.0% of Total Logical Reads:      40,065,632
-> Captured Segments account for   50.3% of Total Physical Reads:      22,022,883
-> Captured Segments account for   50.3% of Total Physical Read Requests:      22,020,196
-> Captured Segments account for   50.3% of Total UnOptimized Read Requests:	  22,020,196
-> Captured Segments account for    0.0% of Total Optimized  Read Requests:		  1
-> Captured Segments account for    0.0% of Total Direct Physical Reads:	      16
-> Captured Segments account for   48.7% of Total Physical Writes:	 2,422,421
-> Captured Segments account for   49.5% of Total Physical Write Requests:	 2,313,742
-> Captured Segments account for   17.7% of Total Direct Physical Writes:	    2,422
-> Captured Segments account for    0.0% of Total Table Scans:		     4
-> Captured Segments account for   25.3% of Total CR Blocks Received:		2,812
-> Captured Segments account for   29.4% of Total Current Blocks Received:	     6,369
-> Captured Segments account for   26.1% of Total CR Blocks Served:	      2,726
-> Captured Segments account for   27.8% of Total Current Blocks Served:	   6,753
-> Captured Segments account for   40.3% of Total Global Cache Remote Grants:	    2,794,776
-> When ** MISSING ** occurs, some of the object attributes may not be available

				    Tablespace Object		    Subobject  Obj.
Statistic		 Owner	    Name       Name		    Name       Type	   Obj#   Dataobj#	  Value %Total %Capture
------------------------ ---------- ---------- -------------------- ---------- ----- ---------- ---------- ------------ ------ --------
db block changes	 USER57     IOPS       CF1			       TABLE	  73591      73595	 48,624    N/A	   22.2
			 USER7	    IOPS       CF1			       TABLE	  73347      73354	 44,016    N/A	   20.1
			 USER176    IOPS       CF1			       TABLE	  74180      74205	 42,528    N/A	   19.4
			 USER73     IOPS       CF1			       TABLE	  73675      73684	 42,160    N/A	   19.2
			 USER67     IOPS       CF1			       TABLE	  73655      73664	 41,968    N/A	   19.1
gc cr blocks received	 USER47     IOPS       CF1			       TABLE	  73538      73564	    149    5.3	   33.5
			 USER1	    IOPS       CF1			       TABLE	  73299      73301	    101    3.6	   22.7
			 USER52     IOPS       CF1			       TABLE	  73566      73586	     87    3.1	   19.6
			 USER15     IOPS       CF1			       TABLE	  73383      73415	     60    2.1	   13.5
			 USER78     IOPS       CF1			       TABLE	  73698      73719	     48    1.7	   10.8
gc cr blocks served	 USER47     IOPS       CF1			       TABLE	  73538      73564	    149    5.5	   33.5
			 USER1	    IOPS       CF1			       TABLE	  73299      73301	    101    3.7	   22.7
			 USER52     IOPS       CF1			       TABLE	  73566      73586	     87    3.2	   19.6
			 USER15     IOPS       CF1			       TABLE	  73383      73415	     60    2.2	   13.5
			 USER78     IOPS       CF1			       TABLE	  73698      73719	     48    1.8	   10.8
gc cu blocks received	 USER48     IOPS       CF1			       TABLE	  73545      73552	    375    5.9	   30.8
			 USER46     IOPS       CF1			       TABLE	  73532      73540	    299    4.7	   24.6
			 USER15     IOPS       CF1			       TABLE	  73383      73415	    251    3.9	   20.6
			 USER43     IOPS       CF1			       TABLE	  73522      73543	    147    2.3	   12.1
			 USER64     IOPS       CF1			       TABLE	  73630      73635	    145    2.3	   11.9
gc cu blocks served	 USER48     IOPS       CF1			       TABLE	  73545      73552	    375    5.6	   30.8
			 USER46     IOPS       CF1			       TABLE	  73532      73540	    299    4.4	   24.6
			 USER15     IOPS       CF1			       TABLE	  73383      73415	    251    3.7	   20.6
			 USER43     IOPS       CF1			       TABLE	  73522      73543	    147    2.2	   12.1
			 USER64     IOPS       CF1			       TABLE	  73630      73635	    145    2.1	   11.9
gc remote grants	 USER124    IOPS       CF1			       TABLE	  73925      73943	 21,120    0.8	   20.8
			 USER146    IOPS       CF1			       TABLE	  74037      74043	 20,206    0.7	   19.9
			 USER96     IOPS       CF1			       TABLE	  73789      73800	 20,131    0.7	   19.9
			 USER121    IOPS       CF1			       TABLE	  73911      73936	 19,988    0.7	   19.7
			 USER143    IOPS       CF1			       TABLE	  74010      74046	 19,897    0.7	   19.6
logical reads		 USER57     IOPS       CF1			       TABLE	  73591      73595	481,040    1.2	   22.0
			 USER7	    IOPS       CF1			       TABLE	  73347      73354	440,080    1.1	   20.1
			 USER176    IOPS       CF1			       TABLE	  74180      74205	424,832    1.1	   19.4
			 USER73     IOPS       CF1			       TABLE	  73675      73684	421,472    1.1	   19.3
			 USER67     IOPS       CF1			       TABLE	  73655      73664	419,840    1.0	   19.2
physical reads		 USER57     IOPS       CF1			       TABLE	  73591      73595	376,418    1.7	   20.5
			 USER7	    IOPS       CF1			       TABLE	  73347      73354	371,434    1.7	   20.2
			 USER176    IOPS       CF1			       TABLE	  74180      74205	369,365    1.7	   20.1
			 USER186    IOPS       CF1			       TABLE	  74233      74268	364,196    1.7	   19.8
			 USER67     IOPS       CF1			       TABLE	  73655      73664	358,550    1.6	   19.5
physical read requests	 USER57     IOPS       CF1			       TABLE	  73591      73595	376,418    1.7	   20.5
			 USER7	    IOPS       CF1			       TABLE	  73347      73354	371,434    1.7	   20.2
			 USER176    IOPS       CF1			       TABLE	  74180      74205	369,365    1.7	   20.1
			 USER186    IOPS       CF1			       TABLE	  74233      74268	364,196    1.7	   19.8
			 USER67     IOPS       CF1			       TABLE	  73655      73664	358,550    1.6	   19.5
physical writes 	 USER57     IOPS       CF1			       TABLE	  73591      73595	 44,256    N/A	   21.4
			 USER7	    IOPS       CF1			       TABLE	  73347      73354	 41,729    N/A	   20.2
			 USER176    IOPS       CF1			       TABLE	  74180      74205	 40,657    N/A	   19.7
			 USER186    IOPS       CF1			       TABLE	  74233      74268	 39,895    N/A	   19.3
			 USER67     IOPS       CF1			       TABLE	  73655      73664	 39,892    N/A	   19.3
physical writes direct	 SYS	    SYSAUX     WRH$_ACTIVE_SESSION_ 51622190_0 TABLE	  73031      73031	    397    N/A	   92.5
			 SYS	    SYSAUX     SYS_LOB0000007451C00 S_LOB_P223 LOB P	  78502      78502	     32    N/A	    7.5
physical write requests  USER57     IOPS       CF1			       TABLE	  73591      73595	 39,907    1.7	   20.6
			 USER7	    IOPS       CF1			       TABLE	  73347      73354	 39,332    1.7	   20.3
			 USER176    IOPS       CF1			       TABLE	  74180      74205	 38,836    1.7	   20.0
			 USER186    IOPS       CF1			       TABLE	  74233      74268	 38,290    1.7	   19.7
			 USER67     IOPS       CF1			       TABLE	  73655      73664	 37,700    1.6	   19.4
row lock waits		 SYS	    SYSAUX     WRM$_SNAPSHOT_DETAIL	       INDEX	  11582      11582	      2    N/A	  100.0
			  --------------------------------------------------------------------------------------------------------------------

Library Cache Activity			 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Summarized for all instances in the report
-> "Pct Misses"  should be very low

			 Get	Pct	       Pin    Pct	      Invali-	  GES Lock	GES Pin      GES Pin   GES Inval GES Invali-
Namespace	    Requests   Miss	  Requests   Miss    Reloads  dations	  Requests     Requests     Releases	Requests     dations
--------------- ------------ ------ -------------- ------ ---------- -------- ------------ ------------ ------------ ----------- -----------
ACCOUNT_STATUS		   4   25.0		 0    N/A	   0	    0		 4	      0 	   0	       0	   0
AUDIT POLICY		   2  100.0		 2  100.0	   0	    0		 2	      2 	   2	       0	   0
BODY			 597	1.3	     1,725    4.9	  30	    0	       423	  1,633        1,633	       0	   0
CLUSTER 		 100	2.0	       100    2.0	   0	    0	       100	    100 	 100	       0	   0
DBLINK			   4   25.0		 0    N/A	   0	    0		 4	      0 	   0	       0	   0
EDITION 		   3   33.3		 6   33.3	   0	    0		 3	      3 	   3	       0	   0
INDEX			 198   13.6	       198   13.6	   0	    0	       198	    198 	 198	       0	   0
OBJECT ID		  60  100.0		 0    N/A	   0	    0		 0	      0 	   0	       0	   0
QUEUE			  36	0.0		36    0.0	   0	    0		36	     36 	  36	       0	   0
SCHEMA		       1,659	0.1		 0    N/A	   0	    0		61	      0 	   0	       0	   0
SQL AREA	       5,129   41.0	 7,715,848   -0.1	 108	   63		 0	      0 	   0	       0	   0
SQL AREA BUILD	       1,000   83.5		 0    N/A	   0	    0		 0	      0 	   0	       0	   0
SQL AREA STATS		 950   99.8	       950   99.8	   0	    0		 0	      0 	   0	       0	   0
TABLE/PROCEDURE        6,090   16.5	    26,708    8.9	 249	    0	     9,677	 18,908       18,908	       0	   0
TRANSFORMATION		  36	0.0		36    0.0	   0	    0		36	     36 	  36	       0	   0
TRIGGER 		  10   40.0		10   40.0	   0	    0		 0	     10 	  10	       0	   0
			  --------------------------------------------------------------------------------------------------------------------


PGA Aggregate Target Statistics 	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> all stats are reported in MegaBytes

	  PGA Aggr Target	   Auto PGA Target	      PGA Mem Alloc		Auto Workareas		 Manual Workarea	   Global Mem Bound
       ---------------------   -----------------------	 -----------------------   -----------------------   -----------------------   -----------------------
  I#	    Begin	 End	      Begin	   End		Begin	     End	  Begin        End	    Begin	 End	      Begin	   End
----   ---------- ----------   ------------ ----------	 ------------ ----------   ------------ ----------   ------------ ----------   ------------ ----------
   1	  4,174.0    4,174.0	    1,281.0    1,955.7	      3,325.6	 2,300.5	    0.0        0.0	      0.0	 0.0	      417.4	 417.4
   2	  4,174.0    4,174.0	    1,611.3    2,180.3	      2,939.5	 2,147.1	    0.0        0.0	      0.0	 0.0	      417.4	 417.4
			  --------------------------------------------------------------------------------------------------------------------


Process Memory Summary			 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> B: Begin Snap   E: End Snap I#: Instance number
-> Max Alloc is Maximum PGA allocation size at snapshot time
-> Hist Max Alloc is the Historical Max Allocation for still-connected processes
-> ordered by instance, Begin/End snapshot, Alloc (MB)

							     Hist
					Avg Std Dev    Max    Max
		     Alloc     Used   Alloc   Alloc  Alloc  Alloc   Num   Num
  I#   Category       (MB)     (MB)    (MB)    (MB)   (MB)   (MB)  Proc Alloc
---- - ---------- -------- -------- ------- ------- ------ ------ ----- -----
   1 B Freeable      340.8	 .0	2.4	5.6	44    N/A   141   141
       Other	    1831.4	N/A	4.5	5.7	50     52   411   411
       PL/SQL	      77.3     74.8	 .3	 .3	 2	3   283   281
       SQL	      53.5     36.5	 .3	 .4	 1     11   212   182
       Total	    2302.9    111.3	7.4    12.0	97     65  1047  1015
     E Freeable      137.8	 .0	3.4	6.3	28    N/A    40    40
       Other	    1115.3	N/A	4.1	7.1	47     48   272   272
       PL/SQL	      12.4     10.9	 .1	 .4	 2	3   144   142
       SQL	      11.1	9.1	 .1	 .8	 7     18    75    51
       Total	    1276.6     20.0	7.8    14.7	84     69   531   505
   2 B Freeable      349.5	 .0	2.3	6.9	44    N/A   151   151
       Other	    1715.5	N/A	4.4	6.7	92     92   389   389
       PL/SQL	      63.6     61.4	 .2	 .3	 2	3   261   259
       SQL	      43.1     28.2	 .2	 .4	 1     18   191   153
       Total	    2171.7     89.7	7.2    14.3    139    113   992   952
     E Freeable      245.8	 .0	5.1    10.1	44    N/A    48    48
       Other	    1114.3	N/A	4.1	8.3	96     96   270   270
       PL/SQL	       7.9	6.5	 .1	 .3	 2	3   142   140
       SQL	      11.2	8.9	 .2	 .8	 7     18    72    39
       Total	    1379.2     15.4	9.5    19.5    148    117   532   497
			  --------------------------------------------------------------------------------------------------------------------


init.ora Parameters			 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> '*' indicates same value across all instances

Parameter Name		      I#  Begin value						End value (if different)
----------------------------- --- ----------------------------------------------------- ------------------------
_ipddb_enable			* TRUE
audit_file_dest 		* /u01/app/oracle/admin/p30sdb/adump
audit_trail			* DB
cluster_database		* TRUE
compatible			* 19.0.0
control_files			* +P30S/P30SDB/CONTROLFILE/current.261.1032513199, +FRA
db_block_size			* 8192
db_create_file_dest		* +P30S
db_domain			* example.com
db_name 			* p30sdb
db_recovery_file_dest		* +FRA
db_recovery_file_dest_size	* 805306368000
diagnostic_dest 		* /u01/app/oracle
dispatchers			* (PROTOCOL=TCP) (SERVICE=p30sdbXDB)
instance_number 		1 1
				2 2
listener_networks		*
local_listener			1  (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522
				2  (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522
nls_language			* AMERICAN
nls_territory			* AMERICA
open_cursors			* 300
pga_aggregate_target		* 4376756224
processes			* 5120
remote_listener 		*  mcracpoc-scan.example.com:1521
remote_login_passwordfile	* EXCLUSIVE
sga_max_size			* 21474836480
sga_target			* 3221225472
thread				1 1
				2 2
undo_tablespace 		1 UNDOTBS1
				2 UNDOTBS2
			  --------------------------------------------------------------------------------------------------------------------


init.ora Multi-valued Parameters	 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> This section only displays parameters that have more one value
-> '*' indicates same value across all instances
-> '(NULL)' indicates that the	parameter value was not set
-> A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot

Parameter Name		      I#  Begin value						End value (if different)
----------------------------- --- ----------------------------------------------------- ------------------------
control_files			* +FRA/P30SDB/CONTROLFILE/current.256.1032513199
				* +P30S/P30SDB/CONTROLFILE/current.261.1032513199
			  --------------------------------------------------------------------------------------------------------------------

Top SQL with Top Events 		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Top SQL statements by DB Time along with the top events by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Event is the percentage of DB Time due to the event that the SQL is
   waiting on.
-> % Row Source is the percentage of DB Time due to the row source for the
   SQL waiting on the event.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
									   % Row
Event			       % Event Top Row Source			  Source
------------------------------ ------- --------------------------------- -------
	  bhdvtsvjhgvrh 	  1497866750		     4742	   60.95
gc cr grant busy		 27.51 TABLE ACCESS - BY INDEX ROWID BAT   23.31
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


db file sequential read 	 15.71 TABLE ACCESS - BY INDEX ROWID BAT   15.40


free buffer waits		 12.27 TABLE ACCESS - BY INDEX ROWID BAT   11.74

	  35dumc2tpr9dv 	   203653710		     2239	   29.35
write complete waits		 10.01 UPDATE				   10.00
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


gc current grant 2-way		  5.87 UPDATE				    5.87


free buffer waits		  2.86 UPDATE				    2.82

			  --------------------------------------------------------------------------------------------------------------------

Top SQL with Top Row Sources		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Top SQL statements by DB Time along with the top row sources by DB Time
   for those SQLs.
-> % Activity is the percentage of DB Time due to the SQL.
-> % Row Source is the percentage of DB Time spent on the row source by
   that SQL.
-> % Event is the percentage of DB Time spent on the event by the
   SQL executing the row source.
-> Executions is the number of executions of the SQL that were sampled in ASH.

		 SQL ID 	   Plan Hash	       Executions     % Activity
----------------------- -------------------- -------------------- --------------
					   % Row
Row Source				  Source Top Event		 % Event
---------------------------------------- ------- ----------------------- -------
	  bhdvtsvjhgvrh 	  1497866750		     4742	   60.95
TABLE ACCESS - BY INDEX ROWID BATCHED	   54.61 gc cr grant busy	   23.31
SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND (CUSTID < :B1 )


INDEX - RANGE SCAN			    5.62 gc cr grant busy	    4.20

	  35dumc2tpr9dv 	   203653710		     2239	   29.35
UPDATE					   26.52 write complete waits	   10.00
UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 )) AND (CUSTID
< :B1 )


UPDATE STATEMENT			    2.16 enq: HW - contention	    1.46

			  --------------------------------------------------------------------------------------------------------------------

Top Sessions				 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Top Blocking Sessions			 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Blocking session activity percentages are calculated with respect to
      waits on enqueues, latches and "buffer busy" only
-> '% Activity' represents the load on the database caused by
      a particular blocking session
-> '# Samples Active' shows the number of ASH samples in which the
      blocking session was found active.
-> 'XIDs' shows the number of distinct transaction IDs sampled in ASH
      when the blocking session was found active.

 Blocking Sid (Inst) % Activity Event Caused			  % Event
-------------------- ---------- ------------------------------ ----------
User		     Program			      # Samples Active	   XIDs
-------------------- ------------------------------ ------------------ --------
  5809,59039(	  1)	   3.49 free buffer waits		     2.31
SYS		     oracle@mcracpo...le.com (DBW3)	  27/36 [ 74%]	      0

				write complete waits		     1.18


  5688,56294(	  1)	   2.39 free buffer waits		     1.44
SYS		     oracle@mcracpo...le.com (DBW2)	  27/36 [ 74%]	      0

  5930,21205(	  1)	   2.28 free buffer waits		     1.45
SYS		     oracle@mcracpo...le.com (DBW4)	  27/36 [ 74%]	      0

  6051,22574(	  1)	   2.00 write complete waits		     1.08
SYS		     oracle@mcracpo...le.com (DBW5)	  27/36 [ 74%]	      0

  6172,20781(	  1)	   1.89 free buffer waits		     1.03
SYS		     oracle@mcracpo...le.com (DBW6)	  27/36 [ 74%]	      0

			  --------------------------------------------------------------------------------------------------------------------

Top PL/SQL Procedures			 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> 'PL/SQL entry subprogram' represents the application's top-level
      entry-point (procedure, function, trigger, package initialization
      or RPC call) into PL/SQL.
-> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed
      at the point of sampling . If the value is 'SQL', it represents
      the percentage of time spent executing SQL for the particular
      PL/SQL entry subprogram

PL/SQL Entry Subprogram 					  % Activity
----------------------------------------------------------------- ----------
PL/SQL Current Subprogram					   % Current
----------------------------------------------------------------- ----------
USER1.SLOBUPDATE						       30.52
   SQL								       30.52
			  --------------------------------------------------------------------------------------------------------------------

Top Events				 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Top Events by DB Time
-> % Activity is the percentage of DB Time due to the event

Event				    Event Class     Session Type
----------------------------------- --------------- ---------------
	   Avg Active
% Activity   Sessions
---------- ----------
gc cr grant busy		    Cluster	    FOREGROUND
     27.88	59.83
db file sequential read 	    User I/O	    FOREGROUND
     17.55	37.66
free buffer waits		    Configuration   FOREGROUND
     15.13	32.48
write complete waits		    Configuration   FOREGROUND
     10.04	21.54
CPU + Wait for CPU		    CPU 	    BACKGROUND
      5.94	12.75
			  --------------------------------------------------------------------------------------------------------------------

Top Event P1/P2/P3 Values		 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Top Events by DB Time and the top P1/P2/P3 values for those events.
-> % Event is the percentage of DB Time due to the event
-> % Activity is the percentage of DB Time due to the event with the given
   P1,P2,P3 Values.

Event			       % Event		   P1, P2, P3 Values % Activity
------------------------------ ------- ----------------------------- ----------
Parameter 1		   Parameter 2		      Parameter 3
-------------------------- -------------------------- --------------------------
db file sequential read 	 17.55		  "9","97257061","1"	   0.03
file#			   block#		      blocks

free buffer waits		 15.15		    "4","3983","165"	   0.01
file#			   block#		      set-id#

write complete waits		 10.05		     "4","15589","0"	   0.03
file#			   block#		      NOT DEFINED

KJC: Wait for msg sends to com	  1.55	   "2484572848","65539","32"	   0.03
msg			   dest|rcvr		      mtype

enq: HW - contention		  1.46	 "1213661190","2","16786240"	   0.64
name|mode		   table space #	      block

			  --------------------------------------------------------------------------------------------------------------------

Top DB Objects				 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48

		  No data exists for this section of the report.
			  --------------------------------------------------------------------------------------------------------------------

Activity Over Time			 DB/Inst: P30SDB/p30sdb1  Snaps: 47-48
-> Analysis period is divided into smaller time slots as indicated
   in the 'Slot Time (Duration)'.
-> Top 3 events are reported in each of those slots
-> 'Slot Count' shows the number of ASH samples in that slot
-> 'Event Count' shows the number of ASH samples waiting for
   that event in that slot
-> '% Event' is 'Event Count' over all ASH samples in the analysis period

			 Slot					Event
Slot Time (Duration)	Count Event				Count % Event
-------------------- -------- ------------------------------ -------- -------
09:26:07   (3.9 min)	6,833 gc cr grant busy			2,031	26.07
			      db file sequential read		1,231	15.80
			      free buffer waits 		  997	12.80
09:30:00   (2.2 min)	  958 free buffer waits 		  183	 2.35
			      gc cr grant busy			  144	 1.85
			      db file sequential read		  136	 1.75
			  --------------------------------------------------------------------------------------------------------------------



	  ADDM Report for Task 'ADDM:1451622190_48'
	  -----------------------------------------

Analysis Period
---------------
AWR snapshot range from 47 to 48.
Time period starts at 17-FEB-20 09.26.07 AM
Time period ends at 17-FEB-20 09.32.10 AM

Analysis Target
---------------
Database 'P30SDB' with DB ID 1451622190.
Database version 19.0.0.0.0.
ADDM performed an analysis of all instances.

Activity During the Analysis Period
-----------------------------------
Total database time was 65033 seconds.
The average number of active sessions was 179.15.

Summary of Findings
-------------------
    Description 		  Active Sessions      Recommendations
				  Percent of Activity
    ----------------------------  -------------------  ---------------
1   Interconnect Latency	  179.15 | 100	       1
2   Top SQL Statements		  175.63 | 98.04       2
3   Global Cache Messaging	  81.66 | 45.58        1
4   Buffer Busy - Hot Objects	  60.96 | 34.03        0
5   "Configuration" Wait Class	  50.94 | 28.43        0
6   Free Buffer Waits		  46.69 | 26.06        1
7   "User I/O" wait Class	  31.05 | 17.33        0
8   Unusual "Cluster" Wait Event  5.63 | 3.14	       3
9   Global Cache Lost Blocks	  4.66 | 2.6	       1
10  High Watermark Waits	  4.25 | 2.37	       0
11  Unusual "Other" Wait Event	  3.96 | 2.21	       3


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 179.15 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time.
The database was consuming 59393 kilo bits per second of interconnect
bandwidth.
2% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 93% for database lock management.
The average latency for 8K interconnect messages was 1050 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  55.95	     ADDM:1451622190_1_48
    2	    p30sdb2  44.05	     ADDM:1451622190_2_48

   Recommendation 1: Host Configuration
   Estimated benefit is 179.15 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle's recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 81.66 active sessions, 45.58% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 87.31 active sessions, 48.74% of total activity.


Finding 2: Top SQL Statements
Impact is 175.63 active sessions, 98.04% of total activity.
-----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  54.03	     ADDM:1451622190_1_48
    2	    p30sdb2  45.97	     ADDM:1451622190_2_48

   Recommendation 1: SQL Tuning
   Estimated benefit is 94.64 active sessions, 52.83% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      "bhdvtsvjhgvrh".
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID > ( :B1 - :B2 ) ) AND
	 (CUSTID < :B1 )
   Rationale
      The SQL spent 79% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "bhdvtsvjhgvrh" was executed 3062456 times and
      had an average elapsed time of 0.012 seconds.
   Rationale
      At least 2 distinct execution plans were utilized for this SQL statement
      during the analysis period.

   Recommendation 2: SQL Tuning
   Estimated benefit is 57.11 active sessions, 31.88% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      "35dumc2tpr9dv". Additionally, investigate this statement for possible
      performance improvements. You can supplement the information given here
      with an ASH report for this SQL_ID.
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID > ( :B1 - :B2 ))
	 AND (CUSTID < :B1 )
   Rationale
      The SQL spent 49% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
      Look at data given below and an ASH report for further performance
      improvements.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID "35dumc2tpr9dv" was executed 340333 times and
      had an average elapsed time of 0.057 seconds.
   Rationale
      At least 2 distinct execution plans were utilized for this SQL statement
      during the analysis period.
   Rationale
      Waiting for event "write complete waits" in wait class "Configuration"
      accounted for 34% of the database time spent in processing the SQL
      statement with SQL_ID "35dumc2tpr9dv".
   Rationale
      Waiting for event "free buffer waits" in wait class "Configuration"
      accounted for 9% of the database time spent in processing the SQL
      statement with SQL_ID "35dumc2tpr9dv".


Finding 3: Global Cache Messaging
Impact is 81.66 active sessions, 45.58% of total activity.
----------------------------------------------------------
Inter-instance messaging was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p30sdb2  60.39	     ADDM:1451622190_2_48
    1	    p30sdb1  39.61	     ADDM:1451622190_1_48

   Recommendation 1: Application Analysis
   Estimated benefit is 81.66 active sessions, 45.58% of total activity.
   ---------------------------------------------------------------------
   Action
      Look at the "Top SQL Statements" finding for SQL statements consuming
      significant time on Cluster waits. For example, the SELECT statement
      with SQL_ID "bhdvtsvjhgvrh" is responsible for 73% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
      Impact is 87.31 active sessions, 48.74% of total activity.


Finding 4: Buffer Busy - Hot Objects
Impact is 60.96 active sessions, 34.03% of total activity.
----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  100	     ADDM:1451622190_1_48

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 60.96 active sessions, 34.03% of total activity.
	 Inter-instance messaging was consuming significant database time.
	 Impact is 81.66 active sessions, 45.58% of total activity.
	    Wait class "Cluster" was consuming significant database time.
	    Impact is 87.31 active sessions, 48.74% of total activity.


Finding 5: "Configuration" Wait Class
Impact is 50.94 active sessions, 28.43% of total activity.
----------------------------------------------------------
Wait class "Configuration" was consuming significant database time.
Waits for archiver processes were not consuming significant database time.
Log file switch operations were not consuming significant database time while
waiting for checkpoint completion.
Space Transaction (ST) enqueue waits were not consuming significant database
time.
ITL enqueue waits were not consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  78.43	     ADDM:1451622190_1_48
    2	    p30sdb2  21.57	     ADDM:1451622190_2_48

   No recommendations are available.


Finding 6: Free Buffer Waits
Impact is 46.69 active sessions, 26.06% of total activity.
----------------------------------------------------------
Waits for free buffers were consuming significant database time in some
instances. Database writers (DBWR) were unable to keep up with the demand for
free buffers.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  76.96	     ADDM:1451622190_1_48
    2	    p30sdb2  23.04	     ADDM:1451622190_2_48

   Recommendation 1: Examine instance ADDM
   Estimated benefit is 46.69 active sessions, 26.06% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate the I/O subsystem's write performance. Consider increasing
      the number of database writers, the appropriateness of asynchronous I/O,
      and use of direct path inserts. Check the ADDM analysis of affected
      instances for more details.


Finding 7: "User I/O" wait Class
Impact is 31.05 active sessions, 17.33% of total activity.
----------------------------------------------------------
Wait class "User I/O" was consuming significant database time.
The throughput of the I/O subsystem was not significantly lower than expected.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  66.04	     ADDM:1451622190_1_48
    2	    p30sdb2  33.96	     ADDM:1451622190_2_48

   No recommendations are available.


Finding 8: Unusual "Cluster" Wait Event
Impact is 5.63 active sessions, 3.14% of total activity.
--------------------------------------------------------
Wait event "gc current grant read-mostly invalidation" in wait class "Cluster"
was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  51.42	     ADDM:1451622190_1_48
    2	    p30sdb2  48.58	     ADDM:1451622190_2_48

   Recommendation 1: Application Analysis
   Estimated benefit is 5.63 active sessions, 3.14% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high "gc current grant read-mostly
      invalidation" waits. Refer to Oracle's "Database Reference" for the
      description of this wait event.

   Recommendation 2: Application Analysis
   Estimated benefit is 5.63 active sessions, 3.14% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high "gc current grant read-mostly
      invalidation" waits in Module "SQL*Plus".

   Recommendation 3: Application Analysis
   Estimated benefit is 5.63 active sessions, 3.14% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high "gc current grant read-mostly
      invalidation" waits in Service "p30sdb.example.com".

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Cluster" was consuming significant database time.
      Impact is 87.31 active sessions, 48.74% of total activity.


Finding 9: Global Cache Lost Blocks
Impact is 4.66 active sessions, 2.6% of total activity.
-------------------------------------------------------
Cluster communications that were retried due to lost blocks consumed
significant database time.
The database was consuming 59393 kilo bits per second of interconnect
bandwidth.
2% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 93% for database lock management.
The average latency for 8K interconnect messages was 1050 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p30sdb2  96.5	     ADDM:1451622190_2_48

   Recommendation 1: Host Configuration
   Estimated benefit is 4.66 active sessions, 2.6% of total activity.
   ------------------------------------------------------------------
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS's socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter "db_file_multiblock_read_count" may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 81.66 active sessions, 45.58% of total activity.
	 Wait class "Cluster" was consuming significant database time.
	 Impact is 87.31 active sessions, 48.74% of total activity.


Finding 10: High Watermark Waits
Impact is 4.25 active sessions, 2.37% of total activity.
--------------------------------------------------------
Contention on the high watermark (HW) enqueue was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  94.58	     ADDM:1451622190_1_48

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Configuration" was consuming significant database time.
      Impact is 50.94 active sessions, 28.43% of total activity.


Finding 11: Unusual "Other" Wait Event
Impact is 3.96 active sessions, 2.21% of total activity.
--------------------------------------------------------
Wait event "KJC: Wait for msg sends to complete" in wait class "Other" was
consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p30sdb2  64.71	     ADDM:1451622190_2_48
    1	    p30sdb1  35.29	     ADDM:1451622190_1_48

   Recommendation 1: Application Analysis
   Estimated benefit is 3.96 active sessions, 2.21% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high "KJC: Wait for msg sends to complete"
      waits. Refer to Oracle's "Database Reference" for the description of
      this wait event.

   Recommendation 2: Application Analysis
   Estimated benefit is 3.92 active sessions, 2.19% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high "KJC: Wait for msg sends to complete"
      waits in Module "SQL*Plus".

   Recommendation 3: Application Analysis
   Estimated benefit is 3.92 active sessions, 2.19% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high "KJC: Wait for msg sends to complete"
      waits in Service "p30sdb.example.com".

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class "Other" was consuming significant database time.
      Impact is 4.04 active sessions, 2.26% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Instances that were analyzed:
-----------------------------
    Number  Name     Host Name		    Active Sessions  Percent of Activity
    ------  -------  ---------------------  ---------------  -------------------
    1	    p30sdb1  mcracpoc1.example.com  100.23	     55.95
    2	    p30sdb2  mcracpoc2.example.com  78.92	     44.05

Warnings
--------
The flushing of snapshots 47 and 48 took 49 seconds which is 13% of the
analysis period time. This may reduce the reliability of the ADDM analysis.

Miscellaneous Information
-------------------------
Wait class "Application" was not consuming significant database time.
Wait class "Commit" was not consuming significant database time.
Wait class "Concurrency" was not consuming significant database time.
Wait class "Network" was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.

End of Report
Report written to awr_rac.txt
SQL> SQL> SQL> SQL> SQL> SQL> 




Specify the Report Type
~~~~~~~~~~~~~~~~~~~~~~~
AWR reports can be generated in the following formats.	Please enter the
name of the format at the prompt.  Default value is 'html'.

'html'		HTML format (default)
'text'		Text format
'active-html'	Includes Performance Hub active report


Type Specified:  html







Current Database
~~~~~~~~~~~~~~~~
DB Id	       DB Name	      Container Name
-------------- -------------- --------------
 1451622190	P30SDB	       p30sdb











Instances in this Workload Repository schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  DB Id      Inst Num	DB Name      Instance	  Host
------------ ---------- ---------    ----------   ------
* 1451622190	 1	P30SDB	     p30sdb1	  mcracpoc1.ex
* 1451622190	 2	P30SDB	     p30sdb2	  mcracpoc2.ex

Using 1451622190 for database Id
Using instances ALL (default 'ALL')


Specify the number of days of snapshots to choose from
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Entering the number of days (n) will result in the most recent
(n) days of snapshots being listed.  Pressing <return> without
specifying a number lists all completed snapshots.


Enter value for num_days: 
Listing all Completed Snapshots
DB Name      Snap Id	   Snap Started    Snap Level
------------ ---------- ------------------ ----------

P30SDB		     1	16 Feb 2020 11:00    1
		     2	16 Feb 2020 12:48    1
		     3	16 Feb 2020 13:00    1
		     4	16 Feb 2020 13:13    1
		     5	16 Feb 2020 13:19    1
		     6	16 Feb 2020 13:22    1
		     7	16 Feb 2020 13:30    1
		     8	16 Feb 2020 13:33    1
		     9	16 Feb 2020 13:42    1
		    10	16 Feb 2020 13:49    1
		    11	16 Feb 2020 13:55    1
		    12	16 Feb 2020 14:10    1
		    13	16 Feb 2020 14:16    1
		    14	16 Feb 2020 14:24    1
		    15	16 Feb 2020 14:33    1
		    16	16 Feb 2020 14:38    1
		    17	16 Feb 2020 14:49    1
		    18	16 Feb 2020 14:56    1
		    19	16 Feb 2020 15:04    1
		    20	16 Feb 2020 16:00    1
		    21	16 Feb 2020 17:23    1
		    22	16 Feb 2020 17:57    1
		    23	16 Feb 2020 18:05    1
		    24	16 Feb 2020 18:13    1
		    25	16 Feb 2020 18:19    1
		    26	16 Feb 2020 18:22    1
		    27	16 Feb 2020 18:25    1
		    28	16 Feb 2020 18:27    1
		    29	16 Feb 2020 18:35    1
		    30	17 Feb 2020 07:54    1
		    31	17 Feb 2020 08:10    1
		    32	17 Feb 2020 08:16    1
		    33	17 Feb 2020 08:20    1
		    34	17 Feb 2020 08:25    1
		    35	17 Feb 2020 08:27    1
		    36	17 Feb 2020 08:33    1
		    37	17 Feb 2020 08:37    1
		    38	17 Feb 2020 08:43    1
		    39	17 Feb 2020 08:47    1
		    40	17 Feb 2020 08:52    1
		    41	17 Feb 2020 08:55    1
		    42	17 Feb 2020 09:00    1
		    43	17 Feb 2020 09:09    1
		    44	17 Feb 2020 09:14    1
		    45	17 Feb 2020 09:17    1
		    46	17 Feb 2020 09:23    1
		    47	17 Feb 2020 09:26    1
		    48	17 Feb 2020 09:32    1


Specify the Begin and End Snapshot Ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Begin Snapshot Id specified: 47

End   Snapshot Id specified: 48



Specify the Report Name
~~~~~~~~~~~~~~~~~~~~~~~
The default report file name is awrrpt_rac_47_48.html.	To use this name,
press <return> to continue, otherwise enter an alternative.


Using the report name awr_rac.html

<html lang="en"><head><title>AWR RAC Report for DB: P30SDB, Snaps: 47-48</title>
<style type="text/css">
body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}
pre.awr  {font:8pt Courier;color:black; background:White;}
pre_sqltext.awr  {white-space: pre-wrap;}
h1.awr	 {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}
h2.awr	 {font:bold 18pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
h3.awr {font:bold 16pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;margin-top:4pt; margin-bottom:0pt;}
li.awr {font: 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;}
th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:black; background:White;padding-left:4px; padding-right:4px;padding-bottom:2px}
th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px}
td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}
td.awrc    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;}
td.awrncbb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
td.awrncrb {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-right: thin solid black;}
td.awrcrb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-right: thin solid black;}
td.awrclb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;}
td.awrcbb    {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-left: thin solid black;border-right: thin solid black;}
a.awr {font:bold 8pt Arial,Helvetica,sans-serif;color:#663300; vertical-align:top;margin-top:0pt; margin-bottom:0pt;}
td.awrnct {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:White;vertical-align:top;}
td.awrct   {font:8pt Arial,Helvetica,Geneva,sans-serif;border-top: thin solid black;color:black;background:#FFFFCC; vertical-align:top;}
td.awrnclbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrncbbt  {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-left: thin solid black;border-right: thin solid black;border-top: thin solid black;}
td.awrncrbt {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrcrbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-right: thin solid black;}
td.awrclbt     {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;}
td.awrcbbt   {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#FFFFCC; vertical-align:top;border-top: thin solid black;border-left: thin solid black;border-right: thin solid black;}
table.tdiff {  border_collapse: collapse; }
table.tscl {width: 600;}
table.tscl tbody, table.tscl thead { display: block; }
table.tscl thead tr th {height: 12px;line-height: 12px;}
table.tscl tbody { height: 100px;overflow-y: auto; overflow-x: hidden;}
table.tscl tbody td, thead th {width: 200;}
.hidden   {position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;}
.pad   {margin-left:17px;}
.doublepad {margin-left:34px;}
</style></head><body class="awr">
<h1 class="awr">
WORKLOAD REPOSITORY REPORT (RAC)

</h1>
<p />Database Summary<p />
<ul>
</ul>
<table border="0" class="tdiff" summary="Database Summary"><tr>
<th class="awrbg" colspan=" 8" id="Database">Database</th>
<th class="awrbg" colspan=" 2" id="SnapshotIds">Snapshot Ids</th>
<th class="awrbg" colspan=" 2" id="NumberofInstances">Number of Instances</th>
<th class="awrbg" colspan=" 2" id="NumberofHosts">Number of Hosts</th>
<th class="awrbg" colspan=" 2" id="ReportTotal(minutes)">Report Total (minutes)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Id">Id</th><th class="awrbg" scope="col" id="Name">Name</th><th class="awrbg" scope="col" id="UniqueName">Unique Name</th><th class="awrbg" scope="col" id="Role">Role</th><th class="awrbg" scope="col" id="Edition">Edition</th><th class="awrbg" scope="col" id="RAC">RAC</th><th class="awrbg" scope="col" id="CDB">CDB</th><th class="awrbg" scope="col" id="BlockSize">Block Size</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="InReport">In Report</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="InReport">In Report</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="Elapsedtime">Elapsed time</th></tr>
<tr><td align="right" headers="Database Id" class='awrclb'>1451622190</td><td headers="Database Name" class='awrc'>P30SDB</td><td headers="Database UniqueName" class='awrc'>p30sdb</td><td headers="Database Role" class='awrc'>PRIMARY</td><td headers="Database Edition" class='awrc'>EE</td><td headers="Database RAC" class='awrc'>YES</td><td headers="Database CDB" class='awrc'>NO</td><td align="right" headers="Database BlockSize" class='awrc'>8192</td><td align="right" headers="SnapshotIds Begin" class='awrclb'>47</td><td align="right" headers="SnapshotIds End" class='awrc'>48</td><td align="right" headers="NumberofInstances InReport" class='awrclb'>2</td><td align="right" headers="NumberofInstances Total" class='awrc'>2</td><td align="right" headers="NumberofHosts InReport" class='awrclb'>2</td><td align="right" headers="NumberofHosts Total" class='awrc'>2</td><td align="right" headers="ReportTotal(minutes) DBtime" class='awrclb'>1,083.88</td><td align="right" headers="ReportTotal(minutes) Elapsedtime" class='awrcrb'>6.05</td></tr>
</table><p />
<p />Database Instances Included In Report<p />
<ul>
<li class="awr"> Listed in order of instance number, I#</li>
</ul>
<table border="0" class="tdiff" summary="Database Instances Included In Report. . Listed in order of instance number, I#"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Instance</th><th class="awrbg" scope="col">Host</th><th class="awrbg" scope="col">Startup</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th><th class="awrbg" scope="col">Release</th><th class="awrbg" scope="col">Elapsed Time(min)</th><th class="awrbg" scope="col">DB time(min)</th><th class="awrbg" scope="col">Up Time(hrs)</th><th class="awrbg" scope="col">Avg Active Sessions</th><th class="awrbg" scope="col">Platform</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td class='awrc'>p30sdb1</td><td class='awrc'>mcracpoc1.example.com</td><td class='awrc'>17-Feb-20 07:43</td><td class='awrc'>17-Feb-20 09:26</td><td class='awrc'>17-Feb-20 09:32</td><td class='awrc'>19.0.0.0.0</td><td align="right" class='awrc'>6.05</td><td align="right" class='awrc'>606.42</td><td align="right" class='awrc'>1.81</td><td align="right" class='awrc'>100.23</td><td class='awrc'>Linux x86 64-bit</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td class='awrnc'>p30sdb2</td><td class='awrnc'>mcracpoc2.example.com</td><td class='awrnc'>17-Feb-20 07:43</td><td class='awrnc'>17-Feb-20 09:26</td><td class='awrnc'>17-Feb-20 09:32</td><td class='awrnc'>19.0.0.0.0</td><td align="right" class='awrnc'>6.05</td><td align="right" class='awrnc'>477.46</td><td align="right" class='awrnc'>1.81</td><td align="right" class='awrnc'>78.92</td><td class='awrnc'>Linux x86 64-bit</td></tr>
</table><p />
<h3 class="awr"><a class="awr" name="99999"></a>Report Summary</h3>
<p />Top ADDM Findings by Average Active Sessions<p />
<ul>
</ul>
<table border="0" width="600" class="tdiff" summary="This table displays top ADDM findings by average active sessions"><tr><th class="awrbg" scope="col">Finding Name</th><th class="awrbg" scope="col">Avg active sessions of the task</th><th class="awrbg" scope="col">Percent active sessions of finding</th><th class="awrbg" scope="col">Task Name</th><th class="awrbg" scope="col">Begin Snap Time</th><th class="awrbg" scope="col">End Snap Time</th></tr>
<tr><td class='awrc'>Interconnect Latency</td><td align="right" class='awrc'>179.15</td><td align="right" class='awrc'>1.0E+02</td><td scope="row" class='awrc'>ADDM:1451622190_48</td><td class='awrc'>17-Feb-20 09:26</td><td class='awrc'>17-Feb-20 09:32</td></tr>
<tr><td class='awrnc'>Top SQL Statements</td><td align="right" class='awrnc'>179.15</td><td align="right" class='awrnc'>98.04</td><td scope="row" class='awrnc'>ADDM:1451622190_48</td><td class='awrnc'>17-Feb-20 09:26</td><td class='awrnc'>17-Feb-20 09:32</td></tr>
<tr><td class='awrc'>Global Cache Messaging</td><td align="right" class='awrc'>179.15</td><td align="right" class='awrc'>45.58</td><td scope="row" class='awrc'>ADDM:1451622190_48</td><td class='awrc'>17-Feb-20 09:26</td><td class='awrc'>17-Feb-20 09:32</td></tr>
<tr><td class='awrnc'>Buffer Busy - Hot Objects</td><td align="right" class='awrnc'>179.15</td><td align="right" class='awrnc'>34.03</td><td scope="row" class='awrnc'>ADDM:1451622190_48</td><td class='awrnc'>17-Feb-20 09:26</td><td class='awrnc'>17-Feb-20 09:32</td></tr>
<tr><td class='awrc'>&quot;Configuration&quot; Wait Class</td><td align="right" class='awrc'>179.15</td><td align="right" class='awrc'>28.43</td><td scope="row" class='awrc'>ADDM:1451622190_48</td><td class='awrc'>17-Feb-20 09:26</td><td class='awrc'>17-Feb-20 09:32</td></tr>
</table><p />
<p />Cache Sizes<p />
<ul>
<li class="awr"> All values are in Megabytes </li>
<li class="awr"> Listed in order of instance number, I# </li>
<li class="awr"> End values displayed only if different from Begin values</li>
</ul>
<table border="0" class="tdiff" summary="Cache Sizes. . All values are in Megabytes. Listed in order of instance number, I#. End values displayed only if different from Begin values"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="MemoryTarget">Memory Target</th>
<th class="awrbg" colspan=" 2" id="SgaTarget">Sga Target</th>
<th class="awrbg" colspan=" 2" id="DBCache">DB Cache</th>
<th class="awrbg" colspan=" 2" id="SharedPool">Shared Pool</th>
<th class="awrbg" colspan=" 2" id="LargePool">Large Pool</th>
<th class="awrbg" colspan=" 2" id="JavaPool">Java Pool</th>
<th class="awrbg" colspan=" 2" id="StreamsPool">Streams Pool</th>
<th class="awrbg" colspan=" 2" id="PGATarget">PGA Target</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col">Log Buffer</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="MemoryTarget Begin" class='awrclb'>&#160;</td><td align="right" headers="MemoryTarget End" class='awrc'>&#160;</td><td align="right" headers="SgaTarget Begin" class='awrclb'>3,072</td><td align="right" headers="SgaTarget End" class='awrc'>&#160;</td><td align="right" headers="DBCache Begin" class='awrclb'>1,136</td><td align="right" headers="DBCache End" class='awrc'>&#160;</td><td align="right" headers="SharedPool Begin" class='awrclb'>1,712</td><td align="right" headers="SharedPool End" class='awrc'>&#160;</td><td align="right" headers="LargePool Begin" class='awrclb'>80</td><td align="right" headers="LargePool End" class='awrc'>&#160;</td><td align="right" headers="JavaPool Begin" class='awrclb'>&#160;</td><td align="right" headers="JavaPool End" class='awrc'>&#160;</td><td align="right" headers="StreamsPool Begin" class='awrclb'>&#160;</td><td align="right" headers="StreamsPool End" class='awrc'>&#160;</td><td align="right" headers="PGATarget Begin" class='awrclb'>4,176</td><td align="right" headers="PGATarget End" class='awrcrb'>&#160;</td><td align="right" class='awrc'>38.16</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="MemoryTarget Begin" class='awrnclb'>&#160;</td><td align="right" headers="MemoryTarget End" class='awrnc'>&#160;</td><td align="right" headers="SgaTarget Begin" class='awrnclb'>3,072</td><td align="right" headers="SgaTarget End" class='awrnc'>&#160;</td><td align="right" headers="DBCache Begin" class='awrnclb'>1,040</td><td align="right" headers="DBCache End" class='awrnc'>&#160;</td><td align="right" headers="SharedPool Begin" class='awrnclb'>1,808</td><td align="right" headers="SharedPool End" class='awrnc'>&#160;</td><td align="right" headers="LargePool Begin" class='awrnclb'>80</td><td align="right" headers="LargePool End" class='awrnc'>&#160;</td><td align="right" headers="JavaPool Begin" class='awrnclb'>&#160;</td><td align="right" headers="JavaPool End" class='awrnc'>&#160;</td><td align="right" headers="StreamsPool Begin" class='awrnclb'>&#160;</td><td align="right" headers="StreamsPool End" class='awrnc'>&#160;</td><td align="right" headers="PGATarget Begin" class='awrnclb'>4,176</td><td align="right" headers="PGATarget End" class='awrncrb'>&#160;</td><td align="right" class='awrnc'>38.16</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>3,072</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>1,088</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>1,760</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>80</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrclbt'>4,176</td><td align="right" class='awrcrbt'>&#160;</td><td align="right" class='awrct'>38.16</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Min</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>3,072</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>1,040</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>1,712</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>80</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>4,176</td><td align="right" class='awrncrb'>&#160;</td><td align="right" class='awrnc'>38.16</td></tr>
<tr><td align="right" scope="row" class='awrc'>Max</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>3,072</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>1,136</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>1,808</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>80</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>4,176</td><td align="right" class='awrcrb'>&#160;</td><td align="right" class='awrc'>38.16</td></tr>
</table><p />

<a class="awr" name="top"></a>
<h2 class="awr">
Main Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#99999">Report Summary</a></li>
<li class="awr"><a class="awr" href="#12010">OS Statistics</a></li>
<li class="awr"><a class="awr" href="#629">Time Model Statistics</a></li>
<li class="awr"><a class="awr" href="#621">Wait Events Statistics</a></li>
<li class="awr"><a class="awr" href="#639">Global Activity Load Profile</a></li>
<li class="awr"><a class="awr" href="#605">Global Cache and Enqueue Statistics Summary</a></li>
<li class="awr"><a class="awr" href="#12033">Global CR Server Statistics</a></li>
<li class="awr"><a class="awr" href="#12034">Global Current Server Statistics</a></li>
<li class="awr"><a class="awr" href="#607">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#608">Interconnect Statistics</a></li>
<li class="awr"><a class="awr" href="#622">SQL Statistics</a></li>
<li class="awr"><a class="awr" href="#623">Global Activity Statistics</a></li>
<li class="awr"><a class="awr" href="#630">I/O Statistics</a></li>
<li class="awr"><a class="awr" href="#12083">Library Cache Statistics</a></li>
<li class="awr"><a class="awr" href="#633">Memory Statistics</a></li>
<li class="awr"><a class="awr" href="#638">Supplemental Information</a></li>
<li class="awr"><a class="awr" href="#43">Active Session History(ASH) Report</a></li>
<li class="awr"><a class="awr" href="#99994">ADDM Reports</a></li>
</ul>
<br /><a class="awr" href="#top">Back to Top</a><hr /><p />
<a class="awr" name="12010"></a>
<h3 class="awr">OS Statistics By Instance</h3>
<ul>
<li class="awr"> Listed in order of instance number, I# </li>
<li class="awr"> End values are diplayed only if different from begin values</li>
</ul>
<table border="0" class="tdiff" summary="OS Statistics By Instance. . Listed in order of instance number, I#. End values are diplayed only if different from begin values"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="CPU">CPU</th>
<th class="awrbg" colspan=" 2" id="Load">Load</th>
<th class="awrbg" colspan=" 5" id="%CPU">% CPU</th>
<th class="awrbg" colspan=" 3" id="Time(s)">Time (s)</th>
<th class="awrbg" colspan=" 1" id="Memory">Memory</th>
<th class="awrbg" colspan=" 4" id="EndValues">End Values</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="#CPUs">#CPUs</th><th class="awrbg" scope="col" id="#Cores">#Cores</th><th class="awrbg" scope="col" id="#Sckts">#Sckts</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="%Busy">% Busy</th><th class="awrbg" scope="col" id="%Usr">% Usr</th><th class="awrbg" scope="col" id="%Sys">% Sys</th><th class="awrbg" scope="col" id="%WIO">% WIO</th><th class="awrbg" scope="col" id="%Idl">% Idl</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Idle">Idle</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="MB">MB</th><th class="awrbg" scope="col" id="#CPUs">#CPUs</th><th class="awrbg" scope="col" id="#Cores">#Cores</th><th class="awrbg" scope="col" id="#Sckts">#Sckts</th><th class="awrbg" scope="col" id="Memory(M)">Memory (M)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="CPU #CPUs" class='awrclb'>64</td><td align="right" headers="CPU #Cores" class='awrc'>32</td><td align="right" headers="CPU #Sckts" class='awrc'>2</td><td align="right" headers="Load Begin" class='awrclb'>20.44</td><td align="right" headers="Load End" class='awrc'>10.68</td><td align="right" headers="%CPU %Busy" class='awrclb'>17.30</td><td align="right" headers="%CPU %Usr" class='awrc'>5.89</td><td align="right" headers="%CPU %Sys" class='awrc'>8.02</td><td align="right" headers="%CPU %WIO" class='awrc'>17.32</td><td align="right" headers="%CPU %Idl" class='awrc'>82.70</td><td align="right" headers="Time(s) Busy" class='awrclb'>3,773.82</td><td align="right" headers="Time(s) Idle" class='awrc'>18,042.37</td><td align="right" headers="Time(s) Total" class='awrc'>21,816.19</td><td align="right" headers="Memory MB" class='awrclb'>1,032,089.41</td><td align="right" headers="EndValues #CPUs" class='awrclb'>&#160;</td><td align="right" headers="EndValues #Cores" class='awrc'>&#160;</td><td align="right" headers="EndValues #Sckts" class='awrc'>&#160;</td><td align="right" headers="EndValues Memory(M)" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="CPU #CPUs" class='awrnclb'>64</td><td align="right" headers="CPU #Cores" class='awrnc'>32</td><td align="right" headers="CPU #Sckts" class='awrnc'>2</td><td align="right" headers="Load Begin" class='awrnclb'>22.72</td><td align="right" headers="Load End" class='awrnc'>7.24</td><td align="right" headers="%CPU %Busy" class='awrnclb'>16.98</td><td align="right" headers="%CPU %Usr" class='awrnc'>6.01</td><td align="right" headers="%CPU %Sys" class='awrnc'>7.88</td><td align="right" headers="%CPU %WIO" class='awrnc'>12.77</td><td align="right" headers="%CPU %Idl" class='awrnc'>83.02</td><td align="right" headers="Time(s) Busy" class='awrnclb'>3,499.90</td><td align="right" headers="Time(s) Idle" class='awrnc'>17,105.94</td><td align="right" headers="Time(s) Total" class='awrnc'>20,605.84</td><td align="right" headers="Memory MB" class='awrnclb'>1,032,089.42</td><td align="right" headers="EndValues #CPUs" class='awrnclb'>&#160;</td><td align="right" headers="EndValues #Cores" class='awrnc'>&#160;</td><td align="right" headers="EndValues #Sckts" class='awrnc'>&#160;</td><td align="right" headers="EndValues Memory(M)" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrclbt'>7,273.72</td><td align="right" class='awrct'>35,148.31</td><td align="right" class='awrct'>42,422.03</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="629"></a>
<h2 class="awr">
Time Model Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12014">Time Model</a></li>
<li class="awr"><a class="awr" href="#12015">Time Model - % of DB time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12014"></a>
<h3 class="awr">Time Model</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Time Model"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">DB time (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">SQL Exec Ela (s)</th><th class="awrbg" scope="col">Parse Ela (s)</th><th class="awrbg" scope="col">Hard Parse Ela (s)</th><th class="awrbg" scope="col">PL/SQL Ela (s)</th><th class="awrbg" scope="col">Java Ela (s)</th><th class="awrbg" scope="col">bg time (s)</th><th class="awrbg" scope="col">bg CPU (s)</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>36,385.25</td><td align="right" class='awrc'>2,949.59</td><td align="right" class='awrc'>36,361.78</td><td align="right" class='awrc'>4.60</td><td align="right" class='awrc'>4.41</td><td align="right" class='awrc'>113.14</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2,871.39</td><td align="right" class='awrc'>728.94</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>28,647.57</td><td align="right" class='awrnc'>2,747.87</td><td align="right" class='awrnc'>28,636.27</td><td align="right" class='awrnc'>11.03</td><td align="right" class='awrnc'>8.29</td><td align="right" class='awrnc'>103.02</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2,715.72</td><td align="right" class='awrnc'>591.52</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>65,032.82</td><td align="right" class='awrct'>5,697.47</td><td align="right" class='awrct'>64,998.05</td><td align="right" class='awrct'>15.63</td><td align="right" class='awrct'>12.70</td><td align="right" class='awrct'>216.16</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>5,587.11</td><td align="right" class='awrct'>1,320.46</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>32,516.41</td><td align="right" class='awrnc'>2,848.73</td><td align="right" class='awrnc'>32,499.02</td><td align="right" class='awrnc'>7.82</td><td align="right" class='awrnc'>6.35</td><td align="right" class='awrnc'>108.08</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>2,793.55</td><td align="right" class='awrnc'>660.23</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>5,471.37</td><td align="right" class='awrc'>142.64</td><td align="right" class='awrc'>5,462.77</td><td align="right" class='awrc'>4.55</td><td align="right" class='awrc'>2.74</td><td align="right" class='awrc'>7.16</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>110.08</td><td align="right" class='awrc'>97.17</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#629">Back to Time Model Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12015"></a>
<h3 class="awr">Time Model - % of DB time</h3>
<ul>
<li class="awr"> % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]</li>
</ul>
<table border="0" class="tdiff" summary="Time Model - % of DB time. . % Total [DB time/bg time] - instance [DB time/bg time] as a percentage of the cluster-wide total [DB time/bg time]"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 6" id="%DBtime">% DB time</th>
<td>&#160;</td><th class="awrbg" colspan=" 1" id="%bgtime">% bg time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">% Total DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="SQLExecEla">SQL Exec Ela</th><th class="awrbg" scope="col" id="ParseEla">Parse Ela</th><th class="awrbg" scope="col" id="HardParse">Hard Parse</th><th class="awrbg" scope="col" id="PL/SQLEla">PL/SQL Ela</th><th class="awrbg" scope="col" id="JavaEla">Java Ela</th><th class="awrbg" scope="col">% Total bg time</th><th class="awrbg" scope="col" id="bgCPU">bg CPU</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>55.95</td><td align="right" headers="%DBtime DBCPU" class='awrclb'>8.11</td><td align="right" headers="%DBtime SQLExecEla" class='awrc'>99.94</td><td align="right" headers="%DBtime ParseEla" class='awrc'>0.01</td><td align="right" headers="%DBtime HardParse" class='awrc'>0.01</td><td align="right" headers="%DBtime PL/SQLEla" class='awrc'>0.00</td><td align="right" headers="%DBtime JavaEla" class='awrc'>0.00</td><td align="right" class='awrc'>51.39</td><td align="right" headers="%bgtime bgCPU" class='awrcbb'>25.39</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>44.05</td><td align="right" headers="%DBtime DBCPU" class='awrnclb'>9.59</td><td align="right" headers="%DBtime SQLExecEla" class='awrnc'>99.96</td><td align="right" headers="%DBtime ParseEla" class='awrnc'>0.04</td><td align="right" headers="%DBtime HardParse" class='awrnc'>0.03</td><td align="right" headers="%DBtime PL/SQLEla" class='awrnc'>0.00</td><td align="right" headers="%DBtime JavaEla" class='awrnc'>0.00</td><td align="right" class='awrnc'>48.61</td><td align="right" headers="%bgtime bgCPU" class='awrncbb'>21.78</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>50.00</td><td align="right" class='awrclbt'>8.85</td><td align="right" class='awrct'>99.95</td><td align="right" class='awrct'>0.03</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>50.00</td><td align="right" class='awrcbbt'>23.58</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#629">Back to Time Model Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="621"></a>
<h2 class="awr">
Wait Events Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12011">Foreground Wait Classes -	% of Total DB time</a></li>
<li class="awr"><a class="awr" href="#12012">Foreground Wait Classes</a></li>
<li class="awr"><a class="awr" href="#12013">Foreground Wait Classes -	% of DB time </a></li>
<li class="awr"><a class="awr" href="#12050">Top Timed Events</a></li>
<li class="awr"><a class="awr" href="#12051">Top Timed Foreground Events</a></li>
<li class="awr"><a class="awr" href="#12052">Top Timed Background Events</a></li>
<li class="awr"><a class="awr" href="#12053">Foreground Wait Events (Global)</a></li>
<li class="awr"><a class="awr" href="#12054">Background Wait Events (Global)</a></li>
<li class="awr"><a class="awr" href="#12055">Wait Event Histogram (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12011"></a>
<h3 class="awr">Foreground Wait Classes -  % of Total DB time</h3>
<ul>
<li class="awr"> Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time</li>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes -  % of Total DB time. . Cluster-wide totals of wait class foreground wait times as a percentage of the cluster-wide DB time"><tr><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">User I/O</th><th class="awrbg" scope="col">Sys I/O</th><th class="awrbg" scope="col">Other</th><th class="awrbg" scope="col">Applic</th><th class="awrbg" scope="col">Commit</th><th class="awrbg" scope="col">Network</th><th class="awrbg" scope="col">Concurcy</th><th class="awrbg" scope="col">Config</th><th class="awrbg" scope="col">Cluster</th><th class="awrbg" scope="col">Admin</th><th class="awrbg" scope="col">Scheduler</th><th class="awrbg" scope="col">DB CPU</th></tr>
<tr><td class='awrc'>&#160;</td><td align="right" class='awrc'>17.33</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.26</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>28.43</td><td align="right" class='awrc'>48.74</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>8.76</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12012"></a>
<h3 class="awr">Foreground Wait Classes</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">User I/O(s)</th><th class="awrbg" scope="col">Sys I/O(s)</th><th class="awrbg" scope="col">Other(s)</th><th class="awrbg" scope="col">Applic (s)</th><th class="awrbg" scope="col">Commit (s)</th><th class="awrbg" scope="col">Network (s)</th><th class="awrbg" scope="col">Concurcy (s)</th><th class="awrbg" scope="col">Config (s)</th><th class="awrbg" scope="col">Cluster (s)</th><th class="awrbg" scope="col">Admin (s)</th><th class="awrbg" scope="col">Scheduler (s)</th><th class="awrbg" scope="col">DB CPU (s)</th><th class="awrbg" scope="col">DB time</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>7,442.78</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>640.23</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>8.68</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>50.91</td><td align="right" class='awrc'>14,502.34</td><td align="right" class='awrc'>12,630.39</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>2,949.59</td><td align="right" class='awrc'>36,385.25</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>3,827.56</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>827.53</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>1.81</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>9.53</td><td align="right" class='awrnc'>3,988.72</td><td align="right" class='awrnc'>19,064.44</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2,747.87</td><td align="right" class='awrnc'>28,647.57</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>11,270.34</td><td align="right" class='awrct'>0.03</td><td align="right" class='awrct'>1,467.75</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>10.49</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>60.44</td><td align="right" class='awrct'>18,491.06</td><td align="right" class='awrct'>31,694.83</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>5,697.47</td><td align="right" class='awrct'>65,032.82</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>5,635.17</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>733.88</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>5.25</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>30.22</td><td align="right" class='awrnc'>9,245.53</td><td align="right" class='awrnc'>15,847.42</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>2,848.73</td><td align="right" class='awrnc'>32,516.41</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>2,556.35</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>132.44</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>4.86</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>29.27</td><td align="right" class='awrc'>7,434.26</td><td align="right" class='awrc'>4,549.56</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>142.64</td><td align="right" class='awrc'>5,471.37</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12013"></a>
<h3 class="awr">Foreground Wait Classes -  % of DB time </h3>
<ul>
<li class="awr"> % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time</li>
</ul>
<table border="0" class="tdiff" summary="Foreground Wait Classes -  % of DB time . . % of Total DB time - instance DB time as a percentage of the cluster-wide total DB time"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 12" id="%DBtime">% DB time</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="UserI/O">User I/O</th><th class="awrbg" scope="col" id="SysI/O">Sys I/O</th><th class="awrbg" scope="col" id="Other">Other</th><th class="awrbg" scope="col" id="Applic">Applic</th><th class="awrbg" scope="col" id="Commit">Commit</th><th class="awrbg" scope="col" id="Network">Network</th><th class="awrbg" scope="col" id="Concurcy">Concurcy</th><th class="awrbg" scope="col" id="Config">Config</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Admin">Admin</th><th class="awrbg" scope="col" id="Scheduler">Scheduler</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col">% Total DB time</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="%DBtime UserI/O" class='awrclb'>20.46</td><td align="right" headers="%DBtime SysI/O" class='awrc'>0.00</td><td align="right" headers="%DBtime Other" class='awrc'>1.76</td><td align="right" headers="%DBtime Applic" class='awrc'>0.00</td><td align="right" headers="%DBtime Commit" class='awrc'>0.02</td><td align="right" headers="%DBtime Network" class='awrc'>0.00</td><td align="right" headers="%DBtime Concurcy" class='awrc'>0.14</td><td align="right" headers="%DBtime Config" class='awrc'>39.86</td><td align="right" headers="%DBtime Cluster" class='awrc'>34.71</td><td align="right" headers="%DBtime Admin" class='awrc'>&#160;</td><td align="right" headers="%DBtime Scheduler" class='awrc'>&#160;</td><td align="right" headers="%DBtime DBCPU" class='awrcrb'>8.11</td><td align="right" class='awrc'>55.95</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="%DBtime UserI/O" class='awrnclb'>13.36</td><td align="right" headers="%DBtime SysI/O" class='awrnc'>0.00</td><td align="right" headers="%DBtime Other" class='awrnc'>2.89</td><td align="right" headers="%DBtime Applic" class='awrnc'>0.00</td><td align="right" headers="%DBtime Commit" class='awrnc'>0.01</td><td align="right" headers="%DBtime Network" class='awrnc'>0.00</td><td align="right" headers="%DBtime Concurcy" class='awrnc'>0.03</td><td align="right" headers="%DBtime Config" class='awrnc'>13.92</td><td align="right" headers="%DBtime Cluster" class='awrnc'>66.55</td><td align="right" headers="%DBtime Admin" class='awrnc'>&#160;</td><td align="right" headers="%DBtime Scheduler" class='awrnc'>&#160;</td><td align="right" headers="%DBtime DBCPU" class='awrncrb'>9.59</td><td align="right" class='awrnc'>44.05</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>16.91</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>2.32</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.09</td><td align="right" class='awrct'>26.89</td><td align="right" class='awrct'>50.63</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrct'>&#160;</td><td align="right" class='awrcrbt'>8.85</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12050"></a>
<h3 class="awr">Top Timed Events</h3>
<ul>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time ' 	     : Per-instance 'Wait Time Avg ' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Events. . Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time ' : Per-instance 'Wait Time Avg ' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>1,876,600</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>20,108.50</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>30.92</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.37ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>11.30ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>660.53us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>22,242,758</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>11,271.33</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>506.74us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>17.33</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>504.06us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>350.24us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>657.88us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>217.53us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>free buffer waits</td><td align="right" headers="Event Waits" class='awrclb'>1,107,511</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10,515.26</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.49ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>16.17</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.49ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.47ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.50ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>24.71us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>write complete waits</td><td align="right" headers="Event Waits" class='awrnclb'>1,777</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6,459.96</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3635.32ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.93</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3247.66ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2230.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4265.20ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>1439.02ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5,697.47</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>8.76</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>241,040</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4,231.54</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>17.56ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>6.51</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>17.31ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>13.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>20.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>4.73ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrclb'>265,494</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,045.18</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.70ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.70ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>8.19ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>686.66us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>185,089</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,917.67</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.95</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.89ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>602.27us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrclb'>449</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,544.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3438.74ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2604.86ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1493.84ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3715.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>1571.22ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>264,385</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,447.76</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.48ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.23</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.60ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.47ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.73ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>182.78us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>Cluster</td><td headers="Wait Event" class='awrct'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclbt'>700,974</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>7,921.42</td><td align="right" headers="WaitTime AvgWait" class='awrct'>11.30ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>21.77</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>free buffer waits</td><td align="right" headers="Event Waits" class='awrnclb'>823,076</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>7,822.08</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.50ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>21.50</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>11,315,362</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7,444.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>657.88us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>20.46</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>write complete waits</td><td align="right" headers="Event Waits" class='awrnclb'>1,227</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5,233.40</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4265.20ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>14.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,949.59</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>8.11</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>129,335</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,671.61</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>20.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>7.34</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrclb'>393</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,460.34</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3715.88ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>4.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>132,293</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,083.55</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.19ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.98</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>70,395</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>766.50</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.89ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.11</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>18,170</td><td align="right" headers="Event %Timeouts" class='awrnc'>84.01</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>628.77</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>34.60ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.73</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>Cluster</td><td headers="Wait Event" class='awrct'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclbt'>1,175,626</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>12,187.08</td><td align="right" headers="WaitTime AvgWait" class='awrct'>10.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>42.54</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>10,927,396</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,827.22</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>350.24us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>13.36</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,747.87</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>9.59</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>free buffer waits</td><td align="right" headers="Event Waits" class='awrnclb'>284,435</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,693.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.47ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.40</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>111,705</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,559.93</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.96ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>5.45</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>262,491</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,436.90</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.47ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>2,298</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,384.48</td><td align="right" headers="WaitTime AvgWait" class='awrc'>602.47ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>4.83</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>write complete waits</td><td align="right" headers="Event Waits" class='awrnclb'>550</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,226.56</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2230.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>4.28</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>114,694</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,151.17</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.04ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>4.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>133,201</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>961.63</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.22ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.36</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12051"></a>
<h3 class="awr">Top Timed Foreground Events</h3>
<ul>
<li class="awr"> Foreground Activity is captured in release 11g and above </li>
<li class="awr"> For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity </li>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time'		    : Per-instance 'Wait Time Avg' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Foreground Events. . Foreground Activity is captured in release 11g and above. For prior releases, Foreground Activity is computed as difference between Total Activty and Background Activity. Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time' : Per-instance 'Wait Time Avg' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>1,875,030</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>20,090.93</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.71ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>30.89</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.37ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>11.30ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>661.20us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>22,237,980</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>11,268.44</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>506.72us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>17.33</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>504.03us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>350.19us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>657.88us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>217.57us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>free buffer waits</td><td align="right" headers="Event Waits" class='awrclb'>1,106,919</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10,503.41</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.49ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>16.15</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.48ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.47ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.50ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>19.50us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>write complete waits</td><td align="right" headers="Event Waits" class='awrnclb'>1,771</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6,443.66</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3638.43ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.91</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3246.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2222.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4269.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>1447.25ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5,697.47</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>8.76</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>240,951</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4,230.28</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>17.56ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>6.50</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>17.31ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>13.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>20.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>4.73ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrclb'>265,494</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,045.18</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.70ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.70ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>8.19ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>686.66us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>184,618</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,912.92</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.94</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.89ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>600.17us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrclb'>447</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,543.99</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3454.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2623.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1520.99ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3725.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>1558.72ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>263,979</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,446.60</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.48ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.22</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.61ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.48ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.73ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>179.91us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>Cluster</td><td headers="Wait Event" class='awrct'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclbt'>700,472</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>7,915.86</td><td align="right" headers="WaitTime AvgWait" class='awrct'>11.30ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>21.76</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>free buffer waits</td><td align="right" headers="Event Waits" class='awrnclb'>822,661</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>7,811.95</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.50ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>21.47</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>11,313,353</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7,442.78</td><td align="right" headers="WaitTime AvgWait" class='awrc'>657.88us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>20.46</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>write complete waits</td><td align="right" headers="Event Waits" class='awrnclb'>1,225</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5,230.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4269.43ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>14.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,949.59</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>8.11</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>129,275</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,670.36</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>20.66ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>7.34</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrclb'>392</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,460.34</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3725.35ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>4.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>132,293</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,083.55</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>8.19ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.98</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>69,963</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>761.80</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.89ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.09</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>2,850</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>624.88</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>219.26ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.72</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>Cluster</td><td headers="Wait Event" class='awrct'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclbt'>1,174,558</td><td align="right" headers="Event %Timeouts" class='awrct'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>12,175.07</td><td align="right" headers="WaitTime AvgWait" class='awrct'>10.37ms</td><td align="right" headers="WaitTime %DBtime" class='awrct'>42.50</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>10,924,627</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>3,825.67</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>350.19us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>13.35</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>DB CPU</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,747.87</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>9.59</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>free buffer waits</td><td align="right" headers="Event Waits" class='awrnclb'>284,258</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,691.46</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.47ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.40</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>111,676</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,559.92</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.97ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>5.45</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>262,085</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,435.74</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.48ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>5.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>2,298</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,384.48</td><td align="right" headers="WaitTime AvgWait" class='awrc'>602.47ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>4.83</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>write complete waits</td><td align="right" headers="Event Waits" class='awrnclb'>546</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,213.60</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2222.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>4.24</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>114,655</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,151.12</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.04ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>4.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>133,201</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>961.63</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.22ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.36</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12052"></a>
<h3 class="awr">Top Timed Background Events</h3>
<ul>
<li class="awr"> % of bg time: % of background elapsed time </li>
<li class="awr"> Instance '*'  - cluster wide summary </li>
<li class="awr">	  '*'  Waits, %Timeouts, Wait Time Total(s)	 : Cluster-wide total for the wait event </li>
<li class="awr">	  '*'  'Wait Time Avg'			    : Cluster-wide average computed as (Wait Time Total / Event Waits) </li>
<li class="awr">	  '*'  Summary 'Avg Wait Time'		    : Per-instance 'Wait Time Avg' used to compute the following statistics </li>
<li class="awr">	  '*'  [Avg/Min/Max/Std Dev]			 : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg' </li>
<li class="awr">	  '*'  Cnt					 : count of instances with wait times for the event</li>
</ul>
<table border="0" class="tdiff" summary="Top Timed Background Events. . % of bg time: % of background elapsed time. Instance '*' - cluster wide summary. '*' Waits, %Timeouts, Wait Time Total(s) : Cluster-wide total for the wait event. '*' 'Wait Time Avg' : Cluster-wide average computed as (Wait Time Total / Event Waits). '*' Summary 'Avg Wait Time' : Per-instance 'Wait Time Avg' used to compute the following statistics. '*' [Avg/Min/Max/Std Dev] : average/minimum/maximum/standard deviation of per-instance 'Wait Time Avg'. '*' Cnt : count of instances with wait times for the event"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 5" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Cnt">Cnt</th></tr>
<tr><td align="right" class='awrc'>*</td><td headers="Wait Class" class='awrclb'>&#160;</td><td headers="Wait Event" class='awrc'>background cpu time</td><td align="right" headers="Event Waits" class='awrclb'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,320.46</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrc'>23.63</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>22,311</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>502.52</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>22.52ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>8.99</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>23.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>18.79ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>27.59ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>6.22ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>21,706</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>240.23</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>4.30</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.99ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.45ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>11.52ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>757.56us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: RO - fast object reuse</td><td align="right" headers="Event Waits" class='awrnclb'>346</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>118.57</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>342.69ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.12</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>295.88ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>50.44ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>541.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>347.10ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrclb'>156</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>73.76</td><td align="right" headers="WaitTime AvgWait" class='awrc'>472.79ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>1.32</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>515.74ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>444.47ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>587.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>100.80ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrnclb'>18</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>30.29</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1682.73ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.54</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1753.73ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1434.20ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2073.26ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>451.89ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>336</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>30.12</td><td align="right" headers="WaitTime AvgWait" class='awrc'>89.65ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.54</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>89.82ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>88.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>91.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>2.52ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrnclb'>944</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>19.15</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>20.29ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.34</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>21.53ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>536.16us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>42.53ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>29.69ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Join ACK</td><td align="right" headers="Event Waits" class='awrclb'>214</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>17.91</td><td align="right" headers="WaitTime AvgWait" class='awrc'>83.70ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.32</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>50.95ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>94.75ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>61.94ms</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>2</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   *</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>gcs log flush sync</td><td align="right" headers="Event Waits" class='awrnclb'>61,408</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>17.71</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>288.32us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.32</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>283.13us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>265.12us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>301.14us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>25.47us</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>2</td></tr>
<tr><td align="right" class='awrct'>1</td><td headers="Wait Class" class='awrclbt'>&#160;</td><td headers="Wait Event" class='awrct'>background cpu time</td><td align="right" headers="Event Waits" class='awrclbt'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrct'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>728.94</td><td align="right" headers="WaitTime AvgWait" class='awrct'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrct'>25.39</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>9,462</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>261.07</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>27.59ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.09</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>9,244</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>96.62</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.45ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>3.36</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrnclb'>125</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>55.56</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>444.47ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>1.93</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>184</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>16.20</td><td align="right" headers="WaitTime AvgWait" class='awrc'>88.04ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.56</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrnclb'>11</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>15.78</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1434.20ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.55</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrclb'>111</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>11.74</td><td align="right" headers="WaitTime AvgWait" class='awrc'>105.74ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.41</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>free buffer waits</td><td align="right" headers="Event Waits" class='awrnclb'>415</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>10.13</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>24.41ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.35</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrclb'>Application</td><td headers="Wait Event" class='awrc'>enq: RO - fast object reuse</td><td align="right" headers="Event Waits" class='awrclb'>140</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>50.44ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.25</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   1</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>gcs log flush sync</td><td align="right" headers="Event Waits" class='awrnclb'>21,859</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>5.80</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>265.12us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.20</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrct'>2</td><td headers="Wait Class" class='awrclbt'>&#160;</td><td headers="Wait Event" class='awrct'>background cpu time</td><td align="right" headers="Event Waits" class='awrclbt'>&#160;</td><td align="right" headers="Event %Timeouts" class='awrct'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclbt'>591.52</td><td align="right" headers="WaitTime AvgWait" class='awrct'>&#160;</td><td align="right" headers="WaitTime %DBtime" class='awrct'>21.78</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclbt'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrct'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>12,849</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>241.46</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>18.79ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>8.89</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>12,462</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>143.61</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.52ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>5.29</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: RO - fast object reuse</td><td align="right" headers="Event Waits" class='awrnclb'>206</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>111.51</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>541.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>4.11</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>444</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>18.88</td><td align="right" headers="WaitTime AvgWait" class='awrc'>42.53ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.70</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrnclb'>31</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>18.20</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>587.02ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.67</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Join ACK</td><td align="right" headers="Event Waits" class='awrclb'>187</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>17.72</td><td align="right" headers="WaitTime AvgWait" class='awrc'>94.75ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.65</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrnclb'>1,026</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>14.97</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>14.59ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.55</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrclb'>7</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>14.51</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2073.26ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.53</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">   2</div></td><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>152</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>13.92</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>91.60ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.51</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Cnt" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12053"></a>
<h3 class="awr">Foreground Wait Events (Global)</h3>
<ul>
<li class="awr"> s - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]  </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
</ul>
<table border="0" class="tdiff" summary="This table displays foreground wait event information"><tr>
<th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 4" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%DBtime">%DB time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrclb'>1,875,030</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>20,090.93</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.71ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>30.89</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.37ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>11.30ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>661.20us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>22,237,980</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>11,268.44</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>506.72us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>17.33</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>504.03us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>350.19us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>657.88us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>217.57us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>free buffer waits</td><td align="right" headers="Event Waits" class='awrclb'>1,106,919</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10,503.41</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.49ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>16.15</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.48ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.47ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.50ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>19.50us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>write complete waits</td><td align="right" headers="Event Waits" class='awrnclb'>1,771</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>6,443.66</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3638.43ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>9.91</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3246.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2222.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4269.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1447.25ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>240,951</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4,230.28</td><td align="right" headers="WaitTime AvgWait" class='awrc'>17.56ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>6.50</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>17.31ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>13.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>20.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.73ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant read-mostly invalidation</td><td align="right" headers="Event Waits" class='awrnclb'>265,494</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,045.18</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.70ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>3.14</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.70ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.22ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>8.19ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>686.66us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrclb'>184,618</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,912.92</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.36ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.94</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.46ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.89ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>600.17us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrnclb'>447</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,543.99</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3454.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.37</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2623.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1520.99ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3725.35ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1558.72ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>263,979</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,446.60</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.48ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.22</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.61ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.48ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.73ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>179.91us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>7,235</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,435.89</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>198.46ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>2.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>202.10ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>184.95ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>219.26ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>24.26ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>2,365</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,425.24</td><td align="right" headers="WaitTime AvgWait" class='awrc'>602.64ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>2.19</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>605.44ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>602.47ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>608.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.20ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrnclb'>425</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>265.77</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>625.34ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.41</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>639.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>623.14ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>656.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>23.71ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant congested</td><td align="right" headers="Event Waits" class='awrclb'>3,814</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>137.68</td><td align="right" headers="WaitTime AvgWait" class='awrc'>36.10ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>35.66ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>30.86ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>40.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.78ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrnclb'>18</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>56.91</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3161.81ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.09</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2844.45ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2368.42ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3320.48ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>673.21ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrclb'>4,957</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>51.19</td><td align="right" headers="WaitTime AvgWait" class='awrc'>10.33ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.08</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.30ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.23ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>10.37ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>103.58us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant congested</td><td align="right" headers="Event Waits" class='awrnclb'>2,538</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>27.29</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.75ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.04</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.88ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.75ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>11.01ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>183.15us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>1,540</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>22.25</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.45ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.03</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>17.09ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>11.76ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>22.42ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>7.54ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrnclb'>41</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>12.62</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>307.72ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>308.79ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>294.28ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>323.29ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>20.51ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Commit</td><td headers="Wait Event" class='awrc'>log file sync</td><td align="right" headers="Event Waits" class='awrclb'>146</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>10.49</td><td align="right" headers="WaitTime AvgWait" class='awrc'>71.85ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>63.75ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>46.37ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>81.14ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>24.59ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>1,305</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>9.73</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.45ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.38ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>8.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.75ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>IPC send completion sync</td><td align="right" headers="Event Waits" class='awrclb'>340</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>9.44</td><td align="right" headers="WaitTime AvgWait" class='awrc'>27.77ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>16.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>696.16us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>31.69ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>21.92ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" headers="Event Waits" class='awrnclb'>213</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8.95</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>42.04ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>41.93ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>19.31ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>64.55ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>31.99ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch free</td><td align="right" headers="Event Waits" class='awrclb'>1,532</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>8.79</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.74ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.27ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>310.54us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>12.22ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>8.42ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current block congested</td><td align="right" headers="Event Waits" class='awrnclb'>47</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>8.78</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>186.75ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>115.48ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.42ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>223.54ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>152.82ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc buffer busy release</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>3.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>749.91ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>749.91ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>749.91ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>749.91ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: PS - contention</td><td align="right" headers="Event Waits" class='awrnclb'>109</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.92</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.64</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>24.20ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>14.33ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>718.27us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>27.95ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>19.26ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc remaster</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1999.61ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1999.61ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1999.61ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1999.61ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrnclb'>41</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.78</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>43.52ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>24.49ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>851.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>48.13ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>33.43ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr failure</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.71</td><td align="right" headers="WaitTime AvgWait" class='awrc'>853.51ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>853.51ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>853.51ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>853.51ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>cursor: pin S wait on X</td><td align="right" headers="Event Waits" class='awrnclb'>39</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.40</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>35.88ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>35.88ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>35.88ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>35.88ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block congested</td><td align="right" headers="Event Waits" class='awrclb'>9</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>115.81ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>76.05ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.49ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>147.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>101.21ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: cache buffers chains</td><td align="right" headers="Event Waits" class='awrnclb'>3,843</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.89</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>231.81us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>294.99us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>176.72us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>413.27us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>167.27us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: gcs resource hash</td><td align="right" headers="Event Waits" class='awrclb'>565</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.88</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.56ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>288.83us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.68ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.40ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache: mutex X</td><td align="right" headers="Event Waits" class='awrnclb'>326</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.74</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.26ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.32ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.52ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.69ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>gcs drm freeze in enter server mode</td><td align="right" headers="Event Waits" class='awrclb'>9</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.46</td><td align="right" headers="WaitTime AvgWait" class='awrc'>51.55ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>51.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>51.55ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>51.55ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache load lock</td><td align="right" headers="Event Waits" class='awrnclb'>86</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.40</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.65ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.65ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.65ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>89</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.35</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.97ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.97ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrnclb'>67</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.26</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.90ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.90ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.90ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.90ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: gc element</td><td align="right" headers="Event Waits" class='awrclb'>514</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.14</td><td align="right" headers="WaitTime AvgWait" class='awrc'>280.54us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>285.31us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>197.79us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>372.83us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>123.77us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>kksfbc child completion</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.10</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>49.97ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>49.97ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>49.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>49.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PGA memory operation</td><td align="right" headers="Event Waits" class='awrclb'>310</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>240.18us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>255.81us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>53.93us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>457.69us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>285.50us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: reap credit</td><td align="right" headers="Event Waits" class='awrnclb'>3,137</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>22.51us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>20.42us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>17.36us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>23.49us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.34us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: enqueue hash chains</td><td align="right" headers="Event Waits" class='awrclb'>273</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>237.24us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>234.74us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>228.11us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>241.37us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>9.38us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrnclb'>128</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>415.75us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>415.75us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>415.75us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>415.75us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: shared pool</td><td align="right" headers="Event Waits" class='awrclb'>136</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>384.55us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>381.26us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>157.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>604.86us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>316.21us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrnclb'>59</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>877.05us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>295.36us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>933.37us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>row cache lock</td><td align="right" headers="Event Waits" class='awrclb'>26</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.86ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.86ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.86ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.86ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: ges resource hash list</td><td align="right" headers="Event Waits" class='awrnclb'>85</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>533.24us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>488.12us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>62.08us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>914.17us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>602.52us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: cache buffers lru chain</td><td align="right" headers="Event Waits" class='awrclb'>304</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>145.31us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>144.21us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>127.44us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>160.98us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>23.72us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>direct path write</td><td align="right" headers="Event Waits" class='awrnclb'>13</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.62ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.62ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.62ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.62ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>162</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>181.01us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>217.10us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>172.81us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>261.40us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>62.64us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges enter server mode</td><td align="right" headers="Event Waits" class='awrnclb'>3,751</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.16us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.24us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.75us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.06us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrclb'>11</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.52ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.52ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.52ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.52ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: WF - contention</td><td align="right" headers="Event Waits" class='awrnclb'>18</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>866.28us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>866.28us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>866.28us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>866.28us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: TO - contention</td><td align="right" headers="Event Waits" class='awrclb'>10</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.47ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.47ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.47ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: object queue header operation</td><td align="right" headers="Event Waits" class='awrnclb'>52</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>240.31us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>212.52us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>132.24us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>292.80us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>113.54us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>lock deadlock retry</td><td align="right" headers="Event Waits" class='awrclb'>421</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>24.84us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>26.04us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>24.65us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>27.43us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.96us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: call allocation</td><td align="right" headers="Event Waits" class='awrnclb'>25</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>396.56us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>321.20us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>111.88us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>530.53us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>296.03us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>read by other session</td><td align="right" headers="Event Waits" class='awrclb'>9</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.07ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.07ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.07ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrnclb'>6</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.27ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.27ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.27ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.27ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: redo allocation</td><td align="right" headers="Event Waits" class='awrclb'>44</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>113.25us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>110.60us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>100.88us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>120.32us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>13.75us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>SQL*Net break/reset to client</td><td align="right" headers="Event Waits" class='awrnclb'>72</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>60.35us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>60.35us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>60.35us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>60.35us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: undo global data</td><td align="right" headers="Event Waits" class='awrclb'>16</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>233.13us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>238.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>228.25us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>247.75us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>13.79us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file operations I/O</td><td align="right" headers="Event Waits" class='awrnclb'>106</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>31.85us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>29.36us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>24.46us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>34.25us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.92us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Network</td><td headers="Wait Event" class='awrc'>SQL*Net message to client</td><td align="right" headers="Event Waits" class='awrclb'>595</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.20us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.25us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.94us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.56us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>435.70ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: FB - contention</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.31ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.31ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.31ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>wait list latch free</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.12ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.12ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.10ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.14ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>21.92us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>name-service call wait</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>413.25us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>413.25us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>404.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>422.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>13.08us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current retry</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.30ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.30ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.30ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.30ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" headers="Event Waits" class='awrnclb'>47</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.04us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.04us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>11.04us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>11.04us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>429.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>429.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>429.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>429.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: messages</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>213.00us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>213.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>213.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>213.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Network</td><td headers="Wait Event" class='awrc'>IPC group service call</td><td align="right" headers="Event Waits" class='awrclb'>25</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.36us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>12.29us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.86us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>14.72us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.44us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX qref latch</td><td align="right" headers="Event Waits" class='awrnclb'>13</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.08us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.08us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>11.08us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>11.08us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>buffer deadlock</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>17.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>17.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>17.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>17.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>library cache: bucket mutex X</td><td align="right" headers="Event Waits" class='awrnclb'>4</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.00us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.33us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.89us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>AWR Flush</td><td align="right" headers="Event Waits" class='awrclb'>5</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.80us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.80us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.80us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.80us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>asynch descriptor resize</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.00us</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>12.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>12.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>12.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.00us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>watchdog main loop</td><td align="right" headers="Event Waits" class='awrnclb'>1,410</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4,224.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2995.75ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>6.50</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2995.62ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2991.23ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3000.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.21ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>SQL*Net message from client</td><td align="right" headers="Event Waits" class='awrclb'>592</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>360.59</td><td align="right" headers="WaitTime AvgWait" class='awrc'>609.10ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.55</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>522.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.71ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1043.95ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>736.98ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Execution Msg</td><td align="right" headers="Event Waits" class='awrnclb'>634</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>33.51</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>52.86ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.05</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>52.55ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>28.10ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>77.00ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>34.58ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq Credit: send blkd</td><td align="right" headers="Event Waits" class='awrclb'>587</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.96</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.05ms</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.59ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>8.38ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.38ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Msg Fragment</td><td align="right" headers="Event Waits" class='awrnclb'>774</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.67</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.45ms</td><td align="right" headers="WaitTime %DBtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.45ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.23ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.67ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.72ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq Credit: need buffer</td><td align="right" headers="Event Waits" class='awrclb'>36</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>371.94us</td><td align="right" headers="WaitTime %DBtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>371.94us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>371.94us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>371.94us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12054"></a>
<h3 class="awr">Background Wait Events (Global)</h3>
<ul>
<li class="awr"> s - second, ms - millisecond, us - microsecond, ns - nanosecond </li>
<li class="awr"> Summary 'Avg Wait Time':  Per-instance 'Wait Time Avg' used to compute [Avg/Min/Max/Std Dev]  </li>
<li class="awr"> ordered by wait time desc, waits desc (idle events last) </li>
</ul>
<table border="0" class="tdiff" summary="This table displays background wait event information"><tr>
<th class="awrbg" colspan=" 2" id="Wait">Wait</th>
<th class="awrbg" colspan=" 2" id="Event">Event</th>
<th class="awrbg" colspan=" 3" id="WaitTime">Wait Time</th>
<th class="awrbg" colspan=" 4" id="SummaryAvgWaitTime">Summary Avg Wait Time</th>
</tr><tr>
<th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Event">Event</th><th class="awrbg" scope="col" id="Waits">Waits</th><th class="awrbg" scope="col" id="%Timeouts">%Timeouts</th><th class="awrbg" scope="col" id="Total(s)">Total(s)</th><th class="awrbg" scope="col" id="AvgWait">Avg Wait</th><th class="awrbg" scope="col" id="%bgtime">%bg time</th><th class="awrbg" scope="col" id="Avg">Avg</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file parallel write</td><td align="right" headers="Event Waits" class='awrclb'>22,311</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>502.52</td><td align="right" headers="WaitTime AvgWait" class='awrc'>22.52ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.09</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>23.19ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>18.79ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>27.59ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.22ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>21,706</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>240.23</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.07ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.04</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>10.99ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>10.45ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>11.52ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>757.56us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Application</td><td headers="Wait Event" class='awrc'>enq: RO - fast object reuse</td><td align="right" headers="Event Waits" class='awrclb'>346</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>118.57</td><td align="right" headers="WaitTime AvgWait" class='awrc'>342.69ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.02</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>295.88ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>50.44ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>541.31ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>347.10ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" headers="Event Waits" class='awrnclb'>156</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>73.76</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>472.79ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>515.74ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>444.47ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>587.02ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>100.80ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>buffer busy waits</td><td align="right" headers="Event Waits" class='awrclb'>18</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>30.29</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1682.73ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1753.73ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1434.20ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2073.26ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>451.89ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file parallel write</td><td align="right" headers="Event Waits" class='awrnclb'>336</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>30.12</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>89.65ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.01</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>89.82ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>88.04ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>91.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.52ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>Disk file Mirror Read</td><td align="right" headers="Event Waits" class='awrclb'>944</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>19.15</td><td align="right" headers="WaitTime AvgWait" class='awrc'>20.29ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>21.53ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>536.16us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>42.53ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>29.69ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Join ACK</td><td align="right" headers="Event Waits" class='awrnclb'>214</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>17.91</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>83.70ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>50.95ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.15ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>94.75ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>61.94ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>gcs log flush sync</td><td align="right" headers="Event Waits" class='awrclb'>61,408</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>17.71</td><td align="right" headers="WaitTime AvgWait" class='awrc'>288.32us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>283.13us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>265.12us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>301.14us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>25.47us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>1,570</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>17.58</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>11.20ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>11.17ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>11.09ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>11.25ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>112.27us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>write complete waits</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>16.30</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2717.22ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2455.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1670.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3240.34ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1109.72ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>IMR slave acknowledgement msg</td><td align="right" headers="Event Waits" class='awrnclb'>2,109</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>15.29</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.25ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.44ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>293.14us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.59ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>10.11ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block busy</td><td align="right" headers="Event Waits" class='awrclb'>112</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>12.82</td><td align="right" headers="WaitTime AvgWait" class='awrc'>114.49ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>595.87ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>105.74ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1085.99ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>693.14ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Configuration</td><td headers="Wait Event" class='awrnc'>free buffer waits</td><td align="right" headers="Event Waits" class='awrnclb'>592</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>11.85</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>20.02ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>17.06ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>24.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>10.39ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>reliable message</td><td align="right" headers="Event Waits" class='awrclb'>236</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>11.26</td><td align="right" headers="WaitTime AvgWait" class='awrc'>47.71ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>46.91ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>44.91ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>48.91ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.83ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" headers="Event Waits" class='awrnclb'>32,331</td><td align="right" headers="Event %Timeouts" class='awrnc'>99.72</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>7.19</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>222.45us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>224.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>194.32us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>253.68us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>41.98us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block lost</td><td align="right" headers="Event Waits" class='awrclb'>8</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>638.71ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>638.71ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>638.71ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>638.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc current grant busy</td><td align="right" headers="Event Waits" class='awrnclb'>474</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.75</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>10.01ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>6.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.26ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.80ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.74ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path write temp</td><td align="right" headers="Event Waits" class='awrclb'>151</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.47</td><td align="right" headers="WaitTime AvgWait" class='awrc'>29.62ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>29.45ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>25.90ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>33.00ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>5.02ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" headers="Event Waits" class='awrnclb'>28,786</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.17</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>144.79us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>146.95us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>131.53us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>162.37us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>21.81us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>1,320</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>4.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.07ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>905.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.56ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>4,783</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.88</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>602.54us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>610.55us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>559.85us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>661.24us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>71.69us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ASM file metadata operation</td><td align="right" headers="Event Waits" class='awrclb'>3,067</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.60</td><td align="right" headers="WaitTime AvgWait" class='awrc'>848.29us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>848.31us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>847.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>848.95us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>901.48ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>gcs remastering wait for read latch</td><td align="right" headers="Event Waits" class='awrnclb'>37</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.57</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>69.46ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>62.65ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>50.64ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>74.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>16.99ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CF - contention</td><td align="right" headers="Event Waits" class='awrclb'>72</td><td align="right" headers="Event %Timeouts" class='awrc'>50.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.39</td><td align="right" headers="WaitTime AvgWait" class='awrc'>33.24ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>33.00ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>31.74ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>34.26ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.78ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>KSV master wait</td><td align="right" headers="Event Waits" class='awrnclb'>1,156</td><td align="right" headers="Event %Timeouts" class='awrnc'>45.67</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2.27</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.96ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.96ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>5.57us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>IPC send completion sync</td><td align="right" headers="Event Waits" class='awrclb'>818</td><td align="right" headers="Event %Timeouts" class='awrc'>85.94</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2.09</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.56ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.37ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>33.51us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.71ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.31ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>row cache lock</td><td align="right" headers="Event Waits" class='awrnclb'>51</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.86</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>36.57ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>41.31ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>6.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>75.91ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>48.92ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block lost</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.84</td><td align="right" headers="WaitTime AvgWait" class='awrc'>613.08ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>613.08ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>613.08ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>613.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: reap credit</td><td align="right" headers="Event Waits" class='awrnclb'>99,737</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.79</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>17.93us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>17.93us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>17.62us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>18.25us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>445.58ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current grant 2-way</td><td align="right" headers="Event Waits" class='awrclb'>87</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.26</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.45ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>10.91ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>314.34us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>21.51ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>14.99ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant 2-way</td><td align="right" headers="Event Waits" class='awrnclb'>406</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.16</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2.86ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.86ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2.86ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>2.86ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block grant</td><td align="right" headers="Event Waits" class='awrclb'>41</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>26.00ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>37.39ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.48ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>73.30ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>50.78ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" headers="Event Waits" class='awrnclb'>214</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.92ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2.92ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>237.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.79ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" headers="Event Waits" class='awrclb'>214</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.81ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>177.41us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.47ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.75ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>control file sequential read</td><td align="right" headers="Event Waits" class='awrnclb'>3,983</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.88</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>220.09us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>218.04us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>184.43us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>251.65us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>47.53us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: PS - contention</td><td align="right" headers="Event Waits" class='awrclb'>142</td><td align="right" headers="Event %Timeouts" class='awrc'>13.38</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.86</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.06ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.17ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.19ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges inquiry response</td><td align="right" headers="Event Waits" class='awrnclb'>123</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.81</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>6.61ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.21ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>14.22ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7.78ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr multi block mixed</td><td align="right" headers="Event Waits" class='awrclb'>14</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.72</td><td align="right" headers="WaitTime AvgWait" class='awrc'>51.64ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>31.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.83ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>59.60ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>39.43ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch free</td><td align="right" headers="Event Waits" class='awrnclb'>1,638</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.59</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>361.13us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>372.03us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>325.55us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>418.52us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>65.74us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>System I/O</td><td headers="Wait Event" class='awrc'>log file sequential read</td><td align="right" headers="Event Waits" class='awrclb'>478</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.49</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.02ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.01ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>740.47us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.29ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>386.81us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>Disk file operations I/O</td><td align="right" headers="Event Waits" class='awrnclb'>617</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.44</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>715.92us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>706.98us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>557.88us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>856.08us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>210.86us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr disk read</td><td align="right" headers="Event Waits" class='awrclb'>49</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.37</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.49ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.68ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>8.46ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.79ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>Sync ASM rebalance</td><td align="right" headers="Event Waits" class='awrnclb'>66</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.31</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.64ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.74ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.68ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.79ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.49ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: MGA shared context root latch</td><td align="right" headers="Event Waits" class='awrclb'>175</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.25</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.43ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.24ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>542.45us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.94ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>.99ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>direct path write</td><td align="right" headers="Event Waits" class='awrnclb'>30</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.24</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.88ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>8.23ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.48ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>8.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.05ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block busy</td><td align="right" headers="Event Waits" class='awrclb'>123</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.22</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.79ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.40ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>576.94us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2.23ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.17ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: gcs resource hash</td><td align="right" headers="Event Waits" class='awrnclb'>528</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.20</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>380.86us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>389.17us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>242.84us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>535.51us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>206.96us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>lock escalate retry</td><td align="right" headers="Event Waits" class='awrclb'>17</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.17</td><td align="right" headers="WaitTime AvgWait" class='awrc'>9.94ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>9.94ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>9.94ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>9.94ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CGS wait for IPC msg</td><td align="right" headers="Event Waits" class='awrnclb'>10,743</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.16</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>15.15us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>15.15us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>14.46us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>15.83us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>.97us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr failure</td><td align="right" headers="Event Waits" class='awrclb'>159</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.15</td><td align="right" headers="WaitTime AvgWait" class='awrc'>926.67us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>926.67us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>926.67us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>926.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>User I/O</td><td headers="Wait Event" class='awrnc'>db file scattered read</td><td align="right" headers="Event Waits" class='awrnclb'>343</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.14</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>396.22us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>425.30us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>256.27us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>594.33us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>239.05us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>PGA memory operation</td><td align="right" headers="Event Waits" class='awrclb'>720</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.13</td><td align="right" headers="WaitTime AvgWait" class='awrc'>179.73us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>175.81us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>123.55us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>228.07us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>73.91us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>AQ: RAC AQ Network</td><td align="right" headers="Event Waits" class='awrnclb'>7,007</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.13</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>18.35us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>18.34us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>18.11us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>18.57us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>326.96ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>latch: cache buffers chains</td><td align="right" headers="Event Waits" class='awrclb'>407</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.11</td><td align="right" headers="WaitTime AvgWait" class='awrc'>260.15us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>257.09us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>249.74us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>264.45us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>10.40us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: MGA shared context latch</td><td align="right" headers="Event Waits" class='awrnclb'>241</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.10</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>422.55us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>388.99us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>278.19us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>499.78us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>156.69us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: gc element</td><td align="right" headers="Event Waits" class='awrclb'>250</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.09</td><td align="right" headers="WaitTime AvgWait" class='awrc'>373.78us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>371.47us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>323.36us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>419.58us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>68.04us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" headers="Event Waits" class='awrnclb'>84</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.07ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.07ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.03ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>59.31us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: cache buffers lru chain</td><td align="right" headers="Event Waits" class='awrclb'>612</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.09</td><td align="right" headers="WaitTime AvgWait" class='awrc'>143.62us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>133.94us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>107.51us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>160.38us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>37.38us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>System I/O</td><td headers="Wait Event" class='awrnc'>db file async I/O submit</td><td align="right" headers="Event Waits" class='awrnclb'>12,872</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.30us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.30us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>5.30us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>5.30us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>3.08ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>DFS lock handle</td><td align="right" headers="Event Waits" class='awrclb'>226</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.07</td><td align="right" headers="WaitTime AvgWait" class='awrc'>295.24us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>295.24us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>295.24us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>295.24us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Application</td><td headers="Wait Event" class='awrnc'>enq: TM - contention</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>20.35ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>30.29ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>462.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>60.12ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>42.19ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>oracle thread bootstrap</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>29.81ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>29.81ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>21.96ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>37.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>11.10ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>DLM cross inst call completion</td><td align="right" headers="Event Waits" class='awrnclb'>79</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>614.42us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>531.86us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>221.28us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>842.44us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>439.23us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>LGWR wait for redo copy</td><td align="right" headers="Event Waits" class='awrclb'>456</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrc'>106.21us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>106.26us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>106.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>106.52us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>362.48ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>kjctssqmg: quick message send wait</td><td align="right" headers="Event Waits" class='awrnclb'>124</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.05</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>380.05us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>355.28us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>227.28us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>483.27us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>181.01us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" headers="Event Waits" class='awrclb'>122</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrc'>297.62us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>302.19us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>280.74us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>323.65us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>30.34us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ksxr poll remote instances</td><td align="right" headers="Event Waits" class='awrnclb'>1,815</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.04</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>19.56us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>19.58us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>18.51us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>20.65us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.51us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Network</td><td headers="Wait Event" class='awrc'>IPC group service call</td><td align="right" headers="Event Waits" class='awrclb'>548</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>61.39us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>61.41us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>60.60us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>62.21us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.14us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: data query</td><td align="right" headers="Event Waits" class='awrnclb'>22</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.30ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.30ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.27ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.33ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>43.90us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>db file parallel read</td><td align="right" headers="Event Waits" class='awrclb'>9</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2.95ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.88ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>500.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.25ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.95ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: data update</td><td align="right" headers="Event Waits" class='awrnclb'>26</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.03</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>.96ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>835.86us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.11ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>196.85us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current block 2-way</td><td align="right" headers="Event Waits" class='awrclb'>17</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>811.29us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>801.33us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>632.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>.97ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>239.47us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: MGA heap latch</td><td align="right" headers="Event Waits" class='awrnclb'>71</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>146.32us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>107.08us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>42.29us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>171.88us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>91.64us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc buffer busy acquire</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.83ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.83ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.83ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.83ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: call allocation</td><td align="right" headers="Event Waits" class='awrnclb'>18</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>423.17us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>280.69us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>97.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>463.88us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>259.07us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc cr block congested</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>7.30ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>7.30ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>7.30ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.30ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Cluster</td><td headers="Wait Event" class='awrnc'>gc cr grant congested</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>7.14ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>7.14ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>7.14ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.14ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Cluster</td><td headers="Wait Event" class='awrc'>gc current multi block request</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>6.58ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>6.58ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>6.58ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.58ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: object queue header operation</td><td align="right" headers="Event Waits" class='awrnclb'>30</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>213.93us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>209.90us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>149.36us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>270.44us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>85.62us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: US - contention</td><td align="right" headers="Event Waits" class='awrclb'>5</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.24ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.41ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.14ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.68ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>384.49us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: WF - contention</td><td align="right" headers="Event Waits" class='awrnclb'>11</td><td align="right" headers="Event %Timeouts" class='awrnc'>9.09</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>548.18us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>579.60us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>541.20us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>618.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>54.31us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>cursor: pin S wait on X</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.57ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.57ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.57ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.57ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: checkpoint queue latch</td><td align="right" headers="Event Waits" class='awrnclb'>11</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>496.36us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>312.47us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>23.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>601.44us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>408.67us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>enq: CO - master slave det</td><td align="right" headers="Event Waits" class='awrclb'>6</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>711.83us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>711.83us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>711.83us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>711.83us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: redo allocation</td><td align="right" headers="Event Waits" class='awrnclb'>30</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>136.60us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>135.71us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>122.43us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>149.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>18.79us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>os thread creation</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.81ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.81ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.72ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.89ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>121.62us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges LMON to get to FTDONE</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>3.50ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>3.50ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>3.50ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3.50ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>libcache interrupt action by LCK</td><td align="right" headers="Event Waits" class='awrclb'>948</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.60us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.60us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.48us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3.72us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>167.46ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>lock deadlock retry</td><td align="right" headers="Event Waits" class='awrnclb'>265</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.62us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.62us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9.62us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>9.62us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path read</td><td align="right" headers="Event Waits" class='awrclb'>14</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>149.93us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>149.93us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>149.93us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>149.93us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Concurrency</td><td headers="Wait Event" class='awrnc'>latch: shared pool</td><td align="right" headers="Event Waits" class='awrnclb'>9</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>218.33us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>156.07us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>44.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>268.14us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>158.49us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>enq: HW - contention</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>831.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>831.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>620.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.04ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>298.40us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: AF - task serialization</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1.66ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1.66ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1.66ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.66ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>asynch descriptor resize</td><td align="right" headers="Event Waits" class='awrclb'>264</td><td align="right" headers="Event %Timeouts" class='awrc'>99.62</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>5.73us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>5.76us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>5.43us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>6.09us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>469.45ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: TA - contention</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>728.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>728.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>299.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>606.70us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Network</td><td headers="Wait Event" class='awrc'>SQL*Net message to client</td><td align="right" headers="Event Waits" class='awrclb'>259</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.68us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.72us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4.14us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>5.29us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>809.16ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>CSS operation: action</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>558.50us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>558.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>558.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>558.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache pin</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1.00ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1.00ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1.00ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1.00ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>latch: messages</td><td align="right" headers="Event Waits" class='awrnclb'>8</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>111.88us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>118.63us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>91.60us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>145.67us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>38.23us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>latch: ges resource hash list</td><td align="right" headers="Event Waits" class='awrclb'>4</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>193.25us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>193.25us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>193.25us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>193.25us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>enq: RA - RT ADDM flood control</td><td align="right" headers="Event Waits" class='awrnclb'>1</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>513.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>513.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>513.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>513.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Configuration</td><td headers="Wait Event" class='awrc'>latch: redo writing</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>215.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>215.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>116.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>314.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>140.01us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>GCR CSS group query</td><td align="right" headers="Event Waits" class='awrnclb'>22</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>12.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>12.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>11.36us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>12.64us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>899.95ns</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>GCR CSS group update</td><td align="right" headers="Event Waits" class='awrclb'>23</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.35us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>11.29us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>10.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>12.58us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.83us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges ipc enter server mode</td><td align="right" headers="Event Waits" class='awrnclb'>38</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.71us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.63us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>7.25us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.30us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>User I/O</td><td headers="Wait Event" class='awrc'>direct path read temp</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>100.50us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>100.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>100.50us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>100.50us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>ges enter server mode</td><td align="right" headers="Event Waits" class='awrnclb'>7</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>19.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>35.67us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>12.33us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>59.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>33.00us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Concurrency</td><td headers="Wait Event" class='awrc'>library cache: mutex X</td><td align="right" headers="Event Waits" class='awrclb'>3</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>13.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>13.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>AWR Flush</td><td align="right" headers="Event Waits" class='awrnclb'>3</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>4.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>4.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>4.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>buffer deadlock</td><td align="right" headers="Event Waits" class='awrclb'>1</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>11.00us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>11.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>11.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>11.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Other</td><td headers="Wait Event" class='awrnc'>undo_retention publish retry</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.00us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>5.00us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>6.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.41us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Other</td><td headers="Wait Event" class='awrc'>ges resource directory to be unfrozen</td><td align="right" headers="Event Waits" class='awrclb'>2</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>3.50us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>3.50us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>3.00us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4.00us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>707.11ns</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Idle Wait</td><td align="right" headers="Event Waits" class='awrnclb'>213</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>91,363.11</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>428.93 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>16.35</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>429.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>414.34 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>443.67 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>20.74 s</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Space Manager: slave idle wait</td><td align="right" headers="Event Waits" class='awrclb'>7,478</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>32,111.36</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4294.11ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>5.75</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4293.58ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>4272.43ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>4314.73ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>29.91ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>rdbms ipc message</td><td align="right" headers="Event Waits" class='awrnclb'>25,255</td><td align="right" headers="Event %Timeouts" class='awrnc'>51.83</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>16,426.61</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>650.43ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>2.94</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>650.47ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>649.02ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>651.93ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>2.06ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>class slave wait</td><td align="right" headers="Event Waits" class='awrclb'>8,657</td><td align="right" headers="Event %Timeouts" class='awrc'>78.86</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>5,013.94</td><td align="right" headers="WaitTime AvgWait" class='awrc'>579.18ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.90</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>576.88ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>526.71ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>627.04ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>70.94ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>LMS CR slave timer</td><td align="right" headers="Event Waits" class='awrnclb'>280,967</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,807.85</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>9.99ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.50</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>9.99ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>9.99ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>10.00ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>10.22us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>gcs yield cpu</td><td align="right" headers="Event Waits" class='awrclb'>100,105</td><td align="right" headers="Event %Timeouts" class='awrc'>96.02</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,800.87</td><td align="right" headers="WaitTime AvgWait" class='awrc'>27.98ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.50</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>27.98ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>27.89ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>28.08ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>133.13us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>gcs remote message</td><td align="right" headers="Event Waits" class='awrnclb'>4,792,482</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,224.82</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>464.23us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.40</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>466.33us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>438.28us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>494.37us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>39.66us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>wait for unread message on broadcast channel</td><td align="right" headers="Event Waits" class='awrclb'>1,078</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>2,112.66</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1959.80ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1959.82ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1959.19ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1960.45ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>894.19us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>ges remote message</td><td align="right" headers="Event Waits" class='awrnclb'>32,130</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>2,109.32</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>65.65ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.38</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>65.67ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>65.18ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>66.16ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>695.75us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>pmon timer</td><td align="right" headers="Event Waits" class='awrclb'>470</td><td align="right" headers="Event %Timeouts" class='awrc'>99.79</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,408.56</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2996.94ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.25</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2997.03ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2994.21ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2999.84ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>3.98ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>GCR sleep</td><td align="right" headers="Event Waits" class='awrnclb'>4,675</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,404.24</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>300.37ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.25</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>300.37ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>300.33ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>300.41ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>60.07us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>DIAG idle wait</td><td align="right" headers="Event Waits" class='awrclb'>15,102</td><td align="right" headers="Event %Timeouts" class='awrc'>58.09</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1,391.26</td><td align="right" headers="WaitTime AvgWait" class='awrc'>92.12ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.25</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>92.11ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>91.50ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>92.72ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>866.07us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>LGWR worker group idle</td><td align="right" headers="Event Waits" class='awrnclb'>2</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>1,200.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>600.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.21</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>300.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>shared server idle wait</td><td align="right" headers="Event Waits" class='awrclb'>0</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>720.14</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>VKRM Idle</td><td align="right" headers="Event Waits" class='awrnclb'>0</td><td align="right" headers="Event %Timeouts" class='awrnc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>720.06</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>dispatcher timer</td><td align="right" headers="Event Waits" class='awrclb'>12</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>720.06</td><td align="right" headers="WaitTime AvgWait" class='awrc'>60.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>60.01 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>500.16us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Data Guard: Gap Manager</td><td align="right" headers="Event Waits" class='awrnclb'>12</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>720.01</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>60.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>60.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>82.85us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>lreg timer</td><td align="right" headers="Event Waits" class='awrclb'>236</td><td align="right" headers="Event %Timeouts" class='awrc'>99.58</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>705.64</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2990.00ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2989.67ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2976.70ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>3002.64ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>18.34ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>OFS idle</td><td align="right" headers="Event Waits" class='awrnclb'>235</td><td align="right" headers="Event %Timeouts" class='awrnc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>705.00</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>2999.99ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>2999.99ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>2999.99ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>3000.00ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>9.19us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>pman timer</td><td align="right" headers="Event Waits" class='awrclb'>235</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>704.94</td><td align="right" headers="WaitTime AvgWait" class='awrc'>2999.73ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>2999.73ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>2999.73ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>2999.73ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>1.32us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>ASM background timer</td><td align="right" headers="Event Waits" class='awrnclb'>2,370</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>704.07</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>297.08ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>297.05ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>295.87ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>298.23ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>1.66ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>REPL Capture/Apply: RAC AQ qmn coordinator</td><td align="right" headers="Event Waits" class='awrclb'>11</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>703.42</td><td align="right" headers="WaitTime AvgWait" class='awrc'>63.95 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>64.31 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>60.35 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>68.26 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>5588.85ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>heartbeat redo informer</td><td align="right" headers="Event Waits" class='awrnclb'>703</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>703.09</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1000.13ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1000.13ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1000.12ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1000.13ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>7.76us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PING</td><td align="right" headers="Event Waits" class='awrclb'>664</td><td align="right" headers="Event %Timeouts" class='awrc'>20.18</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>700.36</td><td align="right" headers="WaitTime AvgWait" class='awrc'>1054.76ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>1054.72ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>1053.16ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>1056.27ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>2.20ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>ASM cluster membership changes</td><td align="right" headers="Event Waits" class='awrnclb'>400</td><td align="right" headers="Event %Timeouts" class='awrnc'>84.75</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>700.15</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>1750.39ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>1750.39ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1750.38ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1750.39ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>6.24us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Streams AQ: qmn coordinator idle wait</td><td align="right" headers="Event Waits" class='awrclb'>50</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>700.02</td><td align="right" headers="WaitTime AvgWait" class='awrc'>14.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>14.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>14.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>14.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>6.43us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>Streams AQ: qmn slave idle wait</td><td align="right" headers="Event Waits" class='awrnclb'>25</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>700.02</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>28.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>28.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>28.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>28.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>4.32us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>Streams AQ: waiting for time management or cleanup tasks</td><td align="right" headers="Event Waits" class='awrclb'>0</td><td align="right" headers="Event %Timeouts" class='awrc'>&#160;</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>700.00</td><td align="right" headers="WaitTime AvgWait" class='awrc'>&#160;</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>&#160;</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>&#160;</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>SCM slave idle</td><td align="right" headers="Event Waits" class='awrnclb'>7,092</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>699.96</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>98.70ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.13</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>98.69ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>98.43ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>98.95ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>363.82us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>AQPC idle</td><td align="right" headers="Event Waits" class='awrclb'>23</td><td align="right" headers="Event %Timeouts" class='awrc'>100.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>690.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>30.00 s</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.12</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>30.00 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>95.06us</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>smon timer</td><td align="right" headers="Event Waits" class='awrnclb'>9</td><td align="right" headers="Event %Timeouts" class='awrnc'>11.11</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>307.81</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>34.20 s</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.06</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>75.59 s</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>1085.67ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>150.10 s</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>105.37 s</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq: Parse Reply</td><td align="right" headers="Event Waits" class='awrclb'>214</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>7.86</td><td align="right" headers="WaitTime AvgWait" class='awrc'>36.71ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>56.70ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>29.97ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>83.43ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>37.80ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>PX Deq: Execute Reply</td><td align="right" headers="Event Waits" class='awrnclb'>924</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>4.97</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>5.38ms</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>21.73ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>4.37ms</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>39.09ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>24.56ms</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>PX Deq Credit: send blkd</td><td align="right" headers="Event Waits" class='awrclb'>398</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>1.91</td><td align="right" headers="WaitTime AvgWait" class='awrc'>4.79ms</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>4.02ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>828.22us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>7.22ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>4.52ms</td></tr>
<tr><td headers="Wait Class" class='awrnclb'>Idle</td><td headers="Wait Event" class='awrnc'>SQL*Net message from client</td><td align="right" headers="Event Waits" class='awrnclb'>260</td><td align="right" headers="Event %Timeouts" class='awrnc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrnclb'>0.24</td><td align="right" headers="WaitTime AvgWait" class='awrnc'>924.36us</td><td align="right" headers="WaitTime %bgtime" class='awrnc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrnclb'>.96ms</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrnc'>416.64us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrnc'>1.50ms</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrncrb'>765.10us</td></tr>
<tr><td headers="Wait Class" class='awrclb'>Idle</td><td headers="Wait Event" class='awrc'>RMA: IPC0 completion sync</td><td align="right" headers="Event Waits" class='awrclb'>761</td><td align="right" headers="Event %Timeouts" class='awrc'>0.00</td><td align="right" headers="WaitTime Total(s)" class='awrclb'>0.01</td><td align="right" headers="WaitTime AvgWait" class='awrc'>13.64us</td><td align="right" headers="WaitTime %bgtime" class='awrc'>0.00</td><td align="right" headers="SummaryAvgWaitTime Avg" class='awrclb'>13.64us</td><td align="right" headers="SummaryAvgWaitTime Min" class='awrc'>13.60us</td><td align="right" headers="SummaryAvgWaitTime Max" class='awrc'>13.68us</td><td align="right" headers="SummaryAvgWaitTime StdDev" class='awrcrb'>63.19ns</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12055"></a>
<h3 class="awr">Wait Event Histogram (Global)</h3>
<ul>
<li class="awr"> When % of Total Waits is  0.0 the count is displayed in parenthesis</li>
</ul>
<table border="0" class="tdiff" summary="This table displays wait event histogram information"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 22" id="%ofTotalWaits">% of Total Waits</th>
</tr><tr>
<th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Waits</th><th class="awrbg" scope="col" id="&lt;1us"> &lt;1us</th><th class="awrbg" scope="col" id="&lt;2us"> &lt;2us</th><th class="awrbg" scope="col" id="&lt;4us"> &lt;4us</th><th class="awrbg" scope="col" id="&lt;8us"> &lt;8us</th><th class="awrbg" scope="col" id="&lt;16us"> &lt;16us</th><th class="awrbg" scope="col" id="&lt;32us"> &lt;32us</th><th class="awrbg" scope="col" id="&lt;64us"> &lt;64us</th><th class="awrbg" scope="col" id="&lt;128us"> &lt;128us</th><th class="awrbg" scope="col" id="&lt;256us"> &lt;256us</th><th class="awrbg" scope="col" id="&lt;512us"> &lt;512us</th><th class="awrbg" scope="col" id="&lt;1ms"> &lt;1ms</th><th class="awrbg" scope="col" id="&lt;2ms"> &lt;2ms</th><th class="awrbg" scope="col" id="&lt;4ms"> &lt;4ms</th><th class="awrbg" scope="col" id="&lt;8ms"> &lt;8ms</th><th class="awrbg" scope="col" id="&lt;16ms"> &lt;16ms</th><th class="awrbg" scope="col" id="&lt;32ms"> &lt;32ms</th><th class="awrbg" scope="col" id="&lt;64ms"> &lt;64ms</th><th class="awrbg" scope="col" id="&lt;128ms"> &lt;128ms</th><th class="awrbg" scope="col" id="&lt;256ms"> &lt;256ms</th><th class="awrbg" scope="col" id="&lt;512ms"> &lt;512ms</th><th class="awrbg" scope="col" id="&lt;1s"> &lt;1s</th><th class="awrbg" scope="col" id="&gt;=1s"> &gt;=1s</th></tr>
<tr><td scope="row" class='awrc'>AQ: RAC AQ Network</td><td align="right" class='awrc'>6893</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>53.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ASM IO for non-blocking poll</td><td align="right" class='awrnc'>27.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>26.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.0(5)</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ASM file metadata operation</td><td align="right" class='awrc'>2993</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>20.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>13.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>AWR Flush</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>62.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CGS wait for IPC msg</td><td align="right" class='awrc'>10.6K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>69.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>23.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: action</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>CSS operation: data query</td><td align="right" class='awrc'>21</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>42.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>CSS operation: data update</td><td align="right" class='awrnc'>25</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>56.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>8.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>DFS lock handle</td><td align="right" class='awrc'>226</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>96.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>DLM cross inst call completion</td><td align="right" class='awrnc'>136</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>5.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>19.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Disk file Mirror Read</td><td align="right" class='awrc'>969</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>31.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>17.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>Disk file operations I/O</td><td align="right" class='awrnc'>731</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>31.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>6.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>GCR CSS group query</td><td align="right" class='awrc'>22</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>86.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>GCR CSS group update</td><td align="right" class='awrnc'>23</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>17.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>78.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IMR slave acknowledgement msg</td><td align="right" class='awrc'>2073</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>27.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>15.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>IPC group service call</td><td align="right" class='awrnc'>565</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>31.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>22.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>34.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>IPC send completion sync</td><td align="right" class='awrc'>1151</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>27.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>31.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.1</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>38.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>38.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>14.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.0(8)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>10.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.0(4)</td></tr>
<tr><td scope="row" class='awrc'>KSV master wait</td><td align="right" class='awrc'>1131</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>20.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>13.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>17.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>LGWR wait for redo copy</td><td align="right" class='awrnc'>445</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>22.7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>18.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>5.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>PGA memory operation</td><td align="right" class='awrc'>1024</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>32.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>8.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Join ACK</td><td align="right" class='awrnc'>208</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>36.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>22.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>15.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>1.4</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: Signal ACK EXT</td><td align="right" class='awrc'>208</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>52.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>5.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX Deq: Slave Session Stats</td><td align="right" class='awrnc'>420</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>21.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.2</td></tr>
<tr><td scope="row" class='awrc'>PX Deq: reap credit</td><td align="right" class='awrc'>101.4K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>54.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>41.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.0(26)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.0(6)</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>PX qref latch</td><td align="right" class='awrnc'>13</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>92.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>SQL*Net break/reset to client</td><td align="right" class='awrc'>72</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>47.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>40.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net message to client</td><td align="right" class='awrnc'>853</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>22.9</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>73.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>Sync ASM rebalance</td><td align="right" class='awrc'>66</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>22.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>15.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>asynch descriptor resize</td><td align="right" class='awrnc'>265</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>92.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>buffer busy waits</td><td align="right" class='awrc'>36</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>52.8</td></tr>
<tr><td scope="row" class='awrnc'>buffer deadlock</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>control file parallel write</td><td align="right" class='awrc'>332</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>21.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>38.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>11.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>1.5</td></tr>
<tr><td scope="row" class='awrnc'>control file sequential read</td><td align="right" class='awrnc'>4071</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>17.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.5</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>10.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>47.6</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>cursor: pin S wait on X</td><td align="right" class='awrc'>40</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>5.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>35.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>47.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file async I/O submit</td><td align="right" class='awrnc'>12.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>27.1</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>69.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file parallel read</td><td align="right" class='awrc'>15</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>26.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file parallel write</td><td align="right" class='awrnc'>20.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>22.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>12.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>db file scattered read</td><td align="right" class='awrc'>476</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>44.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>39.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>21.7M</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>24.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>56.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.0(2066)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.0(1009)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.0(214)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(273)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path read</td><td align="right" class='awrc'>14</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>35.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path read temp</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>direct path write</td><td align="right" class='awrc'>45</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>28.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>37.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>6.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>direct path write temp</td><td align="right" class='awrnc'>159</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>53.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>34.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: AF - task serialization</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CF - contention</td><td align="right" class='awrnc'>71</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>38.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>19.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: CO - master slave det</td><td align="right" class='awrc'>6</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: CR - block range reuse ckpt</td><td align="right" class='awrnc'>124</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>16.1</td></tr>
<tr><td scope="row" class='awrc'>enq: FB - contention</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>449</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>5.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>9.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>78.0</td></tr>
<tr><td scope="row" class='awrc'>enq: PS - contention</td><td align="right" class='awrc'>250</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>14.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>32.8</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>30.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>1.6</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: RO - fast object reuse</td><td align="right" class='awrnc'>360</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>35.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>15.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>11.4</td></tr>
<tr><td scope="row" class='awrc'>enq: TA - contention</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: TM - contention</td><td align="right" class='awrnc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: TO - contention</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>40.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>enq: US - contention</td><td align="right" class='awrnc'>5</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>60.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>enq: WF - contention</td><td align="right" class='awrc'>29</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>37.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>34.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>27.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>1.1M</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.0(131)</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(327)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.0(463)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>97.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.0(59)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.0(4)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.0(2)</td></tr>
<tr><td scope="row" class='awrc'>gc buffer busy acquire</td><td align="right" class='awrc'>69</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>21.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>63.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc buffer busy release</td><td align="right" class='awrnc'>8</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>37.5</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr block 2-way</td><td align="right" class='awrc'>2567</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>17.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>21.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>29.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>21.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(1)</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block busy</td><td align="right" class='awrnc'>148</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>12.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>23.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>18.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>14.2</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>8.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>1.4</td></tr>
<tr><td scope="row" class='awrc'>gc cr block congested</td><td align="right" class='awrc'>10</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>60.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>20.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>10.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block lost</td><td align="right" class='awrnc'>2355</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>24.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>74.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>1.2</td></tr>
<tr><td scope="row" class='awrc'>gc cr disk read</td><td align="right" class='awrc'>49</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>32.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>6.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>34.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr failure</td><td align="right" class='awrnc'>161</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>32.9</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>36.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>24.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.6</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant 2-way</td><td align="right" class='awrc'>263.6K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>30.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>34.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>22.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.0(60)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.0(19)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.0(3)</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(12)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(73)</td></tr>
<tr><td scope="row" class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>1.8M</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.0(25)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.0(32)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.0(57)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(98)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.0(642)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>28.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>34.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>18.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.0(289)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.1</td></tr>
<tr><td scope="row" class='awrc'>gc cr grant congested</td><td align="right" class='awrc'>2539</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>51.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>33.9</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multi block grant</td><td align="right" class='awrnc'>130</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>13.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>31.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>24.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>20.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>6.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc cr multi block mixed</td><td align="right" class='awrc'>25</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>16.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>28.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>24.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>4.0</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc current block 2-way</td><td align="right" class='awrnc'>1392</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>14.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>35.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>30.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>14.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.1</td></tr>
<tr><td scope="row" class='awrc'>gc current block busy</td><td align="right" class='awrc'>4847</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(2)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>25.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>31.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>20.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.1</td></tr>
<tr><td scope="row" class='awrnc'>gc current block congested</td><td align="right" class='awrnc'>45</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>48.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>35.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>8.9</td></tr>
<tr><td scope="row" class='awrc'>gc current block lost</td><td align="right" class='awrc'>421</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>23.3</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>74.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>2.4</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant 2-way</td><td align="right" class='awrnc'>235.3K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.0(15)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.0(15)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>22.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>33.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>6.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.1</td></tr>
<tr><td scope="row" class='awrc'>gc current grant busy</td><td align="right" class='awrc'>180K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>0.0(5)</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(6)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(4)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.0(9)</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.0(63)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>28.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>34.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>18.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>6.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.0(47)</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.1</td></tr>
<tr><td scope="row" class='awrnc'>gc current grant congested</td><td align="right" class='awrnc'>3729</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>31.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>36.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>2.1</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>0.4</td></tr>
<tr><td scope="row" class='awrc'>gc current grant read-mostly invalidation</td><td align="right" class='awrc'>259.5K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>0.0(5)</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.0(17)</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>36.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>23.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(50)</td></tr>
<tr><td scope="row" class='awrnc'>gc current multi block request</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gc current retry</td><td align="right" class='awrc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gc remaster</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>100.0</td></tr>
<tr><td scope="row" class='awrc'>gcs drm freeze in enter server mode</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>gcs log flush sync</td><td align="right" class='awrnc'>59.1K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.0(14)</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>18.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>21.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>21.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.0(13)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>gcs remastering wait for read latch</td><td align="right" class='awrc'>37</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>64.9</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges LMON to get to FTDONE</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges enter server mode</td><td align="right" class='awrc'>3764</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>21.6</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>73.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges inquiry response</td><td align="right" class='awrnc'>118</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>31.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>19.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>31.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>15.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges ipc enter server mode</td><td align="right" class='awrc'>38</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>23.7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>73.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges lms sync during dynamic remastering and reconfig</td><td align="right" class='awrnc'>84</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>9.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>20.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>21.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>34.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>10.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ges resource directory to be unfrozen</td><td align="right" class='awrc'>3</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>33.3</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>66.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>ges2 LMON to wake up LMD - mrcvr</td><td align="right" class='awrnc'>122</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>16.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>kjctssqmg: quick message send wait</td><td align="right" class='awrc'>123</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>8.9</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>12.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>24.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>17.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>kksfbc child completion</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>ksxr poll remote instances</td><td align="right" class='awrc'>1783</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>54.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>39.0</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch free</td><td align="right" class='awrnc'>3115</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>10.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>2.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>16.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>17.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>28.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.6</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA heap latch</td><td align="right" class='awrc'>71</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>9.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>8.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>16.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>18.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: MGA shared context latch</td><td align="right" class='awrnc'>241</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>22.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>27.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: MGA shared context root latch</td><td align="right" class='awrc'>175</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.9</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>6.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>7.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>8.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>23.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>26.3</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: cache buffers chains</td><td align="right" class='awrnc'>4138</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>32.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>23.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>4.6</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>2.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.0(1)</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: cache buffers lru chain</td><td align="right" class='awrc'>887</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>4.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>27.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>7.9</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>26.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>7.6</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: call allocation</td><td align="right" class='awrnc'>43</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>16.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>7.0</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: checkpoint queue latch</td><td align="right" class='awrc'>11</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>27.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.2</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>9.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: enqueue hash chains</td><td align="right" class='awrnc'>265</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>13.2</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>26.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>7.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: gc element</td><td align="right" class='awrc'>737</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>24.3</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>23.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>13.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>10.4</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: gcs resource hash</td><td align="right" class='awrnc'>1061</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>18.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>27.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>19.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>6.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>1.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: ges resource hash list</td><td align="right" class='awrc'>89</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>23.6</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>9.0</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>13.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>12.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>4.5</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>2.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: messages</td><td align="right" class='awrnc'>12</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>41.7</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>8.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: object queue header operation</td><td align="right" class='awrc'>79</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>2.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>17.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>3.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>22.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>20.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>19.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>5.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: redo allocation</td><td align="right" class='awrnc'>73</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>24.7</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>9.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>6.8</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>28.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>20.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>4.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.4</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: redo writing</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>latch: shared pool</td><td align="right" class='awrnc'>142</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>26.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>4.2</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>13.4</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>12.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>15.5</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>12.7</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>latch: undo global data</td><td align="right" class='awrc'>16</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>12.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>43.8</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>18.8</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>6.3</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>libcache interrupt action by LCK</td><td align="right" class='awrnc'>924</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>68.0</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>30.5</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>0.5</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache load lock</td><td align="right" class='awrc'>86</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>3.5</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>10.5</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>9.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>11.6</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>30.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>19.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache pin</td><td align="right" class='awrnc'>1</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>library cache: bucket mutex X</td><td align="right" class='awrc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>library cache: mutex X</td><td align="right" class='awrnc'>332</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>29.2</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>19.9</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>13.3</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>3.3</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>1.8</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>17.2</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>3.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>lock deadlock retry</td><td align="right" class='awrc'>678</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>8.1</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>50.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>36.7</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>2.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>1.2</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>0.7</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>0.3</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>lock escalate retry</td><td align="right" class='awrnc'>14</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file parallel write</td><td align="right" class='awrc'>21.9K</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>22.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>37.3</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>27.7</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>5.7</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>1.5</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>0.6</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>2.8</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>1.0</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>0.5</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>0.0(9)</td></tr>
<tr><td scope="row" class='awrnc'>log file sequential read</td><td align="right" class='awrnc'>465</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>27.7</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>18.3</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>11.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>23.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>7.7</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>3.2</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>log file sync</td><td align="right" class='awrc'>146</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>3.4</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>4.8</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>17.8</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>17.1</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>39.7</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>12.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>name-service call wait</td><td align="right" class='awrnc'>4</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>75.0</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>25.0</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>oracle thread bootstrap</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>50.0</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>os thread creation</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>read by other session</td><td align="right" class='awrc'>9</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>11.1</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>22.2</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>reliable message</td><td align="right" class='awrnc'>231</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>17.3</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>22.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>35.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>12.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>5.6</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.4</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>1.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>1.3</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>1.3</td></tr>
<tr><td scope="row" class='awrc'>row cache lock</td><td align="right" class='awrc'>78</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>15.4</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>37.2</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>26.9</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>14.1</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>1.3</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>2.6</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>undo_retention publish retry</td><td align="right" class='awrnc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>&#160;</td></tr>
<tr><td scope="row" class='awrc'>wait list latch free</td><td align="right" class='awrc'>2</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrc'>100.0</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrc'>&#160;</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrcrb'>&#160;</td></tr>
<tr><td scope="row" class='awrnc'>write complete waits</td><td align="right" class='awrnc'>1755</td><td align="right" headers="%ofTotalWaits &lt;1us" class='awrnclb'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;32us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;64us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;128us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;256us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;512us" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;1ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;2ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;4ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;8ms" class='awrnc'>&#160;</td><td align="right" headers="%ofTotalWaits &lt;16ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;32ms" class='awrnc'>0.1</td><td align="right" headers="%ofTotalWaits &lt;64ms" class='awrnc'>0.2</td><td align="right" headers="%ofTotalWaits &lt;128ms" class='awrnc'>0.9</td><td align="right" headers="%ofTotalWaits &lt;256ms" class='awrnc'>1.9</td><td align="right" headers="%ofTotalWaits &lt;512ms" class='awrnc'>3.7</td><td align="right" headers="%ofTotalWaits &lt;1s" class='awrnc'>8.4</td><td align="right" headers="%ofTotalWaits &gt;=1s" class='awrncrb'>84.7</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#621">Back to Wait Events Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="639"></a>
<h2 class="awr">
Global Activity Load Profile
</h2>
<ul>
<li class="awr"><a class="awr" href="#12016">System Statistics</a></li>
<li class="awr"><a class="awr" href="#12017">System Statistics - Per Second</a></li>
<li class="awr"><a class="awr" href="#12018">System Statistics - Per Transaction</a></li>
<li class="awr"><a class="awr" href="#12030">SysStat and Global Messaging  - RAC</a></li>
<li class="awr"><a class="awr" href="#12031">SysStat and Global Messaging (per Sec)- RAC</a></li>
<li class="awr"><a class="awr" href="#12032">SysStat and Global Messaging (per Tx)- RAC</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12016"></a>
<h3 class="awr">System Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads</th><th class="awrbg" scope="col">Physical Reads</th><th class="awrbg" scope="col">Physical Writes</th><th class="awrbg" scope="col">Redo Size (k)</th><th class="awrbg" scope="col">Block Changes</th><th class="awrbg" scope="col">User Calls</th><th class="awrbg" scope="col">Execs</th><th class="awrbg" scope="col">Parses</th><th class="awrbg" scope="col">Logons</th><th class="awrbg" scope="col">Txns</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>20,058,682</td><td align="right" class='awrc'>11,204,858</td><td align="right" class='awrc'>1,223,547</td><td align="right" class='awrc'>1,048,131</td><td align="right" class='awrc'>3,106,687</td><td align="right" class='awrc'>1,432</td><td align="right" class='awrc'>3,801,670</td><td align="right" class='awrc'>4,454</td><td align="right" class='awrc'>109</td><td align="right" class='awrc'>381,867</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>20,006,950</td><td align="right" class='awrnc'>10,818,025</td><td align="right" class='awrnc'>1,198,874</td><td align="right" class='awrnc'>1,044,077</td><td align="right" class='awrnc'>3,087,250</td><td align="right" class='awrnc'>1,264</td><td align="right" class='awrnc'>3,789,973</td><td align="right" class='awrnc'>4,844</td><td align="right" class='awrnc'>110</td><td align="right" class='awrnc'>378,968</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>40,065,632</td><td align="right" class='awrct'>22,022,883</td><td align="right" class='awrct'>2,422,421</td><td align="right" class='awrct'>2,092,209</td><td align="right" class='awrct'>6,193,937</td><td align="right" class='awrct'>2,696</td><td align="right" class='awrct'>7,591,643</td><td align="right" class='awrct'>9,298</td><td align="right" class='awrct'>219</td><td align="right" class='awrct'>760,835</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>20,032,816</td><td align="right" class='awrnc'>11,011,442</td><td align="right" class='awrnc'>1,211,211</td><td align="right" class='awrnc'>1,046,104</td><td align="right" class='awrnc'>3,096,969</td><td align="right" class='awrnc'>1,348</td><td align="right" class='awrnc'>3,795,822</td><td align="right" class='awrnc'>4,649</td><td align="right" class='awrnc'>110</td><td align="right" class='awrnc'>380,418</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>36,580</td><td align="right" class='awrc'>273,532</td><td align="right" class='awrc'>17,446</td><td align="right" class='awrc'>2,867</td><td align="right" class='awrc'>13,744</td><td align="right" class='awrc'>119</td><td align="right" class='awrc'>8,271</td><td align="right" class='awrc'>276</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>2,050</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12017"></a>
<h3 class="awr">System Statistics - Per Second</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics - Per Second"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads/s</th><th class="awrbg" scope="col">Physical Reads/s</th><th class="awrbg" scope="col">Physical Writes/s</th><th class="awrbg" scope="col">Redo Size (k)/s</th><th class="awrbg" scope="col">Block Changes/s</th><th class="awrbg" scope="col">User Calls/s</th><th class="awrbg" scope="col">Execs/s</th><th class="awrbg" scope="col">Parses/s</th><th class="awrbg" scope="col">Logons/s</th><th class="awrbg" scope="col">Txns/s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>55,253.66</td><td align="right" class='awrc'>30,864.91</td><td align="right" class='awrc'>3,370.38</td><td align="right" class='awrc'>2,887.18</td><td align="right" class='awrc'>8,557.68</td><td align="right" class='awrc'>3.94</td><td align="right" class='awrc'>10,472.08</td><td align="right" class='awrc'>12.27</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>1,051.89</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>55,109.95</td><td align="right" class='awrnc'>29,798.68</td><td align="right" class='awrnc'>3,302.35</td><td align="right" class='awrnc'>2,875.95</td><td align="right" class='awrnc'>8,503.95</td><td align="right" class='awrnc'>3.48</td><td align="right" class='awrnc'>10,439.63</td><td align="right" class='awrnc'>13.34</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>1,043.88</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>110,363.61</td><td align="right" class='awrct'>60,663.60</td><td align="right" class='awrct'>6,672.73</td><td align="right" class='awrct'>5,763.14</td><td align="right" class='awrct'>17,061.64</td><td align="right" class='awrct'>7.43</td><td align="right" class='awrct'>20,911.72</td><td align="right" class='awrct'>25.61</td><td align="right" class='awrct'>0.60</td><td align="right" class='awrct'>2,095.77</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>55,181.81</td><td align="right" class='awrnc'>30,331.80</td><td align="right" class='awrnc'>3,336.37</td><td align="right" class='awrnc'>2,881.57</td><td align="right" class='awrnc'>8,530.82</td><td align="right" class='awrnc'>3.71</td><td align="right" class='awrnc'>10,455.86</td><td align="right" class='awrnc'>12.81</td><td align="right" class='awrnc'>0.30</td><td align="right" class='awrnc'>1,047.89</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>101.62</td><td align="right" class='awrc'>753.94</td><td align="right" class='awrc'>48.11</td><td align="right" class='awrc'>7.94</td><td align="right" class='awrc'>37.99</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>22.95</td><td align="right" class='awrc'>0.76</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>5.66</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12018"></a>
<h3 class="awr">System Statistics - Per Transaction</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics - Per Transaction"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Logical Reads/tx</th><th class="awrbg" scope="col">Physical Reads/tx</th><th class="awrbg" scope="col">Physical Writes/tx</th><th class="awrbg" scope="col">Redo Size (k)/tx</th><th class="awrbg" scope="col">Block Changes/tx</th><th class="awrbg" scope="col">User Calls/tx</th><th class="awrbg" scope="col">Execs/tx</th><th class="awrbg" scope="col">Parses/tx</th><th class="awrbg" scope="col">Logons/tx</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>52.53</td><td align="right" class='awrc'>29.34</td><td align="right" class='awrc'>3.20</td><td align="right" class='awrc'>2.74</td><td align="right" class='awrc'>8.14</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>9.96</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>52.79</td><td align="right" class='awrnc'>28.55</td><td align="right" class='awrnc'>3.16</td><td align="right" class='awrnc'>2.76</td><td align="right" class='awrnc'>8.15</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>10.00</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>52.66</td><td align="right" class='awrct'>28.94</td><td align="right" class='awrct'>3.18</td><td align="right" class='awrct'>2.75</td><td align="right" class='awrct'>8.14</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>9.98</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12030"></a>
<h3 class="awr">SysStat and Global Messaging  - RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging  - RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceived">Blocks Received</th>
<th class="awrbg" colspan=" 2" id="BlocksServed">Blocks Served</th>
<th class="awrbg" colspan=" 2" id="CPU(seconds)">CPU (seconds)</th>
<th class="awrbg" colspan=" 6" id="Messages">Messages</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent </th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost">Lost</th><th class="awrbg" scope="col" id="Failure">Failure</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceived GCCurrent" class='awrclb'>2,587</td><td align="right" headers="BlocksReceived GCCR" class='awrc'>2,146</td><td align="right" headers="BlocksServed GCCurrent" class='awrclb'>4,395</td><td align="right" headers="BlocksServed GCCR" class='awrc'>783</td><td align="right" headers="CPU(seconds) GC" class='awrclb'>&#160;</td><td align="right" headers="CPU(seconds) IPC" class='awrc'>0</td><td align="right" headers="Messages GCSReceived" class='awrclb'>5,654,477</td><td align="right" headers="Messages GESReceived" class='awrc'>4,809</td><td align="right" headers="Messages GCSSent" class='awrc'>4,696,161</td><td align="right" headers="Messages GESSent" class='awrc'>1,658</td><td align="right" headers="Messages SentDirect" class='awrc'>896,647</td><td align="right" headers="Messages SentIndir" class='awrc'>1,981,425</td><td align="right" headers="GCBlks Lost" class='awrclb'>89</td><td align="right" headers="GCCR Failure" class='awrcbb'>161</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceived GCCurrent" class='awrnclb'>3,782</td><td align="right" headers="BlocksReceived GCCR" class='awrnc'>666</td><td align="right" headers="BlocksServed GCCurrent" class='awrnclb'>2,358</td><td align="right" headers="BlocksServed GCCR" class='awrnc'>1,943</td><td align="right" headers="CPU(seconds) GC" class='awrnclb'>&#160;</td><td align="right" headers="CPU(seconds) IPC" class='awrnc'>0</td><td align="right" headers="Messages GCSReceived" class='awrnclb'>4,335,672</td><td align="right" headers="Messages GESReceived" class='awrnc'>1,576</td><td align="right" headers="Messages GCSSent" class='awrnc'>5,254,164</td><td align="right" headers="Messages GESSent" class='awrnc'>4,655</td><td align="right" headers="Messages SentDirect" class='awrnc'>1,660,381</td><td align="right" headers="Messages SentIndir" class='awrnc'>2,731,865</td><td align="right" headers="GCBlks Lost" class='awrnclb'>2,695</td><td align="right" headers="GCCR Failure" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>6,369</td><td align="right" class='awrct'>2,812</td><td align="right" class='awrclbt'>6,753</td><td align="right" class='awrct'>2,726</td><td align="right" class='awrclbt'>0</td><td align="right" class='awrct'>0</td><td align="right" class='awrclbt'>9,990,149</td><td align="right" class='awrct'>6,385</td><td align="right" class='awrct'>9,950,325</td><td align="right" class='awrct'>6,313</td><td align="right" class='awrct'>2,557,028</td><td align="right" class='awrct'>4,713,290</td><td align="right" class='awrclbt'>2,784</td><td align="right" class='awrcbbt'>161</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>3,185</td><td align="right" class='awrnc'>1,406</td><td align="right" class='awrnclb'>3,377</td><td align="right" class='awrnc'>1,363</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>4,995,075</td><td align="right" class='awrnc'>3,193</td><td align="right" class='awrnc'>4,975,163</td><td align="right" class='awrnc'>3,157</td><td align="right" class='awrnc'>1,278,514</td><td align="right" class='awrnc'>2,356,645</td><td align="right" class='awrnclb'>1,392</td><td align="right" class='awrncbb'>81</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>845</td><td align="right" class='awrc'>1,047</td><td align="right" class='awrclb'>1,440</td><td align="right" class='awrc'>820</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>932,536</td><td align="right" class='awrc'>2,286</td><td align="right" class='awrc'>394,568</td><td align="right" class='awrc'>2,119</td><td align="right" class='awrc'>540,041</td><td align="right" class='awrc'>530,641</td><td align="right" class='awrclb'>1,843</td><td align="right" class='awrcbb'>114</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12031"></a>
<h3 class="awr">SysStat and Global Messaging (per Sec)- RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging (per Sec)- RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceivedPerSecond">Blocks Received Per Second</th>
<th class="awrbg" colspan=" 2" id="BlocksServedperSecond">Blocks Served per Second</th>
<th class="awrbg" colspan=" 2" id="CPUsecondsperSecond">CPU seconds per Second</th>
<th class="awrbg" colspan=" 6" id="MessagesPerSecond">Messages Per Second</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent</th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost/s">Lost/s</th><th class="awrbg" scope="col" id="Fail/s">Fail/s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceivedPerSecond GCCurrent" class='awrclb'>7.13</td><td align="right" headers="BlocksReceivedPerSecond GCCR" class='awrc'>5.91</td><td align="right" headers="BlocksServedperSecond GCCurrent" class='awrclb'>12.11</td><td align="right" headers="BlocksServedperSecond GCCR" class='awrc'>2.16</td><td align="right" headers="CPUsecondsperSecond GC" class='awrclb'>&#160;</td><td align="right" headers="CPUsecondsperSecond IPC" class='awrc'>0.00</td><td align="right" headers="MessagesPerSecond GCSReceived" class='awrclb'>15,575.83</td><td align="right" headers="MessagesPerSecond GESReceived" class='awrc'>13.25</td><td align="right" headers="MessagesPerSecond GCSSent" class='awrc'>12,936.05</td><td align="right" headers="MessagesPerSecond GESSent" class='awrc'>4.57</td><td align="right" headers="MessagesPerSecond SentDirect" class='awrc'>2,469.90</td><td align="right" headers="MessagesPerSecond SentIndir" class='awrc'>5,458.04</td><td align="right" headers="GCBlks Lost/s" class='awrclb'>0</td><td align="right" headers="GCCR Fail/s" class='awrcbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceivedPerSecond GCCurrent" class='awrnclb'>10.42</td><td align="right" headers="BlocksReceivedPerSecond GCCR" class='awrnc'>1.83</td><td align="right" headers="BlocksServedperSecond GCCurrent" class='awrnclb'>6.50</td><td align="right" headers="BlocksServedperSecond GCCR" class='awrnc'>5.35</td><td align="right" headers="CPUsecondsperSecond GC" class='awrnclb'>&#160;</td><td align="right" headers="CPUsecondsperSecond IPC" class='awrnc'>0.00</td><td align="right" headers="MessagesPerSecond GCSReceived" class='awrnclb'>11,942.78</td><td align="right" headers="MessagesPerSecond GESReceived" class='awrnc'>4.34</td><td align="right" headers="MessagesPerSecond GCSSent" class='awrnc'>14,472.81</td><td align="right" headers="MessagesPerSecond GESSent" class='awrnc'>12.82</td><td align="right" headers="MessagesPerSecond SentDirect" class='awrnc'>4,573.59</td><td align="right" headers="MessagesPerSecond SentIndir" class='awrnc'>7,525.03</td><td align="right" headers="GCBlks Lost/s" class='awrnclb'>7</td><td align="right" headers="GCCR Fail/s" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>17.54</td><td align="right" class='awrct'>7.75</td><td align="right" class='awrclbt'>18.60</td><td align="right" class='awrct'>7.51</td><td align="right" class='awrclbt'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>27,518.61</td><td align="right" class='awrct'>17.59</td><td align="right" class='awrct'>27,408.85</td><td align="right" class='awrct'>17.39</td><td align="right" class='awrct'>7,043.49</td><td align="right" class='awrct'>12,983.07</td><td align="right" class='awrclbt'>8</td><td align="right" class='awrcbbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>8.77</td><td align="right" class='awrnc'>3.87</td><td align="right" class='awrnclb'>9.30</td><td align="right" class='awrnc'>3.75</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnclb'>13,759.30</td><td align="right" class='awrnc'>8.79</td><td align="right" class='awrnc'>13,704.43</td><td align="right" class='awrnc'>8.69</td><td align="right" class='awrnc'>3,521.75</td><td align="right" class='awrnc'>6,491.53</td><td align="right" class='awrnclb'>4</td><td align="right" class='awrncbb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>2.33</td><td align="right" class='awrc'>2.88</td><td align="right" class='awrclb'>3.97</td><td align="right" class='awrc'>2.26</td><td align="right" class='awrclb'>&#160;</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrclb'>2,568.95</td><td align="right" class='awrc'>6.30</td><td align="right" class='awrc'>1,086.65</td><td align="right" class='awrc'>5.84</td><td align="right" class='awrc'>1,487.53</td><td align="right" class='awrc'>1,461.59</td><td align="right" class='awrclb'>5</td><td align="right" class='awrcbb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12032"></a>
<h3 class="awr">SysStat and Global Messaging (per Tx)- RAC</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="SysStat and Global Messaging (per Tx)- RAC"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="BlocksReceivedperTx">Blocks Received per Tx</th>
<th class="awrbg" colspan=" 2" id="BlocksServed">Blocks Served</th>
<th class="awrbg" colspan=" 2" id="CPU(seconds)perTx">CPU (seconds) per Tx</th>
<th class="awrbg" colspan=" 6" id="MessagesperTransaction">Messages per Transaction</th>
<th class="awrbg" colspan=" 1" id="GCBlks">GC Blks</th>
<th class="awrbg" colspan=" 1" id="GCCR">GC CR</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GCCurrent">GC Current</th><th class="awrbg" scope="col" id="GCCR">GC CR</th><th class="awrbg" scope="col" id="GC">GC</th><th class="awrbg" scope="col" id="IPC">IPC</th><th class="awrbg" scope="col" id="GCSReceived">GCS Received</th><th class="awrbg" scope="col" id="GESReceived">GES Received</th><th class="awrbg" scope="col" id="GCSSent">GCS Sent</th><th class="awrbg" scope="col" id="GESSent">GES Sent </th><th class="awrbg" scope="col" id="SentDirect">Sent Direct</th><th class="awrbg" scope="col" id="SentIndir">Sent Indir</th><th class="awrbg" scope="col" id="Lost/Tx">Lost/Tx</th><th class="awrbg" scope="col" id="Fail/Tx">Fail/Tx</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlocksReceivedperTx GCCurrent" class='awrclb'>0.01</td><td align="right" headers="BlocksReceivedperTx GCCR" class='awrc'>0.01</td><td align="right" headers="BlocksServed GCCurrent" class='awrclb'>0.01</td><td align="right" headers="BlocksServed GCCR" class='awrc'>0.00</td><td align="right" headers="CPU(seconds)perTx GC" class='awrclb'>&#160;</td><td align="right" headers="CPU(seconds)perTx IPC" class='awrc'>0.00</td><td align="right" headers="MessagesperTransaction GCSReceived" class='awrclb'>14.81</td><td align="right" headers="MessagesperTransaction GESReceived" class='awrc'>0.01</td><td align="right" headers="MessagesperTransaction GCSSent" class='awrc'>12.30</td><td align="right" headers="MessagesperTransaction GESSent" class='awrc'>0.00</td><td align="right" headers="MessagesperTransaction SentDirect" class='awrc'>2.35</td><td align="right" headers="MessagesperTransaction SentIndir" class='awrc'>5.19</td><td align="right" headers="GCBlks Lost/Tx" class='awrclb'>0.00</td><td align="right" headers="GCCR Fail/Tx" class='awrcbb'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlocksReceivedperTx GCCurrent" class='awrnclb'>0.01</td><td align="right" headers="BlocksReceivedperTx GCCR" class='awrnc'>0.00</td><td align="right" headers="BlocksServed GCCurrent" class='awrnclb'>0.01</td><td align="right" headers="BlocksServed GCCR" class='awrnc'>0.01</td><td align="right" headers="CPU(seconds)perTx GC" class='awrnclb'>&#160;</td><td align="right" headers="CPU(seconds)perTx IPC" class='awrnc'>0.00</td><td align="right" headers="MessagesperTransaction GCSReceived" class='awrnclb'>11.44</td><td align="right" headers="MessagesperTransaction GESReceived" class='awrnc'>0.00</td><td align="right" headers="MessagesperTransaction GCSSent" class='awrnc'>13.86</td><td align="right" headers="MessagesperTransaction GESSent" class='awrnc'>0.01</td><td align="right" headers="MessagesperTransaction SentDirect" class='awrnc'>4.38</td><td align="right" headers="MessagesperTransaction SentIndir" class='awrnc'>7.21</td><td align="right" headers="GCBlks Lost/Tx" class='awrnclb'>0.01</td><td align="right" headers="GCCR Fail/Tx" class='awrncbb'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrclbt'>0.01</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>0.01</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>&#160;</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>13.12</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>13.08</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>3.36</td><td align="right" class='awrct'>6.20</td><td align="right" class='awrclbt'>0.00</td><td align="right" class='awrcbbt'>0.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#639">Back to Global Activity Load Profile</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="605"></a>
<h2 class="awr">
Global Cache and Enqueue Statistics Summary
</h2>
<ul>
<li class="awr"><a class="awr" href="#12019">Global Cache Efficiency Percentages</a></li>
<li class="awr"><a class="awr" href="#12020">Global Latency Characteristics</a></li>
<li class="awr"><a class="awr" href="#12021">Global Messaging Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12019"></a>
<h3 class="awr">Global Cache Efficiency Percentages</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Cache Efficiency Percentages"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="BufferAccess">Buffer Access</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Local%">Local %</th><th class="awrbg" scope="col" id="Remote%">Remote %</th><th class="awrbg" scope="col" id="Disk%">Disk %</th><th class="awrbg" scope="col">Locality %</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BufferAccess Local%" class='awrclb'>44.11</td><td align="right" headers="BufferAccess Remote%" class='awrc'>0.02</td><td align="right" headers="BufferAccess Disk%" class='awrcrb'>55.86</td><td align="right" class='awrc'>90.91</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BufferAccess Local%" class='awrnclb'>45.90</td><td align="right" headers="BufferAccess Remote%" class='awrnc'>0.02</td><td align="right" headers="BufferAccess Disk%" class='awrncrb'>54.08</td><td align="right" class='awrnc'>83.70</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12020"></a>
<h3 class="awr">Global Latency Characteristics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Latency Characteristics"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CRBlocks">CR Blocks</th>
<th class="awrbg" colspan=" 4" id="CUBlocks">CU Blocks</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">GE Get Time (us)</th><th class="awrbg" scope="col" id="Receive|Time(us)">Receive Time (us)</th><th class="awrbg" scope="col" id="Build|Time(us)">Build Time (us)</th><th class="awrbg" scope="col" id="Flush|Time(us)">Flush Time (us)</th><th class="awrbg" scope="col" id="LogFlush|CRSrvd%">Log Flush CR Srvd %</th><th class="awrbg" scope="col" id="Receive|Time(us)">Receive Time (us)</th><th class="awrbg" scope="col" id="Pin|Time(us)">Pin Time (us)</th><th class="awrbg" scope="col" id="Flush|Time(us)">Flush Time (us)</th><th class="awrbg" scope="col" id="LogFlush|CUSrvd%">Log Flush CU Srvd %</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>4142</td><td align="right" headers="CRBlocks Receive|Time(us)" class='awrclb'>13481</td><td align="right" headers="CRBlocks Build|Time(us)" class='awrc'>28</td><td align="right" headers="CRBlocks Flush|Time(us)" class='awrc'>330870</td><td align="right" headers="CRBlocks LogFlush|CRSrvd%" class='awrc'>2.94</td><td align="right" headers="CUBlocks Receive|Time(us)" class='awrclb'>10866</td><td align="right" headers="CUBlocks Pin|Time(us)" class='awrc'>&#160;</td><td align="right" headers="CUBlocks Flush|Time(us)" class='awrc'>133333</td><td align="right" headers="CUBlocks LogFlush|CUSrvd%" class='awrcrb'>0.14</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>1080</td><td align="right" headers="CRBlocks Receive|Time(us)" class='awrnclb'>15015</td><td align="right" headers="CRBlocks Build|Time(us)" class='awrnc'>38</td><td align="right" headers="CRBlocks Flush|Time(us)" class='awrnc'>126493</td><td align="right" headers="CRBlocks LogFlush|CRSrvd%" class='awrnc'>6.90</td><td align="right" headers="CUBlocks Receive|Time(us)" class='awrnclb'>13107</td><td align="right" headers="CUBlocks Pin|Time(us)" class='awrnc'>&#160;</td><td align="right" headers="CUBlocks Flush|Time(us)" class='awrnc'>4000</td><td align="right" headers="CUBlocks LogFlush|CUSrvd%" class='awrncrb'>0.21</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12021"></a>
<h3 class="awr">Global Messaging Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Messaging Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="QueueTime(us)">Queue Time (us)</th>
<th class="awrbg" colspan=" 2" id="ProcessTime(us)">Process Time (us)</th>
<th class="awrbg" colspan=" 3" id="%MessagesSent">% Messages Sent</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Sent">Sent</th><th class="awrbg" scope="col" id="onksxp">on ksxp</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="GCSmsgs">GCS msgs</th><th class="awrbg" scope="col" id="GESmsgs">GES msgs</th><th class="awrbg" scope="col" id="Direct">Direct</th><th class="awrbg" scope="col" id="Indirect">Indirect</th><th class="awrbg" scope="col" id="FlowCtrl">Flow Ctrl</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="QueueTime(us) Sent" class='awrclb'>1555</td><td align="right" headers="QueueTime(us) onksxp" class='awrc'>11012</td><td align="right" headers="QueueTime(us) Received" class='awrc'>65</td><td align="right" headers="ProcessTime(us) GCSmsgs" class='awrclb'>25</td><td align="right" headers="ProcessTime(us) GESmsgs" class='awrc'>18</td><td align="right" headers="%MessagesSent Direct" class='awrclb'>30.51</td><td align="right" headers="%MessagesSent Indirect" class='awrc'>67.43</td><td align="right" headers="%MessagesSent FlowCtrl" class='awrcrb'>2.06</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="QueueTime(us) Sent" class='awrnclb'>2271</td><td align="right" headers="QueueTime(us) onksxp" class='awrnc'>8754</td><td align="right" headers="QueueTime(us) Received" class='awrnc'>55</td><td align="right" headers="ProcessTime(us) GCSmsgs" class='awrnclb'>30</td><td align="right" headers="ProcessTime(us) GESmsgs" class='awrnc'>91</td><td align="right" headers="%MessagesSent Direct" class='awrnclb'>37.33</td><td align="right" headers="%MessagesSent Indirect" class='awrnc'>61.41</td><td align="right" headers="%MessagesSent FlowCtrl" class='awrncrb'>1.26</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#605">Back to Global Cache and Enqueue Statistics Summary</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12033"></a>
<h3 class="awr">Global CR Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global CR Server Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 5" id="BlockRequests">Block Requests</th>
<th class="awrbg" colspan=" 5" id="Results">Results</th>
<th class="awrbg" colspan=" 1" id="Fairness">Fairness</th>
<th class="awrbg" colspan=" 1" id="Light">Light</th>
<th class="awrbg" colspan=" 3" id="Total">Total</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="CR">CR</th><th class="awrbg" scope="col" id="CU">CU</th><th class="awrbg" scope="col" id="Data">Data</th><th class="awrbg" scope="col" id="Undo">Undo</th><th class="awrbg" scope="col" id="TX">TX</th><th class="awrbg" scope="col" id="Current">Current</th><th class="awrbg" scope="col" id="Private">Private</th><th class="awrbg" scope="col" id="Zero">Zero</th><th class="awrbg" scope="col" id="DskRd">Dsk Rd</th><th class="awrbg" scope="col" id="Fail">Fail</th><th class="awrbg" scope="col" id="DownConv">Down Conv</th><th class="awrbg" scope="col" id="Works">Works</th><th class="awrbg" scope="col" id="Flushes">Flushes</th><th class="awrbg" scope="col" id="Builds">Builds</th><th class="awrbg" scope="col" id="Errors">Errors</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="BlockRequests CR" class='awrclb'>717</td><td align="right" headers="BlockRequests CU" class='awrc'>103</td><td align="right" headers="BlockRequests Data" class='awrc'>717</td><td align="right" headers="BlockRequests Undo" class='awrc'>0</td><td align="right" headers="BlockRequests TX" class='awrc'>56</td><td align="right" headers="Results Current" class='awrclb'>778</td><td align="right" headers="Results Private" class='awrc'>0</td><td align="right" headers="Results Zero" class='awrc'>0</td><td align="right" headers="Results DskRd" class='awrc'>42</td><td align="right" headers="Results Fail" class='awrc'>0</td><td align="right" headers="Fairness DownConv" class='awrclb'>672</td><td align="right" headers="Light Works" class='awrclb'>57</td><td align="right" headers="Total Flushes" class='awrclb'>23</td><td align="right" headers="Total Builds" class='awrc'>716</td><td align="right" headers="Total Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="BlockRequests CR" class='awrnclb'>519</td><td align="right" headers="BlockRequests CU" class='awrnc'>1,586</td><td align="right" headers="BlockRequests Data" class='awrnc'>519</td><td align="right" headers="BlockRequests Undo" class='awrnc'>0</td><td align="right" headers="BlockRequests TX" class='awrnc'>1,576</td><td align="right" headers="Results Current" class='awrnclb'>1,940</td><td align="right" headers="Results Private" class='awrnc'>0</td><td align="right" headers="Results Zero" class='awrnc'>0</td><td align="right" headers="Results DskRd" class='awrnc'>6</td><td align="right" headers="Results Fail" class='awrnc'>159</td><td align="right" headers="Fairness DownConv" class='awrnclb'>514</td><td align="right" headers="Light Works" class='awrnclb'>334</td><td align="right" headers="Total Flushes" class='awrnclb'>134</td><td align="right" headers="Total Builds" class='awrnc'>519</td><td align="right" headers="Total Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>1,236</td><td align="right" class='awrct'>1,689</td><td align="right" class='awrct'>1,236</td><td align="right" class='awrct'>0</td><td align="right" class='awrct'>1,632</td><td align="right" class='awrclbt'>2,718</td><td align="right" class='awrct'>0</td><td align="right" class='awrct'>0</td><td align="right" class='awrct'>48</td><td align="right" class='awrct'>159</td><td align="right" class='awrclbt'>1,186</td><td align="right" class='awrclbt'>391</td><td align="right" class='awrclbt'>157</td><td align="right" class='awrct'>1,235</td><td align="right" class='awrcrbt'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>618</td><td align="right" class='awrnc'>845</td><td align="right" class='awrnc'>618</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>816</td><td align="right" class='awrnclb'>1,359</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>80</td><td align="right" class='awrnclb'>593</td><td align="right" class='awrnclb'>196</td><td align="right" class='awrnclb'>79</td><td align="right" class='awrnc'>618</td><td align="right" class='awrncrb'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>140</td><td align="right" class='awrc'>1,049</td><td align="right" class='awrc'>140</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>1,075</td><td align="right" class='awrclb'>822</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>25</td><td align="right" class='awrc'>112</td><td align="right" class='awrclb'>112</td><td align="right" class='awrclb'>196</td><td align="right" class='awrclb'>78</td><td align="right" class='awrc'>139</td><td align="right" class='awrcrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12034"></a>
<h3 class="awr">Global Current Server Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Global Current Server Statistics"><tr><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Pins</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th><th class="awrbg" scope="col">Flushes</th><th class="awrbg" scope="col">% &lt;100us</th><th class="awrbg" scope="col">% &lt;1ms</th><th class="awrbg" scope="col">% &lt;10ms</th><th class="awrbg" scope="col">% &lt;100ms</th><th class="awrbg" scope="col">% &lt;1s</th><th class="awrbg" scope="col">% &lt;10s</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>6</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>66.67</td><td align="right" class='awrc'>16.67</td><td align="right" class='awrc'>16.67</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>5</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>60.00</td><td align="right" class='awrnc'>40.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrct'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrct'>11</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="607"></a>
<h2 class="awr">
Global Cache Transfer Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12035">Global Cache Transfer Statistics</a></li>
<li class="awr"><a class="awr" href="#12036">Global Cache Transfer (Immediate)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12035"></a>
<h3 class="awr">Global Cache Transfer Statistics</h3>
<ul>
<li class="awr"> Immediate  (Immed) - Block Transfer NOT impacted by Remote Processing Delays </li>
<li class="awr"> Busy	     (Busy) - Block Transfer impacted by Remote Contention </li>
<li class="awr"> Congested  (Cngst) - Block Transfer impacted by Remote System Load </li>
<li class="awr"> All - average time of All blocks (Immed,Busy,Cngst) in us </li>
<li class="awr"> Ordered by instance_number, CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="Global Cache Transfer Statistics. . Immediate (Immed) - Block Transfer NOT impacted by Remote Processing Delays. Busy (Busy) - Block Transfer impacted by Remote Contention. Congested (Cngst) - Block Transfer impacted by Remote System Load. All - average time of All blocks (Immed,Busy,Cngst) in us. Ordered by instance_number, CR + Current Blocks Received desc"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 1" id="Block">Block</th>
<th class="awrbg" colspan=" 4" id="CRBlocks">CR Blocks</th>
<th class="awrbg" colspan=" 4" id="CurrentBlocks">Current Blocks</th>
<th class="awrbg" colspan=" 4" id="CRAvgTime(us)">CR Avg Time (us)</th>
<th class="awrbg" colspan=" 4" id="CurrentAvgTime(us)">Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Dest">Dest</th><th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%Immed">%Immed</th><th class="awrbg" scope="col" id="%Busy">%Busy</th><th class="awrbg" scope="col" id="%Cngst">%Cngst</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%Immed">%Immed</th><th class="awrbg" scope="col" id="%Busy">%Busy</th><th class="awrbg" scope="col" id="%Cngst">%Cngst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Cngst">Cngst</th><th class="awrbg" scope="col" id="All">All</th><th class="awrbg" scope="col" id="Immed">Immed</th><th class="awrbg" scope="col" id="Busy">Busy</th><th class="awrbg" scope="col" id="Cngst">Cngst</th></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'>1</td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>data block</td><td align="right" headers="CRBlocks Received" class='awrclb'>700</td><td align="right" headers="CRBlocks %Immed" class='awrc'>98.71</td><td align="right" headers="CRBlocks %Busy" class='awrc'>0.29</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>1.00</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>2,554</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>39.43</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>60.30</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>0.27</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>10096</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>8728</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>1466</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>147617</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>9821</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>10239</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>9557</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>7938</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="CRBlocks Received" class='awrnclb'>1,422</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>90.79</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>9.14</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>0.07</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>1</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>100.00</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>14657</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>2267</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>137758</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>7301</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>725</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>725</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="CRBlocks Received" class='awrclb'>7</td><td align="right" headers="CRBlocks %Immed" class='awrc'>100.00</td><td align="right" headers="CRBlocks %Busy" class='awrc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>10</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>0.00</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>100.00</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>917</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>917</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>569</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>569</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="CRBlocks Received" class='awrnclb'>1</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>100.00</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>2056</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>2056</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclbt'>2</td><td align="right" headers="Instance# Src" class='awrct'>1</td><td headers="Block Class" class='awrclbt'>data block</td><td align="right" headers="CRBlocks Received" class='awrclbt'>604</td><td align="right" headers="CRBlocks %Immed" class='awrct'>99.50</td><td align="right" headers="CRBlocks %Busy" class='awrct'>0.17</td><td align="right" headers="CRBlocks %Cngst" class='awrct'>0.33</td><td align="right" headers="CurrentBlocks Received" class='awrclbt'>3,743</td><td align="right" headers="CurrentBlocks %Immed" class='awrct'>10.34</td><td align="right" headers="CurrentBlocks %Busy" class='awrct'>88.65</td><td align="right" headers="CurrentBlocks %Cngst" class='awrct'>1.02</td><td align="right" headers="CRAvgTime(us) All" class='awrclbt'>8045</td><td align="right" headers="CRAvgTime(us) Immed" class='awrct'>6263</td><td align="right" headers="CRAvgTime(us) Busy" class='awrct'>1085989</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrct'>4487</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclbt'>13244</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrct'>22525</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrct'>9686</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrbt'>229342</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="CRBlocks Received" class='awrnclb'>47</td><td align="right" headers="CRBlocks %Immed" class='awrnc'>63.83</td><td align="right" headers="CRBlocks %Busy" class='awrnc'>36.17</td><td align="right" headers="CRBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrnclb'>1</td><td align="right" headers="CurrentBlocks %Immed" class='awrnc'>0.00</td><td align="right" headers="CurrentBlocks %Busy" class='awrnc'>100.00</td><td align="right" headers="CurrentBlocks %Cngst" class='awrnc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrnclb'>111760</td><td align="right" headers="CRAvgTime(us) Immed" class='awrnc'>804</td><td align="right" headers="CRAvgTime(us) Busy" class='awrnc'>307566</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrnclb'>848</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrnc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrnc'>848</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrc'>1</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="CRBlocks Received" class='awrclb'>12</td><td align="right" headers="CRBlocks %Immed" class='awrc'>100.00</td><td align="right" headers="CRBlocks %Busy" class='awrc'>0.00</td><td align="right" headers="CRBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CurrentBlocks Received" class='awrclb'>20</td><td align="right" headers="CurrentBlocks %Immed" class='awrc'>15.00</td><td align="right" headers="CurrentBlocks %Busy" class='awrc'>85.00</td><td align="right" headers="CurrentBlocks %Cngst" class='awrc'>0.00</td><td align="right" headers="CRAvgTime(us) All" class='awrclb'>241</td><td align="right" headers="CRAvgTime(us) Immed" class='awrc'>241</td><td align="right" headers="CRAvgTime(us) Busy" class='awrc'>&#160;</td><td align="right" headers="CRAvgTime(us) Cngst" class='awrc'>&#160;</td><td align="right" headers="CurrentAvgTime(us) All" class='awrclb'>733</td><td align="right" headers="CurrentAvgTime(us) Immed" class='awrc'>432</td><td align="right" headers="CurrentAvgTime(us) Busy" class='awrc'>786</td><td align="right" headers="CurrentAvgTime(us) Cngst" class='awrcrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#607">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12036"></a>
<h3 class="awr">Global Cache Transfer (Immediate)</h3>
<ul>
<li class="awr"> Ordered by instance_number, CR + Current Blocks Received desc</li>
</ul>
<table border="0" class="tdiff" summary="Global Cache Transfer (Immediate). . Ordered by instance_number, CR + Current Blocks Received desc"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 1" id="Block">Block</th>
<th class="awrbg" colspan=" 2" id="LostBlocks">Lost Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmediateCRBlocks">Immediate CR Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmediateCurrentBlocks">Immediate Current Blocks</th>
<th class="awrbg" colspan=" 3" id="ImmedCRAvgTime(us)">Immed CR Avg Time (us)</th>
<th class="awrbg" colspan=" 3" id="ImmedCurrentAvgTime(us)">Immed Current Avg Time (us)</th>
</tr><tr>
<th class="awrbg" scope="col" id="Dest">Dest</th><th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Class">Class</th><th class="awrbg" scope="col" id="Count">Count</th><th class="awrbg" scope="col" id="Time(us)">Time(us)</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%2-hop">%2-hop</th><th class="awrbg" scope="col" id="%3-hop">%3-hop</th><th class="awrbg" scope="col" id="Received">Received</th><th class="awrbg" scope="col" id="%2-hop">%2-hop</th><th class="awrbg" scope="col" id="%3-hop">%3-hop</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="2-hop">2-hop</th><th class="awrbg" scope="col" id="3-hop">3-hop</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="2-hop">2-hop</th><th class="awrbg" scope="col" id="3-hop">3-hop</th></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'>1</td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>data block</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>691</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>1,007</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>8728</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>8728</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>10239</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>10239</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>1,291</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>2267</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>2267</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrc'>2</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>7</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>917</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>917</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Src" class='awrnc'>2</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>1</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>2056</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>2056</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclbt'>2</td><td align="right" headers="Instance# Src" class='awrct'>1</td><td headers="Block Class" class='awrclbt'>data block</td><td align="right" headers="LostBlocks Count" class='awrclbt'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrct'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclbt'>601</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrct'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrct'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclbt'>387</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrct'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrct'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclbt'>6263</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrct'>6263</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrct'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclbt'>22525</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrct'>22525</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrbt'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo header</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>30</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>804</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>804</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrc'>1</td><td headers="Block Class" class='awrclb'>others</td><td align="right" headers="LostBlocks Count" class='awrclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrclb'>12</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrclb'>3</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrc'>100.00</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrc'>0.00</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrclb'>241</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrc'>241</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrclb'>432</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrc'>432</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" headers="Instance# Dest" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Src" class='awrnc'>1</td><td headers="Block Class" class='awrnclb'>undo block</td><td align="right" headers="LostBlocks Count" class='awrnclb'>0</td><td align="right" headers="LostBlocks Time(us)" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCRBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCRBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks Received" class='awrnclb'>0</td><td align="right" headers="ImmediateCurrentBlocks %2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmediateCurrentBlocks %3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCRAvgTime(us) 3-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) Total" class='awrnclb'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 2-hop" class='awrnc'>&#160;</td><td align="right" headers="ImmedCurrentAvgTime(us) 3-hop" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#607">Back to Global Cache Transfer Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="608"></a>
<h2 class="awr">
Interconnect Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12040">Cluster Interconnect</a></li>
<li class="awr"><a class="awr" href="#12045">Ping Statistics</a></li>
<li class="awr"><a class="awr" href="#12041">Interconnect Client Statistics</a></li>
<li class="awr"><a class="awr" href="#12042">Interconnect Client Statistics (per Second)</a></li>
<li class="awr"><a class="awr" href="#12043">Interconnect Device Statistics</a></li>
<li class="awr"><a class="awr" href="#12044">Interconnect Device Statistics (per Second)</a></li>
<li class="awr"><a class="awr" href="#12078">Dynamic Remastering Statistics</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12040"></a>
<h3 class="awr">Cluster Interconnect</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Cluster Interconnect"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 3" id="Begin">Begin</th>
<th class="awrbg" colspan=" 3" id="End(ifdifferentfromBegin)">End (if different from Begin)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="Pub">Pub</th><th class="awrbg" scope="col" id="Source">Source</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td class='awrc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrclb'>169.254.26.166</td><td headers="Begin Pub" class='awrc'>N</td><td headers="Begin Source" class='awrc'>&#160;</td><td headers="End(ifdifferentfromBegin) IPAddress" class='awrclb'>&#160;</td><td headers="End(ifdifferentfromBegin) Pub" class='awrc'>&#160;</td><td headers="End(ifdifferentfromBegin) Source" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td class='awrnc'>fg-priv:1</td><td headers="Begin IPAddress" class='awrnclb'>169.254.26.102</td><td headers="Begin Pub" class='awrnc'>N</td><td headers="Begin Source" class='awrnc'>&#160;</td><td headers="End(ifdifferentfromBegin) IPAddress" class='awrnclb'>&#160;</td><td headers="End(ifdifferentfromBegin) Pub" class='awrnc'>&#160;</td><td headers="End(ifdifferentfromBegin) Source" class='awrncrb'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12045"></a>
<h3 class="awr">Ping Statistics</h3>
<ul>
<li class="awr"> Latency of the roundtrip of a message from  Src Instance to the Target instances</li>
</ul>
<table border="0" class="tdiff" summary="Ping Statistics. . Latency of the roundtrip of a message from Src Instance to the Target instances"><tr>
<th class="awrbg" colspan=" 2" id="Instance#">Instance#</th>
<th class="awrbg" colspan=" 3" id="500bytes">500 bytes</th>
<th class="awrbg" colspan=" 3" id="8Kbytes">8 Kbytes</th>
</tr><tr>
<th class="awrbg" scope="col" id="Src">Src</th><th class="awrbg" scope="col" id="Target">Target</th><th class="awrbg" scope="col" id="Ping|Count">Ping Count</th><th class="awrbg" scope="col" id="Avg|Time(us)">Avg   Time(us)</th><th class="awrbg" scope="col" id="Std|Dev">Std Dev</th><th class="awrbg" scope="col" id="Ping|Count">Ping Count</th><th class="awrbg" scope="col" id="Avg|Time(us)">Avg   Time(us)</th><th class="awrbg" scope="col" id="Std|Dev">Std Dev</th></tr>
<tr><td align="right" headers="Instance# Src" class='awrclb'>1</td><td align="right" headers="Instance# Target" class='awrc'>1</td><td align="right" headers="500bytes Ping|Count" class='awrclb'>33</td><td align="right" headers="500bytes Avg|Time(us)" class='awrc'>451</td><td align="right" headers="500bytes Std|Dev" class='awrc'>0.15</td><td align="right" headers="8Kbytes Ping|Count" class='awrclb'>36</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrc'>429</td><td align="right" headers="8Kbytes Std|Dev" class='awrcrb'>0.15</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrnclb'><div class="hidden">1</div></td><td align="right" headers="Instance# Target" class='awrnc'>2</td><td align="right" headers="500bytes Ping|Count" class='awrnclb'>33</td><td align="right" headers="500bytes Avg|Time(us)" class='awrnc'>831</td><td align="right" headers="500bytes Std|Dev" class='awrnc'>0.53</td><td align="right" headers="8Kbytes Ping|Count" class='awrnclb'>36</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrnc'>945</td><td align="right" headers="8Kbytes Std|Dev" class='awrncrb'>0.71</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrclbt'>2</td><td align="right" headers="Instance# Target" class='awrct'>1</td><td align="right" headers="500bytes Ping|Count" class='awrclbt'>30</td><td align="right" headers="500bytes Avg|Time(us)" class='awrct'>812</td><td align="right" headers="500bytes Std|Dev" class='awrct'>0.54</td><td align="right" headers="8Kbytes Ping|Count" class='awrclbt'>33</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrct'>1166</td><td align="right" headers="8Kbytes Std|Dev" class='awrcrbt'>1.69</td></tr>
<tr><td align="right" headers="Instance# Src" class='awrnclb'><div class="hidden">2</div></td><td align="right" headers="Instance# Target" class='awrnc'>2</td><td align="right" headers="500bytes Ping|Count" class='awrnclb'>30</td><td align="right" headers="500bytes Avg|Time(us)" class='awrnc'>313</td><td align="right" headers="500bytes Std|Dev" class='awrnc'>0.14</td><td align="right" headers="8Kbytes Ping|Count" class='awrnclb'>33</td><td align="right" headers="8Kbytes Avg|Time(us)" class='awrnc'>294</td><td align="right" headers="8Kbytes Std|Dev" class='awrncrb'>0.13</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12041"></a>
<h3 class="awr">Interconnect Client Statistics</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Interconnect Client Statistics"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 6" id="Sent(MB)">Sent (MB)</th>
<th class="awrbg" colspan=" 6" id="Received(MB)">Received (MB)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sent(MB) Total" class='awrclb'>1,180.21</td><td align="right" headers="Sent(MB) Cache" class='awrc'>49.56</td><td align="right" headers="Sent(MB) IPQ" class='awrc'>10.61</td><td align="right" headers="Sent(MB) DLM" class='awrc'>1,079.26</td><td align="right" headers="Sent(MB) PNG" class='awrc'>0.61</td><td align="right" headers="Sent(MB) Misc" class='awrc'>40.18</td><td align="right" headers="Received(MB) Total" class='awrclb'>1,602.84</td><td align="right" headers="Received(MB) Cache" class='awrc'>14.67</td><td align="right" headers="Received(MB) IPQ" class='awrc'>5.63</td><td align="right" headers="Received(MB) DLM" class='awrc'>1,531.92</td><td align="right" headers="Received(MB) PNG" class='awrc'>0.61</td><td align="right" headers="Received(MB) Misc" class='awrcrb'>50.02</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sent(MB) Total" class='awrnclb'>1,451.59</td><td align="right" headers="Sent(MB) Cache" class='awrnc'>13.21</td><td align="right" headers="Sent(MB) IPQ" class='awrnc'>5.57</td><td align="right" headers="Sent(MB) DLM" class='awrnc'>1,385.91</td><td align="right" headers="Sent(MB) PNG" class='awrnc'>0.55</td><td align="right" headers="Sent(MB) Misc" class='awrnc'>46.35</td><td align="right" headers="Received(MB) Total" class='awrnclb'>1,064.78</td><td align="right" headers="Received(MB) Cache" class='awrnc'>46.71</td><td align="right" headers="Received(MB) IPQ" class='awrnc'>10.53</td><td align="right" headers="Received(MB) DLM" class='awrnc'>969.73</td><td align="right" headers="Received(MB) PNG" class='awrnc'>0.55</td><td align="right" headers="Received(MB) Misc" class='awrncrb'>37.26</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>2,631.80</td><td align="right" class='awrct'>62.77</td><td align="right" class='awrct'>16.17</td><td align="right" class='awrct'>2,465.17</td><td align="right" class='awrct'>1.16</td><td align="right" class='awrct'>86.53</td><td align="right" class='awrclbt'>2,667.62</td><td align="right" class='awrct'>61.38</td><td align="right" class='awrct'>16.15</td><td align="right" class='awrct'>2,501.65</td><td align="right" class='awrct'>1.16</td><td align="right" class='awrcrbt'>87.27</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>1,315.90</td><td align="right" class='awrnc'>31.39</td><td align="right" class='awrnc'>8.09</td><td align="right" class='awrnc'>1,232.58</td><td align="right" class='awrnc'>0.58</td><td align="right" class='awrnc'>43.26</td><td align="right" class='awrnclb'>1,333.81</td><td align="right" class='awrnc'>30.69</td><td align="right" class='awrnc'>8.08</td><td align="right" class='awrnc'>1,250.83</td><td align="right" class='awrnc'>0.58</td><td align="right" class='awrncrb'>43.64</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>191.90</td><td align="right" class='awrc'>25.70</td><td align="right" class='awrc'>3.56</td><td align="right" class='awrc'>216.84</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>4.36</td><td align="right" class='awrclb'>380.47</td><td align="right" class='awrc'>22.65</td><td align="right" class='awrc'>3.47</td><td align="right" class='awrc'>397.53</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrcrb'>9.02</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12042"></a>
<h3 class="awr">Interconnect Client Statistics (per Second)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="Interconnect Client Statistics (per Second)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 6" id="Sent(MB/s)">Sent (MB/s)</th>
<th class="awrbg" colspan=" 6" id="Received(MB/s)">Received (MB/s)</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="Cache">Cache</th><th class="awrbg" scope="col" id="IPQ">IPQ</th><th class="awrbg" scope="col" id="DLM">DLM</th><th class="awrbg" scope="col" id="PNG">PNG</th><th class="awrbg" scope="col" id="Misc">Misc</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sent(MB/s) Total" class='awrclb'>3.25</td><td align="right" headers="Sent(MB/s) Cache" class='awrc'>0.14</td><td align="right" headers="Sent(MB/s) IPQ" class='awrc'>0.03</td><td align="right" headers="Sent(MB/s) DLM" class='awrc'>2.97</td><td align="right" headers="Sent(MB/s) PNG" class='awrc'>0.00</td><td align="right" headers="Sent(MB/s) Misc" class='awrc'>0.11</td><td align="right" headers="Received(MB/s) Total" class='awrclb'>4.42</td><td align="right" headers="Received(MB/s) Cache" class='awrc'>0.04</td><td align="right" headers="Received(MB/s) IPQ" class='awrc'>0.02</td><td align="right" headers="Received(MB/s) DLM" class='awrc'>4.22</td><td align="right" headers="Received(MB/s) PNG" class='awrc'>0.00</td><td align="right" headers="Received(MB/s) Misc" class='awrcrb'>0.14</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sent(MB/s) Total" class='awrnclb'>4.00</td><td align="right" headers="Sent(MB/s) Cache" class='awrnc'>0.04</td><td align="right" headers="Sent(MB/s) IPQ" class='awrnc'>0.02</td><td align="right" headers="Sent(MB/s) DLM" class='awrnc'>3.82</td><td align="right" headers="Sent(MB/s) PNG" class='awrnc'>0.00</td><td align="right" headers="Sent(MB/s) Misc" class='awrnc'>0.13</td><td align="right" headers="Received(MB/s) Total" class='awrnclb'>2.93</td><td align="right" headers="Received(MB/s) Cache" class='awrnc'>0.13</td><td align="right" headers="Received(MB/s) IPQ" class='awrnc'>0.03</td><td align="right" headers="Received(MB/s) DLM" class='awrnc'>2.67</td><td align="right" headers="Received(MB/s) PNG" class='awrnc'>0.00</td><td align="right" headers="Received(MB/s) Misc" class='awrncrb'>0.10</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>7.25</td><td align="right" class='awrct'>0.17</td><td align="right" class='awrct'>0.04</td><td align="right" class='awrct'>6.79</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.24</td><td align="right" class='awrclbt'>7.35</td><td align="right" class='awrct'>0.17</td><td align="right" class='awrct'>0.04</td><td align="right" class='awrct'>6.89</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrcrbt'>0.24</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>3.62</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>3.40</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnclb'>3.67</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>3.45</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrncrb'>0.12</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>0.53</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.60</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrclb'>1.05</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>1.10</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrcrb'>0.02</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12043"></a>
<h3 class="awr">Interconnect Device Statistics</h3>
<ul>
<li class="awr"> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs </li>
<li class="awr"> null means begin value &gt; end value</li>
</ul>
<table border="0" class="tdiff" summary="Interconnect Device Statistics. . Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs. null means begin value &gt; end value"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Interface">Interface</th>
<th class="awrbg" colspan=" 6" id="Sent">Sent</th>
<th class="awrbg" colspan=" 6" id="Received">Received</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="NAME">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="IPMask">IP Mask</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Carrier|Lost">Carrier Lost</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Frame|Errors">Frame Errors</th></tr>
<tr><td align="right" class='awrc'>1</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.4</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>14,690.33</td><td align="right" headers="Sent Packets" class='awrc'>9,718,720</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>15,746.37</td><td align="right" headers="Received Packets" class='awrc'>9,200,692</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>2,390.03</td><td align="right" headers="Sent Packets" class='awrnc'>6,258,991</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>2,816.87</td><td align="right" headers="Received Packets" class='awrnc'>6,198,749</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.26.166</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.17</td><td align="right" headers="Sent Packets" class='awrnc'>715</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.11</td><td align="right" headers="Received Packets" class='awrnc'>697</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.11</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.21</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-storage</td><td headers="Interface IPAddress" class='awrc'>192.168.3.1</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>1.78</td><td align="right" headers="Sent Packets" class='awrc'>2,082</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>1.28</td><td align="right" headers="Received Packets" class='awrc'>2,785</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>lo</td><td headers="Interface IPAddress" class='awrnc'>127.0.0.1</td><td headers="Interface IPMask" class='awrnc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>73.19</td><td align="right" headers="Sent Packets" class='awrnc'>1,185,412</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>73.19</td><td align="right" headers="Received Packets" class='awrnc'>1,185,412</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'>2</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.6</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>15,900.73</td><td align="right" headers="Sent Packets" class='awrc'>9,461,035</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>14,553.51</td><td align="right" headers="Received Packets" class='awrc'>9,453,776</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>2,813.27</td><td align="right" headers="Sent Packets" class='awrnc'>5,883,101</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>2,396.06</td><td align="right" headers="Received Packets" class='awrnc'>6,474,954</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.26.102</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.11</td><td align="right" headers="Sent Packets" class='awrnc'>693</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.17</td><td align="right" headers="Received Packets" class='awrnc'>718</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.23</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:3</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.22</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:4</td><td headers="Interface IPAddress" class='awrc'>192.168.1.12</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>1.78</td><td align="right" headers="Sent Packets" class='awrnc'>2,088</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>1.28</td><td align="right" headers="Received Packets" class='awrnc'>2,791</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>93.46</td><td align="right" headers="Sent Packets" class='awrc'>1,848,465</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>93.46</td><td align="right" headers="Received Packets" class='awrc'>1,848,465</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnct'>Sum</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclbt'>35,964.85</td><td align="right" class='awrnct'>34,361,302</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnclbt'>35,682.31</td><td align="right" class='awrnct'>34,369,039</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrncrbt'>0</td></tr>
<tr><td align="right" class='awrc'>Avg</td><td class='awrclb'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td align="right" class='awrclb'>2,115.58</td><td align="right" class='awrc'>2,021,253</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>2,098.96</td><td align="right" class='awrc'>2,021,708</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>Std</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclb'>5,038.56</td><td align="right" class='awrnc'>3,474,188</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>4,990.91</td><td align="right" class='awrnc'>3,443,418</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12044"></a>
<h3 class="awr">Interconnect Device Statistics (per Second)</h3>
<ul>
<li class="awr"> Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs </li>
<li class="awr"> Blank	means begin value &gt; end value</li>
</ul>
<table border="0" class="tdiff" summary="Interconnect Device Statistics (per Second). . Data is retrieved from underlying Operating system and may overflow on some 32-bit OSs. Blank means begin value &gt; end value"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 3" id="Interface">Interface</th>
<th class="awrbg" colspan=" 6" id="Sent">Sent</th>
<th class="awrbg" colspan=" 6" id="Received">Received</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="NAME">NAME</th><th class="awrbg" scope="col" id="IPAddress">IP Address</th><th class="awrbg" scope="col" id="IPMask">IP Mask</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Carrier|Lost">Carrier Lost</th><th class="awrbg" scope="col" id="MBytes">MBytes</th><th class="awrbg" scope="col" id="Packets">Packets</th><th class="awrbg" scope="col" id="Errors">Errors</th><th class="awrbg" scope="col" id="Packets|Dropped">Packets Dropped</th><th class="awrbg" scope="col" id="Buffer|Ovrrun">Buffer Ovrrun</th><th class="awrbg" scope="col" id="Frame|Errors">Frame Errors</th></tr>
<tr><td align="right" class='awrc'>1</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.4</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>40.47</td><td align="right" headers="Sent Packets" class='awrc'>26,771</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>43.37</td><td align="right" headers="Received Packets" class='awrc'>25,344</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>6.58</td><td align="right" headers="Sent Packets" class='awrnc'>17,241</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>7.76</td><td align="right" headers="Received Packets" class='awrnc'>17,075</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.26.166</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.1</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>2</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>2</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.11</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:2</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.21</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrclb'>fg-storage</td><td headers="Interface IPAddress" class='awrc'>192.168.3.1</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>6</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>8</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td headers="Interface NAME" class='awrnclb'>lo</td><td headers="Interface IPAddress" class='awrnc'>127.0.0.1</td><td headers="Interface IPMask" class='awrnc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.20</td><td align="right" headers="Sent Packets" class='awrnc'>3,265</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.20</td><td align="right" headers="Received Packets" class='awrnc'>3,265</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'>2</td><td headers="Interface NAME" class='awrclb'>eth0</td><td headers="Interface IPAddress" class='awrc'>10.1.5.6</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>43.80</td><td align="right" headers="Sent Packets" class='awrc'>26,061</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>40.09</td><td align="right" headers="Received Packets" class='awrc'>26,041</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-priv</td><td headers="Interface IPAddress" class='awrnc'>192.168.2.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>7.75</td><td align="right" headers="Sent Packets" class='awrnc'>16,205</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>6.60</td><td align="right" headers="Received Packets" class='awrnc'>17,836</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-priv:1</td><td headers="Interface IPAddress" class='awrc'>169.254.26.102</td><td headers="Interface IPMask" class='awrc'>255.255.224.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>2</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>2</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:1</td><td headers="Interface IPAddress" class='awrc'>192.168.1.23</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-pub:3</td><td headers="Interface IPAddress" class='awrnc'>192.168.1.22</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>0</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>0</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>fg-pub:4</td><td headers="Interface IPAddress" class='awrc'>192.168.1.12</td><td headers="Interface IPMask" class='awrc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.00</td><td align="right" headers="Sent Packets" class='awrc'>0</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.00</td><td align="right" headers="Received Packets" class='awrc'>0</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrnclb'>fg-storage</td><td headers="Interface IPAddress" class='awrnc'>192.168.3.2</td><td headers="Interface IPMask" class='awrnc'>255.255.255.0</td><td align="right" headers="Sent MBytes" class='awrnclb'>0.00</td><td align="right" headers="Sent Packets" class='awrnc'>6</td><td align="right" headers="Sent Errors" class='awrnc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrnc'>0</td><td align="right" headers="Received MBytes" class='awrnclb'>0.00</td><td align="right" headers="Received Packets" class='awrnc'>8</td><td align="right" headers="Received Errors" class='awrnc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrnc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrnc'>0</td><td align="right" headers="Received Frame|Errors" class='awrncrb'>0</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td headers="Interface NAME" class='awrclb'>lo</td><td headers="Interface IPAddress" class='awrc'>127.0.0.1</td><td headers="Interface IPMask" class='awrc'>255.0.0.0</td><td align="right" headers="Sent MBytes" class='awrclb'>0.26</td><td align="right" headers="Sent Packets" class='awrc'>5,092</td><td align="right" headers="Sent Errors" class='awrc'>0</td><td align="right" headers="Sent Packets|Dropped" class='awrc'>0</td><td align="right" headers="Sent Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Sent Carrier|Lost" class='awrc'>0</td><td align="right" headers="Received MBytes" class='awrclb'>0.26</td><td align="right" headers="Received Packets" class='awrc'>5,092</td><td align="right" headers="Received Errors" class='awrc'>0</td><td align="right" headers="Received Packets|Dropped" class='awrc'>0</td><td align="right" headers="Received Buffer|Ovrrun" class='awrc'>0</td><td align="right" headers="Received Frame|Errors" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnct'>Sum</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclbt'>99.07</td><td align="right" class='awrnct'>94,651</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnclbt'>98.29</td><td align="right" class='awrnct'>94,672</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrnct'>0</td><td align="right" class='awrncrbt'>0</td></tr>
<tr><td align="right" class='awrc'>Avg</td><td class='awrclb'>&#160;</td><td class='awrc'>&#160;</td><td class='awrc'>&#160;</td><td align="right" class='awrclb'>5.83</td><td align="right" class='awrc'>5,568</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrclb'>5.78</td><td align="right" class='awrc'>5,569</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrcrb'>0</td></tr>
<tr><td align="right" class='awrnc'>Std</td><td class='awrnclb'>&#160;</td><td class='awrnc'>&#160;</td><td class='awrnc'>&#160;</td><td align="right" class='awrnclb'>13.88</td><td align="right" class='awrnc'>9,570</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnclb'>13.75</td><td align="right" class='awrnc'>9,485</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12078"></a>
<h3 class="awr">Dynamic Remastering Statistics</h3>
<ul>
<li class="awr"> Affinity Objects - Affinity objects remastered at the begin/end snapshot  </li>
<li class="awr"> Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot</li>
</ul>
<table border="0" class="tdiff" summary="Dynamic Remastering Statistics. . Affinity Objects - Affinity objects remastered at the begin/end snapshot . Read-mostly objects - Read-mostly objects remastered at the begin/end snapshot"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="CountsperOps">Counts per Ops</th>
<th class="awrbg" colspan=" 6" id="TimeperOps(seconds)">Time per Ops (seconds)</th>
<th class="awrbg" colspan=" 2" id="AffinityObjects">Affinity Objects</th>
<th class="awrbg" colspan=" 3" id="ReadMostlyObjects">Read Mostly Objects</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Remaster Ops</th><th class="awrbg" scope="col" id="Remastered|Objects">Remastered Objects</th><th class="awrbg" scope="col" id="ReplayLocks|Received">Replay Locks Received</th><th class="awrbg" scope="col" id="ReplayLocks|Sent">Replay Locks Sent</th><th class="awrbg" scope="col" id="Resources|Cleaned">Resources Cleaned</th><th class="awrbg" scope="col" id="Remaster">Remaster</th><th class="awrbg" scope="col" id="Freeze">Freeze</th><th class="awrbg" scope="col" id="Cleanup">Cleanup</th><th class="awrbg" scope="col" id="Replay">Replay</th><th class="awrbg" scope="col" id="Fixwrite">Fixwrite</th><th class="awrbg" scope="col" id="Sync">Sync</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="Begin|(persistent)">Begin (persistent)</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" class='awrc'>1</td><td align="right" headers="CountsperOps Remastered|Objects" class='awrclb'>7.00</td><td align="right" headers="CountsperOps ReplayLocks|Received" class='awrc'>0.00</td><td align="right" headers="CountsperOps ReplayLocks|Sent" class='awrc'>0.00</td><td align="right" headers="CountsperOps Resources|Cleaned" class='awrc'>0.00</td><td align="right" headers="TimeperOps(seconds) Remaster" class='awrclb'>0.94</td><td align="right" headers="TimeperOps(seconds) Freeze" class='awrc'>0.08</td><td align="right" headers="TimeperOps(seconds) Cleanup" class='awrc'>0.01</td><td align="right" headers="TimeperOps(seconds) Replay" class='awrc'>0.03</td><td align="right" headers="TimeperOps(seconds) Fixwrite" class='awrc'>0.01</td><td align="right" headers="TimeperOps(seconds) Sync" class='awrc'>0.79</td><td align="right" headers="AffinityObjects Begin" class='awrclb'>135</td><td align="right" headers="AffinityObjects End" class='awrc'>132</td><td align="right" headers="ReadMostlyObjects Begin" class='awrclb'>65</td><td align="right" headers="ReadMostlyObjects Begin|(persistent)" class='awrc'>0</td><td align="right" headers="ReadMostlyObjects End" class='awrcrb'>65</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" class='awrnc'>1</td><td align="right" headers="CountsperOps Remastered|Objects" class='awrnclb'>7.00</td><td align="right" headers="CountsperOps ReplayLocks|Received" class='awrnc'>0.00</td><td align="right" headers="CountsperOps ReplayLocks|Sent" class='awrnc'>0.00</td><td align="right" headers="CountsperOps Resources|Cleaned" class='awrnc'>0.00</td><td align="right" headers="TimeperOps(seconds) Remaster" class='awrnclb'>0.82</td><td align="right" headers="TimeperOps(seconds) Freeze" class='awrnc'>0.08</td><td align="right" headers="TimeperOps(seconds) Cleanup" class='awrnc'>0.01</td><td align="right" headers="TimeperOps(seconds) Replay" class='awrnc'>0.01</td><td align="right" headers="TimeperOps(seconds) Fixwrite" class='awrnc'>0.01</td><td align="right" headers="TimeperOps(seconds) Sync" class='awrnc'>0.58</td><td align="right" headers="AffinityObjects Begin" class='awrnclb'>63</td><td align="right" headers="AffinityObjects End" class='awrnc'>61</td><td align="right" headers="ReadMostlyObjects Begin" class='awrnclb'>65</td><td align="right" headers="ReadMostlyObjects Begin|(persistent)" class='awrnc'>0</td><td align="right" headers="ReadMostlyObjects End" class='awrncrb'>65</td></tr>
<tr><td align="right" scope="row" class='awrct'>Avg</td><td align="right" class='awrct'>1</td><td align="right" class='awrclbt'>7.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrct'>0.00</td><td align="right" class='awrclbt'>0.88</td><td align="right" class='awrct'>0.08</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>0.02</td><td align="right" class='awrct'>0.01</td><td align="right" class='awrct'>0.69</td><td align="right" class='awrclbt'>99</td><td align="right" class='awrct'>97</td><td align="right" class='awrclbt'>65</td><td align="right" class='awrct'>0</td><td align="right" class='awrcrbt'>65</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Max</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnclb'>&#160;</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnclb'>0.94</td><td align="right" class='awrnc'>0.08</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.79</td><td align="right" class='awrnclb'>135</td><td align="right" class='awrnc'>132</td><td align="right" class='awrnclb'>65</td><td align="right" class='awrnc'>0</td><td align="right" class='awrncrb'>65</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#608">Back to Interconnect Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="622"></a>
<h2 class="awr">
SQL Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12060">SQL ordered by Elapsed Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12061">SQL ordered by CPU Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12066">SQL ordered by User I/O Time (Global)</a></li>
<li class="awr"><a class="awr" href="#12062">SQL ordered by Gets (Global)</a></li>
<li class="awr"><a class="awr" href="#12063">SQL ordered by Reads (Global)</a></li>
<li class="awr"><a class="awr" href="#12081">SQL ordered by UnOptimized Read Requests (Global)</a></li>
<li class="awr"><a class="awr" href="#12065">SQL ordered by Executions (Global)</a></li>
<li class="awr"><a class="awr" href="#12064">SQL ordered by Cluster Wait Time (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12060"></a>
<h3 class="awr">SQL ordered by Elapsed Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   90.2% of Total DB Time (s):		65,033</li>
<li class="awr">Captured PL/SQL account for   40.2% of Total DB Time (s):	   65,033</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Elapsed Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>39,035.02</td><td align="right" headers="Total CPU(s)" class='awrc'>3,816.71</td><td align="right" headers="Total IOWait(s)" class='awrc'>3,050.82</td><td align="right" headers="Total Gets" class='awrc'>15,337,053</td><td align="right" headers="Total Reads" class='awrc'>8,718,740</td><td align="right" headers="Total Rows" class='awrc'>3,062,533</td><td align="right" headers="Total Cluster(s)" class='awrc'>13,124.27</td><td align="right" headers="Total Execs" class='awrc'>3,062,456</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>5.01</td><td align="right" headers="PerExecution Reads" class='awrc'>2.85</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>60.02</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>66.99</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.27</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>38.28</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>39.59</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>41.34</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>40.34</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>19,495.06</td><td align="right" headers="Total CPU(s)" class='awrnc'>644.64</td><td align="right" headers="Total IOWait(s)" class='awrnc'>345.83</td><td align="right" headers="Total Gets" class='awrnc'>2,148,157</td><td align="right" headers="Total Reads" class='awrnc'>962,854</td><td align="right" headers="Total Rows" class='awrnc'>1,020,999</td><td align="right" headers="Total Cluster(s)" class='awrnc'>3,734.45</td><td align="right" headers="Total Execs" class='awrnc'>340,333</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.06</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>6.31</td><td align="right" headers="PerExecution Reads" class='awrnc'>2.83</td><td align="right" headers="PerExecution Rows" class='awrnc'>3.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>29.98</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>11.31</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>5.36</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>4.37</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>11.76</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>4.48</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#5arf1acfkxs97">5arf1acfkxs97</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>252.29</td><td align="right" headers="Total CPU(s)" class='awrc'>10.44</td><td align="right" headers="Total IOWait(s)" class='awrc'>15.92</td><td align="right" headers="Total Gets" class='awrc'>34,004</td><td align="right" headers="Total Reads" class='awrc'>19,136</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>188.16</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>252.29</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>10.44</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>15.92</td><td align="right" headers="PerExecution Gets" class='awrc'>34,004.00</td><td align="right" headers="PerExecution Reads" class='awrc'>19,136.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>188.16</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.39</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.08</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.09</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.59</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#8fg5cq0nbygpt">8fg5cq0nbygpt</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>251.43</td><td align="right" headers="Total CPU(s)" class='awrnc'>8.96</td><td align="right" headers="Total IOWait(s)" class='awrnc'>12.45</td><td align="right" headers="Total Gets" class='awrnc'>28,983</td><td align="right" headers="Total Reads" class='awrnc'>16,469</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>198.98</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>251.43</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>8.96</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>12.45</td><td align="right" headers="PerExecution Gets" class='awrnc'>28,983.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>16,469.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>198.98</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.39</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.16</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.07</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.07</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.63</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#7drkmz76wk052">7drkmz76wk052</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>251.35</td><td align="right" headers="Total CPU(s)" class='awrc'>10.50</td><td align="right" headers="Total IOWait(s)" class='awrc'>15.12</td><td align="right" headers="Total Gets" class='awrc'>34,508</td><td align="right" headers="Total Reads" class='awrc'>19,708</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>191.42</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>251.35</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>10.50</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>15.12</td><td align="right" headers="PerExecution Gets" class='awrc'>34,508.00</td><td align="right" headers="PerExecution Reads" class='awrc'>19,708.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>191.42</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.39</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.09</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.09</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.60</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#9ssvtqp2k6160">9ssvtqp2k6160</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>251.22</td><td align="right" headers="Total CPU(s)" class='awrnc'>10.28</td><td align="right" headers="Total IOWait(s)" class='awrnc'>14.10</td><td align="right" headers="Total Gets" class='awrnc'>31,911</td><td align="right" headers="Total Reads" class='awrnc'>19,048</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>182.66</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>251.22</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>10.28</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>14.10</td><td align="right" headers="PerExecution Gets" class='awrnc'>31,911.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>19,048.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>182.66</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.39</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.08</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.09</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.58</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#g86sg3wychh60">g86sg3wychh60</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>250.80</td><td align="right" headers="Total CPU(s)" class='awrc'>13.30</td><td align="right" headers="Total IOWait(s)" class='awrc'>33.39</td><td align="right" headers="Total Gets" class='awrc'>83,752</td><td align="right" headers="Total Reads" class='awrc'>47,832</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>85.97</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>250.80</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>13.30</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>33.39</td><td align="right" headers="PerExecution Gets" class='awrc'>83,752.00</td><td align="right" headers="PerExecution Reads" class='awrc'>47,832.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>85.97</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.39</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.23</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.21</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.22</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.27</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#anaswt0rrkktj">anaswt0rrkktj</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>250.77</td><td align="right" headers="Total CPU(s)" class='awrnc'>15.47</td><td align="right" headers="Total IOWait(s)" class='awrnc'>38.71</td><td align="right" headers="Total Gets" class='awrnc'>97,014</td><td align="right" headers="Total Reads" class='awrnc'>57,117</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>91.51</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>250.77</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>15.47</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>38.71</td><td align="right" headers="PerExecution Gets" class='awrnc'>97,014.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>57,117.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>91.51</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.39</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.27</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.26</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.29</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#1z43m6frrngsy">1z43m6frrngsy</a></td><td align="right" headers="Total Elapsed(s)" class='awrclb'>250.74</td><td align="right" headers="Total CPU(s)" class='awrc'>15.32</td><td align="right" headers="Total IOWait(s)" class='awrc'>37.18</td><td align="right" headers="Total Gets" class='awrc'>94,336</td><td align="right" headers="Total Reads" class='awrc'>55,633</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>108.58</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>250.74</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>15.32</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>37.18</td><td align="right" headers="PerExecution Gets" class='awrc'>94,336.00</td><td align="right" headers="PerExecution Reads" class='awrc'>55,633.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>108.58</td><td align="right" headers="PercentageofTotal DBtime" class='awrclb'>0.39</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.27</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.24</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.25</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#3m5q54b1a187h">3m5q54b1a187h</a></td><td align="right" headers="Total Elapsed(s)" class='awrnclb'>250.71</td><td align="right" headers="Total CPU(s)" class='awrnc'>16.88</td><td align="right" headers="Total IOWait(s)" class='awrnc'>42.71</td><td align="right" headers="Total Gets" class='awrnc'>114,162</td><td align="right" headers="Total Reads" class='awrnc'>63,085</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>90.62</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>250.71</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>16.88</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>42.71</td><td align="right" headers="PerExecution Gets" class='awrnc'>114,162.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>63,085.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>90.62</td><td align="right" headers="PercentageofTotal DBtime" class='awrnclb'>0.39</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.30</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.28</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.29</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.29</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12061"></a>
<h3 class="awr">SQL ordered by CPU Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   78.6% of Total CPU Time (s): 	  5,697</li>
<li class="awr">Captured PL/SQL account for   52.9% of Total CPU Time (s):	     5,697</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by CPU Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>3,816.71</td><td align="right" headers="Total Elapsed(s)" class='awrc'>39,035.02</td><td align="right" headers="Total IOWait(s)" class='awrc'>3,050.82</td><td align="right" headers="Total Gets" class='awrc'>15,337,053</td><td align="right" headers="Total Reads" class='awrc'>8,718,740</td><td align="right" headers="Total Rows" class='awrc'>3,062,533</td><td align="right" headers="Total Cluster(s)" class='awrc'>13,124.27</td><td align="right" headers="Total Execs" class='awrc'>3,062,456</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>5.01</td><td align="right" headers="PerExecution Reads" class='awrc'>2.85</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>66.99</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>60.02</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>26.99</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>38.28</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>39.59</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>41.34</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>40.34</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>644.64</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>19,495.06</td><td align="right" headers="Total IOWait(s)" class='awrnc'>345.83</td><td align="right" headers="Total Gets" class='awrnc'>2,148,157</td><td align="right" headers="Total Reads" class='awrnc'>962,854</td><td align="right" headers="Total Rows" class='awrnc'>1,020,999</td><td align="right" headers="Total Cluster(s)" class='awrnc'>3,734.45</td><td align="right" headers="Total Execs" class='awrnc'>340,333</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.06</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>6.31</td><td align="right" headers="PerExecution Reads" class='awrnc'>2.83</td><td align="right" headers="PerExecution Rows" class='awrnc'>3.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>11.31</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>29.98</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>3.06</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>5.36</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>4.37</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>11.76</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>4.48</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#7kcm0mhxqy5q8">7kcm0mhxqy5q8</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>78.69</td><td align="right" headers="Total Elapsed(s)" class='awrc'>220.00</td><td align="right" headers="Total IOWait(s)" class='awrc'>105.37</td><td align="right" headers="Total Gets" class='awrc'>800,126</td><td align="right" headers="Total Reads" class='awrc'>359,510</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>1.01</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>78.69</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>220.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>105.37</td><td align="right" headers="PerExecution Gets" class='awrc'>800,126.00</td><td align="right" headers="PerExecution Reads" class='awrc'>359,510.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>1.01</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>1.38</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.93</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>2.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.63</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#9v83s8vqfv1d6">9v83s8vqfv1d6</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>76.58</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>221.01</td><td align="right" headers="Total IOWait(s)" class='awrnc'>106.14</td><td align="right" headers="Total Gets" class='awrnc'>736,208</td><td align="right" headers="Total Reads" class='awrnc'>356,686</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>76.58</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>221.01</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>106.14</td><td align="right" headers="PerExecution Gets" class='awrnc'>736,208.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>356,686.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>1.34</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.94</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.84</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.62</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#ddk08qkf81zw2">ddk08qkf81zw2</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>75.32</td><td align="right" headers="Total Elapsed(s)" class='awrc'>220.97</td><td align="right" headers="Total IOWait(s)" class='awrc'>105.55</td><td align="right" headers="Total Gets" class='awrc'>709,473</td><td align="right" headers="Total Reads" class='awrc'>355,268</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.18</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>75.32</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>220.97</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>105.55</td><td align="right" headers="PerExecution Gets" class='awrc'>709,473.00</td><td align="right" headers="PerExecution Reads" class='awrc'>355,268.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>1.32</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.93</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.77</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.61</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fcfyvfu5jmtsj">fcfyvfu5jmtsj</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>74.30</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>219.93</td><td align="right" headers="Total IOWait(s)" class='awrnc'>105.43</td><td align="right" headers="Total Gets" class='awrnc'>689,514</td><td align="right" headers="Total Reads" class='awrnc'>348,698</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>74.30</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>219.93</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>105.43</td><td align="right" headers="PerExecution Gets" class='awrnc'>689,514.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>348,698.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>1.30</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.93</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.72</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.58</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#1b74aw70y48yn">1b74aw70y48yn</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>73.89</td><td align="right" headers="Total Elapsed(s)" class='awrc'>220.93</td><td align="right" headers="Total IOWait(s)" class='awrc'>103.30</td><td align="right" headers="Total Gets" class='awrc'>699,935</td><td align="right" headers="Total Reads" class='awrc'>342,604</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.01</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>73.89</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>220.93</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>103.30</td><td align="right" headers="PerExecution Gets" class='awrc'>699,935.00</td><td align="right" headers="PerExecution Reads" class='awrc'>342,604.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>1.30</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.91</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.75</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.56</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7w4ajz9mh4684">7w4ajz9mh4684</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>72.19</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>220.93</td><td align="right" headers="Total IOWait(s)" class='awrnc'>103.73</td><td align="right" headers="Total Gets" class='awrnc'>655,710</td><td align="right" headers="Total Reads" class='awrnc'>340,739</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>8.22</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>72.19</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>220.93</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>103.73</td><td align="right" headers="PerExecution Gets" class='awrnc'>655,710.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>340,739.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>8.22</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>1.27</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.92</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.64</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#38r80y2wpq2ma">38r80y2wpq2ma</a></td><td align="right" headers="Total CPU(s)" class='awrclb'>72.05</td><td align="right" headers="Total Elapsed(s)" class='awrc'>219.98</td><td align="right" headers="Total IOWait(s)" class='awrc'>103.16</td><td align="right" headers="Total Gets" class='awrc'>654,914</td><td align="right" headers="Total Reads" class='awrc'>338,924</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>10.43</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrclb'>72.05</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>219.98</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>103.16</td><td align="right" headers="PerExecution Gets" class='awrc'>654,914.00</td><td align="right" headers="PerExecution Reads" class='awrc'>338,924.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>10.43</td><td align="right" headers="PercentageofTotal DBCPU" class='awrclb'>1.26</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.91</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.63</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.54</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.03</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#71f07h4b84yt2">71f07h4b84yt2</a></td><td align="right" headers="Total CPU(s)" class='awrnclb'>70.17</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>219.93</td><td align="right" headers="Total IOWait(s)" class='awrnc'>98.20</td><td align="right" headers="Total Gets" class='awrnc'>696,304</td><td align="right" headers="Total Reads" class='awrnc'>321,693</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>5.13</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution CPU(s)" class='awrnclb'>70.17</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>219.93</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>98.20</td><td align="right" headers="PerExecution Gets" class='awrnc'>696,304.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>321,693.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>5.13</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnclb'>1.23</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.87</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.74</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.46</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.02</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12066"></a>
<h3 class="awr">SQL ordered by User I/O Time (Global)</h3>
<ul>
<li class="awr">Captured SQL account for   30.1% of Total User I/O Wait Time (s):	   11,302</li>
<li class="awr">Captured PL/SQL account for   50.7% of Total User I/O Wait Time (s):	      11,302</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by User I/O Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>3,050.82</td><td align="right" headers="Total Elapsed(s)" class='awrc'>39,035.02</td><td align="right" headers="Total CPU(s)" class='awrc'>3,816.71</td><td align="right" headers="Total Gets" class='awrc'>15,337,053</td><td align="right" headers="Total Reads" class='awrc'>8,718,740</td><td align="right" headers="Total Rows" class='awrc'>3,062,533</td><td align="right" headers="Total Cluster(s)" class='awrc'>13,124.27</td><td align="right" headers="Total Execs" class='awrc'>3,062,456</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>5.01</td><td align="right" headers="PerExecution Reads" class='awrc'>2.85</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>26.99</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>60.02</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>66.99</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>38.28</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>39.59</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>41.34</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>40.34</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>345.83</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>19,495.06</td><td align="right" headers="Total CPU(s)" class='awrnc'>644.64</td><td align="right" headers="Total Gets" class='awrnc'>2,148,157</td><td align="right" headers="Total Reads" class='awrnc'>962,854</td><td align="right" headers="Total Rows" class='awrnc'>1,020,999</td><td align="right" headers="Total Cluster(s)" class='awrnc'>3,734.45</td><td align="right" headers="Total Execs" class='awrnc'>340,333</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.06</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>6.31</td><td align="right" headers="PerExecution Reads" class='awrnc'>2.83</td><td align="right" headers="PerExecution Rows" class='awrnc'>3.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>3.06</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>29.98</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>11.31</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>5.36</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>4.37</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>11.76</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>4.48</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#9v83s8vqfv1d6">9v83s8vqfv1d6</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>106.14</td><td align="right" headers="Total Elapsed(s)" class='awrc'>221.01</td><td align="right" headers="Total CPU(s)" class='awrc'>76.58</td><td align="right" headers="Total Gets" class='awrc'>736,208</td><td align="right" headers="Total Reads" class='awrc'>356,686</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.01</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>106.14</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>221.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>76.58</td><td align="right" headers="PerExecution Gets" class='awrc'>736,208.00</td><td align="right" headers="PerExecution Reads" class='awrc'>356,686.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.94</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.34</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.84</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.62</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#ddk08qkf81zw2">ddk08qkf81zw2</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>105.55</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>220.97</td><td align="right" headers="Total CPU(s)" class='awrnc'>75.32</td><td align="right" headers="Total Gets" class='awrnc'>709,473</td><td align="right" headers="Total Reads" class='awrnc'>355,268</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.18</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>105.55</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>220.97</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>75.32</td><td align="right" headers="PerExecution Gets" class='awrnc'>709,473.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>355,268.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.18</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.93</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.32</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.77</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.61</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#fcfyvfu5jmtsj">fcfyvfu5jmtsj</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>105.43</td><td align="right" headers="Total Elapsed(s)" class='awrc'>219.93</td><td align="right" headers="Total CPU(s)" class='awrc'>74.30</td><td align="right" headers="Total Gets" class='awrc'>689,514</td><td align="right" headers="Total Reads" class='awrc'>348,698</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>105.43</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>219.93</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>74.30</td><td align="right" headers="PerExecution Gets" class='awrc'>689,514.00</td><td align="right" headers="PerExecution Reads" class='awrc'>348,698.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.93</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.30</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.72</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.58</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7kcm0mhxqy5q8">7kcm0mhxqy5q8</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>105.37</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>220.00</td><td align="right" headers="Total CPU(s)" class='awrnc'>78.69</td><td align="right" headers="Total Gets" class='awrnc'>800,126</td><td align="right" headers="Total Reads" class='awrnc'>359,510</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>1.01</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>105.37</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>220.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>78.69</td><td align="right" headers="PerExecution Gets" class='awrnc'>800,126.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>359,510.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>1.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.93</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.38</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>2.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.63</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#7w4ajz9mh4684">7w4ajz9mh4684</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>103.73</td><td align="right" headers="Total Elapsed(s)" class='awrc'>220.93</td><td align="right" headers="Total CPU(s)" class='awrc'>72.19</td><td align="right" headers="Total Gets" class='awrc'>655,710</td><td align="right" headers="Total Reads" class='awrc'>340,739</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>8.22</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>103.73</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>220.93</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>72.19</td><td align="right" headers="PerExecution Gets" class='awrc'>655,710.00</td><td align="right" headers="PerExecution Reads" class='awrc'>340,739.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>8.22</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.92</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.27</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.64</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.55</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.03</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#1b74aw70y48yn">1b74aw70y48yn</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>103.30</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>220.93</td><td align="right" headers="Total CPU(s)" class='awrnc'>73.89</td><td align="right" headers="Total Gets" class='awrnc'>699,935</td><td align="right" headers="Total Reads" class='awrnc'>342,604</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>103.30</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>220.93</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>73.89</td><td align="right" headers="PerExecution Gets" class='awrnc'>699,935.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>342,604.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.91</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.30</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.75</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.56</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#38r80y2wpq2ma">38r80y2wpq2ma</a></td><td align="right" headers="Total IOWait(s)" class='awrclb'>103.16</td><td align="right" headers="Total Elapsed(s)" class='awrc'>219.98</td><td align="right" headers="Total CPU(s)" class='awrc'>72.05</td><td align="right" headers="Total Gets" class='awrc'>654,914</td><td align="right" headers="Total Reads" class='awrc'>338,924</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>10.43</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrclb'>103.16</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>219.98</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>72.05</td><td align="right" headers="PerExecution Gets" class='awrc'>654,914.00</td><td align="right" headers="PerExecution Reads" class='awrc'>338,924.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>10.43</td><td align="right" headers="PercentageofTotal IOWait" class='awrclb'>0.91</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.26</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.63</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.54</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.03</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#71f07h4b84yt2">71f07h4b84yt2</a></td><td align="right" headers="Total IOWait(s)" class='awrnclb'>98.20</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>219.93</td><td align="right" headers="Total CPU(s)" class='awrnc'>70.17</td><td align="right" headers="Total Gets" class='awrnc'>696,304</td><td align="right" headers="Total Reads" class='awrnc'>321,693</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>5.13</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution IOWait(s)" class='awrnclb'>98.20</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>219.93</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>70.17</td><td align="right" headers="PerExecution Gets" class='awrnc'>696,304.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>321,693.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>5.13</td><td align="right" headers="PercentageofTotal IOWait" class='awrnclb'>0.87</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.23</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.74</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.46</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.02</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12062"></a>
<h3 class="awr">SQL ordered by Gets (Global)</h3>
<ul>
<li class="awr">Total Buffer Gets:	40,065,632</li>
<li class="awr">Captured SQL account for   43.9% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Gets (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Gets" class='awrclb'>15,337,053</td><td align="right" headers="Total Reads" class='awrc'>8,718,740</td><td align="right" headers="Total Elapsed(s)" class='awrc'>39,035.02</td><td align="right" headers="Total CPU(s)" class='awrc'>3,816.71</td><td align="right" headers="Total IOWait(s)" class='awrc'>3,050.82</td><td align="right" headers="Total Rows" class='awrc'>3,062,533</td><td align="right" headers="Total Cluster(s)" class='awrc'>13,124.27</td><td align="right" headers="Total Execs" class='awrc'>3,062,456</td><td align="right" headers="PerExecution Gets" class='awrclb'>5.01</td><td align="right" headers="PerExecution Reads" class='awrc'>2.85</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>38.28</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>39.59</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>60.02</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>66.99</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>26.99</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>41.34</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>40.34</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Gets" class='awrnclb'>2,148,157</td><td align="right" headers="Total Reads" class='awrnc'>962,854</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>19,495.06</td><td align="right" headers="Total CPU(s)" class='awrnc'>644.64</td><td align="right" headers="Total IOWait(s)" class='awrnc'>345.83</td><td align="right" headers="Total Rows" class='awrnc'>1,020,999</td><td align="right" headers="Total Cluster(s)" class='awrnc'>3,734.45</td><td align="right" headers="Total Execs" class='awrnc'>340,333</td><td align="right" headers="PerExecution Gets" class='awrnclb'>6.31</td><td align="right" headers="PerExecution Reads" class='awrnc'>2.83</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.06</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>3.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>5.36</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>4.37</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>29.98</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>11.31</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>3.06</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>11.76</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>4.48</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#7kcm0mhxqy5q8">7kcm0mhxqy5q8</a></td><td align="right" headers="Total Gets" class='awrclb'>800,126</td><td align="right" headers="Total Reads" class='awrc'>359,510</td><td align="right" headers="Total Elapsed(s)" class='awrc'>220.00</td><td align="right" headers="Total CPU(s)" class='awrc'>78.69</td><td align="right" headers="Total IOWait(s)" class='awrc'>105.37</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>1.01</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>800,126.00</td><td align="right" headers="PerExecution Reads" class='awrc'>359,510.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>220.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>78.69</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>105.37</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>1.01</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>2.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.63</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.38</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.93</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#9v83s8vqfv1d6">9v83s8vqfv1d6</a></td><td align="right" headers="Total Gets" class='awrnclb'>736,208</td><td align="right" headers="Total Reads" class='awrnc'>356,686</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>221.01</td><td align="right" headers="Total CPU(s)" class='awrnc'>76.58</td><td align="right" headers="Total IOWait(s)" class='awrnc'>106.14</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>736,208.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>356,686.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>221.01</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>76.58</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>106.14</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>1.84</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.62</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.34</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.94</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#ddk08qkf81zw2">ddk08qkf81zw2</a></td><td align="right" headers="Total Gets" class='awrclb'>709,473</td><td align="right" headers="Total Reads" class='awrc'>355,268</td><td align="right" headers="Total Elapsed(s)" class='awrc'>220.97</td><td align="right" headers="Total CPU(s)" class='awrc'>75.32</td><td align="right" headers="Total IOWait(s)" class='awrc'>105.55</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.18</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>709,473.00</td><td align="right" headers="PerExecution Reads" class='awrc'>355,268.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>220.97</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>75.32</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>105.55</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>1.77</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.61</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.32</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.93</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#1b74aw70y48yn">1b74aw70y48yn</a></td><td align="right" headers="Total Gets" class='awrnclb'>699,935</td><td align="right" headers="Total Reads" class='awrnc'>342,604</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>220.93</td><td align="right" headers="Total CPU(s)" class='awrnc'>73.89</td><td align="right" headers="Total IOWait(s)" class='awrnc'>103.30</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>699,935.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>342,604.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>220.93</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>73.89</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>103.30</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>1.75</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.56</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.30</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.91</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#71f07h4b84yt2">71f07h4b84yt2</a></td><td align="right" headers="Total Gets" class='awrclb'>696,304</td><td align="right" headers="Total Reads" class='awrc'>321,693</td><td align="right" headers="Total Elapsed(s)" class='awrc'>219.93</td><td align="right" headers="Total CPU(s)" class='awrc'>70.17</td><td align="right" headers="Total IOWait(s)" class='awrc'>98.20</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>5.13</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>696,304.00</td><td align="right" headers="PerExecution Reads" class='awrc'>321,693.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>219.93</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>70.17</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>98.20</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>5.13</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>1.74</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.46</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.23</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.87</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.02</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fcfyvfu5jmtsj">fcfyvfu5jmtsj</a></td><td align="right" headers="Total Gets" class='awrnclb'>689,514</td><td align="right" headers="Total Reads" class='awrnc'>348,698</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>219.93</td><td align="right" headers="Total CPU(s)" class='awrnc'>74.30</td><td align="right" headers="Total IOWait(s)" class='awrnc'>105.43</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>689,514.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>348,698.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>219.93</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>74.30</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>105.43</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>1.72</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.58</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.30</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.93</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#ds7scgmy0unq5">ds7scgmy0unq5</a></td><td align="right" headers="Total Gets" class='awrclb'>657,589</td><td align="right" headers="Total Reads" class='awrc'>329,515</td><td align="right" headers="Total Elapsed(s)" class='awrc'>220.96</td><td align="right" headers="Total CPU(s)" class='awrc'>70.11</td><td align="right" headers="Total IOWait(s)" class='awrc'>99.51</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.01</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Gets" class='awrclb'>657,589.00</td><td align="right" headers="PerExecution Reads" class='awrc'>329,515.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>220.96</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>70.11</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>99.51</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Gets" class='awrclb'>1.64</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.50</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.23</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.88</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7w4ajz9mh4684">7w4ajz9mh4684</a></td><td align="right" headers="Total Gets" class='awrnclb'>655,710</td><td align="right" headers="Total Reads" class='awrnc'>340,739</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>220.93</td><td align="right" headers="Total CPU(s)" class='awrnc'>72.19</td><td align="right" headers="Total IOWait(s)" class='awrnc'>103.73</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>8.22</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Gets" class='awrnclb'>655,710.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>340,739.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>220.93</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>72.19</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>103.73</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>8.22</td><td align="right" headers="PercentageofTotal Gets" class='awrnclb'>1.64</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.55</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.27</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.92</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12063"></a>
<h3 class="awr">SQL ordered by Reads (Global)</h3>
<ul>
<li class="awr">Total Disk Reads:      22,022,883</li>
<li class="awr">Captured SQL account for   44.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Reads (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Reads" class='awrclb'>8,718,740</td><td align="right" headers="Total Gets" class='awrc'>15,337,053</td><td align="right" headers="Total Elapsed(s)" class='awrc'>39,035.02</td><td align="right" headers="Total CPU(s)" class='awrc'>3,816.71</td><td align="right" headers="Total IOWait(s)" class='awrc'>3,050.82</td><td align="right" headers="Total Rows" class='awrc'>3,062,533</td><td align="right" headers="Total Cluster(s)" class='awrc'>13,124.27</td><td align="right" headers="Total Execs" class='awrc'>3,062,456</td><td align="right" headers="PerExecution Reads" class='awrclb'>2.85</td><td align="right" headers="PerExecution Gets" class='awrc'>5.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>39.59</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>38.28</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>60.02</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>66.99</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>26.99</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>41.34</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>40.34</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Reads" class='awrnclb'>962,854</td><td align="right" headers="Total Gets" class='awrnc'>2,148,157</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>19,495.06</td><td align="right" headers="Total CPU(s)" class='awrnc'>644.64</td><td align="right" headers="Total IOWait(s)" class='awrnc'>345.83</td><td align="right" headers="Total Rows" class='awrnc'>1,020,999</td><td align="right" headers="Total Cluster(s)" class='awrnc'>3,734.45</td><td align="right" headers="Total Execs" class='awrnc'>340,333</td><td align="right" headers="PerExecution Reads" class='awrnclb'>2.83</td><td align="right" headers="PerExecution Gets" class='awrnc'>6.31</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.06</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>3.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>4.37</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>5.36</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>29.98</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>11.31</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>3.06</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>11.76</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>4.48</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#7kcm0mhxqy5q8">7kcm0mhxqy5q8</a></td><td align="right" headers="Total Reads" class='awrclb'>359,510</td><td align="right" headers="Total Gets" class='awrc'>800,126</td><td align="right" headers="Total Elapsed(s)" class='awrc'>220.00</td><td align="right" headers="Total CPU(s)" class='awrc'>78.69</td><td align="right" headers="Total IOWait(s)" class='awrc'>105.37</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>1.01</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>359,510.00</td><td align="right" headers="PerExecution Gets" class='awrc'>800,126.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>220.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>78.69</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>105.37</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>1.01</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>1.63</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>2.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.38</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.93</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#9v83s8vqfv1d6">9v83s8vqfv1d6</a></td><td align="right" headers="Total Reads" class='awrnclb'>356,686</td><td align="right" headers="Total Gets" class='awrnc'>736,208</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>221.01</td><td align="right" headers="Total CPU(s)" class='awrnc'>76.58</td><td align="right" headers="Total IOWait(s)" class='awrnc'>106.14</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>356,686.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>736,208.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>221.01</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>76.58</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>106.14</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>1.62</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.84</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.34</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.94</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#ddk08qkf81zw2">ddk08qkf81zw2</a></td><td align="right" headers="Total Reads" class='awrclb'>355,268</td><td align="right" headers="Total Gets" class='awrc'>709,473</td><td align="right" headers="Total Elapsed(s)" class='awrc'>220.97</td><td align="right" headers="Total CPU(s)" class='awrc'>75.32</td><td align="right" headers="Total IOWait(s)" class='awrc'>105.55</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.18</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>355,268.00</td><td align="right" headers="PerExecution Gets" class='awrc'>709,473.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>220.97</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>75.32</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>105.55</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>1.61</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.77</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.32</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.93</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fcfyvfu5jmtsj">fcfyvfu5jmtsj</a></td><td align="right" headers="Total Reads" class='awrnclb'>348,698</td><td align="right" headers="Total Gets" class='awrnc'>689,514</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>219.93</td><td align="right" headers="Total CPU(s)" class='awrnc'>74.30</td><td align="right" headers="Total IOWait(s)" class='awrnc'>105.43</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>348,698.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>689,514.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>219.93</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>74.30</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>105.43</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>1.58</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.72</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.30</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.93</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#1b74aw70y48yn">1b74aw70y48yn</a></td><td align="right" headers="Total Reads" class='awrclb'>342,604</td><td align="right" headers="Total Gets" class='awrc'>699,935</td><td align="right" headers="Total Elapsed(s)" class='awrc'>220.93</td><td align="right" headers="Total CPU(s)" class='awrc'>73.89</td><td align="right" headers="Total IOWait(s)" class='awrc'>103.30</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.01</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>342,604.00</td><td align="right" headers="PerExecution Gets" class='awrc'>699,935.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>220.93</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>73.89</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>103.30</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>1.56</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.75</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.30</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.91</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7w4ajz9mh4684">7w4ajz9mh4684</a></td><td align="right" headers="Total Reads" class='awrnclb'>340,739</td><td align="right" headers="Total Gets" class='awrnc'>655,710</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>220.93</td><td align="right" headers="Total CPU(s)" class='awrnc'>72.19</td><td align="right" headers="Total IOWait(s)" class='awrnc'>103.73</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>8.22</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>340,739.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>655,710.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>220.93</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>72.19</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>103.73</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>8.22</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>1.55</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.64</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.27</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.92</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#38r80y2wpq2ma">38r80y2wpq2ma</a></td><td align="right" headers="Total Reads" class='awrclb'>338,924</td><td align="right" headers="Total Gets" class='awrc'>654,914</td><td align="right" headers="Total Elapsed(s)" class='awrc'>219.98</td><td align="right" headers="Total CPU(s)" class='awrc'>72.05</td><td align="right" headers="Total IOWait(s)" class='awrc'>103.16</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>10.43</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Reads" class='awrclb'>338,924.00</td><td align="right" headers="PerExecution Gets" class='awrc'>654,914.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>219.98</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>72.05</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>103.16</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>10.43</td><td align="right" headers="PercentageofTotal Reads" class='awrclb'>1.54</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>1.63</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.26</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.91</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.03</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#ds7scgmy0unq5">ds7scgmy0unq5</a></td><td align="right" headers="Total Reads" class='awrnclb'>329,515</td><td align="right" headers="Total Gets" class='awrnc'>657,589</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>220.96</td><td align="right" headers="Total CPU(s)" class='awrnc'>70.11</td><td align="right" headers="Total IOWait(s)" class='awrnc'>99.51</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Reads" class='awrnclb'>329,515.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>657,589.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>220.96</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>70.11</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>99.51</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrnclb'>1.50</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>1.64</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.23</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.88</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12081"></a>
<h3 class="awr">SQL ordered by UnOptimized Read Requests (Global)</h3>
<ul>
<li class="awr">Total Physical Read Requests:	   22,020,196</li>
<li class="awr">Captured SQL account for    0.1% of Total</li>
<li class="awr">Total UnOptimized Read Requests:      22,020,196</li>
<li class="awr">Captured SQL account for    0.1% of Total</li>
<li class="awr">Total Optimized Read Requests:		     1</li>
<li class="awr">Captured SQL account for    0.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by UnOptimized Read Requests (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 9" id="Total">Total</th>
<th class="awrbg" colspan=" 8" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 8" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="UnOptimized">UnOptimized</th><th class="awrbg" scope="col" id="Requests">Requests</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#7kcm0mhxqy5q8">7kcm0mhxqy5q8</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>359,510</td><td align="right" headers="Total Requests" class='awrc'>359,510</td><td align="right" headers="Total Reads" class='awrc'>359,510</td><td align="right" headers="Total Elapsed(s)" class='awrc'>220.00</td><td align="right" headers="Total CPU(s)" class='awrc'>78.69</td><td align="right" headers="Total IOWait(s)" class='awrc'>105.37</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>1.01</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>359,510.00</td><td align="right" headers="PerExecution Requests" class='awrc'>359,510.00</td><td align="right" headers="PerExecution Reads" class='awrc'>359,510.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>220.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>78.69</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>105.37</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>1.01</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.63</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.63</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.63</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.38</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.93</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#9v83s8vqfv1d6">9v83s8vqfv1d6</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>356,686</td><td align="right" headers="Total Requests" class='awrnc'>356,686</td><td align="right" headers="Total Reads" class='awrnc'>356,686</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>221.01</td><td align="right" headers="Total CPU(s)" class='awrnc'>76.58</td><td align="right" headers="Total IOWait(s)" class='awrnc'>106.14</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>356,686.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>356,686.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>356,686.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>221.01</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>76.58</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>106.14</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.62</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.62</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.62</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.34</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.94</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#ddk08qkf81zw2">ddk08qkf81zw2</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>355,268</td><td align="right" headers="Total Requests" class='awrc'>355,268</td><td align="right" headers="Total Reads" class='awrc'>355,268</td><td align="right" headers="Total Elapsed(s)" class='awrc'>220.97</td><td align="right" headers="Total CPU(s)" class='awrc'>75.32</td><td align="right" headers="Total IOWait(s)" class='awrc'>105.55</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.18</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>355,268.00</td><td align="right" headers="PerExecution Requests" class='awrc'>355,268.00</td><td align="right" headers="PerExecution Reads" class='awrc'>355,268.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>220.97</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>75.32</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>105.55</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.61</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.61</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.61</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.32</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.93</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#fcfyvfu5jmtsj">fcfyvfu5jmtsj</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>348,698</td><td align="right" headers="Total Requests" class='awrnc'>348,698</td><td align="right" headers="Total Reads" class='awrnc'>348,698</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>219.93</td><td align="right" headers="Total CPU(s)" class='awrnc'>74.30</td><td align="right" headers="Total IOWait(s)" class='awrnc'>105.43</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>348,698.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>348,698.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>348,698.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>219.93</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>74.30</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>105.43</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.58</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.58</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.58</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.30</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.93</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#1b74aw70y48yn">1b74aw70y48yn</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>342,604</td><td align="right" headers="Total Requests" class='awrc'>342,604</td><td align="right" headers="Total Reads" class='awrc'>342,604</td><td align="right" headers="Total Elapsed(s)" class='awrc'>220.93</td><td align="right" headers="Total CPU(s)" class='awrc'>73.89</td><td align="right" headers="Total IOWait(s)" class='awrc'>103.30</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.01</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>342,604.00</td><td align="right" headers="PerExecution Requests" class='awrc'>342,604.00</td><td align="right" headers="PerExecution Reads" class='awrc'>342,604.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>220.93</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>73.89</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>103.30</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.56</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.56</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.56</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.30</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.91</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#7w4ajz9mh4684">7w4ajz9mh4684</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>340,739</td><td align="right" headers="Total Requests" class='awrnc'>340,739</td><td align="right" headers="Total Reads" class='awrnc'>340,739</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>220.93</td><td align="right" headers="Total CPU(s)" class='awrnc'>72.19</td><td align="right" headers="Total IOWait(s)" class='awrnc'>103.73</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>8.22</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>340,739.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>340,739.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>340,739.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>220.93</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>72.19</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>103.73</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>8.22</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.55</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.55</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.55</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.27</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.92</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.03</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#38r80y2wpq2ma">38r80y2wpq2ma</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>338,924</td><td align="right" headers="Total Requests" class='awrc'>338,924</td><td align="right" headers="Total Reads" class='awrc'>338,924</td><td align="right" headers="Total Elapsed(s)" class='awrc'>219.98</td><td align="right" headers="Total CPU(s)" class='awrc'>72.05</td><td align="right" headers="Total IOWait(s)" class='awrc'>103.16</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>10.43</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>338,924.00</td><td align="right" headers="PerExecution Requests" class='awrc'>338,924.00</td><td align="right" headers="PerExecution Reads" class='awrc'>338,924.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>219.98</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>72.05</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>103.16</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>10.43</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.54</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.54</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.54</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.26</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.91</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.03</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#ds7scgmy0unq5">ds7scgmy0unq5</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>329,515</td><td align="right" headers="Total Requests" class='awrnc'>329,515</td><td align="right" headers="Total Reads" class='awrnc'>329,515</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>220.96</td><td align="right" headers="Total CPU(s)" class='awrnc'>70.11</td><td align="right" headers="Total IOWait(s)" class='awrnc'>99.51</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>329,515.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>329,515.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>329,515.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>220.96</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>70.11</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>99.51</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.50</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.50</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.50</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.23</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.88</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#czhh6tvvf96yz">czhh6tvvf96yz</a></td><td align="right" headers="Total UnOptimized" class='awrclb'>327,622</td><td align="right" headers="Total Requests" class='awrc'>327,622</td><td align="right" headers="Total Reads" class='awrc'>327,622</td><td align="right" headers="Total Elapsed(s)" class='awrc'>220.93</td><td align="right" headers="Total CPU(s)" class='awrc'>70.04</td><td align="right" headers="Total IOWait(s)" class='awrc'>100.24</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Cluster(s)" class='awrc'>3.74</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrclb'>327,622.00</td><td align="right" headers="PerExecution Requests" class='awrc'>327,622.00</td><td align="right" headers="PerExecution Reads" class='awrc'>327,622.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>220.93</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>70.04</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>100.24</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>3.74</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrclb'>1.49</td><td align="right" headers="PercentageofTotal Requests" class='awrc'>1.49</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>1.49</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>1.23</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.89</td><td align="right" headers="PercentageofTotal Cluster" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#2sff4nbj564pf">2sff4nbj564pf</a></td><td align="right" headers="Total UnOptimized" class='awrnclb'>323,453</td><td align="right" headers="Total Requests" class='awrnc'>323,453</td><td align="right" headers="Total Reads" class='awrnc'>323,453</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>219.95</td><td align="right" headers="Total CPU(s)" class='awrnc'>68.44</td><td align="right" headers="Total IOWait(s)" class='awrnc'>98.66</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution UnOptimized" class='awrnclb'>323,453.00</td><td align="right" headers="PerExecution Requests" class='awrnc'>323,453.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>323,453.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>219.95</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>68.44</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>98.66</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal UnOptimized" class='awrnclb'>1.47</td><td align="right" headers="PercentageofTotal Requests" class='awrnc'>1.47</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>1.47</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>1.20</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.87</td><td align="right" headers="PercentageofTotal Cluster" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12065"></a>
<h3 class="awr">SQL ordered by Executions (Global)</h3>
<ul>
<li class="awr">Total Executions:	7,591,643</li>
<li class="awr">Captured SQL account for   45.0% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Executions (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Execs" class='awrclb'>3,062,456</td><td align="right" headers="Total Elapsed(s)" class='awrc'>39,035.02</td><td align="right" headers="Total CPU(s)" class='awrc'>3,816.71</td><td align="right" headers="Total IOWait(s)" class='awrc'>3,050.82</td><td align="right" headers="Total Gets" class='awrc'>15,337,053</td><td align="right" headers="Total Reads" class='awrc'>8,718,740</td><td align="right" headers="Total Rows" class='awrc'>3,062,533</td><td align="right" headers="Total Cluster(s)" class='awrc'>13,124.27</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>5.01</td><td align="right" headers="PerExecution Reads" class='awrc'>2.85</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>40.34</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>60.02</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>66.99</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>26.99</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>38.28</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>39.59</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>41.34</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Execs" class='awrnclb'>340,333</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>19,495.06</td><td align="right" headers="Total CPU(s)" class='awrnc'>644.64</td><td align="right" headers="Total IOWait(s)" class='awrnc'>345.83</td><td align="right" headers="Total Gets" class='awrnc'>2,148,157</td><td align="right" headers="Total Reads" class='awrnc'>962,854</td><td align="right" headers="Total Rows" class='awrnc'>1,020,999</td><td align="right" headers="Total Cluster(s)" class='awrnc'>3,734.45</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.06</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>6.31</td><td align="right" headers="PerExecution Reads" class='awrnc'>2.83</td><td align="right" headers="PerExecution Rows" class='awrnc'>3.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>4.48</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>29.98</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>11.31</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>3.06</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>5.36</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>4.37</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>11.76</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#24djtk7r8fz33">24djtk7r8fz33</a></td><td align="right" headers="Total Execs" class='awrclb'>2,550</td><td align="right" headers="Total Elapsed(s)" class='awrc'>0.18</td><td align="right" headers="Total CPU(s)" class='awrc'>0.16</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.00</td><td align="right" headers="Total Gets" class='awrc'>7,738</td><td align="right" headers="Total Reads" class='awrc'>0</td><td align="right" headers="Total Rows" class='awrc'>2,547</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>3.03</td><td align="right" headers="PerExecution Reads" class='awrc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.03</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.02</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>update svcobj_access$ set acce...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#87gaftwrm2h68">87gaftwrm2h68</a></td><td align="right" headers="Total Execs" class='awrnclb'>2,541</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.19</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.09</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.02</td><td align="right" headers="Total Gets" class='awrnc'>5,240</td><td align="right" headers="Total Reads" class='awrnc'>26</td><td align="right" headers="Total Rows" class='awrnc'>158</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.08</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>2.06</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.01</td><td align="right" headers="PerExecution Rows" class='awrnc'>0.06</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.03</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select o.owner#, o.name, o.nam...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#acmvv4fhdc9zh">acmvv4fhdc9zh</a></td><td align="right" headers="Total Execs" class='awrclb'>651</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1.49</td><td align="right" headers="Total CPU(s)" class='awrc'>0.12</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.10</td><td align="right" headers="Total Gets" class='awrc'>2,302</td><td align="right" headers="Total Reads" class='awrc'>144</td><td align="right" headers="Total Rows" class='awrc'>352</td><td align="right" headers="Total Cluster(s)" class='awrc'>1.29</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>3.54</td><td align="right" headers="PerExecution Reads" class='awrc'>0.22</td><td align="right" headers="PerExecution Rows" class='awrc'>0.54</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.01</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>select obj#, type#, ctime, mti...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#0gx3b09qrx9f5">0gx3b09qrx9f5</a></td><td align="right" headers="Total Execs" class='awrnclb'>384</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.04</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.02</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.01</td><td align="right" headers="Total Gets" class='awrnc'>790</td><td align="right" headers="Total Reads" class='awrnc'>12</td><td align="right" headers="Total Rows" class='awrnc'>16</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>2.06</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.03</td><td align="right" headers="PerExecution Rows" class='awrnc'>0.04</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.01</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select obj#, index# from oid$ ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#fn5s5p6hr6702">fn5s5p6hr6702</a></td><td align="right" headers="Total Execs" class='awrclb'>282</td><td align="right" headers="Total Elapsed(s)" class='awrc'>1.16</td><td align="right" headers="Total CPU(s)" class='awrc'>0.05</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.01</td><td align="right" headers="Total Gets" class='awrc'>1,824</td><td align="right" headers="Total Reads" class='awrc'>22</td><td align="right" headers="Total Rows" class='awrc'>282</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.85</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>6.47</td><td align="right" headers="PerExecution Reads" class='awrc'>0.08</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>INSERT INTO wri$_adv_message_g...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#04kug40zbu4dm">04kug40zbu4dm</a></td><td align="right" headers="Total Execs" class='awrnclb'>265</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.03</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.02</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="Total Gets" class='awrnc'>2,120</td><td align="right" headers="Total Reads" class='awrnc'>0</td><td align="right" headers="Total Rows" class='awrnc'>0</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>8.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>0.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.01</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>select policy#, action# from a...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#9babjv8yq8ru3">9babjv8yq8ru3</a></td><td align="right" headers="Total Execs" class='awrclb'>256</td><td align="right" headers="Total Elapsed(s)" class='awrc'>3.06</td><td align="right" headers="Total CPU(s)" class='awrc'>0.37</td><td align="right" headers="Total IOWait(s)" class='awrc'>0.06</td><td align="right" headers="Total Gets" class='awrc'>1,018</td><td align="right" headers="Total Reads" class='awrc'>63</td><td align="right" headers="Total Rows" class='awrc'>256</td><td align="right" headers="Total Cluster(s)" class='awrc'>0.30</td><td align="right" headers="PerExecution Elapsed(s)" class='awrclb'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>3.98</td><td align="right" headers="PerExecution Reads" class='awrc'>0.25</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.01</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrcrb'>0.00</td>
<td class='awrc'>BEGIN DBMS_OUTPUT.GET_LINES(:L...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#f80h0xb1qvbsk">f80h0xb1qvbsk</a></td><td align="right" headers="Total Execs" class='awrnclb'>242</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>0.35</td><td align="right" headers="Total CPU(s)" class='awrnc'>0.05</td><td align="right" headers="Total IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="Total Gets" class='awrnc'>119</td><td align="right" headers="Total Reads" class='awrnc'>2</td><td align="right" headers="Total Rows" class='awrnc'>242</td><td align="right" headers="Total Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnclb'>0.00</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>0.49</td><td align="right" headers="PerExecution Reads" class='awrnc'>0.01</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PerExecution Cluster(s)" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Execs" class='awrnclb'>0.00</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrncrb'>0.00</td>
<td class='awrnc'>SELECT sys.wri$_adv_seq_msggro...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12064"></a>
<h3 class="awr">SQL ordered by Cluster Wait Time (Global)</h3>
<ul>
<li class="awr">Total Cluster Wait Time (s):	      31,746</li>
<li class="awr">Captured SQL account for   53.1% of Total</li>
</ul>
<table border="0" class="tdiff" summary="SQL ordered by Cluster Wait Time (Global)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 8" id="Total">Total</th>
<th class="awrbg" colspan=" 7" id="PerExecution">Per Execution</th>
<th class="awrbg" colspan=" 7" id="PercentageofTotal">Percentage of Total</th>
<td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">	 SQL Id</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col" id="Cluster(s)">Cluster (s)</th><th class="awrbg" scope="col" id="Elapsed(s)">Elapsed (s)</th><th class="awrbg" scope="col" id="CPU(s)">CPU (s)</th><th class="awrbg" scope="col" id="IOWait(s)">IOWait (s)</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Rows">Rows</th><th class="awrbg" scope="col" id="Cluster">Cluster</th><th class="awrbg" scope="col" id="DBtime">DB time</th><th class="awrbg" scope="col" id="DBCPU">DB CPU</th><th class="awrbg" scope="col" id="Gets">Gets</th><th class="awrbg" scope="col" id="IOWait">IO Wait</th><th class="awrbg" scope="col" id="Reads">Reads</th><th class="awrbg" scope="col" id="Execs">Execs</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>13,124.27</td><td align="right" headers="Total Elapsed(s)" class='awrc'>39,035.02</td><td align="right" headers="Total CPU(s)" class='awrc'>3,816.71</td><td align="right" headers="Total IOWait(s)" class='awrc'>3,050.82</td><td align="right" headers="Total Gets" class='awrc'>15,337,053</td><td align="right" headers="Total Reads" class='awrc'>8,718,740</td><td align="right" headers="Total Rows" class='awrc'>3,062,533</td><td align="right" headers="Total Execs" class='awrc'>3,062,456</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>0.00</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>0.01</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrc'>5.01</td><td align="right" headers="PerExecution Reads" class='awrc'>2.85</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>41.34</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>60.02</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>66.99</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>26.99</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>38.28</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>39.59</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>40.34</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>3,734.45</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>19,495.06</td><td align="right" headers="Total CPU(s)" class='awrnc'>644.64</td><td align="right" headers="Total IOWait(s)" class='awrnc'>345.83</td><td align="right" headers="Total Gets" class='awrnc'>2,148,157</td><td align="right" headers="Total Reads" class='awrnc'>962,854</td><td align="right" headers="Total Rows" class='awrnc'>1,020,999</td><td align="right" headers="Total Execs" class='awrnc'>340,333</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>0.01</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>0.06</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>0.00</td><td align="right" headers="PerExecution Gets" class='awrnc'>6.31</td><td align="right" headers="PerExecution Reads" class='awrnc'>2.83</td><td align="right" headers="PerExecution Rows" class='awrnc'>3.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>11.76</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>29.98</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>11.31</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>3.06</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>5.36</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>4.37</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>4.48</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#8fg5cq0nbygpt">8fg5cq0nbygpt</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>198.98</td><td align="right" headers="Total Elapsed(s)" class='awrc'>251.43</td><td align="right" headers="Total CPU(s)" class='awrc'>8.96</td><td align="right" headers="Total IOWait(s)" class='awrc'>12.45</td><td align="right" headers="Total Gets" class='awrc'>28,983</td><td align="right" headers="Total Reads" class='awrc'>16,469</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>198.98</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>251.43</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>8.96</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>12.45</td><td align="right" headers="PerExecution Gets" class='awrc'>28,983.00</td><td align="right" headers="PerExecution Reads" class='awrc'>16,469.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.63</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.39</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.16</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.07</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.07</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#9udhpyj6s7uqj">9udhpyj6s7uqj</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>197.92</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>250.53</td><td align="right" headers="Total CPU(s)" class='awrnc'>9.76</td><td align="right" headers="Total IOWait(s)" class='awrnc'>13.60</td><td align="right" headers="Total Gets" class='awrnc'>32,957</td><td align="right" headers="Total Reads" class='awrnc'>18,763</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>197.92</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>250.53</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>9.76</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>13.60</td><td align="right" headers="PerExecution Gets" class='awrnc'>32,957.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>18,763.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.62</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.39</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.17</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.12</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.08</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.09</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#088xwjaryshvr">088xwjaryshvr</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>192.20</td><td align="right" headers="Total Elapsed(s)" class='awrc'>250.35</td><td align="right" headers="Total CPU(s)" class='awrc'>8.71</td><td align="right" headers="Total IOWait(s)" class='awrc'>12.79</td><td align="right" headers="Total Gets" class='awrc'>27,736</td><td align="right" headers="Total Reads" class='awrc'>15,887</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>192.20</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>250.35</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>8.71</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>12.79</td><td align="right" headers="PerExecution Gets" class='awrc'>27,736.00</td><td align="right" headers="PerExecution Reads" class='awrc'>15,887.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.61</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.38</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.15</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.11</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.07</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.07</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#37j3jp5dz0b0t">37j3jp5dz0b0t</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>191.43</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>221.91</td><td align="right" headers="Total CPU(s)" class='awrnc'>8.78</td><td align="right" headers="Total IOWait(s)" class='awrnc'>7.61</td><td align="right" headers="Total Gets" class='awrnc'>26,688</td><td align="right" headers="Total Reads" class='awrnc'>18,337</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>191.43</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>221.91</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>8.78</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>7.61</td><td align="right" headers="PerExecution Gets" class='awrnc'>26,688.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>18,337.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.60</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.15</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.07</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.07</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.08</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#7drkmz76wk052">7drkmz76wk052</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>191.42</td><td align="right" headers="Total Elapsed(s)" class='awrc'>251.35</td><td align="right" headers="Total CPU(s)" class='awrc'>10.50</td><td align="right" headers="Total IOWait(s)" class='awrc'>15.12</td><td align="right" headers="Total Gets" class='awrc'>34,508</td><td align="right" headers="Total Reads" class='awrc'>19,708</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>191.42</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>251.35</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>10.50</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>15.12</td><td align="right" headers="PerExecution Gets" class='awrc'>34,508.00</td><td align="right" headers="PerExecution Reads" class='awrc'>19,708.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.60</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.39</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.18</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.13</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.09</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.09</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#4zttz5yb0wfmw">4zttz5yb0wfmw</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>191.20</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>221.90</td><td align="right" headers="Total CPU(s)" class='awrnc'>9.94</td><td align="right" headers="Total IOWait(s)" class='awrnc'>8.61</td><td align="right" headers="Total Gets" class='awrnc'>30,969</td><td align="right" headers="Total Reads" class='awrnc'>21,224</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>191.20</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>221.90</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>9.94</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>8.61</td><td align="right" headers="PerExecution Gets" class='awrnc'>30,969.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>21,224.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.60</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.17</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.08</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.08</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.10</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrc'><a class="awr" href="#6pqjm0dp8bnky">6pqjm0dp8bnky</a></td><td align="right" headers="Total Cluster(s)" class='awrclb'>190.68</td><td align="right" headers="Total Elapsed(s)" class='awrc'>222.43</td><td align="right" headers="Total CPU(s)" class='awrc'>9.28</td><td align="right" headers="Total IOWait(s)" class='awrc'>8.18</td><td align="right" headers="Total Gets" class='awrc'>28,861</td><td align="right" headers="Total Reads" class='awrc'>19,948</td><td align="right" headers="Total Rows" class='awrc'>1</td><td align="right" headers="Total Execs" class='awrc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrclb'>190.68</td><td align="right" headers="PerExecution Elapsed(s)" class='awrc'>222.43</td><td align="right" headers="PerExecution CPU(s)" class='awrc'>9.28</td><td align="right" headers="PerExecution IOWait(s)" class='awrc'>8.18</td><td align="right" headers="PerExecution Gets" class='awrc'>28,861.00</td><td align="right" headers="PerExecution Reads" class='awrc'>19,948.00</td><td align="right" headers="PerExecution Rows" class='awrc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrclb'>0.60</td><td align="right" headers="PercentageofTotal DBtime" class='awrc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrc'>0.16</td><td align="right" headers="PercentageofTotal Gets" class='awrc'>0.07</td><td align="right" headers="PercentageofTotal IOWait" class='awrc'>0.07</td><td align="right" headers="PercentageofTotal Reads" class='awrc'>0.09</td><td align="right" headers="PercentageofTotal Execs" class='awrcrb'>0.00</td>
<td class='awrc'>DECLARE v_default_schema_numbe...</td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" href="#5zuc26whzgn7r">5zuc26whzgn7r</a></td><td align="right" headers="Total Cluster(s)" class='awrnclb'>189.81</td><td align="right" headers="Total Elapsed(s)" class='awrnc'>222.45</td><td align="right" headers="Total CPU(s)" class='awrnc'>9.19</td><td align="right" headers="Total IOWait(s)" class='awrnc'>8.74</td><td align="right" headers="Total Gets" class='awrnc'>31,481</td><td align="right" headers="Total Reads" class='awrnc'>21,594</td><td align="right" headers="Total Rows" class='awrnc'>1</td><td align="right" headers="Total Execs" class='awrnc'>1</td><td align="right" headers="PerExecution Cluster(s)" class='awrnclb'>189.81</td><td align="right" headers="PerExecution Elapsed(s)" class='awrnc'>222.45</td><td align="right" headers="PerExecution CPU(s)" class='awrnc'>9.19</td><td align="right" headers="PerExecution IOWait(s)" class='awrnc'>8.74</td><td align="right" headers="PerExecution Gets" class='awrnc'>31,481.00</td><td align="right" headers="PerExecution Reads" class='awrnc'>21,594.00</td><td align="right" headers="PerExecution Rows" class='awrnc'>1.00</td><td align="right" headers="PercentageofTotal Cluster" class='awrnclb'>0.60</td><td align="right" headers="PercentageofTotal DBtime" class='awrnc'>0.34</td><td align="right" headers="PercentageofTotal DBCPU" class='awrnc'>0.16</td><td align="right" headers="PercentageofTotal Gets" class='awrnc'>0.08</td><td align="right" headers="PercentageofTotal IOWait" class='awrnc'>0.08</td><td align="right" headers="PercentageofTotal Reads" class='awrnc'>0.10</td><td align="right" headers="PercentageofTotal Execs" class='awrncrb'>0.00</td>
<td class='awrnc'>DECLARE v_default_schema_numbe...</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#622">Back to SQL Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="623"></a>
<h2 class="awr">
Global Activity Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12071">System Statistics (Global)</a></li>
<li class="awr"><a class="awr" href="#12072">Global Messaging Statistics (Global)</a></li>
<li class="awr"><a class="awr" href="#12073">System Statistics (Absolute Values)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12071"></a>
<h3 class="awr">System Statistics (Global)</h3>
<ul>
<li class="awr"> per Second Average - average of per-instance per Second rates </li>
<li class="awr"> per Second Std Dev - standard deviation of per-instance per Second rates </li>
<li class="awr"> per Second Min     - minimum of per-instance per Second rates </li>
<li class="awr"> per Second Max     - maximum of per-instance per Second rates</li>
</ul>
<table border="0" class="tdiff" summary="System Statistics (Global). . per Second Average - average of per-instance per Second rates. per Second Std Dev - standard deviation of per-instance per Second rates. per Second Min - minimum of per-instance per Second rates. per Second Max - maximum of per-instance per Second rates"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="perSecond">per Second</th>
</tr><tr>
<th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th><th class="awrbg" scope="col" id="Average">Average</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th></tr>
<tr><td scope="row" class='awrc'>ASSM cbk:blocks examined</td><td align="right" class='awrc'>1,631</td><td align="right" class='awrc'>4.49</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>2.25</td><td align="right" headers="perSecond StdDev" class='awrc'>0.44</td><td align="right" headers="perSecond Min" class='awrc'>1.94</td><td align="right" headers="perSecond Max" class='awrcrb'>2.56</td></tr>
<tr><td scope="row" class='awrnc'>ASSM cbk:blocks marked full</td><td align="right" class='awrnc'>328</td><td align="right" class='awrnc'>0.90</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.45</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.45</td><td align="right" headers="perSecond Max" class='awrncrb'>0.46</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:L1 bitmaps examined</td><td align="right" class='awrc'>1,340</td><td align="right" class='awrc'>3.69</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.85</td><td align="right" headers="perSecond StdDev" class='awrc'>0.45</td><td align="right" headers="perSecond Min" class='awrc'>1.53</td><td align="right" headers="perSecond Max" class='awrcrb'>2.16</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:L2 bitmap full</td><td align="right" class='awrnc'>20</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:L2 bitmaps examined</td><td align="right" class='awrc'>168</td><td align="right" class='awrc'>0.46</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.23</td><td align="right" headers="perSecond StdDev" class='awrc'>0.17</td><td align="right" headers="perSecond Min" class='awrc'>0.11</td><td align="right" headers="perSecond Max" class='awrcrb'>0.35</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search all</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:Search hint</td><td align="right" class='awrc'>21</td><td align="right" class='awrc'>0.06</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:Search steal</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:bump HWM</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free block</td><td align="right" class='awrnc'>1,304</td><td align="right" class='awrnc'>3.59</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.80</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.45</td><td align="right" headers="perSecond Min" class='awrnc'>1.48</td><td align="right" headers="perSecond Max" class='awrncrb'>2.11</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:get free data block</td><td align="right" class='awrc'>1,099</td><td align="right" class='awrc'>3.03</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.51</td><td align="right" headers="perSecond StdDev" class='awrc'>0.46</td><td align="right" headers="perSecond Min" class='awrc'>1.19</td><td align="right" headers="perSecond Max" class='awrcrb'>1.84</td></tr>
<tr><td scope="row" class='awrnc'>ASSM gsp:get free index block</td><td align="right" class='awrnc'>205</td><td align="right" class='awrnc'>0.56</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.28</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.28</td><td align="right" headers="perSecond Max" class='awrncrb'>0.29</td></tr>
<tr><td scope="row" class='awrc'>ASSM gsp:good hint</td><td align="right" class='awrc'>1,176</td><td align="right" class='awrc'>3.24</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.62</td><td align="right" headers="perSecond StdDev" class='awrc'>0.26</td><td align="right" headers="perSecond Min" class='awrc'>1.44</td><td align="right" headers="perSecond Max" class='awrcrb'>1.80</td></tr>
<tr><td scope="row" class='awrnc'>ASSM rsv:fill reserve</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>ASSM wasted db state change</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO (bound) vector count</td><td align="right" class='awrnc'>980</td><td align="right" class='awrnc'>2.70</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.35</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.46</td><td align="right" headers="perSecond Min" class='awrnc'>1.02</td><td align="right" headers="perSecond Max" class='awrncrb'>1.68</td></tr>
<tr><td scope="row" class='awrc'>Batched IO block miss count</td><td align="right" class='awrc'>6,234,393</td><td align="right" class='awrc'>17,173.08</td><td align="right" class='awrc'>8.19</td><td align="right" headers="perSecond Average" class='awrclb'>8,586.54</td><td align="right" headers="perSecond StdDev" class='awrc'>564.62</td><td align="right" headers="perSecond Min" class='awrc'>8,187.30</td><td align="right" headers="perSecond Max" class='awrcrb'>8,985.79</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO double miss count</td><td align="right" class='awrnc'>6,234,060</td><td align="right" class='awrnc'>17,172.17</td><td align="right" class='awrnc'>8.19</td><td align="right" headers="perSecond Average" class='awrnclb'>8,586.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>564.77</td><td align="right" headers="perSecond Min" class='awrnc'>8,186.73</td><td align="right" headers="perSecond Max" class='awrncrb'>8,985.44</td></tr>
<tr><td scope="row" class='awrc'>Batched IO same unit count</td><td align="right" class='awrc'>222</td><td align="right" class='awrc'>0.61</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.31</td><td align="right" headers="perSecond StdDev" class='awrc'>0.10</td><td align="right" headers="perSecond Min" class='awrc'>0.24</td><td align="right" headers="perSecond Max" class='awrcrb'>0.37</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO single block count</td><td align="right" class='awrnc'>6,235,043</td><td align="right" class='awrnc'>17,174.87</td><td align="right" class='awrnc'>8.20</td><td align="right" headers="perSecond Average" class='awrnclb'>8,587.44</td><td align="right" headers="perSecond StdDev" class='awrnc'>564.30</td><td align="right" headers="perSecond Min" class='awrnc'>8,188.42</td><td align="right" headers="perSecond Max" class='awrncrb'>8,986.46</td></tr>
<tr><td scope="row" class='awrc'>Batched IO vector block count</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>Batched IO vector read count</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>Block Cleanout Optim referenced</td><td align="right" class='awrc'>89</td><td align="right" class='awrc'>0.25</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.12</td><td align="right" headers="perSecond StdDev" class='awrc'>0.08</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.18</td></tr>
<tr><td scope="row" class='awrnc'>CCursor + sql area evicted</td><td align="right" class='awrnc'>61</td><td align="right" class='awrnc'>0.17</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.07</td><td align="right" headers="perSecond Max" class='awrncrb'>0.09</td></tr>
<tr><td scope="row" class='awrc'>CPU used by this session</td><td align="right" class='awrc'>685,160</td><td align="right" class='awrc'>1,887.32</td><td align="right" class='awrc'>0.90</td><td align="right" headers="perSecond Average" class='awrclb'>943.66</td><td align="right" headers="perSecond StdDev" class='awrc'>54.06</td><td align="right" headers="perSecond Min" class='awrc'>905.44</td><td align="right" headers="perSecond Max" class='awrcrb'>981.89</td></tr>
<tr><td scope="row" class='awrnc'>CPU used when call started</td><td align="right" class='awrnc'>678,326</td><td align="right" class='awrnc'>1,868.50</td><td align="right" class='awrnc'>0.89</td><td align="right" headers="perSecond Average" class='awrnclb'>934.25</td><td align="right" headers="perSecond StdDev" class='awrnc'>29.47</td><td align="right" headers="perSecond Min" class='awrnc'>913.41</td><td align="right" headers="perSecond Max" class='awrncrb'>955.09</td></tr>
<tr><td scope="row" class='awrc'>CR blocks created</td><td align="right" class='awrc'>147</td><td align="right" class='awrc'>0.40</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.20</td><td align="right" headers="perSecond StdDev" class='awrc'>0.12</td><td align="right" headers="perSecond Min" class='awrc'>0.12</td><td align="right" headers="perSecond Max" class='awrcrb'>0.29</td></tr>
<tr><td scope="row" class='awrnc'>Cached Commit SCN referenced</td><td align="right" class='awrnc'>6,190,779</td><td align="right" class='awrnc'>17,052.98</td><td align="right" class='awrnc'>8.14</td><td align="right" headers="perSecond Average" class='awrnclb'>8,526.49</td><td align="right" headers="perSecond StdDev" class='awrnc'>2,954.31</td><td align="right" headers="perSecond Min" class='awrnc'>6,437.48</td><td align="right" headers="perSecond Max" class='awrncrb'>10,615.50</td></tr>
<tr><td scope="row" class='awrc'>Client Advertised Receive Window</td><td align="right" class='awrc'>1,799</td><td align="right" class='awrc'>4.96</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>2.48</td><td align="right" headers="perSecond StdDev" class='awrc'>0.26</td><td align="right" headers="perSecond Min" class='awrc'>2.29</td><td align="right" headers="perSecond Max" class='awrcrb'>2.66</td></tr>
<tr><td scope="row" class='awrnc'>Client Advertised Send Window</td><td align="right" class='awrnc'>1,799</td><td align="right" class='awrnc'>4.96</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>2.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.26</td><td align="right" headers="perSecond Min" class='awrnc'>2.29</td><td align="right" headers="perSecond Max" class='awrncrb'>2.66</td></tr>
<tr><td scope="row" class='awrc'>Client Path Maximum Transmission Unit(MTU)</td><td align="right" class='awrc'>9,216,380</td><td align="right" class='awrc'>25,387.44</td><td align="right" class='awrc'>12.11</td><td align="right" headers="perSecond Average" class='awrclb'>12,693.72</td><td align="right" headers="perSecond StdDev" class='awrc'>17,279.46</td><td align="right" headers="perSecond Min" class='awrc'>475.30</td><td align="right" headers="perSecond Max" class='awrcrb'>24,912.14</td></tr>
<tr><td scope="row" class='awrnc'>Client Send Congestion Window</td><td align="right" class='awrnc'>2,522</td><td align="right" class='awrnc'>6.95</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>3.47</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.46</td><td align="right" headers="perSecond Min" class='awrnc'>3.15</td><td align="right" headers="perSecond Max" class='awrncrb'>3.80</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Ack Received</td><td align="right" class='awrc'>1,082</td><td align="right" class='awrc'>2.98</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.49</td><td align="right" headers="perSecond StdDev" class='awrc'>1.91</td><td align="right" headers="perSecond Min" class='awrc'>0.14</td><td align="right" headers="perSecond Max" class='awrcrb'>2.84</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Last Data Received</td><td align="right" class='awrnc'>113</td><td align="right" class='awrnc'>0.31</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.16</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.14</td><td align="right" headers="perSecond Max" class='awrncrb'>0.17</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Last Data Sent</td><td align="right" class='awrc'>3,684</td><td align="right" class='awrc'>10.15</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>5.07</td><td align="right" headers="perSecond StdDev" class='awrc'>4.57</td><td align="right" headers="perSecond Min" class='awrc'>1.85</td><td align="right" headers="perSecond Max" class='awrcrb'>8.30</td></tr>
<tr><td scope="row" class='awrnc'>Client Time (usec) Round Trip Time</td><td align="right" class='awrnc'>981,426</td><td align="right" class='awrnc'>2,703.41</td><td align="right" class='awrnc'>1.29</td><td align="right" headers="perSecond Average" class='awrnclb'>1,351.71</td><td align="right" headers="perSecond StdDev" class='awrnc'>235.36</td><td align="right" headers="perSecond Min" class='awrnc'>1,185.28</td><td align="right" headers="perSecond Max" class='awrncrb'>1,518.13</td></tr>
<tr><td scope="row" class='awrc'>Client Time (usec) Round Trip Time Variance</td><td align="right" class='awrc'>1,482,317</td><td align="right" class='awrc'>4,083.15</td><td align="right" class='awrc'>1.95</td><td align="right" headers="perSecond Average" class='awrclb'>2,041.58</td><td align="right" headers="perSecond StdDev" class='awrc'>495.48</td><td align="right" headers="perSecond Min" class='awrc'>1,691.22</td><td align="right" headers="perSecond Max" class='awrcrb'>2,391.93</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Bytes Acked</td><td align="right" class='awrnc'>4,055,711</td><td align="right" class='awrnc'>11,171.75</td><td align="right" class='awrnc'>5.33</td><td align="right" headers="perSecond Average" class='awrnclb'>5,585.88</td><td align="right" headers="perSecond StdDev" class='awrnc'>607.93</td><td align="right" headers="perSecond Min" class='awrnc'>5,156.01</td><td align="right" headers="perSecond Max" class='awrncrb'>6,015.75</td></tr>
<tr><td scope="row" class='awrc'>Client Total Bytes Received</td><td align="right" class='awrc'>1,570,932</td><td align="right" class='awrc'>4,327.25</td><td align="right" class='awrc'>2.06</td><td align="right" headers="perSecond Average" class='awrclb'>2,163.62</td><td align="right" headers="perSecond StdDev" class='awrc'>228.38</td><td align="right" headers="perSecond Min" class='awrc'>2,002.14</td><td align="right" headers="perSecond Max" class='awrcrb'>2,325.11</td></tr>
<tr><td scope="row" class='awrnc'>Client Total Number of Retransmitted Packets</td><td align="right" class='awrnc'>24</td><td align="right" class='awrnc'>0.07</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.07</td><td align="right" headers="perSecond Max" class='awrncrb'>0.07</td></tr>
<tr><td scope="row" class='awrc'>Commit SCN cached</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>DB time</td><td align="right" class='awrnc'>7,701,995</td><td align="right" class='awrnc'>21,215.71</td><td align="right" class='awrnc'>10.12</td><td align="right" headers="perSecond Average" class='awrnclb'>10,607.85</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,154.76</td><td align="right" headers="perSecond Min" class='awrnc'>9,791.32</td><td align="right" headers="perSecond Max" class='awrncrb'>11,424.39</td></tr>
<tr><td scope="row" class='awrc'>DBWR checkpoint buffers written</td><td align="right" class='awrc'>1,660</td><td align="right" class='awrc'>4.57</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>2.29</td><td align="right" headers="perSecond StdDev" class='awrc'>0.60</td><td align="right" headers="perSecond Min" class='awrc'>1.86</td><td align="right" headers="perSecond Max" class='awrcrb'>2.71</td></tr>
<tr><td scope="row" class='awrnc'>DBWR checkpoints</td><td align="right" class='awrnc'>238</td><td align="right" class='awrnc'>0.66</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.33</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.30</td><td align="right" headers="perSecond Max" class='awrncrb'>0.36</td></tr>
<tr><td scope="row" class='awrc'>DBWR fusion writes</td><td align="right" class='awrc'>198</td><td align="right" class='awrc'>0.55</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.27</td><td align="right" headers="perSecond StdDev" class='awrc'>0.22</td><td align="right" headers="perSecond Min" class='awrc'>0.12</td><td align="right" headers="perSecond Max" class='awrcrb'>0.43</td></tr>
<tr><td scope="row" class='awrnc'>DBWR object drop buffers written</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.13</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.13</td><td align="right" headers="perSecond Max" class='awrncrb'>0.13</td></tr>
<tr><td scope="row" class='awrc'>DBWR transaction table writes</td><td align="right" class='awrc'>4,067</td><td align="right" class='awrc'>11.20</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>5.60</td><td align="right" headers="perSecond StdDev" class='awrc'>0.79</td><td align="right" headers="perSecond Min" class='awrc'>5.04</td><td align="right" headers="perSecond Max" class='awrcrb'>6.16</td></tr>
<tr><td scope="row" class='awrnc'>DBWR undo block writes</td><td align="right" class='awrnc'>169,388</td><td align="right" class='awrnc'>466.59</td><td align="right" class='awrnc'>0.22</td><td align="right" headers="perSecond Average" class='awrnclb'>233.30</td><td align="right" headers="perSecond StdDev" class='awrnc'>11.38</td><td align="right" headers="perSecond Min" class='awrnc'>225.25</td><td align="right" headers="perSecond Max" class='awrncrb'>241.34</td></tr>
<tr><td scope="row" class='awrc'>DFO trees parallelized</td><td align="right" class='awrc'>81</td><td align="right" class='awrc'>0.22</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.11</td><td align="right" headers="perSecond StdDev" class='awrc'>0.10</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.18</td></tr>
<tr><td scope="row" class='awrnc'>Effective IO time</td><td align="right" class='awrnc'>4,331</td><td align="right" class='awrnc'>11.93</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>11.93</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>11.93</td><td align="right" headers="perSecond Max" class='awrncrb'>11.93</td></tr>
<tr><td scope="row" class='awrc'>HSC Heap Segment Block Changes</td><td align="right" class='awrc'>2,273,708</td><td align="right" class='awrc'>6,263.09</td><td align="right" class='awrc'>2.99</td><td align="right" headers="perSecond Average" class='awrclb'>3,131.54</td><td align="right" headers="perSecond StdDev" class='awrc'>12.21</td><td align="right" headers="perSecond Min" class='awrc'>3,122.91</td><td align="right" headers="perSecond Max" class='awrcrb'>3,140.18</td></tr>
<tr><td scope="row" class='awrnc'>Heap Segment Array Inserts</td><td align="right" class='awrnc'>369</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.49</td><td align="right" headers="perSecond Max" class='awrncrb'>0.53</td></tr>
<tr><td scope="row" class='awrc'>Heap Segment Array Updates</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc req</td><td align="right" class='awrnc'>371</td><td align="right" class='awrnc'>1.02</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.22</td><td align="right" headers="perSecond Min" class='awrnc'>0.36</td><td align="right" headers="perSecond Max" class='awrncrb'>0.66</td></tr>
<tr><td scope="row" class='awrc'>KTFB alloc space (block)</td><td align="right" class='awrc'>291,176,448</td><td align="right" class='awrc'>802,066.24</td><td align="right" class='awrc'>382.71</td><td align="right" headers="perSecond Average" class='awrclb'>401,033.12</td><td align="right" headers="perSecond StdDev" class='awrc'>11,367.05</td><td align="right" headers="perSecond Min" class='awrc'>392,995.40</td><td align="right" headers="perSecond Max" class='awrcrb'>409,070.83</td></tr>
<tr><td scope="row" class='awrnc'>KTFB alloc time (ms)</td><td align="right" class='awrnc'>68,767,455</td><td align="right" class='awrnc'>189,426.46</td><td align="right" class='awrnc'>90.38</td><td align="right" headers="perSecond Average" class='awrnclb'>94,713.23</td><td align="right" headers="perSecond StdDev" class='awrnc'>106,193.62</td><td align="right" headers="perSecond Min" class='awrnc'>19,623.00</td><td align="right" headers="perSecond Max" class='awrncrb'>169,803.46</td></tr>
<tr><td scope="row" class='awrc'>KTFB apply req</td><td align="right" class='awrc'>397</td><td align="right" class='awrc'>1.09</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.55</td><td align="right" headers="perSecond StdDev" class='awrc'>0.26</td><td align="right" headers="perSecond Min" class='awrc'>0.36</td><td align="right" headers="perSecond Max" class='awrcrb'>0.73</td></tr>
<tr><td scope="row" class='awrnc'>KTFB apply time (ms)</td><td align="right" class='awrnc'>11,592</td><td align="right" class='awrnc'>31.93</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>15.97</td><td align="right" headers="perSecond StdDev" class='awrnc'>8.50</td><td align="right" headers="perSecond Min" class='awrnc'>9.95</td><td align="right" headers="perSecond Max" class='awrncrb'>21.98</td></tr>
<tr><td scope="row" class='awrc'>KTFB free req</td><td align="right" class='awrc'>29</td><td align="right" class='awrc'>0.08</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>KTFB free space (block)</td><td align="right" class='awrnc'>952</td><td align="right" class='awrnc'>2.62</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.31</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.20</td><td align="right" headers="perSecond Min" class='awrnc'>0.46</td><td align="right" headers="perSecond Max" class='awrncrb'>2.16</td></tr>
<tr><td scope="row" class='awrc'>KTFB free time (ms)</td><td align="right" class='awrc'>597</td><td align="right" class='awrc'>1.64</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.82</td><td align="right" headers="perSecond StdDev" class='awrc'>0.04</td><td align="right" headers="perSecond Min" class='awrc'>0.79</td><td align="right" headers="perSecond Max" class='awrcrb'>0.85</td></tr>
<tr><td scope="row" class='awrnc'>Number of read IOs issued</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>PX local messages recv'd</td><td align="right" class='awrc'>1,144</td><td align="right" class='awrc'>3.15</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.58</td><td align="right" headers="perSecond StdDev" class='awrc'>1.48</td><td align="right" headers="perSecond Min" class='awrc'>0.53</td><td align="right" headers="perSecond Max" class='awrcrb'>2.62</td></tr>
<tr><td scope="row" class='awrnc'>PX local messages sent</td><td align="right" class='awrnc'>1,144</td><td align="right" class='awrnc'>3.15</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.58</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.48</td><td align="right" headers="perSecond Min" class='awrnc'>0.53</td><td align="right" headers="perSecond Max" class='awrncrb'>2.62</td></tr>
<tr><td scope="row" class='awrc'>PX remote messages recv'd</td><td align="right" class='awrc'>1,221</td><td align="right" class='awrc'>3.36</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.68</td><td align="right" headers="perSecond StdDev" class='awrc'>0.52</td><td align="right" headers="perSecond Min" class='awrc'>1.31</td><td align="right" headers="perSecond Max" class='awrcrb'>2.05</td></tr>
<tr><td scope="row" class='awrnc'>PX remote messages sent</td><td align="right" class='awrnc'>1,233</td><td align="right" class='awrnc'>3.40</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.70</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.55</td><td align="right" headers="perSecond Min" class='awrnc'>1.31</td><td align="right" headers="perSecond Max" class='awrncrb'>2.09</td></tr>
<tr><td scope="row" class='awrc'>Parallel operations not downgraded</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.15</td><td align="right" headers="perSecond StdDev" class='awrc'>0.16</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.26</td></tr>
<tr><td scope="row" class='awrnc'>Requests to/from client</td><td align="right" class='awrnc'>851</td><td align="right" class='awrnc'>2.34</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.24</td><td align="right" headers="perSecond Min" class='awrnc'>1.01</td><td align="right" headers="perSecond Max" class='awrncrb'>1.34</td></tr>
<tr><td scope="row" class='awrc'>SMON posted for undo segment shrink</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>0.02</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.02</td></tr>
<tr><td scope="row" class='awrnc'>SQL*Net roundtrips to/from client</td><td align="right" class='awrnc'>595</td><td align="right" class='awrnc'>1.64</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.82</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.20</td><td align="right" headers="perSecond Min" class='awrnc'>0.68</td><td align="right" headers="perSecond Max" class='awrncrb'>0.96</td></tr>
<tr><td scope="row" class='awrc'>active txn count during cleanout</td><td align="right" class='awrc'>470</td><td align="right" class='awrc'>1.29</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.65</td><td align="right" headers="perSecond StdDev" class='awrc'>0.04</td><td align="right" headers="perSecond Min" class='awrc'>0.62</td><td align="right" headers="perSecond Max" class='awrcrb'>0.67</td></tr>
<tr><td scope="row" class='awrnc'>application wait time</td><td align="right" class='awrnc'>11,865</td><td align="right" class='awrnc'>32.68</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>16.34</td><td align="right" headers="perSecond StdDev" class='awrnc'>20.36</td><td align="right" headers="perSecond Min" class='awrnc'>1.95</td><td align="right" headers="perSecond Max" class='awrncrb'>30.74</td></tr>
<tr><td scope="row" class='awrc'>background checkpoints completed</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>background timeouts</td><td align="right" class='awrnc'>7,068</td><td align="right" class='awrnc'>19.47</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>9.73</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.29</td><td align="right" headers="perSecond Min" class='awrnc'>9.53</td><td align="right" headers="perSecond Max" class='awrncrb'>9.94</td></tr>
<tr><td scope="row" class='awrc'>blocks cleaned out using minact</td><td align="right" class='awrc'>1,711,265</td><td align="right" class='awrc'>4,713.80</td><td align="right" class='awrc'>2.25</td><td align="right" headers="perSecond Average" class='awrclb'>2,356.90</td><td align="right" headers="perSecond StdDev" class='awrc'>202.25</td><td align="right" headers="perSecond Min" class='awrc'>2,213.89</td><td align="right" headers="perSecond Max" class='awrcrb'>2,499.92</td></tr>
<tr><td scope="row" class='awrnc'>branch node splits</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.00</td></tr>
<tr><td scope="row" class='awrc'>buffer is not pinned count</td><td align="right" class='awrc'>47,334,137</td><td align="right" class='awrc'>130,385.24</td><td align="right" class='awrc'>62.21</td><td align="right" headers="perSecond Average" class='awrclb'>65,192.62</td><td align="right" headers="perSecond StdDev" class='awrc'>1,167.37</td><td align="right" headers="perSecond Min" class='awrc'>64,367.17</td><td align="right" headers="perSecond Max" class='awrcrb'>66,018.07</td></tr>
<tr><td scope="row" class='awrnc'>buffer is pinned count</td><td align="right" class='awrnc'>15,980,093</td><td align="right" class='awrnc'>44,018.29</td><td align="right" class='awrnc'>21.00</td><td align="right" headers="perSecond Average" class='awrnclb'>22,009.15</td><td align="right" headers="perSecond StdDev" class='awrnc'>21.21</td><td align="right" headers="perSecond Min" class='awrnc'>21,994.15</td><td align="right" headers="perSecond Max" class='awrncrb'>22,024.15</td></tr>
<tr><td scope="row" class='awrc'>bytes received via SQL*Net from client</td><td align="right" class='awrc'>482,876</td><td align="right" class='awrc'>1,330.12</td><td align="right" class='awrc'>0.63</td><td align="right" headers="perSecond Average" class='awrclb'>665.06</td><td align="right" headers="perSecond StdDev" class='awrc'>473.28</td><td align="right" headers="perSecond Min" class='awrc'>330.40</td><td align="right" headers="perSecond Max" class='awrcrb'>999.72</td></tr>
<tr><td scope="row" class='awrnc'>bytes sent via SQL*Net to client</td><td align="right" class='awrnc'>151,224</td><td align="right" class='awrnc'>416.56</td><td align="right" class='awrnc'>0.20</td><td align="right" headers="perSecond Average" class='awrnclb'>208.28</td><td align="right" headers="perSecond StdDev" class='awrnc'>35.59</td><td align="right" headers="perSecond Min" class='awrnc'>183.12</td><td align="right" headers="perSecond Max" class='awrncrb'>233.44</td></tr>
<tr><td scope="row" class='awrc'>calls to get snapshot scn: kcmgss</td><td align="right" class='awrc'>8,411,845</td><td align="right" class='awrc'>23,171.02</td><td align="right" class='awrc'>11.06</td><td align="right" headers="perSecond Average" class='awrclb'>11,585.51</td><td align="right" headers="perSecond StdDev" class='awrc'>46.64</td><td align="right" headers="perSecond Min" class='awrc'>11,552.53</td><td align="right" headers="perSecond Max" class='awrcrb'>11,618.49</td></tr>
<tr><td scope="row" class='awrnc'>calls to kcmgas</td><td align="right" class='awrnc'>934,472</td><td align="right" class='awrnc'>2,574.07</td><td align="right" class='awrnc'>1.23</td><td align="right" headers="perSecond Average" class='awrnclb'>1,287.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>39.26</td><td align="right" headers="perSecond Min" class='awrnc'>1,259.27</td><td align="right" headers="perSecond Max" class='awrncrb'>1,314.79</td></tr>
<tr><td scope="row" class='awrc'>calls to kcmgcs</td><td align="right" class='awrc'>7,455</td><td align="right" class='awrc'>20.54</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>10.27</td><td align="right" headers="perSecond StdDev" class='awrc'>2.41</td><td align="right" headers="perSecond Min" class='awrc'>8.56</td><td align="right" headers="perSecond Max" class='awrcrb'>11.97</td></tr>
<tr><td scope="row" class='awrnc'>cell physical IO interconnect bytes</td><td align="right" class='awrnc'>226,874,099,200</td><td align="right" class='awrnc'>624,940,804.32</td><td align="right" class='awrnc'>298,190.93</td><td align="right" headers="perSecond Average" class='awrnclb'>312,470,402.16</td><td align="right" headers="perSecond StdDev" class='awrnc'>6,330,939.62</td><td align="right" headers="perSecond Min" class='awrnc'>307,993,751.82</td><td align="right" headers="perSecond Max" class='awrncrb'>316,947,052.49</td></tr>
<tr><td scope="row" class='awrc'>change write time</td><td align="right" class='awrc'>5,002</td><td align="right" class='awrc'>13.78</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>6.89</td><td align="right" headers="perSecond StdDev" class='awrc'>0.64</td><td align="right" headers="perSecond Min" class='awrc'>6.44</td><td align="right" headers="perSecond Max" class='awrcrb'>7.34</td></tr>
<tr><td scope="row" class='awrnc'>cleanout - number of ktugct calls</td><td align="right" class='awrnc'>1,883</td><td align="right" class='awrnc'>5.19</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>2.59</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.12</td><td align="right" headers="perSecond Min" class='awrnc'>2.51</td><td align="right" headers="perSecond Max" class='awrncrb'>2.68</td></tr>
<tr><td scope="row" class='awrc'>cleanouts and rollbacks - consistent read gets</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>cleanouts only - consistent read gets</td><td align="right" class='awrnc'>1,177</td><td align="right" class='awrnc'>3.24</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.62</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.20</td><td align="right" headers="perSecond Min" class='awrnc'>1.48</td><td align="right" headers="perSecond Max" class='awrncrb'>1.76</td></tr>
<tr><td scope="row" class='awrc'>cluster key scan block gets</td><td align="right" class='awrc'>3,036</td><td align="right" class='awrc'>8.36</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>4.18</td><td align="right" headers="perSecond StdDev" class='awrc'>5.29</td><td align="right" headers="perSecond Min" class='awrc'>0.44</td><td align="right" headers="perSecond Max" class='awrcrb'>7.92</td></tr>
<tr><td scope="row" class='awrnc'>cluster key scans</td><td align="right" class='awrnc'>2,007</td><td align="right" class='awrnc'>5.53</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>2.76</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.34</td><td align="right" headers="perSecond Min" class='awrnc'>0.40</td><td align="right" headers="perSecond Max" class='awrncrb'>5.13</td></tr>
<tr><td scope="row" class='awrc'>cluster wait time</td><td align="right" class='awrc'>3,116,384</td><td align="right" class='awrc'>8,584.28</td><td align="right" class='awrc'>4.10</td><td align="right" headers="perSecond Average" class='awrclb'>4,292.14</td><td align="right" headers="perSecond StdDev" class='awrc'>1,233.64</td><td align="right" headers="perSecond Min" class='awrc'>3,419.82</td><td align="right" headers="perSecond Max" class='awrcrb'>5,164.46</td></tr>
<tr><td scope="row" class='awrnc'>commit batch/immediate performed</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>commit batch/immediate requested</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: block lost</td><td align="right" class='awrnc'>354</td><td align="right" class='awrnc'>0.98</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.49</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.11</td><td align="right" headers="perSecond Min" class='awrnc'>0.41</td><td align="right" headers="perSecond Max" class='awrncrb'>0.56</td></tr>
<tr><td scope="row" class='awrc'>commit cleanout failures: buffer being written</td><td align="right" class='awrc'>1,584</td><td align="right" class='awrc'>4.36</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>2.18</td><td align="right" headers="perSecond StdDev" class='awrc'>0.31</td><td align="right" headers="perSecond Min" class='awrc'>1.96</td><td align="right" headers="perSecond Max" class='awrcrb'>2.40</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanout failures: callback failure</td><td align="right" class='awrnc'>19</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>commit cleanouts</td><td align="right" class='awrc'>2,278,532</td><td align="right" class='awrc'>6,276.38</td><td align="right" class='awrc'>2.99</td><td align="right" headers="perSecond Average" class='awrclb'>3,138.19</td><td align="right" headers="perSecond StdDev" class='awrc'>22.02</td><td align="right" headers="perSecond Min" class='awrc'>3,122.62</td><td align="right" headers="perSecond Max" class='awrcrb'>3,153.76</td></tr>
<tr><td scope="row" class='awrnc'>commit cleanouts successfully completed</td><td align="right" class='awrnc'>2,276,575</td><td align="right" class='awrnc'>6,270.99</td><td align="right" class='awrnc'>2.99</td><td align="right" headers="perSecond Average" class='awrnclb'>3,135.49</td><td align="right" headers="perSecond StdDev" class='awrnc'>21.61</td><td align="right" headers="perSecond Min" class='awrnc'>3,120.21</td><td align="right" headers="perSecond Max" class='awrncrb'>3,150.77</td></tr>
<tr><td scope="row" class='awrc'>commit immediate performed</td><td align="right" class='awrc'>12</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>commit immediate requested</td><td align="right" class='awrnc'>12</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>commit txn count during cleanout</td><td align="right" class='awrc'>1,569</td><td align="right" class='awrc'>4.32</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>2.16</td><td align="right" headers="perSecond StdDev" class='awrc'>0.05</td><td align="right" headers="perSecond Min" class='awrc'>2.12</td><td align="right" headers="perSecond Max" class='awrcrb'>2.20</td></tr>
<tr><td scope="row" class='awrnc'>concurrency wait time</td><td align="right" class='awrnc'>9,258</td><td align="right" class='awrnc'>25.50</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>12.75</td><td align="right" headers="perSecond StdDev" class='awrnc'>8.06</td><td align="right" headers="perSecond Min" class='awrnc'>7.05</td><td align="right" headers="perSecond Max" class='awrncrb'>18.45</td></tr>
<tr><td scope="row" class='awrc'>consistent changes</td><td align="right" class='awrc'>19,450</td><td align="right" class='awrc'>53.58</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>26.79</td><td align="right" headers="perSecond StdDev" class='awrc'>5.80</td><td align="right" headers="perSecond Min" class='awrc'>22.69</td><td align="right" headers="perSecond Max" class='awrcrb'>30.89</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets</td><td align="right" class='awrnc'>35,954,451</td><td align="right" class='awrnc'>99,039.07</td><td align="right" class='awrnc'>47.26</td><td align="right" headers="perSecond Average" class='awrnclb'>49,519.54</td><td align="right" headers="perSecond StdDev" class='awrnc'>110.28</td><td align="right" headers="perSecond Min" class='awrnc'>49,441.56</td><td align="right" headers="perSecond Max" class='awrncrb'>49,597.51</td></tr>
<tr><td scope="row" class='awrc'>consistent gets direct</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets examination</td><td align="right" class='awrnc'>7,653,892</td><td align="right" class='awrnc'>21,083.19</td><td align="right" class='awrnc'>10.06</td><td align="right" headers="perSecond Average" class='awrnclb'>10,541.59</td><td align="right" headers="perSecond StdDev" class='awrnc'>15.04</td><td align="right" headers="perSecond Min" class='awrnc'>10,530.96</td><td align="right" headers="perSecond Max" class='awrncrb'>10,552.23</td></tr>
<tr><td scope="row" class='awrc'>consistent gets examination (fastpath)</td><td align="right" class='awrc'>7,652,142</td><td align="right" class='awrc'>21,078.37</td><td align="right" class='awrc'>10.06</td><td align="right" headers="perSecond Average" class='awrclb'>10,539.18</td><td align="right" headers="perSecond StdDev" class='awrc'>16.83</td><td align="right" headers="perSecond Min" class='awrc'>10,527.29</td><td align="right" headers="perSecond Max" class='awrcrb'>10,551.08</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets from cache</td><td align="right" class='awrnc'>35,954,425</td><td align="right" class='awrnc'>99,039.00</td><td align="right" class='awrnc'>47.26</td><td align="right" headers="perSecond Average" class='awrnclb'>49,519.50</td><td align="right" headers="perSecond StdDev" class='awrnc'>110.25</td><td align="right" headers="perSecond Min" class='awrnc'>49,441.54</td><td align="right" headers="perSecond Max" class='awrncrb'>49,597.46</td></tr>
<tr><td scope="row" class='awrc'>consistent gets pin</td><td align="right" class='awrc'>28,300,513</td><td align="right" class='awrc'>77,955.76</td><td align="right" class='awrc'>37.20</td><td align="right" headers="perSecond Average" class='awrclb'>38,977.88</td><td align="right" headers="perSecond StdDev" class='awrc'>95.17</td><td align="right" headers="perSecond Min" class='awrc'>38,910.59</td><td align="right" headers="perSecond Max" class='awrcrb'>39,045.17</td></tr>
<tr><td scope="row" class='awrnc'>consistent gets pin (fastpath)</td><td align="right" class='awrnc'>8,410,216</td><td align="right" class='awrnc'>23,166.52</td><td align="right" class='awrnc'>11.05</td><td align="right" headers="perSecond Average" class='awrnclb'>11,583.26</td><td align="right" headers="perSecond StdDev" class='awrnc'>524.59</td><td align="right" headers="perSecond Min" class='awrnc'>11,212.32</td><td align="right" headers="perSecond Max" class='awrncrb'>11,954.21</td></tr>
<tr><td scope="row" class='awrc'>cursor authentications</td><td align="right" class='awrc'>338</td><td align="right" class='awrc'>0.93</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.47</td><td align="right" headers="perSecond StdDev" class='awrc'>0.55</td><td align="right" headers="perSecond Min" class='awrc'>0.08</td><td align="right" headers="perSecond Max" class='awrcrb'>0.85</td></tr>
<tr><td scope="row" class='awrnc'>cursor reload failures</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0.03</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>data blocks consistent reads - undo records applied</td><td align="right" class='awrc'>109</td><td align="right" class='awrc'>0.30</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.15</td><td align="right" headers="perSecond StdDev" class='awrc'>0.13</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.24</td></tr>
<tr><td scope="row" class='awrnc'>db block changes</td><td align="right" class='awrnc'>6,193,937</td><td align="right" class='awrnc'>17,061.64</td><td align="right" class='awrnc'>8.14</td><td align="right" headers="perSecond Average" class='awrnclb'>8,530.82</td><td align="right" headers="perSecond StdDev" class='awrnc'>37.99</td><td align="right" headers="perSecond Min" class='awrnc'>8,503.95</td><td align="right" headers="perSecond Max" class='awrncrb'>8,557.68</td></tr>
<tr><td scope="row" class='awrc'>db block gets</td><td align="right" class='awrc'>4,109,783</td><td align="right" class='awrc'>11,320.69</td><td align="right" class='awrc'>5.40</td><td align="right" headers="perSecond Average" class='awrclb'>5,660.34</td><td align="right" headers="perSecond StdDev" class='awrc'>7.49</td><td align="right" headers="perSecond Min" class='awrc'>5,655.05</td><td align="right" headers="perSecond Max" class='awrcrb'>5,665.64</td></tr>
<tr><td scope="row" class='awrnc'>db block gets direct</td><td align="right" class='awrnc'>2,086</td><td align="right" class='awrnc'>5.75</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>2.87</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.49</td><td align="right" headers="perSecond Min" class='awrnc'>1.11</td><td align="right" headers="perSecond Max" class='awrncrb'>4.64</td></tr>
<tr><td scope="row" class='awrc'>db block gets from cache</td><td align="right" class='awrc'>4,107,692</td><td align="right" class='awrc'>11,314.93</td><td align="right" class='awrc'>5.40</td><td align="right" headers="perSecond Average" class='awrclb'>5,657.46</td><td align="right" headers="perSecond StdDev" class='awrc'>4.98</td><td align="right" headers="perSecond Min" class='awrc'>5,653.94</td><td align="right" headers="perSecond Max" class='awrcrb'>5,660.99</td></tr>
<tr><td scope="row" class='awrnc'>db block gets from cache (fastpath)</td><td align="right" class='awrnc'>1,695,223</td><td align="right" class='awrnc'>4,669.61</td><td align="right" class='awrnc'>2.23</td><td align="right" headers="perSecond Average" class='awrnclb'>2,334.80</td><td align="right" headers="perSecond StdDev" class='awrnc'>88.64</td><td align="right" headers="perSecond Min" class='awrnc'>2,272.13</td><td align="right" headers="perSecond Max" class='awrncrb'>2,397.48</td></tr>
<tr><td scope="row" class='awrc'>deferred (CURRENT) block cleanout applications</td><td align="right" class='awrc'>2,073,708</td><td align="right" class='awrc'>5,712.17</td><td align="right" class='awrc'>2.73</td><td align="right" headers="perSecond Average" class='awrclb'>2,856.09</td><td align="right" headers="perSecond StdDev" class='awrc'>90.38</td><td align="right" headers="perSecond Min" class='awrc'>2,792.18</td><td align="right" headers="perSecond Max" class='awrcrb'>2,919.99</td></tr>
<tr><td scope="row" class='awrnc'>dirty buffers inspected</td><td align="right" class='awrnc'>2,308,595</td><td align="right" class='awrnc'>6,359.19</td><td align="right" class='awrnc'>3.03</td><td align="right" headers="perSecond Average" class='awrnclb'>3,179.59</td><td align="right" headers="perSecond StdDev" class='awrnc'>92.48</td><td align="right" headers="perSecond Min" class='awrnc'>3,114.20</td><td align="right" headers="perSecond Max" class='awrncrb'>3,244.99</td></tr>
<tr><td scope="row" class='awrc'>enqueue conversions</td><td align="right" class='awrc'>1,539</td><td align="right" class='awrc'>4.24</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>2.12</td><td align="right" headers="perSecond StdDev" class='awrc'>0.71</td><td align="right" headers="perSecond Min" class='awrc'>1.62</td><td align="right" headers="perSecond Max" class='awrcrb'>2.62</td></tr>
<tr><td scope="row" class='awrnc'>enqueue releases</td><td align="right" class='awrnc'>1,539,287</td><td align="right" class='awrnc'>4,240.07</td><td align="right" class='awrnc'>2.02</td><td align="right" headers="perSecond Average" class='awrnclb'>2,120.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>12.17</td><td align="right" headers="perSecond Min" class='awrnc'>2,111.43</td><td align="right" headers="perSecond Max" class='awrncrb'>2,128.64</td></tr>
<tr><td scope="row" class='awrc'>enqueue requests</td><td align="right" class='awrc'>1,538,929</td><td align="right" class='awrc'>4,239.09</td><td align="right" class='awrc'>2.02</td><td align="right" headers="perSecond Average" class='awrclb'>2,119.54</td><td align="right" headers="perSecond StdDev" class='awrc'>12.12</td><td align="right" headers="perSecond Min" class='awrc'>2,110.97</td><td align="right" headers="perSecond Max" class='awrcrb'>2,128.11</td></tr>
<tr><td scope="row" class='awrnc'>enqueue timeouts</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>enqueue waits</td><td align="right" class='awrc'>1,315</td><td align="right" class='awrc'>3.62</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.81</td><td align="right" headers="perSecond StdDev" class='awrc'>0.68</td><td align="right" headers="perSecond Min" class='awrc'>1.33</td><td align="right" headers="perSecond Max" class='awrcrb'>2.29</td></tr>
<tr><td scope="row" class='awrnc'>exchange deadlocks</td><td align="right" class='awrnc'>17</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.03</td></tr>
<tr><td scope="row" class='awrc'>execute count</td><td align="right" class='awrc'>7,591,643</td><td align="right" class='awrc'>20,911.72</td><td align="right" class='awrc'>9.98</td><td align="right" headers="perSecond Average" class='awrclb'>10,455.86</td><td align="right" headers="perSecond StdDev" class='awrc'>22.95</td><td align="right" headers="perSecond Min" class='awrc'>10,439.63</td><td align="right" headers="perSecond Max" class='awrcrb'>10,472.08</td></tr>
<tr><td scope="row" class='awrnc'>file io service time</td><td align="right" class='awrnc'>1,784,283,615</td><td align="right" class='awrnc'>4,914,942.96</td><td align="right" class='awrnc'>2,345.17</td><td align="right" headers="perSecond Average" class='awrnclb'>2,457,471.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>508,016.67</td><td align="right" headers="perSecond Min" class='awrnc'>2,098,249.45</td><td align="right" headers="perSecond Max" class='awrncrb'>2,816,693.51</td></tr>
<tr><td scope="row" class='awrc'>file io wait time</td><td align="right" class='awrc'>7,607,018,337,442</td><td align="right" class='awrc'>20,954,115,895.07</td><td align="right" class='awrc'>9,998,249.74</td><td align="right" headers="perSecond Average" class='awrclb'>10,477,057,947.54</td><td align="right" headers="perSecond StdDev" class='awrc'>3,043,792,998.34</td><td align="right" headers="perSecond Min" class='awrc'>8,324,771,277.88</td><td align="right" headers="perSecond Max" class='awrcrb'>12,629,344,617.19</td></tr>
<tr><td scope="row" class='awrnc'>free buffer inspected</td><td align="right" class='awrnc'>46,785,706</td><td align="right" class='awrnc'>128,874.78</td><td align="right" class='awrnc'>61.49</td><td align="right" headers="perSecond Average" class='awrnclb'>64,437.39</td><td align="right" headers="perSecond StdDev" class='awrnc'>16,062.19</td><td align="right" headers="perSecond Min" class='awrnc'>53,079.71</td><td align="right" headers="perSecond Max" class='awrncrb'>75,795.07</td></tr>
<tr><td scope="row" class='awrc'>free buffer requested</td><td align="right" class='awrc'>23,277,735</td><td align="right" class='awrc'>64,120.19</td><td align="right" class='awrc'>30.59</td><td align="right" headers="perSecond Average" class='awrclb'>32,060.10</td><td align="right" headers="perSecond StdDev" class='awrc'>1,845.78</td><td align="right" headers="perSecond Min" class='awrc'>30,754.93</td><td align="right" headers="perSecond Max" class='awrcrb'>33,365.26</td></tr>
<tr><td scope="row" class='awrnc'>gc blocks compressed</td><td align="right" class='awrnc'>8,650</td><td align="right" class='awrnc'>23.83</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>11.91</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.98</td><td align="right" headers="perSecond Min" class='awrnc'>10.51</td><td align="right" headers="perSecond Max" class='awrncrb'>13.31</td></tr>
<tr><td scope="row" class='awrc'>gc blocks lost</td><td align="right" class='awrc'>2,784</td><td align="right" class='awrc'>7.67</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>3.83</td><td align="right" headers="perSecond StdDev" class='awrc'>5.08</td><td align="right" headers="perSecond Min" class='awrc'>0.25</td><td align="right" headers="perSecond Max" class='awrcrb'>7.42</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks created</td><td align="right" class='awrnc'>478,847</td><td align="right" class='awrnc'>1,319.02</td><td align="right" class='awrnc'>0.63</td><td align="right" headers="perSecond Average" class='awrnclb'>659.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>41.39</td><td align="right" headers="perSecond Min" class='awrnc'>630.24</td><td align="right" headers="perSecond Max" class='awrncrb'>688.78</td></tr>
<tr><td scope="row" class='awrc'>gc cr anti locks expanded</td><td align="right" class='awrc'>193</td><td align="right" class='awrc'>0.53</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.27</td><td align="right" headers="perSecond StdDev" class='awrc'>0.32</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.49</td></tr>
<tr><td scope="row" class='awrnc'>gc cr anti locks shrunk</td><td align="right" class='awrnc'>22,819</td><td align="right" class='awrnc'>62.86</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>31.43</td><td align="right" headers="perSecond StdDev" class='awrnc'>11.70</td><td align="right" headers="perSecond Min" class='awrnc'>23.15</td><td align="right" headers="perSecond Max" class='awrncrb'>39.70</td></tr>
<tr><td scope="row" class='awrc'>gc cr block build time</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>gc cr block flush time</td><td align="right" class='awrnc'>2,456</td><td align="right" class='awrnc'>6.77</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>3.38</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.82</td><td align="right" headers="perSecond Min" class='awrnc'>2.10</td><td align="right" headers="perSecond Max" class='awrncrb'>4.67</td></tr>
<tr><td scope="row" class='awrc'>gc cr block receive time</td><td align="right" class='awrc'>3,893</td><td align="right" class='awrc'>10.72</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>5.36</td><td align="right" headers="perSecond StdDev" class='awrc'>3.69</td><td align="right" headers="perSecond Min" class='awrc'>2.75</td><td align="right" headers="perSecond Max" class='awrcrb'>7.97</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks built</td><td align="right" class='awrnc'>1,242</td><td align="right" class='awrnc'>3.42</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.71</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.39</td><td align="right" headers="perSecond Min" class='awrnc'>1.44</td><td align="right" headers="perSecond Max" class='awrncrb'>1.99</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks flushed</td><td align="right" class='awrc'>157</td><td align="right" class='awrc'>0.43</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.22</td><td align="right" headers="perSecond StdDev" class='awrc'>0.22</td><td align="right" headers="perSecond Min" class='awrc'>0.06</td><td align="right" headers="perSecond Max" class='awrcrb'>0.37</td></tr>
<tr><td scope="row" class='awrnc'>gc cr blocks received</td><td align="right" class='awrnc'>2,812</td><td align="right" class='awrnc'>7.75</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>3.87</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.88</td><td align="right" headers="perSecond Min" class='awrnc'>1.83</td><td align="right" headers="perSecond Max" class='awrncrb'>5.91</td></tr>
<tr><td scope="row" class='awrc'>gc cr blocks served</td><td align="right" class='awrc'>2,726</td><td align="right" class='awrc'>7.51</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>3.75</td><td align="right" headers="perSecond StdDev" class='awrc'>2.26</td><td align="right" headers="perSecond Min" class='awrc'>2.16</td><td align="right" headers="perSecond Max" class='awrcrb'>5.35</td></tr>
<tr><td scope="row" class='awrnc'>gc cr multiblock grant time</td><td align="right" class='awrnc'>480</td><td align="right" class='awrnc'>1.32</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.66</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.83</td><td align="right" headers="perSecond Min" class='awrnc'>0.07</td><td align="right" headers="perSecond Max" class='awrncrb'>1.25</td></tr>
<tr><td scope="row" class='awrc'>gc cr multiblock grants received</td><td align="right" class='awrc'>755</td><td align="right" class='awrc'>2.08</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.45</td><td align="right" headers="perSecond Min" class='awrc'>0.72</td><td align="right" headers="perSecond Max" class='awrcrb'>1.36</td></tr>
<tr><td scope="row" class='awrnc'>gc current block flush time</td><td align="right" class='awrnc'>82</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.11</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.15</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.22</td></tr>
<tr><td scope="row" class='awrc'>gc current block receive time</td><td align="right" class='awrc'>7,768</td><td align="right" class='awrc'>21.40</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>10.70</td><td align="right" headers="perSecond StdDev" class='awrc'>4.18</td><td align="right" headers="perSecond Min" class='awrc'>7.74</td><td align="right" headers="perSecond Max" class='awrcrb'>13.65</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks flushed</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>gc current blocks received</td><td align="right" class='awrc'>6,369</td><td align="right" class='awrc'>17.54</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>8.77</td><td align="right" headers="perSecond StdDev" class='awrc'>2.33</td><td align="right" headers="perSecond Min" class='awrc'>7.13</td><td align="right" headers="perSecond Max" class='awrcrb'>10.42</td></tr>
<tr><td scope="row" class='awrnc'>gc current blocks served</td><td align="right" class='awrnc'>6,753</td><td align="right" class='awrnc'>18.60</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>9.30</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.97</td><td align="right" headers="perSecond Min" class='awrnc'>6.50</td><td align="right" headers="perSecond Max" class='awrncrb'>12.11</td></tr>
<tr><td scope="row" class='awrc'>gc force cr read cr</td><td align="right" class='awrc'>52</td><td align="right" class='awrc'>0.14</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrc'>0.07</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>0.12</td></tr>
<tr><td scope="row" class='awrnc'>gc kbytes saved</td><td align="right" class='awrnc'>46,946</td><td align="right" class='awrnc'>129.32</td><td align="right" class='awrnc'>0.06</td><td align="right" headers="perSecond Average" class='awrnclb'>64.66</td><td align="right" headers="perSecond StdDev" class='awrnc'>9.16</td><td align="right" headers="perSecond Min" class='awrnc'>58.18</td><td align="right" headers="perSecond Max" class='awrncrb'>71.13</td></tr>
<tr><td scope="row" class='awrc'>gc kbytes sent</td><td align="right" class='awrc'>28,886</td><td align="right" class='awrc'>79.57</td><td align="right" class='awrc'>0.04</td><td align="right" headers="perSecond Average" class='awrclb'>39.78</td><td align="right" headers="perSecond StdDev" class='awrc'>4.51</td><td align="right" headers="perSecond Min" class='awrc'>36.60</td><td align="right" headers="perSecond Max" class='awrcrb'>42.97</td></tr>
<tr><td scope="row" class='awrnc'>gc local grants</td><td align="right" class='awrnc'>19,334,619</td><td align="right" class='awrnc'>53,258.61</td><td align="right" class='awrnc'>25.41</td><td align="right" headers="perSecond Average" class='awrnclb'>26,629.30</td><td align="right" headers="perSecond StdDev" class='awrnc'>2,252.29</td><td align="right" headers="perSecond Min" class='awrnc'>25,036.69</td><td align="right" headers="perSecond Max" class='awrncrb'>28,221.91</td></tr>
<tr><td scope="row" class='awrc'>gc merge pi fg</td><td align="right" class='awrc'>27</td><td align="right" class='awrc'>0.07</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.03</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>gc reader bypass grants</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.13</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.08</td><td align="right" headers="perSecond Min" class='awrnc'>0.08</td><td align="right" headers="perSecond Max" class='awrncrb'>0.19</td></tr>
<tr><td scope="row" class='awrc'>gc reader bypass waits</td><td align="right" class='awrc'>59</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.06</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.13</td></tr>
<tr><td scope="row" class='awrnc'>gc remote grants</td><td align="right" class='awrnc'>2,794,776</td><td align="right" class='awrnc'>7,698.38</td><td align="right" class='awrnc'>3.67</td><td align="right" headers="perSecond Average" class='awrnclb'>3,849.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,451.72</td><td align="right" headers="perSecond Min" class='awrnc'>2,822.67</td><td align="right" headers="perSecond Max" class='awrncrb'>4,875.71</td></tr>
<tr><td scope="row" class='awrc'>gc status messages received</td><td align="right" class='awrc'>315,229</td><td align="right" class='awrc'>868.31</td><td align="right" class='awrc'>0.41</td><td align="right" headers="perSecond Average" class='awrclb'>434.16</td><td align="right" headers="perSecond StdDev" class='awrc'>607.82</td><td align="right" headers="perSecond Min" class='awrc'>4.36</td><td align="right" headers="perSecond Max" class='awrcrb'>863.95</td></tr>
<tr><td scope="row" class='awrnc'>gc status messages sent</td><td align="right" class='awrnc'>317,878</td><td align="right" class='awrnc'>875.63</td><td align="right" class='awrnc'>0.42</td><td align="right" headers="perSecond Average" class='awrnclb'>437.81</td><td align="right" headers="perSecond StdDev" class='awrnc'>612.89</td><td align="right" headers="perSecond Min" class='awrnc'>4.43</td><td align="right" headers="perSecond Max" class='awrncrb'>871.19</td></tr>
<tr><td scope="row" class='awrc'>gcs affinity lock failures</td><td align="right" class='awrc'>17,616</td><td align="right" class='awrc'>48.52</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>24.26</td><td align="right" headers="perSecond StdDev" class='awrc'>20.53</td><td align="right" headers="perSecond Min" class='awrc'>9.75</td><td align="right" headers="perSecond Max" class='awrcrb'>38.78</td></tr>
<tr><td scope="row" class='awrnc'>gcs affinity lock grants</td><td align="right" class='awrnc'>14,747,721</td><td align="right" class='awrnc'>40,623.67</td><td align="right" class='awrnc'>19.38</td><td align="right" headers="perSecond Average" class='awrnclb'>20,311.83</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,896.27</td><td align="right" headers="perSecond Min" class='awrnc'>18,970.97</td><td align="right" headers="perSecond Max" class='awrncrb'>21,652.70</td></tr>
<tr><td scope="row" class='awrc'>gcs anti-locks created</td><td align="right" class='awrc'>477,937</td><td align="right" class='awrc'>1,316.51</td><td align="right" class='awrc'>0.63</td><td align="right" headers="perSecond Average" class='awrclb'>658.26</td><td align="right" headers="perSecond StdDev" class='awrc'>40.09</td><td align="right" headers="perSecond Min" class='awrc'>629.91</td><td align="right" headers="perSecond Max" class='awrcrb'>686.60</td></tr>
<tr><td scope="row" class='awrnc'>gcs data block access records</td><td align="right" class='awrnc'>22,014,590</td><td align="right" class='awrnc'>60,640.75</td><td align="right" class='awrnc'>28.93</td><td align="right" headers="perSecond Average" class='awrnclb'>30,320.38</td><td align="right" headers="perSecond StdDev" class='awrnc'>770.55</td><td align="right" headers="perSecond Min" class='awrnc'>29,775.51</td><td align="right" headers="perSecond Max" class='awrncrb'>30,865.24</td></tr>
<tr><td scope="row" class='awrc'>gcs messages sent</td><td align="right" class='awrc'>9,632,447</td><td align="right" class='awrc'>26,533.23</td><td align="right" class='awrc'>12.66</td><td align="right" headers="perSecond Average" class='awrclb'>13,266.61</td><td align="right" headers="perSecond StdDev" class='awrc'>1,699.54</td><td align="right" headers="perSecond Min" class='awrc'>12,064.86</td><td align="right" headers="perSecond Max" class='awrcrb'>14,468.37</td></tr>
<tr><td scope="row" class='awrnc'>gcs read-mostly lock failures</td><td align="right" class='awrnc'>482,502</td><td align="right" class='awrnc'>1,329.09</td><td align="right" class='awrnc'>0.63</td><td align="right" headers="perSecond Average" class='awrnclb'>664.54</td><td align="right" headers="perSecond StdDev" class='awrnc'>74.38</td><td align="right" headers="perSecond Min" class='awrnc'>611.95</td><td align="right" headers="perSecond Max" class='awrncrb'>717.14</td></tr>
<tr><td scope="row" class='awrc'>gcs read-mostly lock grants</td><td align="right" class='awrc'>4,216,919</td><td align="right" class='awrc'>11,615.81</td><td align="right" class='awrc'>5.54</td><td align="right" headers="perSecond Average" class='awrclb'>5,807.91</td><td align="right" headers="perSecond StdDev" class='awrc'>724.12</td><td align="right" headers="perSecond Min" class='awrc'>5,295.88</td><td align="right" headers="perSecond Max" class='awrcrb'>6,319.93</td></tr>
<tr><td scope="row" class='awrnc'>ges messages sent</td><td align="right" class='awrnc'>6,313</td><td align="right" class='awrnc'>17.39</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>8.69</td><td align="right" headers="perSecond StdDev" class='awrnc'>5.84</td><td align="right" headers="perSecond Min" class='awrnc'>4.57</td><td align="right" headers="perSecond Max" class='awrncrb'>12.82</td></tr>
<tr><td scope="row" class='awrc'>global enqueue get time</td><td align="right" class='awrc'>220,266</td><td align="right" class='awrc'>606.74</td><td align="right" class='awrc'>0.29</td><td align="right" headers="perSecond Average" class='awrclb'>303.37</td><td align="right" headers="perSecond StdDev" class='awrc'>232.45</td><td align="right" headers="perSecond Min" class='awrc'>139.00</td><td align="right" headers="perSecond Max" class='awrcrb'>467.74</td></tr>
<tr><td scope="row" class='awrnc'>global enqueue gets sync</td><td align="right" class='awrnc'>877,342</td><td align="right" class='awrnc'>2,416.70</td><td align="right" class='awrnc'>1.15</td><td align="right" headers="perSecond Average" class='awrnclb'>1,208.35</td><td align="right" headers="perSecond StdDev" class='awrnc'>111.67</td><td align="right" headers="perSecond Min" class='awrnc'>1,129.39</td><td align="right" headers="perSecond Max" class='awrncrb'>1,287.31</td></tr>
<tr><td scope="row" class='awrc'>global enqueue releases</td><td align="right" class='awrc'>880,409</td><td align="right" class='awrc'>2,425.15</td><td align="right" class='awrc'>1.16</td><td align="right" headers="perSecond Average" class='awrclb'>1,212.57</td><td align="right" headers="perSecond StdDev" class='awrc'>109.85</td><td align="right" headers="perSecond Min" class='awrc'>1,134.90</td><td align="right" headers="perSecond Max" class='awrcrb'>1,290.25</td></tr>
<tr><td scope="row" class='awrnc'>hot buffers moved to head of LRU</td><td align="right" class='awrnc'>242,776</td><td align="right" class='awrnc'>668.74</td><td align="right" class='awrnc'>0.32</td><td align="right" headers="perSecond Average" class='awrnclb'>334.37</td><td align="right" headers="perSecond StdDev" class='awrnc'>100.02</td><td align="right" headers="perSecond Min" class='awrnc'>263.65</td><td align="right" headers="perSecond Max" class='awrncrb'>405.09</td></tr>
<tr><td scope="row" class='awrc'>immediate (CR) block cleanout applications</td><td align="right" class='awrc'>1,180</td><td align="right" class='awrc'>3.25</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.63</td><td align="right" headers="perSecond StdDev" class='awrc'>0.21</td><td align="right" headers="perSecond Min" class='awrc'>1.48</td><td align="right" headers="perSecond Max" class='awrcrb'>1.77</td></tr>
<tr><td scope="row" class='awrnc'>immediate (CURRENT) block cleanout applications</td><td align="right" class='awrnc'>554</td><td align="right" class='awrnc'>1.53</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.76</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.05</td><td align="right" headers="perSecond Min" class='awrnc'>0.72</td><td align="right" headers="perSecond Max" class='awrncrb'>0.80</td></tr>
<tr><td scope="row" class='awrc'>in call idle wait time</td><td align="right" class='awrc'>8,614,499</td><td align="right" class='awrc'>23,729.25</td><td align="right" class='awrc'>11.32</td><td align="right" headers="perSecond Average" class='awrclb'>11,864.63</td><td align="right" headers="perSecond StdDev" class='awrc'>507.45</td><td align="right" headers="perSecond Min" class='awrc'>11,505.80</td><td align="right" headers="perSecond Max" class='awrcrb'>12,223.45</td></tr>
<tr><td scope="row" class='awrnc'>index crx upgrade (positioned)</td><td align="right" class='awrnc'>36</td><td align="right" class='awrnc'>0.10</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.10</td><td align="right" headers="perSecond Max" class='awrncrb'>0.10</td></tr>
<tr><td scope="row" class='awrc'>index fast full scans (full)</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>index fetch by key</td><td align="right" class='awrnc'>13,964</td><td align="right" class='awrnc'>38.46</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>19.23</td><td align="right" headers="perSecond StdDev" class='awrnc'>7.16</td><td align="right" headers="perSecond Min" class='awrnc'>14.17</td><td align="right" headers="perSecond Max" class='awrncrb'>24.30</td></tr>
<tr><td scope="row" class='awrc'>index range scans</td><td align="right" class='awrc'>7,590,097</td><td align="right" class='awrc'>20,907.46</td><td align="right" class='awrc'>9.98</td><td align="right" headers="perSecond Average" class='awrclb'>10,453.73</td><td align="right" headers="perSecond StdDev" class='awrc'>14.18</td><td align="right" headers="perSecond Min" class='awrc'>10,443.70</td><td align="right" headers="perSecond Max" class='awrcrb'>10,463.76</td></tr>
<tr><td scope="row" class='awrnc'>leaf node 90-10 splits</td><td align="right" class='awrnc'>45</td><td align="right" class='awrnc'>0.12</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.06</td><td align="right" headers="perSecond Max" class='awrncrb'>0.06</td></tr>
<tr><td scope="row" class='awrc'>leaf node splits</td><td align="right" class='awrc'>193</td><td align="right" class='awrc'>0.53</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.27</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.26</td><td align="right" headers="perSecond Max" class='awrcrb'>0.27</td></tr>
<tr><td scope="row" class='awrnc'>lob reads</td><td align="right" class='awrnc'>1,462</td><td align="right" class='awrnc'>4.03</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>2.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.79</td><td align="right" headers="perSecond Min" class='awrnc'>1.45</td><td align="right" headers="perSecond Max" class='awrncrb'>2.58</td></tr>
<tr><td scope="row" class='awrc'>lob writes</td><td align="right" class='awrc'>13,627</td><td align="right" class='awrc'>37.54</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>18.77</td><td align="right" headers="perSecond StdDev" class='awrc'>1.58</td><td align="right" headers="perSecond Min" class='awrc'>17.65</td><td align="right" headers="perSecond Max" class='awrcrb'>19.89</td></tr>
<tr><td scope="row" class='awrnc'>lob writes unaligned</td><td align="right" class='awrnc'>13,626</td><td align="right" class='awrnc'>37.53</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>18.77</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.58</td><td align="right" headers="perSecond Min" class='awrnc'>17.65</td><td align="right" headers="perSecond Max" class='awrncrb'>19.89</td></tr>
<tr><td scope="row" class='awrc'>logical read bytes from cache</td><td align="right" class='awrc'>328,188,149,760</td><td align="right" class='awrc'>904,017,416.15</td><td align="right" class='awrc'>431,352.59</td><td align="right" headers="perSecond Average" class='awrclb'>452,008,708.08</td><td align="right" headers="perSecond StdDev" class='awrc'>862,198.63</td><td align="right" headers="perSecond Min" class='awrc'>451,399,041.57</td><td align="right" headers="perSecond Max" class='awrcrb'>452,618,374.58</td></tr>
<tr><td scope="row" class='awrnc'>logons cumulative</td><td align="right" class='awrnc'>219</td><td align="right" class='awrnc'>0.60</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.30</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.30</td><td align="right" headers="perSecond Max" class='awrncrb'>0.30</td></tr>
<tr><td scope="row" class='awrc'>max cf enq hold time</td><td align="right" class='awrc'>116</td><td align="right" class='awrc'>0.32</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.32</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.32</td><td align="right" headers="perSecond Max" class='awrcrb'>0.32</td></tr>
<tr><td scope="row" class='awrnc'>messages received</td><td align="right" class='awrnc'>57,541</td><td align="right" class='awrnc'>158.50</td><td align="right" class='awrnc'>0.08</td><td align="right" headers="perSecond Average" class='awrnclb'>79.25</td><td align="right" headers="perSecond StdDev" class='awrnc'>17.01</td><td align="right" headers="perSecond Min" class='awrnc'>67.22</td><td align="right" headers="perSecond Max" class='awrncrb'>91.28</td></tr>
<tr><td scope="row" class='awrc'>messages sent</td><td align="right" class='awrc'>57,528</td><td align="right" class='awrc'>158.46</td><td align="right" class='awrc'>0.08</td><td align="right" headers="perSecond Average" class='awrclb'>79.23</td><td align="right" headers="perSecond StdDev" class='awrc'>17.00</td><td align="right" headers="perSecond Min" class='awrc'>67.21</td><td align="right" headers="perSecond Max" class='awrcrb'>91.26</td></tr>
<tr><td scope="row" class='awrnc'>no work - consistent read gets</td><td align="right" class='awrnc'>28,208,524</td><td align="right" class='awrnc'>77,702.37</td><td align="right" class='awrnc'>37.08</td><td align="right" headers="perSecond Average" class='awrnclb'>38,851.19</td><td align="right" headers="perSecond StdDev" class='awrnc'>170.30</td><td align="right" headers="perSecond Min" class='awrnc'>38,730.76</td><td align="right" headers="perSecond Max" class='awrncrb'>38,971.61</td></tr>
<tr><td scope="row" class='awrc'>non-idle wait count</td><td align="right" class='awrc'>30,516,350</td><td align="right" class='awrc'>84,059.44</td><td align="right" class='awrc'>40.11</td><td align="right" headers="perSecond Average" class='awrclb'>42,029.72</td><td align="right" headers="perSecond StdDev" class='awrc'>117.51</td><td align="right" headers="perSecond Min" class='awrc'>41,946.63</td><td align="right" headers="perSecond Max" class='awrcrb'>42,112.81</td></tr>
<tr><td scope="row" class='awrnc'>non-idle wait time</td><td align="right" class='awrnc'>6,342,836</td><td align="right" class='awrnc'>17,471.81</td><td align="right" class='awrnc'>8.34</td><td align="right" headers="perSecond Average" class='awrnclb'>8,735.91</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,466.02</td><td align="right" headers="perSecond Min" class='awrnc'>7,699.27</td><td align="right" headers="perSecond Max" class='awrncrb'>9,772.54</td></tr>
<tr><td scope="row" class='awrc'>opened cursors cumulative</td><td align="right" class='awrc'>8,391,507</td><td align="right" class='awrc'>23,115.00</td><td align="right" class='awrc'>11.03</td><td align="right" headers="perSecond Average" class='awrclb'>11,557.50</td><td align="right" headers="perSecond StdDev" class='awrc'>41.39</td><td align="right" headers="perSecond Min" class='awrc'>11,528.23</td><td align="right" headers="perSecond Max" class='awrcrb'>11,586.77</td></tr>
<tr><td scope="row" class='awrnc'>parse count (describe)</td><td align="right" class='awrnc'>74</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.14</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.20</td></tr>
<tr><td scope="row" class='awrc'>parse count (hard)</td><td align="right" class='awrc'>1,194</td><td align="right" class='awrc'>3.29</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.64</td><td align="right" headers="perSecond StdDev" class='awrc'>1.76</td><td align="right" headers="perSecond Min" class='awrc'>0.40</td><td align="right" headers="perSecond Max" class='awrcrb'>2.89</td></tr>
<tr><td scope="row" class='awrnc'>parse count (total)</td><td align="right" class='awrnc'>9,298</td><td align="right" class='awrnc'>25.61</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>12.81</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.76</td><td align="right" headers="perSecond Min" class='awrnc'>12.27</td><td align="right" headers="perSecond Max" class='awrncrb'>13.34</td></tr>
<tr><td scope="row" class='awrc'>parse time cpu</td><td align="right" class='awrc'>238</td><td align="right" class='awrc'>0.66</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.33</td><td align="right" headers="perSecond StdDev" class='awrc'>0.26</td><td align="right" headers="perSecond Min" class='awrc'>0.15</td><td align="right" headers="perSecond Max" class='awrcrb'>0.51</td></tr>
<tr><td scope="row" class='awrnc'>parse time elapsed</td><td align="right" class='awrnc'>775</td><td align="right" class='awrnc'>2.13</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.36</td><td align="right" headers="perSecond Max" class='awrncrb'>1.78</td></tr>
<tr><td scope="row" class='awrc'>physical read IO requests</td><td align="right" class='awrc'>22,020,196</td><td align="right" class='awrc'>60,656.19</td><td align="right" class='awrc'>28.94</td><td align="right" headers="perSecond Average" class='awrclb'>30,328.10</td><td align="right" headers="perSecond StdDev" class='awrc'>757.05</td><td align="right" headers="perSecond Min" class='awrc'>29,792.78</td><td align="right" headers="perSecond Max" class='awrcrb'>30,863.42</td></tr>
<tr><td scope="row" class='awrnc'>physical read bytes</td><td align="right" class='awrnc'>180,411,269,120</td><td align="right" class='awrnc'>496,955,659.84</td><td align="right" class='awrnc'>237,122.73</td><td align="right" headers="perSecond Average" class='awrnclb'>248,477,829.92</td><td align="right" headers="perSecond StdDev" class='awrnc'>6,176,072.07</td><td align="right" headers="perSecond Min" class='awrnc'>244,110,687.47</td><td align="right" headers="perSecond Max" class='awrncrb'>252,844,972.36</td></tr>
<tr><td scope="row" class='awrc'>physical read total IO requests</td><td align="right" class='awrc'>22,026,972</td><td align="right" class='awrc'>60,674.86</td><td align="right" class='awrc'>28.95</td><td align="right" headers="perSecond Average" class='awrclb'>30,337.43</td><td align="right" headers="perSecond StdDev" class='awrc'>756.86</td><td align="right" headers="perSecond Min" class='awrc'>29,802.25</td><td align="right" headers="perSecond Max" class='awrcrb'>30,872.61</td></tr>
<tr><td scope="row" class='awrnc'>physical read total bytes</td><td align="right" class='awrnc'>182,284,211,712</td><td align="right" class='awrnc'>502,114,813.44</td><td align="right" class='awrnc'>239,584.42</td><td align="right" headers="perSecond Average" class='awrnclb'>251,057,406.72</td><td align="right" headers="perSecond StdDev" class='awrnc'>6,249,818.84</td><td align="right" headers="perSecond Min" class='awrnc'>246,638,117.44</td><td align="right" headers="perSecond Max" class='awrncrb'>255,476,696.00</td></tr>
<tr><td scope="row" class='awrc'>physical read total multi block requests</td><td align="right" class='awrc'>1,748</td><td align="right" class='awrc'>4.81</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>2.41</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>2.39</td><td align="right" headers="perSecond Max" class='awrcrb'>2.42</td></tr>
<tr><td scope="row" class='awrnc'>physical reads</td><td align="right" class='awrnc'>22,022,883</td><td align="right" class='awrnc'>60,663.60</td><td align="right" class='awrnc'>28.95</td><td align="right" headers="perSecond Average" class='awrnclb'>30,331.80</td><td align="right" headers="perSecond StdDev" class='awrnc'>753.94</td><td align="right" headers="perSecond Min" class='awrnc'>29,798.68</td><td align="right" headers="perSecond Max" class='awrncrb'>30,864.91</td></tr>
<tr><td scope="row" class='awrc'>physical reads cache</td><td align="right" class='awrc'>22,022,861</td><td align="right" class='awrc'>60,663.54</td><td align="right" class='awrc'>28.95</td><td align="right" headers="perSecond Average" class='awrclb'>30,331.77</td><td align="right" headers="perSecond StdDev" class='awrc'>753.96</td><td align="right" headers="perSecond Min" class='awrc'>29,798.63</td><td align="right" headers="perSecond Max" class='awrcrb'>30,864.90</td></tr>
<tr><td scope="row" class='awrnc'>physical reads cache prefetch</td><td align="right" class='awrnc'>2,766</td><td align="right" class='awrnc'>7.62</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>3.81</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.99</td><td align="right" headers="perSecond Min" class='awrnc'>1.70</td><td align="right" headers="perSecond Max" class='awrncrb'>5.92</td></tr>
<tr><td scope="row" class='awrc'>physical reads direct</td><td align="right" class='awrc'>16</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>physical reads direct (lob)</td><td align="right" class='awrnc'>14</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>physical reads direct temporary tablespace</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>physical write IO requests</td><td align="right" class='awrnc'>2,313,742</td><td align="right" class='awrnc'>6,373.37</td><td align="right" class='awrnc'>3.04</td><td align="right" headers="perSecond Average" class='awrnclb'>3,186.68</td><td align="right" headers="perSecond StdDev" class='awrnc'>96.85</td><td align="right" headers="perSecond Min" class='awrnc'>3,118.20</td><td align="right" headers="perSecond Max" class='awrncrb'>3,255.17</td></tr>
<tr><td scope="row" class='awrc'>physical write bytes</td><td align="right" class='awrc'>19,844,472,832</td><td align="right" class='awrc'>54,663,006.01</td><td align="right" class='awrc'>26,082.49</td><td align="right" headers="perSecond Average" class='awrclb'>27,331,503.01</td><td align="right" headers="perSecond StdDev" class='awrc'>394,112.64</td><td align="right" headers="perSecond Min" class='awrc'>27,052,823.29</td><td align="right" headers="perSecond Max" class='awrcrb'>27,610,182.72</td></tr>
<tr><td scope="row" class='awrnc'>physical write total IO requests</td><td align="right" class='awrnc'>2,375,374</td><td align="right" class='awrnc'>6,543.14</td><td align="right" class='awrnc'>3.12</td><td align="right" headers="perSecond Average" class='awrnclb'>3,271.57</td><td align="right" headers="perSecond StdDev" class='awrnc'>45.67</td><td align="right" headers="perSecond Min" class='awrnc'>3,239.28</td><td align="right" headers="perSecond Max" class='awrncrb'>3,303.86</td></tr>
<tr><td scope="row" class='awrc'>physical write total bytes</td><td align="right" class='awrc'>22,289,668,096</td><td align="right" class='awrc'>61,398,463.27</td><td align="right" class='awrc'>29,296.32</td><td align="right" headers="perSecond Average" class='awrclb'>30,699,231.64</td><td align="right" headers="perSecond StdDev" class='awrc'>39,235.92</td><td align="right" headers="perSecond Min" class='awrc'>30,671,487.66</td><td align="right" headers="perSecond Max" class='awrcrb'>30,726,975.62</td></tr>
<tr><td scope="row" class='awrnc'>physical write total multi block requests</td><td align="right" class='awrnc'>2,827</td><td align="right" class='awrnc'>7.79</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>3.89</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.64</td><td align="right" headers="perSecond Min" class='awrnc'>3.44</td><td align="right" headers="perSecond Max" class='awrncrb'>4.35</td></tr>
<tr><td scope="row" class='awrc'>physical writes</td><td align="right" class='awrc'>2,422,421</td><td align="right" class='awrc'>6,672.73</td><td align="right" class='awrc'>3.18</td><td align="right" headers="perSecond Average" class='awrclb'>3,336.37</td><td align="right" headers="perSecond StdDev" class='awrc'>48.11</td><td align="right" headers="perSecond Min" class='awrc'>3,302.35</td><td align="right" headers="perSecond Max" class='awrcrb'>3,370.38</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct</td><td align="right" class='awrnc'>2,422</td><td align="right" class='awrnc'>6.67</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>3.34</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.56</td><td align="right" headers="perSecond Min" class='awrnc'>1.53</td><td align="right" headers="perSecond Max" class='awrncrb'>5.15</td></tr>
<tr><td scope="row" class='awrc'>physical writes direct (lob)</td><td align="right" class='awrc'>335</td><td align="right" class='awrc'>0.92</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.46</td><td align="right" headers="perSecond StdDev" class='awrc'>0.06</td><td align="right" headers="perSecond Min" class='awrc'>0.42</td><td align="right" headers="perSecond Max" class='awrcrb'>0.51</td></tr>
<tr><td scope="row" class='awrnc'>physical writes direct temporary tablespace</td><td align="right" class='awrnc'>1,690</td><td align="right" class='awrnc'>4.66</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>2.33</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.56</td><td align="right" headers="perSecond Min" class='awrnc'>0.52</td><td align="right" headers="perSecond Max" class='awrncrb'>4.13</td></tr>
<tr><td scope="row" class='awrc'>physical writes from cache</td><td align="right" class='awrc'>2,419,999</td><td align="right" class='awrc'>6,666.06</td><td align="right" class='awrc'>3.18</td><td align="right" headers="perSecond Average" class='awrclb'>3,333.03</td><td align="right" headers="perSecond StdDev" class='awrc'>50.67</td><td align="right" headers="perSecond Min" class='awrc'>3,297.20</td><td align="right" headers="perSecond Max" class='awrcrb'>3,368.86</td></tr>
<tr><td scope="row" class='awrnc'>physical writes non checkpoint</td><td align="right" class='awrnc'>2,312,457</td><td align="right" class='awrnc'>6,369.83</td><td align="right" class='awrnc'>3.04</td><td align="right" headers="perSecond Average" class='awrnclb'>3,184.91</td><td align="right" headers="perSecond StdDev" class='awrnc'>105.92</td><td align="right" headers="perSecond Min" class='awrnc'>3,110.02</td><td align="right" headers="perSecond Max" class='awrncrb'>3,259.81</td></tr>
<tr><td scope="row" class='awrc'>pinned buffers inspected</td><td align="right" class='awrc'>48,294</td><td align="right" class='awrc'>133.03</td><td align="right" class='awrc'>0.06</td><td align="right" headers="perSecond Average" class='awrclb'>66.51</td><td align="right" headers="perSecond StdDev" class='awrc'>19.29</td><td align="right" headers="perSecond Min" class='awrc'>52.87</td><td align="right" headers="perSecond Max" class='awrcrb'>80.16</td></tr>
<tr><td scope="row" class='awrnc'>process last non-idle time</td><td align="right" class='awrnc'>722</td><td align="right" class='awrnc'>1.99</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.99</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.99</td><td align="right" headers="perSecond Max" class='awrncrb'>1.00</td></tr>
<tr><td scope="row" class='awrc'>recursive calls</td><td align="right" class='awrc'>9,225,392</td><td align="right" class='awrc'>25,411.99</td><td align="right" class='awrc'>12.13</td><td align="right" headers="perSecond Average" class='awrclb'>12,706.00</td><td align="right" headers="perSecond StdDev" class='awrc'>30.54</td><td align="right" headers="perSecond Min" class='awrc'>12,684.40</td><td align="right" headers="perSecond Max" class='awrcrb'>12,727.59</td></tr>
<tr><td scope="row" class='awrnc'>recursive cpu usage</td><td align="right" class='awrnc'>621,427</td><td align="right" class='awrnc'>1,711.77</td><td align="right" class='awrnc'>0.82</td><td align="right" headers="perSecond Average" class='awrnclb'>855.88</td><td align="right" headers="perSecond StdDev" class='awrnc'>56.44</td><td align="right" headers="perSecond Min" class='awrnc'>815.97</td><td align="right" headers="perSecond Max" class='awrncrb'>895.79</td></tr>
<tr><td scope="row" class='awrc'>redo KB read</td><td align="right" class='awrc'>1,122,304</td><td align="right" class='awrc'>3,091.47</td><td align="right" class='awrc'>1.48</td><td align="right" headers="perSecond Average" class='awrclb'>1,545.73</td><td align="right" headers="perSecond StdDev" class='awrc'>31.94</td><td align="right" headers="perSecond Min" class='awrc'>1,523.15</td><td align="right" headers="perSecond Max" class='awrcrb'>1,568.32</td></tr>
<tr><td scope="row" class='awrnc'>redo blocks checksummed by FG (exclusive)</td><td align="right" class='awrnc'>1,842,176</td><td align="right" class='awrnc'>5,074.40</td><td align="right" class='awrnc'>2.42</td><td align="right" headers="perSecond Average" class='awrnclb'>2,537.20</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.66</td><td align="right" headers="perSecond Min" class='awrnc'>2,536.73</td><td align="right" headers="perSecond Max" class='awrncrb'>2,537.67</td></tr>
<tr><td scope="row" class='awrc'>redo blocks written</td><td align="right" class='awrc'>4,355,066</td><td align="right" class='awrc'>11,996.34</td><td align="right" class='awrc'>5.72</td><td align="right" headers="perSecond Average" class='awrclb'>5,998.17</td><td align="right" headers="perSecond StdDev" class='awrc'>35.22</td><td align="right" headers="perSecond Min" class='awrc'>5,973.27</td><td align="right" headers="perSecond Max" class='awrcrb'>6,023.07</td></tr>
<tr><td scope="row" class='awrnc'>redo entries</td><td align="right" class='awrnc'>3,086,690</td><td align="right" class='awrnc'>8,502.51</td><td align="right" class='awrnc'>4.06</td><td align="right" headers="perSecond Average" class='awrnclb'>4,251.25</td><td align="right" headers="perSecond StdDev" class='awrnc'>24.17</td><td align="right" headers="perSecond Min" class='awrnc'>4,234.16</td><td align="right" headers="perSecond Max" class='awrncrb'>4,268.34</td></tr>
<tr><td scope="row" class='awrc'>redo size</td><td align="right" class='awrc'>2,142,421,708</td><td align="right" class='awrc'>5,901,451.81</td><td align="right" class='awrc'>2,815.88</td><td align="right" headers="perSecond Average" class='awrclb'>2,950,725.90</td><td align="right" headers="perSecond StdDev" class='awrc'>8,131.78</td><td align="right" headers="perSecond Min" class='awrc'>2,944,975.87</td><td align="right" headers="perSecond Max" class='awrcrb'>2,956,475.94</td></tr>
<tr><td scope="row" class='awrnc'>redo size for direct writes</td><td align="right" class='awrnc'>300</td><td align="right" class='awrnc'>0.83</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.41</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.12</td><td align="right" headers="perSecond Min" class='awrnc'>0.33</td><td align="right" headers="perSecond Max" class='awrncrb'>0.50</td></tr>
<tr><td scope="row" class='awrc'>redo subscn max counts</td><td align="right" class='awrc'>1,494</td><td align="right" class='awrc'>4.12</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>2.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.09</td><td align="right" headers="perSecond Min" class='awrc'>2.00</td><td align="right" headers="perSecond Max" class='awrcrb'>2.12</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time</td><td align="right" class='awrnc'>1,081</td><td align="right" class='awrnc'>2.98</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.49</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.35</td><td align="right" headers="perSecond Min" class='awrnc'>0.53</td><td align="right" headers="perSecond Max" class='awrncrb'>2.44</td></tr>
<tr><td scope="row" class='awrc'>redo synch time (usec)</td><td align="right" class='awrc'>10,493,125</td><td align="right" class='awrc'>28,904.26</td><td align="right" class='awrc'>13.79</td><td align="right" headers="perSecond Average" class='awrclb'>14,452.13</td><td align="right" headers="perSecond StdDev" class='awrc'>13,390.58</td><td align="right" headers="perSecond Min" class='awrc'>4,983.56</td><td align="right" headers="perSecond Max" class='awrcrb'>23,920.70</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead (usec)</td><td align="right" class='awrnc'>109,672</td><td align="right" class='awrnc'>302.10</td><td align="right" class='awrnc'>0.14</td><td align="right" headers="perSecond Average" class='awrnclb'>151.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>194.70</td><td align="right" headers="perSecond Min" class='awrnc'>13.38</td><td align="right" headers="perSecond Max" class='awrncrb'>288.72</td></tr>
<tr><td scope="row" class='awrc'>redo synch time overhead count (  2ms)</td><td align="right" class='awrc'>131</td><td align="right" class='awrc'>0.36</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.18</td><td align="right" headers="perSecond StdDev" class='awrc'>0.10</td><td align="right" headers="perSecond Min" class='awrc'>0.11</td><td align="right" headers="perSecond Max" class='awrcrb'>0.25</td></tr>
<tr><td scope="row" class='awrnc'>redo synch time overhead count (  8ms)</td><td align="right" class='awrnc'>15</td><td align="right" class='awrnc'>0.04</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>redo synch writes</td><td align="right" class='awrc'>258</td><td align="right" class='awrc'>0.71</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.36</td><td align="right" headers="perSecond StdDev" class='awrc'>0.04</td><td align="right" headers="perSecond Min" class='awrc'>0.33</td><td align="right" headers="perSecond Max" class='awrcrb'>0.38</td></tr>
<tr><td scope="row" class='awrnc'>redo wastage</td><td align="right" class='awrnc'>8,825,360</td><td align="right" class='awrnc'>24,310.04</td><td align="right" class='awrnc'>11.60</td><td align="right" headers="perSecond Average" class='awrnclb'>12,155.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>2,290.78</td><td align="right" headers="perSecond Min" class='awrnc'>10,535.19</td><td align="right" headers="perSecond Max" class='awrncrb'>13,774.85</td></tr>
<tr><td scope="row" class='awrc'>redo write active strands</td><td align="right" class='awrc'>36,450</td><td align="right" class='awrc'>100.40</td><td align="right" class='awrc'>0.05</td><td align="right" headers="perSecond Average" class='awrclb'>50.20</td><td align="right" headers="perSecond StdDev" class='awrc'>9.81</td><td align="right" headers="perSecond Min" class='awrc'>43.27</td><td align="right" headers="perSecond Max" class='awrcrb'>57.14</td></tr>
<tr><td scope="row" class='awrnc'>redo write broadcast ack count</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.07</td><td align="right" headers="perSecond Max" class='awrncrb'>0.08</td></tr>
<tr><td scope="row" class='awrc'>redo write broadcast ack time</td><td align="right" class='awrc'>96,890</td><td align="right" class='awrc'>266.89</td><td align="right" class='awrc'>0.13</td><td align="right" headers="perSecond Average" class='awrclb'>133.45</td><td align="right" headers="perSecond StdDev" class='awrc'>16.04</td><td align="right" headers="perSecond Min" class='awrc'>122.10</td><td align="right" headers="perSecond Max" class='awrcrb'>144.79</td></tr>
<tr><td scope="row" class='awrnc'>redo write finish time</td><td align="right" class='awrnc'>495,319,002</td><td align="right" class='awrnc'>1,364,391.74</td><td align="right" class='awrnc'>651.02</td><td align="right" headers="perSecond Average" class='awrnclb'>682,195.87</td><td align="right" headers="perSecond StdDev" class='awrnc'>39,969.86</td><td align="right" headers="perSecond Min" class='awrnc'>653,932.91</td><td align="right" headers="perSecond Max" class='awrncrb'>710,458.83</td></tr>
<tr><td scope="row" class='awrc'>redo write gather time</td><td align="right" class='awrc'>1,346,634</td><td align="right" class='awrc'>3,709.39</td><td align="right" class='awrc'>1.77</td><td align="right" headers="perSecond Average" class='awrclb'>1,854.70</td><td align="right" headers="perSecond StdDev" class='awrc'>323.87</td><td align="right" headers="perSecond Min" class='awrc'>1,625.69</td><td align="right" headers="perSecond Max" class='awrcrb'>2,083.71</td></tr>
<tr><td scope="row" class='awrnc'>redo write info find</td><td align="right" class='awrnc'>146</td><td align="right" class='awrnc'>0.40</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.20</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.13</td><td align="right" headers="perSecond Min" class='awrnc'>0.11</td><td align="right" headers="perSecond Max" class='awrncrb'>0.29</td></tr>
<tr><td scope="row" class='awrc'>redo write schedule time</td><td align="right" class='awrc'>1,531,136</td><td align="right" class='awrc'>4,217.62</td><td align="right" class='awrc'>2.01</td><td align="right" headers="perSecond Average" class='awrclb'>2,108.81</td><td align="right" headers="perSecond StdDev" class='awrc'>356.82</td><td align="right" headers="perSecond Min" class='awrc'>1,856.50</td><td align="right" headers="perSecond Max" class='awrcrb'>2,361.12</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (   4KB)</td><td align="right" class='awrnc'>2,203</td><td align="right" class='awrnc'>6.07</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>3.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.30</td><td align="right" headers="perSecond Min" class='awrnc'>2.82</td><td align="right" headers="perSecond Max" class='awrncrb'>3.25</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (   8KB)</td><td align="right" class='awrc'>3,183</td><td align="right" class='awrc'>8.77</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>4.38</td><td align="right" headers="perSecond StdDev" class='awrc'>0.17</td><td align="right" headers="perSecond Min" class='awrc'>4.26</td><td align="right" headers="perSecond Max" class='awrcrb'>4.51</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (  16KB)</td><td align="right" class='awrnc'>3,175</td><td align="right" class='awrnc'>8.75</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>4.37</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.70</td><td align="right" headers="perSecond Min" class='awrnc'>3.88</td><td align="right" headers="perSecond Max" class='awrncrb'>4.87</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (  32KB)</td><td align="right" class='awrc'>3,602</td><td align="right" class='awrc'>9.92</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>4.96</td><td align="right" headers="perSecond StdDev" class='awrc'>1.88</td><td align="right" headers="perSecond Min" class='awrc'>3.63</td><td align="right" headers="perSecond Max" class='awrcrb'>6.29</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 128KB)</td><td align="right" class='awrnc'>7,718</td><td align="right" class='awrnc'>21.26</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>10.63</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.96</td><td align="right" headers="perSecond Min" class='awrnc'>7.12</td><td align="right" headers="perSecond Max" class='awrncrb'>14.14</td></tr>
<tr><td scope="row" class='awrc'>redo write size count ( 256KB)</td><td align="right" class='awrc'>955</td><td align="right" class='awrc'>2.63</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.32</td><td align="right" headers="perSecond StdDev" class='awrc'>0.33</td><td align="right" headers="perSecond Min" class='awrc'>1.09</td><td align="right" headers="perSecond Max" class='awrcrb'>1.55</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count ( 512KB)</td><td align="right" class='awrnc'>297</td><td align="right" class='awrnc'>0.82</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.41</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.12</td><td align="right" headers="perSecond Min" class='awrnc'>0.33</td><td align="right" headers="perSecond Max" class='awrncrb'>0.49</td></tr>
<tr><td scope="row" class='awrc'>redo write size count (1024KB)</td><td align="right" class='awrc'>285</td><td align="right" class='awrc'>0.79</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.39</td><td align="right" headers="perSecond StdDev" class='awrc'>0.08</td><td align="right" headers="perSecond Min" class='awrc'>0.33</td><td align="right" headers="perSecond Max" class='awrcrb'>0.45</td></tr>
<tr><td scope="row" class='awrnc'>redo write size count (inf)</td><td align="right" class='awrnc'>524</td><td align="right" class='awrnc'>1.44</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.72</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.71</td><td align="right" headers="perSecond Max" class='awrncrb'>0.74</td></tr>
<tr><td scope="row" class='awrc'>redo write time</td><td align="right" class='awrc'>49,566</td><td align="right" class='awrc'>136.53</td><td align="right" class='awrc'>0.07</td><td align="right" headers="perSecond Average" class='awrclb'>68.27</td><td align="right" headers="perSecond StdDev" class='awrc'>4.04</td><td align="right" headers="perSecond Min" class='awrc'>65.41</td><td align="right" headers="perSecond Max" class='awrcrb'>71.13</td></tr>
<tr><td scope="row" class='awrnc'>redo write time (usec)</td><td align="right" class='awrnc'>495,663,046</td><td align="right" class='awrnc'>1,365,339.45</td><td align="right" class='awrnc'>651.47</td><td align="right" headers="perSecond Average" class='awrnclb'>682,669.72</td><td align="right" headers="perSecond StdDev" class='awrnc'>40,436.61</td><td align="right" headers="perSecond Min" class='awrnc'>654,076.72</td><td align="right" headers="perSecond Max" class='awrncrb'>711,262.73</td></tr>
<tr><td scope="row" class='awrc'>redo write total time</td><td align="right" class='awrc'>495,974,288</td><td align="right" class='awrc'>1,366,196.77</td><td align="right" class='awrc'>651.88</td><td align="right" headers="perSecond Average" class='awrclb'>683,098.39</td><td align="right" headers="perSecond StdDev" class='awrc'>39,811.73</td><td align="right" headers="perSecond Min" class='awrc'>654,947.25</td><td align="right" headers="perSecond Max" class='awrcrb'>711,249.53</td></tr>
<tr><td scope="row" class='awrnc'>redo writes</td><td align="right" class='awrnc'>21,942</td><td align="right" class='awrnc'>60.44</td><td align="right" class='awrnc'>0.03</td><td align="right" headers="perSecond Average" class='awrnclb'>30.22</td><td align="right" headers="perSecond StdDev" class='awrnc'>6.51</td><td align="right" headers="perSecond Min" class='awrnc'>25.62</td><td align="right" headers="perSecond Max" class='awrncrb'>34.83</td></tr>
<tr><td scope="row" class='awrc'>redo writes adaptive all</td><td align="right" class='awrc'>21,940</td><td align="right" class='awrc'>60.44</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>30.22</td><td align="right" headers="perSecond StdDev" class='awrc'>6.51</td><td align="right" headers="perSecond Min" class='awrc'>25.61</td><td align="right" headers="perSecond Max" class='awrcrb'>34.82</td></tr>
<tr><td scope="row" class='awrnc'>rollback changes - undo records applied</td><td align="right" class='awrnc'>21</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.03</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.05</td></tr>
<tr><td scope="row" class='awrc'>rollbacks only - consistent read gets</td><td align="right" class='awrc'>40</td><td align="right" class='awrc'>0.11</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.06</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.05</td><td align="right" headers="perSecond Max" class='awrcrb'>0.06</td></tr>
<tr><td scope="row" class='awrnc'>rows fetched via callback</td><td align="right" class='awrnc'>7,749</td><td align="right" class='awrnc'>21.35</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>10.67</td><td align="right" headers="perSecond StdDev" class='awrnc'>6.99</td><td align="right" headers="perSecond Min" class='awrnc'>5.73</td><td align="right" headers="perSecond Max" class='awrncrb'>15.62</td></tr>
<tr><td scope="row" class='awrc'>securefile allocation bytes</td><td align="right" class='awrc'>2,744,320</td><td align="right" class='awrc'>7,559.41</td><td align="right" class='awrc'>3.61</td><td align="right" headers="perSecond Average" class='awrclb'>3,779.71</td><td align="right" headers="perSecond StdDev" class='awrc'>526.49</td><td align="right" headers="perSecond Min" class='awrc'>3,407.42</td><td align="right" headers="perSecond Max" class='awrcrb'>4,152.00</td></tr>
<tr><td scope="row" class='awrnc'>securefile allocation chunks</td><td align="right" class='awrnc'>124</td><td align="right" class='awrnc'>0.34</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.16</td><td align="right" headers="perSecond Max" class='awrncrb'>0.18</td></tr>
<tr><td scope="row" class='awrc'>securefile bytes non-transformed</td><td align="right" class='awrc'>2,314,564</td><td align="right" class='awrc'>6,375.62</td><td align="right" class='awrc'>3.04</td><td align="right" headers="perSecond Average" class='awrclb'>3,187.81</td><td align="right" headers="perSecond StdDev" class='awrc'>448.20</td><td align="right" headers="perSecond Min" class='awrc'>2,870.88</td><td align="right" headers="perSecond Max" class='awrcrb'>3,504.74</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct read bytes</td><td align="right" class='awrnc'>114,688</td><td align="right" class='awrnc'>315.91</td><td align="right" class='awrnc'>0.15</td><td align="right" headers="perSecond Average" class='awrnclb'>315.91</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>315.91</td><td align="right" headers="perSecond Max" class='awrncrb'>315.91</td></tr>
<tr><td scope="row" class='awrc'>securefile direct read ops</td><td align="right" class='awrc'>14</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>securefile direct write bytes</td><td align="right" class='awrnc'>2,744,320</td><td align="right" class='awrnc'>7,559.41</td><td align="right" class='awrnc'>3.61</td><td align="right" headers="perSecond Average" class='awrnclb'>3,779.71</td><td align="right" headers="perSecond StdDev" class='awrnc'>526.49</td><td align="right" headers="perSecond Min" class='awrnc'>3,407.42</td><td align="right" headers="perSecond Max" class='awrncrb'>4,152.00</td></tr>
<tr><td scope="row" class='awrc'>securefile direct write ops</td><td align="right" class='awrc'>122</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.17</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.16</td><td align="right" headers="perSecond Max" class='awrcrb'>0.18</td></tr>
<tr><td scope="row" class='awrnc'>securefile number of non-transformed flushes</td><td align="right" class='awrnc'>127</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.16</td><td align="right" headers="perSecond Max" class='awrncrb'>0.19</td></tr>
<tr><td scope="row" class='awrc'>segment chunks allocation from dispenser</td><td align="right" class='awrc'>124</td><td align="right" class='awrc'>0.34</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.17</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.16</td><td align="right" headers="perSecond Max" class='awrcrb'>0.18</td></tr>
<tr><td scope="row" class='awrnc'>segment dispenser allocations</td><td align="right" class='awrnc'>122</td><td align="right" class='awrnc'>0.34</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.16</td><td align="right" headers="perSecond Max" class='awrncrb'>0.18</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc bytes</td><td align="right" class='awrc'>1,048,576</td><td align="right" class='awrc'>2,888.34</td><td align="right" class='awrc'>1.38</td><td align="right" headers="perSecond Average" class='awrclb'>2,888.34</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>2,888.34</td><td align="right" headers="perSecond Max" class='awrcrb'>2,888.34</td></tr>
<tr><td scope="row" class='awrnc'>segment prealloc ops</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>segment prealloc time (ms)</td><td align="right" class='awrc'>561</td><td align="right" class='awrc'>1.55</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.55</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>1.55</td><td align="right" headers="perSecond Max" class='awrcrb'>1.55</td></tr>
<tr><td scope="row" class='awrnc'>session connect time</td><td align="right" class='awrnc'>407</td><td align="right" class='awrnc'>1.12</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.12</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>1.12</td><td align="right" headers="perSecond Max" class='awrncrb'>1.12</td></tr>
<tr><td scope="row" class='awrc'>session cursor cache hits</td><td align="right" class='awrc'>8,345,719</td><td align="right" class='awrc'>22,988.87</td><td align="right" class='awrc'>10.97</td><td align="right" headers="perSecond Average" class='awrclb'>11,494.44</td><td align="right" headers="perSecond StdDev" class='awrc'>29.46</td><td align="right" headers="perSecond Min" class='awrc'>11,473.61</td><td align="right" headers="perSecond Max" class='awrcrb'>11,515.26</td></tr>
<tr><td scope="row" class='awrnc'>session logical reads</td><td align="right" class='awrnc'>40,065,632</td><td align="right" class='awrnc'>110,363.61</td><td align="right" class='awrnc'>52.66</td><td align="right" headers="perSecond Average" class='awrnclb'>55,181.81</td><td align="right" headers="perSecond StdDev" class='awrnc'>101.62</td><td align="right" headers="perSecond Min" class='awrnc'>55,109.95</td><td align="right" headers="perSecond Max" class='awrncrb'>55,253.66</td></tr>
<tr><td scope="row" class='awrc'>shared hash latch upgrades - no wait</td><td align="right" class='awrc'>4,027,756</td><td align="right" class='awrc'>11,094.78</td><td align="right" class='awrc'>5.29</td><td align="right" headers="perSecond Average" class='awrclb'>5,547.39</td><td align="right" headers="perSecond StdDev" class='awrc'>3,010.48</td><td align="right" headers="perSecond Min" class='awrc'>3,418.66</td><td align="right" headers="perSecond Max" class='awrcrb'>7,676.13</td></tr>
<tr><td scope="row" class='awrnc'>shared hash latch upgrades - wait</td><td align="right" class='awrnc'>39</td><td align="right" class='awrnc'>0.11</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.08</td></tr>
<tr><td scope="row" class='awrc'>shared io pool buffer get success</td><td align="right" class='awrc'>136</td><td align="right" class='awrc'>0.37</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.19</td><td align="right" headers="perSecond StdDev" class='awrc'>0.04</td><td align="right" headers="perSecond Min" class='awrc'>0.16</td><td align="right" headers="perSecond Max" class='awrcrb'>0.22</td></tr>
<tr><td scope="row" class='awrnc'>sorts (memory)</td><td align="right" class='awrnc'>2,950</td><td align="right" class='awrnc'>8.13</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>4.06</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.16</td><td align="right" headers="perSecond Min" class='awrnc'>1.83</td><td align="right" headers="perSecond Max" class='awrncrb'>6.30</td></tr>
<tr><td scope="row" class='awrc'>sorts (rows)</td><td align="right" class='awrc'>1,732,369</td><td align="right" class='awrc'>4,771.89</td><td align="right" class='awrc'>2.28</td><td align="right" headers="perSecond Average" class='awrclb'>2,385.94</td><td align="right" headers="perSecond StdDev" class='awrc'>3,020.13</td><td align="right" headers="perSecond Min" class='awrc'>250.39</td><td align="right" headers="perSecond Max" class='awrcrb'>4,521.50</td></tr>
<tr><td scope="row" class='awrnc'>sql area evicted</td><td align="right" class='awrnc'>71</td><td align="right" class='awrnc'>0.20</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.10</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.08</td><td align="right" headers="perSecond Max" class='awrncrb'>0.12</td></tr>
<tr><td scope="row" class='awrc'>sql area purged</td><td align="right" class='awrc'>61</td><td align="right" class='awrc'>0.17</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.09</td></tr>
<tr><td scope="row" class='awrnc'>summed dirty queue length</td><td align="right" class='awrnc'>27,803,978</td><td align="right" class='awrnc'>76,588.10</td><td align="right" class='awrnc'>36.54</td><td align="right" headers="perSecond Average" class='awrnclb'>38,294.05</td><td align="right" headers="perSecond StdDev" class='awrnc'>5,425.49</td><td align="right" headers="perSecond Min" class='awrnc'>34,457.65</td><td align="right" headers="perSecond Max" class='awrncrb'>42,130.45</td></tr>
<tr><td scope="row" class='awrc'>switch current caused by our pin</td><td align="right" class='awrc'>33</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.05</td><td align="right" headers="perSecond StdDev" class='awrc'>0.01</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.05</td></tr>
<tr><td scope="row" class='awrnc'>switch current to new buffer</td><td align="right" class='awrnc'>98</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.13</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.05</td><td align="right" headers="perSecond Min" class='awrnc'>0.10</td><td align="right" headers="perSecond Max" class='awrncrb'>0.17</td></tr>
<tr><td scope="row" class='awrc'>table fetch by rowid</td><td align="right" class='awrc'>26,725,327</td><td align="right" class='awrc'>73,616.81</td><td align="right" class='awrc'>35.13</td><td align="right" headers="perSecond Average" class='awrclb'>36,808.40</td><td align="right" headers="perSecond StdDev" class='awrc'>564.67</td><td align="right" headers="perSecond Min" class='awrc'>36,409.12</td><td align="right" headers="perSecond Max" class='awrcrb'>37,207.69</td></tr>
<tr><td scope="row" class='awrnc'>table fetch continued row</td><td align="right" class='awrnc'>536</td><td align="right" class='awrnc'>1.48</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.74</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.85</td><td align="right" headers="perSecond Min" class='awrnc'>0.14</td><td align="right" headers="perSecond Max" class='awrncrb'>1.34</td></tr>
<tr><td scope="row" class='awrc'>table scan blocks gotten</td><td align="right" class='awrc'>21,653</td><td align="right" class='awrc'>59.64</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>29.82</td><td align="right" headers="perSecond StdDev" class='awrc'>25.75</td><td align="right" headers="perSecond Min" class='awrc'>11.61</td><td align="right" headers="perSecond Max" class='awrcrb'>48.03</td></tr>
<tr><td scope="row" class='awrnc'>table scan disk non-IMC rows gotten</td><td align="right" class='awrnc'>1,906,960</td><td align="right" class='awrnc'>5,252.83</td><td align="right" class='awrnc'>2.51</td><td align="right" headers="perSecond Average" class='awrnclb'>2,626.42</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,520.28</td><td align="right" headers="perSecond Min" class='awrnc'>1,551.42</td><td align="right" headers="perSecond Max" class='awrncrb'>3,701.41</td></tr>
<tr><td scope="row" class='awrc'>table scan rows gotten</td><td align="right" class='awrc'>1,906,960</td><td align="right" class='awrc'>5,252.83</td><td align="right" class='awrc'>2.51</td><td align="right" headers="perSecond Average" class='awrclb'>2,626.42</td><td align="right" headers="perSecond StdDev" class='awrc'>1,520.28</td><td align="right" headers="perSecond Min" class='awrc'>1,551.42</td><td align="right" headers="perSecond Max" class='awrcrb'>3,701.41</td></tr>
<tr><td scope="row" class='awrnc'>table scans (direct read)</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0.01</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>&#160;</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.01</td></tr>
<tr><td scope="row" class='awrc'>table scans (long tables)</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>0.01</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.01</td><td align="right" headers="perSecond Max" class='awrcrb'>0.01</td></tr>
<tr><td scope="row" class='awrnc'>table scans (short tables)</td><td align="right" class='awrnc'>1,131</td><td align="right" class='awrnc'>3.12</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.56</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.16</td><td align="right" headers="perSecond Min" class='awrnc'>0.74</td><td align="right" headers="perSecond Max" class='awrncrb'>2.37</td></tr>
<tr><td scope="row" class='awrc'>temp space allocated (bytes)</td><td align="right" class='awrc'>6,291,456</td><td align="right" class='awrc'>17,330.13</td><td align="right" class='awrc'>8.27</td><td align="right" headers="perSecond Average" class='awrclb'>8,665.07</td><td align="right" headers="perSecond StdDev" class='awrc'>8,169.43</td><td align="right" headers="perSecond Min" class='awrc'>2,888.41</td><td align="right" headers="perSecond Max" class='awrcrb'>14,441.72</td></tr>
<tr><td scope="row" class='awrnc'>total cf enq hold time</td><td align="right" class='awrnc'>9,211</td><td align="right" class='awrnc'>25.37</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>12.69</td><td align="right" headers="perSecond StdDev" class='awrnc'>7.41</td><td align="right" headers="perSecond Min" class='awrnc'>7.45</td><td align="right" headers="perSecond Max" class='awrncrb'>17.93</td></tr>
<tr><td scope="row" class='awrc'>total number of cf enq holders</td><td align="right" class='awrc'>257</td><td align="right" class='awrc'>0.71</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.35</td><td align="right" headers="perSecond StdDev" class='awrc'>0.03</td><td align="right" headers="perSecond Min" class='awrc'>0.34</td><td align="right" headers="perSecond Max" class='awrcrb'>0.37</td></tr>
<tr><td scope="row" class='awrnc'>total number of times SMON posted</td><td align="right" class='awrnc'>7</td><td align="right" class='awrnc'>0.02</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.01</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.01</td><td align="right" headers="perSecond Min" class='awrnc'>0.00</td><td align="right" headers="perSecond Max" class='awrncrb'>0.02</td></tr>
<tr><td scope="row" class='awrc'>transaction rollbacks</td><td align="right" class='awrc'>11</td><td align="right" class='awrc'>0.03</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrc'>0.02</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.03</td></tr>
<tr><td scope="row" class='awrnc'>transaction tables consistent reads - undo records applied</td><td align="right" class='awrnc'>55</td><td align="right" class='awrnc'>0.15</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.08</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.08</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.13</td></tr>
<tr><td scope="row" class='awrc'>undo change vector size</td><td align="right" class='awrc'>856,075,352</td><td align="right" class='awrc'>2,358,119.95</td><td align="right" class='awrc'>1,125.18</td><td align="right" headers="perSecond Average" class='awrclb'>1,179,059.97</td><td align="right" headers="perSecond StdDev" class='awrc'>1,187.77</td><td align="right" headers="perSecond Min" class='awrc'>1,178,220.09</td><td align="right" headers="perSecond Max" class='awrcrb'>1,179,899.85</td></tr>
<tr><td scope="row" class='awrnc'>user I/O wait time</td><td align="right" class='awrnc'>1,122,864</td><td align="right" class='awrnc'>3,093.02</td><td align="right" class='awrnc'>1.48</td><td align="right" headers="perSecond Average" class='awrnclb'>1,546.51</td><td align="right" headers="perSecond StdDev" class='awrnc'>699.85</td><td align="right" headers="perSecond Min" class='awrnc'>1,051.64</td><td align="right" headers="perSecond Max" class='awrncrb'>2,041.38</td></tr>
<tr><td scope="row" class='awrc'>user calls</td><td align="right" class='awrc'>2,696</td><td align="right" class='awrc'>7.43</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>3.71</td><td align="right" headers="perSecond StdDev" class='awrc'>0.33</td><td align="right" headers="perSecond Min" class='awrc'>3.48</td><td align="right" headers="perSecond Max" class='awrcrb'>3.94</td></tr>
<tr><td scope="row" class='awrnc'>user commits</td><td align="right" class='awrnc'>760,835</td><td align="right" class='awrnc'>2,095.77</td><td align="right" class='awrnc'>1.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1,047.89</td><td align="right" headers="perSecond StdDev" class='awrnc'>5.66</td><td align="right" headers="perSecond Min" class='awrnc'>1,043.88</td><td align="right" headers="perSecond Max" class='awrncrb'>1,051.89</td></tr>
<tr><td scope="row" class='awrc'>user logons cumulative</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>user logouts cumulative</td><td align="right" class='awrnc'>257</td><td align="right" class='awrnc'>0.71</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.35</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.04</td><td align="right" headers="perSecond Min" class='awrnc'>0.33</td><td align="right" headers="perSecond Max" class='awrncrb'>0.38</td></tr>
<tr><td scope="row" class='awrc'>workarea executions - optimal</td><td align="right" class='awrc'>3,407</td><td align="right" class='awrc'>9.38</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>4.69</td><td align="right" headers="perSecond StdDev" class='awrc'>2.56</td><td align="right" headers="perSecond Min" class='awrc'>2.88</td><td align="right" headers="perSecond Max" class='awrcrb'>6.50</td></tr>
<tr><td scope="row" class='awrnc'>write clones created in background</td><td align="right" class='awrnc'>169</td><td align="right" class='awrnc'>0.47</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.23</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.12</td><td align="right" headers="perSecond Min" class='awrnc'>0.15</td><td align="right" headers="perSecond Max" class='awrncrb'>0.32</td></tr>
<tr><td scope="row" class='awrc'>write clones created in foreground</td><td align="right" class='awrc'>75,794</td><td align="right" class='awrc'>208.78</td><td align="right" class='awrc'>0.10</td><td align="right" headers="perSecond Average" class='awrclb'>104.39</td><td align="right" headers="perSecond StdDev" class='awrc'>19.37</td><td align="right" headers="perSecond Min" class='awrc'>90.69</td><td align="right" headers="perSecond Max" class='awrcrb'>118.09</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12072"></a>
<h3 class="awr">Global Messaging Statistics (Global)</h3>
<ul>
<li class="awr"> per Second Average - average of per-instance per Second rates </li>
<li class="awr"> per Second Std Dev - standard deviation of per-instance per Second rates </li>
<li class="awr"> per Second Min     - minimum of per-instance per Second rates </li>
<li class="awr"> per Second Max     - maximum of per-instance per Second rates</li>
</ul>
<table border="0" class="tdiff" summary="Global Messaging Statistics (Global). . per Second Average - average of per-instance per Second rates. per Second Std Dev - standard deviation of per-instance per Second rates. per Second Min - minimum of per-instance per Second rates. per Second Max - maximum of per-instance per Second rates"><tr>
<td>&#160;</td><td>&#160;</td><td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="perSecond">per Second</th>
</tr><tr>
<th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Total</th><th class="awrbg" scope="col">per Second</th><th class="awrbg" scope="col">per Trans</th><th class="awrbg" scope="col" id="Average">Average</th><th class="awrbg" scope="col" id="StdDev">Std Dev</th><th class="awrbg" scope="col" id="Min">Min</th><th class="awrbg" scope="col" id="Max">Max</th></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim Broadcasts sent</td><td align="right" class='awrc'>156</td><td align="right" class='awrc'>0.43</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.21</td><td align="right" headers="perSecond StdDev" class='awrc'>0.20</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.36</td></tr>
<tr><td scope="row" class='awrnc'>Global Enqueue S-optim S-lock gets</td><td align="right" class='awrnc'>107,634</td><td align="right" class='awrnc'>296.48</td><td align="right" class='awrnc'>0.14</td><td align="right" headers="perSecond Average" class='awrnclb'>148.24</td><td align="right" headers="perSecond StdDev" class='awrnc'>116.25</td><td align="right" headers="perSecond Min" class='awrnc'>66.04</td><td align="right" headers="perSecond Max" class='awrncrb'>230.44</td></tr>
<tr><td scope="row" class='awrc'>Global Enqueue S-optim anti-locks crea</td><td align="right" class='awrc'>77</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.11</td><td align="right" headers="perSecond StdDev" class='awrc'>0.10</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.18</td></tr>
<tr><td scope="row" class='awrnc'>acks for commit broadcast(actual)</td><td align="right" class='awrnc'>2,885</td><td align="right" class='awrnc'>7.95</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>3.97</td><td align="right" headers="perSecond StdDev" class='awrnc'>1.79</td><td align="right" headers="perSecond Min" class='awrnc'>2.71</td><td align="right" headers="perSecond Max" class='awrncrb'>5.24</td></tr>
<tr><td scope="row" class='awrc'>acks for commit broadcast(logical)</td><td align="right" class='awrc'>13,539</td><td align="right" class='awrc'>37.29</td><td align="right" class='awrc'>0.02</td><td align="right" headers="perSecond Average" class='awrclb'>18.65</td><td align="right" headers="perSecond StdDev" class='awrc'>8.04</td><td align="right" headers="perSecond Min" class='awrc'>12.96</td><td align="right" headers="perSecond Max" class='awrcrb'>24.33</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(actual)</td><td align="right" class='awrnc'>13,235</td><td align="right" class='awrnc'>36.46</td><td align="right" class='awrnc'>0.02</td><td align="right" headers="perSecond Average" class='awrnclb'>18.23</td><td align="right" headers="perSecond StdDev" class='awrnc'>5.80</td><td align="right" headers="perSecond Min" class='awrnc'>14.13</td><td align="right" headers="perSecond Max" class='awrncrb'>22.33</td></tr>
<tr><td scope="row" class='awrc'>broadcast msgs on commit(logical)</td><td align="right" class='awrc'>21,915</td><td align="right" class='awrc'>60.37</td><td align="right" class='awrc'>0.03</td><td align="right" headers="perSecond Average" class='awrclb'>30.18</td><td align="right" headers="perSecond StdDev" class='awrc'>6.52</td><td align="right" headers="perSecond Min" class='awrc'>25.57</td><td align="right" headers="perSecond Max" class='awrcrb'>34.80</td></tr>
<tr><td scope="row" class='awrnc'>broadcast msgs on commit(wasted)</td><td align="right" class='awrnc'>8,917</td><td align="right" class='awrnc'>24.56</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>12.28</td><td align="right" headers="perSecond StdDev" class='awrnc'>4.65</td><td align="right" headers="perSecond Min" class='awrnc'>8.99</td><td align="right" headers="perSecond Max" class='awrncrb'>15.57</td></tr>
<tr><td scope="row" class='awrc'>flow control messages received</td><td align="right" class='awrc'>32</td><td align="right" class='awrc'>0.09</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrc'>0.00</td><td align="right" headers="perSecond Min" class='awrc'>0.04</td><td align="right" headers="perSecond Max" class='awrcrb'>0.04</td></tr>
<tr><td scope="row" class='awrnc'>flow control messages sent</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.04</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.00</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gcs assume no cvt</td><td align="right" class='awrc'>2,506</td><td align="right" class='awrc'>6.90</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>3.45</td><td align="right" headers="perSecond StdDev" class='awrc'>0.94</td><td align="right" headers="perSecond Min" class='awrc'>2.78</td><td align="right" headers="perSecond Max" class='awrcrb'>4.12</td></tr>
<tr><td scope="row" class='awrnc'>gcs ast to fg</td><td align="right" class='awrnc'>317,700</td><td align="right" class='awrnc'>875.14</td><td align="right" class='awrnc'>0.42</td><td align="right" headers="perSecond Average" class='awrnclb'>437.57</td><td align="right" headers="perSecond StdDev" class='awrnc'>613.19</td><td align="right" headers="perSecond Min" class='awrnc'>3.97</td><td align="right" headers="perSecond Max" class='awrncrb'>871.16</td></tr>
<tr><td scope="row" class='awrc'>gcs bidless ast to lms</td><td align="right" class='awrc'>663</td><td align="right" class='awrc'>1.83</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.91</td><td align="right" headers="perSecond StdDev" class='awrc'>1.27</td><td align="right" headers="perSecond Min" class='awrc'>0.02</td><td align="right" headers="perSecond Max" class='awrcrb'>1.81</td></tr>
<tr><td scope="row" class='awrnc'>gcs blocked converts</td><td align="right" class='awrnc'>480,248</td><td align="right" class='awrnc'>1,322.88</td><td align="right" class='awrnc'>0.63</td><td align="right" headers="perSecond Average" class='awrnclb'>661.44</td><td align="right" headers="perSecond StdDev" class='awrnc'>35.20</td><td align="right" headers="perSecond Min" class='awrnc'>636.55</td><td align="right" headers="perSecond Max" class='awrncrb'>686.33</td></tr>
<tr><td scope="row" class='awrc'>gcs blocked cr converts</td><td align="right" class='awrc'>1,380</td><td align="right" class='awrc'>3.80</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>1.90</td><td align="right" headers="perSecond StdDev" class='awrc'>0.23</td><td align="right" headers="perSecond Min" class='awrc'>1.74</td><td align="right" headers="perSecond Max" class='awrcrb'>2.06</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible basts</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.03</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>gcs compatible cr basts (global)</td><td align="right" class='awrc'>77</td><td align="right" class='awrc'>0.21</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.11</td><td align="right" headers="perSecond StdDev" class='awrc'>0.05</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.14</td></tr>
<tr><td scope="row" class='awrnc'>gcs compatible cr basts (local)</td><td align="right" class='awrnc'>1,417</td><td align="right" class='awrnc'>3.90</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.95</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.56</td><td align="right" headers="perSecond Min" class='awrnc'>1.56</td><td align="right" headers="perSecond Max" class='awrncrb'>2.35</td></tr>
<tr><td scope="row" class='awrc'>gcs dbwr flush pi msgs</td><td align="right" class='awrc'>445,763</td><td align="right" class='awrc'>1,227.88</td><td align="right" class='awrc'>0.59</td><td align="right" headers="perSecond Average" class='awrclb'>613.94</td><td align="right" headers="perSecond StdDev" class='awrc'>89.80</td><td align="right" headers="perSecond Min" class='awrc'>550.45</td><td align="right" headers="perSecond Max" class='awrcrb'>677.44</td></tr>
<tr><td scope="row" class='awrnc'>gcs dbwr write request msgs</td><td align="right" class='awrnc'>197</td><td align="right" class='awrnc'>0.54</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.27</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.22</td><td align="right" headers="perSecond Min" class='awrnc'>0.12</td><td align="right" headers="perSecond Max" class='awrncrb'>0.43</td></tr>
<tr><td scope="row" class='awrc'>gcs error msgs</td><td align="right" class='awrc'>1</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.00</td><td align="right" headers="perSecond StdDev" class='awrc'>&#160;</td><td align="right" headers="perSecond Min" class='awrc'>0.00</td><td align="right" headers="perSecond Max" class='awrcrb'>0.00</td></tr>
<tr><td scope="row" class='awrnc'>gcs grant ast</td><td align="right" class='awrnc'>318,363</td><td align="right" class='awrnc'>876.96</td><td align="right" class='awrnc'>0.42</td><td align="right" headers="perSecond Average" class='awrnclb'>438.48</td><td align="right" headers="perSecond StdDev" class='awrnc'>614.46</td><td align="right" headers="perSecond Min" class='awrnc'>3.99</td><td align="right" headers="perSecond Max" class='awrncrb'>872.97</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate (compatible) converts</td><td align="right" class='awrc'>4,215</td><td align="right" class='awrc'>11.61</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>5.81</td><td align="right" headers="perSecond StdDev" class='awrc'>3.79</td><td align="right" headers="perSecond Min" class='awrc'>3.12</td><td align="right" headers="perSecond Max" class='awrcrb'>8.49</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate (null) converts</td><td align="right" class='awrnc'>212,887</td><td align="right" class='awrnc'>586.41</td><td align="right" class='awrnc'>0.28</td><td align="right" headers="perSecond Average" class='awrnclb'>293.21</td><td align="right" headers="perSecond StdDev" class='awrnc'>164.48</td><td align="right" headers="perSecond Min" class='awrnc'>176.90</td><td align="right" headers="perSecond Max" class='awrncrb'>409.51</td></tr>
<tr><td scope="row" class='awrc'>gcs immediate cr (compatible) converts</td><td align="right" class='awrc'>216,441</td><td align="right" class='awrc'>596.20</td><td align="right" class='awrc'>0.28</td><td align="right" headers="perSecond Average" class='awrclb'>298.10</td><td align="right" headers="perSecond StdDev" class='awrc'>36.46</td><td align="right" headers="perSecond Min" class='awrc'>272.32</td><td align="right" headers="perSecond Max" class='awrcrb'>323.88</td></tr>
<tr><td scope="row" class='awrnc'>gcs immediate cr (null) converts</td><td align="right" class='awrnc'>2,312,254</td><td align="right" class='awrnc'>6,369.29</td><td align="right" class='awrnc'>3.04</td><td align="right" headers="perSecond Average" class='awrnclb'>3,184.64</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,394.56</td><td align="right" headers="perSecond Min" class='awrnc'>2,198.54</td><td align="right" headers="perSecond Max" class='awrncrb'>4,170.74</td></tr>
<tr><td scope="row" class='awrc'>gcs lms write request msgs</td><td align="right" class='awrc'>171</td><td align="right" class='awrc'>0.47</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.24</td><td align="right" headers="perSecond StdDev" class='awrc'>0.15</td><td align="right" headers="perSecond Min" class='awrc'>0.13</td><td align="right" headers="perSecond Max" class='awrcrb'>0.34</td></tr>
<tr><td scope="row" class='awrnc'>gcs msgs process time(ms)</td><td align="right" class='awrnc'>259,303</td><td align="right" class='awrnc'>714.27</td><td align="right" class='awrnc'>0.34</td><td align="right" headers="perSecond Average" class='awrnclb'>357.13</td><td align="right" headers="perSecond StdDev" class='awrnc'>38.97</td><td align="right" headers="perSecond Min" class='awrnc'>329.58</td><td align="right" headers="perSecond Max" class='awrncrb'>384.69</td></tr>
<tr><td scope="row" class='awrc'>gcs msgs received</td><td align="right" class='awrc'>9,674,920</td><td align="right" class='awrc'>26,650.30</td><td align="right" class='awrc'>12.72</td><td align="right" headers="perSecond Average" class='awrclb'>13,325.15</td><td align="right" headers="perSecond StdDev" class='awrc'>3,176.77</td><td align="right" headers="perSecond Min" class='awrc'>11,078.83</td><td align="right" headers="perSecond Max" class='awrcrb'>15,571.46</td></tr>
<tr><td scope="row" class='awrnc'>gcs new served by master</td><td align="right" class='awrnc'>127</td><td align="right" class='awrnc'>0.35</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.17</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.19</td><td align="right" headers="perSecond Min" class='awrnc'>0.04</td><td align="right" headers="perSecond Max" class='awrncrb'>0.31</td></tr>
<tr><td scope="row" class='awrc'>gcs out-of-order msgs</td><td align="right" class='awrc'>2,258</td><td align="right" class='awrc'>6.22</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>3.11</td><td align="right" headers="perSecond StdDev" class='awrc'>1.23</td><td align="right" headers="perSecond Min" class='awrc'>2.24</td><td align="right" headers="perSecond Max" class='awrcrb'>3.98</td></tr>
<tr><td scope="row" class='awrnc'>gcs pings refused</td><td align="right" class='awrnc'>725</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>1.00</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.56</td><td align="right" headers="perSecond Min" class='awrnc'>0.60</td><td align="right" headers="perSecond Max" class='awrncrb'>1.39</td></tr>
<tr><td scope="row" class='awrc'>gcs reader bypass grant immediate</td><td align="right" class='awrc'>97</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>0.13</td><td align="right" headers="perSecond StdDev" class='awrc'>0.08</td><td align="right" headers="perSecond Min" class='awrc'>0.07</td><td align="right" headers="perSecond Max" class='awrcrb'>0.19</td></tr>
<tr><td scope="row" class='awrnc'>gcs side channel msgs actual</td><td align="right" class='awrnc'>4,070</td><td align="right" class='awrnc'>11.21</td><td align="right" class='awrnc'>0.01</td><td align="right" headers="perSecond Average" class='awrnclb'>5.61</td><td align="right" headers="perSecond StdDev" class='awrnc'>2.77</td><td align="right" headers="perSecond Min" class='awrnc'>3.64</td><td align="right" headers="perSecond Max" class='awrncrb'>7.57</td></tr>
<tr><td scope="row" class='awrc'>gcs side channel msgs logical</td><td align="right" class='awrc'>327,044</td><td align="right" class='awrc'>900.86</td><td align="right" class='awrc'>0.43</td><td align="right" headers="perSecond Average" class='awrclb'>450.43</td><td align="right" headers="perSecond StdDev" class='awrc'>612.17</td><td align="right" headers="perSecond Min" class='awrc'>17.56</td><td align="right" headers="perSecond Max" class='awrcrb'>883.30</td></tr>
<tr><td scope="row" class='awrnc'>gcs stale cr</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>0.14</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.07</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.07</td><td align="right" headers="perSecond Min" class='awrnc'>0.02</td><td align="right" headers="perSecond Max" class='awrncrb'>0.12</td></tr>
<tr><td scope="row" class='awrc'>gcs undo cr</td><td align="right" class='awrc'>1,545</td><td align="right" class='awrc'>4.26</td><td align="right" class='awrc'>0.00</td><td align="right" headers="perSecond Average" class='awrclb'>2.13</td><td align="right" headers="perSecond StdDev" class='awrc'>2.80</td><td align="right" headers="perSecond Min" class='awrc'>0.15</td><td align="right" headers="perSecond Max" class='awrcrb'>4.10</td></tr>
<tr><td scope="row" class='awrnc'>ges msgs process time(ms)</td><td align="right" class='awrnc'>232</td><td align="right" class='awrnc'>0.64</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.32</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.11</td><td align="right" headers="perSecond Min" class='awrnc'>0.24</td><td align="right" headers="perSecond Max" class='awrncrb'>0.40</td></tr>
<tr><td scope="row" class='awrc'>ges msgs received</td><td align="right" class='awrc'>6,385</td><td align="right" class='awrc'>17.59</td><td align="right" class='awrc'>0.01</td><td align="right" headers="perSecond Average" class='awrclb'>8.79</td><td align="right" headers="perSecond StdDev" class='awrc'>6.30</td><td align="right" headers="perSecond Min" class='awrc'>4.34</td><td align="right" headers="perSecond Max" class='awrcrb'>13.25</td></tr>
<tr><td scope="row" class='awrnc'>ges remote lock allocation</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>0.05</td><td align="right" class='awrnc'>0.00</td><td align="right" headers="perSecond Average" class='awrnclb'>0.02</td><td align="right" headers="perSecond StdDev" class='awrnc'>0.02</td><td align="right" headers="perSecond Min" class='awrnc'>0.01</td><td align="right" headers="perSecond Max" class='awrncrb'>0.04</td></tr>
<tr><td scope="row" class='awrc'>implicit batch messages received</td><td align="right" class='awrc'>209,326</td><td align="right" class='awrc'>576.60</td><td align="right" class='awrc'>0.28</td><td align="right" headers="perSecond Average" class='awrclb'>288.30</td><td align="right" headers="perSecond StdDev" class='awrc'>30.82</td><td align="right" headers="perSecond Min" class='awrc'>266.51</td><td align="right" headers="perSecond Max" class='awrcrb'>310.09</td></tr>
<tr><td scope="row" class='awrnc'>implicit batch messages sent</td><td align="right" class='awrnc'>208,243</td><td align="right" class='awrnc'>573.62</td><td align="right" class='awrnc'>0.27</td><td align="right" headers="perSecond Average" class='awrnclb'>286.81</td><td align="right" headers="perSecond StdDev" class='awrnc'>3.88</td><td align="right" headers="perSecond Min" class='awrnc'>284.07</td><td align="right" headers="perSecond Max" class='awrncrb'>289.55</td></tr>
<tr><td scope="row" class='awrc'>messages flow controlled</td><td align="right" class='awrc'>116,707</td><td align="right" class='awrc'>321.48</td><td align="right" class='awrc'>0.15</td><td align="right" headers="perSecond Average" class='awrclb'>160.74</td><td align="right" headers="perSecond StdDev" class='awrc'>8.87</td><td align="right" headers="perSecond Min" class='awrc'>154.47</td><td align="right" headers="perSecond Max" class='awrcrb'>167.01</td></tr>
<tr><td scope="row" class='awrnc'>messages queue sent actual</td><td align="right" class='awrnc'>3,142,852</td><td align="right" class='awrnc'>8,657.22</td><td align="right" class='awrnc'>4.13</td><td align="right" headers="perSecond Average" class='awrnclb'>4,328.61</td><td align="right" headers="perSecond StdDev" class='awrnc'>632.29</td><td align="right" headers="perSecond Min" class='awrnc'>3,881.51</td><td align="right" headers="perSecond Max" class='awrncrb'>4,775.70</td></tr>
<tr><td scope="row" class='awrc'>messages queue sent logical</td><td align="right" class='awrc'>1,444,584</td><td align="right" class='awrc'>3,979.21</td><td align="right" class='awrc'>1.90</td><td align="right" headers="perSecond Average" class='awrclb'>1,989.61</td><td align="right" headers="perSecond StdDev" class='awrc'>99.61</td><td align="right" headers="perSecond Min" class='awrc'>1,919.17</td><td align="right" headers="perSecond Max" class='awrcrb'>2,060.04</td></tr>
<tr><td scope="row" class='awrnc'>messages received actual</td><td align="right" class='awrnc'>5,740,381</td><td align="right" class='awrnc'>15,812.31</td><td align="right" class='awrnc'>7.54</td><td align="right" headers="perSecond Average" class='awrnclb'>7,906.16</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,774.24</td><td align="right" headers="perSecond Min" class='awrnc'>6,651.58</td><td align="right" headers="perSecond Max" class='awrncrb'>9,160.74</td></tr>
<tr><td scope="row" class='awrc'>messages received logical</td><td align="right" class='awrc'>9,681,305</td><td align="right" class='awrc'>26,667.89</td><td align="right" class='awrc'>12.72</td><td align="right" headers="perSecond Average" class='awrclb'>13,333.94</td><td align="right" headers="perSecond StdDev" class='awrc'>3,183.07</td><td align="right" headers="perSecond Min" class='awrc'>11,083.18</td><td align="right" headers="perSecond Max" class='awrcrb'>15,584.71</td></tr>
<tr><td scope="row" class='awrnc'>messages sent directly</td><td align="right" class='awrnc'>2,557,028</td><td align="right" class='awrnc'>7,043.49</td><td align="right" class='awrnc'>3.36</td><td align="right" headers="perSecond Average" class='awrnclb'>3,521.75</td><td align="right" headers="perSecond StdDev" class='awrnc'>1,487.53</td><td align="right" headers="perSecond Min" class='awrnc'>2,469.90</td><td align="right" headers="perSecond Max" class='awrncrb'>4,573.59</td></tr>
<tr><td scope="row" class='awrc'>messages sent indirectly</td><td align="right" class='awrc'>4,713,290</td><td align="right" class='awrc'>12,983.07</td><td align="right" class='awrc'>6.19</td><td align="right" headers="perSecond Average" class='awrclb'>6,491.53</td><td align="right" headers="perSecond StdDev" class='awrc'>1,461.59</td><td align="right" headers="perSecond Min" class='awrc'>5,458.04</td><td align="right" headers="perSecond Max" class='awrcrb'>7,525.03</td></tr>
<tr><td scope="row" class='awrnc'>messages sent not implicit batched</td><td align="right" class='awrnc'>411,170</td><td align="right" class='awrnc'>1,132.60</td><td align="right" class='awrnc'>0.54</td><td align="right" headers="perSecond Average" class='awrnclb'>566.30</td><td align="right" headers="perSecond StdDev" class='awrnc'>70.48</td><td align="right" headers="perSecond Min" class='awrnc'>516.46</td><td align="right" headers="perSecond Max" class='awrncrb'>616.14</td></tr>
<tr><td scope="row" class='awrc'>messages sent pbatched</td><td align="right" class='awrc'>5,593,903</td><td align="right" class='awrc'>15,408.80</td><td align="right" class='awrc'>7.35</td><td align="right" headers="perSecond Average" class='awrclb'>7,704.40</td><td align="right" headers="perSecond StdDev" class='awrc'>136.67</td><td align="right" headers="perSecond Min" class='awrc'>7,607.76</td><td align="right" headers="perSecond Max" class='awrcrb'>7,801.04</td></tr>
<tr><td scope="row" class='awrnc'>msgs received kernel queue time (ns)</td><td align="right" class='awrnc'>2,021,115,702,408</td><td align="right" class='awrnc'>5,567,313,099.60</td><td align="right" class='awrnc'>2,656,444.17</td><td align="right" headers="perSecond Average" class='awrnclb'>2,783,656,549.80</td><td align="right" headers="perSecond StdDev" class='awrnc'>472,714,856.04</td><td align="right" headers="perSecond Min" class='awrnc'>2,449,396,669.53</td><td align="right" headers="perSecond Max" class='awrncrb'>3,117,916,430.07</td></tr>
<tr><td scope="row" class='awrc'>msgs received queue time (ms)</td><td align="right" class='awrc'>586,157</td><td align="right" class='awrc'>1,614.62</td><td align="right" class='awrc'>0.77</td><td align="right" headers="perSecond Average" class='awrclb'>807.31</td><td align="right" headers="perSecond StdDev" class='awrc'>283.38</td><td align="right" headers="perSecond Min" class='awrc'>606.93</td><td align="right" headers="perSecond Max" class='awrcrb'>1,007.69</td></tr>
<tr><td scope="row" class='awrnc'>msgs received queued</td><td align="right" class='awrnc'>9,681,304</td><td align="right" class='awrnc'>26,667.88</td><td align="right" class='awrnc'>12.72</td><td align="right" headers="perSecond Average" class='awrnclb'>13,333.94</td><td align="right" headers="perSecond StdDev" class='awrnc'>3,183.06</td><td align="right" headers="perSecond Min" class='awrnc'>11,083.18</td><td align="right" headers="perSecond Max" class='awrncrb'>15,584.71</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queue time (ms)</td><td align="right" class='awrc'>6,735,712</td><td align="right" class='awrc'>18,553.97</td><td align="right" class='awrc'>8.85</td><td align="right" headers="perSecond Average" class='awrclb'>9,276.99</td><td align="right" headers="perSecond StdDev" class='awrc'>1,453.94</td><td align="right" headers="perSecond Min" class='awrc'>8,248.90</td><td align="right" headers="perSecond Max" class='awrcrb'>10,305.07</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queue time on ksxp (ms)</td><td align="right" class='awrnc'>55,855,976</td><td align="right" class='awrnc'>153,859.29</td><td align="right" class='awrnc'>73.41</td><td align="right" headers="perSecond Average" class='awrnclb'>76,929.64</td><td align="right" headers="perSecond StdDev" class='awrnc'>4,085.53</td><td align="right" headers="perSecond Min" class='awrnc'>74,040.74</td><td align="right" headers="perSecond Max" class='awrncrb'>79,818.55</td></tr>
<tr><td scope="row" class='awrc'>msgs sent queued</td><td align="right" class='awrc'>3,572,925</td><td align="right" class='awrc'>9,841.88</td><td align="right" class='awrc'>4.70</td><td align="right" headers="perSecond Average" class='awrclb'>4,920.94</td><td align="right" headers="perSecond StdDev" class='awrc'>540.80</td><td align="right" headers="perSecond Min" class='awrc'>4,538.54</td><td align="right" headers="perSecond Max" class='awrcrb'>5,303.34</td></tr>
<tr><td scope="row" class='awrnc'>msgs sent queued on ksxp</td><td align="right" class='awrnc'>5,701,713</td><td align="right" class='awrnc'>15,705.76</td><td align="right" class='awrnc'>7.49</td><td align="right" headers="perSecond Average" class='awrnclb'>7,852.88</td><td align="right" headers="perSecond StdDev" class='awrnc'>855.39</td><td align="right" headers="perSecond Min" class='awrnc'>7,248.03</td><td align="right" headers="perSecond Max" class='awrncrb'>8,457.73</td></tr>
<tr><td scope="row" class='awrc'>process batch messages received</td><td align="right" class='awrc'>1,922,488</td><td align="right" class='awrc'>5,295.63</td><td align="right" class='awrc'>2.53</td><td align="right" headers="perSecond Average" class='awrclb'>2,647.81</td><td align="right" headers="perSecond StdDev" class='awrc'>234.43</td><td align="right" headers="perSecond Min" class='awrc'>2,482.05</td><td align="right" headers="perSecond Max" class='awrcrb'>2,813.58</td></tr>
<tr><td scope="row" class='awrnc'>process batch messages sent</td><td align="right" class='awrnc'>2,138,955</td><td align="right" class='awrnc'>5,891.91</td><td align="right" class='awrnc'>2.81</td><td align="right" headers="perSecond Average" class='awrnclb'>2,945.96</td><td align="right" headers="perSecond StdDev" class='awrnc'>589.95</td><td align="right" headers="perSecond Min" class='awrnc'>2,528.80</td><td align="right" headers="perSecond Max" class='awrncrb'>3,363.11</td></tr>
<tr><td scope="row" class='awrc'>receiver cycle time</td><td align="right" class='awrc'>1,035,685</td><td align="right" class='awrc'>2,852.87</td><td align="right" class='awrc'>1.36</td><td align="right" headers="perSecond Average" class='awrclb'>1,426.43</td><td align="right" headers="perSecond StdDev" class='awrc'>157.77</td><td align="right" headers="perSecond Min" class='awrc'>1,314.87</td><td align="right" headers="perSecond Max" class='awrcrb'>1,538.00</td></tr>
<tr><td scope="row" class='awrnc'>receiver loop count</td><td align="right" class='awrnc'>4,799,281</td><td align="right" class='awrnc'>13,219.97</td><td align="right" class='awrnc'>6.31</td><td align="right" headers="perSecond Average" class='awrnclb'>6,609.98</td><td align="right" headers="perSecond StdDev" class='awrnc'>665.29</td><td align="right" headers="perSecond Min" class='awrnc'>6,139.55</td><td align="right" headers="perSecond Max" class='awrncrb'>7,080.42</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12073"></a>
<h3 class="awr">System Statistics (Absolute Values)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="System Statistics (Absolute Values)"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="Sessions">Sessions</th>
<th class="awrbg" colspan=" 2" id="OpenCursors">Open Cursors</th>
<th class="awrbg" colspan=" 2" id="SessionCachedCursors">Session Cached Cursors</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="Sessions Begin" class='awrclb'>279</td><td align="right" headers="Sessions End" class='awrc'>141</td><td align="right" headers="OpenCursors Begin" class='awrclb'>805</td><td align="right" headers="OpenCursors End" class='awrc'>113</td><td align="right" headers="SessionCachedCursors Begin" class='awrclb'>37,252</td><td align="right" headers="SessionCachedCursors End" class='awrcrb'>37,497</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="Sessions Begin" class='awrnclb'>257</td><td align="right" headers="Sessions End" class='awrnc'>139</td><td align="right" headers="OpenCursors Begin" class='awrnclb'>714</td><td align="right" headers="OpenCursors End" class='awrnc'>121</td><td align="right" headers="SessionCachedCursors Begin" class='awrnclb'>35,397</td><td align="right" headers="SessionCachedCursors End" class='awrncrb'>35,712</td></tr>
<tr><td align="right" scope="row" class='awrct'>Sum</td><td align="right" class='awrclbt'>536</td><td align="right" class='awrct'>280</td><td align="right" class='awrclbt'>1,519</td><td align="right" class='awrct'>234</td><td align="right" class='awrclbt'>72,649</td><td align="right" class='awrcrbt'>73,209</td></tr>
<tr><td align="right" scope="row" class='awrnc'>Avg</td><td align="right" class='awrnclb'>268</td><td align="right" class='awrnc'>140</td><td align="right" class='awrnclb'>760</td><td align="right" class='awrnc'>117</td><td align="right" class='awrnclb'>36,325</td><td align="right" class='awrncrb'>36,605</td></tr>
<tr><td align="right" scope="row" class='awrc'>Std</td><td align="right" class='awrclb'>16</td><td align="right" class='awrc'>1</td><td align="right" class='awrclb'>64</td><td align="right" class='awrc'>6</td><td align="right" class='awrclb'>1,312</td><td align="right" class='awrcrb'>1,262</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#623">Back to Global Activity Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="630"></a>
<h2 class="awr">
I/O Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12097">IO Profile (Global)</a></li>
<li class="awr"><a class="awr" href="#12076">IOStat by Function</a></li>
<li class="awr"><a class="awr" href="#12077">IOStat by File Type</a></li>
<li class="awr"><a class="awr" href="#12070">Segment Statistics (Global)</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12097"></a>
<h3 class="awr">IO Profile (Global)</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IO Profile (Global)"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Read+Write/s</th><th class="awrbg" scope="col">Reads/s</th><th class="awrbg" scope="col">Writes/s</th></tr>
<tr><td class='awrc'>Total Requests</td><td align="right" class='awrc'>67,208.17</td><td align="right" class='awrc'>60,665.99</td><td align="right" class='awrc'>6,542.18</td></tr>
<tr><td class='awrnc'>Database Requests</td><td align="right" class='awrnc'>67,019.76</td><td align="right" class='awrnc'>60,647.33</td><td align="right" class='awrnc'>6,372.44</td></tr>
<tr><td class='awrc'>Optimized Requests</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>Redo Requests</td><td align="right" class='awrnc'>60.43</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>60.43</td></tr>
<tr><td class='awrc'>Total (MB)</td><td align="right" class='awrc'>537.33</td><td align="right" class='awrc'>478.78</td><td align="right" class='awrc'>58.55</td></tr>
<tr><td class='awrnc'>Database (MB)</td><td align="right" class='awrnc'>525.99</td><td align="right" class='awrnc'>473.86</td><td align="right" class='awrnc'>52.12</td></tr>
<tr><td class='awrc'>Optimized Total (MB)</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0.00</td></tr>
<tr><td class='awrnc'>Redo (MB)</td><td align="right" class='awrnc'>5.63</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>5.63</td></tr>
<tr><td class='awrc'>Database (blocks)</td><td align="right" class='awrc'>67,326.48</td><td align="right" class='awrc'>60,654.73</td><td align="right" class='awrc'>6,671.76</td></tr>
<tr><td class='awrnc'>Via Buffer Cache (blocks)</td><td align="right" class='awrnc'>67,319.75</td><td align="right" class='awrnc'>60,654.67</td><td align="right" class='awrnc'>6,665.08</td></tr>
<tr><td class='awrc'>Direct (blocks)</td><td align="right" class='awrc'>6.71</td><td align="right" class='awrc'>0.04</td><td align="right" class='awrc'>6.67</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12076"></a>
<h3 class="awr">IOStat by Function</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IOStat by Function"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="Requests">Requests</th>
<th class="awrbg" colspan=" 4" id="MB">MB</th>
<td>&#160;</td><td>&#160;</td></tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Function Name</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOs/s">IOs/s</th><th class="awrbg" scope="col" id="Reads/s">Reads/s</th><th class="awrbg" scope="col" id="Writes/s">Writes/s</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOMB/s">IO MB/s</th><th class="awrbg" scope="col" id="ReadMB/s">Read MB/s</th><th class="awrbg" scope="col" id="WriteMB/s">Write MB/s</th><th class="awrbg" scope="col">Waits: Count</th><th class="awrbg" scope="col">Avg   Time </th></tr>
<tr><td align="right" scope="row" class='awrc'>*</td><td class='awrc'>Total</td><td align="right" headers="Requests Total" class='awrclb'>23,343,962</td><td align="right" headers="Requests IOs/s" class='awrc'>64,293.20</td><td align="right" headers="Requests Reads/s" class='awrc'>58,013.61</td><td align="right" headers="Requests Writes/s" class='awrc'>6,279.60</td><td align="right" headers="MB Total" class='awrclb'>186,667</td><td align="right" headers="MB IOMB/s" class='awrc'>514.11</td><td align="right" headers="MB ReadMB/s" class='awrc'>457.91</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>56.20</td><td align="right" class='awrc'>21.1M</td><td align="right" class='awrc'>546.64us</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrnclb'>21,058,050</td><td align="right" headers="Requests IOs/s" class='awrnc'>57,997.42</td><td align="right" headers="Requests Reads/s" class='awrnc'>57,997.42</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>164,517</td><td align="right" headers="MB IOMB/s" class='awrnc'>453.11</td><td align="right" headers="MB ReadMB/s" class='awrnc'>453.11</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>21.1M</td><td align="right" class='awrnc'>523.11us</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>DBWR</td><td align="right" headers="Requests Total" class='awrclb'>2,243,289</td><td align="right" headers="Requests IOs/s" class='awrc'>6,178.40</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>6,178.40</td><td align="right" headers="MB Total" class='awrclb'>18,333</td><td align="right" headers="MB IOMB/s" class='awrc'>50.49</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>50.49</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>LGWR</td><td align="right" headers="Requests Total" class='awrnclb'>35,797</td><td align="right" headers="Requests IOs/s" class='awrnc'>98.59</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>98.59</td><td align="right" headers="MB Total" class='awrnclb'>2,041</td><td align="right" headers="MB IOMB/s" class='awrnc'>5.62</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>5.62</td><td align="right" class='awrnc'>21.4K</td><td align="right" class='awrnc'>22.40ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Others</td><td align="right" headers="Requests Total" class='awrclb'>6,699</td><td align="right" headers="Requests IOs/s" class='awrc'>18.45</td><td align="right" headers="Requests Reads/s" class='awrc'>16.14</td><td align="right" headers="Requests Writes/s" class='awrc'>2.31</td><td align="right" headers="MB Total" class='awrclb'>1,766</td><td align="right" headers="MB IOMB/s" class='awrc'>4.86</td><td align="right" headers="MB ReadMB/s" class='awrc'>4.80</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.06</td><td align="right" class='awrc'>3557</td><td align="right" class='awrc'>8.56ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrnclb'>111</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.31</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.31</td><td align="right" headers="MB Total" class='awrnclb'>10</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.03</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.03</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Direct Reads</td><td align="right" headers="Requests Total" class='awrclb'>16</td><td align="right" headers="Requests IOs/s" class='awrc'>0.04</td><td align="right" headers="Requests Reads/s" class='awrc'>0.04</td><td align="right" headers="Requests Writes/s" class='awrc'>0.00</td><td align="right" headers="MB Total" class='awrclb'>0</td><td align="right" headers="MB IOMB/s" class='awrc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnct'>1</td><td class='awrnct'>Total</td><td align="right" headers="Requests Total" class='awrnclbt'>12,063,650</td><td align="right" headers="Requests IOs/s" class='awrnct'>33,225.32</td><td align="right" headers="Requests Reads/s" class='awrnct'>29,940.78</td><td align="right" headers="Requests Writes/s" class='awrnct'>3,284.54</td><td align="right" headers="MB Total" class='awrnclbt'>96,361</td><td align="right" headers="MB IOMB/s" class='awrnct'>265.39</td><td align="right" headers="MB ReadMB/s" class='awrnct'>236.31</td><td align="right" headers="MB WriteMB/s" class='awrncrbt'>29.09</td><td align="right" class='awrnct'>10.9M</td><td align="right" class='awrnct'>696.24us</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrclb'>10,868,039</td><td align="right" headers="Requests IOs/s" class='awrc'>29,932.41</td><td align="right" headers="Requests Reads/s" class='awrc'>29,932.41</td><td align="right" headers="Requests Writes/s" class='awrc'>0.00</td><td align="right" headers="MB Total" class='awrclb'>84,899</td><td align="right" headers="MB IOMB/s" class='awrc'>233.83</td><td align="right" headers="MB ReadMB/s" class='awrc'>233.83</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.00</td><td align="right" class='awrc'>10.9M</td><td align="right" class='awrc'>672.12us</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>DBWR</td><td align="right" headers="Requests Total" class='awrnclb'>1,176,338</td><td align="right" headers="Requests IOs/s" class='awrnc'>3,239.83</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>3,239.83</td><td align="right" headers="MB Total" class='awrnclb'>9,514</td><td align="right" headers="MB IOMB/s" class='awrnc'>26.20</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>26.20</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>LGWR</td><td align="right" headers="Requests Total" class='awrclb'>15,740</td><td align="right" headers="Requests IOs/s" class='awrc'>43.35</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>43.35</td><td align="right" headers="MB Total" class='awrclb'>1,036</td><td align="right" headers="MB IOMB/s" class='awrc'>2.85</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>2.85</td><td align="right" class='awrc'>9230</td><td align="right" class='awrc'>27.45ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Others</td><td align="right" headers="Requests Total" class='awrnclb'>3,485</td><td align="right" headers="Requests IOs/s" class='awrnc'>9.60</td><td align="right" headers="Requests Reads/s" class='awrnc'>8.37</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.23</td><td align="right" headers="MB Total" class='awrnclb'>910</td><td align="right" headers="MB IOMB/s" class='awrnc'>2.51</td><td align="right" headers="MB ReadMB/s" class='awrnc'>2.48</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.02</td><td align="right" class='awrnc'>1858</td><td align="right" class='awrnc'>8.90ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrclb'>48</td><td align="right" headers="Requests IOs/s" class='awrc'>0.13</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>0.13</td><td align="right" headers="MB Total" class='awrclb'>2</td><td align="right" headers="MB IOMB/s" class='awrc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.01</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnct'>2</td><td class='awrnct'>Total</td><td align="right" headers="Requests Total" class='awrnclbt'>11,280,312</td><td align="right" headers="Requests IOs/s" class='awrnct'>31,067.88</td><td align="right" headers="Requests Reads/s" class='awrnct'>28,072.83</td><td align="right" headers="Requests Writes/s" class='awrnct'>2,995.05</td><td align="right" headers="MB Total" class='awrnclbt'>90,306</td><td align="right" headers="MB IOMB/s" class='awrnct'>248.72</td><td align="right" headers="MB ReadMB/s" class='awrnct'>221.60</td><td align="right" headers="MB WriteMB/s" class='awrncrbt'>27.11</td><td align="right" class='awrnct'>10.2M</td><td align="right" class='awrnct'>386.97us</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Buffer Cache Reads</td><td align="right" headers="Requests Total" class='awrclb'>10,190,011</td><td align="right" headers="Requests IOs/s" class='awrc'>28,065.01</td><td align="right" headers="Requests Reads/s" class='awrc'>28,065.01</td><td align="right" headers="Requests Writes/s" class='awrc'>0.00</td><td align="right" headers="MB Total" class='awrclb'>79,618</td><td align="right" headers="MB IOMB/s" class='awrc'>219.28</td><td align="right" headers="MB ReadMB/s" class='awrc'>219.28</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.00</td><td align="right" class='awrc'>10.2M</td><td align="right" class='awrc'>364.02us</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>DBWR</td><td align="right" headers="Requests Total" class='awrnclb'>1,066,951</td><td align="right" headers="Requests IOs/s" class='awrnc'>2,938.56</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrnc'>2,938.56</td><td align="right" headers="MB Total" class='awrnclb'>8,819</td><td align="right" headers="MB IOMB/s" class='awrnc'>24.29</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>24.29</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>LGWR</td><td align="right" headers="Requests Total" class='awrclb'>20,057</td><td align="right" headers="Requests IOs/s" class='awrc'>55.24</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>55.24</td><td align="right" headers="MB Total" class='awrclb'>1,005</td><td align="right" headers="MB IOMB/s" class='awrc'>2.77</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>2.77</td><td align="right" class='awrc'>12.1K</td><td align="right" class='awrc'>18.56ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Others</td><td align="right" headers="Requests Total" class='awrnclb'>3,214</td><td align="right" headers="Requests IOs/s" class='awrnc'>8.85</td><td align="right" headers="Requests Reads/s" class='awrnc'>7.78</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.08</td><td align="right" headers="MB Total" class='awrnclb'>856</td><td align="right" headers="MB IOMB/s" class='awrnc'>2.36</td><td align="right" headers="MB ReadMB/s" class='awrnc'>2.32</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.04</td><td align="right" class='awrnc'>1699</td><td align="right" class='awrnc'>8.19ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Direct Writes</td><td align="right" headers="Requests Total" class='awrclb'>63</td><td align="right" headers="Requests IOs/s" class='awrc'>0.17</td><td align="right" headers="Requests Reads/s" class='awrc'>0.00</td><td align="right" headers="Requests Writes/s" class='awrc'>0.17</td><td align="right" headers="MB Total" class='awrclb'>8</td><td align="right" headers="MB IOMB/s" class='awrc'>0.02</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrcrb'>0.02</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Direct Reads</td><td align="right" headers="Requests Total" class='awrnclb'>16</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.04</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.04</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.00</td><td align="right" headers="MB Total" class='awrnclb'>0</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.00</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.00</td><td align="right" headers="MB WriteMB/s" class='awrncrb'>0.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12077"></a>
<h3 class="awr">IOStat by File Type</h3>
<ul>
</ul>
<table border="0" class="tdiff" summary="IOStat by File Type"><tr>
<td>&#160;</td><td>&#160;</td><th class="awrbg" colspan=" 4" id="Requests">Requests</th>
<th class="awrbg" colspan=" 4" id="MB">MB</th>
<th class="awrbg" colspan=" 2" id="ServiceTime">Service Time</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Filetype Name</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOs/s">IOs/s</th><th class="awrbg" scope="col" id="Reads/s">Reads/s</th><th class="awrbg" scope="col" id="Writes/s">Writes/s</th><th class="awrbg" scope="col" id="Total">Total</th><th class="awrbg" scope="col" id="IOMB/s">IO MB/s</th><th class="awrbg" scope="col" id="ReadMB/s">Read MB/s</th><th class="awrbg" scope="col" id="WriteMB/s">Write MB/s</th><th class="awrbg" scope="col" id="Small|Read">Small Read</th><th class="awrbg" scope="col" id="Large|Read">Large Read</th></tr>
<tr><td align="right" scope="row" class='awrc'>*</td><td class='awrc'>Total</td><td align="right" headers="Requests Total" class='awrclb'>23,306,861</td><td align="right" headers="Requests IOs/s" class='awrc'>64,191.02</td><td align="right" headers="Requests Reads/s" class='awrc'>57,923.03</td><td align="right" headers="Requests Writes/s" class='awrc'>6,267.99</td><td align="right" headers="MB Total" class='awrclb'>186,483</td><td align="right" headers="MB IOMB/s" class='awrc'>513.61</td><td align="right" headers="MB ReadMB/s" class='awrc'>457.52</td><td align="right" headers="MB WriteMB/s" class='awrc'>56.08</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>160.42us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1582.89ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>23,263,687</td><td align="right" headers="Requests IOs/s" class='awrnc'>64,072.11</td><td align="right" headers="Requests Reads/s" class='awrnc'>57,905.30</td><td align="right" headers="Requests Writes/s" class='awrnc'>6,166.81</td><td align="right" headers="MB Total" class='awrnclb'>182,658</td><td align="right" headers="MB IOMB/s" class='awrnc'>503.07</td><td align="right" headers="MB ReadMB/s" class='awrnc'>452.67</td><td align="right" headers="MB WriteMB/s" class='awrnc'>50.40</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>160.45us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>.00ns</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>37,573</td><td align="right" headers="Requests IOs/s" class='awrc'>103.48</td><td align="right" headers="Requests Reads/s" class='awrc'>5.05</td><td align="right" headers="Requests Writes/s" class='awrc'>98.44</td><td align="right" headers="MB Total" class='awrclb'>3,718</td><td align="right" headers="MB IOMB/s" class='awrc'>10.24</td><td align="right" headers="MB ReadMB/s" class='awrc'>4.63</td><td align="right" headers="MB WriteMB/s" class='awrc'>5.61</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>236.84us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1613.04ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">*</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>4,678</td><td align="right" headers="Requests IOs/s" class='awrnc'>12.88</td><td align="right" headers="Requests Reads/s" class='awrnc'>11.08</td><td align="right" headers="Requests Writes/s" class='awrnc'>1.81</td><td align="right" headers="MB Total" class='awrnclb'>73</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.20</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.17</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.03</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>41.27us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">*</div></td><td class='awrc'>Temp File</td><td align="right" headers="Requests Total" class='awrclb'>923</td><td align="right" headers="Requests IOs/s" class='awrc'>2.54</td><td align="right" headers="Requests Reads/s" class='awrc'>1.61</td><td align="right" headers="Requests Writes/s" class='awrc'>0.93</td><td align="right" headers="MB Total" class='awrclb'>34</td><td align="right" headers="MB IOMB/s" class='awrc'>0.09</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.05</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.04</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>19.78us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>.00ns</td></tr>
<tr><td align="right" scope="row" class='awrnct'>1</td><td class='awrnct'>Total</td><td align="right" headers="Requests Total" class='awrnclbt'>12,061,271</td><td align="right" headers="Requests IOs/s" class='awrnct'>33,218.77</td><td align="right" headers="Requests Reads/s" class='awrnct'>29,933.17</td><td align="right" headers="Requests Writes/s" class='awrnct'>3,285.60</td><td align="right" headers="MB Total" class='awrnclbt'>96,440</td><td align="right" headers="MB IOMB/s" class='awrnct'>265.61</td><td align="right" headers="MB ReadMB/s" class='awrnct'>236.52</td><td align="right" headers="MB WriteMB/s" class='awrnct'>29.09</td><td align="right" headers="ServiceTime Small|Read" class='awrnclbt'>265.57us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrbt'>1618.24ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Data File</td><td align="right" headers="Requests Total" class='awrclb'>12,041,856</td><td align="right" headers="Requests IOs/s" class='awrc'>33,165.30</td><td align="right" headers="Requests Reads/s" class='awrc'>29,924.43</td><td align="right" headers="Requests Writes/s" class='awrc'>3,240.87</td><td align="right" headers="MB Total" class='awrclb'>94,493</td><td align="right" headers="MB IOMB/s" class='awrc'>260.25</td><td align="right" headers="MB ReadMB/s" class='awrc'>234.04</td><td align="right" headers="MB WriteMB/s" class='awrc'>26.21</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>265.61us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>.00ns</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Log File</td><td align="right" headers="Requests Total" class='awrnclb'>16,689</td><td align="right" headers="Requests IOs/s" class='awrnc'>45.96</td><td align="right" headers="Requests Reads/s" class='awrnc'>2.61</td><td align="right" headers="Requests Writes/s" class='awrnc'>43.36</td><td align="right" headers="MB Total" class='awrnclb'>1,904</td><td align="right" headers="MB IOMB/s" class='awrnc'>5.24</td><td align="right" headers="MB ReadMB/s" class='awrnc'>2.39</td><td align="right" headers="MB WriteMB/s" class='awrnc'>2.85</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>443.04us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>1623.83ms</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">1</div></td><td class='awrc'>Control File</td><td align="right" headers="Requests Total" class='awrclb'>2,454</td><td align="right" headers="Requests IOs/s" class='awrc'>6.76</td><td align="right" headers="Requests Reads/s" class='awrc'>5.76</td><td align="right" headers="Requests Writes/s" class='awrc'>1.00</td><td align="right" headers="MB Total" class='awrclb'>39</td><td align="right" headers="MB IOMB/s" class='awrc'>0.11</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.09</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.02</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>63.58us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>Temp File</td><td align="right" headers="Requests Total" class='awrnclb'>272</td><td align="right" headers="Requests IOs/s" class='awrnc'>0.75</td><td align="right" headers="Requests Reads/s" class='awrnc'>0.37</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.37</td><td align="right" headers="MB Total" class='awrnclb'>4</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.01</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.01</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>22.06us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrct'>2</td><td class='awrct'>Total</td><td align="right" headers="Requests Total" class='awrclbt'>11,245,590</td><td align="right" headers="Requests IOs/s" class='awrct'>30,972.25</td><td align="right" headers="Requests Reads/s" class='awrct'>27,989.86</td><td align="right" headers="Requests Writes/s" class='awrct'>2,982.39</td><td align="right" headers="MB Total" class='awrclbt'>90,043</td><td align="right" headers="MB IOMB/s" class='awrct'>247.99</td><td align="right" headers="MB ReadMB/s" class='awrct'>221.00</td><td align="right" headers="MB WriteMB/s" class='awrct'>26.99</td><td align="right" headers="ServiceTime Small|Read" class='awrclbt'>47.98us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrbt'>1546.28ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Data File</td><td align="right" headers="Requests Total" class='awrnclb'>11,221,831</td><td align="right" headers="Requests IOs/s" class='awrnc'>30,906.81</td><td align="right" headers="Requests Reads/s" class='awrnc'>27,980.87</td><td align="right" headers="Requests Writes/s" class='awrnc'>2,925.94</td><td align="right" headers="MB Total" class='awrnclb'>88,165</td><td align="right" headers="MB IOMB/s" class='awrnc'>242.82</td><td align="right" headers="MB ReadMB/s" class='awrnc'>218.63</td><td align="right" headers="MB WriteMB/s" class='awrnc'>24.19</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>47.99us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Log File</td><td align="right" headers="Requests Total" class='awrclb'>20,884</td><td align="right" headers="Requests IOs/s" class='awrc'>57.52</td><td align="right" headers="Requests Reads/s" class='awrc'>2.44</td><td align="right" headers="Requests Writes/s" class='awrc'>55.08</td><td align="right" headers="MB Total" class='awrclb'>1,814</td><td align="right" headers="MB IOMB/s" class='awrc'>5.00</td><td align="right" headers="MB ReadMB/s" class='awrc'>2.24</td><td align="right" headers="MB WriteMB/s" class='awrc'>2.76</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>13.70us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>1601.50ms</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>Control File</td><td align="right" headers="Requests Total" class='awrnclb'>2,224</td><td align="right" headers="Requests IOs/s" class='awrnc'>6.13</td><td align="right" headers="Requests Reads/s" class='awrnc'>5.32</td><td align="right" headers="Requests Writes/s" class='awrnc'>0.81</td><td align="right" headers="MB Total" class='awrnclb'>34</td><td align="right" headers="MB IOMB/s" class='awrnc'>0.09</td><td align="right" headers="MB ReadMB/s" class='awrnc'>0.08</td><td align="right" headers="MB WriteMB/s" class='awrnc'>0.01</td><td align="right" headers="ServiceTime Small|Read" class='awrnclb'>17.10us</td><td align="right" headers="ServiceTime Large|Read" class='awrncrb'>&#160;</td></tr>
<tr><td align="right" scope="row" class='awrc'><div class="hidden">2</div></td><td class='awrc'>Temp File</td><td align="right" headers="Requests Total" class='awrclb'>651</td><td align="right" headers="Requests IOs/s" class='awrc'>1.79</td><td align="right" headers="Requests Reads/s" class='awrc'>1.24</td><td align="right" headers="Requests Writes/s" class='awrc'>0.56</td><td align="right" headers="MB Total" class='awrclb'>30</td><td align="right" headers="MB IOMB/s" class='awrc'>0.08</td><td align="right" headers="MB ReadMB/s" class='awrc'>0.05</td><td align="right" headers="MB WriteMB/s" class='awrc'>0.04</td><td align="right" headers="ServiceTime Small|Read" class='awrclb'>19.05us</td><td align="right" headers="ServiceTime Large|Read" class='awrcrb'>.00ns</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12070"></a>
<h3 class="awr">Segment Statistics (Global)</h3>
<ul>
<li class="awr"> % Total shows % of statistic for each segment compared to the global cluster-wide total     (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants) </li>
<li class="awr"> % Capture shows % of statistic for each segment compared to the  total captured     by AWR for all segments during the snapshot interval</li>
<li class="awr">Captured Segments account for	39.0% of Total Logical Reads:	   40,065,632</li>
<li class="awr">Captured Segments account for	50.3% of Total Physical Reads:	    22,022,883</li>
<li class="awr">Captured Segments account for	50.3% of Total Physical Read Requests:	    22,020,196</li>
<li class="awr">Captured Segments account for	50.3% of Total UnOptimized Read Requests:      22,020,196</li>
<li class="awr">Captured Segments account for	 0.0% of Total Optimized  Read Requests:	       1</li>
<li class="awr">Captured Segments account for	 0.0% of Total Direct Physical Reads:		   16</li>
<li class="awr">Captured Segments account for	48.7% of Total Physical Writes:       2,422,421</li>
<li class="awr">Captured Segments account for	49.5% of Total Physical Write Requests:       2,313,742</li>
<li class="awr">Captured Segments account for	17.7% of Total Direct Physical Writes:		 2,422</li>
<li class="awr">Captured Segments account for	 0.0% of Total Table Scans:		  4</li>
<li class="awr">Captured Segments account for	25.3% of Total CR Blocks Received:	     2,812</li>
<li class="awr">Captured Segments account for	29.4% of Total Current Blocks Received: 	  6,369</li>
<li class="awr">Captured Segments account for	26.1% of Total CR Blocks Served:	   2,726</li>
<li class="awr">Captured Segments account for	27.8% of Total Current Blocks Served:		6,753</li>
<li class="awr">Captured Segments account for	40.3% of Total Global Cache Remote Grants:	 2,794,776</li>
<li class="awr">When ** MISSING ** occurs, some of the object attributes may not be available</li>
</ul>
<table border="0" class="tdiff" summary="Segment Statistics (Global). . % Total shows % of statistic for each segment compared to the global cluster-wide total (logical reads, physical reads, gc [cr/cu] blocks [recv/serv], gc remote grants). % Capture shows % of statistic for each segment compared to the total captured by AWR for all segments during the snapshot interval"><tr><th class="awrbg" scope="col">Statistic</th><th class="awrbg" scope="col">Owner</th><th class="awrbg" scope="col">Tablespace Name</th><th class="awrbg" scope="col">Object Name</th><th class="awrbg" scope="col">Subobject Name</th><th class="awrbg" scope="col">Obj. Type</th><th class="awrbg" scope="col">Obj#</th><th class="awrbg" scope="col">Dataobj#</th><th class="awrbg" scope="col">Value</th><th class="awrbg" scope="col">%Total</th><th class="awrbg" scope="col">%Capture</th></tr>
<tr><td class='awrc'>db block changes</td><td class='awrc'>USER57</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73591</td><td align="right" class='awrc'>73595</td><td align="right" class='awrc'>48,624</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>22.17</td></tr>
<tr><td class='awrnc'><div class="hidden">db block changes</div></td><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73347</td><td align="right" class='awrnc'>73354</td><td align="right" class='awrnc'>44,016</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>20.07</td></tr>
<tr><td class='awrc'><div class="hidden">db block changes</div></td><td class='awrc'>USER176</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74180</td><td align="right" class='awrc'>74205</td><td align="right" class='awrc'>42,528</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.39</td></tr>
<tr><td class='awrnc'><div class="hidden">db block changes</div></td><td class='awrnc'>USER73</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73675</td><td align="right" class='awrnc'>73684</td><td align="right" class='awrnc'>42,160</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>19.23</td></tr>
<tr><td class='awrc'><div class="hidden">db block changes</div></td><td class='awrc'>USER67</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73655</td><td align="right" class='awrc'>73664</td><td align="right" class='awrc'>41,968</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.14</td></tr>
<tr><td class='awrnc'>gc cr blocks received</td><td class='awrnc'>USER47</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73538</td><td align="right" class='awrnc'>73564</td><td align="right" class='awrnc'>149</td><td align="right" class='awrnc'>5.30</td><td align="right" class='awrnc'>33.48</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>USER1</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73299</td><td align="right" class='awrc'>73301</td><td align="right" class='awrc'>101</td><td align="right" class='awrc'>3.59</td><td align="right" class='awrc'>22.70</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>USER52</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73566</td><td align="right" class='awrnc'>73586</td><td align="right" class='awrnc'>87</td><td align="right" class='awrnc'>3.09</td><td align="right" class='awrnc'>19.55</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks received</div></td><td class='awrc'>USER15</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73383</td><td align="right" class='awrc'>73415</td><td align="right" class='awrc'>60</td><td align="right" class='awrc'>2.13</td><td align="right" class='awrc'>13.48</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks received</div></td><td class='awrnc'>USER78</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73698</td><td align="right" class='awrnc'>73719</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>1.71</td><td align="right" class='awrnc'>10.79</td></tr>
<tr><td class='awrc'>gc cr blocks served</td><td class='awrc'>USER47</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73538</td><td align="right" class='awrc'>73564</td><td align="right" class='awrc'>149</td><td align="right" class='awrc'>5.47</td><td align="right" class='awrc'>33.48</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>USER1</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73299</td><td align="right" class='awrnc'>73301</td><td align="right" class='awrnc'>101</td><td align="right" class='awrnc'>3.71</td><td align="right" class='awrnc'>22.70</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>USER52</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73566</td><td align="right" class='awrc'>73586</td><td align="right" class='awrc'>87</td><td align="right" class='awrc'>3.19</td><td align="right" class='awrc'>19.55</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cr blocks served</div></td><td class='awrnc'>USER15</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73383</td><td align="right" class='awrnc'>73415</td><td align="right" class='awrnc'>60</td><td align="right" class='awrnc'>2.20</td><td align="right" class='awrnc'>13.48</td></tr>
<tr><td class='awrc'><div class="hidden">gc cr blocks served</div></td><td class='awrc'>USER78</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73698</td><td align="right" class='awrc'>73719</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>1.76</td><td align="right" class='awrc'>10.79</td></tr>
<tr><td class='awrnc'>gc cu blocks received</td><td class='awrnc'>USER48</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73545</td><td align="right" class='awrnc'>73552</td><td align="right" class='awrnc'>375</td><td align="right" class='awrnc'>5.89</td><td align="right" class='awrnc'>30.81</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks received</div></td><td class='awrc'>USER46</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73532</td><td align="right" class='awrc'>73540</td><td align="right" class='awrc'>299</td><td align="right" class='awrc'>4.69</td><td align="right" class='awrc'>24.57</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks received</div></td><td class='awrnc'>USER15</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73383</td><td align="right" class='awrnc'>73415</td><td align="right" class='awrnc'>251</td><td align="right" class='awrnc'>3.94</td><td align="right" class='awrnc'>20.62</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks received</div></td><td class='awrc'>USER43</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73522</td><td align="right" class='awrc'>73543</td><td align="right" class='awrc'>147</td><td align="right" class='awrc'>2.31</td><td align="right" class='awrc'>12.08</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks received</div></td><td class='awrnc'>USER64</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73630</td><td align="right" class='awrnc'>73635</td><td align="right" class='awrnc'>145</td><td align="right" class='awrnc'>2.28</td><td align="right" class='awrnc'>11.91</td></tr>
<tr><td class='awrc'>gc cu blocks served</td><td class='awrc'>USER48</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73545</td><td align="right" class='awrc'>73552</td><td align="right" class='awrc'>375</td><td align="right" class='awrc'>5.55</td><td align="right" class='awrc'>30.81</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks served</div></td><td class='awrnc'>USER46</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73532</td><td align="right" class='awrnc'>73540</td><td align="right" class='awrnc'>299</td><td align="right" class='awrnc'>4.43</td><td align="right" class='awrnc'>24.57</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks served</div></td><td class='awrc'>USER15</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73383</td><td align="right" class='awrc'>73415</td><td align="right" class='awrc'>251</td><td align="right" class='awrc'>3.72</td><td align="right" class='awrc'>20.62</td></tr>
<tr><td class='awrnc'><div class="hidden">gc cu blocks served</div></td><td class='awrnc'>USER43</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73522</td><td align="right" class='awrnc'>73543</td><td align="right" class='awrnc'>147</td><td align="right" class='awrnc'>2.18</td><td align="right" class='awrnc'>12.08</td></tr>
<tr><td class='awrc'><div class="hidden">gc cu blocks served</div></td><td class='awrc'>USER64</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73630</td><td align="right" class='awrc'>73635</td><td align="right" class='awrc'>145</td><td align="right" class='awrc'>2.15</td><td align="right" class='awrc'>11.91</td></tr>
<tr><td class='awrnc'>gc remote grants</td><td class='awrnc'>USER124</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73925</td><td align="right" class='awrnc'>73943</td><td align="right" class='awrnc'>21,120</td><td align="right" class='awrnc'>0.76</td><td align="right" class='awrnc'>20.84</td></tr>
<tr><td class='awrc'><div class="hidden">gc remote grants</div></td><td class='awrc'>USER146</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74037</td><td align="right" class='awrc'>74043</td><td align="right" class='awrc'>20,206</td><td align="right" class='awrc'>0.72</td><td align="right" class='awrc'>19.94</td></tr>
<tr><td class='awrnc'><div class="hidden">gc remote grants</div></td><td class='awrnc'>USER96</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73789</td><td align="right" class='awrnc'>73800</td><td align="right" class='awrnc'>20,131</td><td align="right" class='awrnc'>0.72</td><td align="right" class='awrnc'>19.86</td></tr>
<tr><td class='awrc'><div class="hidden">gc remote grants</div></td><td class='awrc'>USER121</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73911</td><td align="right" class='awrc'>73936</td><td align="right" class='awrc'>19,988</td><td align="right" class='awrc'>0.72</td><td align="right" class='awrc'>19.72</td></tr>
<tr><td class='awrnc'><div class="hidden">gc remote grants</div></td><td class='awrnc'>USER143</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>74010</td><td align="right" class='awrnc'>74046</td><td align="right" class='awrnc'>19,897</td><td align="right" class='awrnc'>0.71</td><td align="right" class='awrnc'>19.63</td></tr>
<tr><td class='awrc'>logical reads</td><td class='awrc'>USER57</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73591</td><td align="right" class='awrc'>73595</td><td align="right" class='awrc'>481,040</td><td align="right" class='awrc'>1.20</td><td align="right" class='awrc'>21.99</td></tr>
<tr><td class='awrnc'><div class="hidden">logical reads</div></td><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73347</td><td align="right" class='awrnc'>73354</td><td align="right" class='awrnc'>440,080</td><td align="right" class='awrnc'>1.10</td><td align="right" class='awrnc'>20.12</td></tr>
<tr><td class='awrc'><div class="hidden">logical reads</div></td><td class='awrc'>USER176</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74180</td><td align="right" class='awrc'>74205</td><td align="right" class='awrc'>424,832</td><td align="right" class='awrc'>1.06</td><td align="right" class='awrc'>19.42</td></tr>
<tr><td class='awrnc'><div class="hidden">logical reads</div></td><td class='awrnc'>USER73</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73675</td><td align="right" class='awrnc'>73684</td><td align="right" class='awrnc'>421,472</td><td align="right" class='awrnc'>1.05</td><td align="right" class='awrnc'>19.27</td></tr>
<tr><td class='awrc'><div class="hidden">logical reads</div></td><td class='awrc'>USER67</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73655</td><td align="right" class='awrc'>73664</td><td align="right" class='awrc'>419,840</td><td align="right" class='awrc'>1.05</td><td align="right" class='awrc'>19.19</td></tr>
<tr><td class='awrnc'>physical reads</td><td class='awrnc'>USER57</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73591</td><td align="right" class='awrnc'>73595</td><td align="right" class='awrnc'>376,418</td><td align="right" class='awrnc'>1.71</td><td align="right" class='awrnc'>20.46</td></tr>
<tr><td class='awrc'><div class="hidden">physical reads</div></td><td class='awrc'>USER7</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73347</td><td align="right" class='awrc'>73354</td><td align="right" class='awrc'>371,434</td><td align="right" class='awrc'>1.69</td><td align="right" class='awrc'>20.19</td></tr>
<tr><td class='awrnc'><div class="hidden">physical reads</div></td><td class='awrnc'>USER176</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>74180</td><td align="right" class='awrnc'>74205</td><td align="right" class='awrnc'>369,365</td><td align="right" class='awrnc'>1.68</td><td align="right" class='awrnc'>20.07</td></tr>
<tr><td class='awrc'><div class="hidden">physical reads</div></td><td class='awrc'>USER186</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74233</td><td align="right" class='awrc'>74268</td><td align="right" class='awrc'>364,196</td><td align="right" class='awrc'>1.65</td><td align="right" class='awrc'>19.79</td></tr>
<tr><td class='awrnc'><div class="hidden">physical reads</div></td><td class='awrnc'>USER67</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73655</td><td align="right" class='awrnc'>73664</td><td align="right" class='awrnc'>358,550</td><td align="right" class='awrnc'>1.63</td><td align="right" class='awrnc'>19.49</td></tr>
<tr><td class='awrc'>physical read requests</td><td class='awrc'>USER57</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73591</td><td align="right" class='awrc'>73595</td><td align="right" class='awrc'>376,418</td><td align="right" class='awrc'>1.71</td><td align="right" class='awrc'>20.46</td></tr>
<tr><td class='awrnc'><div class="hidden">physical read requests</div></td><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73347</td><td align="right" class='awrnc'>73354</td><td align="right" class='awrnc'>371,434</td><td align="right" class='awrnc'>1.69</td><td align="right" class='awrnc'>20.19</td></tr>
<tr><td class='awrc'><div class="hidden">physical read requests</div></td><td class='awrc'>USER176</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74180</td><td align="right" class='awrc'>74205</td><td align="right" class='awrc'>369,365</td><td align="right" class='awrc'>1.68</td><td align="right" class='awrc'>20.07</td></tr>
<tr><td class='awrnc'><div class="hidden">physical read requests</div></td><td class='awrnc'>USER186</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>74233</td><td align="right" class='awrnc'>74268</td><td align="right" class='awrnc'>364,196</td><td align="right" class='awrnc'>1.65</td><td align="right" class='awrnc'>19.79</td></tr>
<tr><td class='awrc'><div class="hidden">physical read requests</div></td><td class='awrc'>USER67</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73655</td><td align="right" class='awrc'>73664</td><td align="right" class='awrc'>358,550</td><td align="right" class='awrc'>1.63</td><td align="right" class='awrc'>19.49</td></tr>
<tr><td class='awrnc'>physical writes</td><td class='awrnc'>USER57</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73591</td><td align="right" class='awrnc'>73595</td><td align="right" class='awrnc'>44,256</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>21.44</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes</div></td><td class='awrc'>USER7</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73347</td><td align="right" class='awrc'>73354</td><td align="right" class='awrc'>41,729</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>20.21</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes</div></td><td class='awrnc'>USER176</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>74180</td><td align="right" class='awrnc'>74205</td><td align="right" class='awrnc'>40,657</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>19.70</td></tr>
<tr><td class='awrc'><div class="hidden">physical writes</div></td><td class='awrc'>USER186</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74233</td><td align="right" class='awrc'>74268</td><td align="right" class='awrc'>39,895</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>19.33</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes</div></td><td class='awrnc'>USER67</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73655</td><td align="right" class='awrnc'>73664</td><td align="right" class='awrnc'>39,892</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>19.32</td></tr>
<tr><td class='awrc'>physical writes direct</td><td class='awrc'>SYS</td><td class='awrc'>SYSAUX</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY</td><td class='awrc'>WRH$_ACTIVE_SESSION_HISTORY_1451622190_0</td><td class='awrc'>TABLE PARTITION</td><td align="right" class='awrc'>73031</td><td align="right" class='awrc'>73031</td><td align="right" class='awrc'>397</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>92.54</td></tr>
<tr><td class='awrnc'><div class="hidden">physical writes direct</div></td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>SYS_LOB0000007451C00009$$</td><td class='awrnc'>SYS_LOB_P223</td><td class='awrnc'>LOB PARTITION</td><td align="right" class='awrnc'>78502</td><td align="right" class='awrnc'>78502</td><td align="right" class='awrnc'>32</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>7.46</td></tr>
<tr><td class='awrc'>physical write requests</td><td class='awrc'>USER57</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73591</td><td align="right" class='awrc'>73595</td><td align="right" class='awrc'>39,907</td><td align="right" class='awrc'>1.72</td><td align="right" class='awrc'>20.56</td></tr>
<tr><td class='awrnc'><div class="hidden">physical write requests</div></td><td class='awrnc'>USER7</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>73347</td><td align="right" class='awrnc'>73354</td><td align="right" class='awrnc'>39,332</td><td align="right" class='awrnc'>1.70</td><td align="right" class='awrnc'>20.27</td></tr>
<tr><td class='awrc'><div class="hidden">physical write requests</div></td><td class='awrc'>USER176</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>74180</td><td align="right" class='awrc'>74205</td><td align="right" class='awrc'>38,836</td><td align="right" class='awrc'>1.68</td><td align="right" class='awrc'>20.01</td></tr>
<tr><td class='awrnc'><div class="hidden">physical write requests</div></td><td class='awrnc'>USER186</td><td class='awrnc'>IOPS</td><td class='awrnc'>CF1</td><td class='awrnc'>&#160;</td><td class='awrnc'>TABLE</td><td align="right" class='awrnc'>74233</td><td align="right" class='awrnc'>74268</td><td align="right" class='awrnc'>38,290</td><td align="right" class='awrnc'>1.65</td><td align="right" class='awrnc'>19.73</td></tr>
<tr><td class='awrc'><div class="hidden">physical write requests</div></td><td class='awrc'>USER67</td><td class='awrc'>IOPS</td><td class='awrc'>CF1</td><td class='awrc'>&#160;</td><td class='awrc'>TABLE</td><td align="right" class='awrc'>73655</td><td align="right" class='awrc'>73664</td><td align="right" class='awrc'>37,700</td><td align="right" class='awrc'>1.63</td><td align="right" class='awrc'>19.43</td></tr>
<tr><td class='awrnc'>row lock waits</td><td class='awrnc'>SYS</td><td class='awrnc'>SYSAUX</td><td class='awrnc'>WRM$_SNAPSHOT_DETAILS_INDEX</td><td class='awrnc'>&#160;</td><td class='awrnc'>INDEX</td><td align="right" class='awrnc'>11582</td><td align="right" class='awrnc'>11582</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>100.00</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#630">Back to I/O Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="12083"></a>
<h3 class="awr">Library Cache Activity</h3>
<ul>
<li class="awr"> Summarized for all instances in the report </li>
<li class="awr"> &quot;Pct Misses&quot;  should be very low  </li>
</ul>
<table border="0" class="tdiff" summary="Library Cache Activity. . Summarized for all instances in the report. &quot;Pct Misses&quot; should be very low "><tr><th class="awrbg" scope="col">Namespace</th><th class="awrbg" scope="col">Get Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Pin Requests</th><th class="awrbg" scope="col">Pct Miss</th><th class="awrbg" scope="col">Reloads</th><th class="awrbg" scope="col">Invali- dations</th><th class="awrbg" scope="col">GES Lock Requests</th><th class="awrbg" scope="col">GES Pin Requests</th><th class="awrbg" scope="col">GES Pin Releases</th><th class="awrbg" scope="col">GES Inval Requests</th><th class="awrbg" scope="col">GES Invali- dations</th></tr>
<tr><td scope="row" class='awrc'>ACCOUNT_STATUS</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>25.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>AUDIT POLICY</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>BODY</td><td align="right" class='awrc'>597</td><td align="right" class='awrc'>1.34</td><td align="right" class='awrc'>1,725</td><td align="right" class='awrc'>4.93</td><td align="right" class='awrc'>30</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>423</td><td align="right" class='awrc'>1,633</td><td align="right" class='awrc'>1,633</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>CLUSTER</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>2.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>100</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>DBLINK</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>25.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>4</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>EDITION</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>33.33</td><td align="right" class='awrnc'>6</td><td align="right" class='awrnc'>33.33</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>INDEX</td><td align="right" class='awrc'>198</td><td align="right" class='awrc'>13.64</td><td align="right" class='awrc'>198</td><td align="right" class='awrc'>13.64</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>198</td><td align="right" class='awrc'>198</td><td align="right" class='awrc'>198</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>OBJECT ID</td><td align="right" class='awrnc'>60</td><td align="right" class='awrnc'>100.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>QUEUE</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SCHEMA</td><td align="right" class='awrnc'>1,659</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>61</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA</td><td align="right" class='awrc'>5,129</td><td align="right" class='awrc'>40.96</td><td align="right" class='awrc'>7,715,848</td><td align="right" class='awrc'>-0.10</td><td align="right" class='awrc'>108</td><td align="right" class='awrc'>63</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>SQL AREA BUILD</td><td align="right" class='awrnc'>1,000</td><td align="right" class='awrnc'>83.50</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>SQL AREA STATS</td><td align="right" class='awrc'>950</td><td align="right" class='awrc'>99.79</td><td align="right" class='awrc'>950</td><td align="right" class='awrc'>99.79</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TABLE/PROCEDURE</td><td align="right" class='awrnc'>6,090</td><td align="right" class='awrnc'>16.52</td><td align="right" class='awrnc'>26,708</td><td align="right" class='awrnc'>8.90</td><td align="right" class='awrnc'>249</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>9,677</td><td align="right" class='awrnc'>18,908</td><td align="right" class='awrnc'>18,908</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
<tr><td scope="row" class='awrc'>TRANSFORMATION</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>36</td><td align="right" class='awrc'>0</td><td align="right" class='awrc'>0</td></tr>
<tr><td scope="row" class='awrnc'>TRIGGER</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>40.00</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>40.00</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>10</td><td align="right" class='awrnc'>0</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="633"></a>
<h2 class="awr">
Memory Statistics
</h2>
<ul>
<li class="awr"><a class="awr" href="#12074">PGA Aggregate Target Statistics</a></li>
<li class="awr"><a class="awr" href="#12075">Process Memory Summary</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12074"></a>
<h3 class="awr">PGA Aggregate Target Statistics</h3>
<ul>
<li class="awr"> all stats are reported in MegaBytes</li>
</ul>
<table border="0" class="tdiff" summary="PGA Aggregate Target Statistics. . all stats are reported in MegaBytes"><tr>
<td>&#160;</td><th class="awrbg" colspan=" 2" id="PGAAggrTarget">PGA Aggr Target</th>
<th class="awrbg" colspan=" 2" id="AutoPGATarget">Auto PGA Target</th>
<th class="awrbg" colspan=" 2" id="PGAMemAlloc">PGA Mem Alloc</th>
<th class="awrbg" colspan=" 2" id="AutoWorkareas">Auto Workareas</th>
<th class="awrbg" colspan=" 2" id="ManualWorkarea">Manual Workarea</th>
<th class="awrbg" colspan=" 2" id="GlobalMemBound">Global Mem Bound</th>
</tr><tr>
<th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th><th class="awrbg" scope="col" id="Begin">Begin</th><th class="awrbg" scope="col" id="End">End</th></tr>
<tr><td align="right" scope="row" class='awrc'>1</td><td align="right" headers="PGAAggrTarget Begin" class='awrclb'>4,174.00</td><td align="right" headers="PGAAggrTarget End" class='awrc'>4,174.00</td><td align="right" headers="AutoPGATarget Begin" class='awrclb'>1,280.97</td><td align="right" headers="AutoPGATarget End" class='awrc'>1,955.65</td><td align="right" headers="PGAMemAlloc Begin" class='awrclb'>3,325.60</td><td align="right" headers="PGAMemAlloc End" class='awrc'>2,300.50</td><td align="right" headers="AutoWorkareas Begin" class='awrclb'>0.00</td><td align="right" headers="AutoWorkareas End" class='awrc'>0.00</td><td align="right" headers="ManualWorkarea Begin" class='awrclb'>0.00</td><td align="right" headers="ManualWorkarea End" class='awrc'>0.00</td><td align="right" headers="GlobalMemBound Begin" class='awrclb'>417.39</td><td align="right" headers="GlobalMemBound End" class='awrcrb'>417.39</td></tr>
<tr><td align="right" scope="row" class='awrnc'>2</td><td align="right" headers="PGAAggrTarget Begin" class='awrnclb'>4,174.00</td><td align="right" headers="PGAAggrTarget End" class='awrnc'>4,174.00</td><td align="right" headers="AutoPGATarget Begin" class='awrnclb'>1,611.28</td><td align="right" headers="AutoPGATarget End" class='awrnc'>2,180.29</td><td align="right" headers="PGAMemAlloc Begin" class='awrnclb'>2,939.54</td><td align="right" headers="PGAMemAlloc End" class='awrnc'>2,147.07</td><td align="right" headers="AutoWorkareas Begin" class='awrnclb'>0.00</td><td align="right" headers="AutoWorkareas End" class='awrnc'>0.00</td><td align="right" headers="ManualWorkarea Begin" class='awrnclb'>0.00</td><td align="right" headers="ManualWorkarea End" class='awrnc'>0.00</td><td align="right" headers="GlobalMemBound Begin" class='awrnclb'>417.39</td><td align="right" headers="GlobalMemBound End" class='awrncrb'>417.39</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#633">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12075"></a>
<h3 class="awr">Process Memory Summary</h3>
<ul>
<li class="awr"> B: Begin Snap	 E: End Snap I#: Instance number  </li>
<li class="awr"> Max Alloc is Maximum PGA allocation size at snapshot time </li>
<li class="awr"> Hist Max Alloc is the Historical Max Allocation for still-connected processes </li>
<li class="awr"> ordered by instance, Begin/End snapshot, Alloc (MB) </li>
</ul>
<table border="0" class="tdiff" summary="Process Memory Summary. . B: Begin Snap E: End Snap I#: Instance number . Max Alloc is Maximum PGA allocation size at snapshot time. Hist Max Alloc is the Historical Max Allocation for still-connected processes. ordered by instance, Begin/End snapshot, Alloc (MB) "><tr><th class="awrbg" scope="col">I#</th><th class="awrnobg" scope="col"></th><th class="awrbg" scope="col">Category</th><th class="awrbg" scope="col">Alloc (MB)</th><th class="awrbg" scope="col">Used (MB)</th><th class="awrbg" scope="col">Avg Alloc (MB)</th><th class="awrbg" scope="col">Std Dev Alloc (MB)</th><th class="awrbg" scope="col">Max Alloc (MB)</th><th class="awrbg" scope="col">Hist Max Alloc (MB)</th><th class="awrbg" scope="col">Num Proc</th><th class="awrbg" scope="col">Num Alloc</th></tr>
<tr><td align="right" class='awrc'>1</td><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>340.75</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.42</td><td align="right" class='awrc'>5.59</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>141</td><td align="right" class='awrc'>141</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>1831.42</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4.46</td><td align="right" class='awrnc'>5.71</td><td align="right" class='awrnc'>50</td><td align="right" class='awrnc'>52</td><td align="right" class='awrnc'>411</td><td align="right" class='awrnc'>411</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>77.26</td><td align="right" class='awrc'>74.85</td><td align="right" class='awrc'>0.27</td><td align="right" class='awrc'>0.33</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>283</td><td align="right" class='awrc'>281</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>53.50</td><td align="right" class='awrnc'>36.48</td><td align="right" class='awrnc'>0.25</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>11</td><td align="right" class='awrnc'>212</td><td align="right" class='awrnc'>182</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>2302.94</td><td align="right" class='awrc'>111.33</td><td align="right" class='awrc'>7.40</td><td align="right" class='awrc'>12.02</td><td align="right" class='awrc'>97</td><td align="right" class='awrc'>65</td><td align="right" class='awrc'>1047</td><td align="right" class='awrc'>1015</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>137.81</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>3.45</td><td align="right" class='awrnc'>6.33</td><td align="right" class='awrnc'>28</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>40</td><td align="right" class='awrnc'>40</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>1115.34</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4.10</td><td align="right" class='awrc'>7.11</td><td align="right" class='awrc'>47</td><td align="right" class='awrc'>48</td><td align="right" class='awrc'>272</td><td align="right" class='awrc'>272</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>12.36</td><td align="right" class='awrnc'>10.93</td><td align="right" class='awrnc'>0.09</td><td align="right" class='awrnc'>0.38</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>144</td><td align="right" class='awrnc'>142</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">1</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>11.08</td><td align="right" class='awrc'>9.11</td><td align="right" class='awrc'>0.15</td><td align="right" class='awrc'>0.83</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>75</td><td align="right" class='awrc'>51</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">1</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>1276.59</td><td align="right" class='awrnc'>20.05</td><td align="right" class='awrnc'>7.78</td><td align="right" class='awrnc'>14.66</td><td align="right" class='awrnc'>84</td><td align="right" class='awrnc'>69</td><td align="right" class='awrnc'>531</td><td align="right" class='awrnc'>505</td></tr>
<tr><td align="right" class='awrc'>2</td><td class='awrc'>B</td><td class='awrc'>Freeable</td><td align="right" class='awrc'>349.50</td><td align="right" class='awrc'>0.00</td><td align="right" class='awrc'>2.31</td><td align="right" class='awrc'>6.89</td><td align="right" class='awrc'>44</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>151</td><td align="right" class='awrc'>151</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>Other</td><td align="right" class='awrnc'>1715.52</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>4.41</td><td align="right" class='awrnc'>6.75</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>92</td><td align="right" class='awrnc'>389</td><td align="right" class='awrnc'>389</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>PL/SQL</td><td align="right" class='awrc'>63.59</td><td align="right" class='awrc'>61.42</td><td align="right" class='awrc'>0.24</td><td align="right" class='awrc'>0.29</td><td align="right" class='awrc'>2</td><td align="right" class='awrc'>3</td><td align="right" class='awrc'>261</td><td align="right" class='awrc'>259</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">B</div></td><td class='awrnc'>SQL</td><td align="right" class='awrnc'>43.09</td><td align="right" class='awrnc'>28.25</td><td align="right" class='awrnc'>0.23</td><td align="right" class='awrnc'>0.36</td><td align="right" class='awrnc'>1</td><td align="right" class='awrnc'>18</td><td align="right" class='awrnc'>191</td><td align="right" class='awrnc'>153</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">B</div></td><td class='awrc'>Total</td><td align="right" class='awrc'>2171.69</td><td align="right" class='awrc'>89.67</td><td align="right" class='awrc'>7.19</td><td align="right" class='awrc'>14.28</td><td align="right" class='awrc'>139</td><td align="right" class='awrc'>113</td><td align="right" class='awrc'>992</td><td align="right" class='awrc'>952</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'>E</td><td class='awrnc'>Freeable</td><td align="right" class='awrnc'>245.81</td><td align="right" class='awrnc'>0.00</td><td align="right" class='awrnc'>5.12</td><td align="right" class='awrnc'>10.09</td><td align="right" class='awrnc'>44</td><td align="right" class='awrnc'>&#160;</td><td align="right" class='awrnc'>48</td><td align="right" class='awrnc'>48</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>Other</td><td align="right" class='awrc'>1114.26</td><td align="right" class='awrc'>&#160;</td><td align="right" class='awrc'>4.13</td><td align="right" class='awrc'>8.31</td><td align="right" class='awrc'>96</td><td align="right" class='awrc'>96</td><td align="right" class='awrc'>270</td><td align="right" class='awrc'>270</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>PL/SQL</td><td align="right" class='awrnc'>7.92</td><td align="right" class='awrnc'>6.50</td><td align="right" class='awrnc'>0.06</td><td align="right" class='awrnc'>0.27</td><td align="right" class='awrnc'>2</td><td align="right" class='awrnc'>3</td><td align="right" class='awrnc'>142</td><td align="right" class='awrnc'>140</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">2</div></td><td class='awrc'><div class="hidden">E</div></td><td class='awrc'>SQL</td><td align="right" class='awrc'>11.18</td><td align="right" class='awrc'>8.94</td><td align="right" class='awrc'>0.16</td><td align="right" class='awrc'>0.82</td><td align="right" class='awrc'>7</td><td align="right" class='awrc'>18</td><td align="right" class='awrc'>72</td><td align="right" class='awrc'>39</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">2</div></td><td class='awrnc'><div class="hidden">E</div></td><td class='awrnc'>Total</td><td align="right" class='awrnc'>1379.17</td><td align="right" class='awrnc'>15.44</td><td align="right" class='awrnc'>9.46</td><td align="right" class='awrnc'>19.47</td><td align="right" class='awrnc'>148</td><td align="right" class='awrnc'>117</td><td align="right" class='awrnc'>532</td><td align="right" class='awrnc'>497</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#633">Back to Memory Statistics</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="638"></a>
<h2 class="awr">
Supplemental Information
</h2>
<ul>
<li class="awr"><a class="awr" href="#12080">init.ora Parameters</a></li>
<li class="awr"><a class="awr" href="#12084">init.ora Multi-valued Parameters</a></li>
<li class="awr"><a class="awr" href="#99997">Complete List of SQL Text</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12080"></a>
<h3 class="awr">init.ora Parameters</h3>
<ul>
<li class="awr"> '*' indicates same value across all instances</li>
</ul>
<table border="0" class="tdiff" summary="This table displays values for init.ora parameters"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td scope="row" class='awrc'>_ipddb_enable</td><td class='awrc'>*</td><td class='awrc'>TRUE</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>audit_file_dest</td><td class='awrnc'>*</td><td class='awrnc'>/u01/app/oracle/admin/p30sdb/adump</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>audit_trail</td><td class='awrc'>*</td><td class='awrc'>DB</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>cluster_database</td><td class='awrnc'>*</td><td class='awrnc'>TRUE</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>compatible</td><td class='awrc'>*</td><td class='awrc'>19.0.0</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>control_files</td><td class='awrnc'>*</td><td class='awrnc'>+P30S/P30SDB/CONTROLFILE/current.261.1032513199,	+FRA/P30SDB/CONTROLFILE/current.256.1032513199</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_block_size</td><td class='awrc'>*</td><td class='awrc'>8192</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_create_file_dest</td><td class='awrnc'>*</td><td class='awrnc'>+P30S</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_domain</td><td class='awrc'>*</td><td class='awrc'>example.com</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_name</td><td class='awrnc'>*</td><td class='awrnc'>p30sdb</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>db_recovery_file_dest</td><td class='awrc'>*</td><td class='awrc'>+FRA</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>db_recovery_file_dest_size</td><td class='awrnc'>*</td><td class='awrnc'>805306368000</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>diagnostic_dest</td><td class='awrc'>*</td><td class='awrc'>/u01/app/oracle</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>dispatchers</td><td class='awrnc'>*</td><td class='awrnc'>(PROTOCOL=TCP) (SERVICE=p30sdbXDB)</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>instance_number</td><td class='awrc'>1</td><td class='awrc'>1</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">instance_number</div></td><td class='awrnc'>2</td><td class='awrnc'>2</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>listener_networks</td><td class='awrc'>*</td><td class='awrc'></td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>local_listener</td><td class='awrnc'>1</td><td class='awrnc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.11)(PORT=1522))</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'><div class="hidden">local_listener</div></td><td class='awrc'>2</td><td class='awrc'>(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.1.12)(PORT=1522))</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>nls_language</td><td class='awrnc'>*</td><td class='awrnc'>AMERICAN</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>nls_territory</td><td class='awrc'>*</td><td class='awrc'>AMERICA</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>open_cursors</td><td class='awrnc'>*</td><td class='awrnc'>300</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>pga_aggregate_target</td><td class='awrc'>*</td><td class='awrc'>4376756224</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>processes</td><td class='awrnc'>*</td><td class='awrnc'>5120</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>remote_listener</td><td class='awrc'>*</td><td class='awrc'>mcracpoc-scan.example.com:1521</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>remote_login_passwordfile</td><td class='awrnc'>*</td><td class='awrnc'>EXCLUSIVE</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>sga_max_size</td><td class='awrc'>*</td><td class='awrc'>21474836480</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'>sga_target</td><td class='awrnc'>*</td><td class='awrnc'>3221225472</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>thread</td><td class='awrc'>1</td><td class='awrc'>1</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">thread</div></td><td class='awrnc'>2</td><td class='awrnc'>2</td><td class='awrnc'></td></tr>
<tr><td scope="row" class='awrc'>undo_tablespace</td><td class='awrc'>1</td><td class='awrc'>UNDOTBS1</td><td class='awrc'></td></tr>
<tr><td scope="row" class='awrnc'><div class="hidden">undo_tablespace</div></td><td class='awrnc'>2</td><td class='awrnc'>UNDOTBS2</td><td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="12084"></a>
<h3 class="awr">init.ora Multi-valued Parameters</h3>
<ul>
<li class="awr"> This section only displays parameters that have more one value </li>
<li class="awr"> '*' indicates same value across all instances </li>
<li class="awr"> '(NULL)' indicates that the  parameter value was not set </li>
<li class="awr"> A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot</li>
</ul>
<table border="0" class="tdiff" summary="init.ora Multi-valued Parameters. . This section only displays parameters that have more one value. '*' indicates same value across all instances. '(NULL)' indicates that the parameter value was not set. A blank value in the End Snapshot indicates the value is the same as the Begin Snapshot"><tr><th class="awrbg" scope="col">Parameter Name</th><th class="awrbg" scope="col">I#</th><th class="awrbg" scope="col">Begin value</th><th class="awrbg" scope="col">End value (if different)</th></tr>
<tr><td class='awrc'>control_files</td><td class='awrc'>*</td><td class='awrc'>+FRA/P30SDB/CONTROLFILE/current.256.1032513199</td><td class='awrc'></td></tr>
<tr><td class='awrnc'><div class="hidden">control_files</div></td><td class='awrnc'>*</td><td class='awrnc'>+P30S/P30SDB/CONTROLFILE/current.261.1032513199</td><td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="99997"></a>
<p />
<h3 class="awr">Complete List of SQL Text</h3><p />
<table border="0" class="tdiff" summary="This table displays the text of the SQL statements which have been
      referred to in the report">
<tr><th class="awrbg" scope="col">SQL Id</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="04kug40zbu4dm"></a>04kug40zbu4dm</td><td class='awrc'><pre_sqltext class="awr">select policy#,  action# from aud_object_opt$ where object# = :1 and type = 2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="088xwjaryshvr"></a>088xwjaryshvr</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '77';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="0gx3b09qrx9f5"></a>0gx3b09qrx9f5</td><td class='awrc'><pre_sqltext class="awr">select obj#, index# from oid$ where user#=:1 and oid$=:2</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="1b74aw70y48yn"></a>1b74aw70y48yn</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '67';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="1z43m6frrngsy"></a>1z43m6frrngsy</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '103';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="24djtk7r8fz33"></a>24djtk7r8fz33</td><td class='awrnc'><pre_sqltext class="awr">update svcobj_access$ set accesses = :5,  inc_no = :6 where name = :1 AND pdb = :2 AND tsn = :3 AND objid = :4</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="2sff4nbj564pf"></a>2sff4nbj564pf</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '177';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="35dumc2tpr9dv"></a>35dumc2tpr9dv</td><td class='awrnc'><pre_sqltext class="awr">UPDATE CF1 SET C2 = :B3 ,  C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 )) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="37j3jp5dz0b0t"></a>37j3jp5dz0b0t</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '145';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="38r80y2wpq2ma"></a>38r80y2wpq2ma</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '46';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="3m5q54b1a187h"></a>3m5q54b1a187h</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '83';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="4zttz5yb0wfmw"></a>4zttz5yb0wfmw</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '170';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="5arf1acfkxs97"></a>5arf1acfkxs97</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '11';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="5zuc26whzgn7r"></a>5zuc26whzgn7r</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '150';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="6pqjm0dp8bnky"></a>6pqjm0dp8bnky</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '149';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="71f07h4b84yt2"></a>71f07h4b84yt2</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '73';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="7drkmz76wk052"></a>7drkmz76wk052</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '45';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="7kcm0mhxqy5q8"></a>7kcm0mhxqy5q8</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '57';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="7w4ajz9mh4684"></a>7w4ajz9mh4684</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '48';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="87gaftwrm2h68"></a>87gaftwrm2h68</td><td class='awrnc'><pre_sqltext class="awr">select o.owner#, o.name, o.namespace, o.remoteowner, o.linkname, o.subname from obj$ o where o.obj#=:1</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="8fg5cq0nbygpt"></a>8fg5cq0nbygpt</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '80';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9babjv8yq8ru3"></a>9babjv8yq8ru3</td><td class='awrnc'><pre_sqltext class="awr">BEGIN DBMS_OUTPUT.GET_LINES(:LINES,  :NUMLINES); END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9ssvtqp2k6160"></a>9ssvtqp2k6160</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '82';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="9udhpyj6s7uqj"></a>9udhpyj6s7uqj</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '86';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home
_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := D
BMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHE
MA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

----------------------------------------------------------------------------------------------------------
------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
 := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

    	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ra
ndom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed
. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
 is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="9v83s8vqfv1d6"></a>9v83s8vqfv1d6</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '7';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PLS
_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_sc
hema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBMS
_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
= user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-------------------------------------------------------------------------------------------------------------
---------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :=
 TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

 	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rando
m_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed. F
inish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this is
 a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="acmvv4fhdc9zh"></a>acmvv4fhdc9zh</td><td class='awrnc'><pre_sqltext class="awr">select obj#, type#, ctime, mtime, stime,  status,  dataobj#,  flags,  oid$,  spare1,  spare2,  spare3,  signature,  spare7,  spare8,  spare9,  nvl(dflcollid,  16382),  creappid,  creverid,  modappid,	modverid,  crepatchid,	modpatchid from obj$ where owner#=:1 and name=:2 and namespace=:3 and remoteowner is null and linkname is null and subname is null</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="anaswt0rrkktj"></a>anaswt0rrkktj</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '104';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="bhdvtsvjhgvrh"></a>bhdvtsvjhgvrh</td><td class='awrnc'><pre_sqltext class="awr">SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND (CUSTID &lt; :B1 )</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="czhh6tvvf96yz"></a>czhh6tvvf96yz</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '43';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="ddk08qkf81zw2"></a>ddk08qkf81zw2</td><td class='awrnc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '176';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt
 PLS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_hom
e_schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time :=
DBMS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCH
EMA = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

---------------------------------------------------------------------------------------------------------
-------------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_updat
e := TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

     	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_r
andom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been execute
d. Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If thi
s is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="ds7scgmy0unq5"></a>ds7scgmy0unq5</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '171';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="f80h0xb1qvbsk"></a>f80h0xb1qvbsk</td><td class='awrnc'><pre_sqltext class="awr">SELECT sys.wri$_adv_seq_msggroup.nextval FROM dual</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="fcfyvfu5jmtsj"></a>fcfyvfu5jmtsj</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '186';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt P
LS_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_
schema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DB
MS_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEM
A = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

-----------------------------------------------------------------------------------------------------------
-----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update
:= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

   	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_ran
dom_block - v_work_unit ) ) AND  (custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
 Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this
is a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
<tr><td scope="row" class='awrnc'><a class="awr" name="fn5s5p6hr6702"></a>fn5s5p6hr6702</td><td class='awrnc'><pre_sqltext class="awr">INSERT INTO wri$_adv_message_groups (task_id, id, seq, message#, fac, hdr, lm, nl, p1, p2, p3, p4, p5) VALUES (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13)</pre_sqltext></td></tr>
<tr><td scope="row" class='awrc'><a class="awr" name="g86sg3wychh60"></a>g86sg3wychh60</td><td class='awrc'><pre_sqltext class="awr">DECLARE
v_default_schema_number PLS_INTEGER := '54';
v_update_pct PLS_INTEGER := '10';
v_max_loop_iterations PLS_INTEGER := '0';
v_seconds_to_run PLS_INTEGER := '300';
v_scale PLS_INTEGER := '32768';
v_work_unit PLS_INTEGER := '4' ;
v_redo_stress  VARCHAR2(12) := 'LITE';
v_hot_schema_modulus PLS_INTEGER := '0';
v_do_hotspot   VARCHAR(7) := 'FALSE';
v_hotspot_mb  NUMBER := '10';
v_hotspot_offset_mb NUMBER := '0';
v_hotspot_modulus  PLS_INTEGER := '0';

v_sleep_modulus PLS_INTEGER := '0';
v_sleep_min NUMBER := '.1';
v_sleep_max NUMBER := '.5';
v_scan_query_pct PLS_INTEGER := '0';
v_obfuscate VARCHAR(5)	:= 'FALSE';


v_hotspot_base NUMBER(15) := ( v_hotspot_offset_mb * 1024 * 1024 ) / 8192 ;
v_hotspot_blocks NUMBER(15) := ( v_hotspot_mb * 1024 * 1024 ) / 8192 ;

v_num_tmp NUMBER := 0;

v_loop_cnt PLS_INTEGER := 0;
v_rowcnt PLS_INTEGER := 0;
v_updates_cnt PL
S_INTEGER := 0;
v_selects_cnt PLS_INTEGER := 0;

v_random_access_queries_cnt PLS_INTEGER := 0;
v_scan_queries_cnt PLS_INTEGER := 0;

v_do_scan_query BOOLEAN :=FALSE;
v_scan_query_quota  BOOLEAN := FALSE;
v_scan_workload_only BOOLEAN := FALSE;
v_random_workload_only BOOLEAN := FALSE;


v_random_block PLS_INTEGER := 1;
v_tmp PLS_INTEGER;
v_now PLS_INTEGER;
v_brick_wall PLS_INTEGER;

v_begin_time PLS_INTEGER;
v_end_time PLS_INTEGER;
v_total_time PLS_INTEGER;
v_begin_cpu_tm PLS_INTEGER;
v_end_cpu_tm PLS_INTEGER;
v_total_cpu_tm PLS_INTEGER;

v_do_sleeps BOOLEAN := FALSE;
v_loop_control BOOLEAN := FALSE;
v_update_quota BOOLEAN := FALSE;
v_select_only_workload BOOLEAN := FALSE;
v_update_only_workload BOOLEAN := FALSE;
v_do_update BOOLEAN := FALSE;
v_do_hot_schema BOOLEAN := FALSE;
v_stop_immediate BOOLEAN := FALSE;
v_sharing_schema BOOLEAN := FALSE;
v_seed VARCHAR2(128);
v_home_schema_str VARCHAR2(80);
v_scratch VARCHAR2(200) ;

v_cpu_pct NUMBER(6, 3);
v_my_serial NUMBER(16);

BEGIN

v_home_s
chema_str := 'ALTER SESSION SET CURRENT_SCHEMA = user' || v_default_schema_number ;
EXECUTE IMMEDIATE v_home_schema_str;


IF ( v_hot_schema_modulus != 0 ) THEN
	v_do_hot_schema := TRUE;
END IF;

IF ( v_sleep_modulus != 0 )	  THEN
	v_do_sleeps := TRUE;
END IF;

IF ( v_max_loop_iterations &gt; 0 )  THEN
	v_loop_control := TRUE ;
END IF;

IF ( v_update_pct = 0 ) 	  THEN
	v_select_only_workload := TRUE;
END IF;

IF ( v_update_pct = 100 )	  THEN
	v_update_only_workload := TRUE;
END IF;

IF ( v_scan_query_pct = 0 ) 	THEN
	v_random_workload_only := TRUE;
END IF;

IF ( v_scan_query_pct = 100 ) 	THEN
	v_scan_workload_only := TRUE;
END IF;

v_seconds_to_run := v_seconds_to_run * 100 ;

SELECT ((10000000000 * (SID + SERIAL#)) + 1000000000000) INTO v_my_serial from v$session WHERE sid = ( select sys_context('userenv', 'sid') from dual);

-- v_seed := TO_CHAR(v_my_serial) || TO_CHAR(SYSTIMESTAMP, 'YYYYDDMMHH24MISSFFFF');
-- DBMS_RANDOM.seed (val =&gt; v_seed);

v_begin_time := DBM
S_UTILITY.GET_TIME();
v_now := v_begin_time ;
v_brick_wall := v_now + v_seconds_to_run ;
v_begin_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

----------------------------------------------------------------------------------------------------------------------
-- The following WHILE loop is the master work loop control
----------------------------------------------------------------------------------------------------------------------
WHILE ( v_now &lt; v_brick_wall AND v_stop_immediate != TRUE )	LOOP

	IF ( v_do_sleeps = TRUE ) THEN --  This section deals with THINK_TIME
		IF ( MOD( v_random_block,  v_sleep_modulus ) = 0 ) THEN
			v_num_tmp := ROUND (DBMS_RANDOM.VALUE(v_sleep_min,  v_sleep_max) ,  2 );
			-- dbms_output.put_line( 'step 1 ' || v_num_tmp  );
			DBMS_LOCK.SLEEP(v_num_tmp);
		END IF;
	END IF;

	IF ( v_do_hot_schema = TRUE) THEN -- This section deals with Hot Schema
		IF ( MOD(v_loop_cnt,  v_hot_schema_modulus) = 0 ) THEN
			EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA
 = user1';
			v_sharing_schema := TRUE ;
		ELSE
			IF ( v_sharing_schema = TRUE ) THEN
				EXECUTE IMMEDIATE v_home_schema_str;
				v_sharing_schema := FALSE;
			END IF;
		END IF;
	END IF;

	-- Choose the random block. The v_do_hotspot handler that follows can override.
	v_random_block := DBMS_RANDOM.VALUE(v_work_unit + 1,  v_scale - v_work_unit);

	IF ( v_do_hotspot = 'TRUE' ) AND ( MOD(v_loop_cnt,  v_hotspot_modulus ) = 0 ) THEN -- This section deals with Hot Spot
		-- v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base	+ v_work_unit + 1,  v_hotspot_base + v_hotspot_blocks) ;
		v_random_block := DBMS_RANDOM.VALUE( v_hotspot_base + 1,  v_hotspot_base + (v_hotspot_blocks - v_work_unit)) ;
		-- dbms_output.put_line( 'v_loop_cnt ' || v_loop_cnt || ' base ' || (v_hotspot_base  + v_work_unit + 1)  || ' zone ' || v_hotspot_blocks ||  '	Random block ' || v_random_block  );
	END IF;

------------------------------------------------------------------------------------------------------------
----------
-- The following section governs what the SQL execution will be (UPDATE or SELECT)
----------------------------------------------------------------------------------------------------------------------

	IF  ( v_select_only_workload = TRUE ) THEN
		-- handle case where user specified zero pct updates (a SELECT-only workload)
		v_do_update := FALSE;
		v_update_quota := TRUE ;
	ELSE
		IF ( v_update_only_workload = TRUE ) THEN
			-- handle case where user specified 100% updates
			v_do_update := TRUE;
			v_update_quota := FALSE;
		ELSE
			-- In this section we know we are not 100% SELECT,  nor 100% UPDATES
			-- Work out whether this loop iteration is a SELECT or UPDATE here:
			IF ( v_update_quota = FALSE ) THEN
				-- Handle case where user has set UPDATE_PCT to a valid value
				--
				-- We are doing updates during this run and quota has not been met yet
				-- We still vacillate until update quota has been met

				IF ( MOD(v_random_block,  2) = 0 ) THEN
					v_do_update :
= TRUE;
				ELSE
					v_do_update := FALSE;
				END IF;
			ELSE
				-- UPDATE quota has been filled,  force drain some SELECTs
				v_do_update := FALSE;
			END IF;
		END IF;
	END IF;

----------------------------------------------------------------------------------------------------------------------
-- The type of SQL is now determined...execute it in the following section
----------------------------------------------------------------------------------------------------------------------

	IF ( v_do_update != TRUE ) THEN
		--
		-- Do a SELECT statement
		-- Work out scan or random
		IF  ( v_random_workload_only = TRUE ) THEN
			-- handle case where user specified zero pct scan workload (SCAN_PCT = 0)
			v_do_scan_query := FALSE;
			v_scan_query_quota := TRUE ;
		ELSE
			IF ( v_scan_workload_only = TRUE ) THEN
				-- handle case where user specified 100% scan workload (SCAN_PCT = 100)

  	v_do_scan_query := TRUE;
				v_scan_query_quota := FALSE;
			ELSE
				IF ( v_scan_query_quota = FALSE ) THEN
					-- Handle case where user specified valid,  non-zero,  SCAN_PCT
					-- IF ( MOD(v_random_block,  2) = 0 ) THEN
					IF ( MOD(v_loop_cnt,  2) = 0 ) THEN
						v_do_scan_query := TRUE;
					ELSE
						v_do_scan_query := FALSE;
					END IF;
				ELSE
					-- Scan quota has been filled,	force drain some random access SELECTS
					v_do_scan_query := FALSE;
				END IF;
			END IF;
		END IF;


		IF ( v_do_scan_query != TRUE ) THEN
			SELECT COUNT(c2) INTO v_rowcnt
			FROM cf1
			WHERE ( custid &gt; ( v_rand
om_block - v_work_unit ) ) AND	(custid &lt; v_random_block);

			v_random_access_queries_cnt := v_random_access_queries_cnt + 1;
		ELSE
			SELECT COUNT(c2) INTO v_rowcnt FROM cf2;

			v_scan_queries_cnt := v_scan_queries_cnt + 1;

			IF ( v_scan_queries_cnt &gt;= v_scan_query_pct ) THEN
				v_scan_query_quota := TRUE;
			END IF;
		END IF;

		v_selects_cnt := v_selects_cnt + 1;   --increment the number of total selects
	ELSE
		--
		-- Do an UPDATE statement
		--

		v_my_serial := v_my_serial + v_loop_cnt ;

		user1.slobupdate( v_random_block,  v_work_unit,  v_redo_stress,  v_my_serial,  v_obfuscate);
		--
		-- Increment count of UPDATES and set UPDATE quota flag if needed
		--
		v_updates_cnt := v_updates_cnt + 1;

		IF ( v_updates_cnt &gt;= v_update_pct ) THEN
			v_update_quota := TRUE;
		END IF;
	END IF ;
----------------------------------------------------------------------------------------------------------------------
--  At this point SQL has been executed.
Finish this loop iteration with some housekeeping.
----------------------------------------------------------------------------------------------------------------------

	IF ( v_select_only_workload != TRUE ) AND (( v_updates_cnt + v_selects_cnt ) &gt;=  100 ) THEN
		--
		-- Not a SELECT-only workload,	and the global quota (UPDATES to SELECTS) is filled,
		-- so reset flags and counters before continuing
		--
		v_update_quota := FALSE;
		v_updates_cnt := 0;
		v_selects_cnt := 0;
	END IF;

	IF ( v_random_workload_only != TRUE ) AND ( ( v_scan_queries_cnt + v_random_access_queries_cnt ) &gt;=	100 ) THEN
		-- Not a random-only workload and global quota (RANDOM vs SCAN) is filled,
		-- so reset flags and counters
		v_scan_query_quota := FALSE;
		v_scan_queries_cnt := 0;
		v_random_access_queries_cnt := 0;
	END IF;

	v_loop_cnt := v_loop_cnt + 1 ;
	v_now := DBMS_UTILITY.GET_TIME();

	IF ( v_loop_control = TRUE ) AND  ( v_loop_cnt &gt;= v_max_loop_iterations ) THEN
		-- If this i
s a fixed-iteration count test cycle and we've hit the number of
		-- iterations then set exit flag
		v_stop_immediate := TRUE ;
	END IF;
END LOOP;

v_end_time := v_now ;
v_now := DBMS_UTILITY.GET_TIME();
v_end_cpu_tm := DBMS_UTILITY.GET_CPU_TIME();

v_total_time := v_end_time - v_begin_time ;
v_total_cpu_tm := v_end_cpu_tm - v_begin_cpu_tm  ;
v_cpu_pct := ( v_total_cpu_tm / v_total_time ) * 100 ;
v_scratch := v_default_schema_number || '|' || v_total_time || '|' || v_total_cpu_tm || '|' || v_cpu_pct ;

END;</pre_sqltext></td></tr>
</table>
<p />
<a class="awr" href="#638">Back to Supplemental Information</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="43"></a>
<h2 class="awr">
Active Session History(ASH) Report
</h2>
<ul>
<li class="awr"><a class="awr" href="#9981">Top SQL with Top Events</a></li>
<li class="awr"><a class="awr" href="#9980">Top SQL with Top Row Sources</a></li>
<li class="awr"><a class="awr" href="#9984">Top Sessions</a></li>
<li class="awr"><a class="awr" href="#9983">Top Blocking Sessions</a></li>
<li class="awr"><a class="awr" href="#9982">Top PL/SQL Procedures</a></li>
<li class="awr"><a class="awr" href="#9979">Top Events</a></li>
<li class="awr"><a class="awr" href="#9985">Top Event P1/P2/P3 Values</a></li>
<li class="awr"><a class="awr" href="#9978">Top DB Objects</a></li>
<li class="awr"><a class="awr" href="#9977">Activity Over Time</a></li>
</ul>
<a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9981"></a>
<h3 class="awr">Top SQL with Top Events</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top events by DB Time	 for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event that the SQL is	   waiting on. </li>
<li class="awr"> % Row Source is the percentage of DB Time due to the row source for the     SQL waiting on the event. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top SQL by Top Wait Events"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">Top Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>4742</td><td align="right" class='awrc'>60.95</td>
<td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>27.51</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>23.31</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">4742</div></td><td align="right" class='awrnc'><div class="hidden">60.95494801694262610704659222179437812861</div></td>
<td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>15.71</td><td class='awrnc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrnc'>15.40</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrc'><div class="hidden">1497866750</div></td><td align="right" class='awrc'><div class="hidden">4742</div></td><td align="right" class='awrc'><div class="hidden">60.95494801694262610704659222179437812861</div></td>
<td class='awrc'>free buffer waits</td><td align="right" class='awrc'>12.27</td><td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>11.74</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrnc'>203653710</td><td align="right" class='awrnc'>2239</td><td align="right" class='awrnc'>29.35</td>
<td class='awrnc'>write complete waits</td><td align="right" class='awrnc'>10.01</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>10.00</td>
<td class='awrnc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrc'><div class="hidden">203653710</div></td><td align="right" class='awrc'><div class="hidden">2239</div></td><td align="right" class='awrc'><div class="hidden">29.35438326273905788730586574252342446413</div></td>
<td class='awrc'>gc current grant 2-way</td><td align="right" class='awrc'>5.87</td><td class='awrc'>UPDATE</td><td align="right" class='awrc'>5.87</td>
<td class='awrc'></td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">2239</div></td><td align="right" class='awrnc'><div class="hidden">29.35438326273905788730586574252342446413</div></td>
<td class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>2.86</td><td class='awrnc'>UPDATE</td><td align="right" class='awrnc'>2.82</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9980"></a>
<h3 class="awr">Top SQL with Top Row Sources</h3>
<ul>
<li class="awr"> Top SQL statements by DB Time along with the top row sources by DB Time    for those SQLs. </li>
<li class="awr"> % Activity is the percentage of DB Time due to the SQL. </li>
<li class="awr"> % Row Source is the percentage of DB Time spent on the row source by	   that SQL. </li>
<li class="awr"> % Event is the percentage of DB Time spent on the event by the      SQL executing the row source. </li>
<li class="awr"> Executions is the number of executions of the SQL that were sampled in ASH.</li>
</ul>
<table border="0" class="tdiff" summary="This table display the Top SQLs with Top Row Sources"><tr><th class="awrbg" scope="col">SQL ID</th><th class="awrbg" scope="col">Plan Hash</th><th class="awrbg" scope="col">Executions</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Row Source</th><th class="awrbg" scope="col">% Row Source</th><th class="awrbg" scope="col">Top Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">SQL Text</th></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#bhdvtsvjhgvrh">bhdvtsvjhgvrh</a></td><td align="right" class='awrc'>1497866750</td><td align="right" class='awrc'>4742</td><td align="right" class='awrc'>60.95</td>
<td class='awrc'>TABLE ACCESS - BY INDEX ROWID BATCHED</td><td align="right" class='awrc'>54.61</td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>23.31</td>
<td class='awrc'>SELECT COUNT(C2) FROM CF1 WHER...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">bhdvtsvjhgvrh</div></td><td align="right" class='awrnc'><div class="hidden">1497866750</div></td><td align="right" class='awrnc'><div class="hidden">4742</div></td><td align="right" class='awrnc'><div class="hidden">60.95494801694262610704659222179437812861</div></td>
<td class='awrnc'>INDEX - RANGE SCAN</td><td align="right" class='awrnc'>5.62</td><td class='awrnc'>gc cr grant busy</td><td align="right" class='awrnc'>4.20</td>
<td class='awrnc'></td></tr>
<tr><td align="right" class='awrc'><a class="awr" href="#35dumc2tpr9dv">35dumc2tpr9dv</a></td><td align="right" class='awrc'>203653710</td><td align="right" class='awrc'>2239</td><td align="right" class='awrc'>29.35</td>
<td class='awrc'>UPDATE</td><td align="right" class='awrc'>26.52</td><td class='awrc'>write complete waits</td><td align="right" class='awrc'>10.00</td>
<td class='awrc'>UPDATE CF1 SET C2 = :B3 , C20 ...</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">35dumc2tpr9dv</div></td><td align="right" class='awrnc'><div class="hidden">203653710</div></td><td align="right" class='awrnc'><div class="hidden">2239</div></td><td align="right" class='awrnc'><div class="hidden">29.35438326273905788730586574252342446413</div></td>
<td class='awrnc'>UPDATE STATEMENT</td><td align="right" class='awrnc'>2.16</td><td class='awrnc'>enq: HW - contention</td><td align="right" class='awrnc'>1.46</td>
<td class='awrnc'></td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9984"></a>
<h3 class="awr">Top Sessions</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9983"></a>
<h3 class="awr">Top Blocking Sessions</h3>
<ul>
<li class="awr"> Blocking session activity percentages are calculated with respect to	     waits on enqueues, latches and &quot;buffer busy&quot; only  </li>
<li class="awr"> '% Activity' represents the load on the database caused by	   a particular blocking session </li>
<li class="awr"> '# Samples Active' shows the number of ASH samples in which the	blocking session was found active. </li>
<li class="awr"> 'XIDs' shows the number of distinct transaction IDs sampled in ASH	   when the blocking session was found active.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top sessions that are blocking other sessions."><tr><th class="awrbg" scope="col">Blocking Sid (Inst)</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Event Caused</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">User</th><th class="awrbg" scope="col">Program</th><th class="awrbg" scope="col"># Samples Active</th><th class="awrbg" scope="col">XIDs</th></tr>
<tr><td align="right" scope="row" class='awrc'>5809,59039(     1)</td><td align="right" class='awrc'>3.49</td><td class='awrc'>free buffer waits</td><td align="right" class='awrc'>2.31</td>
<td class='awrc'>SYS</td><td class='awrc'>oracle@mcracpo...le.com (DBW3)</td><td align="right" class='awrc'>27/36 [ 74%]</td><td align="right" class='awrc'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'><div class="hidden">5809,59039(     1)</div></td><td align="right" class='awrnc'><div class="hidden">3.49120780387626748812732640225901681427</div></td><td class='awrnc'>write complete waits</td><td align="right" class='awrnc'>1.18</td>
<td class='awrnc'><div class="hidden">SYS</div></td><td class='awrnc'><div class="hidden">oracle@mcracpo...le.com (DBW3)</div></td><td align="right" class='awrnc'><div class="hidden">27/36 [ 74%]</div></td><td align="right" class='awrnc'><div class="hidden">0</div></td></tr>
<tr><td align="right" scope="row" class='awrc'>5688,56294(     1)</td><td align="right" class='awrc'>2.39</td><td class='awrc'>free buffer waits</td><td align="right" class='awrc'>1.44</td>
<td class='awrc'>SYS</td><td class='awrc'>oracle@mcracpo...le.com (DBW2)</td><td align="right" class='awrc'>27/36 [ 74%]</td><td align="right" class='awrc'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>5930,21205(	1)</td><td align="right" class='awrnc'>2.28</td><td class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>1.45</td>
<td class='awrnc'>SYS</td><td class='awrnc'>oracle@mcracpo...le.com (DBW4)</td><td align="right" class='awrnc'>27/36 [ 74%]</td><td align="right" class='awrnc'>0</td></tr>
<tr><td align="right" scope="row" class='awrc'>6051,22574(     1)</td><td align="right" class='awrc'>2.00</td><td class='awrc'>write complete waits</td><td align="right" class='awrc'>1.08</td>
<td class='awrc'>SYS</td><td class='awrc'>oracle@mcracpo...le.com (DBW5)</td><td align="right" class='awrc'>27/36 [ 74%]</td><td align="right" class='awrc'>0</td></tr>
<tr><td align="right" scope="row" class='awrnc'>6172,20781(	1)</td><td align="right" class='awrnc'>1.89</td><td class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>1.03</td>
<td class='awrnc'>SYS</td><td class='awrnc'>oracle@mcracpo...le.com (DBW6)</td><td align="right" class='awrnc'>27/36 [ 74%]</td><td align="right" class='awrnc'>0</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9982"></a>
<h3 class="awr">Top PL/SQL Procedures</h3>
<ul>
<li class="awr"> 'PL/SQL entry subprogram' represents the application's top-level	 entry-point (procedure, function, trigger, package initialization	 or RPC call) into PL/SQL. </li>
<li class="awr"> 'PL/SQL current subprogram' is the PL/SQL subprogram being executed	    at the point of sampling . If the value is 'SQL', it represents	   the percentage of time spent executing SQL for the particular	PL/SQL entry subprogram</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the Top PL/SQL procedures"><tr><th class="awrbg" scope="col">PL/SQL Entry Subprogram</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">PL/SQL Current Subprogram</th><th class="awrbg" scope="col">% Current</th></tr>
<tr><td scope="row" class='awrc'>USER1.SLOBUPDATE</td><td align="right" class='awrc'>30.52</td>
<td class='awrc'>SQL</td><td align="right" class='awrc'>30.52</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9979"></a>
<h3 class="awr">Top Events</h3>
<ul>
<li class="awr"> Top Events by DB Time </li>
<li class="awr"> % Activity is the percentage of DB Time due to the event</li>
</ul>
<table border="0" class="tdiff" summary="This table shows the top events"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Class</th><th class="awrbg" scope="col">Session Type</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Avg Active Sessions</th></tr>
<tr><td scope="row" class='awrc'>gc cr grant busy</td><td class='awrc'>Cluster</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>27.88</td><td align="right" class='awrc'>59.83</td></tr>
<tr><td scope="row" class='awrnc'>db file sequential read</td><td class='awrnc'>User I/O</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>17.55</td><td align="right" class='awrnc'>37.66</td></tr>
<tr><td scope="row" class='awrc'>free buffer waits</td><td class='awrc'>Configuration</td><td class='awrc'>FOREGROUND</td>
<td align="right" class='awrc'>15.13</td><td align="right" class='awrc'>32.48</td></tr>
<tr><td scope="row" class='awrnc'>write complete waits</td><td class='awrnc'>Configuration</td><td class='awrnc'>FOREGROUND</td>
<td align="right" class='awrnc'>10.04</td><td align="right" class='awrnc'>21.54</td></tr>
<tr><td scope="row" class='awrc'>CPU + Wait for CPU</td><td class='awrc'>CPU</td><td class='awrc'>BACKGROUND</td>
<td align="right" class='awrc'>5.94</td><td align="right" class='awrc'>12.75</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9985"></a>
<h3 class="awr">Top Event P1/P2/P3 Values</h3>
<ul>
<li class="awr"> Top Events by DB Time and the top P1/P2/P3 values for those events. </li>
<li class="awr"> % Event is the percentage of DB Time due to the event	</li>
<li class="awr"> % Activity is the percentage of DB Time due to the event with the given     P1,P2,P3 Values.</li>
</ul>
<table border="0" class="tdiff" summary="This table displays the top event P1/P2/P3 values"><tr><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">% Event</th><th class="awrbg" scope="col">P1, P2, P3 Values</th><th class="awrbg" scope="col">% Activity</th><th class="awrbg" scope="col">Parameter 1</th><th class="awrbg" scope="col">Parameter 2</th><th class="awrbg" scope="col">Parameter 3</th></tr>
<tr><td scope="row" class='awrc'>db file sequential read</td><td align="right" class='awrc'>17.55</td><td align="right" class='awrc'>&quot;9&quot;,&quot;97257061&quot;,&quot;1&quot;</td><td align="right" class='awrc'>0.03</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>blocks</td></tr>
<tr><td scope="row" class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>15.15</td><td align="right" class='awrnc'>&quot;4&quot;,&quot;3983&quot;,&quot;165&quot;</td><td align="right" class='awrnc'>0.01</td>
<td class='awrnc'>file#</td><td class='awrnc'>block#</td><td class='awrnc'>set-id#</td></tr>
<tr><td scope="row" class='awrc'>write complete waits</td><td align="right" class='awrc'>10.05</td><td align="right" class='awrc'>&quot;4&quot;,&quot;15589&quot;,&quot;0&quot;</td><td align="right" class='awrc'>0.03</td>
<td class='awrc'>file#</td><td class='awrc'>block#</td><td class='awrc'>NOT DEFINED</td></tr>
<tr><td scope="row" class='awrnc'>KJC: Wait for msg sends to complete</td><td align="right" class='awrnc'>1.55</td><td align="right" class='awrnc'>&quot;2484572848&quot;,&quot;65539&quot;,&quot;32&quot;</td><td align="right" class='awrnc'>0.03</td>
<td class='awrnc'>msg</td><td class='awrnc'>dest|rcvr</td><td class='awrnc'>mtype</td></tr>
<tr><td scope="row" class='awrc'>enq: HW - contention</td><td align="right" class='awrc'>1.46</td><td align="right" class='awrc'>&quot;1213661190&quot;,&quot;2&quot;,&quot;16786240&quot;</td><td align="right" class='awrc'>0.64</td>
<td class='awrc'>name|mode</td><td class='awrc'>table space #</td><td class='awrc'>block</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9978"></a>
<h3 class="awr">Top DB Objects</h3>

<p />
		  No data exists for this section of the report.
<p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<a class="awr" name="9977"></a>
<h3 class="awr">Activity Over Time</h3>
<ul>
<li class="awr"> Analysis period is divided into smaller time slots as indicated    in the 'Slot Time (Duration)'. </li>
<li class="awr"> Top 3 events are reported in each of those slots </li>
<li class="awr"> 'Slot Count' shows the number of ASH samples in that slot </li>
<li class="awr"> 'Event Count' shows the number of ASH samples waiting for    that event in that slot </li>
<li class="awr"> '% Event' is 'Event Count' over all ASH samples in the analysis period</li>
</ul>
<table border="0" class="tdiff" summary="This table show the activity in ASH over time"><tr><th class="awrbg" scope="col">Slot Time (Duration)</th><th class="awrbg" scope="col">Slot Count</th><th class="awrbg" scope="col">Event</th><th class="awrbg" scope="col">Event Count</th><th class="awrbg" scope="col">% Event</th></tr>
<tr><td align="right" class='awrc'>09:26:07   (3.9 min)</td><td align="right" class='awrc'>6,833</td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>2,031</td><td align="right" class='awrc'>26.07</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">09:26:07   (3.9 min)</div></td><td align="right" class='awrnc'><div class="hidden">6833</div></td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>1,231</td><td align="right" class='awrnc'>15.80</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">09:26:07   (3.9 min)</div></td><td align="right" class='awrc'><div class="hidden">6833</div></td><td class='awrc'>free buffer waits</td><td align="right" class='awrc'>997</td><td align="right" class='awrc'>12.80</td></tr>
<tr><td align="right" class='awrnc'>09:30:00   (2.2 min)</td><td align="right" class='awrnc'>958</td><td class='awrnc'>free buffer waits</td><td align="right" class='awrnc'>183</td><td align="right" class='awrnc'>2.35</td></tr>
<tr><td align="right" class='awrc'><div class="hidden">09:30:00   (2.2 min)</div></td><td align="right" class='awrc'><div class="hidden">958</div></td><td class='awrc'>gc cr grant busy</td><td align="right" class='awrc'>144</td><td align="right" class='awrc'>1.85</td></tr>
<tr><td align="right" class='awrnc'><div class="hidden">09:30:00   (2.2 min)</div></td><td align="right" class='awrnc'><div class="hidden">958</div></td><td class='awrnc'>db file sequential read</td><td align="right" class='awrnc'>136</td><td align="right" class='awrnc'>1.75</td></tr>
</table><p />
<hr align="left" width="20%" /><p />
<a class="awr" href="#43">Back to Active Session History(ASH) Report</a>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<a class="awr" name="99994"></a>
<h2>ADDM Task ADDM:1451622190_48</h2>
<pre>
	  ADDM Report for Task &apos;ADDM:1451622190_48&apos;
	  -----------------------------------------

Analysis Period
---------------
AWR snapshot range from 47 to 48.
Time period starts at 17-FEB-20 09.26.07 AM
Time period ends at 17-FEB-20 09.32.10 AM

Analysis Target
---------------
Database &apos;P30SDB&apos; with DB ID 1451622190.
Database version 19.0.0.0.0.
ADDM performed an analysis of all instances.

Activity During the Analysis Period
-----------------------------------
Total database time was 65033 seconds.
The average number of active sessions was 179.15.

Summary of Findings
-------------------
    Description 		  Active Sessions      Recommendations
				  Percent of Activity
    ----------------------------  -------------------  ---------------
1   Interconnect Latency	  179.15 | 100	       1
2   Top SQL Statements		  175.63 | 98.04       2
3   Global Cache Messaging	  81.66 | 45.58        1
4   Buffer Busy - Hot Objects	  60.96 | 34.03        0
5   &quot;Configuration&quot; Wait Class    50.94 | 28.43	 0
6   Free Buffer Waits		  46.69 | 26.06        1
7   &quot;User I/O&quot; wait Class	    31.05 | 17.33	 0
8   Unusual &quot;Cluster&quot; Wait Event  5.63 | 3.14 	 3
9   Global Cache Lost Blocks	  4.66 | 2.6	       1
10  High Watermark Waits	  4.25 | 2.37	       0
11  Unusual &quot;Other&quot; Wait Event    3.96 | 2.21 	 3


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	  Findings and Recommendations
	  ----------------------------

Finding 1: Interconnect Latency
Impact is 179.15 active sessions, 100% of total activity.
---------------------------------------------------------
Higher than expected latency of the cluster interconnect was responsible for
significant database time.
The database was consuming 59393 kilo bits per second of interconnect
bandwidth.
2% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 93% for database lock management.
The average latency for 8K interconnect messages was 1050 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  55.95	     ADDM:1451622190_1_48
    2	    p30sdb2  44.05	     ADDM:1451622190_2_48

   Recommendation 1: Host Configuration
   Estimated benefit is 179.15 active sessions, 100% of total activity.
   --------------------------------------------------------------------
   Action
      Investigate cause of high network interconnect latency between database
      instances. Oracle&apos;s recommended solution is to use a high speed
      dedicated network.
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 81.66 active sessions, 45.58% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 87.31 active sessions, 48.74% of total activity.


Finding 2: Top SQL Statements
Impact is 175.63 active sessions, 98.04% of total activity.
-----------------------------------------------------------
SQL statements consuming significant database time were found. These
statements offer a good opportunity for performance improvement.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  54.03	     ADDM:1451622190_1_48
    2	    p30sdb2  45.97	     ADDM:1451622190_2_48

   Recommendation 1: SQL Tuning
   Estimated benefit is 94.64 active sessions, 52.83% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the SELECT statement with SQL_ID
      &quot;bhdvtsvjhgvrh&quot;.
      Related Object
	 SQL statement with SQL_ID bhdvtsvjhgvrh.
	 SELECT COUNT(C2) FROM CF1 WHERE ( CUSTID &gt; ( :B1 - :B2 ) ) AND
	 (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 79% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;bhdvtsvjhgvrh&quot; was executed 3062456 times and
      had an average elapsed time of 0.012 seconds.
   Rationale
      At least 2 distinct execution plans were utilized for this SQL statement
      during the analysis period.

   Recommendation 2: SQL Tuning
   Estimated benefit is 57.11 active sessions, 31.88% of total activity.
   ---------------------------------------------------------------------
   Action
      Run SQL Tuning Advisor on the UPDATE statement with SQL_ID
      &quot;35dumc2tpr9dv&quot;. Additionally, investigate this statement for possible
      performance improvements. You can supplement the information given here
      with an ASH report for this SQL_ID.
      Related Object
	 SQL statement with SQL_ID 35dumc2tpr9dv.
	 UPDATE CF1 SET C2 = :B3 , C20 = :B3 WHERE ( CUSTID &gt; ( :B1 - :B2 ))
	 AND (CUSTID &lt; :B1 )
   Rationale
      The SQL spent 49% of its database time on CPU, I/O and Cluster waits.
      This part of database time may be improved by the SQL Tuning Advisor.
      Look at data given below and an ASH report for further performance
      improvements.
   Rationale
      Database time for this SQL was divided as follows: 100% for SQL
      execution, 0% for parsing, 0% for PL/SQL execution and 0% for Java
      execution.
   Rationale
      SQL statement with SQL_ID &quot;35dumc2tpr9dv&quot; was executed 340333 times and
      had an average elapsed time of 0.057 seconds.
   Rationale
      At least 2 distinct execution plans were utilized for this SQL statement
      during the analysis period.
   Rationale
      Waiting for event &quot;write complete waits&quot; in wait class &quot;Configuration&quot;
      accounted for 34% of the database time spent in processing the SQL
      statement with SQL_ID &quot;35dumc2tpr9dv&quot;.
   Rationale
      Waiting for event &quot;free buffer waits&quot; in wait class &quot;Configuration&quot;
      accounted for 9% of the database time spent in processing the SQL
      statement with SQL_ID &quot;35dumc2tpr9dv&quot;.


Finding 3: Global Cache Messaging
Impact is 81.66 active sessions, 45.58% of total activity.
----------------------------------------------------------
Inter-instance messaging was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p30sdb2  60.39	     ADDM:1451622190_2_48
    1	    p30sdb1  39.61	     ADDM:1451622190_1_48

   Recommendation 1: Application Analysis
   Estimated benefit is 81.66 active sessions, 45.58% of total activity.
   ---------------------------------------------------------------------
   Action
      Look at the &quot;Top SQL Statements&quot; finding for SQL statements consuming
      significant time on Cluster waits. For example, the SELECT statement
      with SQL_ID &quot;bhdvtsvjhgvrh&quot; is responsible for 73% of Cluster wait
      during the analysis period.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 87.31 active sessions, 48.74% of total activity.


Finding 4: Buffer Busy - Hot Objects
Impact is 60.96 active sessions, 34.03% of total activity.
----------------------------------------------------------
Read and write contention on database blocks was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  100	     ADDM:1451622190_1_48

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Read and write contention on database blocks was consuming significant
      database time.
      Impact is 60.96 active sessions, 34.03% of total activity.
	 Inter-instance messaging was consuming significant database time.
	 Impact is 81.66 active sessions, 45.58% of total activity.
	    Wait class &quot;Cluster&quot; was consuming significant database time.
	    Impact is 87.31 active sessions, 48.74% of total activity.


Finding 5: &quot;Configuration&quot; Wait Class
Impact is 50.94 active sessions, 28.43% of total activity.
----------------------------------------------------------
Wait class &quot;Configuration&quot; was consuming significant database time.
Waits for archiver processes were not consuming significant database time.
Log file switch operations were not consuming significant database time while
waiting for checkpoint completion.
Space Transaction (ST) enqueue waits were not consuming significant database
time.
ITL enqueue waits were not consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  78.43	     ADDM:1451622190_1_48
    2	    p30sdb2  21.57	     ADDM:1451622190_2_48

   No recommendations are available.


Finding 6: Free Buffer Waits
Impact is 46.69 active sessions, 26.06% of total activity.
----------------------------------------------------------
Waits for free buffers were consuming significant database time in some
instances. Database writers (DBWR) were unable to keep up with the demand for
free buffers.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  76.96	     ADDM:1451622190_1_48
    2	    p30sdb2  23.04	     ADDM:1451622190_2_48

   Recommendation 1: Examine instance ADDM
   Estimated benefit is 46.69 active sessions, 26.06% of total activity.
   ---------------------------------------------------------------------
   Action
      Investigate the I/O subsystem&apos;s write performance. Consider increasing
      the number of database writers, the appropriateness of asynchronous I/O,
      and use of direct path inserts. Check the ADDM analysis of affected
      instances for more details.


Finding 7: &quot;User I/O&quot; wait Class
Impact is 31.05 active sessions, 17.33% of total activity.
----------------------------------------------------------
Wait class &quot;User I/O&quot; was consuming significant database time.
The throughput of the I/O subsystem was not significantly lower than expected.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  66.04	     ADDM:1451622190_1_48
    2	    p30sdb2  33.96	     ADDM:1451622190_2_48

   No recommendations are available.


Finding 8: Unusual &quot;Cluster&quot; Wait Event
Impact is 5.63 active sessions, 3.14% of total activity.
--------------------------------------------------------
Wait event &quot;gc current grant read-mostly invalidation&quot; in wait class &quot;Cluster&quot;
was consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  51.42	     ADDM:1451622190_1_48
    2	    p30sdb2  48.58	     ADDM:1451622190_2_48

   Recommendation 1: Application Analysis
   Estimated benefit is 5.63 active sessions, 3.14% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;gc current grant read-mostly
      invalidation&quot; waits. Refer to Oracle&apos;s &quot;Database Reference&quot; for the
      description of this wait event.

   Recommendation 2: Application Analysis
   Estimated benefit is 5.63 active sessions, 3.14% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;gc current grant read-mostly
      invalidation&quot; waits in Module &quot;SQL*Plus&quot;.

   Recommendation 3: Application Analysis
   Estimated benefit is 5.63 active sessions, 3.14% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;gc current grant read-mostly
      invalidation&quot; waits in Service &quot;p30sdb.example.com&quot;.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Cluster&quot; was consuming significant database time.
      Impact is 87.31 active sessions, 48.74% of total activity.


Finding 9: Global Cache Lost Blocks
Impact is 4.66 active sessions, 2.6% of total activity.
-------------------------------------------------------
Cluster communications that were retried due to lost blocks consumed
significant database time.
The database was consuming 59393 kilo bits per second of interconnect
bandwidth.
2% of this interconnect bandwidth was used for global cache messaging, 0% for
parallel query messaging and 93% for database lock management.
The average latency for 8K interconnect messages was 1050 microseconds.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p30sdb2  96.5	     ADDM:1451622190_2_48

   Recommendation 1: Host Configuration
   Estimated benefit is 4.66 active sessions, 2.6% of total activity.
   ------------------------------------------------------------------
   Action
      Check the configuration of the cluster interconnect. Check OS setup like
      adapter setting, firmware and driver release. Check that the OS&apos;s socket
      receive buffers are large enough to store an entire multiblock read. The
      value of parameter &quot;db_file_multiblock_read_count&quot; may be decreased as a
      workaround.
   Action
      Look at the instance level ADDM tasks for a list of interconnect devices
      used by a specific instance.

   Symptoms That Led to the Finding:
   ---------------------------------
      Inter-instance messaging was consuming significant database time.
      Impact is 81.66 active sessions, 45.58% of total activity.
	 Wait class &quot;Cluster&quot; was consuming significant database time.
	 Impact is 87.31 active sessions, 48.74% of total activity.


Finding 10: High Watermark Waits
Impact is 4.25 active sessions, 2.37% of total activity.
--------------------------------------------------------
Contention on the high watermark (HW) enqueue was consuming significant
database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    1	    p30sdb1  94.58	     ADDM:1451622190_1_48

   No recommendations are available.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Configuration&quot; was consuming significant database time.
      Impact is 50.94 active sessions, 28.43% of total activity.


Finding 11: Unusual &quot;Other&quot; Wait Event
Impact is 3.96 active sessions, 2.21% of total activity.
--------------------------------------------------------
Wait event &quot;KJC: Wait for msg sends to complete&quot; in wait class &quot;Other&quot; was
consuming significant database time.

Instances that were significantly affected by this finding:
    Number  Name     Percent Impact  ADDM Task Name
    ------  -------  --------------  --------------
    2	    p30sdb2  64.71	     ADDM:1451622190_2_48
    1	    p30sdb1  35.29	     ADDM:1451622190_1_48

   Recommendation 1: Application Analysis
   Estimated benefit is 3.96 active sessions, 2.21% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;KJC: Wait for msg sends to complete&quot;
      waits. Refer to Oracle&apos;s &quot;Database Reference&quot; for the description of
      this wait event.

   Recommendation 2: Application Analysis
   Estimated benefit is 3.92 active sessions, 2.19% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;KJC: Wait for msg sends to complete&quot;
      waits in Module &quot;SQL*Plus&quot;.

   Recommendation 3: Application Analysis
   Estimated benefit is 3.92 active sessions, 2.19% of total activity.
   -------------------------------------------------------------------
   Action
      Investigate the cause for high &quot;KJC: Wait for msg sends to complete&quot;
      waits in Service &quot;p30sdb.example.com&quot;.

   Symptoms That Led to the Finding:
   ---------------------------------
      Wait class &quot;Other&quot; was consuming significant database time.
      Impact is 4.04 active sessions, 2.26% of total activity.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  Additional Information
	  ----------------------

Instances that were analyzed:
-----------------------------
    Number  Name     Host Name		    Active Sessions  Percent of Activity
    ------  -------  ---------------------  ---------------  -------------------
    1	    p30sdb1  mcracpoc1.example.com  100.23	     55.95
    2	    p30sdb2  mcracpoc2.example.com  78.92	     44.05

Warnings
--------
The flushing of snapshots 47 and 48 took 49 seconds which is 13% of the
analysis period time. This may reduce the reliability of the ADDM analysis.

Miscellaneous Information
-------------------------
Wait class &quot;Application&quot; was not consuming significant database time.
Wait class &quot;Commit&quot; was not consuming significant database time.
Wait class &quot;Concurrency&quot; was not consuming significant database time.
Wait class &quot;Network&quot; was not consuming significant database time.
Session connect and disconnect calls were not consuming significant database
time.

</pre>
<br /><a class="awr" href="#top">Back to Top</a><p />
<p />
<p />
End of Report
</body></html>
Report written to awr_rac.html
SQL> Disconnected from Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0
NOTIFY  : 2020.02.17-09:32:33 : Compressing file: "awr_rac.html".
NOTIFY  : 2020.02.17-09:32:33 : Compressing file: "awr.html".
